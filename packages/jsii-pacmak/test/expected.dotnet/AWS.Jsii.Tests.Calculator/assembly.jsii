{
  "schema": "jsii/1.0",
  "types": {
    "jsii$jsii_calc$.IFriendlier": {
      "docs": {
        "comment": "Even friendlier classes can implement this interface."
      },
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii$jsii_calc_lib$.IFriendly"
        }
      ],
      "methods": [
        {
          "docs": {
            "returns": "A goodbye blessing.",
            "comment": "Say goodbye."
          },
          "name": "goodbye",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say farewell."
          },
          "name": "farewell",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.IFriendlier",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "IFriendlier"
    },
    "jsii$jsii_calc$.IRandomNumberGenerator": {
      "docs": {
        "comment": "Generates random numbers."
      },
      "kind": "interface",
      "methods": [
        {
          "docs": {
            "returns": "A random number.",
            "comment": "Returns another random number."
          },
          "name": "next",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.IRandomNumberGenerator",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "IRandomNumberGenerator"
    },
    "jsii$jsii_calc$.IFriendlyRandomGenerator": {
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii$jsii_calc$.IRandomNumberGenerator"
        },
        {
          "fqn": "jsii$jsii_calc_lib$.IFriendly"
        }
      ],
      "fqn": "jsii$jsii_calc$.IFriendlyRandomGenerator",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "IFriendlyRandomGenerator"
    },
    "jsii$jsii_calc$.BinaryOperation": {
      "docs": {
        "comment": "Represents an operation with two operands."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "param": "lhs Left-hand side operand",
            "comment": "Left-hand side operand"
          },
          "name": "lhs",
          "type": {
            "fqn": "jsii$jsii_calc_lib$.Value"
          },
          "immutable": true
        },
        {
          "docs": {
            "param": "rhs Right-hand side operand",
            "comment": "Right-hand side operand"
          },
          "name": "rhs",
          "type": {
            "fqn": "jsii$jsii_calc_lib$.Value"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Say hello!"
          },
          "name": "hello",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$jsii_calc_lib$.IFriendly"
        }
      ],
      "fqn": "jsii$jsii_calc$.BinaryOperation",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "BinaryOperation",
      "base": {
        "fqn": "jsii$jsii_calc_lib$.Operation"
      },
      "abstract": true,
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "lhs Left-hand side operand",
              "comment": "Left-hand side operand"
            },
            "name": "lhs",
            "type": {
              "fqn": "jsii$jsii_calc_lib$.Value"
            }
          },
          {
            "docs": {
              "param": "rhs Right-hand side operand",
              "comment": "Right-hand side operand"
            },
            "name": "rhs",
            "type": {
              "fqn": "jsii$jsii_calc_lib$.Value"
            }
          }
        ],
        "docs": {
          "comment": "Creates a BinaryOperation"
        },
        "initializer": true
      }
    },
    "jsii$jsii_calc$.Add": {
      "docs": {
        "comment": "The \"+\" binary operation."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The value."
          },
          "name": "value",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.Add",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "Add",
      "base": {
        "fqn": "jsii$jsii_calc$.BinaryOperation"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "lhs Left-hand side operand",
              "comment": "Left-hand side operand"
            },
            "name": "lhs",
            "type": {
              "fqn": "jsii$jsii_calc_lib$.Value"
            }
          },
          {
            "docs": {
              "param": "rhs Right-hand side operand",
              "comment": "Right-hand side operand"
            },
            "name": "rhs",
            "type": {
              "fqn": "jsii$jsii_calc_lib$.Value"
            }
          }
        ],
        "docs": {
          "comment": "Creates a BinaryOperation"
        },
        "initializer": true
      }
    },
    "jsii$jsii_calc$.Multiply": {
      "docs": {
        "comment": "The \"*\" binary operation."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The value."
          },
          "name": "value",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say goodbye."
          },
          "name": "goodbye",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say farewell."
          },
          "name": "farewell",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns another random number."
          },
          "name": "next",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$jsii_calc$.IFriendlier"
        },
        {
          "fqn": "jsii$jsii_calc$.IRandomNumberGenerator"
        }
      ],
      "fqn": "jsii$jsii_calc$.Multiply",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "Multiply",
      "base": {
        "fqn": "jsii$jsii_calc$.BinaryOperation"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "lhs Left-hand side operand",
              "comment": "Left-hand side operand"
            },
            "name": "lhs",
            "type": {
              "fqn": "jsii$jsii_calc_lib$.Value"
            }
          },
          {
            "docs": {
              "param": "rhs Right-hand side operand",
              "comment": "Right-hand side operand"
            },
            "name": "rhs",
            "type": {
              "fqn": "jsii$jsii_calc_lib$.Value"
            }
          }
        ],
        "docs": {
          "comment": "Creates a BinaryOperation"
        },
        "initializer": true
      }
    },
    "jsii$jsii_calc$.UnaryOperation": {
      "docs": {
        "comment": "An operation on a single operand."
      },
      "kind": "class",
      "properties": [
        {
          "name": "operand",
          "type": {
            "fqn": "jsii$jsii_calc_lib$.Value"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$jsii_calc$.UnaryOperation",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "UnaryOperation",
      "base": {
        "fqn": "jsii$jsii_calc_lib$.Operation"
      },
      "abstract": true,
      "initializer": {
        "parameters": [
          {
            "name": "operand",
            "type": {
              "fqn": "jsii$jsii_calc_lib$.Value"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$jsii_calc$.Negate": {
      "docs": {
        "comment": "The negation operation (\"-value\")"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The value."
          },
          "name": "value",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say hello!"
          },
          "name": "hello",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say goodbye."
          },
          "name": "goodbye",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say farewell."
          },
          "name": "farewell",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$jsii_calc$.IFriendlier"
        }
      ],
      "fqn": "jsii$jsii_calc$.Negate",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "Negate",
      "base": {
        "fqn": "jsii$jsii_calc$.UnaryOperation"
      },
      "initializer": {
        "parameters": [
          {
            "name": "operand",
            "type": {
              "fqn": "jsii$jsii_calc_lib$.Value"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$jsii_calc$.composition.CompositionStringStyle": {
      "docs": {
        "comment": "Style of .toString() output for CompositeOperation."
      },
      "kind": "enum",
      "members": [
        {
          "name": "Normal"
        },
        {
          "name": "Decorated"
        }
      ],
      "fqn": "jsii$jsii_calc$.composition.CompositionStringStyle",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$.composition",
      "name": "CompositionStringStyle"
    },
    "jsii$jsii_calc$.composition.CompositeOperation": {
      "docs": {
        "comment": "Abstract operation composed from an expression of other operations."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The .toString() style."
          },
          "name": "stringStyle",
          "type": {
            "fqn": "jsii$jsii_calc$.composition.CompositionStringStyle"
          }
        },
        {
          "docs": {
            "comment": "A set of prefixes to include in a decorated .toString()."
          },
          "name": "decorationPrefixes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "A set of postfixes to include in a decorated .toString()."
          },
          "name": "decorationPostfixes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The value."
          },
          "name": "value",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The expression that this operation consists of.\nMust be implemented by derived classes."
          },
          "name": "expression",
          "type": {
            "fqn": "jsii$jsii_calc_lib$.Value"
          },
          "immutable": true,
          "abstract": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.composition.CompositeOperation",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$.composition",
      "name": "CompositeOperation",
      "base": {
        "fqn": "jsii$jsii_calc_lib$.Operation"
      },
      "abstract": true,
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.Sum": {
      "docs": {
        "comment": "An operation that sums multiple values."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The parts to sum."
          },
          "name": "parts",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$jsii_calc_lib$.Value"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The expression that this operation consists of.\nMust be implemented by derived classes."
          },
          "name": "expression",
          "type": {
            "fqn": "jsii$jsii_calc_lib$.Value"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$jsii_calc$.Sum",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "Sum",
      "base": {
        "fqn": "jsii$jsii_calc$.composition.CompositeOperation"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.Power": {
      "docs": {
        "comment": "The power operation."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "param": "base The base of the power",
            "comment": "The base of the power"
          },
          "name": "base",
          "type": {
            "fqn": "jsii$jsii_calc_lib$.Value"
          },
          "immutable": true
        },
        {
          "docs": {
            "param": "pow The number of times to multiply",
            "comment": "The number of times to multiply"
          },
          "name": "pow",
          "type": {
            "fqn": "jsii$jsii_calc_lib$.Value"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The expression that this operation consists of.\nMust be implemented by derived classes."
          },
          "name": "expression",
          "type": {
            "fqn": "jsii$jsii_calc_lib$.Value"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$jsii_calc$.Power",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "Power",
      "base": {
        "fqn": "jsii$jsii_calc$.composition.CompositeOperation"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "base The base of the power",
              "comment": "The base of the power"
            },
            "name": "base",
            "type": {
              "fqn": "jsii$jsii_calc_lib$.Value"
            }
          },
          {
            "docs": {
              "param": "pow The number of times to multiply",
              "comment": "The number of times to multiply"
            },
            "name": "pow",
            "type": {
              "fqn": "jsii$jsii_calc_lib$.Value"
            }
          }
        ],
        "docs": {
          "comment": "Creates a Power operation."
        },
        "initializer": true
      }
    },
    "jsii$jsii_calc$.CalculatorProps": {
      "docs": {
        "comment": "Properties for Calculator."
      },
      "kind": "interface",
      "properties": [
        {
          "name": "initialValue",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "name": "maximumValue",
          "type": {
            "primitive": "number",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.CalculatorProps",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "CalculatorProps",
      "datatype": true
    },
    "jsii$jsii_calc$.Calculator": {
      "docs": {
        "comment": "A calculator which maintains a current value and allows adding operations."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The current value."
          },
          "name": "curr",
          "type": {
            "fqn": "jsii$jsii_calc_lib$.Value"
          }
        },
        {
          "docs": {
            "comment": "A map of per operation name of all operations performed."
          },
          "name": "operationsMap",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "fqn": "jsii$jsii_calc_lib$.Value"
                  },
                  "kind": "array"
                }
              },
              "kind": "map"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "A log of all operations."
          },
          "name": "operationsLog",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$jsii_calc_lib$.Value"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The maximum value allows in this calculator."
          },
          "name": "maxValue",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Returns the expression."
          },
          "name": "expression",
          "type": {
            "fqn": "jsii$jsii_calc_lib$.Value"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Example of a property that accepts a union of types."
          },
          "name": "unionProperty",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "jsii$jsii_calc$.Add"
                },
                {
                  "fqn": "jsii$jsii_calc$.Multiply"
                },
                {
                  "fqn": "jsii$jsii_calc$.Power"
                }
              ]
            },
            "optional": true
          }
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "docs": {
            "comment": "Adds a number to the current value."
          },
          "name": "add"
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "docs": {
            "comment": "Multiplies the current value by a number."
          },
          "name": "mul"
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "docs": {
            "comment": "Raises the current value by a power."
          },
          "name": "pow"
        },
        {
          "docs": {
            "comment": "Negates the current value."
          },
          "name": "neg"
        },
        {
          "docs": {
            "comment": "Returns teh value of the union property (if defined)."
          },
          "name": "readUnionValue",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.Calculator",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "Calculator",
      "base": {
        "fqn": "jsii$jsii_calc$.composition.CompositeOperation"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "props Initialization properties.",
              "comment": "Initialization properties."
            },
            "name": "props",
            "type": {
              "fqn": "jsii$jsii_calc$.CalculatorProps",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a Calculator object."
        },
        "initializer": true
      }
    },
    "jsii$jsii_calc$.AllTypesEnum": {
      "kind": "enum",
      "members": [
        {
          "name": "MyEnumValue"
        },
        {
          "name": "YourEnumValue"
        },
        {
          "name": "ThisIsGreat"
        }
      ],
      "fqn": "jsii$jsii_calc$.AllTypesEnum",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "AllTypesEnum"
    },
    "jsii$jsii_calc$.AllTypes": {
      "docs": {
        "comment": "This class includes property for all types supported by jsii. The setters will validate\nthat the value set is of the expected type and throw otherwise."
      },
      "kind": "class",
      "properties": [
        {
          "name": "booleanProperty",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "name": "stringProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "numberProperty",
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "dateProperty",
          "type": {
            "primitive": "date"
          }
        },
        {
          "name": "jsonProperty",
          "type": {
            "primitive": "json"
          }
        },
        {
          "name": "mapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "map"
            }
          }
        },
        {
          "name": "arrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "name": "anyProperty",
          "type": {
            "primitive": "any"
          }
        },
        {
          "name": "anyArrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "name": "anyMapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "name": "unionProperty",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                },
                {
                  "fqn": "jsii$jsii_calc$.Multiply"
                }
              ]
            }
          }
        },
        {
          "name": "unionArrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "number"
                    },
                    {
                      "fqn": "jsii$jsii_calc$.composition.CompositeOperation"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "name": "unionMapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "primitive": "number"
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "name": "enumProperty",
          "type": {
            "fqn": "jsii$jsii_calc$.AllTypesEnum"
          }
        },
        {
          "name": "enumPropertyValue",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$jsii_calc$.AllTypes",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "AllTypes",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.JSObjectLiteralToNative": {
      "kind": "class",
      "methods": [
        {
          "name": "returnLiteral",
          "returns": {
            "fqn": "jsii$jsii_calc$.JSObjectLiteralToNativeClass"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.JSObjectLiteralToNative",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "JSObjectLiteralToNative",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.JSObjectLiteralToNativeClass": {
      "kind": "class",
      "properties": [
        {
          "name": "propA",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "propB",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.JSObjectLiteralToNativeClass",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "JSObjectLiteralToNativeClass",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.ObjectRefsInCollections": {
      "docs": {
        "comment": "Verify that object references can be passed inside collections."
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "jsii$jsii_calc_lib$.Value"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "docs": {
            "comment": "Returns the sum of all values"
          },
          "name": "sumFromArray",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "jsii$jsii_calc_lib$.Value"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "docs": {
            "comment": "Returns the sum of all values in a map"
          },
          "name": "sumFromMap",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.ObjectRefsInCollections",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "ObjectRefsInCollections",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.RuntimeTypeChecking": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "arg1",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "arg2",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg3",
              "type": {
                "primitive": "date",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Used to verify verification of number of method arguments."
          },
          "name": "methodWithOptionalArguments"
        }
      ],
      "fqn": "jsii$jsii_calc$.RuntimeTypeChecking",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "RuntimeTypeChecking",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.DerivedClassHasNoProperties.Base": {
      "kind": "class",
      "properties": [
        {
          "name": "prop",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.DerivedClassHasNoProperties.Base",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$.DerivedClassHasNoProperties",
      "name": "Base",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.DerivedClassHasNoProperties.Derived": {
      "kind": "class",
      "fqn": "jsii$jsii_calc$.DerivedClassHasNoProperties.Derived",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$.DerivedClassHasNoProperties",
      "name": "Derived",
      "base": {
        "fqn": "jsii$jsii_calc$.DerivedClassHasNoProperties.Base"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.AsyncVirtualMethods": {
      "kind": "class",
      "methods": [
        {
          "name": "callMe",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "parameters": [
            {
              "name": "mult",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "overrideMe",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "name": "overrideMeToo",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "docs": {
            "comment": "Just calls \"overrideMeToo\""
          },
          "name": "callMe2",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "docs": {
            "comment": "This method calls the \"callMe\" async method indirectly, which will then\ninvoke a virtual method. This is a \"double promise\" situation, which\nmeans that callbacks are not going to be available immediate, but only\nafter an \"immediates\" cycle."
          },
          "name": "callMeDoublePromise",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "name": "dontOverrideMe",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.AsyncVirtualMethods",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "AsyncVirtualMethods",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.SyncVirtualMethods": {
      "kind": "class",
      "properties": [
        {
          "name": "callerIsProperty",
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "theProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "name": "otherProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "valueOfOtherProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "a",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "methods": [
        {
          "name": "callerIsMethod",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "name": "callerIsAsync",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "parameters": [
            {
              "name": "n",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "virtualMethod",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "modifyValueOfTheProperty"
        },
        {
          "name": "retrieveValueOfTheProperty",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "retrieveReadOnlyProperty",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "modifyOtherProperty"
        },
        {
          "name": "retrieveOtherProperty",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "readA",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "writeA"
        }
      ],
      "fqn": "jsii$jsii_calc$.SyncVirtualMethods",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "SyncVirtualMethods",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.VirtualMethodPlayground": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "serialSumAsync",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "parallelSumAsync",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "sumSync",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "overrideMeAsync",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "overrideMeSync",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.VirtualMethodPlayground",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "VirtualMethodPlayground",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.DoubleTrouble": {
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns another random number."
          },
          "name": "next",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "comment": "Say hello!"
          },
          "name": "hello",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii$jsii_calc$.IFriendlyRandomGenerator"
        }
      ],
      "fqn": "jsii$jsii_calc$.DoubleTrouble",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "DoubleTrouble",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.Polymorphism": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "friendly",
              "type": {
                "fqn": "jsii$jsii_calc_lib$.IFriendly"
              }
            }
          ],
          "name": "sayHello",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.Polymorphism",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "Polymorphism",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.NumberGenerator": {
      "docs": {
        "comment": "This allows us to test that a reference can be stored for objects that\nimplement interfaces."
      },
      "kind": "class",
      "properties": [
        {
          "name": "generator",
          "type": {
            "fqn": "jsii$jsii_calc$.IRandomNumberGenerator"
          }
        }
      ],
      "methods": [
        {
          "name": "nextTimes100",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "gen",
              "type": {
                "fqn": "jsii$jsii_calc$.IRandomNumberGenerator"
              }
            }
          ],
          "name": "isSameGenerator",
          "returns": {
            "primitive": "boolean"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.NumberGenerator",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "NumberGenerator",
      "initializer": {
        "parameters": [
          {
            "name": "generator",
            "type": {
              "fqn": "jsii$jsii_calc$.IRandomNumberGenerator"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$jsii_calc$.JSObjectLiteralForInterface": {
      "kind": "class",
      "methods": [
        {
          "name": "giveMeFriendly",
          "returns": {
            "fqn": "jsii$jsii_calc_lib$.IFriendly"
          }
        },
        {
          "name": "giveMeFriendlyGenerator",
          "returns": {
            "fqn": "jsii$jsii_calc$.IFriendlyRandomGenerator"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.JSObjectLiteralForInterface",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "JSObjectLiteralForInterface",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.DerivedStruct": {
      "docs": {
        "comment": "A struct which derives from another struct."
      },
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii$jsii_calc_lib$.MyFirstStruct"
        }
      ],
      "properties": [
        {
          "docs": {
            "comment": "An example of a non primitive property."
          },
          "name": "nonPrimitive",
          "type": {
            "fqn": "jsii$jsii_calc$.DoubleTrouble"
          }
        },
        {
          "name": "bool",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "name": "anotherRequired",
          "type": {
            "primitive": "date"
          }
        },
        {
          "name": "optionalArray",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "This is optional."
          },
          "name": "anotherOptional",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "jsii$jsii_calc_lib$.Value"
              },
              "kind": "map"
            },
            "optional": true
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.DerivedStruct",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "DerivedStruct",
      "datatype": true
    },
    "jsii$jsii_calc$.GiveMeStructs": {
      "kind": "class",
      "properties": [
        {
          "name": "structLiteral",
          "type": {
            "fqn": "jsii$jsii_calc_lib$.StructWithOnlyOptionals"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "first",
              "type": {
                "fqn": "jsii$jsii_calc_lib$.MyFirstStruct"
              }
            }
          ],
          "docs": {
            "comment": "Returns the \"anumber\" from a MyFirstStruct struct;"
          },
          "name": "readFirstNumber",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "derived",
              "type": {
                "fqn": "jsii$jsii_calc$.DerivedStruct"
              }
            }
          ],
          "docs": {
            "comment": "Returns the boolean from a DerivedStruct struct."
          },
          "name": "readDerivedNonPrimitive",
          "returns": {
            "fqn": "jsii$jsii_calc$.DoubleTrouble"
          }
        },
        {
          "parameters": [
            {
              "name": "derived",
              "type": {
                "fqn": "jsii$jsii_calc$.DerivedStruct"
              }
            }
          ],
          "docs": {
            "comment": "Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct."
          },
          "name": "derivedToFirst",
          "returns": {
            "fqn": "jsii$jsii_calc_lib$.MyFirstStruct"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.GiveMeStructs",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "GiveMeStructs",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.IInterfaceWithProperties": {
      "kind": "interface",
      "properties": [
        {
          "name": "readOnlyString",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "name": "readWriteString",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.IInterfaceWithProperties",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "IInterfaceWithProperties",
      "datatype": true
    },
    "jsii$jsii_calc$.IInterfaceWithPropertiesExtension": {
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii$jsii_calc$.IInterfaceWithProperties"
        }
      ],
      "properties": [
        {
          "name": "foo",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.IInterfaceWithPropertiesExtension",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "IInterfaceWithPropertiesExtension",
      "datatype": true
    },
    "jsii$jsii_calc$.UsesInterfaceWithProperties": {
      "kind": "class",
      "properties": [
        {
          "name": "obj",
          "type": {
            "fqn": "jsii$jsii_calc$.IInterfaceWithProperties"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "name": "justRead",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "writeAndRead",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "ext",
              "type": {
                "fqn": "jsii$jsii_calc$.IInterfaceWithPropertiesExtension"
              }
            }
          ],
          "name": "readStringAndNumber",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.UsesInterfaceWithProperties",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "UsesInterfaceWithProperties",
      "initializer": {
        "parameters": [
          {
            "name": "obj",
            "type": {
              "fqn": "jsii$jsii_calc$.IInterfaceWithProperties"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$jsii_calc$.AllowedMethodNames": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "withParam",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay."
          },
          "name": "getFoo",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "_p1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_p2",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "getBar"
        },
        {
          "parameters": [
            {
              "name": "_x",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_y",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "docs": {
            "comment": "setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay."
          },
          "name": "setFoo"
        },
        {
          "parameters": [
            {
              "name": "_x",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_y",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "_z",
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "name": "setBar"
        }
      ],
      "fqn": "jsii$jsii_calc$.AllowedMethodNames",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "AllowedMethodNames",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.ReturnsNumber": {
      "kind": "interface",
      "methods": [
        {
          "name": "obtainNumber",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "properties": [
        {
          "name": "numberProp",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$jsii_calc$.ReturnsNumber",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "ReturnsNumber"
    },
    "jsii$jsii_calc$.OverrideReturnsObject": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "obj",
              "type": {
                "fqn": "jsii$jsii_calc$.ReturnsNumber"
              }
            }
          ],
          "name": "test",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.OverrideReturnsObject",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "OverrideReturnsObject",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.Thrower": {
      "kind": "class",
      "methods": [
        {
          "name": "throwError"
        }
      ],
      "fqn": "jsii$jsii_calc$.Thrower",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "Thrower",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.VariadicMethod": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "docs": {
                "param": "first the first element of the array to be returned (after the ``prefix`` provided at construction time).",
                "comment": "the first element of the array to be returned (after the ``prefix`` provided at construction time)."
              },
              "name": "first",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "param": "others other elements to be included in the array.",
                "comment": "other elements to be included in the array."
              },
              "name": "others",
              "type": {
                "primitive": "number"
              },
              "variadic": true
            }
          ],
          "name": "asArray",
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "array"
            }
          },
          "variadic": true
        }
      ],
      "fqn": "jsii$jsii_calc$.VariadicMethod",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "VariadicMethod",
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "prefix a prefix that will be use for all values returned by ``#asArray``.",
              "comment": "a prefix that will be use for all values returned by ``#asArray``."
            },
            "name": "prefix",
            "type": {
              "primitive": "number"
            },
            "variadic": true
          }
        ],
        "initializer": true,
        "variadic": true
      }
    },
    "jsii$jsii_calc$.Statics": {
      "kind": "class",
      "properties": [
        {
          "name": "value",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Jsdocs for static property."
          },
          "name": "Foo",
          "static": true,
          "type": {
            "primitive": "string"
          },
          "immutable": true,
          "const": true
        },
        {
          "docs": {
            "comment": "Constants may also use all-caps."
          },
          "name": "BAR",
          "static": true,
          "type": {
            "primitive": "number"
          },
          "immutable": true,
          "const": true
        },
        {
          "docs": {
            "comment": "Constants can also use camelCase."
          },
          "name": "zooBar",
          "static": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          },
          "immutable": true,
          "const": true
        },
        {
          "docs": {
            "comment": "Jsdocs for static getter.\nJsdocs for static setter."
          },
          "name": "instance",
          "type": {
            "fqn": "jsii$jsii_calc$.Statics"
          },
          "static": true
        },
        {
          "name": "nonConstStatic",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "ConstObj",
          "static": true,
          "type": {
            "fqn": "jsii$jsii_calc$.DoubleTrouble"
          },
          "immutable": true,
          "const": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "docs": {
                "param": "name The name of the person to say hello to",
                "comment": "The name of the person to say hello to"
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Jsdocs for static method"
          },
          "name": "staticMethod",
          "static": true,
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "justMethod",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$jsii_calc$.Statics",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "Statics",
      "initializer": {
        "parameters": [
          {
            "name": "value",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii$jsii_calc$.JavaReservedWords": {
      "kind": "class",
      "properties": [
        {
          "name": "while",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "methods": [
        {
          "name": "abstract"
        },
        {
          "name": "assert"
        },
        {
          "name": "boolean"
        },
        {
          "name": "break"
        },
        {
          "name": "byte"
        },
        {
          "name": "case"
        },
        {
          "name": "catch"
        },
        {
          "name": "char"
        },
        {
          "name": "class"
        },
        {
          "name": "const"
        },
        {
          "name": "continue"
        },
        {
          "name": "default"
        },
        {
          "name": "double"
        },
        {
          "name": "do"
        },
        {
          "name": "else"
        },
        {
          "name": "enum"
        },
        {
          "name": "extends"
        },
        {
          "name": "false"
        },
        {
          "name": "final"
        },
        {
          "name": "finally"
        },
        {
          "name": "float"
        },
        {
          "name": "for"
        },
        {
          "name": "goto"
        },
        {
          "name": "if"
        },
        {
          "name": "implements"
        },
        {
          "name": "import"
        },
        {
          "name": "instanceof"
        },
        {
          "name": "int"
        },
        {
          "name": "interface"
        },
        {
          "name": "long"
        },
        {
          "name": "native"
        },
        {
          "name": "new"
        },
        {
          "name": "null"
        },
        {
          "name": "package"
        },
        {
          "name": "private"
        },
        {
          "name": "protected"
        },
        {
          "name": "public"
        },
        {
          "name": "return"
        },
        {
          "name": "short"
        },
        {
          "name": "static"
        },
        {
          "name": "strictfp"
        },
        {
          "name": "super"
        },
        {
          "name": "switch"
        },
        {
          "name": "synchronized"
        },
        {
          "name": "this"
        },
        {
          "name": "throw"
        },
        {
          "name": "throws"
        },
        {
          "name": "transient"
        },
        {
          "name": "true"
        },
        {
          "name": "try"
        },
        {
          "name": "void"
        },
        {
          "name": "volatile"
        }
      ],
      "fqn": "jsii$jsii_calc$.JavaReservedWords",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "JavaReservedWords",
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc$.UnionProperties": {
      "kind": "interface",
      "properties": [
        {
          "name": "foo",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                }
              ]
            },
            "optional": true
          }
        },
        {
          "name": "bar",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                },
                {
                  "fqn": "jsii$jsii_calc$.AllTypes"
                }
              ]
            }
          },
          "immutable": true
        }
      ],
      "fqn": "jsii$jsii_calc$.UnionProperties",
      "module": "jsii$jsii_calc$",
      "namespace": "jsii$jsii_calc$",
      "name": "UnionProperties",
      "datatype": true
    }
  },
  "nametree": {
    "jsii$jsii_calc$": {
      "IFriendlier": {
        "_": "jsii$jsii_calc$.IFriendlier"
      },
      "IRandomNumberGenerator": {
        "_": "jsii$jsii_calc$.IRandomNumberGenerator"
      },
      "IFriendlyRandomGenerator": {
        "_": "jsii$jsii_calc$.IFriendlyRandomGenerator"
      },
      "BinaryOperation": {
        "_": "jsii$jsii_calc$.BinaryOperation"
      },
      "Add": {
        "_": "jsii$jsii_calc$.Add"
      },
      "Multiply": {
        "_": "jsii$jsii_calc$.Multiply"
      },
      "UnaryOperation": {
        "_": "jsii$jsii_calc$.UnaryOperation"
      },
      "Negate": {
        "_": "jsii$jsii_calc$.Negate"
      },
      "composition": {
        "CompositionStringStyle": {
          "_": "jsii$jsii_calc$.composition.CompositionStringStyle"
        },
        "CompositeOperation": {
          "_": "jsii$jsii_calc$.composition.CompositeOperation"
        }
      },
      "Sum": {
        "_": "jsii$jsii_calc$.Sum"
      },
      "Power": {
        "_": "jsii$jsii_calc$.Power"
      },
      "CalculatorProps": {
        "_": "jsii$jsii_calc$.CalculatorProps"
      },
      "Calculator": {
        "_": "jsii$jsii_calc$.Calculator"
      },
      "AllTypesEnum": {
        "_": "jsii$jsii_calc$.AllTypesEnum"
      },
      "AllTypes": {
        "_": "jsii$jsii_calc$.AllTypes"
      },
      "JSObjectLiteralToNative": {
        "_": "jsii$jsii_calc$.JSObjectLiteralToNative"
      },
      "JSObjectLiteralToNativeClass": {
        "_": "jsii$jsii_calc$.JSObjectLiteralToNativeClass"
      },
      "ObjectRefsInCollections": {
        "_": "jsii$jsii_calc$.ObjectRefsInCollections"
      },
      "RuntimeTypeChecking": {
        "_": "jsii$jsii_calc$.RuntimeTypeChecking"
      },
      "DerivedClassHasNoProperties": {
        "Base": {
          "_": "jsii$jsii_calc$.DerivedClassHasNoProperties.Base"
        },
        "Derived": {
          "_": "jsii$jsii_calc$.DerivedClassHasNoProperties.Derived"
        }
      },
      "AsyncVirtualMethods": {
        "_": "jsii$jsii_calc$.AsyncVirtualMethods"
      },
      "SyncVirtualMethods": {
        "_": "jsii$jsii_calc$.SyncVirtualMethods"
      },
      "VirtualMethodPlayground": {
        "_": "jsii$jsii_calc$.VirtualMethodPlayground"
      },
      "DoubleTrouble": {
        "_": "jsii$jsii_calc$.DoubleTrouble"
      },
      "Polymorphism": {
        "_": "jsii$jsii_calc$.Polymorphism"
      },
      "NumberGenerator": {
        "_": "jsii$jsii_calc$.NumberGenerator"
      },
      "JSObjectLiteralForInterface": {
        "_": "jsii$jsii_calc$.JSObjectLiteralForInterface"
      },
      "DerivedStruct": {
        "_": "jsii$jsii_calc$.DerivedStruct"
      },
      "GiveMeStructs": {
        "_": "jsii$jsii_calc$.GiveMeStructs"
      },
      "IInterfaceWithProperties": {
        "_": "jsii$jsii_calc$.IInterfaceWithProperties"
      },
      "IInterfaceWithPropertiesExtension": {
        "_": "jsii$jsii_calc$.IInterfaceWithPropertiesExtension"
      },
      "UsesInterfaceWithProperties": {
        "_": "jsii$jsii_calc$.UsesInterfaceWithProperties"
      },
      "AllowedMethodNames": {
        "_": "jsii$jsii_calc$.AllowedMethodNames"
      },
      "ReturnsNumber": {
        "_": "jsii$jsii_calc$.ReturnsNumber"
      },
      "OverrideReturnsObject": {
        "_": "jsii$jsii_calc$.OverrideReturnsObject"
      },
      "Thrower": {
        "_": "jsii$jsii_calc$.Thrower"
      },
      "VariadicMethod": {
        "_": "jsii$jsii_calc$.VariadicMethod"
      },
      "Statics": {
        "_": "jsii$jsii_calc$.Statics"
      },
      "JavaReservedWords": {
        "_": "jsii$jsii_calc$.JavaReservedWords"
      },
      "UnionProperties": {
        "_": "jsii$jsii_calc$.UnionProperties"
      }
    }
  },
  "typecount": 42,
  "externalTypes": {
    "jsii$jsii_calc_lib$.IFriendly": {
      "docs": {
        "comment": "Applies to classes that are considered friendly. These classes can be greeted with\na \"hello\" or \"goodbye\" blessing and they will respond back in a fun and friendly manner."
      },
      "kind": "interface",
      "methods": [
        {
          "docs": {
            "comment": "Say hello!"
          },
          "name": "hello",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$jsii_calc_lib$.IFriendly",
      "module": "jsii$jsii_calc_lib$",
      "namespace": "jsii$jsii_calc_lib$",
      "name": "IFriendly"
    },
    "jsii$jsii_calc_lib$.Operation": {
      "docs": {
        "comment": "Represents an operation on values."
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "abstract": true,
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii$jsii_calc_lib$.Operation",
      "module": "jsii$jsii_calc_lib$",
      "namespace": "jsii$jsii_calc_lib$",
      "name": "Operation",
      "base": {
        "fqn": "jsii$jsii_calc_lib$.Value"
      },
      "abstract": true,
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc_lib$.Value": {
      "docs": {
        "comment": "Abstract class which represents a numeric value."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The value."
          },
          "name": "value",
          "type": {
            "primitive": "number"
          },
          "immutable": true,
          "abstract": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the name of the class (to verify native type names are created for derived classes)."
          },
          "name": "typeName",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "jsii$jsii_calc_lib$.Value",
      "module": "jsii$jsii_calc_lib$",
      "namespace": "jsii$jsii_calc_lib$",
      "name": "Value",
      "abstract": true,
      "initializer": {
        "initializer": true
      }
    },
    "jsii$jsii_calc_lib$.MyFirstStruct": {
      "docs": {
        "comment": "This is the first struct we have created in jsii"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "A string value"
          },
          "name": "astring",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "An awesome number value"
          },
          "name": "anumber",
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "firstOptional",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        }
      ],
      "fqn": "jsii$jsii_calc_lib$.MyFirstStruct",
      "module": "jsii$jsii_calc_lib$",
      "namespace": "jsii$jsii_calc_lib$",
      "name": "MyFirstStruct",
      "datatype": true
    },
    "jsii$jsii_calc_lib$.StructWithOnlyOptionals": {
      "docs": {
        "comment": "This is a struct with only optional properties."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The first optional!"
          },
          "name": "optional1",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "name": "optional2",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "name": "optional3",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        }
      ],
      "fqn": "jsii$jsii_calc_lib$.StructWithOnlyOptionals",
      "module": "jsii$jsii_calc_lib$",
      "namespace": "jsii$jsii_calc_lib$",
      "name": "StructWithOnlyOptionals",
      "datatype": true
    }
  },
  "name": "jsii$jsii_calc$",
  "package": "jsii-calc",
  "version": "0.5.0-beta",
  "dependencies": {
    "jsii$jsii_calc_lib$": {
      "package": "jsii-calc-lib",
      "version": "0.5.0-beta"
    }
  },
  "names": {
    "java": "org.jsii.tests.calculator",
    "dotnet": "AWS.Jsii.Tests.Calculator",
    "js": "jsii-calc"
  },
  "nativenames": {
    "jsii$jsii_calc_lib$": {
      "java": "org.jsii.tests.calculator.lib",
      "dotnet": "AWS.Jsii.Tests.Calculator.Lib",
      "js": "jsii-calc-lib"
    },
    "jsii$jsii_calc$": {
      "java": "org.jsii.tests.calculator",
      "dotnet": "AWS.Jsii.Tests.Calculator",
      "js": "jsii-calc"
    }
  },
  "readme": {
    "markdown": "## JSII Calculator\n\nThis library is used to demonstrate and test the features of JSII\n"
  },
  "code": "var jsii$jsii_calc$ =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// tslint:disable\nconst jsii_calc_lib_1 = __webpack_require__(1);\n/**\n * Represents an operation with two operands.\n */\nclass BinaryOperation extends jsii_calc_lib_1.Operation {\n    /**\n     * Creates a BinaryOperation\n     * @param lhs Left-hand side operand\n     * @param rhs Right-hand side operand\n     */\n    constructor(lhs, rhs) {\n        super();\n        this.lhs = lhs;\n        this.rhs = rhs;\n    }\n    hello() {\n        return 'Hello, I am a binary operation. What\\'s your name?';\n    }\n}\nexports.BinaryOperation = BinaryOperation;\n/**\n * The \"+\" binary operation.\n */\nclass Add extends BinaryOperation {\n    get value() {\n        return this.lhs.value + this.rhs.value;\n    }\n    toString() {\n        return `(${this.lhs} + ${this.rhs})`;\n    }\n}\nexports.Add = Add;\n/**\n * The \"*\" binary operation.\n */\nclass Multiply extends BinaryOperation {\n    get value() {\n        return this.lhs.value * this.rhs.value;\n    }\n    toString() {\n        return `(${this.lhs} * ${this.rhs})`;\n    }\n    goodbye() {\n        return 'Goodbye from Multiply!';\n    }\n    farewell() {\n        return 'Farewell to you too!';\n    }\n    next() {\n        return 89;\n    }\n}\nexports.Multiply = Multiply;\n/**\n * An operation on a single operand.\n */\nclass UnaryOperation extends jsii_calc_lib_1.Operation {\n    constructor(operand) {\n        super();\n        this.operand = operand;\n    }\n}\nexports.UnaryOperation = UnaryOperation;\n/**\n * The negation operation (\"-value\")\n */\nclass Negate extends UnaryOperation {\n    get value() {\n        return -1 * this.operand.value;\n    }\n    toString() {\n        return `-${this.operand}`;\n    }\n    hello() {\n        return 'I know I am called Negate, but I am friendly';\n    }\n    goodbye() {\n        return 'See you friend';\n    }\n    farewell() {\n        return this.goodbye() + ', oh farewell!';\n    }\n}\nexports.Negate = Negate;\n/**\n * Utilities for composing multiple operations.\n */\nvar composition;\n(function (composition) {\n    /**\n     * Style of .toString() output for CompositeOperation.\n     */\n    let CompositionStringStyle;\n    (function (CompositionStringStyle) {\n        /** Normal string expression */\n        CompositionStringStyle[CompositionStringStyle[\"Normal\"] = 0] = \"Normal\";\n        /** Decorated string expression */\n        CompositionStringStyle[CompositionStringStyle[\"Decorated\"] = 1] = \"Decorated\";\n    })(CompositionStringStyle = composition.CompositionStringStyle || (composition.CompositionStringStyle = {}));\n    /**\n     * Abstract operation composed from an expression of other operations.\n     */\n    class CompositeOperation extends jsii_calc_lib_1.Operation {\n        constructor() {\n            super(...arguments);\n            /**\n             * The .toString() style.\n             */\n            this.stringStyle = CompositionStringStyle.Normal;\n            /**\n             * A set of prefixes to include in a decorated .toString().\n             */\n            this.decorationPrefixes = ['<<[[{{'];\n            /**\n             * A set of postfixes to include in a decorated .toString().\n             */\n            this.decorationPostfixes = ['}}]]>>'];\n        }\n        get value() {\n            return this.expression.value;\n        }\n        toString() {\n            switch (this.stringStyle) {\n                case CompositionStringStyle.Normal:\n                    return this.expression.toString();\n                case CompositionStringStyle.Decorated:\n                    return this.decorationPrefixes.join('') + this.expression.toString() + this.decorationPostfixes.join('');\n                default:\n                    throw new Error(`Unknown string style: ${this.stringStyle}`);\n            }\n        }\n    }\n    composition.CompositeOperation = CompositeOperation;\n})(composition = exports.composition || (exports.composition = {}));\n/**\n * An operation that sums multiple values.\n */\nclass Sum extends composition.CompositeOperation {\n    // TODO: some annoying bug in Nashorn will throw this exception if\n    // call that prototype's ctor via \"apply\" instead: java.lang.AssertionError: duplicate code\n    constructor() {\n        super();\n        /**\n         * The parts to sum.\n         */\n        this.parts = [];\n    }\n    get expression() {\n        let curr = new jsii_calc_lib_1.Number(0);\n        for (let part of this.parts) {\n            curr = new Add(curr, part);\n        }\n        return curr;\n    }\n}\nexports.Sum = Sum;\n/**\n * The power operation.\n */\nclass Power extends composition.CompositeOperation {\n    /**\n     * Creates a Power operation.\n     * @param base The base of the power\n     * @param pow The number of times to multiply\n     */\n    constructor(base, pow) {\n        super();\n        this.base = base;\n        this.pow = pow;\n    }\n    get expression() {\n        let curr = new jsii_calc_lib_1.Number(1);\n        for (let i = 0; i < this.pow.value; ++i) {\n            curr = new Multiply(curr, this.base);\n        }\n        return curr;\n    }\n}\nexports.Power = Power;\n/**\n * A calculator which maintains a current value and allows adding operations.\n */\nclass Calculator extends composition.CompositeOperation {\n    /**\n     * Creates a Calculator object.\n     * @param props Initialization properties.\n     */\n    constructor(props) {\n        super();\n        /**\n         * A map of per operation name of all operations performed.\n         */\n        this.operationsMap = {};\n        /**\n         * A log of all operations.\n         */\n        this.operationsLog = new Array();\n        props = props || {};\n        const initialValue = props.initialValue ? props.initialValue : 0;\n        this.curr = new jsii_calc_lib_1.Number(initialValue);\n        this.maxValue = props.maximumValue;\n    }\n    /**\n     * Adds a number to the current value.\n     */\n    add(value) {\n        this.addOperation('add', new Add(this.curr, new jsii_calc_lib_1.Number(value)));\n    }\n    /**\n     * Multiplies the current value by a number.\n     */\n    mul(value) {\n        this.addOperation('mul', new Multiply(this.curr, new jsii_calc_lib_1.Number(value)));\n    }\n    /**\n     * Raises the current value by a power.\n     */\n    pow(value) {\n        this.addOperation('pow', new Power(this.curr, new jsii_calc_lib_1.Number(value)));\n    }\n    /**\n     * Negates the current value.\n     */\n    neg() {\n        this.addOperation('neg', new Negate(this.curr));\n    }\n    /**\n     * Returns the expression.\n     */\n    get expression() {\n        return this.curr;\n    }\n    /**\n     * Returns teh value of the union property (if defined).\n     */\n    readUnionValue() {\n        if (!this.unionProperty) {\n            return 0;\n        }\n        return this.unionProperty.value;\n    }\n    addOperation(op, value) {\n        if (this.maxValue && value.value > this.maxValue) {\n            throw new Error(`Operation ${value} exceeded maximum value ${this.maxValue}`);\n        }\n        let list = this.operationsMap[op];\n        if (!list) {\n            list = new Array();\n            this.operationsMap[op] = list;\n        }\n        list.push(value);\n        this.operationsLog.push(value);\n        this.curr = value;\n    }\n}\nexports.Calculator = Calculator;\nvar AllTypesEnum;\n(function (AllTypesEnum) {\n    AllTypesEnum[AllTypesEnum[\"MyEnumValue\"] = 0] = \"MyEnumValue\";\n    AllTypesEnum[AllTypesEnum[\"YourEnumValue\"] = 100] = \"YourEnumValue\";\n    AllTypesEnum[AllTypesEnum[\"ThisIsGreat\"] = 101] = \"ThisIsGreat\";\n})(AllTypesEnum = exports.AllTypesEnum || (exports.AllTypesEnum = {}));\n/**\n * This class includes property for all types supported by jsii. The setters will validate\n * that the value set is of the expected type and throw otherwise.\n */\nclass AllTypes {\n    constructor() {\n        // boolean\n        this.boolValue = false;\n        // string\n        this.stringValue = 'first value';\n        // number\n        this.numberValue = 0;\n        // date\n        this.dateValue = new Date();\n        // json\n        this.jsonValue = {};\n        // map\n        this.mapValue = {};\n        // array\n        this.arrayValue = [];\n        this.anyArrayProperty = [];\n        this.anyMapProperty = {};\n        // unions\n        this.unionProperty = 'foo';\n        this.unionArrayProperty = [];\n        this.unionMapProperty = {};\n        // enum\n        this.enumValue = AllTypesEnum.ThisIsGreat;\n    }\n    get booleanProperty() {\n        return this.boolValue;\n    }\n    set booleanProperty(value) {\n        if (typeof (value) !== 'boolean') {\n            throw new Error('not a boolean');\n        }\n        this.boolValue = value;\n    }\n    get stringProperty() {\n        return this.stringValue;\n    }\n    set stringProperty(value) {\n        if (typeof (value) !== 'string') {\n            throw new Error('not a string');\n        }\n        this.stringValue = value;\n    }\n    get numberProperty() {\n        return this.numberValue;\n    }\n    set numberProperty(value) {\n        if (typeof (value) !== 'number') {\n            throw new Error('not a number');\n        }\n        this.numberValue = value;\n    }\n    get dateProperty() {\n        return this.dateValue;\n    }\n    set dateProperty(value) {\n        // https://stackoverflow.com/a/643827/737957\n        if (Object.prototype.toString.call(value) !== '[object Date]') {\n            throw new Error('not a date: ' + value + ' type=' + typeof (value));\n        }\n        this.dateValue = value;\n    }\n    get jsonProperty() {\n        return this.jsonValue;\n    }\n    set jsonProperty(value) {\n        if (typeof (value) !== 'object') {\n            throw new Error('not an object');\n        }\n        this.jsonValue = value;\n    }\n    get mapProperty() {\n        return this.mapValue;\n    }\n    set mapProperty(value) {\n        if (typeof (value) !== 'object') {\n            throw new Error('not a map');\n        }\n        this.mapValue = value;\n    }\n    get arrayProperty() {\n        return this.arrayValue;\n    }\n    set arrayProperty(value) {\n        if (!Array.isArray(value)) {\n            throw new Error('not an array');\n        }\n        this.arrayValue = value;\n    }\n    get enumProperty() {\n        return this.enumValue;\n    }\n    set enumProperty(value) {\n        this.enumValue = value;\n        switch (value) {\n            case AllTypesEnum.MyEnumValue:\n            case AllTypesEnum.YourEnumValue:\n            case AllTypesEnum.ThisIsGreat:\n                return;\n            default:\n                throw new Error('Invalid enum: ' + value);\n        }\n    }\n    get enumPropertyValue() {\n        return this.enumValue.valueOf();\n    }\n}\nexports.AllTypes = AllTypes;\n//\n// Return an object literal from JavaScript which conforms to a class (effectively treating\n// the class as an interface). We want the native code to be able to wrap the resulting object\n// in a native class.\n//\nclass JSObjectLiteralToNative {\n    returnLiteral() {\n        return {\n            propA: 'Hello',\n            propB: 102\n        };\n    }\n}\nexports.JSObjectLiteralToNative = JSObjectLiteralToNative;\nclass JSObjectLiteralToNativeClass {\n    constructor() {\n        this.propA = 'A';\n        this.propB = 0;\n    }\n}\nexports.JSObjectLiteralToNativeClass = JSObjectLiteralToNativeClass;\n/**\n * Verify that object references can be passed inside collections.\n */\nclass ObjectRefsInCollections {\n    /**\n     * Returns the sum of all values\n     */\n    sumFromArray(values) {\n        let sum = 0;\n        for (let val of values) {\n            sum += val.value;\n        }\n        return sum;\n    }\n    /**\n     * Returns the sum of all values in a map\n     */\n    sumFromMap(values) {\n        let sum = 0;\n        for (let key of Object.keys(values)) {\n            sum += values[key].value;\n        }\n        return sum;\n    }\n}\nexports.ObjectRefsInCollections = ObjectRefsInCollections;\nclass RuntimeTypeChecking {\n    /**\n     * Used to verify verification of number of method arguments.\n     */\n    methodWithOptionalArguments(arg1, arg2, arg3) {\n        arg1;\n        arg2;\n        arg3;\n    }\n}\nexports.RuntimeTypeChecking = RuntimeTypeChecking;\nvar DerivedClassHasNoProperties;\n(function (DerivedClassHasNoProperties) {\n    class Base {\n        constructor() {\n            this.prop = '';\n        }\n    }\n    DerivedClassHasNoProperties.Base = Base;\n    class Derived extends Base {\n    }\n    DerivedClassHasNoProperties.Derived = Derived;\n})(DerivedClassHasNoProperties = exports.DerivedClassHasNoProperties || (exports.DerivedClassHasNoProperties = {}));\nclass AsyncVirtualMethods {\n    async callMe() {\n        return await this.overrideMe(10) + this.dontOverrideMe() + await this.overrideMeToo();\n    }\n    async overrideMe(mult) {\n        return 12 * mult;\n    }\n    async overrideMeToo() {\n        return 0;\n    }\n    /**\n     * Just calls \"overrideMeToo\"\n     */\n    async callMe2() {\n        return await this.overrideMeToo();\n    }\n    /**\n     * This method calls the \"callMe\" async method indirectly, which will then\n     * invoke a virtual method. This is a \"double promise\" situation, which\n     * means that callbacks are not going to be available immediate, but only\n     * after an \"immediates\" cycle.\n     */\n    async callMeDoublePromise() {\n        return new Promise(ok => {\n            setImmediate(() => {\n                this.callMe().then(ok);\n            });\n        });\n    }\n    dontOverrideMe() {\n        return 8;\n    }\n}\nexports.AsyncVirtualMethods = AsyncVirtualMethods;\nclass SyncVirtualMethods {\n    constructor() {\n        // read-write property\n        this.theProperty = 'initial value';\n        // read-only property\n        this.readonlyProperty = 'readonly-property-initial-value';\n        this.valueOfOtherProperty = '';\n        // property with a short name (makes sure for example that java's\n        // convertion of getA to \"a\" is not assuming that the length is > 1).\n        this.a = 0;\n    }\n    callerIsMethod() {\n        return this.virtualMethod(10);\n    }\n    get callerIsProperty() {\n        return this.virtualMethod(10);\n    }\n    set callerIsProperty(x) {\n        this.virtualMethod(x);\n    }\n    async callerIsAsync() {\n        return this.virtualMethod(10);\n    }\n    virtualMethod(n) {\n        return n * 2;\n    }\n    modifyValueOfTheProperty(value) {\n        this.theProperty = value;\n    }\n    retrieveValueOfTheProperty() {\n        return this.theProperty;\n    }\n    retrieveReadOnlyProperty() {\n        return this.readonlyProperty;\n    }\n    // property backed by functions\n    get otherProperty() {\n        return 'other property';\n    }\n    set otherProperty(value) {\n        this.valueOfOtherProperty = value;\n    }\n    modifyOtherProperty(value) {\n        this.otherProperty = value;\n    }\n    retrieveOtherProperty() {\n        return this.otherProperty;\n    }\n    readA() {\n        return this.a;\n    }\n    writeA(value) {\n        this.a = value;\n    }\n}\nexports.SyncVirtualMethods = SyncVirtualMethods;\nclass VirtualMethodPlayground {\n    async serialSumAsync(count) {\n        let sum = 0;\n        for (let i = 0; i < count; ++i) {\n            const result = await this.overrideMeAsync(i);\n            sum += result;\n        }\n        return sum;\n    }\n    async parallelSumAsync(count) {\n        let all = new Array();\n        for (let i = 0; i < count; ++i) {\n            all.push(this.overrideMeAsync(i));\n        }\n        const result = await Promise.all(all);\n        return result.reduce((x, i) => x + i, 0);\n    }\n    sumSync(count) {\n        let sum = 0;\n        for (let i = 0; i < count; ++i) {\n            sum += this.overrideMeSync(i);\n        }\n        return sum;\n    }\n    async overrideMeAsync(index) {\n        return 10 * index;\n    }\n    overrideMeSync(index) {\n        return 10 * index;\n    }\n}\nexports.VirtualMethodPlayground = VirtualMethodPlayground;\nclass DoubleTrouble {\n    next() { return 12; }\n    hello() { return 'world'; }\n}\nexports.DoubleTrouble = DoubleTrouble;\nclass Polymorphism {\n    sayHello(friendly) {\n        return `oh, ${friendly.hello()}`;\n    }\n}\nexports.Polymorphism = Polymorphism;\n/**\n * This allows us to test that a reference can be stored for objects that\n * implement interfaces.\n */\nclass NumberGenerator {\n    constructor(generator) {\n        this.generator = generator;\n    }\n    nextTimes100() {\n        return this.generator.next() * 100;\n    }\n    isSameGenerator(gen) {\n        return this.generator === gen;\n    }\n}\nexports.NumberGenerator = NumberGenerator;\nclass JSObjectLiteralForInterface {\n    giveMeFriendly() {\n        return {\n            hello: () => 'I am literally friendly!'\n        };\n    }\n    giveMeFriendlyGenerator() {\n        return {\n            hello: () => 'giveMeFriendlyGenerator',\n            next: () => 42\n        };\n    }\n}\nexports.JSObjectLiteralForInterface = JSObjectLiteralForInterface;\nclass GiveMeStructs {\n    /**\n     * Returns the \"anumber\" from a MyFirstStruct struct;\n     */\n    readFirstNumber(first) {\n        return first.anumber;\n    }\n    /**\n     * Returns the boolean from a DerivedStruct struct.\n     */\n    readDerivedNonPrimitive(derived) {\n        return derived.nonPrimitive;\n    }\n    /**\n     * Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct.\n     */\n    derivedToFirst(derived) {\n        return derived;\n    }\n    get structLiteral() {\n        return {\n            optional1: 'optional1FromStructLiteral',\n            optional3: false\n        };\n    }\n}\nexports.GiveMeStructs = GiveMeStructs;\nclass UsesInterfaceWithProperties {\n    constructor(obj) {\n        this.obj = obj;\n    }\n    justRead() {\n        return this.obj.readOnlyString;\n    }\n    writeAndRead(value) {\n        this.obj.readWriteString = value;\n        return this.obj.readWriteString;\n    }\n    readStringAndNumber(ext) {\n        return `base=${ext.readOnlyString} child=${ext.foo} keys=[${Object.keys(ext).join(',')}]`;\n    }\n}\nexports.UsesInterfaceWithProperties = UsesInterfaceWithProperties;\nclass AllowedMethodNames {\n    /**\n     * getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay.\n     */\n    getFoo(withParam) {\n        return withParam;\n    }\n    getBar(_p1, _p2) {\n        return;\n    }\n    /**\n     * setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay.\n     */\n    setFoo(_x, _y) {\n        return;\n    }\n    setBar(_x, _y, _z) {\n        return;\n    }\n}\nexports.AllowedMethodNames = AllowedMethodNames;\nclass OverrideReturnsObject {\n    test(obj) {\n        return obj.obtainNumber().doubleValue + obj.numberProp.doubleValue;\n    }\n}\nexports.OverrideReturnsObject = OverrideReturnsObject;\nclass Thrower {\n    throwError() {\n        this.doThrowError();\n    }\n    doThrowError() {\n        throw new Error();\n    }\n}\nexports.Thrower = Thrower;\nclass VariadicMethod {\n    /**\n     * @param prefix a prefix that will be use for all values returned by ``#asArray``.\n     */\n    constructor(...prefix) {\n        this.prefix = prefix;\n    }\n    /**\n     * @param first  the first element of the array to be returned (after the ``prefix`` provided at construction time).\n     * @param others other elements to be included in the array.\n     */\n    asArray(first, ...others) {\n        return [...this.prefix, first, ...others];\n    }\n}\nexports.VariadicMethod = VariadicMethod;\nclass Statics {\n    constructor(value) {\n        this.value = value;\n    }\n    /**\n     * Jsdocs for static method\n     * @param name The name of the person to say hello to\n     */\n    static staticMethod(name) {\n        return `hello ,${name}!`;\n    }\n    justMethod() {\n        return this.value;\n    }\n    /**\n     * Jsdocs for static getter.\n     */\n    static get instance() {\n        if (!this._instance) {\n            this._instance = new Statics('default');\n        }\n        return this._instance;\n    }\n    /**\n     *Jsdocs for static setter.\n     */\n    static set instance(val) {\n        this._instance = val;\n    }\n}\n/**\n * Jsdocs for static property.\n */\nStatics.Foo = 'hello';\n/**\n * Constants may also use all-caps.\n */\nStatics.BAR = 1234;\n/**\n * Constants can also use camelCase.\n */\nStatics.zooBar = { hello: 'world' };\nStatics.nonConstStatic = 100; // this should not be represented as a constant in target languages\nStatics.ConstObj = new DoubleTrouble(); // should be initialized statically\nexports.Statics = Statics;\n// https://en.wikipedia.org/wiki/List_of_Java_keywords\nclass JavaReservedWords {\n    constructor() {\n        this.while = 'hello';\n    }\n    abstract() { }\n    assert() { }\n    boolean() { }\n    break() { }\n    byte() { }\n    case() { }\n    catch() { }\n    char() { }\n    class() { }\n    const() { }\n    continue() { }\n    default() { }\n    double() { }\n    do() { }\n    else() { }\n    enum() { }\n    extends() { }\n    false() { }\n    final() { }\n    finally() { }\n    float() { }\n    for() { }\n    goto() { }\n    if() { }\n    implements() { }\n    import() { }\n    instanceof() { }\n    int() { }\n    interface() { }\n    long() { }\n    native() { }\n    new() { }\n    null() { }\n    package() { }\n    private() { }\n    protected() { }\n    public() { }\n    return() { }\n    short() { }\n    static() { }\n    strictfp() { }\n    super() { }\n    switch() { }\n    synchronized() { }\n    this() { }\n    throw() { }\n    throws() { }\n    transient() { }\n    true() { }\n    try() { }\n    void() { }\n    volatile() { }\n}\nexports.JavaReservedWords = JavaReservedWords;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = jsii$jsii_calc_lib$;\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"
}
