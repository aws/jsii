{
  "schema": "jsii/1.0",
  "types": {
    "jsii-calc.IFriendlier": {
      "docs": {
        "comment": "Even friendlier classes can implement this interface."
      },
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "@scope/jsii-calc-lib.IFriendly"
        }
      ],
      "methods": [
        {
          "docs": {
            "returns": "A goodbye blessing.",
            "comment": "Say goodbye."
          },
          "name": "goodbye",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say farewell."
          },
          "name": "farewell",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii-calc.IFriendlier",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "IFriendlier"
    },
    "jsii-calc.IRandomNumberGenerator": {
      "docs": {
        "comment": "Generates random numbers."
      },
      "kind": "interface",
      "methods": [
        {
          "docs": {
            "returns": "A random number.",
            "comment": "Returns another random number."
          },
          "name": "next",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii-calc.IRandomNumberGenerator",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "IRandomNumberGenerator"
    },
    "jsii-calc.IFriendlyRandomGenerator": {
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii-calc.IRandomNumberGenerator"
        },
        {
          "fqn": "@scope/jsii-calc-lib.IFriendly"
        }
      ],
      "fqn": "jsii-calc.IFriendlyRandomGenerator",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "IFriendlyRandomGenerator"
    },
    "jsii-calc.BinaryOperation": {
      "docs": {
        "comment": "Represents an operation with two operands."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "param": "lhs Left-hand side operand",
            "comment": "Left-hand side operand"
          },
          "name": "lhs",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "immutable": true
        },
        {
          "docs": {
            "param": "rhs Right-hand side operand",
            "comment": "Right-hand side operand"
          },
          "name": "rhs",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "Say hello!"
          },
          "name": "hello",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "@scope/jsii-calc-lib.IFriendly"
        }
      ],
      "fqn": "jsii-calc.BinaryOperation",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "BinaryOperation",
      "base": {
        "fqn": "@scope/jsii-calc-lib.Operation"
      },
      "abstract": true,
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "lhs Left-hand side operand",
              "comment": "Left-hand side operand"
            },
            "name": "lhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "param": "rhs Right-hand side operand",
              "comment": "Right-hand side operand"
            },
            "name": "rhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ],
        "docs": {
          "comment": "Creates a BinaryOperation"
        },
        "initializer": true
      }
    },
    "jsii-calc.Add": {
      "docs": {
        "comment": "The \"+\" binary operation."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The value."
          },
          "name": "value",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii-calc.Add",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "Add",
      "base": {
        "fqn": "jsii-calc.BinaryOperation"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "lhs Left-hand side operand",
              "comment": "Left-hand side operand"
            },
            "name": "lhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "param": "rhs Right-hand side operand",
              "comment": "Right-hand side operand"
            },
            "name": "rhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ],
        "docs": {
          "comment": "Creates a BinaryOperation"
        },
        "initializer": true
      }
    },
    "jsii-calc.Multiply": {
      "docs": {
        "comment": "The \"*\" binary operation."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The value."
          },
          "name": "value",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say goodbye."
          },
          "name": "goodbye",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say farewell."
          },
          "name": "farewell",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns another random number."
          },
          "name": "next",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii-calc.IFriendlier"
        },
        {
          "fqn": "jsii-calc.IRandomNumberGenerator"
        }
      ],
      "fqn": "jsii-calc.Multiply",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "Multiply",
      "base": {
        "fqn": "jsii-calc.BinaryOperation"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "lhs Left-hand side operand",
              "comment": "Left-hand side operand"
            },
            "name": "lhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "param": "rhs Right-hand side operand",
              "comment": "Right-hand side operand"
            },
            "name": "rhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ],
        "docs": {
          "comment": "Creates a BinaryOperation"
        },
        "initializer": true
      }
    },
    "jsii-calc.UnaryOperation": {
      "docs": {
        "comment": "An operation on a single operand."
      },
      "kind": "class",
      "properties": [
        {
          "name": "operand",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii-calc.UnaryOperation",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "UnaryOperation",
      "base": {
        "fqn": "@scope/jsii-calc-lib.Operation"
      },
      "abstract": true,
      "initializer": {
        "parameters": [
          {
            "name": "operand",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii-calc.Negate": {
      "docs": {
        "comment": "The negation operation (\"-value\")"
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The value."
          },
          "name": "value",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say hello!"
          },
          "name": "hello",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say goodbye."
          },
          "name": "goodbye",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say farewell."
          },
          "name": "farewell",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii-calc.IFriendlier"
        }
      ],
      "fqn": "jsii-calc.Negate",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "Negate",
      "base": {
        "fqn": "jsii-calc.UnaryOperation"
      },
      "initializer": {
        "parameters": [
          {
            "name": "operand",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii-calc.composition.CompositionStringStyle": {
      "docs": {
        "comment": "Style of .toString() output for CompositeOperation."
      },
      "kind": "enum",
      "members": [
        {
          "name": "Normal"
        },
        {
          "name": "Decorated"
        }
      ],
      "fqn": "jsii-calc.composition.CompositionStringStyle",
      "module": "jsii-calc",
      "namespace": "jsii-calc.composition",
      "name": "CompositionStringStyle"
    },
    "jsii-calc.composition.CompositeOperation": {
      "docs": {
        "comment": "Abstract operation composed from an expression of other operations."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The .toString() style."
          },
          "name": "stringStyle",
          "type": {
            "fqn": "jsii-calc.composition.CompositionStringStyle"
          }
        },
        {
          "docs": {
            "comment": "A set of prefixes to include in a decorated .toString()."
          },
          "name": "decorationPrefixes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "A set of postfixes to include in a decorated .toString()."
          },
          "name": "decorationPostfixes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The value."
          },
          "name": "value",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The expression that this operation consists of.\nMust be implemented by derived classes."
          },
          "name": "expression",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "immutable": true,
          "abstract": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii-calc.composition.CompositeOperation",
      "module": "jsii-calc",
      "namespace": "jsii-calc.composition",
      "name": "CompositeOperation",
      "base": {
        "fqn": "@scope/jsii-calc-lib.Operation"
      },
      "abstract": true,
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.Sum": {
      "docs": {
        "comment": "An operation that sums multiple values."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The parts to sum."
          },
          "name": "parts",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.Value"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The expression that this operation consists of.\nMust be implemented by derived classes."
          },
          "name": "expression",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii-calc.Sum",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "Sum",
      "base": {
        "fqn": "jsii-calc.composition.CompositeOperation"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.Power": {
      "docs": {
        "comment": "The power operation."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "param": "base The base of the power",
            "comment": "The base of the power"
          },
          "name": "base",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "immutable": true
        },
        {
          "docs": {
            "param": "pow The number of times to multiply",
            "comment": "The number of times to multiply"
          },
          "name": "pow",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The expression that this operation consists of.\nMust be implemented by derived classes."
          },
          "name": "expression",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii-calc.Power",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "Power",
      "base": {
        "fqn": "jsii-calc.composition.CompositeOperation"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "base The base of the power",
              "comment": "The base of the power"
            },
            "name": "base",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "param": "pow The number of times to multiply",
              "comment": "The number of times to multiply"
            },
            "name": "pow",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ],
        "docs": {
          "comment": "Creates a Power operation."
        },
        "initializer": true
      }
    },
    "jsii-calc.CalculatorProps": {
      "docs": {
        "comment": "Properties for Calculator."
      },
      "kind": "interface",
      "properties": [
        {
          "name": "initialValue",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "name": "maximumValue",
          "type": {
            "primitive": "number",
            "optional": true
          }
        }
      ],
      "fqn": "jsii-calc.CalculatorProps",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "CalculatorProps",
      "datatype": true
    },
    "jsii-calc.Calculator": {
      "docs": {
        "comment": "A calculator which maintains a current value and allows adding operations."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The current value."
          },
          "name": "curr",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "comment": "A map of per operation name of all operations performed."
          },
          "name": "operationsMap",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "fqn": "@scope/jsii-calc-lib.Value"
                  },
                  "kind": "array"
                }
              },
              "kind": "map"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "A log of all operations."
          },
          "name": "operationsLog",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.Value"
              },
              "kind": "array"
            }
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "The maximum value allows in this calculator."
          },
          "name": "maxValue",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Returns the expression."
          },
          "name": "expression",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Example of a property that accepts a union of types."
          },
          "name": "unionProperty",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "jsii-calc.Add"
                },
                {
                  "fqn": "jsii-calc.Multiply"
                },
                {
                  "fqn": "jsii-calc.Power"
                }
              ]
            },
            "optional": true
          }
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "docs": {
            "comment": "Adds a number to the current value."
          },
          "name": "add"
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "docs": {
            "comment": "Multiplies the current value by a number."
          },
          "name": "mul"
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "docs": {
            "comment": "Raises the current value by a power."
          },
          "name": "pow"
        },
        {
          "docs": {
            "comment": "Negates the current value."
          },
          "name": "neg"
        },
        {
          "docs": {
            "comment": "Returns teh value of the union property (if defined)."
          },
          "name": "readUnionValue",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii-calc.Calculator",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "Calculator",
      "base": {
        "fqn": "jsii-calc.composition.CompositeOperation"
      },
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "props Initialization properties.",
              "comment": "Initialization properties."
            },
            "name": "props",
            "type": {
              "fqn": "jsii-calc.CalculatorProps",
              "optional": true
            }
          }
        ],
        "docs": {
          "comment": "Creates a Calculator object."
        },
        "initializer": true
      }
    },
    "jsii-calc.AllTypesEnum": {
      "kind": "enum",
      "members": [
        {
          "name": "MyEnumValue"
        },
        {
          "name": "YourEnumValue"
        },
        {
          "name": "ThisIsGreat"
        }
      ],
      "fqn": "jsii-calc.AllTypesEnum",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "AllTypesEnum"
    },
    "jsii-calc.AllTypes": {
      "docs": {
        "comment": "This class includes property for all types supported by jsii. The setters will validate\nthat the value set is of the expected type and throw otherwise."
      },
      "kind": "class",
      "properties": [
        {
          "name": "booleanProperty",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "name": "stringProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "numberProperty",
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "dateProperty",
          "type": {
            "primitive": "date"
          }
        },
        {
          "name": "jsonProperty",
          "type": {
            "primitive": "json"
          }
        },
        {
          "name": "mapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "map"
            }
          }
        },
        {
          "name": "arrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "name": "anyProperty",
          "type": {
            "primitive": "any"
          }
        },
        {
          "name": "anyArrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "name": "anyMapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "name": "unionProperty",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                },
                {
                  "fqn": "jsii-calc.Multiply"
                }
              ]
            }
          }
        },
        {
          "name": "unionArrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "number"
                    },
                    {
                      "fqn": "jsii-calc.composition.CompositeOperation"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "name": "unionMapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "primitive": "number"
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "name": "enumProperty",
          "type": {
            "fqn": "jsii-calc.AllTypesEnum"
          }
        },
        {
          "name": "enumPropertyValue",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii-calc.AllTypes",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "AllTypes",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.JSObjectLiteralToNative": {
      "kind": "class",
      "methods": [
        {
          "name": "returnLiteral",
          "returns": {
            "fqn": "jsii-calc.JSObjectLiteralToNativeClass"
          }
        }
      ],
      "fqn": "jsii-calc.JSObjectLiteralToNative",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "JSObjectLiteralToNative",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.JSObjectLiteralToNativeClass": {
      "kind": "class",
      "properties": [
        {
          "name": "propA",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "propB",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii-calc.JSObjectLiteralToNativeClass",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "JSObjectLiteralToNativeClass",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.ObjectRefsInCollections": {
      "docs": {
        "comment": "Verify that object references can be passed inside collections."
      },
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@scope/jsii-calc-lib.Value"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "docs": {
            "comment": "Returns the sum of all values"
          },
          "name": "sumFromArray",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@scope/jsii-calc-lib.Value"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "docs": {
            "comment": "Returns the sum of all values in a map"
          },
          "name": "sumFromMap",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii-calc.ObjectRefsInCollections",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "ObjectRefsInCollections",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.RuntimeTypeChecking": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "arg1",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "arg2",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg3",
              "type": {
                "primitive": "date",
                "optional": true
              }
            }
          ],
          "docs": {
            "comment": "Used to verify verification of number of method arguments."
          },
          "name": "methodWithOptionalArguments"
        }
      ],
      "fqn": "jsii-calc.RuntimeTypeChecking",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "RuntimeTypeChecking",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.DerivedClassHasNoProperties.Base": {
      "kind": "class",
      "properties": [
        {
          "name": "prop",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii-calc.DerivedClassHasNoProperties.Base",
      "module": "jsii-calc",
      "namespace": "jsii-calc.DerivedClassHasNoProperties",
      "name": "Base",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.DerivedClassHasNoProperties.Derived": {
      "kind": "class",
      "fqn": "jsii-calc.DerivedClassHasNoProperties.Derived",
      "module": "jsii-calc",
      "namespace": "jsii-calc.DerivedClassHasNoProperties",
      "name": "Derived",
      "base": {
        "fqn": "jsii-calc.DerivedClassHasNoProperties.Base"
      },
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.AsyncVirtualMethods": {
      "kind": "class",
      "methods": [
        {
          "name": "callMe",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "parameters": [
            {
              "name": "mult",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "overrideMe",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "name": "overrideMeToo",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "docs": {
            "comment": "Just calls \"overrideMeToo\""
          },
          "name": "callMe2",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "docs": {
            "comment": "This method calls the \"callMe\" async method indirectly, which will then\ninvoke a virtual method. This is a \"double promise\" situation, which\nmeans that callbacks are not going to be available immediate, but only\nafter an \"immediates\" cycle."
          },
          "name": "callMeDoublePromise",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "name": "dontOverrideMe",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii-calc.AsyncVirtualMethods",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "AsyncVirtualMethods",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.SyncVirtualMethods": {
      "kind": "class",
      "properties": [
        {
          "name": "callerIsProperty",
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "theProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "name": "otherProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "valueOfOtherProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "a",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "methods": [
        {
          "name": "callerIsMethod",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "name": "callerIsAsync",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "parameters": [
            {
              "name": "n",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "virtualMethod",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "modifyValueOfTheProperty"
        },
        {
          "name": "retrieveValueOfTheProperty",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "retrieveReadOnlyProperty",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "modifyOtherProperty"
        },
        {
          "name": "retrieveOtherProperty",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "readA",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "writeA"
        }
      ],
      "fqn": "jsii-calc.SyncVirtualMethods",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "SyncVirtualMethods",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.VirtualMethodPlayground": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "serialSumAsync",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "parallelSumAsync",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "sumSync",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "overrideMeAsync",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "overrideMeSync",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii-calc.VirtualMethodPlayground",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "VirtualMethodPlayground",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.DoubleTrouble": {
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns another random number."
          },
          "name": "next",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "comment": "Say hello!"
          },
          "name": "hello",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "interfaces": [
        {
          "fqn": "jsii-calc.IFriendlyRandomGenerator"
        }
      ],
      "fqn": "jsii-calc.DoubleTrouble",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "DoubleTrouble",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.Polymorphism": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "friendly",
              "type": {
                "fqn": "@scope/jsii-calc-lib.IFriendly"
              }
            }
          ],
          "name": "sayHello",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii-calc.Polymorphism",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "Polymorphism",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.NumberGenerator": {
      "docs": {
        "comment": "This allows us to test that a reference can be stored for objects that\nimplement interfaces."
      },
      "kind": "class",
      "properties": [
        {
          "name": "generator",
          "type": {
            "fqn": "jsii-calc.IRandomNumberGenerator"
          }
        }
      ],
      "methods": [
        {
          "name": "nextTimes100",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "gen",
              "type": {
                "fqn": "jsii-calc.IRandomNumberGenerator"
              }
            }
          ],
          "name": "isSameGenerator",
          "returns": {
            "primitive": "boolean"
          }
        }
      ],
      "fqn": "jsii-calc.NumberGenerator",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "NumberGenerator",
      "initializer": {
        "parameters": [
          {
            "name": "generator",
            "type": {
              "fqn": "jsii-calc.IRandomNumberGenerator"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii-calc.JSObjectLiteralForInterface": {
      "kind": "class",
      "methods": [
        {
          "name": "giveMeFriendly",
          "returns": {
            "fqn": "@scope/jsii-calc-lib.IFriendly"
          }
        },
        {
          "name": "giveMeFriendlyGenerator",
          "returns": {
            "fqn": "jsii-calc.IFriendlyRandomGenerator"
          }
        }
      ],
      "fqn": "jsii-calc.JSObjectLiteralForInterface",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "JSObjectLiteralForInterface",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.DerivedStruct": {
      "docs": {
        "comment": "A struct which derives from another struct."
      },
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "@scope/jsii-calc-lib.MyFirstStruct"
        }
      ],
      "properties": [
        {
          "docs": {
            "comment": "An example of a non primitive property."
          },
          "name": "nonPrimitive",
          "type": {
            "fqn": "jsii-calc.DoubleTrouble"
          }
        },
        {
          "name": "bool",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "name": "anotherRequired",
          "type": {
            "primitive": "date"
          }
        },
        {
          "name": "optionalArray",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "This is optional."
          },
          "name": "anotherOptional",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.Value"
              },
              "kind": "map"
            },
            "optional": true
          }
        }
      ],
      "fqn": "jsii-calc.DerivedStruct",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "DerivedStruct",
      "datatype": true
    },
    "jsii-calc.GiveMeStructs": {
      "kind": "class",
      "properties": [
        {
          "name": "structLiteral",
          "type": {
            "fqn": "@scope/jsii-calc-lib.StructWithOnlyOptionals"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "name": "first",
              "type": {
                "fqn": "@scope/jsii-calc-lib.MyFirstStruct"
              }
            }
          ],
          "docs": {
            "comment": "Returns the \"anumber\" from a MyFirstStruct struct;"
          },
          "name": "readFirstNumber",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "parameters": [
            {
              "name": "derived",
              "type": {
                "fqn": "jsii-calc.DerivedStruct"
              }
            }
          ],
          "docs": {
            "comment": "Returns the boolean from a DerivedStruct struct."
          },
          "name": "readDerivedNonPrimitive",
          "returns": {
            "fqn": "jsii-calc.DoubleTrouble"
          }
        },
        {
          "parameters": [
            {
              "name": "derived",
              "type": {
                "fqn": "jsii-calc.DerivedStruct"
              }
            }
          ],
          "docs": {
            "comment": "Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct."
          },
          "name": "derivedToFirst",
          "returns": {
            "fqn": "@scope/jsii-calc-lib.MyFirstStruct"
          }
        }
      ],
      "fqn": "jsii-calc.GiveMeStructs",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "GiveMeStructs",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.IInterfaceWithProperties": {
      "kind": "interface",
      "properties": [
        {
          "name": "readOnlyString",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "name": "readWriteString",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii-calc.IInterfaceWithProperties",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "IInterfaceWithProperties",
      "datatype": true
    },
    "jsii-calc.IInterfaceWithPropertiesExtension": {
      "kind": "interface",
      "interfaces": [
        {
          "fqn": "jsii-calc.IInterfaceWithProperties"
        }
      ],
      "properties": [
        {
          "name": "foo",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii-calc.IInterfaceWithPropertiesExtension",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "IInterfaceWithPropertiesExtension",
      "datatype": true
    },
    "jsii-calc.UsesInterfaceWithProperties": {
      "kind": "class",
      "properties": [
        {
          "name": "obj",
          "type": {
            "fqn": "jsii-calc.IInterfaceWithProperties"
          },
          "immutable": true
        }
      ],
      "methods": [
        {
          "name": "justRead",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "name": "writeAndRead",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "ext",
              "type": {
                "fqn": "jsii-calc.IInterfaceWithPropertiesExtension"
              }
            }
          ],
          "name": "readStringAndNumber",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii-calc.UsesInterfaceWithProperties",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "UsesInterfaceWithProperties",
      "initializer": {
        "parameters": [
          {
            "name": "obj",
            "type": {
              "fqn": "jsii-calc.IInterfaceWithProperties"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii-calc.AllowedMethodNames": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "withParam",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay."
          },
          "name": "getFoo",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "parameters": [
            {
              "name": "_p1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_p2",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "name": "getBar"
        },
        {
          "parameters": [
            {
              "name": "_x",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_y",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "docs": {
            "comment": "setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay."
          },
          "name": "setFoo"
        },
        {
          "parameters": [
            {
              "name": "_x",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_y",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "_z",
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "name": "setBar"
        }
      ],
      "fqn": "jsii-calc.AllowedMethodNames",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "AllowedMethodNames",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.ReturnsNumber": {
      "kind": "interface",
      "methods": [
        {
          "name": "obtainNumber",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "properties": [
        {
          "name": "numberProp",
          "type": {
            "primitive": "number"
          },
          "immutable": true
        }
      ],
      "fqn": "jsii-calc.ReturnsNumber",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "ReturnsNumber"
    },
    "jsii-calc.OverrideReturnsObject": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "name": "obj",
              "type": {
                "fqn": "jsii-calc.ReturnsNumber"
              }
            }
          ],
          "name": "test",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "fqn": "jsii-calc.OverrideReturnsObject",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "OverrideReturnsObject",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.Thrower": {
      "kind": "class",
      "methods": [
        {
          "name": "throwError"
        }
      ],
      "fqn": "jsii-calc.Thrower",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "Thrower",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.VariadicMethod": {
      "kind": "class",
      "methods": [
        {
          "parameters": [
            {
              "docs": {
                "param": "first the first element of the array to be returned (after the ``prefix`` provided at construction time).",
                "comment": "the first element of the array to be returned (after the ``prefix`` provided at construction time)."
              },
              "name": "first",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "param": "others other elements to be included in the array.",
                "comment": "other elements to be included in the array."
              },
              "name": "others",
              "type": {
                "primitive": "number"
              },
              "variadic": true
            }
          ],
          "name": "asArray",
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "array"
            }
          },
          "variadic": true
        }
      ],
      "fqn": "jsii-calc.VariadicMethod",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "VariadicMethod",
      "initializer": {
        "parameters": [
          {
            "docs": {
              "param": "prefix a prefix that will be use for all values returned by ``#asArray``.",
              "comment": "a prefix that will be use for all values returned by ``#asArray``."
            },
            "name": "prefix",
            "type": {
              "primitive": "number"
            },
            "variadic": true
          }
        ],
        "initializer": true,
        "variadic": true
      }
    },
    "jsii-calc.Statics": {
      "kind": "class",
      "properties": [
        {
          "name": "value",
          "type": {
            "primitive": "string"
          },
          "immutable": true
        },
        {
          "docs": {
            "comment": "Jsdocs for static property."
          },
          "name": "Foo",
          "static": true,
          "type": {
            "primitive": "string"
          },
          "immutable": true,
          "const": true
        },
        {
          "docs": {
            "comment": "Constants may also use all-caps."
          },
          "name": "BAR",
          "static": true,
          "type": {
            "primitive": "number"
          },
          "immutable": true,
          "const": true
        },
        {
          "docs": {
            "comment": "Constants can also use camelCase."
          },
          "name": "zooBar",
          "static": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          },
          "immutable": true,
          "const": true
        },
        {
          "docs": {
            "comment": "Jsdocs for static getter.\nJsdocs for static setter."
          },
          "name": "instance",
          "type": {
            "fqn": "jsii-calc.Statics"
          },
          "static": true
        },
        {
          "name": "nonConstStatic",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "ConstObj",
          "static": true,
          "type": {
            "fqn": "jsii-calc.DoubleTrouble"
          },
          "immutable": true,
          "const": true
        }
      ],
      "methods": [
        {
          "parameters": [
            {
              "docs": {
                "param": "name The name of the person to say hello to",
                "comment": "The name of the person to say hello to"
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "docs": {
            "comment": "Jsdocs for static method"
          },
          "name": "staticMethod",
          "static": true,
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "justMethod",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "jsii-calc.Statics",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "Statics",
      "initializer": {
        "parameters": [
          {
            "name": "value",
            "type": {
              "primitive": "string"
            }
          }
        ],
        "initializer": true
      }
    },
    "jsii-calc.JavaReservedWords": {
      "kind": "class",
      "properties": [
        {
          "name": "while",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "methods": [
        {
          "name": "abstract"
        },
        {
          "name": "assert"
        },
        {
          "name": "boolean"
        },
        {
          "name": "break"
        },
        {
          "name": "byte"
        },
        {
          "name": "case"
        },
        {
          "name": "catch"
        },
        {
          "name": "char"
        },
        {
          "name": "class"
        },
        {
          "name": "const"
        },
        {
          "name": "continue"
        },
        {
          "name": "default"
        },
        {
          "name": "double"
        },
        {
          "name": "do"
        },
        {
          "name": "else"
        },
        {
          "name": "enum"
        },
        {
          "name": "extends"
        },
        {
          "name": "false"
        },
        {
          "name": "final"
        },
        {
          "name": "finally"
        },
        {
          "name": "float"
        },
        {
          "name": "for"
        },
        {
          "name": "goto"
        },
        {
          "name": "if"
        },
        {
          "name": "implements"
        },
        {
          "name": "import"
        },
        {
          "name": "instanceof"
        },
        {
          "name": "int"
        },
        {
          "name": "interface"
        },
        {
          "name": "long"
        },
        {
          "name": "native"
        },
        {
          "name": "new"
        },
        {
          "name": "null"
        },
        {
          "name": "package"
        },
        {
          "name": "private"
        },
        {
          "name": "protected"
        },
        {
          "name": "public"
        },
        {
          "name": "return"
        },
        {
          "name": "short"
        },
        {
          "name": "static"
        },
        {
          "name": "strictfp"
        },
        {
          "name": "super"
        },
        {
          "name": "switch"
        },
        {
          "name": "synchronized"
        },
        {
          "name": "this"
        },
        {
          "name": "throw"
        },
        {
          "name": "throws"
        },
        {
          "name": "transient"
        },
        {
          "name": "true"
        },
        {
          "name": "try"
        },
        {
          "name": "void"
        },
        {
          "name": "volatile"
        }
      ],
      "fqn": "jsii-calc.JavaReservedWords",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "JavaReservedWords",
      "initializer": {
        "initializer": true
      }
    },
    "jsii-calc.UnionProperties": {
      "kind": "interface",
      "properties": [
        {
          "name": "foo",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                }
              ]
            },
            "optional": true
          }
        },
        {
          "name": "bar",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                },
                {
                  "fqn": "jsii-calc.AllTypes"
                }
              ]
            }
          },
          "immutable": true
        }
      ],
      "fqn": "jsii-calc.UnionProperties",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "UnionProperties",
      "datatype": true
    },
    "jsii-calc.UseBundledDependency": {
      "kind": "class",
      "methods": [
        {
          "name": "value",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "jsii-calc.UseBundledDependency",
      "module": "jsii-calc",
      "namespace": "jsii-calc",
      "name": "UseBundledDependency",
      "initializer": {
        "initializer": true
      }
    }
  },
  "nametree": {
    "jsii-calc": {
      "IFriendlier": {
        "_": "jsii-calc.IFriendlier"
      },
      "IRandomNumberGenerator": {
        "_": "jsii-calc.IRandomNumberGenerator"
      },
      "IFriendlyRandomGenerator": {
        "_": "jsii-calc.IFriendlyRandomGenerator"
      },
      "BinaryOperation": {
        "_": "jsii-calc.BinaryOperation"
      },
      "Add": {
        "_": "jsii-calc.Add"
      },
      "Multiply": {
        "_": "jsii-calc.Multiply"
      },
      "UnaryOperation": {
        "_": "jsii-calc.UnaryOperation"
      },
      "Negate": {
        "_": "jsii-calc.Negate"
      },
      "composition": {
        "CompositionStringStyle": {
          "_": "jsii-calc.composition.CompositionStringStyle"
        },
        "CompositeOperation": {
          "_": "jsii-calc.composition.CompositeOperation"
        }
      },
      "Sum": {
        "_": "jsii-calc.Sum"
      },
      "Power": {
        "_": "jsii-calc.Power"
      },
      "CalculatorProps": {
        "_": "jsii-calc.CalculatorProps"
      },
      "Calculator": {
        "_": "jsii-calc.Calculator"
      },
      "AllTypesEnum": {
        "_": "jsii-calc.AllTypesEnum"
      },
      "AllTypes": {
        "_": "jsii-calc.AllTypes"
      },
      "JSObjectLiteralToNative": {
        "_": "jsii-calc.JSObjectLiteralToNative"
      },
      "JSObjectLiteralToNativeClass": {
        "_": "jsii-calc.JSObjectLiteralToNativeClass"
      },
      "ObjectRefsInCollections": {
        "_": "jsii-calc.ObjectRefsInCollections"
      },
      "RuntimeTypeChecking": {
        "_": "jsii-calc.RuntimeTypeChecking"
      },
      "DerivedClassHasNoProperties": {
        "Base": {
          "_": "jsii-calc.DerivedClassHasNoProperties.Base"
        },
        "Derived": {
          "_": "jsii-calc.DerivedClassHasNoProperties.Derived"
        }
      },
      "AsyncVirtualMethods": {
        "_": "jsii-calc.AsyncVirtualMethods"
      },
      "SyncVirtualMethods": {
        "_": "jsii-calc.SyncVirtualMethods"
      },
      "VirtualMethodPlayground": {
        "_": "jsii-calc.VirtualMethodPlayground"
      },
      "DoubleTrouble": {
        "_": "jsii-calc.DoubleTrouble"
      },
      "Polymorphism": {
        "_": "jsii-calc.Polymorphism"
      },
      "NumberGenerator": {
        "_": "jsii-calc.NumberGenerator"
      },
      "JSObjectLiteralForInterface": {
        "_": "jsii-calc.JSObjectLiteralForInterface"
      },
      "DerivedStruct": {
        "_": "jsii-calc.DerivedStruct"
      },
      "GiveMeStructs": {
        "_": "jsii-calc.GiveMeStructs"
      },
      "IInterfaceWithProperties": {
        "_": "jsii-calc.IInterfaceWithProperties"
      },
      "IInterfaceWithPropertiesExtension": {
        "_": "jsii-calc.IInterfaceWithPropertiesExtension"
      },
      "UsesInterfaceWithProperties": {
        "_": "jsii-calc.UsesInterfaceWithProperties"
      },
      "AllowedMethodNames": {
        "_": "jsii-calc.AllowedMethodNames"
      },
      "ReturnsNumber": {
        "_": "jsii-calc.ReturnsNumber"
      },
      "OverrideReturnsObject": {
        "_": "jsii-calc.OverrideReturnsObject"
      },
      "Thrower": {
        "_": "jsii-calc.Thrower"
      },
      "VariadicMethod": {
        "_": "jsii-calc.VariadicMethod"
      },
      "Statics": {
        "_": "jsii-calc.Statics"
      },
      "JavaReservedWords": {
        "_": "jsii-calc.JavaReservedWords"
      },
      "UnionProperties": {
        "_": "jsii-calc.UnionProperties"
      },
      "UseBundledDependency": {
        "_": "jsii-calc.UseBundledDependency"
      }
    }
  },
  "typecount": 43,
  "externalTypes": {
    "@scope/jsii-calc-lib.IFriendly": {
      "docs": {
        "comment": "Applies to classes that are considered friendly. These classes can be greeted with\na \"hello\" or \"goodbye\" blessing and they will respond back in a fun and friendly manner."
      },
      "kind": "interface",
      "methods": [
        {
          "docs": {
            "comment": "Say hello!"
          },
          "name": "hello",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "@scope/jsii-calc-lib.IFriendly",
      "module": "@scope/jsii-calc-lib",
      "namespace": "@scope/jsii-calc-lib",
      "name": "IFriendly"
    },
    "@scope/jsii-calc-lib.Operation": {
      "docs": {
        "comment": "Represents an operation on values."
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "abstract": true,
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "fqn": "@scope/jsii-calc-lib.Operation",
      "module": "@scope/jsii-calc-lib",
      "namespace": "@scope/jsii-calc-lib",
      "name": "Operation",
      "base": {
        "fqn": "@scope/jsii-calc-lib.Value"
      },
      "abstract": true,
      "initializer": {
        "initializer": true
      }
    },
    "@scope/jsii-calc-lib.Value": {
      "docs": {
        "comment": "Abstract class which represents a numeric value."
      },
      "kind": "class",
      "properties": [
        {
          "docs": {
            "comment": "The value."
          },
          "name": "value",
          "type": {
            "primitive": "number"
          },
          "immutable": true,
          "abstract": true
        }
      ],
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the name of the class (to verify native type names are created for derived classes)."
          },
          "name": "typeName",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "fqn": "@scope/jsii-calc-lib.Value",
      "module": "@scope/jsii-calc-lib",
      "namespace": "@scope/jsii-calc-lib",
      "name": "Value",
      "abstract": true,
      "initializer": {
        "initializer": true
      }
    },
    "@scope/jsii-calc-lib.MyFirstStruct": {
      "docs": {
        "comment": "This is the first struct we have created in jsii"
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "A string value"
          },
          "name": "astring",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "An awesome number value"
          },
          "name": "anumber",
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "firstOptional",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        }
      ],
      "fqn": "@scope/jsii-calc-lib.MyFirstStruct",
      "module": "@scope/jsii-calc-lib",
      "namespace": "@scope/jsii-calc-lib",
      "name": "MyFirstStruct",
      "datatype": true
    },
    "@scope/jsii-calc-lib.StructWithOnlyOptionals": {
      "docs": {
        "comment": "This is a struct with only optional properties."
      },
      "kind": "interface",
      "properties": [
        {
          "docs": {
            "comment": "The first optional!"
          },
          "name": "optional1",
          "type": {
            "primitive": "string",
            "optional": true
          }
        },
        {
          "name": "optional2",
          "type": {
            "primitive": "number",
            "optional": true
          }
        },
        {
          "name": "optional3",
          "type": {
            "primitive": "boolean",
            "optional": true
          }
        }
      ],
      "fqn": "@scope/jsii-calc-lib.StructWithOnlyOptionals",
      "module": "@scope/jsii-calc-lib",
      "namespace": "@scope/jsii-calc-lib",
      "name": "StructWithOnlyOptionals",
      "datatype": true
    }
  },
  "name": "jsii-calc",
  "package": "jsii-calc",
  "version": "0.5.0-beta",
  "dependencies": {
    "@scope/jsii-calc-lib": {
      "package": "@scope/jsii-calc-lib",
      "version": "0.5.0-beta"
    }
  },
  "bundled": {
    "jsii-calc-bundled": "^0.5.0-beta"
  },
  "names": {
    "java": "org.jsii.tests.calculator",
    "dotnet": "AWS.Jsii.Tests.Calculator",
    "js": "jsii-calc"
  },
  "nativenames": {
    "@scope/jsii-calc-lib": {
      "java": "org.jsii.tests.calculator.lib",
      "dotnet": "AWS.Jsii.Tests.Calculator.Lib",
      "js": "@scope/jsii-calc-lib"
    },
    "jsii-calc": {
      "java": "org.jsii.tests.calculator",
      "dotnet": "AWS.Jsii.Tests.Calculator",
      "js": "jsii-calc"
    }
  },
  "readme": {
    "markdown": "## JSII Calculator\n\nThis library is used to demonstrate and test the features of JSII\n"
  }
}
