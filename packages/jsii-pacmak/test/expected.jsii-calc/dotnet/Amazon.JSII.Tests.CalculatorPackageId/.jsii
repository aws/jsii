{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "bundled": {
    "jsii-calc-bundled": "^0.7.3"
  },
  "contributors": [
    {
      "name": "Elad Ben-Israel",
      "roles": [
        "maintainer"
      ],
      "url": "https://github.com/eladb"
    },
    {
      "name": "Rico Huijbers",
      "roles": [
        "maintainer"
      ],
      "url": "https://github.com/rix0rrr"
    },
    {
      "name": "Romain Marcadier-Muller",
      "roles": [
        "maintainer"
      ],
      "url": "https://github.com/RomainMuller"
    }
  ],
  "dependencies": {
    "@scope/jsii-calc-base": {
      "dependencies": {
        "@scope/jsii-calc-base-of-base": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace",
              "packageId": "Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId"
            },
            "java": {
              "maven": {
                "artifactId": "calculator-base-of-base",
                "groupId": "software.amazon.jsii.tests"
              },
              "package": "software.amazon.jsii.tests.calculator.baseofbase"
            },
            "js": {
              "npm": "@scope/jsii-calc-base-of-base"
            }
          },
          "version": "0.7.3"
        }
      },
      "targets": {
        "dotnet": {
          "namespace": "Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace",
          "packageId": "Amazon.JSII.Tests.CalculatorPackageId.BasePackageId"
        },
        "java": {
          "maven": {
            "artifactId": "calculator-base",
            "groupId": "software.amazon.jsii.tests"
          },
          "package": "software.amazon.jsii.tests.calculator.base"
        },
        "js": {
          "npm": "@scope/jsii-calc-base"
        }
      },
      "version": "0.7.3"
    },
    "@scope/jsii-calc-lib": {
      "dependencies": {
        "@scope/jsii-calc-base": {
          "dependencies": {
            "@scope/jsii-calc-base-of-base": {
              "targets": {
                "dotnet": {
                  "namespace": "Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace",
                  "packageId": "Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId"
                },
                "java": {
                  "maven": {
                    "artifactId": "calculator-base-of-base",
                    "groupId": "software.amazon.jsii.tests"
                  },
                  "package": "software.amazon.jsii.tests.calculator.baseofbase"
                },
                "js": {
                  "npm": "@scope/jsii-calc-base-of-base"
                }
              },
              "version": "0.7.3"
            }
          },
          "targets": {
            "dotnet": {
              "namespace": "Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace",
              "packageId": "Amazon.JSII.Tests.CalculatorPackageId.BasePackageId"
            },
            "java": {
              "maven": {
                "artifactId": "calculator-base",
                "groupId": "software.amazon.jsii.tests"
              },
              "package": "software.amazon.jsii.tests.calculator.base"
            },
            "js": {
              "npm": "@scope/jsii-calc-base"
            }
          },
          "version": "0.7.3"
        }
      },
      "targets": {
        "dotnet": {
          "namespace": "Amazon.JSII.Tests.CalculatorNamespace.LibNamespace",
          "packageId": "Amazon.JSII.Tests.CalculatorPackageId.LibPackageId"
        },
        "java": {
          "maven": {
            "artifactId": "calculator-lib",
            "groupId": "software.amazon.jsii.tests"
          },
          "package": "software.amazon.jsii.tests.calculator.lib"
        },
        "js": {
          "npm": "@scope/jsii-calc-lib"
        }
      },
      "version": "0.7.3"
    }
  },
  "description": "A simple calcuator built on JSII.",
  "homepage": "https://github.com/awslabs/jsii.git",
  "license": "Apache-2.0",
  "name": "jsii-calc",
  "readme": {
    "markdown": "## JSII Calculator\n\nThis library is used to demonstrate and test the features of JSII\n"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/awslabs/jsii.git"
  },
  "schema": "jsii/1.0",
  "targets": {
    "dotnet": {
      "namespace": "Amazon.JSII.Tests.CalculatorNamespace",
      "packageId": "Amazon.JSII.Tests.CalculatorPackageId"
    },
    "java": {
      "maven": {
        "artifactId": "calculator",
        "groupId": "software.amazon.jsii.tests"
      },
      "package": "software.amazon.jsii.tests.calculator"
    },
    "js": {
      "npm": "jsii-calc"
    }
  },
  "types": {
    "jsii-calc.Add": {
      "assembly": "jsii-calc",
      "base": {
        "fqn": "jsii-calc.BinaryOperation"
      },
      "docs": {
        "comment": "The \"+\" binary operation."
      },
      "fqn": "jsii-calc.Add",
      "initializer": {
        "docs": {
          "comment": "Creates a BinaryOperation"
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "Left-hand side operand"
            },
            "name": "lhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "comment": "Right-hand side operand"
            },
            "name": "rhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@scope/jsii-calc-lib.Operation"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "Add",
      "properties": [
        {
          "docs": {
            "comment": "The value."
          },
          "immutable": true,
          "name": "value",
          "overrides": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.AllTypes": {
      "assembly": "jsii-calc",
      "docs": {
        "comment": "This class includes property for all types supported by jsii. The setters will validate\nthat the value set is of the expected type and throw otherwise."
      },
      "fqn": "jsii-calc.AllTypes",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "enumMethod",
          "parameters": [
            {
              "name": "value",
              "type": {
                "fqn": "jsii-calc.StringEnum"
              }
            }
          ],
          "returns": {
            "fqn": "jsii-calc.StringEnum"
          }
        }
      ],
      "name": "AllTypes",
      "properties": [
        {
          "immutable": true,
          "name": "enumPropertyValue",
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "anyArrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "name": "anyMapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "name": "anyProperty",
          "type": {
            "primitive": "any"
          }
        },
        {
          "name": "arrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "name": "booleanProperty",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "name": "dateProperty",
          "type": {
            "primitive": "date"
          }
        },
        {
          "name": "enumProperty",
          "type": {
            "fqn": "jsii-calc.AllTypesEnum"
          }
        },
        {
          "name": "jsonProperty",
          "type": {
            "primitive": "json"
          }
        },
        {
          "name": "mapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "map"
            }
          }
        },
        {
          "name": "numberProperty",
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "stringProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "unionArrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "number"
                    },
                    {
                      "fqn": "jsii-calc.composition.CompositeOperation"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "name": "unionMapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "primitive": "number"
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "name": "unionProperty",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                },
                {
                  "fqn": "jsii-calc.Multiply"
                }
              ]
            }
          }
        },
        {
          "name": "unknownArrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "name": "unknownMapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "name": "unknownProperty",
          "type": {
            "primitive": "any"
          }
        },
        {
          "name": "optionalEnumValue",
          "type": {
            "fqn": "jsii-calc.StringEnum",
            "optional": true
          }
        }
      ]
    },
    "jsii-calc.AllTypesEnum": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.AllTypesEnum",
      "kind": "enum",
      "members": [
        {
          "name": "MyEnumValue"
        },
        {
          "name": "YourEnumValue"
        },
        {
          "name": "ThisIsGreat"
        }
      ],
      "name": "AllTypesEnum"
    },
    "jsii-calc.AllowedMethodNames": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.AllowedMethodNames",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "getBar",
          "parameters": [
            {
              "name": "_p1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_p2",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay."
          },
          "name": "getFoo",
          "parameters": [
            {
              "name": "withParam",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "setBar",
          "parameters": [
            {
              "name": "_x",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_y",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "_z",
              "type": {
                "primitive": "boolean"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay."
          },
          "name": "setFoo",
          "parameters": [
            {
              "name": "_x",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_y",
              "type": {
                "primitive": "number"
              }
            }
          ]
        }
      ],
      "name": "AllowedMethodNames"
    },
    "jsii-calc.AsyncVirtualMethods": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.AsyncVirtualMethods",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "callMe",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "docs": {
            "comment": "Just calls \"overrideMeToo\""
          },
          "name": "callMe2",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "docs": {
            "comment": "This method calls the \"callMe\" async method indirectly, which will then\ninvoke a virtual method. This is a \"double promise\" situation, which\nmeans that callbacks are not going to be available immediate, but only\nafter an \"immediates\" cycle."
          },
          "name": "callMeDoublePromise",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "name": "dontOverrideMe",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "name": "overrideMe",
          "parameters": [
            {
              "name": "mult",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "name": "overrideMeToo",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        }
      ],
      "name": "AsyncVirtualMethods"
    },
    "jsii-calc.BinaryOperation": {
      "abstract": true,
      "assembly": "jsii-calc",
      "base": {
        "fqn": "@scope/jsii-calc-lib.Operation"
      },
      "docs": {
        "comment": "Represents an operation with two operands."
      },
      "fqn": "jsii-calc.BinaryOperation",
      "initializer": {
        "docs": {
          "comment": "Creates a BinaryOperation"
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "Left-hand side operand"
            },
            "name": "lhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "comment": "Right-hand side operand"
            },
            "name": "rhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@scope/jsii-calc-lib.IFriendly"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Say hello!"
          },
          "name": "hello",
          "overrides": {
            "fqn": "@scope/jsii-calc-lib.IFriendly"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "BinaryOperation",
      "properties": [
        {
          "docs": {
            "comment": "Left-hand side operand"
          },
          "immutable": true,
          "name": "lhs",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "comment": "Right-hand side operand"
          },
          "immutable": true,
          "name": "rhs",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        }
      ]
    },
    "jsii-calc.Calculator": {
      "assembly": "jsii-calc",
      "base": {
        "fqn": "jsii-calc.composition.CompositeOperation"
      },
      "docs": {
        "comment": "A calculator which maintains a current value and allows adding operations."
      },
      "fqn": "jsii-calc.Calculator",
      "initializer": {
        "docs": {
          "comment": "Creates a Calculator object."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "Initialization properties."
            },
            "name": "props",
            "type": {
              "fqn": "jsii-calc.CalculatorProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Adds a number to the current value."
          },
          "name": "add",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Multiplies the current value by a number."
          },
          "name": "mul",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Negates the current value."
          },
          "name": "neg"
        },
        {
          "docs": {
            "comment": "Raises the current value by a power."
          },
          "name": "pow",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Returns teh value of the union property (if defined)."
          },
          "name": "readUnionValue",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "name": "Calculator",
      "properties": [
        {
          "docs": {
            "comment": "Returns the expression."
          },
          "immutable": true,
          "name": "expression",
          "overrides": {
            "fqn": "jsii-calc.composition.CompositeOperation"
          },
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "comment": "A log of all operations."
          },
          "immutable": true,
          "name": "operationsLog",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.Value"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "A map of per operation name of all operations performed."
          },
          "immutable": true,
          "name": "operationsMap",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "fqn": "@scope/jsii-calc-lib.Value"
                  },
                  "kind": "array"
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "comment": "The current value."
          },
          "name": "curr",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "comment": "The maximum value allows in this calculator."
          },
          "name": "maxValue",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "docs": {
            "comment": "Example of a property that accepts a union of types."
          },
          "name": "unionProperty",
          "type": {
            "optional": true,
            "union": {
              "types": [
                {
                  "fqn": "jsii-calc.Add"
                },
                {
                  "fqn": "jsii-calc.Multiply"
                },
                {
                  "fqn": "jsii-calc.Power"
                }
              ]
            }
          }
        }
      ]
    },
    "jsii-calc.CalculatorProps": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "comment": "Properties for Calculator."
      },
      "fqn": "jsii-calc.CalculatorProps",
      "kind": "interface",
      "name": "CalculatorProps",
      "properties": [
        {
          "name": "initialValue",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "name": "maximumValue",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.DerivedClassHasNoProperties.Base": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.DerivedClassHasNoProperties.Base",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "Base",
      "namespace": "DerivedClassHasNoProperties",
      "properties": [
        {
          "name": "prop",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.DerivedClassHasNoProperties.Derived": {
      "assembly": "jsii-calc",
      "base": {
        "fqn": "jsii-calc.DerivedClassHasNoProperties.Base"
      },
      "fqn": "jsii-calc.DerivedClassHasNoProperties.Derived",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "Derived",
      "namespace": "DerivedClassHasNoProperties"
    },
    "jsii-calc.DerivedStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "comment": "A struct which derives from another struct."
      },
      "fqn": "jsii-calc.DerivedStruct",
      "interfaces": [
        {
          "fqn": "@scope/jsii-calc-lib.MyFirstStruct"
        }
      ],
      "kind": "interface",
      "name": "DerivedStruct",
      "properties": [
        {
          "name": "anotherRequired",
          "type": {
            "primitive": "date"
          }
        },
        {
          "name": "bool",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "An example of a non primitive property."
          },
          "name": "nonPrimitive",
          "type": {
            "fqn": "jsii-calc.DoubleTrouble"
          }
        },
        {
          "docs": {
            "comment": "This is optional."
          },
          "name": "anotherOptional",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.Value"
              },
              "kind": "map"
            },
            "optional": true
          }
        },
        {
          "name": "optionalArray",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        }
      ]
    },
    "jsii-calc.DoubleTrouble": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.DoubleTrouble",
      "initializer": {
        "initializer": true
      },
      "interfaces": [
        {
          "fqn": "jsii-calc.IFriendlyRandomGenerator"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Say hello!"
          },
          "name": "hello",
          "overrides": {
            "fqn": "@scope/jsii-calc-lib.IFriendly"
          },
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns another random number."
          },
          "name": "next",
          "overrides": {
            "fqn": "jsii-calc.IRandomNumberGenerator"
          },
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "name": "DoubleTrouble"
    },
    "jsii-calc.GiveMeStructs": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.GiveMeStructs",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct."
          },
          "name": "derivedToFirst",
          "parameters": [
            {
              "name": "derived",
              "type": {
                "fqn": "jsii-calc.DerivedStruct"
              }
            }
          ],
          "returns": {
            "fqn": "@scope/jsii-calc-lib.MyFirstStruct"
          }
        },
        {
          "docs": {
            "comment": "Returns the boolean from a DerivedStruct struct."
          },
          "name": "readDerivedNonPrimitive",
          "parameters": [
            {
              "name": "derived",
              "type": {
                "fqn": "jsii-calc.DerivedStruct"
              }
            }
          ],
          "returns": {
            "fqn": "jsii-calc.DoubleTrouble"
          }
        },
        {
          "docs": {
            "comment": "Returns the \"anumber\" from a MyFirstStruct struct;"
          },
          "name": "readFirstNumber",
          "parameters": [
            {
              "name": "first",
              "type": {
                "fqn": "@scope/jsii-calc-lib.MyFirstStruct"
              }
            }
          ],
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "name": "GiveMeStructs",
      "properties": [
        {
          "immutable": true,
          "name": "structLiteral",
          "type": {
            "fqn": "@scope/jsii-calc-lib.StructWithOnlyOptionals"
          }
        }
      ]
    },
    "jsii-calc.IFriendlier": {
      "assembly": "jsii-calc",
      "docs": {
        "comment": "Even friendlier classes can implement this interface."
      },
      "fqn": "jsii-calc.IFriendlier",
      "interfaces": [
        {
          "fqn": "@scope/jsii-calc-lib.IFriendly"
        }
      ],
      "kind": "interface",
      "methods": [
        {
          "docs": {
            "comment": "Say farewell."
          },
          "name": "farewell",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say goodbye.",
            "return": "A goodbye blessing."
          },
          "name": "goodbye",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "IFriendlier"
    },
    "jsii-calc.IFriendlyRandomGenerator": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.IFriendlyRandomGenerator",
      "interfaces": [
        {
          "fqn": "jsii-calc.IRandomNumberGenerator"
        },
        {
          "fqn": "@scope/jsii-calc-lib.IFriendly"
        }
      ],
      "kind": "interface",
      "name": "IFriendlyRandomGenerator"
    },
    "jsii-calc.IInterfaceWithProperties": {
      "assembly": "jsii-calc",
      "datatype": true,
      "fqn": "jsii-calc.IInterfaceWithProperties",
      "kind": "interface",
      "name": "IInterfaceWithProperties",
      "properties": [
        {
          "immutable": true,
          "name": "readOnlyString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "readWriteString",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.IInterfaceWithPropertiesExtension": {
      "assembly": "jsii-calc",
      "datatype": true,
      "fqn": "jsii-calc.IInterfaceWithPropertiesExtension",
      "interfaces": [
        {
          "fqn": "jsii-calc.IInterfaceWithProperties"
        }
      ],
      "kind": "interface",
      "name": "IInterfaceWithPropertiesExtension",
      "properties": [
        {
          "name": "foo",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.IRandomNumberGenerator": {
      "assembly": "jsii-calc",
      "docs": {
        "comment": "Generates random numbers."
      },
      "fqn": "jsii-calc.IRandomNumberGenerator",
      "kind": "interface",
      "methods": [
        {
          "docs": {
            "comment": "Returns another random number.",
            "return": "A random number."
          },
          "name": "next",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "name": "IRandomNumberGenerator"
    },
    "jsii-calc.ImplictBaseOfBase": {
      "assembly": "jsii-calc",
      "datatype": true,
      "fqn": "jsii-calc.ImplictBaseOfBase",
      "interfaces": [
        {
          "fqn": "@scope/jsii-calc-base.BaseProps"
        }
      ],
      "kind": "interface",
      "name": "ImplictBaseOfBase",
      "properties": [
        {
          "name": "goo",
          "type": {
            "primitive": "date"
          }
        }
      ]
    },
    "jsii-calc.InterfaceInNamespaceIncludesClasses.Foo": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "Foo",
      "namespace": "InterfaceInNamespaceIncludesClasses",
      "properties": [
        {
          "name": "bar",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.InterfaceInNamespaceIncludesClasses.Hello": {
      "assembly": "jsii-calc",
      "datatype": true,
      "fqn": "jsii-calc.InterfaceInNamespaceIncludesClasses.Hello",
      "kind": "interface",
      "name": "Hello",
      "namespace": "InterfaceInNamespaceIncludesClasses",
      "properties": [
        {
          "name": "foo",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.InterfaceInNamespaceOnlyInterface.Hello": {
      "assembly": "jsii-calc",
      "datatype": true,
      "fqn": "jsii-calc.InterfaceInNamespaceOnlyInterface.Hello",
      "kind": "interface",
      "name": "Hello",
      "namespace": "InterfaceInNamespaceOnlyInterface",
      "properties": [
        {
          "name": "foo",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.InterfaceWithOptionalMethodArguments": {
      "assembly": "jsii-calc",
      "docs": {
        "comment": "awslabs/jsii#175\nInterface proxies (and builders) do not respect optional arguments in methods"
      },
      "fqn": "jsii-calc.InterfaceWithOptionalMethodArguments",
      "kind": "interface",
      "methods": [
        {
          "name": "hello",
          "parameters": [
            {
              "name": "arg1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg2",
              "type": {
                "optional": true,
                "primitive": "number"
              }
            }
          ]
        }
      ],
      "name": "InterfaceWithOptionalMethodArguments"
    },
    "jsii-calc.JSObjectLiteralForInterface": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.JSObjectLiteralForInterface",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "giveMeFriendly",
          "returns": {
            "fqn": "@scope/jsii-calc-lib.IFriendly"
          }
        },
        {
          "name": "giveMeFriendlyGenerator",
          "returns": {
            "fqn": "jsii-calc.IFriendlyRandomGenerator"
          }
        }
      ],
      "name": "JSObjectLiteralForInterface"
    },
    "jsii-calc.JSObjectLiteralToNative": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.JSObjectLiteralToNative",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "returnLiteral",
          "returns": {
            "fqn": "jsii-calc.JSObjectLiteralToNativeClass"
          }
        }
      ],
      "name": "JSObjectLiteralToNative"
    },
    "jsii-calc.JSObjectLiteralToNativeClass": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.JSObjectLiteralToNativeClass",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "JSObjectLiteralToNativeClass",
      "properties": [
        {
          "name": "propA",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "propB",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.JavaReservedWords": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.JavaReservedWords",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "abstract"
        },
        {
          "name": "assert"
        },
        {
          "name": "boolean"
        },
        {
          "name": "break"
        },
        {
          "name": "byte"
        },
        {
          "name": "case"
        },
        {
          "name": "catch"
        },
        {
          "name": "char"
        },
        {
          "name": "class"
        },
        {
          "name": "const"
        },
        {
          "name": "continue"
        },
        {
          "name": "default"
        },
        {
          "name": "do"
        },
        {
          "name": "double"
        },
        {
          "name": "else"
        },
        {
          "name": "enum"
        },
        {
          "name": "extends"
        },
        {
          "name": "false"
        },
        {
          "name": "final"
        },
        {
          "name": "finally"
        },
        {
          "name": "float"
        },
        {
          "name": "for"
        },
        {
          "name": "goto"
        },
        {
          "name": "if"
        },
        {
          "name": "implements"
        },
        {
          "name": "import"
        },
        {
          "name": "instanceof"
        },
        {
          "name": "int"
        },
        {
          "name": "interface"
        },
        {
          "name": "long"
        },
        {
          "name": "native"
        },
        {
          "name": "new"
        },
        {
          "name": "null"
        },
        {
          "name": "package"
        },
        {
          "name": "private"
        },
        {
          "name": "protected"
        },
        {
          "name": "public"
        },
        {
          "name": "return"
        },
        {
          "name": "short"
        },
        {
          "name": "static"
        },
        {
          "name": "strictfp"
        },
        {
          "name": "super"
        },
        {
          "name": "switch"
        },
        {
          "name": "synchronized"
        },
        {
          "name": "this"
        },
        {
          "name": "throw"
        },
        {
          "name": "throws"
        },
        {
          "name": "transient"
        },
        {
          "name": "true"
        },
        {
          "name": "try"
        },
        {
          "name": "void"
        },
        {
          "name": "volatile"
        }
      ],
      "name": "JavaReservedWords",
      "properties": [
        {
          "name": "while",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.Multiply": {
      "assembly": "jsii-calc",
      "base": {
        "fqn": "jsii-calc.BinaryOperation"
      },
      "docs": {
        "comment": "The \"*\" binary operation."
      },
      "fqn": "jsii-calc.Multiply",
      "initializer": {
        "docs": {
          "comment": "Creates a BinaryOperation"
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "Left-hand side operand"
            },
            "name": "lhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "comment": "Right-hand side operand"
            },
            "name": "rhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "jsii-calc.IFriendlier"
        },
        {
          "fqn": "jsii-calc.IRandomNumberGenerator"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Say farewell."
          },
          "name": "farewell",
          "overrides": {
            "fqn": "jsii-calc.IFriendlier"
          },
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say goodbye."
          },
          "name": "goodbye",
          "overrides": {
            "fqn": "jsii-calc.IFriendlier"
          },
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns another random number."
          },
          "name": "next",
          "overrides": {
            "fqn": "jsii-calc.IRandomNumberGenerator"
          },
          "returns": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@scope/jsii-calc-lib.Operation"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "Multiply",
      "properties": [
        {
          "docs": {
            "comment": "The value."
          },
          "immutable": true,
          "name": "value",
          "overrides": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.Negate": {
      "assembly": "jsii-calc",
      "base": {
        "fqn": "jsii-calc.UnaryOperation"
      },
      "docs": {
        "comment": "The negation operation (\"-value\")"
      },
      "fqn": "jsii-calc.Negate",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "operand",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "jsii-calc.IFriendlier"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Say farewell."
          },
          "name": "farewell",
          "overrides": {
            "fqn": "jsii-calc.IFriendlier"
          },
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say goodbye."
          },
          "name": "goodbye",
          "overrides": {
            "fqn": "jsii-calc.IFriendlier"
          },
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Say hello!"
          },
          "name": "hello",
          "overrides": {
            "fqn": "@scope/jsii-calc-lib.IFriendly"
          },
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@scope/jsii-calc-lib.Operation"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "Negate",
      "properties": [
        {
          "docs": {
            "comment": "The value."
          },
          "immutable": true,
          "name": "value",
          "overrides": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.NodeStandardLibrary": {
      "assembly": "jsii-calc",
      "docs": {
        "comment": "Test fixture to verify that jsii modules can use the node standard library."
      },
      "fqn": "jsii-calc.NodeStandardLibrary",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Uses node.js \"crypto\" module to calculate sha256 of a string.",
            "return": "\"6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\""
          },
          "name": "cryptoSha256",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Reads a local resource file (resource.txt) asynchronously.",
            "return": "\"Hello, resource!\""
          },
          "name": "fsReadFile",
          "returns": {
            "primitive": "string",
            "promise": true
          }
        },
        {
          "docs": {
            "comment": "Sync version of fsReadFile.",
            "return": "\"Hello, resource! SYNC!\""
          },
          "name": "fsReadFileSync",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "NodeStandardLibrary",
      "properties": [
        {
          "docs": {
            "comment": "Returns the current os.platform() from the \"os\" node module."
          },
          "immutable": true,
          "name": "osPlatform",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.NumberGenerator": {
      "assembly": "jsii-calc",
      "docs": {
        "comment": "This allows us to test that a reference can be stored for objects that\nimplement interfaces."
      },
      "fqn": "jsii-calc.NumberGenerator",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "generator",
            "type": {
              "fqn": "jsii-calc.IRandomNumberGenerator"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "isSameGenerator",
          "parameters": [
            {
              "name": "gen",
              "type": {
                "fqn": "jsii-calc.IRandomNumberGenerator"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        },
        {
          "name": "nextTimes100",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "name": "NumberGenerator",
      "properties": [
        {
          "name": "generator",
          "type": {
            "fqn": "jsii-calc.IRandomNumberGenerator"
          }
        }
      ]
    },
    "jsii-calc.ObjectRefsInCollections": {
      "assembly": "jsii-calc",
      "docs": {
        "comment": "Verify that object references can be passed inside collections."
      },
      "fqn": "jsii-calc.ObjectRefsInCollections",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns the sum of all values"
          },
          "name": "sumFromArray",
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@scope/jsii-calc-lib.Value"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "comment": "Returns the sum of all values in a map"
          },
          "name": "sumFromMap",
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@scope/jsii-calc-lib.Value"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "name": "ObjectRefsInCollections"
    },
    "jsii-calc.OverrideReturnsObject": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.OverrideReturnsObject",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "test",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "fqn": "jsii-calc.ReturnsNumber"
              }
            }
          ],
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "name": "OverrideReturnsObject"
    },
    "jsii-calc.Polymorphism": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.Polymorphism",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "sayHello",
          "parameters": [
            {
              "name": "friendly",
              "type": {
                "fqn": "@scope/jsii-calc-lib.IFriendly"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "Polymorphism"
    },
    "jsii-calc.Power": {
      "assembly": "jsii-calc",
      "base": {
        "fqn": "jsii-calc.composition.CompositeOperation"
      },
      "docs": {
        "comment": "The power operation."
      },
      "fqn": "jsii-calc.Power",
      "initializer": {
        "docs": {
          "comment": "Creates a Power operation."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The base of the power"
            },
            "name": "base",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "comment": "The number of times to multiply"
            },
            "name": "pow",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "kind": "class",
      "name": "Power",
      "properties": [
        {
          "docs": {
            "comment": "The base of the power"
          },
          "immutable": true,
          "name": "base",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "comment": "The expression that this operation consists of.\nMust be implemented by derived classes."
          },
          "immutable": true,
          "name": "expression",
          "overrides": {
            "fqn": "jsii-calc.composition.CompositeOperation"
          },
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "comment": "The number of times to multiply"
          },
          "immutable": true,
          "name": "pow",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        }
      ]
    },
    "jsii-calc.ReferenceEnumFromScopedPackage": {
      "assembly": "jsii-calc",
      "docs": {
        "comment": "See awslabs/jsii#138"
      },
      "fqn": "jsii-calc.ReferenceEnumFromScopedPackage",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "loadFoo",
          "returns": {
            "fqn": "@scope/jsii-calc-lib.EnumFromScopedModule",
            "optional": true
          }
        },
        {
          "name": "saveFoo",
          "parameters": [
            {
              "name": "value",
              "type": {
                "fqn": "@scope/jsii-calc-lib.EnumFromScopedModule"
              }
            }
          ]
        }
      ],
      "name": "ReferenceEnumFromScopedPackage",
      "properties": [
        {
          "name": "foo",
          "type": {
            "fqn": "@scope/jsii-calc-lib.EnumFromScopedModule",
            "optional": true
          }
        }
      ]
    },
    "jsii-calc.ReturnsNumber": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.ReturnsNumber",
      "kind": "interface",
      "methods": [
        {
          "name": "obtainNumber",
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "name": "ReturnsNumber",
      "properties": [
        {
          "immutable": true,
          "name": "numberProp",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.RuntimeTypeChecking": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.RuntimeTypeChecking",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Used to verify verification of number of method arguments."
          },
          "name": "methodWithOptionalArguments",
          "parameters": [
            {
              "name": "arg1",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "arg2",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg3",
              "type": {
                "optional": true,
                "primitive": "date"
              }
            }
          ]
        }
      ],
      "name": "RuntimeTypeChecking"
    },
    "jsii-calc.Statics": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.Statics",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "value",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Jsdocs for static method"
          },
          "name": "staticMethod",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the person to say hello to"
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        },
        {
          "name": "justMethod",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "Statics",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "Constants may also use all-caps."
          },
          "immutable": true,
          "name": "BAR",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "const": true,
          "immutable": true,
          "name": "ConstObj",
          "static": true,
          "type": {
            "fqn": "jsii-calc.DoubleTrouble"
          }
        },
        {
          "const": true,
          "docs": {
            "comment": "Jsdocs for static property."
          },
          "immutable": true,
          "name": "Foo",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "comment": "Constants can also use camelCase."
          },
          "immutable": true,
          "name": "zooBar",
          "static": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "comment": "Jsdocs for static getter.\nJsdocs for static setter."
          },
          "name": "instance",
          "static": true,
          "type": {
            "fqn": "jsii-calc.Statics"
          }
        },
        {
          "name": "nonConstStatic",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "immutable": true,
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.StringEnum": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.StringEnum",
      "kind": "enum",
      "members": [
        {
          "name": "A"
        },
        {
          "name": "B"
        },
        {
          "name": "C"
        }
      ],
      "name": "StringEnum"
    },
    "jsii-calc.Sum": {
      "assembly": "jsii-calc",
      "base": {
        "fqn": "jsii-calc.composition.CompositeOperation"
      },
      "docs": {
        "comment": "An operation that sums multiple values."
      },
      "fqn": "jsii-calc.Sum",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "Sum",
      "properties": [
        {
          "docs": {
            "comment": "The expression that this operation consists of.\nMust be implemented by derived classes."
          },
          "immutable": true,
          "name": "expression",
          "overrides": {
            "fqn": "jsii-calc.composition.CompositeOperation"
          },
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "comment": "The parts to sum."
          },
          "name": "parts",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.Value"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "jsii-calc.SyncVirtualMethods": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.SyncVirtualMethods",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "callerIsAsync",
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "name": "callerIsMethod",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "name": "modifyOtherProperty",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "name": "modifyValueOfTheProperty",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "name": "readA",
          "returns": {
            "primitive": "number"
          }
        },
        {
          "name": "retrieveOtherProperty",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "retrieveReadOnlyProperty",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "retrieveValueOfTheProperty",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "virtualMethod",
          "parameters": [
            {
              "name": "n",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "primitive": "number"
          }
        },
        {
          "name": "writeA",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ]
        }
      ],
      "name": "SyncVirtualMethods",
      "properties": [
        {
          "immutable": true,
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "a",
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "callerIsProperty",
          "type": {
            "primitive": "number"
          }
        },
        {
          "name": "otherProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "theProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "name": "valueOfOtherProperty",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.Thrower": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.Thrower",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "throwError"
        }
      ],
      "name": "Thrower"
    },
    "jsii-calc.UnaryOperation": {
      "abstract": true,
      "assembly": "jsii-calc",
      "base": {
        "fqn": "@scope/jsii-calc-lib.Operation"
      },
      "docs": {
        "comment": "An operation on a single operand."
      },
      "fqn": "jsii-calc.UnaryOperation",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "operand",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "kind": "class",
      "name": "UnaryOperation",
      "properties": [
        {
          "immutable": true,
          "name": "operand",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        }
      ]
    },
    "jsii-calc.UnionProperties": {
      "assembly": "jsii-calc",
      "datatype": true,
      "fqn": "jsii-calc.UnionProperties",
      "kind": "interface",
      "name": "UnionProperties",
      "properties": [
        {
          "immutable": true,
          "name": "bar",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                },
                {
                  "fqn": "jsii-calc.AllTypes"
                }
              ]
            }
          }
        },
        {
          "name": "foo",
          "type": {
            "optional": true,
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                }
              ]
            }
          }
        }
      ]
    },
    "jsii-calc.UseBundledDependency": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.UseBundledDependency",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "value",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "name": "UseBundledDependency"
    },
    "jsii-calc.UseCalcBase": {
      "assembly": "jsii-calc",
      "docs": {
        "comment": "Depend on a type from jsii-calc-base as a test for awslabs/jsii#128"
      },
      "fqn": "jsii-calc.UseCalcBase",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "hello",
          "returns": {
            "fqn": "@scope/jsii-calc-base.Base"
          }
        }
      ],
      "name": "UseCalcBase"
    },
    "jsii-calc.UsesInterfaceWithProperties": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.UsesInterfaceWithProperties",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "obj",
            "type": {
              "fqn": "jsii-calc.IInterfaceWithProperties"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "justRead",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "readStringAndNumber",
          "parameters": [
            {
              "name": "ext",
              "type": {
                "fqn": "jsii-calc.IInterfaceWithPropertiesExtension"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "writeAndRead",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "UsesInterfaceWithProperties",
      "properties": [
        {
          "immutable": true,
          "name": "obj",
          "type": {
            "fqn": "jsii-calc.IInterfaceWithProperties"
          }
        }
      ]
    },
    "jsii-calc.VariadicMethod": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.VariadicMethod",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "a prefix that will be use for all values returned by ``#asArray``."
            },
            "name": "prefix",
            "type": {
              "primitive": "number"
            },
            "variadic": true
          }
        ],
        "variadic": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "asArray",
          "parameters": [
            {
              "docs": {
                "comment": "the first element of the array to be returned (after the ``prefix`` provided at construction time)."
              },
              "name": "first",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "comment": "other elements to be included in the array."
              },
              "name": "others",
              "type": {
                "primitive": "number"
              },
              "variadic": true
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "array"
            }
          },
          "variadic": true
        }
      ],
      "name": "VariadicMethod"
    },
    "jsii-calc.VirtualMethodPlayground": {
      "assembly": "jsii-calc",
      "fqn": "jsii-calc.VirtualMethodPlayground",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "overrideMeAsync",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "name": "overrideMeSync",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "primitive": "number"
          }
        },
        {
          "name": "parallelSumAsync",
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "name": "serialSumAsync",
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "primitive": "number",
            "promise": true
          }
        },
        {
          "name": "sumSync",
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "primitive": "number"
          }
        }
      ],
      "name": "VirtualMethodPlayground"
    },
    "jsii-calc.composition.CompositeOperation": {
      "abstract": true,
      "assembly": "jsii-calc",
      "base": {
        "fqn": "@scope/jsii-calc-lib.Operation"
      },
      "docs": {
        "comment": "Abstract operation composed from an expression of other operations."
      },
      "fqn": "jsii-calc.composition.CompositeOperation",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "String representation of the value."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@scope/jsii-calc-lib.Operation"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "CompositeOperation",
      "namespace": "composition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The expression that this operation consists of.\nMust be implemented by derived classes."
          },
          "immutable": true,
          "name": "expression",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "comment": "The value."
          },
          "immutable": true,
          "name": "value",
          "overrides": {
            "fqn": "@scope/jsii-calc-lib.Value"
          },
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "comment": "A set of postfixes to include in a decorated .toString()."
          },
          "name": "decorationPostfixes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "A set of prefixes to include in a decorated .toString()."
          },
          "name": "decorationPrefixes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The .toString() style."
          },
          "name": "stringStyle",
          "type": {
            "fqn": "jsii-calc.composition.CompositeOperation.CompositionStringStyle"
          }
        }
      ]
    },
    "jsii-calc.composition.CompositeOperation.CompositionStringStyle": {
      "assembly": "jsii-calc",
      "docs": {
        "comment": "Style of .toString() output for CompositeOperation."
      },
      "fqn": "jsii-calc.composition.CompositeOperation.CompositionStringStyle",
      "kind": "enum",
      "members": [
        {
          "docs": {
            "comment": "Normal string expression "
          },
          "name": "Normal"
        },
        {
          "docs": {
            "comment": "Decorated string expression "
          },
          "name": "Decorated"
        }
      ],
      "name": "CompositionStringStyle",
      "namespace": "composition.CompositeOperation"
    }
  },
  "version": "0.7.3",
  "fingerprint": "VuaCOBPGWrawiWS3LydGE0KcAJud9YlMwk4FfxE813U="
}
