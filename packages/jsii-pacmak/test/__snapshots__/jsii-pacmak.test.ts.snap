// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/ 1`] = `
<root>
 ┣━ 📁 dotnet
 ┃  ┗━ 📁 Amazon.JSII.Tests.CalculatorPackageId.BasePackageId
 ┃     ┣━ 📄 .jsii
 ┃     ┣━ 📁 Amazon
 ┃     ┃  ┗━ 📁 JSII
 ┃     ┃     ┗━ 📁 Tests
 ┃     ┃        ┗━ 📁 CalculatorNamespace
 ┃     ┃           ┗━ 📁 BaseNamespace
 ┃     ┃              ┣━ 📄 Base.cs
 ┃     ┃              ┣━ 📄 BaseProps.cs
 ┃     ┃              ┣━ 📄 BasePropsProxy.cs
 ┃     ┃              ┣━ 📄 BaseProxy.cs
 ┃     ┃              ┣━ 📄 IBaseInterface.cs
 ┃     ┃              ┣━ 📄 IBaseInterfaceProxy.cs
 ┃     ┃              ┣━ 📄 IBaseProps.cs
 ┃     ┃              ┗━ 📁 Internal
 ┃     ┃                 ┗━ 📁 DependencyResolution
 ┃     ┃                    ┗━ 📄 Anchor.cs
 ┃     ┣━ 📄 Amazon.JSII.Tests.CalculatorPackageId.BasePackageId.csproj
 ┃     ┣━ 📄 AssemblyInfo.cs
 ┃     ┗━ 📄 scope-jsii-calc-base-0.0.0.tgz
 ┣━ 📁 golang
 ┃  ┣━ 📁 _jsii
 ┃  ┃  ┗━ 📄 bundled-runtime.go
 ┃  ┗━ 📄 scopejsiicalcbase.go
 ┣━ 📁 java
 ┃  ┣━ 📄 pom.xml
 ┃  ┗━ 📁 src
 ┃     ┗━ 📁 main
 ┃        ┣━ 📁 java
 ┃        ┃  ┗━ 📁 software
 ┃        ┃     ┗━ 📁 amazon
 ┃        ┃        ┗━ 📁 jsii
 ┃        ┃           ┗━ 📁 tests
 ┃        ┃              ┗━ 📁 calculator
 ┃        ┃                 ┗━ 📁 base
 ┃        ┃                    ┣━ 📄 $Module.java
 ┃        ┃                    ┣━ 📄 Base.java
 ┃        ┃                    ┣━ 📄 BaseProps.java
 ┃        ┃                    ┗━ 📄 IBaseInterface.java
 ┃        ┗━ 📁 resources
 ┃           ┗━ 📁 software
 ┃              ┗━ 📁 amazon
 ┃                 ┗━ 📁 jsii
 ┃                    ┗━ 📁 tests
 ┃                       ┗━ 📁 calculator
 ┃                          ┗━ 📁 base
 ┃                             ┣━ 📄 $Module.txt
 ┃                             ┗━ 📄 jsii-calc-base@0.0.0.jsii.tgz
 ┣━ 📁 js
 ┃  ┗━ 📄 jsii-calc-base@0.0.0.jsii.tgz
 ┗━ 📁 python
    ┣━ 📄 MANIFEST.in
    ┣━ 📄 pyproject.toml
    ┣━ 📄 README.md
    ┣━ 📄 setup.py
    ┗━ 📁 src
       ┗━ 📁 scope
          ┗━ 📁 jsii_calc_base
             ┣━ 📄 __init__.py
             ┣━ 📁 _jsii
             ┃  ┣━ 📄 __init__.py
             ┃  ┗━ 📄 jsii-calc-base@0.0.0.jsii.tgz
             ┗━ 📄 py.typed
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/.jsii 1`] = `
{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@scope/jsii-calc-base-of-base": "^0.0.0"
  },
  "dependencyClosure": {
    "@scope/jsii-calc-base-of-base": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace",
          "packageId": "Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId"
        },
        "go": {},
        "java": {
          "maven": {
            "artifactId": "calculator-base-of-base",
            "groupId": "software.amazon.jsii.tests"
          },
          "package": "software.amazon.jsii.tests.calculator.baseofbase"
        },
        "js": {
          "npm": "@scope/jsii-calc-base-of-base"
        },
        "python": {
          "distName": "scope.jsii-calc-base-of-base",
          "module": "scope.jsii_calc_base_of_base"
        }
      }
    }
  },
  "description": "An example direct dependency for jsii-calc.",
  "homepage": "https://github.com/aws/jsii",
  "jsiiVersion": "0.0.0",
  "license": "Apache-2.0",
  "name": "@scope/jsii-calc-base",
  "repository": {
    "directory": "packages/@scope/jsii-calc-base",
    "type": "git",
    "url": "https://github.com/aws/jsii.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "namespace": "Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace",
      "packageId": "Amazon.JSII.Tests.CalculatorPackageId.BasePackageId"
    },
    "go": {},
    "java": {
      "maven": {
        "artifactId": "calculator-base",
        "groupId": "software.amazon.jsii.tests"
      },
      "package": "software.amazon.jsii.tests.calculator.base"
    },
    "js": {
      "npm": "@scope/jsii-calc-base"
    },
    "python": {
      "distName": "scope.jsii-calc-base",
      "module": "scope.jsii_calc_base"
    }
  },
  "types": {
    "@scope/jsii-calc-base.Base": {
      "abstract": true,
      "assembly": "@scope/jsii-calc-base",
      "docs": {
        "summary": "A base class."
      },
      "fqn": "@scope/jsii-calc-base.Base",
      "initializer": {},
      "kind": "class",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "returns": "the name of the class (to verify native type names are created for derived classes)."
          },
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 10
          },
          "name": "typeName",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "Base"
    },
    "@scope/jsii-calc-base.BaseProps": {
      "assembly": "@scope/jsii-calc-base",
      "datatype": true,
      "fqn": "@scope/jsii-calc-base.BaseProps",
      "interfaces": [
        "@scope/jsii-calc-base-of-base.VeryBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 15
      },
      "name": "BaseProps",
      "properties": [
        {
          "abstract": true,
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 16
          },
          "name": "bar",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@scope/jsii-calc-base.IBaseInterface": {
      "assembly": "@scope/jsii-calc-base",
      "fqn": "@scope/jsii-calc-base.IBaseInterface",
      "interfaces": [
        "@scope/jsii-calc-base-of-base.IVeryBaseInterface"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 19
      },
      "methods": [
        {
          "abstract": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 20
          },
          "name": "bar"
        }
      ],
      "name": "IBaseInterface"
    }
  },
  "version": "0.0.0",
  "fingerprint": "JCkFuFqry/njMLNi/IpfTVdkVye/esUFOCoZoFbDD+4="
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId.csproj 1`] = `
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- Package Identification -->
    <Description>An example direct dependency for jsii-calc.</Description>
    <PackageId>Amazon.JSII.Tests.CalculatorPackageId.BasePackageId</PackageId>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageVersion>0.0.0</PackageVersion>
    <!-- Additional Metadata -->
    <Authors>Amazon Web Services</Authors>
    <Company>Amazon Web Services</Company>
    <Language>en-US</Language>
    <ProjectUrl>https://github.com/aws/jsii</ProjectUrl>
    <RepositoryUrl>https://github.com/aws/jsii.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <!-- Build Configuration -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <Nullable>enable</Nullable>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <TargetFramework>netcoreapp3.1</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedResource Include="scope-jsii-calc-base-0.0.0.tgz" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Amazon.JSII.Runtime" Version="[0.0.0,0.0.1)" />
    <PackageReference Include="Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId" Version="[0.0.0,0.0.1)" />
  </ItemGroup>
  <PropertyGroup>
    <NoWarn>0612,0618</NoWarn>
  </PropertyGroup>
</Project>


`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseNamespace/Base.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace
{
    /// <summary>A base class.</summary>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.Base), fullyQualifiedName: "@scope/jsii-calc-base.Base")]
    public abstract class Base : DeputyBase
    {
        protected Base(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Base(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Base(DeputyProps props): base(props)
        {
        }

        /// <returns>the name of the class (to verify native type names are created for derived classes).</returns>
        [JsiiMethod(name: "typeName", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public virtual object TypeName()
        {
            return InvokeInstanceMethod<object>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseNamespace/BaseProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace
{
    #pragma warning disable CS8618

    [JsiiByValue(fqn: "@scope/jsii-calc-base.BaseProps")]
    public class BaseProps : Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.IBaseProps
    {
        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string Bar
        {
            get;
            set;
        }

        [JsiiProperty(name: "foo", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-base-of-base.Very\\"}", isOverride: true)]
        public Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Very Foo
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseNamespace/BasePropsProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace
{
    [JsiiTypeProxy(nativeType: typeof(IBaseProps), fullyQualifiedName: "@scope/jsii-calc-base.BaseProps")]
    internal sealed class BasePropsProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.IBaseProps
    {
        private BasePropsProxy(ByRefValue reference): base(reference)
        {
        }

        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Bar
        {
            get => GetInstanceProperty<string>();
        }

        [JsiiProperty(name: "foo", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-base-of-base.Very\\"}")]
        public Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Very Foo
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Very>();
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseNamespace/BaseProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace
{
    /// <summary>A base class.</summary>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.Base), fullyQualifiedName: "@scope/jsii-calc-base.Base")]
    internal sealed class BaseProxy : Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.Base
    {
        private BaseProxy(ByRefValue reference): base(reference)
        {
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseNamespace/IBaseInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace
{
    [JsiiInterface(nativeType: typeof(IBaseInterface), fullyQualifiedName: "@scope/jsii-calc-base.IBaseInterface")]
    public interface IBaseInterface : Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.IVeryBaseInterface
    {
        [JsiiMethod(name: "bar")]
        void Bar();
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseNamespace/IBaseInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace
{
    [JsiiTypeProxy(nativeType: typeof(IBaseInterface), fullyQualifiedName: "@scope/jsii-calc-base.IBaseInterface")]
    internal sealed class IBaseInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.IBaseInterface
    {
        private IBaseInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        [JsiiMethod(name: "bar")]
        public void Bar()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        [JsiiMethod(name: "foo")]
        public void Foo()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseNamespace/IBaseProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace
{
    [JsiiInterface(nativeType: typeof(IBaseProps), fullyQualifiedName: "@scope/jsii-calc-base.BaseProps")]
    public interface IBaseProps : Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.IVeryBaseProps
    {
        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Bar
        {
            get;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseNamespace/Internal/DependencyResolution/Anchor.cs 1`] = `
#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.Internal.DependencyResolution
{
    public sealed class Anchor
    {
        public Anchor()
        {
            new Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Internal.DependencyResolution.Anchor();
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/AssemblyInfo.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

[assembly: JsiiAssembly("@scope/jsii-calc-base", "0.0.0", "scope-jsii-calc-base-0.0.0.tgz")]

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/scope-jsii-calc-base-0.0.0.tgz 1`] = `dotnet/Amazon.JSII.Tests.CalculatorPackageId.BasePackageId/scope-jsii-calc-base-0.0.0.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/golang/_jsii/bundled-runtime.go 1`] = `
// Embedded data for the tarball containing the runtime of @scope/jsii-calc-base@0.0.0
const tarball = []byte {
    0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xed, 0x7d, 0x79, 0x77, 0xdb,
    0xb2, 0xef, 0xfc, 0xad, 0x4f, 0xd1, 0x97, 0x39, 0x6f, 0x46, 0xf2, 0xa3, 0x28, 0x00, 0xdc,
    0x9b, 0xb9, 0x57, 0x92, 0x25, 0x9b, 0x8a, 0x2d, 0xd9, 0x5a, 0x2c, 0x5b, 0x39, 0x33, 0x09,
    0x34, 0x29, 0x58, 0x20, 0xc0, 0x60, 0x91, 0x44, 0xe5, 0xf8, 0xbb, 0xbf, 0xaa, 0xea, 0x05,
    0x92, 0x92, 0xc8, 0x84, 0x4e, 0xde, 0xbd, 0x87, 0xc8, 0x22, 0x12, 0xec, 0xe5, 0xd7, 0xb5,
    0x55, 0x75, 0xa3, 0x31, 0x76, 0xbd, 0x1b, 0x77, 0xc8, 0x77, 0x6a, 0x5f, 0xd2, 0x20, 0xf8,
    0xb7, 0xb9, 0x2c, 0xcb, 0x6a, 0x35, 0x1a, 0x6c, 0xde, 0x7d, 0xcb, 0xb2, 0x2d, 0xab, 0xde,
    0x7f, 0xab, 0x37, 0x5b, 0x96, 0x6d, 0xb7, 0x5a, 0x16, 0x94, 0x83, 0x7b, 0x8e, 0xdd, 0x86,
    0xdf, 0x08, 0x4f, 0xe9, 0xca, 0xd3, 0xcc, 0x4d, 0x00, 0xca, 0x1f, 0x6d, 0x87, 0x06, 0x63,
    0xfd, 0xf7, 0x7f, 0xc8, 0xf5, 0xdb, 0x06, 0x63, 0x15, 0x37, 0xcf, 0xae, 0xe3, 0xa4, 0xf2,
    0xe1, 0x37, 0xf8, 0x1e, 0xb9, 0x23, 0x0e, 0xdf, 0x2a, 0xbb, 0x23, 0xf7, 0x21, 0x8e, 0xd8,
    0xef, 0xb3, 0x33, 0x9e, 0xdc, 0x06, 0x1e, 0x4f, 0x2b, 0x55, 0x51, 0x24, 0x4e, 0x86, 0x6e,
    0x3c, 0xb8, 0x59, 0x10, 0x47, 0x50, 0x34, 0x4b, 0x72, 0x2e, 0x7f, 0x49, 0xe2, 0x10, 0x8a,
    0x64, 0x3f, 0xd1, 0xd7, 0xa2, 0x75, 0xfa, 0xfa, 0x2f, 0x59, 0x28, 0x4f, 0x42, 0xec, 0xe0,
    0xcb, 0xc6, 0xe9, 0xcb, 0x9d, 0x1d, 0xf7, 0x2e, 0xad, 0xb9, 0xd4, 0x59, 0xcd, 0x8b, 0x47,
    0xf4, 0x2b, 0x16, 0xac, 0xf8, 0x7c, 0xcc, 0x23, 0x9f, 0x47, 0x5e, 0x40, 0x4d, 0x4a, 0x78,
    0x9d, 0x7a, 0xf1, 0x98, 0xef, 0xa0, 0xc4, 0x6e, 0x7b, 0x6e, 0xe8, 0x6d, 0xf7, 0xdd, 0x94,
    0xc7, 0x03, 0xfa, 0x8b, 0xcd, 0xfe, 0xdb, 0xaa, 0xc1, 0x3f, 0x73, 0x9a, 0x99, 0xec, 0x87,
    0x9a, 0x27, 0x7c, 0xf1, 0xb6, 0x7e, 0x53, 0xa3, 0x00, 0x29, 0x19, 0xf2, 0x2c, 0x35, 0x6e,
    0xc3, 0x71, 0x16, 0xf1, 0xac, 0x74, 0x4f, 0x92, 0x2f, 0x1d, 0xbb, 0x9e, 0x41, 0xc3, 0xda,
    0x59, 0xaf, 0x57, 0x3b, 0xe7, 0x69, 0x96, 0xd6, 0xf6, 0xa1, 0x9b, 0x3c, 0x74, 0xb3, 0x38,
    0x56, 0x05, 0x6b, 0x7b, 0xd0, 0xdb, 0xc9, 0x00, 0xff, 0xaf, 0xef, 0x49, 0x4a, 0xcb, 0x36,
    0x42, 0x4f, 0x7b, 0xfe, 0x73, 0x6d, 0xbe, 0x57, 0x05, 0x8d, 0x36, 0xf5, 0xbd, 0x8a, 0x6e,
    0x6b, 0xd1, 0x7a, 0x65, 0x18, 0xe3, 0x08, 0xcc, 0x3b, 0x5f, 0xdc, 0x5b, 0x77, 0x7a, 0x54,
    0xf7, 0x96, 0x47, 0x53, 0x37, 0x91, 0xbb, 0x49, 0x16, 0x0c, 0x5c, 0x2f, 0x13, 0xc8, 0x3c,
    0xa3, 0x4c, 0xc8, 0x6a, 0xb9, 0xd2, 0x30, 0x89, 0xf3, 0xb1, 0xa8, 0x91, 0xc6, 0x83, 0xec,
    0x4d, 0xb8, 0xe2, 0x3f, 0x72, 0xa2, 0x96, 0xe1, 0xa0, 0x2a, 0x46, 0x9d, 0xaf, 0xf3, 0x88,
    0x74, 0xf5, 0x5a, 0x81, 0xa5, 0x86, 0x18, 0xe2, 0x01, 0x21, 0x99, 0x4b, 0x81, 0x2f, 0xe9,
    0x0f, 0xc7, 0x23, 0x6c, 0xfe, 0x69, 0xf1, 0x98, 0xdb, 0xd6, 0x78, 0x02, 0xe2, 0x3e, 0x4d,
    0x8a, 0x1f, 0xa4, 0xd9, 0xb1, 0x54, 0x2b, 0x6a, 0xb3, 0xf6, 0x48, 0x9b, 0xa5, 0x81, 0x8e,
    0x3f, 0x0f, 0xa7, 0xea, 0xfc, 0x8c, 0x75, 0x7e, 0xc6, 0xb2, 0x3f, 0xc7, 0x83, 0x9f, 0xa7,
    0x6c, 0x98, 0x7f, 0xbf, 0x1a, 0x0a, 0x90, 0x7a, 0x49, 0x30, 0x96, 0xca, 0x5a, 0xd9, 0x8d,
    0xbf, 0x77, 0x47, 0xe3, 0x90, 0x33, 0x3f, 0x48, 0xb8, 0x97, 0xb1, 0x42, 0x43, 0xd8, 0x20,
    0x98, 0xc6, 0x56, 0x23, 0x3c, 0x95, 0xeb, 0x78, 0xc4, 0xc7, 0x92, 0xe2, 0x4a, 0x67, 0x87,
    0x76, 0x9d, 0xf7, 0x51, 0x5f, 0x51, 0x7d, 0x89, 0x44, 0xa2, 0x30, 0x7e, 0xfa, 0xc8, 0x93,
    0x76, 0x26, 0x74, 0x91, 0x7e, 0x09, 0xc1, 0x82, 0x44, 0x42, 0x45, 0x77, 0x81, 0x87, 0xd7,
    0xdb, 0x51, 0x3f, 0x29, 0x93, 0x33, 0x97, 0xe0, 0xa2, 0x48, 0xc2, 0xc7, 0x71, 0x1a, 0x00,
    0x27, 0x85, 0xfa, 0x0a, 0xf8, 0xe2, 0x96, 0x12, 0x8b, 0x74, 0xe7, 0xf1, 0x46, 0x50, 0x91,
    0x63, 0xea, 0x09, 0xf0, 0x57, 0xe6, 0x5b, 0xa3, 0x39, 0x23, 0xab, 0x61, 0x69, 0x4d, 0xce,
    0xa0, 0x8f, 0x50, 0x41, 0x68, 0xac, 0x3b, 0x56, 0xcd, 0xd6, 0x43, 0x9c, 0x36, 0x13, 0xb3,
    0xe2, 0xf7, 0x9a, 0x87, 0x59, 0xc3, 0xf0, 0x7b, 0x8d, 0xc2, 0x94, 0x39, 0x90, 0xc2, 0x5b,
    0x03, 0xd3, 0x26, 0x60, 0x8e, 0xfa, 0x3f, 0xad, 0xfa, 0x15, 0xd3, 0xc0, 0x2c, 0xa3, 0xee,
    0xa7, 0x87, 0xb7, 0x9c, 0x9a, 0x97, 0xc7, 0x54, 0x52, 0xec, 0x27, 0x95, 0xba, 0x5c, 0x6f,
    0x89, 0x9f, 0x55, 0xe0, 0x82, 0x2b, 0x4f, 0x2b, 0x6d, 0x65, 0x4a, 0x35, 0x51, 0x1c, 0x9f,
    0xdb, 0x88, 0x6b, 0x26, 0x18, 0xb7, 0x9f, 0x66, 0x09, 0x50, 0xbe, 0x34, 0xf3, 0xe2, 0xfd,
    0xe5, 0xa3, 0x7e, 0x38, 0x79, 0x5a, 0x93, 0xa4, 0x5c, 0x7a, 0x53, 0x93, 0x59, 0x9a, 0x8f,
    0xae, 0xd0, 0xa4, 0x5d, 0x86, 0x85, 0x99, 0x17, 0x42, 0x83, 0xb5, 0x59, 0xc6, 0x0c, 0x7e,
    0x1e, 0xed, 0x41, 0x60, 0xd5, 0x45, 0x83, 0x28, 0xc8, 0x02, 0x37, 0x0c, 0x1e, 0x78, 0x52,
    0x64, 0x2a, 0x37, 0x41, 0x24, 0xc4, 0x06, 0xfb, 0x28, 0xca, 0x87, 0xb1, 0x47, 0x3e, 0x45,
    0x7a, 0xa7, 0xc8, 0x68, 0x40, 0x1c, 0x04, 0x21, 0x57, 0x96, 0x22, 0x0c, 0xfa, 0x3b, 0xd0,
    0xbf, 0xaf, 0x65, 0xa9, 0x29, 0x6c, 0x61, 0x10, 0xe1, 0xef, 0xad, 0x19, 0xd4, 0x23, 0x0e,
    0xf5, 0x4d, 0xd7, 0x84, 0x4d, 0xd9, 0xe8, 0x69, 0x92, 0xd0, 0xdd, 0x84, 0x67, 0x79, 0x12,
    0x0f, 0x95, 0xec, 0x9a, 0x33, 0xec, 0x9e, 0xc5, 0x03, 0x86, 0x9f, 0x09, 0x3b, 0xdb, 0xcc,
    0x76, 0xcb, 0x93, 0x60, 0x30, 0x81, 0x1f, 0xb3, 0xe0, 0x96, 0x33, 0xe4, 0x29, 0x15, 0x4c,
    0xc8, 0x2c, 0xf3, 0x12, 0xee, 0x66, 0xdc, 0x27, 0xcb, 0xea, 0x43, 0xc1, 0x5b, 0xf8, 0x4c,
    0x79, 0xba, 0x55, 0x7b, 0x7c, 0x96, 0x7b, 0x92, 0x14, 0x8b, 0x92, 0xc3, 0x24, 0x89, 0x6d,
    0xda, 0x97, 0x6a, 0x05, 0x91, 0x93, 0x94, 0x97, 0x7e, 0x2d, 0x48, 0x30, 0x05, 0x40, 0xda,
    0xf2, 0x5d, 0x54, 0x9f, 0x24, 0x18, 0x05, 0x48, 0x0a, 0x6c, 0xd3, 0x8d, 0x26, 0x95, 0x52,
    0xaf, 0x1b, 0xf3, 0x3e, 0xab, 0x4f, 0xff, 0xd2, 0x0c, 0x53, 0xa0, 0xf6, 0x66, 0xd4, 0xf3,
    0xc9, 0x7b, 0x9f, 0xc4, 0xe3, 0x92, 0xce, 0x2f, 0xa3, 0x12, 0x6e, 0xe6, 0xca, 0x11, 0x95,
    0xea, 0x59, 0x71, 0x17, 0x9d, 0x1a, 0x32, 0x9f, 0xf1, 0x04, 0x0c, 0x23, 0x2f, 0xcb, 0xda,
    0xce, 0x44, 0x0d, 0xa6, 0xcc, 0x49, 0xd1, 0xd8, 0x0c, 0x31, 0x94, 0xbe, 0xe8, 0xc6, 0xbf,
    0xce, 0xd8, 0xcd, 0x19, 0xa5, 0x31, 0x79, 0x30, 0x35, 0xcc, 0x31, 0x7c, 0xe5, 0x30, 0x05,
    0x27, 0x54, 0xea, 0x11, 0x43, 0x25, 0xc8, 0x34, 0x1a, 0xe5, 0x99, 0xdb, 0x0f, 0xa7, 0xe9,
    0xfc, 0x98, 0x16, 0x1d, 0x57, 0x69, 0x6c, 0xad, 0x67, 0x85, 0xbf, 0xef, 0x26, 0x65, 0xb9,
    0x2b, 0xde, 0x65, 0xe1, 0x86, 0xe1, 0x05, 0xd1, 0xb0, 0xf2, 0xb4, 0x44, 0x2f, 0x20, 0xbb,
    0x24, 0x70, 0x4f, 0xf3, 0xf6, 0xf7, 0x09, 0xf0, 0x93, 0x82, 0x3a, 0xd5, 0xc3, 0x1f, 0x94,
    0x9e, 0x12, 0xd7, 0xa2, 0xc5, 0xbf, 0x46, 0x64, 0xbb, 0xcb, 0xdb, 0xf9, 0xa7, 0x84, 0x72,
    0x72, 0xe7, 0x3c, 0x6f, 0x74, 0x51, 0xee, 0x16, 0x30, 0x83, 0xbd, 0x39, 0xe4, 0x2e, 0xfc,
    0xdb, 0xb9, 0x1e, 0xf7, 0x00, 0x84, 0x93, 0x27, 0x20, 0xb1, 0x11, 0x8e, 0xb6, 0x72, 0xb4,
    0x73, 0x98, 0x1f, 0xfe, 0x9a, 0x4c, 0x76, 0xa2, 0x2f, 0xef, 0xde, 0x1e, 0x07, 0x3b, 0xbd,
    0xe0, 0xfc, 0xa3, 0x7f, 0xf3, 0x71, 0xc2, 0x77, 0x78, 0x7a, 0x71, 0x78, 0xb2, 0x1f, 0x5f,
    0x87, 0xfd, 0x57, 0xaf, 0xfe, 0x6f, 0xe3, 0x87, 0xca, 0xc6, 0xd7, 0x8d, 0xbf, 0x3a, 0x3b,
    0xbe, 0xbe, 0xf5, 0x25, 0x7d, 0xec, 0x9d, 0xb7, 0xbd, 0xfd, 0x83, 0xe3, 0xb3, 0x83, 0x6f,
    0xc7, 0x93, 0xf9, 0x3f, 0xa7, 0x65, 0xb7, 0x9d, 0xd9, 0xfc, 0x5f, 0xbb, 0xb9, 0xce, 0xff,
    0x19, 0xd7, 0x94, 0xe7, 0x36, 0xe7, 0x12, 0x91, 0x3a, 0x7b, 0x2b, 0x62, 0xf7, 0xa7, 0xca,
    0xa0, 0x9f, 0x41, 0x50, 0x5f, 0x65, 0x47, 0x6e, 0x94, 0x43, 0x34, 0x01, 0xf6, 0xcf, 0x6a,
    0x5a, 0x09, 0x23, 0x6e, 0x08, 0xb8, 0xef, 0xee, 0xee, 0x6a, 0x2e, 0x75, 0x53, 0x8b, 0x93,
    0x8e, 0x4c, 0x13, 0xa4, 0x3b, 0x1b, 0x58, 0xf1, 0xfc, 0xe0, 0xf4, 0xdd, 0x19, 0xdb, 0x3d,
    0xc5, 0xf6, 0x4f, 0x8e, 0x5f, 0xf5, 0xce, 0x7b, 0x27, 0xc7, 0x67, 0xec, 0xf0, 0xe4, 0x94,
    0x9c, 0x1d, 0x54, 0xd9, 0xe9, 0xc1, 0xfb, 0xd3, 0x93, 0x57, 0x17, 0xfb, 0x78, 0xbb, 0x4a,
    0x5e, 0xf5, 0xce, 0xce, 0x4f, 0x7b, 0x7b, 0x17, 0x78, 0x87, 0x1a, 0xb0, 0x6b, 0xec, 0x15,
    0x50, 0x20, 0x12, 0x47, 0x69, 0x6d, 0x43, 0xd9, 0x55, 0x39, 0xa2, 0x0a, 0x4b, 0xaf, 0xdd,
    0x64, 0x23, 0xee, 0x46, 0xe4, 0xd5, 0x83, 0x81, 0x1d, 0x81, 0xe3, 0x1e, 0x81, 0x93, 0x1e,
    0xbe, 0xa8, 0x45, 0xbe, 0x7b, 0x9e, 0xf2, 0x2a, 0x4b, 0x38, 0xf8, 0x3d, 0x7e, 0xee, 0xe1,
    0x65, 0xa2, 0xb1, 0x2c, 0xc6, 0x87, 0x49, 0xd0, 0xcf, 0xf1, 0x3e, 0x73, 0x53, 0x70, 0xf4,
    0x4b, 0x70, 0xf4, 0xfb, 0x13, 0x76, 0xc6, 0x3d, 0xd1, 0x88, 0x0d, 0xed, 0x43, 0x28, 0x3c,
    0x66, 0x5d, 0x11, 0x42, 0x04, 0x50, 0x2e, 0xf6, 0xf2, 0x11, 0x8f, 0xb2, 0x69, 0x5c, 0x71,
    0x03, 0x0c, 0xe6, 0xe3, 0x49, 0x12, 0x0c, 0xaf, 0x33, 0x16, 0xdf, 0x45, 0x3c, 0x61, 0x00,
    0x2a, 0x06, 0xd9, 0x84, 0x89, 0x14, 0x2b, 0x04, 0x59, 0xd8, 0x9f, 0x6c, 0x67, 0x5e, 0x8d,
    0xda, 0xcd, 0x18, 0x74, 0x3a, 0x4c, 0x5c, 0xa8, 0x18, 0x0d, 0xa9, 0x90, 0xa4, 0x83, 0x01,
    0x0f, 0xdd, 0x90, 0x1d, 0x50, 0xd3, 0x33, 0x20, 0xf2, 0x08, 0x07, 0x28, 0x03, 0x20, 0x98,
    0xb1, 0x15, 0x85, 0x02, 0xc8, 0x00, 0x65, 0x65, 0x33, 0x31, 0x14, 0x90, 0x00, 0xc1, 0x45,
    0x5d, 0x03, 0x41, 0xb3, 0x24, 0x0e, 0xab, 0x22, 0x2c, 0x12, 0x5f, 0x42, 0x02, 0x5d, 0xc5,
    0xe0, 0xdd, 0x1c, 0xa6, 0xd3, 0x04, 0x7e, 0x1b, 0x8d, 0xe2, 0x48, 0xb6, 0x24, 0x0b, 0xb2,
    0x20, 0xbb, 0x16, 0xed, 0x88, 0x0e, 0x6b, 0xec, 0x30, 0x4e, 0x08, 0xc7, 0x38, 0x4f, 0xc6,
    0x48, 0x4c, 0x41, 0x55, 0xcd, 0x70, 0x3d, 0x8d, 0xca, 0x56, 0x2a, 0x34, 0x14, 0x88, 0xda,
    0x2d, 0x51, 0x35, 0xbe, 0xe3, 0x49, 0x55, 0xe5, 0xc1, 0xa0, 0x3d, 0x98, 0xcf, 0xe9, 0x73,
    0x41, 0x5c, 0xe7, 0xb9, 0xc0, 0x74, 0x2c, 0x27, 0x5b, 0x11, 0x3f, 0x11, 0x05, 0x12, 0x36,
    0x23, 0x30, 0x9d, 0xc8, 0x3c, 0xec, 0x37, 0xcd, 0xbd, 0x6b, 0x09, 0xac, 0xca, 0xee, 0xae,
    0x0d, 0x1f, 0xb8, 0x4f, 0xfd, 0xba, 0xd4, 0xb6, 0x49, 0x99, 0xbb, 0x00, 0xa5, 0x09, 0x5a,
    0x0c, 0x00, 0x09, 0xb1, 0x27, 0xbd, 0x0e, 0xc6, 0xd8, 0xd2, 0x20, 0x18, 0x00, 0x35, 0xc1,
    0xf6, 0xb0, 0xe9, 0xcd, 0xa6, 0xf5, 0x7f, 0xb6, 0xa8, 0xbb, 0x38, 0x51, 0x91, 0xa7, 0x6a,
    0xcf, 0xc0, 0x7a, 0x01, 0x5e, 0xe0, 0x01, 0xb0, 0x29, 0xe1, 0xa9, 0x6a, 0x11, 0x9a, 0xec,
    0x08, 0x88, 0xe0, 0x41, 0xf0, 0x5d, 0x6e, 0xdd, 0xc0, 0x59, 0xb0, 0xfc, 0x73, 0x9c, 0x57,
    0x26, 0xd4, 0xc5, 0x4f, 0x49, 0x65, 0xcb, 0xe4, 0x3a, 0xfc, 0x8b, 0x34, 0xb9, 0x0d, 0xfc,
    0xdb, 0x4a, 0x98, 0x29, 0x1f, 0xb2, 0x01, 0x7e, 0x0f, 0x68, 0x83, 0x14, 0x81, 0x00, 0xee,
    0x90, 0xa6, 0x24, 0xf0, 0x24, 0x67, 0x42, 0x09, 0x88, 0x2d, 0x33, 0xa2, 0x76, 0x06, 0xbd,
    0x2f, 0x83, 0xea, 0x35, 0x9a, 0x96, 0xb4, 0x71, 0xc2, 0x07, 0x3c, 0x49, 0x44, 0xe0, 0x3c,
    0x0d, 0x1c, 0xb9, 0x37, 0xd8, 0xc5, 0x28, 0xf6, 0x03, 0x18, 0x1a, 0x39, 0x6a, 0xa9, 0x62,
    0x10, 0x79, 0x61, 0x4e, 0xa4, 0x00, 0x25, 0x64, 0x51, 0x9c, 0xb1, 0x10, 0xfd, 0x74, 0xa8,
    0x7c, 0x54, 0xf9, 0x23, 0xf8, 0x80, 0x1d, 0x02, 0x53, 0x7c, 0xa0, 0xbe, 0xd2, 0x3d, 0x6a,
    0x36, 0x23, 0x0a, 0x54, 0x95, 0xfe, 0x0f, 0x82, 0x61, 0x9e, 0xd0, 0xef, 0x0c, 0x1d, 0x3f,
    0x7c, 0x9c, 0xf4, 0xbf, 0x80, 0x28, 0xcc, 0x42, 0x87, 0x70, 0x57, 0xdc, 0x03, 0x76, 0xe4,
    0xe9, 0xc7, 0x20, 0x89, 0x47, 0xf0, 0xa3, 0x77, 0xed, 0x46, 0x80, 0x5a, 0x29, 0x08, 0x48,
    0x94, 0x62, 0x49, 0x57, 0x09, 0x14, 0xdd, 0x09, 0xe5, 0xd7, 0x01, 0x73, 0x99, 0x20, 0x0f,
    0x57, 0x2d, 0x0f, 0x50, 0xb6, 0x31, 0x35, 0x4c, 0x50, 0x9b, 0x71, 0x80, 0x0a, 0x15, 0x13,
    0x39, 0xcc, 0x21, 0x48, 0x42, 0x42, 0x19, 0x88, 0xd2, 0x80, 0x4d, 0xeb, 0x05, 0x23, 0x95,
    0x64, 0x8a, 0xed, 0x08, 0xdd, 0x1d, 0x71, 0x3f, 0x70, 0x29, 0x99, 0x61, 0x0c, 0xfb, 0x32,
    0x6e, 0x66, 0x8c, 0xc2, 0x1d, 0xdc, 0x24, 0xc4, 0x64, 0x87, 0x50, 0xd2, 0x0a, 0x15, 0x08,
    0x35, 0x0c, 0xad, 0x00, 0x82, 0x74, 0x72, 0x58, 0x23, 0xd7, 0x07, 0x43, 0x72, 0xeb, 0x06,
    0xc6, 0x82, 0x52, 0xff, 0x0d, 0xbb, 0x54, 0x45, 0x6b, 0x8a, 0x02, 0xe8, 0xb9, 0x52, 0x94,
    0x6d, 0x17, 0x94, 0x75, 0x03, 0x32, 0x40, 0x61, 0x6d, 0xde, 0x04, 0xa5, 0xa0, 0x70, 0x40,
    0x75, 0xb3, 0x0c, 0xe7, 0x16, 0xa2, 0x90, 0x42, 0x2b, 0x9b, 0xd8, 0x74, 0x8b, 0x54, 0x38,
    0x04, 0xd3, 0x0e, 0x62, 0x2e, 0x2a, 0x62, 0xc9, 0xdd, 0x31, 0xa6, 0xc5, 0x83, 0x7b, 0x50,
    0x30, 0xbe, 0xdb, 0x2a, 0xa8, 0xf0, 0x0a, 0xd3, 0x38, 0x22, 0xd9, 0x83, 0x04, 0x49, 0x2b,
    0x12, 0x80, 0x7d, 0xcc, 0xa7, 0x81, 0x1c, 0xbd, 0x6c, 0x49, 0xd0, 0x40, 0x01, 0xc7, 0xd0,
    0x98, 0x17, 0x91, 0x2a, 0xaa, 0x54, 0x11, 0x4a, 0x8f, 0xb0, 0x55, 0xd8, 0x15, 0xb1, 0x0b,
    0xe1, 0xee, 0x3a, 0xf0, 0xae, 0x0d, 0x63, 0x00, 0xcc, 0xca, 0x60, 0x0e, 0x00, 0xcd, 0x4c,
    0x6d, 0x40, 0xac, 0x44, 0x29, 0x06, 0xd2, 0x48, 0x3d, 0x61, 0x1c, 0x28, 0x1c, 0x27, 0xea,
    0x34, 0x21, 0xd9, 0x6c, 0x6a, 0x93, 0x6c, 0x0c, 0x67, 0x39, 0x9e, 0x82, 0xa4, 0x10, 0xf5,
    0xe8, 0x2c, 0x0e, 0x49, 0x29, 0xa0, 0x5a, 0x30, 0x0c, 0x22, 0xe8, 0x65, 0x96, 0xe7, 0xb3,
    0x58, 0xd9, 0xa9, 0x41, 0x49, 0xfd, 0xab, 0x6c, 0x9a, 0x7c, 0x92, 0x7a, 0x28, 0xcd, 0x92,
    0xd4, 0xbc, 0x9c, 0x35, 0x12, 0x3e, 0x72, 0x03, 0xad, 0x9f, 0x7c, 0xec, 0x26, 0x24, 0x29,
    0x17, 0x1a, 0xc6, 0x88, 0x27, 0x3c, 0x9c, 0x80, 0x1e, 0x44, 0x37, 0x44, 0xb8, 0x3e, 0x48,
    0xca, 0x09, 0x06, 0x4e, 0x5b, 0x8a, 0xe9, 0x45, 0x98, 0x0b, 0x70, 0xaa, 0xc6, 0x1c, 0xa9,
    0x3a, 0x03, 0x0a, 0xa9, 0xc3, 0xe3, 0x41, 0xc1, 0xf5, 0x7d, 0x34, 0xe5, 0x72, 0x8e, 0x9f,
    0xf1, 0x69, 0x1d, 0xd0, 0x2a, 0x6b, 0xf4, 0xa7, 0x09, 0x28, 0x15, 0x4e, 0xcd, 0xa5, 0x1a,
    0x36, 0x56, 0xe2, 0x09, 0xc9, 0xb0, 0x2f, 0x3d, 0x11, 0xd5, 0x52, 0x2c, 0x68, 0x43, 0xb5,
    0xf7, 0xc7, 0xc0, 0x57, 0x0d, 0xa5, 0xc8, 0xd0, 0xea, 0xc7, 0xd0, 0x75, 0xa8, 0xcc, 0x76,
    0xf7, 0xc1, 0x76, 0x48, 0xe3, 0xa1, 0xfc, 0x0e, 0x92, 0x2e, 0x42, 0x4e, 0xf0, 0xa4, 0x2a,
    0x47, 0x64, 0xc7, 0x67, 0xdc, 0x0a, 0xc5, 0x65, 0x9a, 0xee, 0x9e, 0x9c, 0x2d, 0x4c, 0x47,
    0xad, 0x32, 0x75, 0x8f, 0xf2, 0xde, 0xe7, 0x40, 0xcc, 0x01, 0x90, 0xe2, 0x71, 0xe7, 0x65,
    0xd9, 0x1e, 0xd3, 0xd8, 0x72, 0x4c, 0x2a, 0xa6, 0x16, 0xf3, 0xbd, 0x36, 0xcb, 0x50, 0x89,
    0xa0, 0x80, 0x49, 0x0c, 0xc6, 0xb8, 0x8a, 0x5c, 0xe8, 0xbb, 0x21, 0xc9, 0xd1, 0x5d, 0x82,
    0x22, 0x72, 0x3e, 0xf2, 0x48, 0x52, 0x9f, 0xa1, 0x16, 0x98, 0x44, 0xe7, 0x05, 0xa1, 0x90,
    0x59, 0x5a, 0x28, 0x0b, 0xd1, 0x3f, 0xad, 0x3e, 0x39, 0x15, 0x69, 0xdb, 0x65, 0xf6, 0x01,
    0x16, 0x98, 0xc0, 0x22, 0x06, 0x21, 0x56, 0x0e, 0xc1, 0xa5, 0x84, 0xd6, 0x8c, 0x29, 0x4b,
    0x42, 0xe9, 0x24, 0xcd, 0xf8, 0x28, 0x35, 0x4d, 0x38, 0xcc, 0xb9, 0x39, 0xc7, 0x29, 0xc4,
    0x39, 0x52, 0x96, 0x10, 0xec, 0xc7, 0x99, 0x4f, 0x78, 0x2b, 0xda, 0xd7, 0x32, 0x89, 0x5e,
    0xcc, 0x48, 0x49, 0x0a, 0x0c, 0x6a, 0x23, 0xdd, 0xc0, 0xc7, 0xf5, 0xf2, 0x94, 0x66, 0x79,
    0x71, 0x44, 0xf6, 0x52, 0xba, 0x91, 0x97, 0x64, 0xf1, 0x8a, 0xa9, 0x89, 0xdf, 0x2b, 0x22,
    0xc7, 0xaa, 0xe4, 0x11, 0x86, 0x92, 0x8e, 0x03, 0x2f, 0x8f, 0xf3, 0x14, 0x94, 0x77, 0xe4,
    0x37, 0x68, 0xfa, 0x92, 0xc2, 0x3b, 0x52, 0x2e, 0x17, 0x4f, 0x83, 0x61, 0x44, 0xb6, 0x1f,
    0x11, 0x79, 0x44, 0x84, 0x9d, 0x2b, 0x89, 0x68, 0xac, 0x2a, 0xc7, 0x40, 0x6f, 0x97, 0x99,
    0x5a, 0xab, 0xcc, 0xaa, 0xf0, 0x94, 0x7f, 0xad, 0x87, 0xad, 0x34, 0xf0, 0x59, 0x97, 0xc7,
    0x20, 0xda, 0xc7, 0xd1, 0x54, 0xa7, 0xec, 0x1a, 0xc0, 0xf4, 0x39, 0xc8, 0x13, 0xb8, 0x8c,
    0x2c, 0x39, 0x80, 0x36, 0xfb, 0x29, 0x94, 0x30, 0xe5, 0xbf, 0xe6, 0x20, 0x3f, 0x21, 0x76,
    0xc5, 0x40, 0x6f, 0x31, 0x5d, 0xa3, 0xc3, 0x6b, 0xa8, 0x9f, 0x30, 0x44, 0x4e, 0x8d, 0xbd,
    0xb7, 0x0a, 0xbb, 0xdd, 0xd7, 0xc3, 0x57, 0x9e, 0x15, 0x3b, 0xcb, 0xc5, 0xe4, 0x2a, 0x65,
    0x6e, 0x30, 0x63, 0xa8, 0x99, 0x69, 0x95, 0x39, 0xcc, 0x92, 0xcc, 0x20, 0x10, 0x43, 0x13,
    0x98, 0xc9, 0x8b, 0x23, 0xbf, 0x00, 0x9c, 0x43, 0x18, 0x25, 0x78, 0x78, 0x63, 0x9e, 0x01,
    0x94, 0xf8, 0x81, 0xe9, 0x0b, 0xfd, 0xbb, 0x00, 0x7d, 0x8d, 0x28, 0x8e, 0xb6, 0x89, 0xf3,
    0x8c, 0x18, 0xbf, 0x6e, 0x83, 0xd7, 0x93, 0x0c, 0x31, 0x70, 0x8a, 0x27, 0x6e, 0x98, 0x4d,
    0x07, 0x09, 0x87, 0x6f, 0x01, 0x38, 0x76, 0xb7, 0xb1, 0x87, 0x86, 0x7c, 0x66, 0x36, 0x97,
    0x1f, 0x76, 0xa8, 0xa2, 0x2d, 0xa8, 0x01, 0x3a, 0x36, 0x46, 0x39, 0x9e, 0xb1, 0x74, 0x85,
    0x1f, 0xe7, 0x7d, 0xa8, 0x0b, 0x54, 0x04, 0x41, 0x1d, 0x87, 0x2e, 0x08, 0xba, 0xbe, 0x03,
    0xc5, 0x54, 0x9b, 0xd2, 0x1d, 0xe9, 0x58, 0x98, 0x71, 0x9b, 0xe9, 0xe6, 0x6b, 0x5b, 0x4c,
    0xf2, 0x4c, 0x8f, 0x73, 0xa6, 0x73, 0xb2, 0x2d, 0x82, 0x41, 0x75, 0x83, 0x41, 0xef, 0x5d,
    0xba, 0xff, 0x0b, 0xb8, 0xb3, 0x09, 0xd5, 0xf8, 0x38, 0x43, 0x05, 0x83, 0x90, 0x23, 0x53,
    0x12, 0x00, 0x4c, 0x45, 0x40, 0xb4, 0xc5, 0xc6, 0x62, 0xac, 0x06, 0xf7, 0xc0, 0x5d, 0x87,
    0xae, 0xdd, 0x5b, 0x4e, 0x5e, 0x9e, 0x02, 0x44, 0x71, 0x74, 0x3c, 0x18, 0xa0, 0x9f, 0x07,
    0x00, 0x0f, 0xc1, 0xfc, 0x8a, 0xff, 0x83, 0x45, 0x89, 0x93, 0x4c, 0x30, 0x46, 0xdb, 0x01,
    0x28, 0x4b, 0xaf, 0x90, 0xcc, 0x8c, 0x1a, 0x19, 0x92, 0x40, 0xf0, 0x48, 0xf5, 0xea, 0x8e,
    0x21, 0x86, 0x9b, 0x71, 0x04, 0x4c, 0x27, 0x2a, 0xa3, 0xed, 0x92, 0xd0, 0xbc, 0xd0, 0x0d,
    0xde, 0xa2, 0xac, 0x31, 0x38, 0xa0, 0x22, 0x35, 0x62, 0x52, 0x57, 0xdb, 0xcd, 0x08, 0xb4,
    0x4d, 0xdd, 0x24, 0x20, 0xed, 0x1c, 0x60, 0xba, 0x5f, 0x45, 0x34, 0x3c, 0x50, 0x73, 0x9f,
    0xf8, 0x9b, 0xe9, 0x16, 0x84, 0xc1, 0x71, 0xc4, 0xe5, 0x8c, 0x08, 0xe6, 0x0f, 0x3c, 0x12,
    0xd5, 0x53, 0xb5, 0xe9, 0x0a, 0x6a, 0x40, 0x22, 0xc2, 0x95, 0xb3, 0x2d, 0xc0, 0x17, 0x4e,
    0x19, 0x9c, 0xec, 0xe2, 0x0e, 0x59, 0xa1, 0xe6, 0xba, 0x1a, 0xeb, 0x0d, 0x90, 0xff, 0x3a,
    0x4a, 0xc1, 0x52, 0xa1, 0x4c, 0x6b, 0xa6, 0x64, 0xc1, 0x50, 0x40, 0x70, 0x87, 0x2e, 0xfe,
    0x46, 0x4e, 0x06, 0xee, 0x9b, 0xc5, 0x84, 0xa5, 0x7d, 0xeb, 0x24, 0x4e, 0xd3, 0x6d, 0x22,
    0x0e, 0xc3, 0x8b, 0x73, 0xf4, 0x9f, 0xc4, 0x77, 0xe0, 0xbc, 0xcb, 0x42, 0xf7, 0x2e, 0xcd,
    0x0c, 0x87, 0x1a, 0xf2, 0xa1, 0x98, 0x04, 0x80, 0x62, 0x0a, 0x7c, 0xe1, 0x13, 0x4c, 0x59,
    0xa7, 0x0c, 0x1c, 0xcd, 0x09, 0x02, 0x78, 0x2a, 0x43, 0xed, 0xa2, 0x1d, 0xaf, 0x60, 0xce,
    0x0d, 0x4b, 0xf1, 0x63, 0x44, 0x9e, 0x2a, 0x34, 0x23, 0x5c, 0xb1, 0xb2, 0x24, 0x2a, 0x97,
    0x05, 0xa3, 0x52, 0x53, 0x54, 0xa0, 0x51, 0xe8, 0x98, 0x9c, 0xf2, 0x94, 0x57, 0x25, 0x66,
    0x54, 0x51, 0xe4, 0x9e, 0x92, 0x15, 0x37, 0x55, 0x0e, 0x9b, 0x0f, 0x37, 0x95, 0xf0, 0x69,
    0x42, 0x6b, 0x18, 0x27, 0xfa, 0xc2, 0x14, 0x34, 0x6a, 0xec, 0x94, 0x9b, 0x99, 0xa1, 0x1a,
    0x3d, 0x72, 0x27, 0x85, 0x65, 0x9b, 0xb6, 0x42, 0x60, 0x07, 0x03, 0xe5, 0xdb, 0x94, 0xec,
    0x13, 0x5e, 0x1e, 0xb1, 0x04, 0xdd, 0x46, 0xe8, 0x2c, 0x07, 0x23, 0x47, 0x72, 0x84, 0x1e,
    0xfc, 0x8d, 0xf5, 0x8c, 0x5c, 0x0e, 0x9b, 0xc5, 0x14, 0xfe, 0x88, 0x25, 0xab, 0x16, 0xa1,
    0x11, 0xa4, 0x10, 0xad, 0x11, 0xe7, 0x82, 0xcb, 0x83, 0x38, 0x84, 0x98, 0x48, 0xcc, 0xef,
    0x76, 0xbd, 0x54, 0xf3, 0xec, 0xa6, 0xbb, 0x25, 0x46, 0x9a, 0x83, 0xa4, 0x0d, 0x11, 0x2f,
    0x13, 0xf1, 0x06, 0xb0, 0x35, 0x80, 0x21, 0xa2, 0xd1, 0x32, 0x5d, 0x5f, 0x1d, 0x1d, 0xe2,
    0x33, 0x50, 0x97, 0xe6, 0x87, 0xe9, 0x48, 0xe2, 0x7b, 0x9a, 0x46, 0x55, 0x9f, 0x7d, 0xa3,
    0x91, 0xb8, 0x29, 0x5c, 0x69, 0x8c, 0xa3, 0x30, 0x7e, 0x17, 0x49, 0x9d, 0x04, 0x45, 0x08,
    0x87, 0x20, 0x42, 0x39, 0x11, 0xd1, 0x63, 0x6a, 0x74, 0x8f, 0x26, 0x4e, 0x8b, 0x34, 0xb6,
    0xa1, 0xfb, 0x90, 0x88, 0xc1, 0x45, 0x3b, 0xe5, 0x9e, 0x3d, 0xa3, 0xe7, 0x84, 0x67, 0xa0,
    0x55, 0xe5, 0x37, 0x1b, 0x21, 0x3c, 0x45, 0x07, 0x80, 0x68, 0x7a, 0x70, 0x46, 0xc7, 0xba,
    0x42, 0x20, 0xaa, 0xa8, 0x61, 0xc5, 0xec, 0x58, 0x95, 0xd2, 0x5d, 0x45, 0xb3, 0xe8, 0x73,
    0x9b, 0xaa, 0x86, 0x33, 0x41, 0x22, 0x9a, 0x15, 0xea, 0x26, 0xc7, 0x26, 0x52, 0x10, 0x73,
    0x4c, 0x9b, 0x54, 0xbc, 0x0a, 0xcf, 0x4d, 0x58, 0x4f, 0xd5, 0x06, 0x81, 0xf3, 0x63, 0x72,
    0x71, 0xe5, 0xd7, 0xc5, 0x21, 0xc6, 0x52, 0xe3, 0x92, 0xac, 0x98, 0xb8, 0xc4, 0x48, 0x66,
    0xea, 0x32, 0xd1, 0xfc, 0x2d, 0x34, 0x5a, 0x9a, 0xff, 0x32, 0xf0, 0x43, 0x56, 0x57, 0x8e,
    0xce, 0x7b, 0xfb, 0x07, 0x15, 0x50, 0xbe, 0xfb, 0x8c, 0xe8, 0x8d, 0x6a, 0x27, 0xfb, 0x40,
    0xdb, 0xe8, 0xc7, 0xd4, 0x2e, 0xc3, 0x04, 0xcc, 0xd1, 0x94, 0x19, 0xca, 0x12, 0xbf, 0x8c,
    0x54, 0xe8, 0xe9, 0x02, 0x0f, 0x5d, 0x9f, 0x62, 0xcc, 0x42, 0xe8, 0xf8, 0x5c, 0xb2, 0xa2,
    0x72, 0x31, 0xcf, 0x6b, 0x34, 0x23, 0x8d, 0x1a, 0x59, 0x06, 0x31, 0x10, 0x1a, 0x42, 0x75,
    0xba, 0x1a, 0xcd, 0xcc, 0xa7, 0xf0, 0x5c, 0xba, 0x92, 0xb0, 0x41, 0x1b, 0x21, 0x77, 0x53,
    0xa7, 0xcc, 0x2c, 0xbd, 0xac, 0x52, 0x68, 0x2b, 0x38, 0x46, 0xd0, 0xe9, 0x4b, 0x05, 0xd3,
    0x18, 0x0b, 0x5a, 0x17, 0x14, 0x2a, 0x49, 0x55, 0xfa, 0x24, 0x86, 0xef, 0x4d, 0x63, 0x5e,
    0x32, 0x53, 0xaf, 0xcb, 0x09, 0x28, 0x16, 0x0c, 0x0a, 0x3b, 0x83, 0x53, 0xe6, 0xb0, 0x98,
    0x67, 0xdb, 0x8f, 0x93, 0xea, 0x2c, 0x95, 0x5d, 0xe5, 0xeb, 0x19, 0x59, 0x2e, 0x19, 0x1b,
    0xa1, 0xd2, 0x60, 0x4a, 0x53, 0xc8, 0x81, 0x80, 0x08, 0x50, 0x30, 0x0b, 0x1a, 0x4c, 0xfc,
    0x1c, 0xe4, 0x44, 0xf3, 0x26, 0xc2, 0xfc, 0x1c, 0x04, 0xcc, 0xe8, 0x58, 0x70, 0x17, 0x82,
    0xf3, 0x6b, 0x11, 0x85, 0xa1, 0xfd, 0x9a, 0x25, 0xb3, 0xc1, 0x6f, 0x72, 0x1e, 0x44, 0x28,
    0x93, 0x7c, 0x10, 0x43, 0x14, 0xc1, 0x2b, 0x7a, 0x28, 0x65, 0x38, 0x52, 0xb7, 0xc8, 0x62,
    0x4a, 0xb9, 0x79, 0x3d, 0x6d, 0xb8, 0xbe, 0x8f, 0x9f, 0x13, 0x8c, 0x77, 0x4c, 0x89, 0x34,
    0x51, 0xd0, 0x25, 0x85, 0x16, 0xd1, 0x84, 0xaa, 0xa0, 0x7e, 0x0a, 0x8c, 0x30, 0xc7, 0x44,
    0x14, 0xa6, 0x37, 0x7c, 0x9f, 0x47, 0x7e, 0x3e, 0x52, 0x6e, 0x6b, 0x49, 0x62, 0x94, 0x61,
    0xf1, 0x9f, 0x62, 0xe7, 0xb4, 0x4d, 0x23, 0x02, 0xab, 0x24, 0x06, 0x90, 0x61, 0xae, 0x32,
    0xb6, 0x0a, 0x62, 0x26, 0xe1, 0x07, 0x24, 0xf9, 0xb4, 0xfc, 0x09, 0xc2, 0x3c, 0xb6, 0x6e,
    0x97, 0x44, 0x45, 0x54, 0x41, 0x6e, 0x2b, 0x25, 0xeb, 0x85, 0x03, 0x30, 0x95, 0xf8, 0x32,
    0x81, 0x8d, 0xc8, 0x71, 0x98, 0x90, 0x31, 0x25, 0x17, 0xa0, 0xd7, 0x5a, 0xf2, 0x72, 0xe7,
    0xf0, 0x45, 0x6a, 0x6f, 0xce, 0x92, 0x91, 0x68, 0xc6, 0x58, 0x2b, 0x8a, 0x07, 0x73, 0xd0,
    0x0b, 0xb5, 0x19, 0x50, 0xb0, 0x38, 0x79, 0x24, 0x14, 0x31, 0xb3, 0x73, 0x5a, 0x95, 0xa8,
    0xec, 0xda, 0xc8, 0xe6, 0x15, 0x00, 0x66, 0x56, 0xab, 0x4a, 0xb3, 0xb0, 0xf6, 0xba, 0x31,
    0x4c, 0xae, 0x34, 0xca, 0x51, 0x29, 0x2d, 0xa3, 0x23, 0x95, 0xa9, 0x48, 0xa0, 0xc4, 0x90,
    0x05, 0x3b, 0x72, 0x25, 0x40, 0xc4, 0xaa, 0x85, 0x17, 0x98, 0xd6, 0xd8, 0x45, 0x04, 0xb3,
    0x4a, 0x4c, 0xe3, 0xf7, 0xd0, 0x91, 0x17, 0x60, 0xf8, 0x4b, 0x2d, 0x1a, 0x0b, 0x24, 0x3a,
    0x31, 0x99, 0xf6, 0x22, 0x8d, 0x64, 0x96, 0x91, 0xc6, 0x7a, 0x34, 0x75, 0x55, 0x78, 0xfa,
    0xe3, 0x74, 0x22, 0x47, 0xb8, 0x7a, 0x7d, 0x33, 0xfb, 0xbc, 0x4c, 0x68, 0x26, 0xdd, 0x2c,
    0x69, 0x08, 0x8c, 0x68, 0x42, 0xb8, 0xae, 0xbe, 0x5a, 0x7d, 0x14, 0xf5, 0x8f, 0xe3, 0x0c,
    0xe9, 0xd5, 0x1b, 0x9a, 0x5f, 0xfa, 0xb1, 0x08, 0xca, 0x50, 0x6d, 0x87, 0x14, 0xde, 0xe1,
    0x42, 0xd0, 0xd2, 0x1c, 0xa6, 0x83, 0x94, 0xfb, 0x5c, 0x2c, 0x04, 0xa1, 0x1a, 0x18, 0x2c,
    0x1d, 0x09, 0xef, 0x42, 0x24, 0x48, 0x81, 0x8a, 0x3a, 0x24, 0x1a, 0x42, 0x4c, 0x47, 0x82,
    0x91, 0x1a, 0x42, 0x11, 0x19, 0xbf, 0xe7, 0x9e, 0x61, 0xe2, 0xc9, 0xf0, 0x6a, 0x82, 0x24,
    0xe8, 0x26, 0x62, 0x5d, 0x69, 0x3a, 0xf6, 0x90, 0x6b, 0x01, 0x2d, 0x30, 0x85, 0xca, 0x01,
    0xd1, 0x2c, 0x1a, 0x7e, 0xb4, 0x1f, 0x93, 0xe5, 0xcc, 0x84, 0xcb, 0x6d, 0xac, 0x08, 0x21,
    0xe5, 0x82, 0x9a, 0x70, 0x5f, 0xd4, 0x32, 0x06, 0xee, 0x95, 0x34, 0x3c, 0x1a, 0xcc, 0x7a,
    0x07, 0x4e, 0x98, 0xfc, 0x0a, 0x98, 0xa4, 0x0c, 0xcb, 0x8d, 0x95, 0x52, 0x68, 0x15, 0x62,
    0x29, 0x45, 0x98, 0x9a, 0xf0, 0x5f, 0xf3, 0x40, 0xae, 0x1e, 0xe1, 0x84, 0x9e, 0x02, 0x4f,
    0x4a, 0x27, 0x96, 0xc2, 0xc4, 0x1f, 0xe3, 0x66, 0x57, 0x42, 0x03, 0x54, 0x16, 0x1b, 0xe4,
    0x92, 0x15, 0x3a, 0xe8, 0xc0, 0x4c, 0xed, 0x4c, 0x7e, 0x56, 0x69, 0x93, 0xe2, 0x9b, 0x9c,
    0xe6, 0x4c, 0x01, 0x82, 0x52, 0xed, 0x1a, 0x7b, 0x15, 0xa4, 0x14, 0x3a, 0xe1, 0xa2, 0xed,
    0x5d, 0x82, 0xff, 0x09, 0x74, 0x99, 0x68, 0x25, 0xd0, 0x50, 0xfb, 0x13, 0x11, 0xc0, 0x52,
    0x8d, 0x21, 0x56, 0x61, 0x06, 0x88, 0x8b, 0x14, 0xbc, 0x14, 0x59, 0xb0, 0x6a, 0xc1, 0x30,
    0xfb, 0x69, 0x01, 0x75, 0x13, 0xb1, 0x62, 0xd2, 0x60, 0x3a, 0x44, 0x35, 0x4b, 0x63, 0xfa,
    0xc4, 0xdc, 0x2d, 0xcc, 0x6b, 0x81, 0xc9, 0xaf, 0xec, 0x9e, 0xb1, 0xde, 0x59, 0x85, 0xed,
    0x9e, 0xf5, 0xce, 0x14, 0x71, 0x2f, 0x7b, 0xe7, 0x6f, 0x4e, 0x2e, 0xce, 0xd9, 0xe5, 0xee,
    0xe9, 0xee, 0xf1, 0x79, 0xef, 0xe0, 0x8c, 0x9d, 0x9c, 0x9a, 0xcb, 0xf2, 0x27, 0x87, 0x6c,
    0xf8, 0x33, 0xfb, 0xb1, 0x77, 0xfc, 0x0a, 0xdc, 0x9d, 0x40, 0xac, 0x00, 0xdf, 0x63, 0x76,
    0x2d, 0x46, 0x12, 0x90, 0x5d, 0xf1, 0x8d, 0x34, 0x69, 0xa1, 0x41, 0x94, 0x27, 0x75, 0x95,
    0x9a, 0x40, 0x90, 0x4b, 0xa4, 0xa2, 0x80, 0x28, 0x99, 0x35, 0xb1, 0x40, 0xcc, 0xf3, 0xde,
    0xdb, 0x83, 0x2a, 0x50, 0xfd, 0x78, 0xbb, 0x77, 0x7c, 0x78, 0xda, 0x3b, 0x7e, 0x7d, 0xf0,
    0xe0, 0xf8, 0xbc, 0xca, 0xde, 0x1d, 0x9c, 0xee, 0xbf, 0x01, 0x94, 0xbb, 0x7b, 0xbd, 0xb7,
    0xf3, 0xcf, 0x24, 0x42, 0x87, 0xbd, 0xf3, 0xe3, 0x83, 0x33, 0xb1, 0x7d, 0x60, 0x57, 0xb6,
    0x7e, 0xf7, 0x14, 0x18, 0x76, 0xf1, 0x76, 0xf7, 0x94, 0xbd, 0xbf, 0x38, 0x7d, 0x7f, 0x72,
    0x20, 0x66, 0x5b, 0xb1, 0x5a, 0x18, 0xe2, 0xca, 0x02, 0xe0, 0x1f, 0x43, 0xa7, 0x01, 0xad,
    0xd0, 0xca, 0x8c, 0x88, 0x0a, 0xcb, 0xe2, 0x02, 0x9c, 0x4b, 0xe2, 0x71, 0x12, 0xa0, 0x7b,
    0x03, 0x1e, 0x80, 0x74, 0x61, 0x11, 0x92, 0xbf, 0xc2, 0xe2, 0x1a, 0xf9, 0x52, 0x91, 0x6d,
    0x53, 0xf0, 0x89, 0x70, 0xb8, 0xca, 0x5c, 0x07, 0x29, 0x59, 0xf6, 0x34, 0xf6, 0x02, 0x1d,
    0x0b, 0xa3, 0x2e, 0xd7, 0x59, 0x29, 0x1b, 0x6b, 0x2e, 0xb4, 0xce, 0x06, 0xb3, 0x42, 0xf6,
    0x35, 0xf8, 0xae, 0x48, 0x8a, 0x95, 0xde, 0x06, 0x6e, 0x3f, 0x08, 0x69, 0xf1, 0xbc, 0x87,
    0x2f, 0x03, 0xf7, 0x27, 0xca, 0x08, 0x87, 0x68, 0x03, 0x6e, 0x85, 0x94, 0xec, 0x04, 0x8c,
    0x69, 0x1b, 0xa9, 0x16, 0xb5, 0x92, 0x05, 0x02, 0x94, 0x99, 0x29, 0x83, 0x88, 0x0f, 0xc3,
    0xbc, 0x2f, 0x8f, 0x6f, 0x55, 0xf5, 0x6a, 0x77, 0xb5, 0x94, 0xca, 0xd5, 0x99, 0x9f, 0x67,
    0x7d, 0x53, 0x38, 0x0a, 0x98, 0xd3, 0x0f, 0x83, 0x3e, 0x39, 0x74, 0x04, 0x6e, 0x88, 0xf9,
    0xbd, 0x6e, 0xa1, 0xba, 0xcc, 0x70, 0x07, 0x42, 0x4a, 0xab, 0xe3, 0xf3, 0xf5, 0x43, 0x58,
    0xd2, 0xf4, 0x81, 0x49, 0x19, 0xc5, 0xb2, 0x30, 0xa0, 0x8e, 0x65, 0x46, 0x80, 0x58, 0xeb,
    0xf0, 0x11, 0x12, 0x33, 0x87, 0x8f, 0xb5, 0xd5, 0x96, 0x80, 0x62, 0x73, 0x40, 0x3a, 0xe6,
    0xb6, 0x6e, 0xac, 0x3e, 0x83, 0x42, 0x81, 0x63, 0x2b, 0x96, 0x12, 0xd0, 0x81, 0x11, 0x39,
    0x5c, 0x90, 0x93, 0x8d, 0x2a, 0x0b, 0x8d, 0x39, 0x37, 0xc0, 0x8d, 0xe9, 0xea, 0x44, 0xac,
    0xe3, 0x2c, 0xae, 0xe7, 0x6a, 0x5c, 0x35, 0x9e, 0x0e, 0x74, 0x89, 0x9a, 0xb9, 0xb6, 0x31,
    0xb8, 0x13, 0x44, 0x92, 0x99, 0x86, 0x5d, 0x35, 0x33, 0x06, 0x9b, 0x4f, 0xae, 0x89, 0x2b,
    0x38, 0xec, 0x30, 0x16, 0x02, 0x3b, 0x8c, 0x63, 0xff, 0x2e, 0x08, 0xcd, 0xdc, 0xe1, 0x0d,
    0xca, 0xf1, 0x18, 0x9f, 0xfe, 0xa9, 0x92, 0x4f, 0x90, 0x23, 0xf0, 0x81, 0x1b, 0x84, 0x79,
    0x66, 0x23, 0x37, 0x1c, 0xe4, 0x51, 0xe1, 0xdc, 0xd0, 0x24, 0x38, 0x67, 0x27, 0x08, 0xae,
    0xa0, 0xf0, 0x9a, 0xf4, 0x10, 0x1d, 0xf3, 0x14, 0x04, 0x07, 0xe5, 0x10, 0x1d, 0xf4, 0xe9,
    0x9c, 0x6c, 0x43, 0x27, 0xd3, 0x5d, 0xff, 0x36, 0xa0, 0x45, 0xd2, 0x81, 0xdc, 0xbe, 0x01,
    0x20, 0x89, 0xa0, 0x36, 0x37, 0xc8, 0xe6, 0x85, 0x06, 0x74, 0x6b, 0x6c, 0xd7, 0xc3, 0x39,
    0xa9, 0xa0, 0x2c, 0x2f, 0xf6, 0xbc, 0x5b, 0x4c, 0xd4, 0x86, 0x52, 0x5c, 0x5e, 0xa3, 0xeb,
    0x56, 0xd7, 0xe9, 0xc5, 0xc2, 0x27, 0x97, 0xdb, 0x94, 0x17, 0xea, 0x5d, 0xc7, 0xb1, 0xc8,
    0x52, 0xa6, 0xb3, 0xb4, 0xd8, 0x4e, 0x39, 0x57, 0xf0, 0xdb, 0x06, 0x9c, 0xec, 0x09, 0x98,
    0x42, 0xe8, 0x46, 0x1e, 0x17, 0x83, 0x18, 0x8b, 0x34, 0xa8, 0xb4, 0x7e, 0x13, 0x92, 0x3b,
    0x8a, 0x70, 0x6b, 0x49, 0x91, 0x10, 0x13, 0x64, 0x0d, 0x15, 0x76, 0x16, 0xf7, 0x43, 0x99,
    0x22, 0xbf, 0x65, 0x07, 0xcd, 0x0e, 0x7a, 0xbe, 0x62, 0xa9, 0x05, 0xc6, 0x83, 0xfa, 0x22,
    0xab, 0x40, 0x59, 0x50, 0x1d, 0x60, 0xbc, 0x89, 0xef, 0x30, 0x12, 0x12, 0xa1, 0xa4, 0x26,
    0xd1, 0xd3, 0x68, 0xb8, 0x18, 0x1f, 0xed, 0x68, 0x89, 0x42, 0x63, 0x35, 0x44, 0xfb, 0xdc,
    0x59, 0x84, 0x92, 0xb8, 0xf2, 0x36, 0x1a, 0xd2, 0xc2, 0x8c, 0x12, 0x5e, 0xf2, 0x74, 0x8a,
    0x94, 0xc2, 0xa2, 0x17, 0x99, 0x22, 0x43, 0x0c, 0x64, 0x4e, 0x18, 0x63, 0xa6, 0x60, 0x20,
    0x33, 0x2a, 0xbc, 0xd0, 0x77, 0xa2, 0xcd, 0x40, 0xd3, 0xc6, 0xe7, 0x03, 0x08, 0x57, 0x44,
    0xf0, 0x8c, 0xfd, 0x39, 0xa9, 0x73, 0x37, 0x19, 0x91, 0x25, 0x52, 0xce, 0xb5, 0xa6, 0x62,
    0xce, 0x79, 0x92, 0x14, 0xab, 0x65, 0x32, 0x73, 0x8c, 0x7b, 0xb1, 0x13, 0x54, 0x1f, 0x99,
    0xad, 0xce, 0xe6, 0x8d, 0xfb, 0x13, 0xe9, 0x6c, 0x14, 0x03, 0x9a, 0x20, 0x05, 0x0a, 0x9a,
    0x67, 0xfe, 0xce, 0x90, 0x46, 0xc3, 0x6d, 0xd4, 0x58, 0x84, 0x00, 0x1f, 0x1c, 0xbf, 0xc2,
    0x75, 0xde, 0x36, 0x38, 0xfa, 0x7d, 0xf7, 0xfd, 0x7b, 0x28, 0xd2, 0xfb, 0xf4, 0x12, 0x59,
    0xd9, 0x02, 0xb0, 0xa8, 0x13, 0xb9, 0x7d, 0xc1, 0xdc, 0xba, 0x87, 0xbf, 0x11, 0x94, 0x3b,
    0x96, 0x04, 0xd7, 0xf9, 0x82, 0x15, 0xaa, 0x72, 0x1b, 0x45, 0x39, 0x9b, 0xa0, 0xdc, 0xea,
    0xb4, 0x26, 0x81, 0x30, 0x3c, 0x53, 0x59, 0x8d, 0x6a, 0x11, 0xc9, 0x0f, 0x02, 0x1e, 0xfa,
    0x83, 0x09, 0x02, 0x94, 0x5d, 0x18, 0xfd, 0x3e, 0xae, 0x52, 0x72, 0x90, 0xcc, 0xca, 0x4f,
    0xaa, 0x68, 0xc3, 0x47, 0x99, 0x09, 0x39, 0xdb, 0x4d, 0x94, 0x30, 0x91, 0x55, 0x95, 0x51,
    0x11, 0x49, 0xd7, 0xd8, 0xe6, 0xab, 0x38, 0xfa, 0x87, 0xde, 0x2f, 0x60, 0xe8, 0xa8, 0x6a,
    0x3f, 0xb6, 0x18, 0x45, 0xeb, 0x14, 0xa6, 0xa6, 0xe0, 0x5e, 0x80, 0x24, 0x80, 0x8b, 0xaf,
    0xc8, 0xe8, 0xc0, 0x98, 0xb6, 0x8d, 0xb5, 0x59, 0xd4, 0x95, 0x74, 0x02, 0xf6, 0xfc, 0x5e,
    0x84, 0x52, 0x50, 0x2f, 0x00, 0x80, 0x9d, 0x80, 0x8a, 0x61, 0x8a, 0x0b, 0x54, 0xa2, 0xb4,
    0x93, 0x2a, 0x2b, 0x4e, 0x65, 0x85, 0xdc, 0x80, 0x94, 0xd1, 0x33, 0x43, 0x14, 0x76, 0x15,
    0x61, 0xd2, 0x0c, 0x2e, 0x97, 0x56, 0xfb, 0xbc, 0xd8, 0xb2, 0x42, 0x2b, 0xa4, 0x0a, 0x49,
    0x15, 0x2b, 0xb4, 0x7d, 0x1b, 0x7e, 0xa2, 0x27, 0x30, 0x71, 0xae, 0x28, 0xaf, 0x7c, 0xca,
    0x2f, 0x08, 0x13, 0x04, 0x2f, 0xd0, 0xeb, 0xf1, 0x92, 0x72, 0x6a, 0xdd, 0x55, 0xa7, 0x67,
    0x24, 0x87, 0x9b, 0x78, 0xd7, 0xb8, 0x62, 0x2d, 0x84, 0xa1, 0x58, 0x4c, 0x74, 0x2c, 0xbb,
    0x76, 0xf5, 0xf3, 0xd8, 0x55, 0x70, 0x15, 0xbc, 0x9a, 0x5a, 0xed, 0x76, 0x07, 0x30, 0x38,
    0x16, 0x78, 0xfd, 0xbb, 0x30, 0xb9, 0x9e, 0x0a, 0x1b, 0x73, 0xca, 0xd1, 0x63, 0x57, 0x89,
    0x29, 0x41, 0xbe, 0x11, 0x50, 0x95, 0x65, 0xab, 0x6a, 0xee, 0x16, 0x65, 0x9b, 0x58, 0x40,
    0xc8, 0xdc, 0xfa, 0x1e, 0x9b, 0x50, 0xc1, 0x0a, 0x5a, 0x09, 0x31, 0xb7, 0xc9, 0xdc, 0xba,
    0xf1, 0x83, 0x48, 0xc6, 0xa8, 0x64, 0x37, 0xb5, 0xb8, 0x69, 0xff, 0x87, 0x15, 0x29, 0x81,
    0x4f, 0xa9, 0x34, 0xb7, 0x94, 0xcf, 0x53, 0x52, 0xee, 0x66, 0x4a, 0x17, 0x9e, 0xdb, 0x8f,
    0x37, 0x49, 0xe3, 0x53, 0xab, 0x54, 0x65, 0x11, 0xf7, 0xfd, 0x31, 0xc7, 0x44, 0x6e, 0x48,
    0x66, 0x8c, 0x7c, 0xdb, 0xec, 0xf6, 0x27, 0x5c, 0x51, 0x30, 0x0b, 0x3c, 0xe6, 0x9e, 0xff,
    0xdf, 0x5c, 0x79, 0xe5, 0x44, 0xb6, 0x33, 0xce, 0x4b, 0x10, 0x94, 0x06, 0x90, 0xcf, 0x03,
    0x05, 0x43, 0x8b, 0x86, 0x39, 0x48, 0x23, 0xf8, 0x0b, 0x30, 0x67, 0x44, 0xd3, 0xdb, 0xfe,
    0x2a, 0xa5, 0x70, 0xe6, 0xd3, 0xd9, 0x71, 0xd5, 0xfe, 0xea, 0x9d, 0xcf, 0xeb, 0x0b, 0x2f,
    0xff, 0x5f, 0x44, 0xad, 0xdf, 0xa6, 0x8f, 0x27, 0xf7, 0xff, 0x5b, 0x96, 0x6d, 0x37, 0x67,
    0xff, 0xdb, 0x2d, 0x7b, 0xbd, 0xff, 0xff, 0xcf, 0xb8, 0xf0, 0xf1, 0xae, 0x8d, 0x55, 0x59,
    0xbf, 0x7a, 0x30, 0xeb, 0x6b, 0xe9, 0x4b, 0xe9, 0x7f, 0xf1, 0x24, 0xdb, 0x97, 0x74, 0xd5,
    0x3c, 0xad, 0xff, 0x4e, 0xb3, 0x39, 0xa3, 0xff, 0x76, 0xd3, 0x72, 0xd6, 0xfa, 0xff, 0x67,
    0x15, 0x74, 0xad, 0xd0, 0xbb, 0xf0, 0xb2, 0xca, 0xf7, 0x1b, 0x62, 0x07, 0x40, 0x4d, 0x3c,
    0xf2, 0x5e, 0x3c, 0xdf, 0x3b, 0xd9, 0x04, 0x2f, 0x01, 0xc2, 0x51, 0x88, 0xfd, 0x2a, 0x3f,
    0xcc, 0x53, 0xf9, 0x5c, 0x64, 0x95, 0xfd, 0xc6, 0x6e, 0xdd, 0x30, 0xe7, 0xe2, 0x21, 0x4a,
    0x15, 0xbc, 0x36, 0x59, 0x90, 0x9e, 0x89, 0x66, 0x3f, 0xb0, 0xdb, 0x38, 0xf0, 0x99, 0xf5,
    0xc6, 0xce, 0x8b, 0x17, 0x1b, 0xec, 0x05, 0x2b, 0x1d, 0x2a, 0x00, 0x37, 0x76, 0x36, 0x84,
    0x4c, 0xa5, 0xc5, 0x43, 0x96, 0x54, 0x12, 0xaf, 0x17, 0xec, 0xbf, 0xe5, 0x43, 0xe7, 0xe4,
    0xac, 0xfa, 0xa1, 0x7b, 0xd9, 0xc9, 0x0e, 0xfd, 0x55, 0xcf, 0xbc, 0x6f, 0x6e, 0x19, 0x8f,
    0x8a, 0xde, 0xc9, 0xe9, 0xac, 0xc9, 0xd5, 0x28, 0x3c, 0x67, 0xa4, 0x86, 0x1d, 0x90, 0x7b,
    0xbe, 0x6e, 0x7c, 0x9d, 0x1e, 0x30, 0xfe, 0x81, 0xe1, 0xee, 0x7c, 0x27, 0xf7, 0x6c, 0xbe,
    0x6f, 0x10, 0x7c, 0xa3, 0x8b, 0xd3, 0xb7, 0x3f, 0xe0, 0xb3, 0xe5, 0x2f, 0xa5, 0x73, 0x88,
    0xd1, 0xce, 0x17, 0x08, 0x11, 0xbf, 0x47, 0x82, 0xb4, 0x1a, 0x55, 0x3e, 0x39, 0x72, 0xae,
    0x1d, 0x3d, 0xb8, 0x97, 0xdd, 0xbc, 0xf7, 0x25, 0x7e, 0x78, 0xbb, 0x7f, 0x34, 0x72, 0x2f,
    0x43, 0xf8, 0x1c, 0xb8, 0x97, 0xcd, 0x9b, 0xab, 0x4f, 0xe0, 0x6d, 0x45, 0xef, 0x02, 0xb8,
    0xd0, 0xaf, 0x7f, 0x9c, 0x7c, 0x76, 0x3e, 0x9e, 0xf5, 0x9d, 0xae, 0x85, 0xbf, 0xf7, 0x82,
    0xc0, 0x73, 0xba, 0xb6, 0x37, 0x3a, 0x0e, 0xbd, 0x49, 0xaf, 0x75, 0x39, 0x39, 0x1a, 0xf7,
    0xa7, 0x21, 0xdf, 0x6f, 0x5a, 0xde, 0xe4, 0xc8, 0x87, 0x3a, 0xf9, 0xe7, 0x4b, 0x5b, 0xfc,
    0x5b, 0x69, 0x6f, 0x64, 0x5f, 0x7b, 0x6f, 0xf6, 0xa0, 0x8c, 0xff, 0x80, 0xf5, 0x4f, 0x1e,
    0xf6, 0x87, 0x8b, 0xc3, 0xc3, 0x0f, 0xe7, 0x69, 0xfb, 0xd4, 0x3a, 0x3c, 0x3c, 0x7d, 0xc8,
    0x3e, 0x5c, 0x1c, 0xf7, 0xde, 0x1e, 0xd8, 0x7b, 0x1f, 0x3e, 0x1d, 0xef, 0xbf, 0x3d, 0x08,
    0xfb, 0x4d, 0xfb, 0xec, 0xe2, 0xf0, 0x95, 0x7f, 0xd0, 0x6b, 0x9f, 0x58, 0xdd, 0xbd, 0xd3,
    0x8f, 0xbe, 0x9f, 0x9d, 0xdd, 0x9f, 0x42, 0xdd, 0xd3, 0x13, 0xfb, 0x70, 0xef, 0x83, 0x3d,
    0xcf, 0xad, 0xc3, 0xbd, 0x8b, 0xb3, 0xfb, 0x23, 0xb8, 0x77, 0xf4, 0xf6, 0xe0, 0x18, 0xea,
    0x4b, 0x3f, 0xc2, 0xbd, 0xfe, 0x45, 0x2f, 0xfd, 0x00, 0x7f, 0x3f, 0x4c, 0x4a, 0xbf, 0x51,
    0xef, 0xa0, 0x0c, 0xfd, 0xf6, 0x90, 0xbd, 0x82, 0x7e, 0x7f, 0x3c, 0xc1, 0x36, 0x0e, 0x3e,
    0x7d, 0xeb, 0x68, 0xef, 0xdc, 0x2a, 0x8d, 0xf9, 0xe1, 0x83, 0xd3, 0xcd, 0xfd, 0xd7, 0x1f,
    0x7f, 0x5f, 0x8e, 0xf3, 0xd3, 0xde, 0xad, 0x17, 0x7d, 0x18, 0xf2, 0xc9, 0xde, 0xd1, 0xc7,
    0xc7, 0x09, 0xbf, 0x38, 0xba, 0xf6, 0x9c, 0x8f, 0x47, 0xfd, 0xe8, 0x34, 0xf4, 0x46, 0x57,
    0x9f, 0x9d, 0x8b, 0xb4, 0x77, 0x78, 0x15, 0x7a, 0x51, 0xb8, 0xff, 0xf9, 0xd3, 0x71, 0x78,
    0xe6, 0xe8, 0xd6, 0x7b, 0xf3, 0x6e, 0x38, 0x38, 0xdb, 0x1b, 0x79, 0xa3, 0x6e, 0xd6, 0xdb,
    0x77, 0x3d, 0xe7, 0xf8, 0xd6, 0x7b, 0x7d, 0x71, 0xeb, 0x46, 0xc7, 0x63, 0xf7, 0xcc, 0xfe,
    0xf9, 0xf2, 0xfe, 0xcb, 0xdb, 0x4b, 0x6c, 0xe7, 0x22, 0xeb, 0x3b, 0x9f, 0xb3, 0xcf, 0xa3,
    0x87, 0xab, 0x33, 0xaf, 0xfd, 0xe9, 0x75, 0xd3, 0xeb, 0x07, 0x9d, 0x5f, 0x7f, 0x0c, 0xef,
    0xde, 0x7e, 0x3c, 0xfc, 0x70, 0xb6, 0x17, 0x60, 0x9b, 0xbd, 0xd7, 0xc7, 0x29, 0xfc, 0x7d,
    0x2b, 0xee, 0xdf, 0x42, 0xb9, 0x90, 0xbf, 0x11, 0xb8, 0x3e, 0x5f, 0x1e, 0x3d, 0xf8, 0x6f,
    0xae, 0x3f, 0xd7, 0xe1, 0xb3, 0x73, 0x7f, 0xed, 0xd5, 0xdf, 0x0d, 0x3f, 0x50, 0x7b, 0x7b,
    0x5e, 0x63, 0xd8, 0xdb, 0xdf, 0x1d, 0xbe, 0x9d, 0xc4, 0xbf, 0xaa, 0xcf, 0xd4, 0xee, 0x9b,
    0xd0, 0x7f, 0xf3, 0x71, 0xd2, 0x8f, 0xde, 0x0d, 0xfd, 0xd7, 0xd7, 0xd0, 0x7e, 0xf3, 0xba,
    0x79, 0x31, 0x04, 0x2c, 0xf2, 0xbb, 0xe8, 0xaf, 0xb7, 0x7f, 0x6d, 0xf5, 0x27, 0x7b, 0x28,
    0xe3, 0xab, 0xe8, 0x66, 0xd8, 0x1f, 0x1d, 0x5a, 0xee, 0xa7, 0xab, 0xb0, 0xf7, 0xe6, 0xb4,
    0xe3, 0xc1, 0xef, 0xd9, 0xd5, 0xa7, 0x77, 0xc3, 0xcf, 0x9f, 0x8e, 0xb0, 0xce, 0xe4, 0xea,
    0xd0, 0xba, 0xba, 0xfc, 0x30, 0xbc, 0x1a, 0x75, 0x27, 0xbd, 0xd7, 0x48, 0x9f, 0xd0, 0xc1,
    0x02, 0x17, 0xca, 0xce, 0x4d, 0x6e, 0xe0, 0xb8, 0x55, 0x9f, 0xbd, 0x37, 0x1f, 0x83, 0xfe,
    0xf0, 0x8b, 0x68, 0xf7, 0xe3, 0x09, 0xca, 0xd2, 0x8f, 0xfb, 0x37, 0x43, 0x6e, 0xe3, 0x78,
    0x65, 0xf9, 0xbd, 0xc9, 0xd5, 0xa7, 0x53, 0x90, 0xc1, 0xc6, 0xf0, 0xc7, 0x37, 0xa7, 0xb1,
    0xe9, 0x5d, 0xfe, 0x19, 0x78, 0xe5, 0xd5, 0x4f, 0x27, 0xfe, 0xe5, 0xb1, 0xd5, 0xaf, 0xf7,
    0x07, 0x60, 0xb9, 0x6c, 0x36, 0x7f, 0x3c, 0x6b, 0x92, 0x3c, 0x9e, 0xa8, 0xfa, 0x6f, 0x6c,
    0x1f, 0xc1, 0x7f, 0x40, 0xbf, 0xab, 0x4f, 0xd7, 0x77, 0xfd, 0xfa, 0x91, 0xd5, 0x7b, 0x1d,
    0x9f, 0x27, 0x57, 0xa3, 0xc3, 0x2f, 0x40, 0xab, 0x12, 0xef, 0xa0, 0x0c, 0x8c, 0xa3, 0x79,
    0x4d, 0xf6, 0x2e, 0x61, 0xec, 0x4d, 0xa2, 0xe7, 0xc7, 0xbd, 0x49, 0xbf, 0xbe, 0xf7, 0xd0,
    0x93, 0x01, 0x8f, 0x24, 0x9e, 0xcb, 0xc3, 0x9b, 0xbe, 0xd3, 0x4c, 0x39, 0xf1, 0xa9, 0xd7,
    0xbd, 0x39, 0xb6, 0x60, 0xcc, 0xf9, 0xd5, 0x43, 0xf6, 0x5c, 0x7f, 0x47, 0xd4, 0xe6, 0x45,
    0x1e, 0xf0, 0xf4, 0x34, 0x04, 0xbd, 0x7a, 0xe8, 0x1d, 0x84, 0x45, 0xbf, 0xe5, 0x32, 0x9a,
    0x20, 0x33, 0x13, 0xa0, 0x11, 0xf4, 0x79, 0x75, 0xeb, 0x5e, 0x7e, 0x40, 0xd9, 0xe9, 0xf6,
    0xbb, 0xfb, 0x57, 0x1b, 0xfb, 0x39, 0x97, 0x9a, 0xff, 0xf1, 0x2c, 0x9d, 0x1d, 0x75, 0xd4,
    0x8a, 0x0f, 0x03, 0x5c, 0xfe, 0xfc, 0x3f, 0xa7, 0x8d, 0xf7, 0xd6, 0xf3, 0xff, 0xb7, 0xbf,
    0xe7, 0xff, 0xad, 0xcf, 0xff, 0x5b, 0x9f, 0xff, 0xb7, 0x3e, 0xff, 0x6f, 0x7d, 0xfe, 0xdf,
    0xfc, 0xbf, 0xf5, 0xf9, 0x7f, 0xeb, 0xf3, 0xff, 0xd6, 0xe7, 0xff, 0xad, 0xcf, 0xff, 0x5b,
    0xff, 0xb7, 0x3e, 0xff, 0x6f, 0x1e, 0x0f, 0xd6, 0xe7, 0xff, 0xc9, 0x71, 0xaf, 0xcf, 0xff,
    0x9f, 0xff, 0xb7, 0x3e, 0xff, 0x6f, 0x7d, 0xfd, 0x2f, 0xb8, 0xc6, 0xe6, 0xfb, 0x3f, 0x6a,
    0x8e, 0x6b, 0xb8, 0x32, 0xb1, 0xd2, 0x3e, 0x9e, 0x5b, 0xff, 0xb7, 0xec, 0x99, 0xfc, 0x9f,
    0xa9, 0xb4, 0x95, 0xa2, 0x78, 0xe4, 0x5a, 0xe7, 0xff, 0x4a, 0xb6, 0xc3, 0x96, 0x61, 0x6c,
    0x87, 0xf3, 0x63, 0xf8, 0x34, 0x0a, 0xc6, 0x63, 0x19, 0xe1, 0x7e, 0x5d, 0x9b, 0x88, 0xff,
    0x97, 0xd2, 0x7f, 0xf9, 0x77, 0xf5, 0xca, 0xff, 0xb7, 0xe7, 0xf4, 0xbf, 0x5e, 0xaf, 0x5b,
    0xeb, 0xff, 0x8d, 0xf5, 0xf9, 0x9f, 0x7f, 0xca, 0xf5, 0xdb, 0x82, 0xc9, 0xb7, 0xf9, 0xee,
    0x98, 0x76, 0xc1, 0x9b, 0x0e, 0xfc, 0x1f, 0x4e, 0x35, 0x3e, 0x91, 0x23, 0xfc, 0x1d, 0xcb,
    0x4f, 0xaf, 0x33, 0x3c, 0xbe, 0x96, 0xa1, 0xdd, 0xaa, 0xa5, 0x32, 0x9f, 0xfd, 0x7c, 0x68,
    0x72, 0x9e, 0xcf, 0x2a, 0xee, 0xd0, 0x99, 0x4d, 0x69, 0x91, 0x58, 0x9c, 0x97, 0xe2, 0xfc,
    0xf9, 0x4a, 0x59, 0x7a, 0x99, 0x1c, 0xa9, 0x46, 0xc2, 0xa3, 0x21, 0xf8, 0xaf, 0xc6, 0x68,
    0xd8, 0x27, 0x18, 0xff, 0xfc, 0x81, 0xd9, 0x56, 0xad, 0x6e, 0x2e, 0xaf, 0xe0, 0xe9, 0x6c,
    0x6f, 0xf8, 0x4b, 0x5a, 0x29, 0x25, 0xb7, 0x8c, 0x9f, 0x7c, 0xe5, 0x2a, 0x57, 0x84, 0x9c,
    0x5d, 0xf4, 0xf3, 0x20, 0xf4, 0x55, 0x56, 0x95, 0x6d, 0x6f, 0x43, 0x80, 0x89, 0xdb, 0x51,
    0xe9, 0x1c, 0x48, 0x7c, 0xbe, 0x28, 0x65, 0x7f, 0xff, 0xbb, 0x10, 0x98, 0x24, 0x4e, 0x79,
    0xb9, 0x3a, 0xa7, 0xcb, 0x53, 0xf2, 0x6f, 0xf1, 0xf9, 0xdc, 0x6d, 0xfc, 0xc2, 0x66, 0xd7,
    0x59, 0x4d, 0x33, 0x4a, 0xd6, 0x78, 0x99, 0x8f, 0x7d, 0x21, 0xbd, 0x98, 0x19, 0x64, 0x49,
    0x31, 0x82, 0x80, 0xbd, 0x5c, 0xbc, 0x7f, 0xb5, 0x7b, 0x7e, 0xf0, 0xf3, 0xab, 0xde, 0xe1,
    0x0f, 0x36, 0x53, 0x3f, 0x53, 0x3f, 0x1b, 0x6c, 0xb5, 0xab, 0x53, 0x63, 0xce, 0x93, 0x57,
    0x5a, 0xe8, 0xba, 0x7d, 0xa4, 0x25, 0xe2, 0xc4, 0x8e, 0x62, 0xe2, 0xbf, 0x81, 0x85, 0x76,
    0xe6, 0x74, 0x14, 0x39, 0x88, 0x34, 0x45, 0x83, 0xc6, 0xdd, 0x6d, 0x22, 0xc9, 0x36, 0x3a,
    0xe9, 0x23, 0x25, 0x14, 0x33, 0x66, 0x7e, 0x1d, 0x27, 0x70, 0x3f, 0xa0, 0xcc, 0x5f, 0xe5,
    0xa0, 0xc6, 0xb5, 0x66, 0x01, 0x55, 0xf6, 0x28, 0xf1, 0xc5, 0x79, 0x06, 0x62, 0x2a, 0x58,
    0x6a, 0xc9, 0x9d, 0x5d, 0x73, 0x9b, 0x5e, 0xab, 0x9a, 0x5d, 0xa9, 0xfa, 0x9d, 0x59, 0x63,
    0xb2, 0x9c, 0xb7, 0xd0, 0xb5, 0x60, 0x0a, 0xbb, 0x14, 0xde, 0x3d, 0x9d, 0x1e, 0x9f, 0x09,
    0x8a, 0x31, 0xcd, 0x59, 0x55, 0x5c, 0xdd, 0xa2, 0xc1, 0xca, 0x96, 0x0d, 0x4a, 0x99, 0xfa,
    0x35, 0xaf, 0xc5, 0x13, 0xe6, 0x0b, 0xa6, 0xcc, 0xf5, 0xaa, 0x96, 0x14, 0x0e, 0x39, 0x23,
    0xd2, 0x03, 0x19, 0x54, 0x15, 0x26, 0x07, 0xa1, 0x9d, 0x6b, 0xb7, 0x74, 0xe1, 0x4b, 0xf9,
    0xf8, 0xa8, 0xec, 0xeb, 0x83, 0xb7, 0x27, 0xaf, 0x6b, 0x23, 0x7f, 0xd5, 0x7d, 0x3c, 0xe9,
    0xd5, 0xeb, 0x0d, 0xfc, 0x6d, 0xca, 0xff, 0xa3, 0x98, 0x70, 0xed, 0xff, 0x7d, 0xfb, 0xeb,
    0xb6, 0x4f, 0x47, 0x1b, 0xb1, 0xb7, 0xf1, 0x70, 0x63, 0x63, 0x57, 0x1c, 0xc2, 0x2a, 0x8e,
    0xa1, 0xfb, 0xa9, 0x38, 0x2b, 0x41, 0x9c, 0x8d, 0x4b, 0xc7, 0x43, 0xe1, 0xe3, 0xa1, 0xf8,
    0x92, 0x3a, 0xca, 0xc5, 0x38, 0x00, 0x42, 0x3c, 0xf3, 0x8e, 0x4f, 0x8f, 0xfc, 0xb4, 0x8f,
    0x0a, 0xcb, 0x13, 0x1a, 0xd8, 0x7e, 0x3c, 0x1a, 0x05, 0x59, 0xfa, 0xaf, 0x4d, 0xe5, 0xb1,
    0xc6, 0xaf, 0x9e, 0xf8, 0x11, 0x9f, 0xb4, 0xd9, 0x22, 0x8f, 0x50, 0xdc, 0x60, 0xc3, 0x3c,
    0x67, 0x80, 0x23, 0x7a, 0x3c, 0xe9, 0x3b, 0xf6, 0x93, 0x5d, 0xb3, 0x6b, 0x56, 0xd1, 0xc4,
    0x77, 0x0a, 0x1f, 0x07, 0x02, 0xc3, 0xbc, 0x73, 0x6b, 0xe3, 0x2c, 0x54, 0xab, 0xd5, 0x6e,
    0xd2, 0x16, 0xdb, 0x74, 0x2c, 0xc7, 0xda, 0xb6, 0xea, 0xdb, 0xb6, 0xb5, 0xb5, 0xb1, 0xf1,
    0xc5, 0x71, 0x9c, 0xf1, 0x97, 0x2f, 0x5e, 0xe8, 0x67, 0x90, 0xfa, 0xf9, 0x68, 0x2c, 0x1e,
    0x44, 0x00, 0x52, 0x27, 0xd8, 0xdc, 0xe9, 0x77, 0x83, 0x2e, 0xc2, 0x63, 0x2d, 0x8c, 0xc7,
    0x39, 0x8e, 0x02, 0x64, 0x19, 0x80, 0x9c, 0x6d, 0xbb, 0xbd, 0x32, 0x40, 0xa2, 0x93, 0xc5,
    0xd9, 0x35, 0x07, 0x11, 0x89, 0x6a, 0x06, 0x24, 0xab, 0xb5, 0x22, 0x48, 0x02, 0x13, 0x74,
    0x0c, 0x26, 0x5b, 0x62, 0x82, 0x6a, 0x1a, 0x93, 0xbd, 0xed, 0x38, 0x2b, 0xc6, 0x64, 0x2f,
    0xc9, 0xd2, 0x98, 0x6c, 0x03, 0x93, 0x55, 0x5f, 0x25, 0xeb, 0x16, 0x17, 0x6e, 0x28, 0x0c,
    0x5b, 0x41, 0x27, 0xcb, 0xc4, 0x84, 0x74, 0x82, 0x51, 0x7e, 0xc7, 0xf6, 0xf2, 0x21, 0x3b,
    0xee, 0x79, 0x0a, 0x18, 0xd9, 0x8b, 0x17, 0x80, 0x63, 0xe4, 0xde, 0x20, 0x4e, 0xe3, 0x34,
    0xc3, 0x55, 0x14, 0x47, 0x1d, 0xc6, 0xd9, 0xcc, 0xb3, 0xc2, 0xf2, 0xf4, 0x59, 0xf4, 0x80,
    0x2c, 0xcd, 0x36, 0x7f, 0xfa, 0xce, 0xb6, 0x1b, 0xcf, 0x10, 0x50, 0x44, 0x36, 0x3b, 0x58,
    0x0b, 0xf0, 0xfd, 0x64, 0xd5, 0x1d, 0xc7, 0x1e, 0xf0, 0x67, 0x87, 0x08, 0x9a, 0xbf, 0x23,
    0xb6, 0x3c, 0xa7, 0xef, 0xb4, 0x1a, 0x76, 0xc3, 0xf5, 0x1a, 0xcd, 0x41, 0xbf, 0xd5, 0xad,
    0x9d, 0x46, 0xdb, 0xb2, 0xb9, 0x67, 0x35, 0x9b, 0x56, 0xd7, 0xf7, 0xb6, 0xf0, 0xbc, 0x81,
    0x0e, 0x53, 0xfa, 0xe9, 0xbb, 0x56, 0xbb, 0xb5, 0x10, 0x22, 0x28, 0xb7, 0xc5, 0x70, 0x04,
    0xf6, 0x82, 0x23, 0xa8, 0xa3, 0x8a, 0x1a, 0xc2, 0x83, 0xc4, 0x5f, 0x8a, 0x55, 0x4a, 0x7c,
    0x22, 0xf1, 0xca, 0xee, 0x6e, 0xdb, 0xa0, 0xfa, 0xab, 0x92, 0x1f, 0x0d, 0x6b, 0x29, 0x09,
    0x16, 0xa8, 0xac, 0x6f, 0x89, 0xaa, 0xbb, 0x0c, 0xa8, 0x8e, 0x06, 0xd5, 0x35, 0x31, 0xd9,
    0xc6, 0xd4, 0x59, 0x06, 0x53, 0x5b, 0x63, 0xea, 0x68, 0x4c, 0x60, 0x91, 0x1a, 0x2b, 0xc6,
    0x8c, 0x38, 0x96, 0x31, 0x35, 0x35, 0xa6, 0xb6, 0x81, 0xc9, 0xee, 0x28, 0xed, 0x3f, 0xe4,
    0x96, 0x27, 0x4a, 0xf9, 0x65, 0x80, 0x86, 0x38, 0xf9, 0xbd, 0x78, 0x19, 0x85, 0x38, 0xd8,
    0xde, 0x16, 0x80, 0x4f, 0x19, 0x8f, 0xf1, 0x68, 0xc4, 0x20, 0x82, 0xb9, 0xbe, 0x42, 0xb3,
    0xc4, 0x32, 0xa8, 0xe7, 0x5d, 0xa7, 0xb9, 0x90, 0x92, 0x40, 0x39, 0xd2, 0x72, 0xce, 0xbd,
    0x83, 0x3f, 0xaf, 0x1d, 0xa8, 0xe5, 0xb2, 0xac, 0xd5, 0xe2, 0xdc, 0xe6, 0x75, 0xdf, 0x81,
    0xac, 0xfa, 0xa0, 0x6d, 0xf1, 0x86, 0xdf, 0x69, 0xbb, 0x0d, 0xbf, 0xcd, 0xb9, 0xd5, 0xef,
    0xdd, 0xad, 0x69, 0xed, 0x7b, 0x46, 0xcf, 0x1f, 0x23, 0x54, 0xcb, 0x24, 0xd4, 0xaa, 0x99,
    0x0c, 0x99, 0xca, 0x98, 0x1a, 0x1a, 0x53, 0xd3, 0xc4, 0xb4, 0x6a, 0xc5, 0x6b, 0x2c, 0x83,
    0xae, 0x31, 0x35, 0x4c, 0x4c, 0xab, 0x9d, 0x76, 0xa1, 0x9b, 0x65, 0x30, 0x39, 0x1a, 0x53,
    0xc4, 0xb4, 0x6a, 0x63, 0xb0, 0x84, 0x7b, 0x62, 0x69, 0xf7, 0xc4, 0x92, 0xee, 0x89, 0xc0,
    0x75, 0x56, 0x6d, 0xca, 0x97, 0xc1, 0x64, 0xcc, 0x2f, 0x26, 0xa6, 0xd5, 0xba, 0x71, 0xcb,
    0xbb, 0x76, 0xd7, 0xc0, 0x54, 0x4c, 0x2e, 0xd6, 0x76, 0xdd, 0x9a, 0x6f, 0xa0, 0x6e, 0x78,
    0xf1, 0x10, 0x61, 0xca, 0x17, 0x56, 0x70, 0x7a, 0x1e, 0x9d, 0xeb, 0xf8, 0xa2, 0x78, 0x77,
    0x44, 0x6f, 0x5e, 0x39, 0xe5, 0x83, 0x4a, 0x8a, 0x16, 0xaa, 0xb3, 0xa0, 0x85, 0xea, 0x48,
    0xe5, 0x36, 0xb8, 0x63, 0x75, 0x9f, 0x57, 0x57, 0xb4, 0x50, 0xb2, 0x6c, 0xbd, 0x6b, 0x77,
    0xaf, 0xcf, 0xed, 0x66, 0xab, 0xd1, 0x72, 0xea, 0xad, 0xc6, 0x00, 0xdf, 0x59, 0xc6, 0xbb,
    0xd5, 0xf4, 0x9a, 0xcd, 0x4e, 0x17, 0xfc, 0x90, 0x29, 0x17, 0x4b, 0x64, 0x11, 0xf1, 0xe4,
    0x4c, 0x4f, 0x31, 0x99, 0xc6, 0xc2, 0x13, 0x3a, 0x63, 0x3c, 0xaa, 0x00, 0x61, 0x37, 0x9e,
    0x16, 0x15, 0xec, 0x46, 0x97, 0x60, 0x37, 0xfd, 0x76, 0xc7, 0x69, 0xf8, 0x0b, 0xc1, 0x96,
    0x9b, 0x03, 0xcb, 0x75, 0x21, 0xac, 0x76, 0x9a, 0x03, 0xaf, 0xd9, 0xea, 0x77, 0xea, 0x96,
    0xf7, 0x9c, 0xb6, 0x6b, 0xf3, 0x66, 0xab, 0x6b, 0xfb, 0x8d, 0x96, 0x36, 0xac, 0xc8, 0x5f,
    0xd9, 0xe2, 0xfc, 0xed, 0x28, 0xfe, 0x62, 0x35, 0x83, 0xbf, 0x2b, 0xb3, 0xab, 0x04, 0xa9,
    0x0c, 0xa4, 0xb6, 0x52, 0x4d, 0xac, 0x66, 0x40, 0xb2, 0xec, 0x79, 0x22, 0xa7, 0xde, 0xec,
    0xd9, 0x2f, 0x32, 0xd3, 0xfd, 0x8b, 0x70, 0x77, 0x7f, 0xc1, 0x14, 0x29, 0xd3, 0x49, 0xee,
    0x90, 0x59, 0xed, 0xe7, 0xe4, 0x45, 0x32, 0x0b, 0xca, 0x11, 0xb3, 0x5a, 0x76, 0xab, 0xd1,
    0xf5, 0x17, 0x62, 0x96, 0x2c, 0x5b, 0x72, 0x65, 0xdb, 0xdd, 0x67, 0x4c, 0xb7, 0xee, 0xaf,
    0x9a, 0x1b, 0x91, 0x06, 0xcb, 0x10, 0x4c, 0xf1, 0xb0, 0x5d, 0xd8, 0x0d, 0xab, 0x2b, 0x74,
    0x65, 0x3c, 0x6c, 0x2f, 0xc3, 0xc3, 0x96, 0x01, 0xc9, 0x32, 0x20, 0xd9, 0xab, 0x32, 0xaf,
    0xa9, 0xb5, 0x0c, 0xa4, 0xa6, 0x16, 0xab, 0x96, 0x01, 0xa9, 0xb3, 0xed, 0x74, 0x57, 0x69,
    0xb1, 0x9b, 0x65, 0x30, 0x29, 0x32, 0x35, 0x0d, 0xce, 0x75, 0x56, 0x47, 0x26, 0x85, 0x69,
    0x3a, 0x35, 0x94, 0x07, 0x81, 0xd5, 0x4c, 0x4c, 0x2b, 0xf5, 0x20, 0xb0, 0x9b, 0x65, 0x30,
    0x0f, 0x02, 0xab, 0x19, 0x98, 0xac, 0x95, 0x7a, 0x10, 0xd8, 0xcd, 0x32, 0x98, 0x6c, 0x8d,
    0x7b, 0x10, 0x56, 0x7b, 0xdb, 0x5e, 0xad, 0x3c, 0x35, 0x96, 0x91, 0xa7, 0x86, 0x96, 0xa7,
    0x21, 0x4f, 0xed, 0xd5, 0xe6, 0xa6, 0xb0, 0x97, 0xc5, 0x21, 0xd5, 0x95, 0x93, 0x8c, 0xd5,
    0x48, 0xab, 0x75, 0xb4, 0xb0, 0x9b, 0x65, 0x30, 0x29, 0x11, 0xaf, 0x17, 0x4e, 0x32, 0x62,
    0xa9, 0xe3, 0x8e, 0xdd, 0x2c, 0x83, 0xc9, 0xd1, 0x98, 0xea, 0x26, 0xa6, 0xd5, 0x8a, 0x78,
    0x19, 0x11, 0x77, 0xb4, 0x88, 0xd7, 0x4b, 0x22, 0xbe, 0x62, 0x4c, 0xce, 0x32, 0x22, 0xee,
    0x11, 0x77, 0x0c, 0x11, 0x6f, 0x6d, 0x83, 0x57, 0xb8, 0x42, 0x11, 0x5f, 0x26, 0xfd, 0x6a,
    0x5a, 0x9c, 0x1c, 0x43, 0xc4, 0x5b, 0x2b, 0x4e, 0x2c, 0x60, 0x37, 0xcb, 0x60, 0x52, 0xe2,
    0x1b, 0xe2, 0xd4, 0x5a, 0xf5, 0xcc, 0xb2, 0x4c, 0x4a, 0xd8, 0xd6, 0x29, 0x61, 0xdb, 0x36,
    0xa9, 0x05, 0x12, 0xb5, 0x62, 0x4c, 0x4b, 0x88, 0x93, 0x4e, 0x09, 0xdb, 0x76, 0x49, 0x9c,
    0x86, 0x49, 0x42, 0x5a, 0x42, 0x9c, 0x74, 0xaa, 0xc3, 0xb6, 0x0d, 0x71, 0x6a, 0x6e, 0x3b,
    0xd5, 0xba, 0x65, 0x52, 0x1d, 0xb6, 0x4e, 0x75, 0xd8, 0x46, 0xaa, 0x03, 0x30, 0xad, 0x36,
    0xb5, 0x97, 0x49, 0x75, 0xd8, 0x3a, 0xd5, 0x61, 0x1b, 0xa9, 0x0e, 0xc4, 0xb4, 0x2a, 0x4b,
    0x30, 0x2d, 0xa1, 0x76, 0x3a, 0xd5, 0x61, 0x1b, 0xa9, 0x0e, 0xab, 0xb1, 0x6a, 0x53, 0xb0,
    0xaa, 0xc3, 0xd6, 0xa9, 0x0e, 0xdb, 0x48, 0x75, 0x00, 0xa6, 0x15, 0x9b, 0x82, 0x65, 0x52,
    0xb6, 0x4e, 0x75, 0xd8, 0x46, 0xaa, 0x03, 0x31, 0xad, 0x54, 0xed, 0x96, 0xc9, 0x74, 0x74,
    0x44, 0x96, 0x89, 0xa8, 0xf5, 0xc8, 0x3a, 0x0c, 0x36, 0x80, 0x18, 0x07, 0xa1, 0x4b, 0xef,
    0xc4, 0x43, 0x7d, 0x8d, 0x1d, 0x71, 0xf8, 0xca, 0x3f, 0x0c, 0x39, 0x1b, 0xcd, 0xc5, 0x42,
    0x28, 0x27, 0x12, 0xaf, 0x7d, 0xdf, 0xb7, 0xad, 0xc5, 0xf2, 0x03, 0xb2, 0x6c, 0x29, 0xe4,
    0x34, 0x9f, 0x11, 0x57, 0xdd, 0x5f, 0x7d, 0x7e, 0x06, 0x87, 0xc8, 0x89, 0xe7, 0x03, 0xe2,
    0xde, 0x41, 0x0c, 0x1d, 0xe2, 0xdb, 0x42, 0xdc, 0x11, 0x9e, 0x94, 0xcd, 0xe2, 0xb1, 0x58,
    0xa5, 0x77, 0x4d, 0x41, 0x67, 0xf5, 0x67, 0xe4, 0x50, 0x75, 0x56, 0x77, 0x68, 0x70, 0x8e,
    0x1b, 0x9d, 0xa6, 0xbb, 0xd0, 0xe0, 0x64, 0xd9, 0xd2, 0xe0, 0x9c, 0xee, 0x62, 0x4b, 0x43,
    0x0e, 0x97, 0x86, 0x1a, 0xf6, 0x82, 0xb4, 0xa7, 0x6c, 0x87, 0x60, 0xf2, 0xe9, 0xc1, 0xee,
    0xbd, 0xe3, 0xd7, 0x4c, 0x6c, 0xa3, 0x38, 0x9b, 0x43, 0x13, 0xdc, 0x60, 0xc3, 0xe4, 0x86,
    0x5c, 0x6f, 0x2b, 0xbd, 0xae, 0x24, 0x0e, 0xf1, 0x74, 0x44, 0xfd, 0x06, 0x5e, 0xf9, 0x78,
    0xee, 0xb9, 0xda, 0xa0, 0xe5, 0x76, 0x3c, 0x6e, 0x99, 0x85, 0xb1, 0x4b, 0x47, 0x39, 0xeb,
    0x7c, 0x59, 0xc4, 0xef, 0x54, 0x25, 0x71, 0xda, 0x2d, 0xee, 0x7d, 0xdc, 0xc6, 0x3b, 0x2e,
    0x78, 0x6a, 0x5b, 0x25, 0xf8, 0xf1, 0x30, 0xd5, 0x0d, 0xb9, 0x7e, 0x9f, 0x8a, 0x97, 0xe2,
    0xe2, 0xe5, 0x6b, 0x83, 0xe0, 0x5e, 0x9c, 0x71, 0x64, 0x28, 0xc0, 0x32, 0x99, 0xa0, 0x8e,
    0x5c, 0xdd, 0x92, 0xf8, 0x5b, 0x8d, 0xc7, 0xa5, 0x04, 0x89, 0x81, 0xa7, 0xa6, 0x26, 0xbe,
    0x5b, 0x54, 0xcf, 0xdc, 0x10, 0x34, 0xb5, 0x67, 0x8f, 0x04, 0xc5, 0x59, 0x2c, 0x4b, 0x06,
    0x84, 0x16, 0xb4, 0x2c, 0xdb, 0xb3, 0xbc, 0xc5, 0xb4, 0x40, 0x94, 0x95, 0xb9, 0x3b, 0x05,
    0xdc, 0x15, 0x87, 0xb3, 0xd3, 0x86, 0x41, 0x49, 0x3e, 0xcd, 0x18, 0x75, 0x62, 0xac, 0xd8,
    0x68, 0xf0, 0x92, 0xa0, 0x3e, 0x43, 0x34, 0x0d, 0xd5, 0x22, 0xa8, 0x0d, 0xc7, 0xe7, 0xde,
    0x2b, 0x25, 0xb2, 0x6c, 0x59, 0x61, 0xed, 0x05, 0x75, 0x08, 0x03, 0x70, 0x2d, 0x8c, 0xb8,
    0x12, 0x87, 0x49, 0xef, 0x9d, 0xc0, 0x17, 0x3c, 0x3c, 0xd0, 0x3e, 0x0e, 0x75, 0xe2, 0x2d,
    0x14, 0xcc, 0xf7, 0xd9, 0xee, 0xfb, 0x1e, 0x8d, 0x1d, 0x98, 0xa2, 0x8f, 0x17, 0x8f, 0x43,
    0xa5, 0xbd, 0x58, 0x26, 0x0c, 0xca, 0xd1, 0x28, 0xbb, 0xde, 0xc0, 0xef, 0xb4, 0x9e, 0x5f,
    0xc2, 0x51, 0xca, 0xb2, 0xe5, 0xe5, 0x9e, 0xce, 0x12, 0x53, 0x56, 0x47, 0xcd, 0x58, 0x1d,
    0xc2, 0xaa, 0x6f, 0x3b, 0x2b, 0x9d, 0xb0, 0x3a, 0x4b, 0xcc, 0x57, 0x3a, 0x4b, 0xda, 0x31,
    0xab, 0x15, 0x02, 0x12, 0x78, 0x16, 0x57, 0xd6, 0x36, 0x26, 0x67, 0x24, 0x20, 0xcb, 0x04,
    0x37, 0x2b, 0x3f, 0xc6, 0x67, 0x9b, 0xf1, 0x91, 0x58, 0xf1, 0x06, 0x70, 0xb6, 0x29, 0xce,
    0x4b, 0xb7, 0xc0, 0x60, 0x6d, 0xd3, 0xc9, 0x6f, 0xf4, 0x9a, 0x41, 0xee, 0xd2, 0x59, 0xec,
    0x2f, 0xe1, 0x03, 0x94, 0x91, 0xfa, 0x82, 0x0b, 0xf1, 0x50, 0x8e, 0x64, 0xc4, 0xef, 0xd7,
    0xcf, 0x1f, 0x2c, 0x24, 0x23, 0xb2, 0xac, 0xa9, 0x09, 0x50, 0x24, 0x74, 0xfb, 0x29, 0x16,
    0xf6, 0xfc, 0x9b, 0xef, 0xba, 0xad, 0x47, 0x45, 0xd4, 0x2c, 0xa7, 0x57, 0x2e, 0x5b, 0x4d,
    0xf9, 0xf5, 0xf6, 0x62, 0x82, 0x0d, 0xe5, 0x9e, 0xb2, 0xf9, 0x98, 0xf2, 0x2f, 0x1e, 0x8b,
    0x7b, 0x61, 0x2c, 0x5d, 0x88, 0x77, 0x39, 0xea, 0x97, 0x05, 0x9b, 0xb4, 0xa5, 0x17, 0xc7,
    0xb9, 0x7a, 0x0b, 0xae, 0x9b, 0xb2, 0x5f, 0xf0, 0x15, 0x64, 0x28, 0x0d, 0xbf, 0xd4, 0xd8,
    0x7e, 0x8d, 0x82, 0x69, 0x97, 0xd4, 0xa9, 0xce, 0x72, 0x7a, 0x90, 0x16, 0xfc, 0x3f, 0x5d,
    0xf0, 0xfc, 0x87, 0x8a, 0x60, 0x77, 0xe5, 0x9f, 0xff, 0xb9, 0xe3, 0xfe, 0x53, 0xca, 0x2e,
    0x58, 0x46, 0x58, 0xa4, 0xf3, 0x8e, 0xd5, 0xb4, 0xb4, 0x38, 0xdb, 0x8e, 0xdc, 0x0e, 0xf1,
    0x25, 0xb8, 0x0c, 0xb4, 0x31, 0x0d, 0x74, 0x71, 0x8f, 0xbe, 0x8d, 0x79, 0x06, 0x05, 0xb4,
    0x00, 0xb5, 0x1a, 0xdf, 0x00, 0x68, 0x7d, 0x1a, 0xe8, 0xe2, 0x6e, 0x7e, 0x1b, 0x23, 0x7d,
    0xb4, 0x70, 0xf3, 0xe5, 0x46, 0xa2, 0x55, 0x03, 0x75, 0xa6, 0x81, 0x2e, 0x6e, 0x48, 0xdb,
    0x77, 0x11, 0x56, 0x13, 0x40, 0x3b, 0x7a, 0x1f, 0xc6, 0xaa, 0x81, 0xda, 0xd3, 0x40, 0x17,
    0xb0, 0x6d, 0xbd, 0xb7, 0xa6, 0xad, 0xb7, 0xd6, 0x74, 0x8a, 0x8d, 0x10, 0x2b, 0x06, 0x6a,
    0x03, 0x5d, 0xc6, 0xf2, 0x76, 0x35, 0x4e, 0xcb, 0xc4, 0xe9, 0xac, 0x1e, 0x67, 0x77, 0x0a,
    0xe2, 0xfb, 0x6f, 0xda, 0x6a, 0xfb, 0x4d, 0x5b, 0xed, 0xbe, 0x31, 0x40, 0x3e, 0x11, 0xcb,
    0xd7, 0xd6, 0x81, 0xf1, 0x12, 0xa7, 0x3d, 0xe0, 0x81, 0xc1, 0x95, 0x3c, 0xba, 0x89, 0xe2,
    0x88, 0x0e, 0xac, 0x57, 0x01, 0x00, 0xdb, 0x94, 0x6f, 0x80, 0xa9, 0xfc, 0x57, 0x05, 0x6d,
    0xb8, 0xe6, 0x8b, 0xd9, 0x5d, 0x47, 0x2e, 0xad, 0x81, 0xf1, 0x6f, 0xba, 0xcf, 0xc5, 0x2a,
    0xb2, 0x90, 0x65, 0xcb, 0xa1, 0x40, 0x67, 0x31, 0xdf, 0x1e, 0xca, 0x3d, 0xed, 0xc1, 0x72,
    0x15, 0x01, 0xf8, 0xae, 0xf8, 0xf0, 0x46, 0x79, 0x23, 0x1d, 0x8d, 0x6a, 0xc1, 0x5e, 0xba,
    0x7a, 0xb3, 0xdb, 0xb8, 0xc8, 0xfc, 0xbc, 0x38, 0xe1, 0xa8, 0x64, 0xd9, 0x27, 0xa7, 0xc0,
    0xa3, 0x3c, 0x9f, 0x3b, 0x05, 0xb6, 0xbb, 0x5b, 0xb3, 0x73, 0x47, 0x67, 0x4a, 0x8c, 0x16,
    0x32, 0xd5, 0x56, 0x3b, 0xa6, 0xda, 0x6a, 0xc3, 0x54, 0x07, 0x17, 0x62, 0x9d, 0x6f, 0x60,
    0xda, 0x53, 0x20, 0x17, 0xdf, 0x43, 0xd5, 0xae, 0xb5, 0x14, 0xc8, 0xb6, 0x01, 0x92, 0xf6,
    0xaf, 0x18, 0x64, 0x6b, 0x0a, 0xe4, 0xe2, 0xfb, 0x97, 0xda, 0x2a, 0xa7, 0xd7, 0x56, 0xbb,
    0x3a, 0xb8, 0x1c, 0x5a, 0xf8, 0x6b, 0x8f, 0x28, 0xe4, 0x89, 0x52, 0xb7, 0x5f, 0x40, 0x1b,
    0x29, 0x5c, 0x0e, 0xe1, 0x5a, 0xe8, 0xd7, 0x15, 0xa0, 0xa4, 0x2e, 0xb8, 0x0b, 0x12, 0xca,
    0x87, 0xde, 0xb6, 0xda, 0x8d, 0xc1, 0x62, 0xfa, 0x27, 0xcb, 0x96, 0xf5, 0xaf, 0xbe, 0x58,
    0xe4, 0xd4, 0xad, 0x39, 0x32, 0x39, 0xed, 0xce, 0x2c, 0xe3, 0xcd, 0x68, 0x67, 0xa6, 0x69,
    0xd2, 0xae, 0x3f, 0x46, 0x49, 0xf7, 0x96, 0xb6, 0xcb, 0xc9, 0x57, 0xf1, 0x30, 0x75, 0x64,
    0x3e, 0x17, 0x58, 0xb8, 0xc4, 0x30, 0x20, 0x67, 0x41, 0x55, 0x77, 0x84, 0xaa, 0xd7, 0x9d,
    0xdb, 0x71, 0x16, 0x23, 0xa0, 0x2c, 0x5b, 0x26, 0xe0, 0x82, 0x71, 0x26, 0x94, 0xdb, 0xa2,
    0x8b, 0xe5, 0x75, 0xb0, 0x9b, 0x59, 0x43, 0xd2, 0xea, 0x3c, 0xda, 0xd9, 0x3c, 0x43, 0x02,
    0xe7, 0x30, 0x6d, 0xda, 0xb5, 0x5b, 0xc6, 0xb3, 0xd3, 0x8e, 0x5d, 0xc3, 0x64, 0xda, 0x37,
    0xd1, 0x69, 0xb7, 0x6e, 0x19, 0xaf, 0x4e, 0x3b, 0x75, 0x75, 0x03, 0x24, 0xa5, 0xb8, 0x57,
    0x72, 0xda, 0xa5, 0x5b, 0xca, 0xa3, 0x53, 0x20, 0x9d, 0x6f, 0x0c, 0x72, 0xc6, 0x9d, 0x5b,
    0x64, 0xe1, 0xcc, 0x69, 0x90, 0x1d, 0x11, 0x2e, 0xaf, 0x18, 0xa4, 0x76, 0xe5, 0x04, 0xc6,
    0x1d, 0xb9, 0x56, 0x61, 0x47, 0x2c, 0x13, 0xe3, 0xdc, 0x4d, 0x46, 0x85, 0x41, 0x3e, 0xcc,
    0x7a, 0xdf, 0x8a, 0x78, 0x9b, 0x30, 0x66, 0x5d, 0x74, 0x9a, 0x2b, 0xce, 0xb3, 0x71, 0x9e,
    0x2d, 0xb1, 0xdb, 0x0b, 0x6e, 0x49, 0x6f, 0x0b, 0x63, 0xec, 0xf3, 0xfa, 0xc0, 0x6a, 0x3d,
    0x05, 0x14, 0x39, 0x8b, 0xb2, 0xe5, 0x2d, 0xf3, 0x8b, 0x99, 0x92, 0xd6, 0x3c, 0xad, 0x5e,
    0xf0, 0x8f, 0x51, 0xb0, 0x35, 0x65, 0x17, 0x5b, 0x4b, 0xd8, 0xc5, 0x96, 0xb2, 0x8b, 0x2d,
    0x2e, 0x76, 0xc4, 0xde, 0x88, 0x95, 0x2a, 0x4a, 0x6b, 0xca, 0x2e, 0xb6, 0x96, 0xb0, 0x8b,
    0x65, 0x17, 0x5b, 0x86, 0x5d, 0xfc, 0x36, 0x20, 0x0d, 0xbb, 0x48, 0x5f, 0x8d, 0xde, 0x56,
    0xab, 0xf8, 0xab, 0x9f, 0xd1, 0xfb, 0x96, 0xd7, 0xec, 0xfb, 0x3f, 0xf0, 0x01, 0xfd, 0xd5,
    0xf1, 0xcc, 0xf9, 0x3f, 0xad, 0xf6, 0xec, 0xf3, 0x9f, 0xeb, 0xf3, 0xbf, 0xff, 0xa4, 0x2b,
    0x91, 0x7f, 0xfb, 0x1b, 0x9b, 0x3d, 0xd0, 0x8d, 0x5e, 0xd1, 0x56, 0x1c, 0x49, 0xc8, 0xbe,
    0x77, 0xbd, 0xff, 0xe3, 0xc9, 0x53, 0x09, 0xfe, 0xf1, 0xc4, 0xeb, 0x3e, 0xc4, 0xdb, 0x32,
    0x5a, 0x86, 0x7b, 0x09, 0x2f, 0x7c, 0xea, 0xff, 0xdf, 0x5e, 0x03, 0xf2, 0x12, 0x5f, 0xd1,
    0xbd, 0x7e, 0xbd, 0x47, 0x91, 0xc3, 0x65, 0x05, 0x31, 0xf8, 0x7d, 0x06, 0x21, 0x7f, 0x3a,
    0x22, 0x01, 0x5f, 0xa5, 0x6e, 0x81, 0x00, 0xc9, 0x4b, 0x26, 0x4e, 0x08, 0x9c, 0xdb, 0x5c,
    0x44, 0x37, 0xdd, 0xe6, 0x2c, 0x2b, 0x64, 0xc3, 0xd0, 0x1e, 0xa2, 0xc3, 0xf7, 0xaa, 0x7c,
    0x7e, 0xc6, 0x7d, 0x7d, 0xad, 0xaf, 0xf5, 0xf5, 0x07, 0xaf, 0xff, 0x07, 0xe5, 0x20, 0x1f,
    0x00, 0xb4, 0x00,
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/golang/scopejsiicalcbase.go 1`] = `
package scopejsiicalcbase

import (
    "github.com/aws-cdk/jsii/jsii"
)

type BaseIface interface {
    TypeName() jsii.Any
}

type Base struct {
}

func (b *Base) TypeName() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Base",
        Method: "TypeName",
        Args: []string{},

    })
    return nil
}

type BasePropsIface interface {
    GetBar() string
}

type BaseProps struct {
    Bar string
}


func (b BaseProps) GetBar() string {
    return b.Bar
}


type IBaseInterface interface {
    Bar()
}


`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/java/pom.xml 1`] = `
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <name>\${project.groupId}:\${project.artifactId}</name>
  <description>An example direct dependency for jsii-calc.</description>
  <url>https://github.com/aws/jsii</url>
  <licenses>
    <license>
      <name>Apache License 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0</url>
      <distribution>repo</distribution>
      <comments>An OSI-approved license</comments>
    </license>
  </licenses>
  <developers>
    <developer>
      <organization>Amazon Web Services</organization>
      <roles>
        <role>author</role>
      </roles>
      <organizationUrl>https://aws.amazon.com</organizationUrl>
    </developer>
  </developers>
  <scm>
    <connection>scm:git:https://github.com/aws/jsii.git</connection>
    <url>https://github.com/aws/jsii.git</url>
  </scm>
  <groupId>software.amazon.jsii.tests</groupId>
  <artifactId>calculator-base</artifactId>
  <version>0.0.0</version>
  <packaging>jar</packaging>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
    <dependency>
      <groupId>software.amazon.jsii.tests</groupId>
      <artifactId>calculator-base-of-base</artifactId>
      <version>[0.0.0,0.0.1)</version>
    </dependency>
    <dependency>
      <groupId>software.amazon.jsii</groupId>
      <artifactId>jsii-runtime</artifactId>
      <version>[0.0.0,0.0.1)</version>
    </dependency>
    <dependency>
      <groupId>org.jetbrains</groupId>
      <artifactId>annotations</artifactId>
      <version>[16.0.3,20.0.0)</version>
    </dependency>
    <dependency>
      <!-- Provides @javax.annotation.Generated for JDKs >= 9 -->
      <groupId>javax.annotation</groupId>
      <artifactId>javax.annotation-api</artifactId>
      <version>[1.3.2,1.4.0)</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
          <archive>
            <index>true</index>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.1.1</version>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <failOnError>false</failOnError>
          <show>protected</show>
          <sourceFileExcludes>
            <exclude>**/$Module.java</exclude>
          </sourceFileExcludes>
          <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
          <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>3.6</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <generateBackupPoms>false</generateBackupPoms>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/base/$Module.java 1`] = `
package software.amazon.jsii.tests.calculator.base;

import static java.util.Arrays.asList;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.Reader;
import java.io.UncheckedIOException;

import java.nio.charset.StandardCharsets;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import software.amazon.jsii.JsiiModule;

public final class $Module extends JsiiModule {
    private static final Map<String, String> MODULE_TYPES = load();

    private static Map<String, String> load() {
        final Map<String, String> result = new HashMap<>();
        final ClassLoader cl = $Module.class.getClassLoader();
        try (final InputStream is = cl.getResourceAsStream("software/amazon/jsii/tests/calculator/base/$Module.txt");
             final Reader rd = new InputStreamReader(is, StandardCharsets.UTF_8);
             final BufferedReader br = new BufferedReader(rd)) {
            br.lines()
              .filter(line -> !line.trim().isEmpty())
              .forEach(line ->  {
                final String[] parts = line.split("=", 2);
                final String fqn = parts[0];
                final String className = parts[1];
                result.put(fqn, className);
            });
        }
        catch (final IOException exception) {
            throw new UncheckedIOException(exception);
        }
        return result;
    }

    private final Map<String, Class<?>> cache = new HashMap<>();

    public $Module() {
        super("@scope/jsii-calc-base", "0.0.0", $Module.class, "jsii-calc-base@0.0.0.jsii.tgz");
    }

    @Override
    public List<Class<? extends JsiiModule>> getDependencies() {
        return asList(software.amazon.jsii.tests.calculator.baseofbase.$Module.class);
    }

    @Override
    protected Class<?> resolveClass(final String fqn) throws ClassNotFoundException {
        if (!MODULE_TYPES.containsKey(fqn)) {
            throw new ClassNotFoundException("Unknown JSII type: " + fqn);
        }
        String className = MODULE_TYPES.get(fqn);
        if (!this.cache.containsKey(className)) {
            this.cache.put(className, this.findClass(className));
        }
        return this.cache.get(className);
    }

    private Class<?> findClass(final String binaryName) {
        try {
            return Class.forName(binaryName);
        }
        catch (final ClassNotFoundException exception) {
            throw new RuntimeException(exception);
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/base/Base.java 1`] = `
package software.amazon.jsii.tests.calculator.base;

/**
 * A base class.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.base.$Module.class, fqn = "@scope/jsii-calc-base.Base")
public abstract class Base extends software.amazon.jsii.JsiiObject {

    protected Base(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Base(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    protected Base() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * @return the name of the class (to verify native type names are created for derived classes).
     */
    public @org.jetbrains.annotations.NotNull java.lang.Object typeName() {
        return this.jsiiCall("typeName", java.lang.Object.class);
    }

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.base.Base {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/base/BaseProps.java 1`] = `
package software.amazon.jsii.tests.calculator.base;

@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.base.$Module.class, fqn = "@scope/jsii-calc-base.BaseProps")
@software.amazon.jsii.Jsii.Proxy(BaseProps.Jsii$Proxy.class)
public interface BaseProps extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.baseofbase.VeryBaseProps {

    @org.jetbrains.annotations.NotNull java.lang.String getBar();

    /**
     * @return a {@link Builder} of {@link BaseProps}
     */
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link BaseProps}
     */
    public static final class Builder implements software.amazon.jsii.Builder<BaseProps> {
        private java.lang.String bar;
        private software.amazon.jsii.tests.calculator.baseofbase.Very foo;

        /**
         * Sets the value of {@link BaseProps#getBar}
         * @param bar the value to be set. This parameter is required.
         * @return {@code this}
         */
        public Builder bar(java.lang.String bar) {
            this.bar = bar;
            return this;
        }

        /**
         * Sets the value of {@link BaseProps#getFoo}
         * @param foo the value to be set. This parameter is required.
         * @return {@code this}
         */
        public Builder foo(software.amazon.jsii.tests.calculator.baseofbase.Very foo) {
            this.foo = foo;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link BaseProps}
         * @throws NullPointerException if any required attribute was not provided
         */
        @Override
        public BaseProps build() {
            return new Jsii$Proxy(bar, foo);
        }
    }

    /**
     * An implementation for {@link BaseProps}
     */
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements BaseProps {
        private final java.lang.String bar;
        private final software.amazon.jsii.tests.calculator.baseofbase.Very foo;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.bar = this.jsiiGet("bar", java.lang.String.class);
            this.foo = this.jsiiGet("foo", software.amazon.jsii.tests.calculator.baseofbase.Very.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String bar, final software.amazon.jsii.tests.calculator.baseofbase.Very foo) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.bar = java.util.Objects.requireNonNull(bar, "bar is required");
            this.foo = java.util.Objects.requireNonNull(foo, "foo is required");
        }

        @Override
        public java.lang.String getBar() {
            return this.bar;
        }

        @Override
        public software.amazon.jsii.tests.calculator.baseofbase.Very getFoo() {
            return this.foo;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("bar", om.valueToTree(this.getBar()));
            data.set("foo", om.valueToTree(this.getFoo()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("@scope/jsii-calc-base.BaseProps"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            BaseProps.Jsii$Proxy that = (BaseProps.Jsii$Proxy) o;

            if (!bar.equals(that.bar)) return false;
            return this.foo.equals(that.foo);
        }

        @Override
        public int hashCode() {
            int result = this.bar.hashCode();
            result = 31 * result + (this.foo.hashCode());
            return result;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/base/IBaseInterface.java 1`] = `
package software.amazon.jsii.tests.calculator.base;

@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.base.$Module.class, fqn = "@scope/jsii-calc-base.IBaseInterface")
@software.amazon.jsii.Jsii.Proxy(IBaseInterface.Jsii$Proxy.class)
public interface IBaseInterface extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.baseofbase.IVeryBaseInterface {

    void bar();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.base.IBaseInterface {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        @Override
        public void bar() {
            this.jsiiCall("bar", software.amazon.jsii.NativeType.VOID);
        }

        @Override
        public void foo() {
            this.jsiiCall("foo", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/java/src/main/resources/software/amazon/jsii/tests/calculator/base/$Module.txt 1`] = `
@scope/jsii-calc-base.Base=software.amazon.jsii.tests.calculator.base.Base
@scope/jsii-calc-base.BaseProps=software.amazon.jsii.tests.calculator.base.BaseProps
@scope/jsii-calc-base.IBaseInterface=software.amazon.jsii.tests.calculator.base.IBaseInterface

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/java/src/main/resources/software/amazon/jsii/tests/calculator/base/jsii-calc-base@0.0.0.jsii.tgz 1`] = `java/src/main/resources/software/amazon/jsii/tests/calculator/base/jsii-calc-base@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/js/jsii-calc-base@0.0.0.jsii.tgz 1`] = `js/jsii-calc-base@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/MANIFEST.in 1`] = `
include pyproject.toml

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/README.md 1`] = `


`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/pyproject.toml 1`] = `
[build-system]
requires = ["setuptools >= 49.3.1", "wheel >= 0.34.2"]
build-backend = "setuptools.build_meta"

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/setup.py 1`] = `
import json
import setuptools

kwargs = json.loads(
    """
{
    "name": "scope.jsii-calc-base",
    "version": "0.0.0",
    "description": "An example direct dependency for jsii-calc.",
    "license": "Apache-2.0",
    "url": "https://github.com/aws/jsii",
    "long_description_content_type": "text/markdown",
    "author": "Amazon Web Services",
    "bdist_wheel": {
        "universal": true
    },
    "project_urls": {
        "Source": "https://github.com/aws/jsii.git"
    },
    "package_dir": {
        "": "src"
    },
    "packages": [
        "scope.jsii_calc_base",
        "scope.jsii_calc_base._jsii"
    ],
    "package_data": {
        "scope.jsii_calc_base._jsii": [
            "jsii-calc-base@0.0.0.jsii.tgz"
        ],
        "scope.jsii_calc_base": [
            "py.typed"
        ]
    },
    "python_requires": ">=3.6",
    "install_requires": [
        "jsii>=0.0.0, <0.0.1",
        "publication>=0.0.3",
        "scope.jsii-calc-base-of-base>=0.0.0, <0.0.1"
    ],
    "classifiers": [
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Programming Language :: JavaScript",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Typing :: Typed",
        "License :: OSI Approved"
    ]
}
"""
)

with open("README.md") as fp:
    kwargs["long_description"] = fp.read()


setuptools.setup(**kwargs)

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/src/scope/jsii_calc_base/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from ._jsii import *

import scope.jsii_calc_base_of_base


class Base(metaclass=jsii.JSIIAbstractClass, jsii_type="@scope/jsii-calc-base.Base"):
    """A base class."""

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _BaseProxy

    def __init__(self) -> None:
        jsii.create(Base, self, [])

    @jsii.member(jsii_name="typeName")
    def type_name(self) -> typing.Any:
        """
        return
        :return: the name of the class (to verify native type names are created for derived classes).
        """
        return jsii.invoke(self, "typeName", [])


class _BaseProxy(Base):
    pass


@jsii.data_type(
    jsii_type="@scope/jsii-calc-base.BaseProps",
    jsii_struct_bases=[scope.jsii_calc_base_of_base.VeryBaseProps],
    name_mapping={"foo": "foo", "bar": "bar"},
)
class BaseProps(scope.jsii_calc_base_of_base.VeryBaseProps):
    def __init__(self, *, foo: scope.jsii_calc_base_of_base.Very, bar: str) -> None:
        """
        :param foo: -
        :param bar: -
        """
        self._values = {
            "foo": foo,
            "bar": bar,
        }

    @builtins.property
    def foo(self) -> scope.jsii_calc_base_of_base.Very:
        return self._values.get("foo")

    @builtins.property
    def bar(self) -> str:
        return self._values.get("bar")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "BaseProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.interface(jsii_type="@scope/jsii-calc-base.IBaseInterface")
class IBaseInterface(
    scope.jsii_calc_base_of_base.IVeryBaseInterface, jsii.compat.Protocol
):
    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IBaseInterfaceProxy

    @jsii.member(jsii_name="bar")
    def bar(self) -> None:
        ...


class _IBaseInterfaceProxy(
    jsii.proxy_for(scope.jsii_calc_base_of_base.IVeryBaseInterface)
):
    __jsii_type__ = "@scope/jsii-calc-base.IBaseInterface"

    @jsii.member(jsii_name="bar")
    def bar(self) -> None:
        return jsii.invoke(self, "bar", [])


__all__ = [
    "Base",
    "BaseProps",
    "IBaseInterface",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/src/scope/jsii_calc_base/_jsii/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

import scope.jsii_calc_base_of_base._jsii

__jsii_assembly__ = jsii.JSIIAssembly.load(
    "@scope/jsii-calc-base", "0.0.0", __name__[0:-6], "jsii-calc-base@0.0.0.jsii.tgz"
)

__all__ = [
    "__jsii_assembly__",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/src/scope/jsii_calc_base/_jsii/jsii-calc-base@0.0.0.jsii.tgz 1`] = `python/src/scope/jsii_calc_base/_jsii/jsii-calc-base@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/src/scope/jsii_calc_base/py.typed 1`] = `


`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/ 1`] = `
<root>
 ┣━ 📁 dotnet
 ┃  ┗━ 📁 Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId
 ┃     ┣━ 📄 .jsii
 ┃     ┣━ 📁 Amazon
 ┃     ┃  ┗━ 📁 JSII
 ┃     ┃     ┗━ 📁 Tests
 ┃     ┃        ┗━ 📁 CalculatorNamespace
 ┃     ┃           ┗━ 📁 BaseOfBaseNamespace
 ┃     ┃              ┣━ 📁 Internal
 ┃     ┃              ┃  ┗━ 📁 DependencyResolution
 ┃     ┃              ┃     ┗━ 📄 Anchor.cs
 ┃     ┃              ┣━ 📄 IVeryBaseInterface.cs
 ┃     ┃              ┣━ 📄 IVeryBaseInterfaceProxy.cs
 ┃     ┃              ┣━ 📄 IVeryBaseProps.cs
 ┃     ┃              ┣━ 📄 StaticConsumer.cs
 ┃     ┃              ┣━ 📄 Very.cs
 ┃     ┃              ┣━ 📄 VeryBaseProps.cs
 ┃     ┃              ┗━ 📄 VeryBasePropsProxy.cs
 ┃     ┣━ 📄 Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId.csproj
 ┃     ┣━ 📄 AssemblyInfo.cs
 ┃     ┗━ 📄 scope-jsii-calc-base-of-base-0.0.0.tgz
 ┣━ 📁 golang
 ┃  ┣━ 📁 _jsii
 ┃  ┃  ┗━ 📄 bundled-runtime.go
 ┃  ┗━ 📄 scopejsiicalcbaseofbase.go
 ┣━ 📁 java
 ┃  ┣━ 📄 pom.xml
 ┃  ┗━ 📁 src
 ┃     ┗━ 📁 main
 ┃        ┣━ 📁 java
 ┃        ┃  ┗━ 📁 software
 ┃        ┃     ┗━ 📁 amazon
 ┃        ┃        ┗━ 📁 jsii
 ┃        ┃           ┗━ 📁 tests
 ┃        ┃              ┗━ 📁 calculator
 ┃        ┃                 ┗━ 📁 baseofbase
 ┃        ┃                    ┣━ 📄 $Module.java
 ┃        ┃                    ┣━ 📄 IVeryBaseInterface.java
 ┃        ┃                    ┣━ 📄 StaticConsumer.java
 ┃        ┃                    ┣━ 📄 Very.java
 ┃        ┃                    ┗━ 📄 VeryBaseProps.java
 ┃        ┗━ 📁 resources
 ┃           ┗━ 📁 software
 ┃              ┗━ 📁 amazon
 ┃                 ┗━ 📁 jsii
 ┃                    ┗━ 📁 tests
 ┃                       ┗━ 📁 calculator
 ┃                          ┗━ 📁 baseofbase
 ┃                             ┣━ 📄 $Module.txt
 ┃                             ┗━ 📄 jsii-calc-base-of-base@0.0.0.jsii.tgz
 ┣━ 📁 js
 ┃  ┗━ 📄 jsii-calc-base-of-base@0.0.0.jsii.tgz
 ┗━ 📁 python
    ┣━ 📄 MANIFEST.in
    ┣━ 📄 pyproject.toml
    ┣━ 📄 README.md
    ┣━ 📄 setup.py
    ┗━ 📁 src
       ┗━ 📁 scope
          ┗━ 📁 jsii_calc_base_of_base
             ┣━ 📄 __init__.py
             ┣━ 📁 _jsii
             ┃  ┣━ 📄 __init__.py
             ┃  ┗━ 📄 jsii-calc-base-of-base@0.0.0.jsii.tgz
             ┗━ 📄 py.typed
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/.jsii 1`] = `
{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "description": "An example transitive dependency for jsii-calc.",
  "homepage": "https://github.com/aws/jsii",
  "jsiiVersion": "0.0.0",
  "license": "Apache-2.0",
  "name": "@scope/jsii-calc-base-of-base",
  "repository": {
    "directory": "packages/@scope/jsii-calc-base-of-base",
    "type": "git",
    "url": "https://github.com/aws/jsii.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "namespace": "Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace",
      "packageId": "Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId"
    },
    "go": {},
    "java": {
      "maven": {
        "artifactId": "calculator-base-of-base",
        "groupId": "software.amazon.jsii.tests"
      },
      "package": "software.amazon.jsii.tests.calculator.baseofbase"
    },
    "js": {
      "npm": "@scope/jsii-calc-base-of-base"
    },
    "python": {
      "distName": "scope.jsii-calc-base-of-base",
      "module": "scope.jsii_calc_base_of_base"
    }
  },
  "types": {
    "@scope/jsii-calc-base-of-base.IVeryBaseInterface": {
      "assembly": "@scope/jsii-calc-base-of-base",
      "fqn": "@scope/jsii-calc-base-of-base.IVeryBaseInterface",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 1
      },
      "methods": [
        {
          "abstract": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 2
          },
          "name": "foo"
        }
      ],
      "name": "IVeryBaseInterface"
    },
    "@scope/jsii-calc-base-of-base.StaticConsumer": {
      "assembly": "@scope/jsii-calc-base-of-base",
      "fqn": "@scope/jsii-calc-base-of-base.StaticConsumer",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 15
      },
      "methods": [
        {
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 18
          },
          "name": "consume",
          "parameters": [
            {
              "name": "_args",
              "type": {
                "primitive": "any"
              },
              "variadic": true
            }
          ],
          "static": true,
          "variadic": true
        }
      ],
      "name": "StaticConsumer"
    },
    "@scope/jsii-calc-base-of-base.Very": {
      "assembly": "@scope/jsii-calc-base-of-base",
      "fqn": "@scope/jsii-calc-base-of-base.Very",
      "initializer": {},
      "kind": "class",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 9
      },
      "methods": [
        {
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 10
          },
          "name": "hey",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "Very"
    },
    "@scope/jsii-calc-base-of-base.VeryBaseProps": {
      "assembly": "@scope/jsii-calc-base-of-base",
      "datatype": true,
      "fqn": "@scope/jsii-calc-base-of-base.VeryBaseProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 5
      },
      "name": "VeryBaseProps",
      "properties": [
        {
          "abstract": true,
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 6
          },
          "name": "foo",
          "type": {
            "fqn": "@scope/jsii-calc-base-of-base.Very"
          }
        }
      ]
    }
  },
  "version": "0.0.0",
  "fingerprint": "9nL4armG/GJRAhHMWxkKO9B6+nyGD108qvPMtTPljTw="
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId.csproj 1`] = `
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- Package Identification -->
    <Description>An example transitive dependency for jsii-calc.</Description>
    <PackageId>Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId</PackageId>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageVersion>0.0.0</PackageVersion>
    <!-- Additional Metadata -->
    <Authors>Amazon Web Services</Authors>
    <Company>Amazon Web Services</Company>
    <Language>en-US</Language>
    <ProjectUrl>https://github.com/aws/jsii</ProjectUrl>
    <RepositoryUrl>https://github.com/aws/jsii.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <!-- Build Configuration -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <Nullable>enable</Nullable>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <TargetFramework>netcoreapp3.1</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedResource Include="scope-jsii-calc-base-of-base-0.0.0.tgz" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Amazon.JSII.Runtime" Version="[0.0.0,0.0.1)" />
  </ItemGroup>
  <PropertyGroup>
    <NoWarn>0612,0618</NoWarn>
  </PropertyGroup>
</Project>


`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseOfBaseNamespace/IVeryBaseInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace
{
    [JsiiInterface(nativeType: typeof(IVeryBaseInterface), fullyQualifiedName: "@scope/jsii-calc-base-of-base.IVeryBaseInterface")]
    public interface IVeryBaseInterface
    {
        [JsiiMethod(name: "foo")]
        void Foo();
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseOfBaseNamespace/IVeryBaseInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace
{
    [JsiiTypeProxy(nativeType: typeof(IVeryBaseInterface), fullyQualifiedName: "@scope/jsii-calc-base-of-base.IVeryBaseInterface")]
    internal sealed class IVeryBaseInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.IVeryBaseInterface
    {
        private IVeryBaseInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        [JsiiMethod(name: "foo")]
        public void Foo()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseOfBaseNamespace/IVeryBaseProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace
{
    [JsiiInterface(nativeType: typeof(IVeryBaseProps), fullyQualifiedName: "@scope/jsii-calc-base-of-base.VeryBaseProps")]
    public interface IVeryBaseProps
    {
        [JsiiProperty(name: "foo", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-base-of-base.Very\\"}")]
        Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Very Foo
        {
            get;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseOfBaseNamespace/Internal/DependencyResolution/Anchor.cs 1`] = `
#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Internal.DependencyResolution
{
    public sealed class Anchor
    {
        public Anchor()
        {
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseOfBaseNamespace/StaticConsumer.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace
{
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.StaticConsumer), fullyQualifiedName: "@scope/jsii-calc-base-of-base.StaticConsumer")]
    public class StaticConsumer : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StaticConsumer(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StaticConsumer(DeputyProps props): base(props)
        {
        }

        [JsiiMethod(name: "consume", parametersJson: "[{\\"name\\":\\"_args\\",\\"type\\":{\\"primitive\\":\\"any\\"},\\"variadic\\":true}]")]
        public static void Consume(params object[] args)
        {
            InvokeStaticVoidMethod(typeof(Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.StaticConsumer), new System.Type[]{typeof(object[])}, new object[]{args});
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseOfBaseNamespace/Very.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace
{
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Very), fullyQualifiedName: "@scope/jsii-calc-base-of-base.Very")]
    public class Very : DeputyBase
    {
        public Very(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Very(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Very(DeputyProps props): base(props)
        {
        }

        [JsiiMethod(name: "hey", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}")]
        public virtual double Hey()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseOfBaseNamespace/VeryBaseProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace
{
    #pragma warning disable CS8618

    [JsiiByValue(fqn: "@scope/jsii-calc-base-of-base.VeryBaseProps")]
    public class VeryBaseProps : Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.IVeryBaseProps
    {
        [JsiiProperty(name: "foo", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-base-of-base.Very\\"}", isOverride: true)]
        public Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Very Foo
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseOfBaseNamespace/VeryBasePropsProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace
{
    [JsiiTypeProxy(nativeType: typeof(IVeryBaseProps), fullyQualifiedName: "@scope/jsii-calc-base-of-base.VeryBaseProps")]
    internal sealed class VeryBasePropsProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.IVeryBaseProps
    {
        private VeryBasePropsProxy(ByRefValue reference): base(reference)
        {
        }

        [JsiiProperty(name: "foo", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-base-of-base.Very\\"}")]
        public Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Very Foo
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Very>();
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/AssemblyInfo.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

[assembly: JsiiAssembly("@scope/jsii-calc-base-of-base", "0.0.0", "scope-jsii-calc-base-of-base-0.0.0.tgz")]

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/scope-jsii-calc-base-of-base-0.0.0.tgz 1`] = `dotnet/Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId/scope-jsii-calc-base-of-base-0.0.0.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/golang/_jsii/bundled-runtime.go 1`] = `
// Embedded data for the tarball containing the runtime of @scope/jsii-calc-base-of-base@0.0.0
const tarball = []byte {
    0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xed, 0x5d, 0x79, 0x77, 0xdb,
    0x92, 0xdf, 0xbf, 0xf5, 0x29, 0x7a, 0x99, 0xb7, 0xb3, 0x52, 0x96, 0xa2, 0x00, 0xf0, 0x76,
    0xf3, 0x56, 0xd6, 0x61, 0xd1, 0xb1, 0x25, 0xeb, 0xb2, 0x6c, 0xe7, 0x65, 0x13, 0x10, 0x68,
    0xb0, 0x40, 0x80, 0xc1, 0x21, 0x89, 0x9e, 0xe7, 0xef, 0xbe, 0x55, 0xd5, 0x07, 0x1a, 0x24,
    0x91, 0x89, 0xe8, 0xcc, 0xec, 0x13, 0x66, 0x1c, 0x91, 0x40, 0x1f, 0xbf, 0xae, 0xae, 0xbb,
    0xcd, 0x89, 0xeb, 0x5d, 0xbb, 0x43, 0xbe, 0x53, 0xfb, 0x9c, 0x06, 0xc1, 0xbf, 0xad, 0xe7,
    0x2c, 0xab, 0xd5, 0x68, 0xb0, 0x45, 0xf7, 0xe1, 0x6a, 0xd7, 0x5b, 0xf0, 0xac, 0xde, 0x6c,
    0xb6, 0xdd, 0x6a, 0x59, 0xf0, 0xd9, 0xb2, 0x2d, 0xa7, 0x6e, 0xc3, 0xdf, 0x35, 0xe1, 0x29,
    0x79, 0x9a, 0xb9, 0x09, 0x40, 0xf9, 0xb3, 0xed, 0x88, 0xc1, 0x30, 0xfd, 0xf7, 0x5f, 0xe4,
    0xc7, 0x06, 0x63, 0x15, 0x37, 0xcf, 0x46, 0x71, 0x52, 0x79, 0xc1, 0xf0, 0x1b, 0x7c, 0x8f,
    0x31, 0x87, 0x6f, 0x95, 0xdd, 0xb1, 0xfb, 0x25, 0x8e, 0xd8, 0x15, 0xef, 0xb3, 0x73, 0x9e,
    0x04, 0x1e, 0x4f, 0x2b, 0x55, 0x51, 0x24, 0x4e, 0x86, 0x6e, 0x14, 0x7c, 0x71, 0xb3, 0x20,
    0xa0, 0x68, 0x96, 0xe4, 0x5c, 0x3e, 0x49, 0xe2, 0x10, 0x8a, 0xbd, 0x60, 0x3f, 0xd3, 0xd7,
    0x75, 0xfa, 0xfa, 0x8b, 0x2c, 0x94, 0x27, 0x21, 0x76, 0x30, 0xca, 0xb2, 0x49, 0xfa, 0x62,
    0xc7, 0xbd, 0x4d, 0x6b, 0x2e, 0x75, 0x56, 0xf3, 0xe2, 0x31, 0x16, 0xfd, 0x8a, 0x05, 0x2b,
    0x4f, 0xbd, 0x24, 0x98, 0xc8, 0x4e, 0x2a, 0xbb, 0x11, 0xe3, 0x77, 0xee, 0x78, 0x12, 0x72,
    0xd0, 0x8d, 0xd2, 0x20, 0x0b, 0x6e, 0x38, 0xf3, 0xf9, 0x84, 0x47, 0x3e, 0x8f, 0xbc, 0x29,
    0xc4, 0x09, 0x43, 0x46, 0xde, 0xf6, 0xdc, 0xd0, 0xab, 0x11, 0xd6, 0xca, 0x28, 0x1e, 0xf3,
    0xb0, 0xb8, 0xd9, 0xdf, 0x30, 0xc8, 0x46, 0x79, 0x1f, 0xfb, 0xc2, 0xae, 0x77, 0xb0, 0x8a,
    0x8c, 0x9f, 0xde, 0xf3, 0x24, 0x95, 0x1d, 0x5a, 0x35, 0xf8, 0x9f, 0x78, 0x12, 0xc2, 0xe8,
    0x54, 0x90, 0x65, 0xe2, 0x7a, 0x23, 0xbe, 0xed, 0xa8, 0x47, 0x8a, 0x5c, 0xff, 0x93, 0x7a,
    0x84, 0xef, 0x68, 0x00, 0xdb, 0x7d, 0x37, 0xe5, 0xdb, 0xf1, 0x80, 0xfe, 0x8a, 0xa2, 0x09,
    0xc4, 0x00, 0x3b, 0x4e, 0xa6, 0x05, 0xb5, 0xfd, 0x20, 0xe1, 0x9e, 0xbc, 0x55, 0x99, 0x08,
    0x4c, 0x77, 0x1e, 0x6f, 0x0c, 0xaa, 0x66, 0xd3, 0x09, 0xf5, 0x0c, 0xe3, 0xa9, 0x2c, 0xa6,
    0x82, 0x91, 0xd6, 0xb0, 0xb4, 0x26, 0x71, 0x0a, 0x43, 0x19, 0xbb, 0x58, 0x05, 0x9f, 0xed,
    0x35, 0x5b, 0x0f, 0x19, 0x04, 0x63, 0xc8, 0xb3, 0xd4, 0x40, 0x1a, 0x67, 0x11, 0xcf, 0xf4,
    0x39, 0xf4, 0x14, 0x30, 0x1b, 0xec, 0x52, 0x7b, 0x7d, 0xde, 0xeb, 0xd5, 0x2e, 0x78, 0x9a,
    0xb5, 0x3d, 0x00, 0x9e, 0x87, 0x2e, 0x0c, 0xee, 0x58, 0x15, 0xac, 0xbd, 0x04, 0xfc, 0x27,
    0xfc, 0xaf, 0xbe, 0x27, 0xb1, 0x33, 0x3d, 0xfc, 0x9e, 0xff, 0x58, 0x7b, 0xef, 0x54, 0x41,
    0x3d, 0x7d, 0x4f, 0xf0, 0xda, 0x57, 0x49, 0x91, 0x61, 0x8c, 0x88, 0xd5, 0xb7, 0xcf, 0xee,
    0x6b, 0x8e, 0x60, 0xec, 0xde, 0xf0, 0xc8, 0xb8, 0x81, 0x0c, 0x9b, 0x64, 0xc1, 0xc0, 0xf5,
    0x81, 0xc2, 0xd3, 0x7d, 0x2e, 0x9a, 0x02, 0xd1, 0x43, 0x12, 0xe7, 0x13, 0x51, 0x3a, 0x8d,
    0xd9, 0xad, 0x9b, 0x70, 0xc5, 0xce, 0x44, 0xf0, 0x0c, 0xc1, 0x57, 0x64, 0xf9, 0xaf, 0xb3,
    0x7d, 0xb8, 0x5a, 0xad, 0xe8, 0xbf, 0x86, 0xfd, 0xc6, 0x03, 0xea, 0xbd, 0x34, 0xc2, 0xcf,
    0x69, 0x4e, 0x26, 0xe3, 0xc7, 0xb9, 0xb1, 0x54, 0x7f, 0x32, 0x05, 0x09, 0x35, 0x89, 0x00,
    0x99, 0x66, 0xc7, 0x92, 0xad, 0xa9, 0x9d, 0xda, 0x83, 0x8c, 0x88, 0x74, 0x8c, 0xfd, 0x3c,
    0x29, 0xff, 0x2b, 0x96, 0xff, 0x15, 0xcb, 0xfd, 0x1a, 0x0f, 0x7e, 0x35, 0xfa, 0xd5, 0xdc,
    0x0c, 0x6c, 0x30, 0xd8, 0x83, 0x98, 0x6b, 0x3d, 0x90, 0xcc, 0x29, 0x4e, 0x74, 0x2f, 0xca,
    0x32, 0x10, 0x5c, 0xa7, 0x21, 0xbb, 0x69, 0xca, 0xc7, 0xfd, 0x70, 0xba, 0x9c, 0x24, 0x52,
    0xc1, 0xef, 0xd1, 0xa3, 0xa5, 0x17, 0xf5, 0xaa, 0x1b, 0xb8, 0x0e, 0x22, 0x9a, 0xf5, 0x60,
    0x51, 0x18, 0x7b, 0xa4, 0x1c, 0x7b, 0xd1, 0x5b, 0x45, 0x19, 0x83, 0xc5, 0x06, 0x41, 0xc8,
    0xda, 0x08, 0x83, 0xfe, 0x0e, 0xb4, 0xc3, 0xef, 0x6a, 0x59, 0x6a, 0x72, 0x55, 0x18, 0x44,
    0xdc, 0x9e, 0xe3, 0x9b, 0x31, 0x87, 0xe9, 0xf2, 0x4d, 0x1d, 0xcb, 0x8c, 0xb6, 0x91, 0x14,
    0x14, 0xf4, 0xa3, 0x97, 0x95, 0x14, 0xf3, 0x32, 0xb8, 0x96, 0xc5, 0x66, 0xe2, 0x73, 0x8c,
    0x5f, 0x4b, 0x5d, 0xa9, 0x46, 0x06, 0x71, 0x5c, 0xd1, 0xf7, 0xbf, 0xca, 0x4f, 0xbf, 0xe8,
    0xa8, 0x62, 0x0b, 0x08, 0x5d, 0xe2, 0xd2, 0x87, 0xa7, 0xe9, 0x3c, 0x83, 0x61, 0x79, 0x7b,
    0x94, 0xe6, 0x63, 0x9e, 0x7c, 0x0b, 0xc6, 0x98, 0xe9, 0x71, 0x8e, 0x29, 0xbc, 0x10, 0x7a,
    0x07, 0x43, 0x34, 0x57, 0xe7, 0x88, 0x27, 0x9f, 0x75, 0xbb, 0xf3, 0xe8, 0xb4, 0x7b, 0x82,
    0xa5, 0x06, 0x40, 0xe7, 0x25, 0xf0, 0x18, 0xe6, 0xb7, 0x0c, 0x76, 0x16, 0x70, 0xa9, 0xa1,
    0xc1, 0x0e, 0xcd, 0xe2, 0x28, 0x8c, 0xdf, 0x6c, 0x35, 0xec, 0x24, 0x09, 0xc6, 0xe4, 0x1b,
    0x6d, 0x37, 0x9a, 0x56, 0x66, 0x8a, 0x7c, 0x9d, 0x6b, 0xeb, 0xc6, 0x4d, 0x02, 0xd7, 0x0f,
    0x29, 0x31, 0xa5, 0xc7, 0x5f, 0x8d, 0x6f, 0xbf, 0x94, 0x06, 0x93, 0x12, 0x07, 0x2c, 0x92,
    0xfb, 0xda, 0xbb, 0x9f, 0xfb, 0x67, 0xb8, 0x69, 0x05, 0xce, 0x47, 0xb1, 0xf9, 0x16, 0xfc,
    0xfd, 0xe8, 0x2a, 0x41, 0x04, 0x14, 0x76, 0xc3, 0xe0, 0x8b, 0x10, 0xb6, 0xaf, 0xdf, 0x8c,
    0xbb, 0xff, 0x0c, 0xdc, 0x6f, 0x3d, 0xca, 0xfd, 0x23, 0x3e, 0x2d, 0x73, 0x7e, 0xc2, 0xb3,
    0x89, 0xd2, 0xf9, 0xbe, 0xef, 0xe1, 0xe3, 0x32, 0x17, 0x47, 0xf9, 0xb8, 0xaf, 0xd8, 0x42,
    0xbc, 0xb1, 0xe8, 0xf3, 0xfd, 0x2c, 0x46, 0x13, 0xb8, 0x22, 0x63, 0x91, 0x5f, 0x95, 0xc4,
    0xf4, 0x4f, 0x72, 0x98, 0xef, 0x02, 0x7f, 0x8b, 0x81, 0x9a, 0xc2, 0xb2, 0x3c, 0xe7, 0x15,
    0xbe, 0xa9, 0xf5, 0x9d, 0xd7, 0xb5, 0x26, 0x35, 0x17, 0x80, 0x9a, 0xc0, 0x57, 0x0e, 0x0e,
    0xff, 0x83, 0xf6, 0x39, 0x18, 0x8f, 0xf3, 0xcc, 0xed, 0x87, 0xb3, 0x94, 0x7a, 0x7c, 0x58,
    0x0e, 0xcd, 0x1c, 0x5e, 0x6b, 0x29, 0xe3, 0x5d, 0x7a, 0xb0, 0x90, 0x5d, 0x57, 0xd0, 0x20,
    0x33, 0xed, 0x8c, 0x7f, 0x78, 0xb3, 0x30, 0x16, 0x1b, 0x04, 0xd1, 0x90, 0x27, 0x20, 0x1f,
    0x92, 0xb0, 0xd2, 0x8d, 0xde, 0x34, 0xdc, 0x64, 0xfc, 0x6a, 0xe7, 0xd5, 0xeb, 0xb3, 0xdd,
    0xd1, 0xdb, 0xab, 0xbb, 0xeb, 0x9f, 0x4e, 0xba, 0x2f, 0x5b, 0xff, 0x15, 0x4d, 0x5f, 0xed,
    0x56, 0xe7, 0xf7, 0x9b, 0x77, 0x6f, 0xb3, 0x8b, 0x77, 0xe1, 0xe7, 0x8b, 0xdb, 0x1f, 0x2b,
    0x5f, 0x37, 0xfe, 0xea, 0x98, 0xfb, 0x9f, 0xe9, 0x92, 0x31, 0xc8, 0xce, 0x9b, 0xde, 0xde,
    0xf1, 0xf9, 0xc1, 0x5a, 0xfa, 0x78, 0x30, 0xff, 0xe3, 0xb4, 0xec, 0xb6, 0x33, 0x9f, 0xff,
    0x37, 0x9f, 0xf3, 0x3f, 0xdf, 0xe2, 0x9a, 0x73, 0x9e, 0xe6, 0x2e, 0x91, 0xed, 0x60, 0x6f,
    0xfe, 0xe3, 0xa1, 0xf2, 0x32, 0x71, 0xc2, 0x9c, 0x9a, 0x55, 0x65, 0xaf, 0xdd, 0x28, 0x77,
    0x29, 0x73, 0x2c, 0xab, 0x71, 0x6f, 0x25, 0xcc, 0x52, 0xbc, 0xd8, 0xd9, 0xb9, 0xbd, 0xbd,
    0xb9, 0xd4, 0x4d, 0x2d, 0x4e, 0x86, 0x3b, 0x32, 0xd5, 0x92, 0xee, 0x6c, 0x60, 0xc5, 0x8b,
    0xb3, 0xb7, 0xe7, 0x6c, 0xf7, 0x78, 0x9f, 0xed, 0x9d, 0x1c, 0xef, 0xf7, 0x2e, 0x7a, 0x27,
    0xe7, 0xec, 0xf0, 0xe4, 0x8c, 0x5d, 0x9e, 0x1f, 0x54, 0xd9, 0xd9, 0xc1, 0xbb, 0xb3, 0x93,
    0xcb, 0x3d, 0xbc, 0x5d, 0xa5, 0x52, 0xfb, 0xbd, 0xf3, 0x8b, 0xb3, 0xde, 0xcb, 0x4b, 0xbc,
    0x0d, 0xd8, 0x35, 0xb6, 0xcf, 0x07, 0xe4, 0xaf, 0x80, 0x77, 0x55, 0xdb, 0x50, 0x9a, 0x5a,
    0xa8, 0xc2, 0xd2, 0x91, 0x1b, 0x86, 0x6c, 0xcc, 0xdd, 0x88, 0x65, 0x30, 0x52, 0x30, 0x26,
    0x94, 0xb9, 0x91, 0xcf, 0xc0, 0x83, 0xf5, 0x45, 0x2d, 0xca, 0x2c, 0xe5, 0x29, 0xaf, 0xb2,
    0x83, 0x86, 0xf7, 0x73, 0x0f, 0x6f, 0x2b, 0xbd, 0x88, 0x65, 0x31, 0x62, 0x4e, 0x82, 0x7e,
    0xf7, 0x99, 0x9b, 0x32, 0x1f, 0xbb, 0xe4, 0x3e, 0xeb, 0x4f, 0xd9, 0x39, 0xf7, 0x44, 0x23,
    0xb4, 0x9f, 0xc4, 0xf9, 0x70, 0xc4, 0xba, 0x2c, 0x1e, 0xc0, 0x97, 0x00, 0xca, 0xc5, 0x1e,
    0x7c, 0x51, 0x36, 0x8b, 0x2b, 0x4e, 0xe6, 0x80, 0x81, 0x6a, 0x9d, 0x26, 0xc1, 0x70, 0x94,
    0xf8, 0x36, 0xe2, 0x09, 0x03, 0x48, 0x50, 0x31, 0xc8, 0xa6, 0x4c, 0xa4, 0xd8, 0xc0, 0x17,
    0xfe, 0x64, 0x3b, 0x8b, 0x6a, 0x64, 0x23, 0x37, 0x63, 0xd0, 0xe9, 0x30, 0x71, 0xa1, 0x62,
    0xa4, 0x42, 0x92, 0x0e, 0x06, 0x00, 0x3e, 0x74, 0x43, 0x76, 0x40, 0x4d, 0xcf, 0x81, 0xc8,
    0x1c, 0x20, 0xa1, 0xe7, 0x0c, 0x6c, 0x18, 0xb6, 0xa2, 0x50, 0x00, 0x19, 0xa0, 0xac, 0x6c,
    0x86, 0x02, 0x12, 0x20, 0x18, 0x43, 0xd1, 0x35, 0x10, 0x34, 0x4b, 0xe2, 0xb0, 0xca, 0xdc,
    0xab, 0x2f, 0x21, 0x81, 0xae, 0xe2, 0x68, 0xf0, 0x6e, 0x0e, 0x06, 0x2b, 0x81, 0x67, 0xe3,
    0x1c, 0xc9, 0x96, 0x64, 0x41, 0x76, 0x1b, 0x64, 0x23, 0xd1, 0x8e, 0xe8, 0xb0, 0xc6, 0x0e,
    0x84, 0x70, 0x4c, 0xf2, 0x64, 0x12, 0x03, 0xc7, 0x14, 0x54, 0xd5, 0x13, 0xae, 0x0d, 0xb3,
    0xa5, 0x42, 0x43, 0x49, 0xd9, 0x66, 0xb0, 0x25, 0xaa, 0xc6, 0xb7, 0x3c, 0xa9, 0x32, 0x91,
    0x43, 0x10, 0x60, 0x31, 0xe9, 0x73, 0x95, 0x65, 0x31, 0xf3, 0x5c, 0x98, 0x74, 0x2c, 0x27,
    0x11, 0x8f, 0x88, 0x02, 0x09, 0x1b, 0xbb, 0x11, 0xa8, 0x4e, 0x9c, 0x3c, 0xec, 0x37, 0xcd,
    0x91, 0x04, 0x56, 0x65, 0xb7, 0x23, 0x4e, 0xc3, 0x87, 0xd9, 0xa7, 0x7e, 0x5d, 0x6a, 0xdb,
    0xcc, 0x6d, 0x80, 0xdc, 0x04, 0xad, 0x6c, 0x06, 0x80, 0x84, 0xa6, 0x27, 0x1d, 0x05, 0x13,
    0x69, 0x10, 0x0c, 0x80, 0x9a, 0xe0, 0x45, 0x78, 0xd8, 0xf4, 0x66, 0xd3, 0xfa, 0x8f, 0x2d,
    0x2e, 0x06, 0xf2, 0x08, 0xc2, 0xab, 0x86, 0xf2, 0x0c, 0xb4, 0x17, 0xe0, 0x85, 0x39, 0x80,
    0x4a, 0x78, 0xaa, 0x5a, 0x84, 0x26, 0xfb, 0x3c, 0x02, 0x22, 0x78, 0xe0, 0xa3, 0x97, 0x5b,
    0x70, 0x16, 0x53, 0xfe, 0x31, 0xce, 0x2b, 0x6c, 0x13, 0xea, 0xe2, 0xa7, 0xa4, 0xb2, 0x65,
    0x3a, 0xfc, 0x1f, 0x69, 0x72, 0x13, 0xf8, 0x39, 0xb6, 0x95, 0x30, 0x93, 0x3f, 0x64, 0x03,
    0x0e, 0xd0, 0x06, 0x29, 0x02, 0x01, 0xdc, 0xe3, 0x20, 0x4d, 0x89, 0xe1, 0x89, 0xcf, 0x84,
    0xd0, 0xb4, 0xcc, 0xb1, 0xda, 0x39, 0xf4, 0x06, 0x7e, 0x1b, 0x8a, 0xd7, 0x78, 0x96, 0xd3,
    0x09, 0x1f, 0xf0, 0x24, 0x81, 0xea, 0xf4, 0x74, 0x40, 0x14, 0xbf, 0xc6, 0x2e, 0xc6, 0xb1,
    0xc0, 0xd0, 0xc8, 0x15, 0x4a, 0xd5, 0x04, 0x07, 0x91, 0x17, 0xe6, 0x44, 0x0a, 0x10, 0x42,
    0xc5, 0x19, 0x0b, 0xd1, 0x7f, 0x86, 0xea, 0x30, 0x8f, 0x2a, 0xbf, 0x06, 0x1f, 0xb0, 0x43,
    0x14, 0x1f, 0xa8, 0xaf, 0x64, 0x8f, 0x1a, 0x92, 0xcd, 0x88, 0x02, 0x55, 0x25, 0xff, 0x83,
    0x98, 0x27, 0xf4, 0x9c, 0xa1, 0x6b, 0x65, 0xa8, 0x8f, 0x93, 0xfe, 0x67, 0x60, 0x85, 0x79,
    0x10, 0x6f, 0x8a, 0x7b, 0x30, 0x1d, 0x79, 0x48, 0xf2, 0x31, 0x48, 0xe2, 0x31, 0x3c, 0xf4,
    0x6e, 0x04, 0xa8, 0x95, 0x80, 0x50, 0x0a, 0x1b, 0x4b, 0xba, 0x8a, 0xa1, 0xe8, 0x4e, 0x28,
    0x0e, 0x98, 0xcb, 0x04, 0x79, 0xa8, 0xb9, 0x6a, 0x79, 0x80, 0xb2, 0x8d, 0x99, 0x61, 0x82,
    0x4c, 0x02, 0x14, 0xa8, 0x98, 0xc0, 0xc9, 0x61, 0x0e, 0x81, 0x13, 0x60, 0x0c, 0x70, 0xbb,
    0x60, 0x53, 0x7b, 0xc1, 0x48, 0xa5, 0xab, 0x95, 0x62, 0x3b, 0x42, 0x76, 0xc7, 0xdc, 0x0f,
    0x46, 0x29, 0xba, 0x62, 0xd8, 0x57, 0x71, 0x72, 0x3d, 0xa7, 0x14, 0x6e, 0xe1, 0x26, 0x21,
    0x3d, 0x84, 0x9c, 0x56, 0x88, 0x40, 0x10, 0xa9, 0x61, 0x68, 0x01, 0x10, 0xa4, 0x93, 0xc3,
    0xbb, 0x3e, 0x28, 0x92, 0x1b, 0x37, 0x08, 0xd1, 0xeb, 0x95, 0xf2, 0x6f, 0xe8, 0xa5, 0x2a,
    0x53, 0x64, 0x40, 0xcf, 0x95, 0xac, 0xe4, 0x6a, 0xbd, 0xa0, 0xb4, 0x1b, 0x90, 0x01, 0x0a,
    0xf5, 0x26, 0x28, 0x05, 0x85, 0x03, 0x22, 0xab, 0x9b, 0x65, 0x68, 0x5b, 0x88, 0x42, 0x0a,
    0x6c, 0x62, 0xd3, 0x2d, 0x96, 0x14, 0xa0, 0x22, 0xa8, 0x76, 0x60, 0x73, 0x51, 0x11, 0x4b,
    0x4e, 0x70, 0x69, 0x21, 0xb8, 0x03, 0x61, 0x0a, 0xe3, 0xdb, 0xad, 0x82, 0x0a, 0xfb, 0x3c,
    0x6e, 0x5c, 0x5a, 0x7e, 0x40, 0x82, 0xa4, 0x95, 0x59, 0x0e, 0xc0, 0x3e, 0x16, 0xd3, 0x40,
    0x5e, 0xb6, 0x24, 0x68, 0xa0, 0x80, 0xa3, 0x97, 0x0c, 0x93, 0x17, 0x91, 0x28, 0xfa, 0xd8,
    0x72, 0x3f, 0x70, 0x8f, 0xd0, 0x55, 0xd8, 0x15, 0x4d, 0x17, 0xca, 0xc2, 0xed, 0x28, 0xf0,
    0x86, 0x32, 0x80, 0xc9, 0xca, 0xc0, 0x06, 0x80, 0x64, 0x26, 0xfc, 0x26, 0xa0, 0xa9, 0x44,
    0x06, 0xd2, 0x48, 0x39, 0x61, 0x1c, 0x28, 0x1c, 0x27, 0xea, 0x1b, 0x34, 0x21, 0xa7, 0xd9,
    0x26, 0xd9, 0x18, 0x5a, 0x39, 0x9e, 0x02, 0xa7, 0x10, 0xf5, 0x5d, 0xe8, 0x2c, 0x0e, 0x49,
    0xa0, 0x5a, 0x30, 0x0c, 0x22, 0xe8, 0x65, 0x7e, 0xce, 0xe7, 0xf5, 0xb1, 0xd2, 0x53, 0x83,
    0xf8, 0x57, 0xd9, 0x2c, 0xf9, 0x24, 0xf5, 0x90, 0x9b, 0xe5, 0xdc, 0x51, 0xf3, 0xd2, 0x6a,
    0x7c, 0xec, 0x06, 0x5a, 0x3e, 0x39, 0xa6, 0x90, 0x90, 0x53, 0x90, 0x2e, 0x34, 0x8c, 0x31,
    0x78, 0x38, 0x05, 0x39, 0x88, 0xae, 0x89, 0x70, 0x7d, 0xe0, 0x16, 0xe4, 0x13, 0x0c, 0x61,
    0xd4, 0xa4, 0xeb, 0x20, 0x11, 0x8d, 0x44, 0xd5, 0xb0, 0x91, 0x9a, 0xa8, 0x73, 0xa0, 0x90,
    0x3c, 0x1e, 0x14, 0xb3, 0xbe, 0x87, 0xaa, 0x5c, 0xda, 0xf8, 0x85, 0x33, 0x3e, 0x2b, 0x03,
    0x64, 0x8d, 0xfe, 0x34, 0x01, 0xa5, 0xc0, 0x29, 0x5b, 0xaa, 0x71, 0x60, 0x63, 0xa5, 0x39,
    0x1e, 0xf6, 0xa5, 0x27, 0xa2, 0x5a, 0x8a, 0x05, 0x6d, 0xa8, 0x16, 0x3c, 0xbf, 0x0f, 0x7c,
    0x10, 0x8a, 0x0c, 0xb5, 0x7e, 0x0c, 0x5d, 0x87, 0x4a, 0x6d, 0xa7, 0x79, 0x1f, 0x74, 0x87,
    0x1e, 0xca, 0xef, 0x20, 0xee, 0x22, 0xe4, 0x04, 0x4f, 0x8a, 0x02, 0x75, 0x44, 0x7a, 0x7c,
    0xad, 0x50, 0xb3, 0x4c, 0xe6, 0xee, 0x41, 0x6b, 0x61, 0x3a, 0x2a, 0xa8, 0x95, 0xa9, 0x7b,
    0xf7, 0x3e, 0x07, 0x62, 0x0e, 0x80, 0x14, 0xf7, 0x3b, 0x2f, 0xcb, 0x59, 0x7b, 0x56, 0xd1,
    0x52, 0x91, 0xa6, 0xb0, 0xf7, 0x5a, 0x2d, 0x43, 0x25, 0x1e, 0x82, 0x00, 0x26, 0x31, 0x28,
    0x2a, 0xce, 0x42, 0xdf, 0x0d, 0x89, 0x8f, 0x6e, 0x13, 0xac, 0x17, 0x91, 0xf3, 0x91, 0x47,
    0xfa, 0x0c, 0xa5, 0xc0, 0x24, 0x3a, 0x2f, 0x08, 0x85, 0x74, 0xca, 0xd2, 0x42, 0x58, 0x88,
    0x69, 0xf5, 0x41, 0x53, 0xa4, 0x75, 0x97, 0xd9, 0x07, 0xfc, 0xbf, 0xc0, 0x04, 0x1a, 0x31,
    0xb1, 0x72, 0x08, 0x2e, 0x25, 0xb4, 0x66, 0x98, 0x2c, 0xed, 0x0a, 0xa5, 0xd3, 0x34, 0xe3,
    0xd4, 0x54, 0xe1, 0x60, 0x73, 0x73, 0x5a, 0x17, 0xf5, 0xc8, 0x46, 0xca, 0x12, 0x62, 0xfa,
    0xf2, 0x09, 0x6f, 0x45, 0xfb, 0x5a, 0x26, 0xd1, 0xab, 0x86, 0x1a, 0x29, 0x71, 0x81, 0x41,
    0xa4, 0x1b, 0xf8, 0xb8, 0x5e, 0x9e, 0x92, 0x95, 0xa7, 0x1e, 0xc7, 0xa4, 0x2f, 0xa5, 0x1b,
    0x45, 0x1a, 0xaf, 0x30, 0x4d, 0xfc, 0x4e, 0x11, 0xa1, 0x3c, 0x56, 0xc5, 0x8f, 0x98, 0x1e,
    0x04, 0x5e, 0x1e, 0xe7, 0x29, 0x08, 0xef, 0xd8, 0x4d, 0xae, 0x51, 0xf5, 0x25, 0x85, 0x77,
    0x5c, 0x2e, 0x9e, 0x06, 0xc3, 0x88, 0x74, 0x3f, 0xb0, 0x22, 0xce, 0x11, 0x11, 0x76, 0x21,
    0xa2, 0xb2, 0xaa, 0x1c, 0x03, 0xbd, 0x5d, 0x66, 0xca, 0x6a, 0xad, 0x32, 0x2f, 0xc2, 0x33,
    0xb5, 0x1e, 0xb6, 0x92, 0xc0, 0x47, 0x5d, 0x1e, 0x93, 0x80, 0xa8, 0x1f, 0xc7, 0x33, 0x9d,
    0x11, 0x80, 0xe9, 0x73, 0xe0, 0x27, 0x70, 0x19, 0x39, 0x69, 0x72, 0x00, 0x6d, 0xf6, 0x53,
    0x61, 0xca, 0x7f, 0xcf, 0x81, 0x7f, 0x42, 0xec, 0xd6, 0x8b, 0x81, 0xde, 0xc2, 0x5c, 0xa3,
    0x6b, 0x88, 0x9f, 0x50, 0x44, 0x4e, 0x8d, 0xbd, 0x42, 0xb7, 0x0a, 0xbb, 0xdd, 0xd3, 0xc3,
    0x9e, 0x15, 0x3b, 0xcf, 0x85, 0x71, 0x95, 0xbc, 0xba, 0x30, 0x98, 0x31, 0xc4, 0xcc, 0xd4,
    0x1c, 0xac, 0x24, 0x33, 0x08, 0xc4, 0x50, 0x85, 0x00, 0x66, 0xf2, 0xe2, 0xc8, 0x2f, 0x00,
    0x10, 0x46, 0x09, 0x1e, 0xde, 0x84, 0x67, 0x40, 0x19, 0xc5, 0x7e, 0xa0, 0xfa, 0x42, 0xff,
    0x40, 0x5f, 0x23, 0x8a, 0xa3, 0x6d, 0x9a, 0xf9, 0x14, 0x46, 0x8c, 0x5f, 0xb7, 0xc1, 0xeb,
    0x86, 0x18, 0x38, 0xc5, 0x53, 0x37, 0xcc, 0xa6, 0xdb, 0x83, 0x84, 0xc3, 0xb7, 0x00, 0x1c,
    0x9b, 0xd8, 0x43, 0x45, 0x3e, 0x67, 0xcd, 0x65, 0xfc, 0x87, 0x1d, 0xaa, 0x68, 0x0b, 0x6a,
    0x8c, 0x4d, 0x90, 0x8f, 0xe7, 0x34, 0x5d, 0xa1, 0xce, 0x27, 0x79, 0x1f, 0xea, 0x02, 0x15,
    0x51, 0x27, 0xa1, 0x0b, 0x8c, 0xae, 0xef, 0x00, 0x66, 0x61, 0x6a, 0x53, 0xba, 0x23, 0x1d,
    0x33, 0x6e, 0x33, 0xdd, 0x7c, 0xad, 0x8b, 0xc9, 0x59, 0x9e, 0xeb, 0x71, 0x81, 0x39, 0x27,
    0x22, 0x26, 0xa8, 0x6e, 0x4c, 0xd0, 0x3b, 0x17, 0x95, 0xee, 0xff, 0x83, 0xd9, 0xd9, 0x84,
    0x7c, 0x92, 0xa1, 0x80, 0xe1, 0xaa, 0x87, 0x72, 0x91, 0x00, 0x60, 0x2a, 0x02, 0xa2, 0x2d,
    0x11, 0x63, 0x35, 0x66, 0x0f, 0xdc, 0x75, 0x68, 0x6c, 0xe4, 0xde, 0x70, 0xf2, 0xf2, 0x14,
    0x8a, 0xa3, 0xe3, 0xc1, 0x00, 0xfd, 0x3c, 0x30, 0x02, 0x3c, 0x04, 0xf5, 0x2b, 0xfe, 0x0b,
    0x25, 0x4e, 0x32, 0x31, 0x31, 0x5a, 0x0f, 0x48, 0x47, 0x59, 0x7a, 0x85, 0xa4, 0x66, 0xd4,
    0x90, 0x04, 0x62, 0x8e, 0x54, 0xaf, 0xee, 0x64, 0x12, 0x62, 0xb8, 0x19, 0x47, 0x30, 0xe9,
    0x65, 0xd4, 0x5d, 0x12, 0x9a, 0x17, 0xba, 0x01, 0xd0, 0x5b, 0x94, 0x35, 0x06, 0x07, 0x54,
    0x46, 0x4c, 0xea, 0x6a, 0xbd, 0x19, 0x81, 0xf4, 0xa6, 0xa9, 0x9b, 0x04, 0x24, 0x9d, 0x83,
    0x73, 0x8f, 0x32, 0xa2, 0xe1, 0x81, 0xb2, 0x7d, 0xa6, 0xe0, 0x6f, 0xa6, 0x5b, 0x10, 0x06,
    0x11, 0x97, 0x16, 0x11, 0xd4, 0x1f, 0x78, 0x24, 0xda, 0xab, 0xa7, 0x6a, 0xb3, 0x15, 0xd4,
    0x44, 0x84, 0x2b, 0xad, 0x2d, 0xc0, 0x17, 0x4e, 0x5e, 0x19, 0x9c, 0xec, 0xe2, 0x16, 0xa7,
    0xd9, 0xba, 0x1a, 0xeb, 0x0d, 0x70, 0xfe, 0x75, 0x2c, 0x94, 0x82, 0xa6, 0x42, 0x9e, 0xd6,
    0x92, 0x05, 0x43, 0x01, 0xc1, 0x1d, 0xba, 0xf8, 0x98, 0x94, 0x9c, 0x0c, 0xdc, 0x37, 0x0b,
    0xa5, 0x7d, 0xeb, 0x24, 0x4e, 0xd3, 0x6d, 0x22, 0x18, 0x0e, 0xc3, 0x8b, 0x73, 0xf4, 0x9f,
    0x77, 0x98, 0x79, 0x97, 0x85, 0xee, 0x6d, 0x9a, 0x07, 0x19, 0x0e, 0x35, 0xe4, 0x43, 0x61,
    0x80, 0x62, 0x0a, 0x7c, 0xe1, 0x13, 0xcc, 0x68, 0xc5, 0x87, 0x14, 0x1c, 0xd9, 0x04, 0x01,
    0x95, 0xa1, 0x76, 0xd1, 0x8e, 0x57, 0x4c, 0xce, 0x54, 0x0d, 0x4b, 0xcd, 0xc7, 0x98, 0x3c,
    0x68, 0x46, 0xb8, 0x62, 0x65, 0x4e, 0x54, 0x2e, 0x93, 0x0a, 0x46, 0xa5, 0xa4, 0xa8, 0x40,
    0x90, 0x31, 0x69, 0xf2, 0x94, 0x57, 0x25, 0xac, 0x03, 0x8a, 0x28, 0xce, 0x9e, 0xe2, 0x15,
    0x55, 0x0e, 0x9b, 0x0f, 0x37, 0x15, 0xf3, 0x69, 0xea, 0x42, 0x6b, 0x18, 0x27, 0xfa, 0x42,
    0x34, 0x6a, 0xec, 0x8c, 0x9b, 0x99, 0xa1, 0x1a, 0x75, 0x3d, 0x76, 0xa7, 0x85, 0x66, 0x9b,
    0x42, 0xa0, 0x07, 0x03, 0xe5, 0xdb, 0x94, 0xf4, 0xd1, 0x03, 0x5e, 0x1e, 0x4d, 0x09, 0xba,
    0xd0, 0x59, 0x0e, 0x4a, 0x8e, 0xf8, 0x08, 0x3d, 0x1a, 0xf8, 0x1b, 0x6b, 0x8b, 0x5c, 0x0e,
    0x85, 0x09, 0xbf, 0x47, 0x93, 0x55, 0x8b, 0x50, 0x88, 0x08, 0x52, 0xb0, 0xd6, 0x98, 0x73,
    0xcb, 0x83, 0x38, 0x84, 0x98, 0x48, 0xd8, 0x77, 0xa5, 0xbb, 0x5e, 0x28, 0x3b, 0xbb, 0xe9,
    0x89, 0x91, 0xe6, 0xc0, 0x69, 0x43, 0xc4, 0x8b, 0xf0, 0x44, 0xbc, 0x01, 0xd3, 0x1a, 0xc0,
    0x51, 0x69, 0x99, 0xae, 0xaf, 0x8e, 0x0e, 0xf1, 0x9a, 0x1b, 0xa8, 0x4b, 0xf6, 0x61, 0x36,
    0xf8, 0x81, 0xcc, 0xa8, 0xea, 0xb3, 0x6f, 0xf4, 0x29, 0x12, 0x37, 0x85, 0x2b, 0x8d, 0x71,
    0xc6, 0xef, 0x22, 0xa9, 0x93, 0x20, 0x0b, 0x41, 0xf8, 0x10, 0x44, 0xc8, 0x27, 0x22, 0x7a,
    0x8d, 0xee, 0x69, 0x61, 0x57, 0xb1, 0x34, 0xb6, 0x89, 0xa1, 0xfb, 0x90, 0x88, 0xc1, 0x45,
    0xe5, 0x9e, 0x3d, 0xa3, 0xe7, 0x84, 0x67, 0x20, 0x60, 0x55, 0xe5, 0x37, 0x1b, 0x21, 0x3c,
    0x07, 0x80, 0x68, 0x76, 0x70, 0x46, 0xc7, 0xba, 0xc3, 0x82, 0x21, 0xaa, 0x28, 0x61, 0x85,
    0xac, 0x4a, 0xee, 0xae, 0xa2, 0x5a, 0xf4, 0x39, 0xfa, 0x4d, 0x55, 0xc3, 0x99, 0x20, 0x16,
    0x0a, 0x71, 0x93, 0x63, 0x13, 0x29, 0x88, 0x05, 0x78, 0x66, 0x55, 0x2a, 0x5e, 0x85, 0xe7,
    0xb4, 0xa7, 0x6a, 0x83, 0xc0, 0xf9, 0x31, 0x39, 0xb4, 0xb8, 0xc6, 0xe5, 0xe2, 0x10, 0x63,
    0x71, 0x49, 0x56, 0x18, 0x2e, 0x31, 0x92, 0x79, 0x53, 0x5d, 0x26, 0x9a, 0xbf, 0x85, 0x4a,
    0xcf, 0xbf, 0x0c, 0xfc, 0x70, 0xaa, 0x2b, 0xc7, 0x27, 0x17, 0xbd, 0xbd, 0x83, 0x0a, 0x08,
    0x5d, 0x46, 0xf4, 0x46, 0xb1, 0x93, 0x7d, 0xa0, 0xcb, 0x6d, 0xf4, 0x63, 0x4a, 0x97, 0xa1,
    0x16, 0x48, 0xca, 0x1c, 0x65, 0x69, 0xbe, 0x8c, 0xa6, 0x54, 0xe8, 0xe9, 0xc2, 0x1c, 0xba,
    0xc5, 0x98, 0x05, 0xd3, 0xf1, 0x85, 0x64, 0x45, 0xa5, 0xe4, 0x62, 0x9e, 0xd7, 0x68, 0x46,
    0x35, 0xd2, 0x0c, 0x62, 0x20, 0x34, 0x84, 0xea, 0x32, 0x74, 0x35, 0x9a, 0x59, 0x4c, 0xe1,
    0x74, 0x25, 0x66, 0x83, 0x36, 0x42, 0xee, 0xa6, 0x18, 0x4e, 0x99, 0x59, 0x7a, 0x59, 0xa5,
    0x56, 0x70, 0x8c, 0xa0, 0xd3, 0x17, 0x0a, 0xa6, 0xab, 0x30, 0x16, 0xb4, 0x2e, 0x28, 0x54,
    0xaa, 0xf4, 0x41, 0x0c, 0x3f, 0x98, 0xca, 0xbc, 0xc4, 0x64, 0xa6, 0x5c, 0x97, 0x13, 0x50,
    0x18, 0x14, 0x7a, 0x06, 0x4d, 0xe6, 0xb0, 0xb0, 0x80, 0xf3, 0xed, 0xc7, 0x49, 0x75, 0x9e,
    0xae, 0xf2, 0xf5, 0x8c, 0x2c, 0x97, 0x8c, 0x0d, 0x16, 0x50, 0x69, 0x30, 0x23, 0x29, 0xe4,
    0x40, 0x04, 0x28, 0x26, 0x0b, 0x1a, 0x4c, 0xfc, 0x6d, 0x1c, 0xe4, 0x54, 0xcf, 0x4d, 0x84,
    0x39, 0x08, 0x98, 0xd1, 0xb1, 0xe0, 0x2e, 0x04, 0xa1, 0x17, 0x23, 0x11, 0x85, 0xa1, 0xfe,
    0x27, 0xb3, 0x31, 0xdf, 0xe4, 0x3c, 0x88, 0x50, 0x5a, 0x27, 0xf9, 0x20, 0x86, 0x28, 0x82,
    0xf4, 0x50, 0xca, 0x70, 0xa4, 0x6c, 0x91, 0xc6, 0x9a, 0x96, 0x72, 0xf3, 0xda, 0x6c, 0xb8,
    0x8f, 0x9f, 0x13, 0x8c, 0x77, 0x4c, 0x8e, 0x34, 0x5a, 0x51, 0xd0, 0x25, 0x85, 0x96, 0x91,
    0xaa, 0xa0, 0x7e, 0x0a, 0x13, 0x61, 0x8e, 0x89, 0xe2, 0x29, 0x4c, 0x6f, 0xf8, 0x3e, 0x8f,
    0x7c, 0xac, 0xdc, 0xd6, 0x12, 0xc7, 0x28, 0xc5, 0x22, 0xe2, 0x3f, 0x35, 0x9d, 0xb3, 0x3a,
    0x08, 0xac, 0x92, 0x18, 0x40, 0x86, 0x85, 0xc2, 0x44, 0xd9, 0x2a, 0x88, 0x99, 0x84, 0x1f,
    0xe4, 0xb3, 0xfc, 0x27, 0x08, 0x73, 0xdf, 0xba, 0xc5, 0x42, 0x12, 0x15, 0x51, 0x05, 0xb9,
    0x94, 0xac, 0x17, 0x0e, 0xc0, 0x4c, 0xe2, 0xcb, 0x98, 0x0a, 0x6c, 0x44, 0x8e, 0xc3, 0x84,
    0x29, 0xb9, 0x00, 0xbd, 0xd6, 0x92, 0x97, 0xbb, 0xc0, 0x83, 0x2f, 0x52, 0x7b, 0x0b, 0x96,
    0x44, 0x33, 0xc6, 0x5a, 0x51, 0x3c, 0x58, 0x80, 0xa6, 0x5a, 0x88, 0xcd, 0x80, 0x82, 0xc5,
    0x3d, 0xa1, 0x88, 0x99, 0x9d, 0xd3, 0xa2, 0x44, 0xed, 0x61, 0xd7, 0x46, 0x36, 0xaf, 0x00,
    0xb7, 0x5a, 0x55, 0xb2, 0xc2, 0xda, 0xeb, 0xc6, 0x5c, 0x32, 0xb9, 0xd2, 0xc8, 0x47, 0xa5,
    0x8c, 0x8e, 0x54, 0x66, 0x22, 0x81, 0xd2, 0x84, 0x34, 0x29, 0xd8, 0x91, 0x2b, 0x01, 0x22,
    0x2d, 0xbc, 0xc0, 0xb4, 0xc6, 0x2e, 0x23, 0xb0, 0xa2, 0x29, 0x4d, 0x1a, 0xbf, 0x83, 0x8e,
    0x00, 0xc3, 0x5f, 0x6a, 0xd1, 0x58, 0x20, 0xd1, 0xf9, 0x8d, 0xe9, 0xac, 0x17, 0x69, 0x24,
    0x8c, 0x34, 0xd6, 0xbd, 0xa9, 0xab, 0xc2, 0xd3, 0xc7, 0x1e, 0x67, 0x13, 0x39, 0xc2, 0xd5,
    0x9b, 0xd9, 0xe7, 0x55, 0x42, 0x33, 0xe9, 0x66, 0x11, 0x4c, 0x83, 0x61, 0x44, 0x13, 0xc2,
    0xf5, 0xd5, 0xea, 0xa3, 0xa8, 0x7f, 0x1c, 0x67, 0x58, 0x49, 0xaf, 0xde, 0x90, 0x7d, 0xe9,
    0x22, 0x28, 0x43, 0xb1, 0x1d, 0x52, 0x78, 0x87, 0x66, 0x84, 0xa0, 0xa5, 0x39, 0x98, 0x83,
    0xfb, 0x5c, 0x2c, 0x04, 0xa1, 0x18, 0x18, 0x53, 0x22, 0x3b, 0x12, 0xde, 0x85, 0x48, 0x90,
    0x15, 0x75, 0x48, 0x34, 0x84, 0x98, 0x8e, 0x18, 0x7f, 0x2a, 0x25, 0x84, 0x22, 0x32, 0x7e,
    0x3d, 0x43, 0xc5, 0x93, 0xe2, 0xd5, 0x04, 0x49, 0xf8, 0xd0, 0x4d, 0xc4, 0xba, 0xd2, 0x6c,
    0x21, 0xd7, 0x02, 0x5a, 0xa0, 0x0a, 0x95, 0x03, 0x92, 0xa2, 0x5a, 0x34, 0xfc, 0x68, 0x3f,
    0xcd, 0x99, 0x09, 0x97, 0xdb, 0x58, 0x11, 0x42, 0xc2, 0xcb, 0x05, 0x35, 0xe1, 0xbe, 0xa8,
    0x0c, 0xdc, 0x09, 0x6e, 0x78, 0x34, 0x98, 0xf5, 0x12, 0x2f, 0x1c, 0x30, 0xf9, 0x15, 0x30,
    0x1e, 0x16, 0x85, 0x15, 0xd3, 0x2a, 0xc4, 0x8a, 0x53, 0x8a, 0x30, 0x35, 0xe1, 0xbf, 0xe7,
    0x5c, 0x3d, 0x42, 0x83, 0x9e, 0xc2, 0x9c, 0xa0, 0x49, 0xa7, 0x29, 0x05, 0xc3, 0x1f, 0x8f,
    0x79, 0x1a, 0xd1, 0x00, 0x95, 0xc5, 0x8b, 0x06, 0x7d, 0x39, 0x15, 0x3a, 0xe8, 0xc0, 0x4c,
    0x5c, 0x7e, 0x56, 0x49, 0x93, 0x9a, 0x37, 0x69, 0x0d, 0x16, 0x98, 0x00, 0x41, 0xa9, 0x76,
    0xed, 0x07, 0x29, 0x85, 0x4e, 0xb8, 0x68, 0x3b, 0x60, 0x57, 0xe0, 0x7f, 0x02, 0x5d, 0xa6,
    0x08, 0x34, 0xd4, 0xfe, 0x54, 0x04, 0xb0, 0x14, 0x79, 0x63, 0x88, 0x55, 0xa8, 0x01, 0x9a,
    0x0a, 0x5e, 0x8a, 0x2c, 0x58, 0xb5, 0x98, 0x30, 0x29, 0xfb, 0x69, 0x01, 0x75, 0x13, 0xb1,
    0xd2, 0x60, 0x36, 0x44, 0x35, 0x4b, 0x63, 0xfa, 0xb2, 0x34, 0xb9, 0x5b, 0x98, 0xd7, 0x02,
    0x5f, 0xd9, 0x3d, 0x67, 0xbd, 0xf3, 0x0a, 0x7b, 0xb9, 0x7b, 0xde, 0x3b, 0x57, 0xc4, 0xbd,
    0x5d, 0x1c, 0x9d, 0x5c, 0x5e, 0xb0, 0xab, 0xdd, 0xb3, 0xb3, 0xdd, 0xe3, 0x8b, 0xde, 0xc1,
    0x3b, 0x39, 0x33, 0x97, 0xe5, 0x4f, 0x0e, 0xd9, 0xee, 0xf1, 0x47, 0xf6, 0x53, 0xef, 0x78,
    0xdc, 0x9d, 0x40, 0xac, 0x00, 0xdf, 0x61, 0x76, 0x34, 0x2d, 0x46, 0x12, 0x90, 0x5e, 0xf1,
    0x34, 0x69, 0x21, 0x41, 0x94, 0x27, 0x75, 0x95, 0x9e, 0x9a, 0x42, 0x90, 0x4b, 0xa4, 0xa2,
    0x28, 0x99, 0x57, 0xb1, 0x40, 0xcc, 0x8b, 0xde, 0xc5, 0x9b, 0x83, 0x2a, 0x50, 0xfd, 0x78,
    0x77, 0x7c, 0x78, 0xd6, 0x3b, 0x7e, 0x75, 0xf0, 0xf6, 0xe0, 0xf8, 0xa2, 0xca, 0xde, 0x1e,
    0xed, 0x1d, 0x01, 0xca, 0xdd, 0x97, 0xbd, 0x37, 0xbd, 0x8b, 0x8f, 0xc4, 0x42, 0x87, 0xbd,
    0xe3, 0x83, 0x73, 0xb1, 0x7d, 0x60, 0x57, 0xb6, 0xf1, 0x6e, 0xf7, 0x0c, 0x26, 0xec, 0xf2,
    0xee, 0x19, 0x7b, 0x77, 0x79, 0xf6, 0xee, 0xe4, 0xfc, 0x40, 0x58, 0x5b, 0xb1, 0x5a, 0x18,
    0xca, 0x02, 0xe0, 0x9f, 0x40, 0xa7, 0x01, 0xad, 0x3a, 0xd0, 0xca, 0x8c, 0x88, 0x0a, 0xcb,
    0x02, 0x33, 0x97, 0xc4, 0x93, 0x24, 0x40, 0xf7, 0x9c, 0x06, 0x3c, 0x00, 0xee, 0xc2, 0x22,
    0x7f, 0x85, 0xc6, 0x35, 0xf2, 0xa5, 0x22, 0xdb, 0x98, 0xe2, 0x96, 0x4f, 0x1c, 0xae, 0x52,
    0x41, 0x4a, 0x9a, 0x3d, 0x8d, 0xbd, 0x40, 0x87, 0xc9, 0x42, 0xa9, 0xcb, 0x75, 0x56, 0xca,
    0x9a, 0x0b, 0xad, 0xf3, 0xc1, 0xac, 0xe0, 0xbd, 0x4e, 0x0d, 0xbe, 0x2b, 0x92, 0x62, 0xa5,
    0x81, 0xdb, 0x0f, 0x42, 0x5a, 0x3c, 0xef, 0xa1, 0xe5, 0x65, 0xe0, 0xfe, 0x44, 0x19, 0xe1,
    0x6d, 0xc0, 0xad, 0x90, 0x92, 0x9d, 0x80, 0x11, 0x22, 0x6d, 0x23, 0xd5, 0xa2, 0x56, 0xb2,
    0x81, 0x32, 0x33, 0x65, 0x10, 0xf1, 0x61, 0x18, 0x80, 0xf7, 0xe5, 0xf1, 0xad, 0xaa, 0x5e,
    0xae, 0x96, 0x52, 0xb9, 0x3a, 0xf3, 0xf3, 0x28, 0xbf, 0x6f, 0x0a, 0x47, 0x01, 0x73, 0xfa,
    0xd0, 0x27, 0x87, 0x8e, 0xc0, 0x0d, 0x31, 0x1f, 0xa1, 0xd7, 0x2d, 0x54, 0x97, 0x19, 0xee,
    0x48, 0x69, 0x75, 0x7c, 0xb1, 0x7c, 0x08, 0xed, 0x59, 0x32, 0x1f, 0x98, 0x94, 0x51, 0x53,
    0x06, 0xd4, 0xb1, 0xcc, 0x08, 0xd0, 0xd4, 0xba, 0x63, 0x7c, 0xfd, 0xc6, 0xcc, 0xe1, 0x63,
    0xb5, 0x25, 0xa0, 0xd8, 0x1c, 0x90, 0x4e, 0x38, 0xae, 0xad, 0x1b, 0xab, 0xcf, 0x20, 0x50,
    0xd8, 0x8a, 0xa5, 0x04, 0x74, 0x60, 0x44, 0x4e, 0x17, 0x17, 0xe4, 0x64, 0xa3, 0x4a, 0x43,
    0xce, 0x0d, 0x70, 0x63, 0xba, 0x3a, 0x11, 0x6b, 0xe6, 0x68, 0xc5, 0xb5, 0xad, 0xc6, 0x55,
    0xd9, 0x40, 0x97, 0xa8, 0x99, 0x6b, 0x1d, 0x93, 0x8b, 0x3b, 0x41, 0x24, 0x27, 0xd3, 0xd0,
    0x66, 0xc6, 0x60, 0xf3, 0xc1, 0x35, 0x71, 0x85, 0x0a, 0x87, 0x1d, 0xc6, 0x82, 0x61, 0x87,
    0xec, 0xdf, 0x06, 0xa1, 0x99, 0x3b, 0xbc, 0x06, 0xa3, 0x1c, 0x4f, 0xf0, 0x0d, 0xaa, 0x2a,
    0x04, 0x39, 0x02, 0x1f, 0xb8, 0x41, 0x98, 0x27, 0xc2, 0x1a, 0xb9, 0xe1, 0x20, 0x8f, 0x0a,
    0x86, 0x8c, 0xe0, 0x82, 0x9d, 0x20, 0xb8, 0x0a, 0x80, 0xcc, 0x6b, 0xd2, 0x43, 0x74, 0xcc,
    0x60, 0x1c, 0xe4, 0x43, 0x74, 0xd0, 0x67, 0x13, 0x71, 0xb2, 0x0d, 0x9d, 0x4c, 0x77, 0xfd,
    0x80, 0x16, 0x49, 0x07, 0x72, 0xfb, 0x06, 0x48, 0x80, 0x24, 0x82, 0xda, 0xdc, 0x20, 0x9b,
    0x12, 0xd0, 0xad, 0xb1, 0x5d, 0x0f, 0x6d, 0x02, 0x52, 0x41, 0x69, 0x5e, 0xec, 0x79, 0xb7,
    0xd4, 0x86, 0x50, 0x5c, 0x8d, 0xd0, 0x75, 0x2f, 0x8b, 0xeb, 0xec, 0x62, 0xe1, 0x83, 0xcb,
    0xca, 0x0b, 0xf5, 0x46, 0x71, 0x2c, 0xb2, 0xa0, 0x94, 0xe9, 0x2c, 0x2d, 0xb6, 0x53, 0xce,
    0xfc, 0xb6, 0x01, 0x27, 0x7d, 0x02, 0xaa, 0x8e, 0x10, 0xba, 0x91, 0xc7, 0xc5, 0x20, 0x26,
    0x0d, 0x2a, 0xb5, 0xdf, 0x94, 0xf8, 0x8e, 0x8f, 0x23, 0xdc, 0x5a, 0x52, 0x24, 0xc4, 0x04,
    0x43, 0x85, 0x9d, 0xc5, 0xfd, 0x50, 0x66, 0xa1, 0xc8, 0x6f, 0xd9, 0x41, 0xb5, 0x83, 0x9e,
    0x58, 0x6a, 0x81, 0xf1, 0xa0, 0xbc, 0xc8, 0xf8, 0x2a, 0x50, 0x1a, 0x54, 0x07, 0x18, 0x47,
    0x2d, 0x46, 0x42, 0x22, 0x94, 0xd4, 0x04, 0x23, 0x7a, 0x1a, 0x0d, 0x17, 0xe3, 0xa3, 0x1d,
    0x51, 0x68, 0xac, 0x86, 0x68, 0x9f, 0x5b, 0x2e, 0x8b, 0x50, 0x12, 0x57, 0xde, 0x46, 0x45,
    0xa8, 0x51, 0xc2, 0x4b, 0x9e, 0x4e, 0xb1, 0x8a, 0x52, 0x68, 0xf4, 0x22, 0x53, 0x64, 0xb0,
    0xcc, 0x09, 0x63, 0xcc, 0x14, 0x0c, 0x84, 0x7e, 0x46, 0x81, 0x17, 0xf2, 0x4e, 0xb4, 0x19,
    0xda, 0xf8, 0x7c, 0x00, 0xe1, 0x8a, 0xa8, 0x01, 0x9e, 0xb1, 0xbf, 0x20, 0x75, 0xee, 0x26,
    0xd2, 0x44, 0xca, 0xb9, 0xd6, 0x54, 0x2c, 0xc4, 0x39, 0x4f, 0x92, 0x62, 0xb5, 0x4c, 0x66,
    0x71, 0xe3, 0x73, 0x82, 0xe2, 0x23, 0x93, 0xa8, 0xd5, 0xf9, 0xbc, 0x71, 0x7f, 0x2a, 0x9d,
    0x62, 0x40, 0x53, 0xa4, 0x40, 0x41, 0x53, 0xed, 0xcc, 0xdf, 0x1a, 0xdc, 0x68, 0xb8, 0x8d,
    0x8b, 0x60, 0xe0, 0x83, 0xe3, 0x7d, 0xb4, 0xab, 0x8b, 0xb6, 0xc1, 0xd1, 0xf3, 0xdd, 0x77,
    0xa0, 0x48, 0xef, 0xc3, 0x0b, 0x9c, 0x42, 0xca, 0x16, 0x80, 0x46, 0x9d, 0xca, 0xed, 0x0b,
    0xd6, 0x3d, 0x7c, 0x46, 0x50, 0x6e, 0xf5, 0x5a, 0x12, 0x5c, 0x17, 0x4b, 0x56, 0xa8, 0xca,
    0x14, 0xe5, 0x6c, 0x82, 0x72, 0xab, 0x63, 0x90, 0x9a, 0x04, 0xc2, 0xf0, 0x4c, 0x65, 0x35,
    0x45, 0x24, 0x3f, 0x08, 0x78, 0xe8, 0xa7, 0x0c, 0x0c, 0x04, 0x08, 0xbb, 0x50, 0xfa, 0x7d,
    0xa5, 0xe4, 0xc0, 0x99, 0x95, 0x9f, 0x7f, 0xa9, 0x68, 0xc5, 0x47, 0x99, 0x09, 0x69, 0xed,
    0x8a, 0x99, 0x48, 0xab, 0xca, 0xa8, 0xcf, 0x88, 0xa4, 0x6b, 0x6c, 0x73, 0x3f, 0x8e, 0xfe,
    0xef, 0x17, 0x30, 0x64, 0x54, 0x35, 0xfe, 0xef, 0x5b, 0x8c, 0xa2, 0x75, 0x0a, 0x53, 0x53,
    0x2f, 0x80, 0x13, 0xc0, 0xc5, 0xd7, 0x38, 0x64, 0x74, 0x60, 0x98, 0x6d, 0x63, 0x6d, 0x16,
    0x25, 0x9d, 0x82, 0x3e, 0xbf, 0xd3, 0x0b, 0xa1, 0x14, 0xd4, 0x0b, 0x00, 0xa0, 0x27, 0xa0,
    0x98, 0xe2, 0x02, 0x95, 0x28, 0x2d, 0xf3, 0xa4, 0x4a, 0x8b, 0x53, 0x59, 0xc1, 0x37, 0xc0,
    0xe8, 0xb1, 0x8a, 0xb0, 0xab, 0x78, 0x9f, 0x95, 0x2c, 0xb8, 0x5c, 0x5a, 0xed, 0xf3, 0x62,
    0x0a, 0xad, 0x90, 0x2a, 0x24, 0x29, 0x56, 0xac, 0xd0, 0x46, 0x67, 0x78, 0x44, 0x6f, 0xb1,
    0xad, 0x28, 0xaf, 0x7c, 0xca, 0xcd, 0x2f, 0x08, 0x13, 0x18, 0x2f, 0xd0, 0xeb, 0xf1, 0x92,
    0x6a, 0xdd, 0x55, 0xa7, 0x67, 0x8a, 0x24, 0x87, 0x9b, 0x78, 0x23, 0x5c, 0xb1, 0x16, 0xcc,
    0x2c, 0x26, 0x3a, 0x96, 0xdd, 0x61, 0xbb, 0xfa, 0x7d, 0xdc, 0x2a, 0xb8, 0x0a, 0x5e, 0x4d,
    0x76, 0xbb, 0x03, 0x18, 0x1c, 0x52, 0x0b, 0xbc, 0xfe, 0x5d, 0x30, 0xae, 0x67, 0x42, 0xc7,
    0x71, 0xf4, 0xd8, 0x55, 0xe2, 0x5b, 0x72, 0x90, 0x6f, 0x04, 0x54, 0x65, 0xde, 0xaa, 0x9a,
    0x45, 0xd9, 0x26, 0x16, 0xd0, 0x1b, 0x32, 0xb7, 0x7e, 0xc0, 0x26, 0x54, 0xb0, 0x82, 0x5a,
    0xd8, 0x36, 0x99, 0x5b, 0x57, 0x3e, 0x7e, 0x10, 0xc9, 0x18, 0x95, 0xf4, 0xa6, 0x66, 0x37,
    0xff, 0xb0, 0x22, 0x25, 0x10, 0xf7, 0x29, 0x95, 0xe6, 0x96, 0xf2, 0x79, 0x8a, 0xcb, 0xdd,
    0xc9, 0xc2, 0x63, 0xfb, 0x51, 0xe5, 0x26, 0x69, 0x7c, 0xf3, 0x97, 0xaa, 0x2c, 0xe3, 0xbe,
    0xe7, 0x98, 0xc8, 0x0d, 0x69, 0xd8, 0x8c, 0x91, 0x6f, 0x9b, 0xdf, 0xfe, 0x84, 0x2b, 0x0a,
    0x81, 0xfb, 0xdc, 0xf3, 0x3f, 0xe9, 0x9b, 0x2b, 0xaf, 0x9c, 0xc8, 0x76, 0xce, 0x79, 0x09,
    0x92, 0x00, 0xf2, 0x79, 0x80, 0xa1, 0x60, 0x68, 0xd1, 0x30, 0x07, 0x6e, 0x04, 0x7f, 0x01,
    0x46, 0x34, 0xbb, 0xed, 0x4f, 0xa6, 0x52, 0x0a, 0x67, 0x3e, 0x9d, 0x1f, 0x57, 0xed, 0xaf,
    0xf9, 0xfc, 0x7c, 0xe1, 0xa5, 0xf6, 0xff, 0x8b, 0xa8, 0x75, 0x3d, 0x7d, 0x3c, 0x7c, 0xfe,
    0x65, 0xdb, 0xcd, 0xb9, 0xfd, 0xff, 0x76, 0xeb, 0xf9, 0xfc, 0x87, 0x6f, 0x72, 0xe1, 0x9b,
    0x1b, 0x4f, 0xa5, 0xf9, 0xff, 0xea, 0xc1, 0x3c, 0x5f, 0x2b, 0x5f, 0x4a, 0xfe, 0x8b, 0x77,
    0x3e, 0xa7, 0x4f, 0xdd, 0xc7, 0xc3, 0xf2, 0xef, 0xd4, 0x6d, 0x7b, 0x56, 0xfe, 0xed, 0x46,
    0x7a, 0x96, 0xff, 0x6f, 0x71, 0x55, 0xd0, 0xb5, 0x42, 0xef, 0xc2, 0xcb, 0x2a, 0x3f, 0x6c,
    0x1d, 0x00, 0x35, 0xf1, 0xee, 0xca, 0x3b, 0xf1, 0x26, 0xe3, 0x74, 0x13, 0xbc, 0x04, 0x08,
    0x21, 0xf6, 0xab, 0xfc, 0xfa, 0x2b, 0x4f, 0xe5, 0x9b, 0x87, 0x55, 0xf6, 0x0f, 0x76, 0xe3,
    0x39, 0x17, 0xaf, 0x29, 0xb2, 0xaf, 0xe0, 0xb5, 0xc9, 0x82, 0x33, 0x6f, 0xc6, 0xb3, 0x1f,
    0x7a, 0x80, 0x2f, 0x00, 0xc2, 0xd7, 0x9b, 0x38, 0xf0, 0x99, 0xf5, 0xc3, 0x86, 0xf0, 0x8e,
    0xa6, 0x78, 0x9d, 0x70, 0xc4, 0xa7, 0x9b, 0x5b, 0xc6, 0xab, 0x85, 0xe2, 0x9d, 0x59, 0xd6,
    0xc8, 0x23, 0x64, 0x5f, 0x37, 0xbe, 0x6e, 0xcc, 0x34, 0x85, 0x7f, 0x54, 0x43, 0x33, 0xdd,
    0x66, 0xe4, 0x52, 0x12, 0x1e, 0xb0, 0x82, 0x4d, 0xcb, 0x37, 0x0d, 0xc5, 0x9b, 0xdb, 0x4c,
    0xa2, 0xbe, 0x59, 0xab, 0xd5, 0xe8, 0x25, 0xf3, 0xf9, 0xbe, 0xe7, 0x3b, 0x9e, 0x1b, 0x5c,
    0xc6, 0x0f, 0x1b, 0x3b, 0x3b, 0xdf, 0xc9, 0x3d, 0x9b, 0x6f, 0xc1, 0x1b, 0x04, 0xdf, 0xe8,
    0xec, 0xcd, 0x8f, 0xf8, 0xfe, 0xeb, 0x0b, 0xe9, 0x1c, 0xa2, 0x47, 0xb4, 0xf3, 0x19, 0x42,
    0x1f, 0x70, 0xbf, 0x77, 0xab, 0x51, 0xe5, 0xd3, 0xd7, 0xce, 0xa7, 0x0f, 0xaf, 0xbf, 0xb8,
    0xdd, 0xbc, 0xf7, 0x39, 0xfe, 0xf2, 0x66, 0xef, 0xf5, 0xd8, 0xbd, 0xba, 0x0b, 0xe1, 0x73,
    0x5e, 0x35, 0xaf, 0x3f, 0x7d, 0x00, 0x6f, 0x2b, 0x7a, 0x1b, 0xc0, 0xfd, 0x2f, 0xfd, 0xfa,
    0xe9, 0x47, 0xe7, 0xfd, 0x79, 0xdf, 0xe9, 0x5a, 0xf8, 0xbc, 0x17, 0xdc, 0x06, 0x9e, 0xd3,
    0xbd, 0xf1, 0x71, 0xe8, 0x4d, 0x7b, 0xad, 0xab, 0xe9, 0xeb, 0x49, 0x7f, 0x7c, 0x16, 0xf2,
    0xa6, 0xe5, 0x4d, 0x5f, 0xfb, 0x50, 0x27, 0xff, 0x78, 0x65, 0x8b, 0x67, 0xb6, 0x95, 0xf6,
    0xf6, 0xc8, 0x3b, 0x7a, 0x09, 0x65, 0xfc, 0x2f, 0x58, 0xff, 0xe4, 0x4b, 0xda, 0x3e, 0xbd,
    0x3c, 0x3b, 0x3d, 0xbf, 0x3b, 0x86, 0xbf, 0xa3, 0x37, 0x07, 0xe1, 0xcb, 0xd3, 0xcb, 0xeb,
    0xf9, 0xe5, 0xe1, 0xfe, 0x45, 0x70, 0x77, 0x04, 0xf7, 0x8e, 0x4e, 0xec, 0xc3, 0x97, 0xa7,
    0x23, 0xbd, 0xb0, 0x0e, 0x5f, 0x5e, 0x4c, 0xef, 0x0e, 0xe1, 0xde, 0xe1, 0x9b, 0x83, 0x63,
    0xf7, 0x96, 0xca, 0x7d, 0xda, 0xbb, 0xdb, 0x87, 0x7b, 0xfb, 0x27, 0x16, 0xdc, 0xb3, 0x62,
    0xef, 0xa7, 0xb3, 0xbd, 0xbb, 0x9b, 0xd3, 0xeb, 0xc3, 0xd7, 0xa7, 0x5f, 0x32, 0x28, 0xf7,
    0xe0, 0xcd, 0x81, 0xfd, 0xf2, 0xf4, 0xea, 0x20, 0xfd, 0x08, 0x6d, 0x7c, 0xfc, 0x92, 0xbd,
    0xbd, 0x3c, 0x6e, 0x9d, 0x06, 0x77, 0x11, 0x94, 0x79, 0xe9, 0x5f, 0xf6, 0xd2, 0x53, 0xb8,
    0x4a, 0xf7, 0xdf, 0xff, 0x0e, 0xf7, 0x11, 0xcb, 0xb1, 0xec, 0x43, 0xf5, 0x4b, 0x7d, 0xbc,
    0xf0, 0xe1, 0x9e, 0x97, 0x9e, 0xc3, 0xbd, 0xab, 0x8b, 0xec, 0x0c, 0xda, 0xc9, 0x4f, 0xa7,
    0xef, 0xe0, 0xd9, 0xbb, 0x13, 0x0b, 0xb0, 0xdb, 0xa7, 0xaa, 0x2d, 0x28, 0x7f, 0xfc, 0xea,
    0xeb, 0x5e, 0x9f, 0xa6, 0x3e, 0x60, 0xbb, 0xb8, 0x2c, 0xd1, 0xf0, 0xcb, 0xa9, 0xd3, 0xcd,
    0x57, 0xef, 0x73, 0x7f, 0x8f, 0xe8, 0x16, 0xf2, 0xa3, 0x97, 0x37, 0x5e, 0x74, 0x3a, 0x04,
    0x5b, 0x30, 0x1f, 0xe3, 0x8f, 0x57, 0xc7, 0x61, 0xef, 0x20, 0xbc, 0x82, 0xcf, 0xcd, 0xd3,
    0xe1, 0x97, 0x4f, 0x97, 0x21, 0x96, 0x9f, 0x7e, 0x1a, 0x1f, 0x7e, 0xfe, 0x74, 0xfe, 0xb2,
    0xe1, 0x55, 0x63, 0xd8, 0xdb, 0xdb, 0x1d, 0x7e, 0x1a, 0x77, 0x6f, 0x7e, 0xda, 0xbb, 0x6e,
    0x8e, 0x3e, 0xdd, 0xb8, 0x57, 0xa7, 0x70, 0xbf, 0xd9, 0x85, 0x7f, 0x5e, 0x7f, 0xfc, 0xbe,
    0xbd, 0xea, 0x4e, 0xfd, 0x3d, 0xa0, 0x77, 0x74, 0x16, 0x7a, 0xe3, 0x4f, 0xa3, 0x8f, 0xce,
    0xf0, 0xfd, 0xf8, 0xfd, 0x94, 0x5f, 0xbe, 0x1e, 0x79, 0xce, 0xfb, 0x53, 0x6f, 0xdc, 0xbd,
    0xa6, 0x45, 0x5b, 0xde, 0xf8, 0xfd, 0xe8, 0xd3, 0xab, 0x6e, 0xde, 0x3f, 0xba, 0xa6, 0x76,
    0x82, 0x97, 0xd4, 0xff, 0x89, 0x7d, 0x97, 0x0f, 0xde, 0xdf, 0xe5, 0xd0, 0xae, 0xc6, 0xf9,
    0xb9, 0x1b, 0x79, 0xf5, 0xb7, 0xa2, 0x3d, 0x03, 0x8f, 0x77, 0xf4, 0x3e, 0xe8, 0xbf, 0x0a,
    0xf7, 0x5e, 0x8d, 0x42, 0x7e, 0x3e, 0x9c, 0xf4, 0x8e, 0x32, 0xaf, 0x1f, 0xec, 0xd2, 0x33,
    0x87, 0xe5, 0x7f, 0x78, 0x9d, 0xf7, 0xf6, 0x4f, 0xa7, 0xd8, 0x2e, 0xdd, 0x3f, 0xb2, 0xbd,
    0x04, 0xff, 0xc2, 0xbb, 0xfc, 0xd3, 0x87, 0xd1, 0x6d, 0xbf, 0xfe, 0xda, 0xea, 0xbd, 0x3a,
    0x3f, 0x7e, 0x38, 0xfe, 0xd2, 0x3b, 0x3c, 0xb6, 0x3e, 0x7e, 0x38, 0x9b, 0x7c, 0xb4, 0x8e,
    0xfa, 0xd1, 0xb1, 0xdd, 0xbf, 0x7a, 0x3f, 0x55, 0x6d, 0x7a, 0x47, 0xaf, 0x27, 0xfe, 0xf8,
    0x02, 0x7a, 0x7c, 0xee, 0x3b, 0xcd, 0x2f, 0xfe, 0xd1, 0x6b, 0xfb, 0x63, 0xfd, 0xec, 0xc6,
    0xa8, 0x5f, 0x41, 0x87, 0xc0, 0xc0, 0x74, 0x24, 0xdb, 0x9a, 0xca, 0xf2, 0xc0, 0x9b, 0x3f,
    0x35, 0xf2, 0x37, 0x61, 0x77, 0xe4, 0x01, 0x4f, 0xc2, 0x78, 0x47, 0xfd, 0x28, 0xec, 0x7f,
    0xd7, 0xf4, 0x1c, 0x72, 0x8d, 0xf1, 0x75, 0xe8, 0x1f, 0xbd, 0x9f, 0xf6, 0x3f, 0x8b, 0xbe,
    0x1e, 0xf8, 0xaf, 0x17, 0xda, 0xdd, 0xbf, 0x5a, 0x91, 0xfe, 0x8b, 0x5e, 0xca, 0xfe, 0xe3,
    0x43, 0x3b, 0xea, 0xbd, 0xfe, 0x27, 0x3e, 0x0c, 0x6e, 0xf5, 0xf3, 0xdf, 0x9c, 0x76, 0xf3,
    0xfe, 0x7f, 0x93, 0xeb, 0xf9, 0xfc, 0xb7, 0xe7, 0xf3, 0xdf, 0x9e, 0xcf, 0x7f, 0x7b, 0x3e,
    0xed, 0xf9, 0xfc, 0xb7, 0xe7, 0xf3, 0xdf, 0x96, 0xc7, 0x66, 0xe2, 0x7b, 0x3e, 0xff, 0xed,
    0xfc, 0xb7, 0xe7, 0xf3, 0xdf, 0x9e, 0xcf, 0x7f, 0xfb, 0x56, 0xec, 0xff, 0x7c, 0xfe, 0x9b,
    0x78, 0x63, 0xd1, 0xe7, 0xe7, 0xf3, 0xdf, 0x9e, 0xcf, 0x7f, 0x7b, 0x3e, 0xff, 0xed, 0xf9,
    0xb7, 0xe5, 0xae, 0x89, 0x79, 0xfe, 0x7f, 0x0d, 0x19, 0xaf, 0x86, 0x99, 0xe9, 0x27, 0xed,
    0xb1, 0xf5, 0x5f, 0x6b, 0x6e, 0xfd, 0xc7, 0xb1, 0xad, 0xe7, 0xfc, 0xcf, 0x37, 0xb9, 0xfe,
    0x23, 0x65, 0xb6, 0x0c, 0xfd, 0xe3, 0x38, 0x5c, 0x9c, 0x07, 0x49, 0xa3, 0x60, 0x32, 0x91,
    0x81, 0xaf, 0xcf, 0xc2, 0xf4, 0xaf, 0x7e, 0x29, 0xf9, 0x97, 0x7f, 0x9f, 0x5e, 0xf8, 0xff,
    0x31, 0xf9, 0xaf, 0x3b, 0x8d, 0xf9, 0xf5, 0xdf, 0x66, 0xa3, 0xf5, 0x2c, 0xff, 0xdf, 0xe2,
    0xf9, 0x5f, 0x21, 0x81, 0xb9, 0xd8, 0x20, 0x4f, 0x68, 0x37, 0xb4, 0xe9, 0xb2, 0x3c, 0x49,
    0xf6, 0x81, 0x9c, 0xeb, 0x1f, 0x48, 0x59, 0x3f, 0x9c, 0x73, 0xbe, 0x3f, 0xaf, 0xad, 0x9d,
    0x95, 0x32, 0xc9, 0xfd, 0x7c, 0x68, 0x24, 0xb6, 0x1e, 0xcf, 0xca, 0xee, 0xd0, 0xf9, 0x3d,
    0x91, 0x98, 0x5d, 0x94, 0x2a, 0xfe, 0xe3, 0xf9, 0x5e, 0x59, 0xfa, 0x8f, 0xe4, 0x9a, 0x35,
    0x1e, 0x0d, 0xc1, 0x6b, 0x34, 0x46, 0x15, 0xc5, 0x3e, 0xc1, 0xf9, 0xfb, 0x8f, 0x10, 0x11,
    0xea, 0x30, 0x37, 0xba, 0x2c, 0x9e, 0xd8, 0x55, 0xf6, 0x41, 0x3f, 0xa7, 0x95, 0x52, 0xca,
    0x78, 0xe4, 0x2b, 0x07, 0xb5, 0x22, 0x78, 0xc6, 0xe8, 0xa2, 0x9f, 0x07, 0xa1, 0xaf, 0xb2,
    0x6c, 0x7b, 0x1b, 0xdc, 0x6b, 0xdc, 0xa2, 0xb0, 0x4d, 0x67, 0x03, 0xe2, 0x3b, 0x27, 0x29,
    0xdb, 0xdf, 0x04, 0xe3, 0x24, 0x71, 0xca, 0xb3, 0xcc, 0x55, 0x43, 0x85, 0xd1, 0x8d, 0xdd,
    0x55, 0x75, 0x5b, 0x7e, 0x55, 0x89, 0x73, 0x9e, 0x92, 0xeb, 0x88, 0x2f, 0x74, 0x6e, 0xe3,
    0x36, 0xbf, 0x00, 0xc6, 0x6a, 0x7a, 0x36, 0x65, 0x8d, 0x17, 0xf9, 0xc4, 0x17, 0x6c, 0x8e,
    0x56, 0x96, 0xe4, 0x11, 0x23, 0x7c, 0x08, 0xe1, 0xf2, 0xdd, 0xfe, 0xee, 0xc5, 0xc1, 0xaf,
    0xbd, 0xc3, 0xc3, 0x1f, 0x6d, 0xa6, 0x1e, 0x53, 0x3f, 0x9a, 0x28, 0x3e, 0xbf, 0xd9, 0x57,
    0x1f, 0x94, 0xf2, 0x9e, 0x44, 0x94, 0x1d, 0x45, 0xcf, 0xff, 0x05, 0x6a, 0xda, 0xed, 0x9a,
    0x51, 0x9d, 0x13, 0x10, 0x7c, 0x50, 0xc8, 0x9c, 0xbc, 0xbb, 0x4d, 0x00, 0xb6, 0xd1, 0x5e,
    0xf7, 0x94, 0x50, 0x74, 0x99, 0x7b, 0x3a, 0x81, 0x90, 0x14, 0x02, 0x95, 0x84, 0x9e, 0x80,
    0xd5, 0x9a, 0x05, 0x54, 0xd9, 0xa3, 0xc4, 0x17, 0xe7, 0x19, 0x70, 0x8e, 0x20, 0x58, 0xaa,
    0x69, 0x76, 0x7d, 0x60, 0x36, 0xd7, 0x3e, 0x9f, 0x6d, 0xff, 0x93, 0x49, 0x6f, 0x23, 0x3c,
    0x4f, 0xdb, 0x2f, 0x9d, 0x87, 0x2f, 0x45, 0x33, 0xcb, 0xe5, 0xfa, 0xe7, 0xe2, 0x94, 0x62,
    0x73, 0x6b, 0x22, 0xec, 0xc9, 0x57, 0x45, 0xd8, 0xd3, 0xae, 0x8b, 0x94, 0x96, 0x20, 0x66,
    0xff, 0x7f, 0x24, 0xf7, 0xbf, 0x62, 0xf6, 0x5f, 0x51, 0x51, 0x25, 0x21, 0xa4, 0x49, 0x39,
    0x9d, 0xf5, 0xd4, 0x04, 0x68, 0x76, 0x21, 0x35, 0xcf, 0xfe, 0xe5, 0xba, 0x2f, 0xe5, 0xff,
    0xab, 0x92, 0xaf, 0x0e, 0xde, 0x9c, 0xbc, 0xaa, 0x8d, 0xfd, 0xa7, 0xee, 0xe3, 0x41, 0xff,
    0xee, 0xd4, 0x5b, 0xf3, 0xfe, 0x9f, 0xd5, 0x7e, 0xf6, 0xff, 0xbe, 0xc9, 0xf5, 0x1d, 0xdb,
    0xa3, 0x6d, 0xd8, 0x9b, 0x78, 0xb8, 0xb1, 0xb1, 0x2b, 0x0e, 0xe1, 0x14, 0x47, 0x9f, 0xd0,
    0x54, 0xbc, 0x2b, 0x2f, 0xce, 0x46, 0xa5, 0xe3, 0x81, 0xf0, 0xf5, 0x40, 0x7c, 0x63, 0x45,
    0xe5, 0x61, 0x1c, 0x00, 0x20, 0xde, 0x79, 0xc6, 0xb7, 0x07, 0x7e, 0xde, 0xc3, 0x03, 0x65,
    0x1b, 0xfa, 0x6c, 0x2f, 0x1e, 0x8f, 0x83, 0x2c, 0xfd, 0x65, 0x53, 0x79, 0x29, 0x9e, 0xf1,
    0x13, 0x0f, 0xf1, 0x4d, 0x8b, 0x2d, 0xf2, 0x02, 0xc5, 0x0d, 0x36, 0xcc, 0x03, 0x7c, 0x07,
    0xa2, 0xd7, 0x53, 0xbe, 0x63, 0x3f, 0xdb, 0x35, 0xbb, 0x66, 0x15, 0x4d, 0x2c, 0x72, 0xa1,
    0x75, 0x10, 0xd0, 0xf9, 0x3b, 0x37, 0x36, 0x9a, 0xb9, 0x5a, 0xad, 0x76, 0x43, 0x95, 0xb6,
    0xa6, 0x63, 0x39, 0xd6, 0xb6, 0x55, 0xdf, 0xb6, 0xad, 0xad, 0x8d, 0x8d, 0xef, 0xbf, 0x3f,
    0x33, 0xfe, 0xe2, 0xfb, 0xef, 0xf5, 0x3b, 0x28, 0xfd, 0x7c, 0x3c, 0x11, 0x2f, 0x97, 0x21,
    0x29, 0x13, 0xec, 0x41, 0xb7, 0x68, 0x83, 0x2e, 0xc2, 0x65, 0x2d, 0x8d, 0xcb, 0xaa, 0x39,
    0x02, 0x66, 0x19, 0xc0, 0x9c, 0x6d, 0xbb, 0xfd, 0xe4, 0xc0, 0x44, 0x67, 0xcb, 0x23, 0xb3,
    0x0e, 0x22, 0x13, 0xd5, 0x0c, 0x68, 0x56, 0xeb, 0x89, 0xa1, 0x09, 0x6c, 0xd0, 0xdd, 0x2a,
    0x6c, 0x89, 0x0d, 0xaa, 0x69, 0x6c, 0xf6, 0xb6, 0xe3, 0xac, 0x09, 0x9b, 0xbd, 0x0a, 0x36,
    0x63, 0xb3, 0x0d, 0x6c, 0x56, 0x7d, 0x1d, 0x53, 0xba, 0xbc, 0x10, 0x40, 0x61, 0x70, 0x23,
    0xba, 0x59, 0x26, 0xb6, 0xf5, 0xd0, 0x0d, 0xfb, 0x5b, 0x09, 0x9d, 0xa2, 0x1c, 0x56, 0x24,
    0x76, 0x77, 0xdb, 0x06, 0x69, 0x78, 0x6a, 0xd2, 0x69, 0x78, 0x2b, 0x11, 0xaf, 0x5b, 0xa0,
    0xbe, 0x05, 0xba, 0xee, 0x2a, 0xe0, 0x3a, 0x1a, 0x5c, 0xd7, 0xc4, 0x66, 0xaf, 0x09, 0x5b,
    0x15, 0x6c, 0x6d, 0x8d, 0xad, 0xa3, 0xb1, 0x81, 0xb0, 0x36, 0xd6, 0x84, 0xad, 0xbd, 0x0a,
    0xa6, 0xc6, 0xd6, 0x36, 0xb0, 0xd9, 0x9d, 0x2d, 0x6a, 0xf1, 0x3b, 0x76, 0xc8, 0xdd, 0x2c,
    0x78, 0x0a, 0x50, 0xd9, 0xf7, 0xdf, 0xcb, 0xe0, 0x09, 0xf1, 0xf2, 0x3b, 0x71, 0x8e, 0xbf,
    0x13, 0x86, 0x0e, 0x5a, 0xc7, 0x17, 0x34, 0x27, 0x78, 0xaa, 0x5c, 0x10, 0x81, 0x99, 0xac,
    0xe1, 0x84, 0x08, 0x83, 0x6d, 0xfe, 0xfc, 0x5d, 0xd7, 0x69, 0x3e, 0x8c, 0x4a, 0xc4, 0xfb,
    0x50, 0x6e, 0x0b, 0x70, 0xfc, 0xcc, 0xb9, 0xd7, 0x68, 0xf0, 0xc7, 0xa5, 0x07, 0x4c, 0xe3,
    0x2c, 0x6b, 0xb5, 0x38, 0xb7, 0x79, 0xdd, 0x77, 0xe0, 0x9f, 0x55, 0x1f, 0xb4, 0x2d, 0xde,
    0x3b, 0x6d, 0xb7, 0xe1, 0xb7, 0x39, 0xb7, 0xfa, 0xfd, 0xbe, 0xbb, 0xb5, 0x35, 0x43, 0xa8,
    0x1f, 0x23, 0x54, 0xcb, 0x24, 0xd4, 0xba, 0x26, 0xf1, 0x11, 0x72, 0x95, 0xb1, 0x35, 0x34,
    0xa6, 0x89, 0x6d, 0x5d, 0x82, 0xd9, 0x58, 0x05, 0x5b, 0x5d, 0x63, 0x6b, 0x98, 0xd8, 0xd6,
    0x71, 0xeb, 0xab, 0x60, 0x73, 0x34, 0xb6, 0xba, 0x89, 0x6d, 0x5d, 0x4a, 0x63, 0x05, 0x0b,
    0x69, 0x0b, 0x6f, 0x49, 0x0b, 0x2f, 0xb0, 0x59, 0x9d, 0x75, 0x99, 0x82, 0x55, 0xb0, 0x19,
    0xca, 0xc4, 0xb6, 0x1e, 0xcf, 0x68, 0x15, 0x7f, 0xd2, 0xee, 0x1a, 0xd8, 0x0a, 0x23, 0x65,
    0xd7, 0xad, 0xc5, 0x0a, 0xed, 0x9a, 0x27, 0x11, 0x0f, 0x11, 0xae, 0xfc, 0x6d, 0x00, 0x4e,
    0xfe, 0x72, 0xed, 0xca, 0x17, 0xc7, 0xe4, 0x47, 0xf4, 0x23, 0x17, 0x67, 0x7c, 0x50, 0x49,
    0xa3, 0x75, 0x96, 0xd4, 0x68, 0x1d, 0xa9, 0xd1, 0xdc, 0x06, 0x77, 0xac, 0xee, 0xe3, 0x62,
    0x1a, 0x4d, 0x96, 0xad, 0x77, 0xed, 0xae, 0xe5, 0xf5, 0xb9, 0xdd, 0x6c, 0x35, 0x5a, 0x10,
    0x36, 0x06, 0xf8, 0xf3, 0x50, 0xbc, 0xeb, 0x5a, 0x4d, 0xaf, 0xd9, 0xec, 0x74, 0x3d, 0xd0,
    0x38, 0x08, 0x91, 0xcc, 0xc3, 0x41, 0x88, 0xfc, 0x1b, 0x1e, 0xf2, 0x82, 0xa9, 0x26, 0x26,
    0x52, 0x78, 0x18, 0x62, 0x8c, 0x6f, 0x85, 0x23, 0xec, 0xc6, 0x23, 0x66, 0x55, 0xc1, 0x6e,
    0x09, 0x76, 0xd3, 0x6f, 0x77, 0x9c, 0x86, 0xbf, 0x14, 0x6c, 0x59, 0xb6, 0x39, 0xb0, 0x5c,
    0x22, 0x58, 0xa7, 0x39, 0xf0, 0x9a, 0xad, 0x7e, 0xa7, 0x6e, 0xd9, 0x7d, 0xcf, 0x69, 0xbb,
    0x6f, 0xb6, 0xba, 0xb6, 0xdf, 0x68, 0x69, 0x45, 0x8c, 0xf3, 0x8b, 0x53, 0xb6, 0xfc, 0xfc,
    0xd4, 0xfc, 0x62, 0x35, 0x63, 0x7e, 0x9f, 0x5c, 0x0f, 0x13, 0xb4, 0xce, 0x2a, 0xd0, 0xda,
    0x64, 0xb1, 0x9a, 0x01, 0xcd, 0xb2, 0x17, 0xb1, 0x9e, 0xfa, 0x31, 0x15, 0xce, 0x7e, 0x93,
    0xe4, 0xdf, 0xc4, 0x4b, 0xfb, 0xbf, 0x61, 0xda, 0x93, 0xe9, 0x1c, 0xf2, 0x6f, 0x38, 0x69,
    0xc7, 0xf8, 0x46, 0x4e, 0x1a, 0x94, 0xa3, 0x49, 0x6b, 0xd9, 0xad, 0x46, 0xbf, 0xd5, 0x5f,
    0xd2, 0x64, 0xd9, 0x2d, 0x3c, 0xad, 0x28, 0xa4, 0xa3, 0x18, 0xb1, 0xbf, 0x47, 0x54, 0xbc,
    0xaf, 0x51, 0xb2, 0xa9, 0x48, 0x83, 0x55, 0x08, 0xa6, 0xe6, 0xb2, 0x5d, 0xe8, 0x11, 0xab,
    0x64, 0xf5, 0xc9, 0xe7, 0xb2, 0xbd, 0xca, 0x5c, 0xb6, 0x0c, 0x68, 0x96, 0x01, 0xcd, 0x7e,
    0xf5, 0x4b, 0xd0, 0x5a, 0xab, 0x40, 0x6b, 0x6a, 0x36, 0x6b, 0x19, 0xd0, 0x3a, 0xdb, 0x4e,
    0x1d, 0xda, 0x17, 0xbb, 0x5b, 0x05, 0x9b, 0x22, 0x5b, 0xd3, 0x98, 0xd1, 0xce, 0xd3, 0x93,
    0x61, 0x5b, 0x81, 0x6e, 0x0d, 0xe5, 0x89, 0x60, 0x35, 0x13, 0xdb, 0x5a, 0x3c, 0x11, 0xec,
    0x15, 0x6c, 0xd2, 0x13, 0xc1, 0x6a, 0x06, 0x36, 0x6b, 0x2d, 0x9e, 0x08, 0x76, 0xb7, 0x0a,
    0x5b, 0x63, 0xd3, 0x9e, 0x88, 0xd5, 0xde, 0xb6, 0xd7, 0xc3, 0x6f, 0x8d, 0x55, 0xf8, 0xad,
    0xf9, 0xad, 0x61, 0xf0, 0x5b, 0x7b, 0x3d, 0xe9, 0x23, 0xec, 0x6d, 0x79, 0x68, 0x75, 0xe5,
    0x63, 0x35, 0x03, 0xda, 0x7a, 0x1c, 0x38, 0xec, 0x6e, 0x15, 0x6c, 0x4a, 0x14, 0xea, 0x85,
    0x8e, 0xd8, 0xd6, 0x12, 0x30, 0x60, 0x77, 0xab, 0x60, 0x73, 0x34, 0xb6, 0xba, 0x89, 0x6d,
    0xa2, 0x50, 0x5f, 0x45, 0x14, 0x1c, 0x2d, 0x0a, 0xf5, 0x92, 0x28, 0xac, 0x09, 0x9b, 0xb3,
    0x28, 0x38, 0x5a, 0x14, 0x1c, 0x43, 0x14, 0x5a, 0xdb, 0xe0, 0x7d, 0xae, 0x41, 0x14, 0x56,
    0xa4, 0xda, 0xb6, 0x66, 0x37, 0xc7, 0x10, 0x85, 0xd6, 0x9a, 0x12, 0x20, 0xd8, 0xdd, 0x2a,
    0x14, 0xbb, 0xd9, 0x06, 0xbb, 0xb5, 0xd6, 0x65, 0xb1, 0x56, 0xc9, 0xf2, 0xda, 0x3a, 0xcb,
    0xdb, 0x06, 0xbb, 0xb5, 0x80, 0xe3, 0xd6, 0x84, 0x6d, 0x05, 0x76, 0xd3, 0x59, 0x5e, 0xdb,
    0xb1, 0xdb, 0x93, 0x63, 0x93, 0xd0, 0x56, 0x60, 0x37, 0x9d, 0xaa, 0xb1, 0x6d, 0x83, 0xdd,
    0xdb, 0xce, 0x7a, 0xa4, 0x74, 0x95, 0x54, 0x8d, 0xad, 0x53, 0x35, 0xb6, 0x91, 0xaa, 0x01,
    0xeb, 0x09, 0x9d, 0xed, 0x55, 0x52, 0x35, 0xb6, 0x4e, 0xd5, 0xd8, 0x46, 0xaa, 0x06, 0xb1,
    0xb5, 0x06, 0x51, 0xd8, 0x56, 0x10, 0x53, 0x9d, 0xaa, 0xb1, 0x8d, 0x54, 0x8d, 0xd5, 0x58,
    0x0a, 0x59, 0x25, 0x55, 0x63, 0xeb, 0x54, 0x8d, 0x6d, 0xa4, 0x6a, 0x00, 0xdb, 0x9a, 0x54,
    0x2a, 0xa9, 0x1a, 0x5b, 0xa7, 0x6a, 0x6c, 0x23, 0x55, 0x83, 0xd8, 0xd6, 0x22, 0xa6, 0xab,
    0x6a, 0xba, 0x06, 0x32, 0xcb, 0x44, 0xd6, 0x52, 0xd1, 0xf2, 0xcb, 0x7c, 0xc8, 0x0e, 0x83,
    0x95, 0xa9, 0xc1, 0x06, 0x10, 0xeb, 0x20, 0x74, 0xe9, 0x67, 0xe9, 0xf0, 0xfc, 0x57, 0x63,
    0x1c, 0xfe, 0x3a, 0x1c, 0x86, 0xca, 0x8d, 0xe6, 0x72, 0xa1, 0x2b, 0x94, 0x13, 0x89, 0xe6,
    0xef, 0xdb, 0xd6, 0x72, 0xf9, 0x0d, 0x59, 0xb6, 0x14, 0x2a, 0x37, 0x9a, 0x8f, 0xb0, 0xb1,
    0xaf, 0xbe, 0x38, 0x03, 0x45, 0x64, 0xc5, 0xa3, 0xe4, 0x70, 0x70, 0x6f, 0x21, 0xf6, 0x0f,
    0x7e, 0x2b, 0x8c, 0xc5, 0x13, 0xb1, 0x2a, 0x4c, 0x3f, 0x4b, 0x04, 0x9d, 0xd5, 0x1f, 0xe1,
    0xd5, 0x59, 0xdd, 0xa1, 0xc1, 0x39, 0x36, 0x6f, 0x74, 0x9a, 0xee, 0x52, 0x83, 0x93, 0x65,
    0x83, 0x73, 0xba, 0x8f, 0xa4, 0xc8, 0x65, 0x7f, 0x50, 0x6e, 0x0b, 0x69, 0x61, 0x2f, 0x49,
    0xca, 0xd6, 0x88, 0x49, 0x3e, 0x3b, 0xd8, 0xfd, 0xa9, 0x77, 0xfc, 0x8a, 0x89, 0x1d, 0x17,
    0x0b, 0x68, 0x82, 0x1b, 0x7b, 0x98, 0xdc, 0x8a, 0x86, 0x27, 0x5f, 0x97, 0x7e, 0xd9, 0x22,
    0xf1, 0x20, 0x3d, 0xfd, 0x63, 0xad, 0xf2, 0x2c, 0x43, 0xdc, 0xff, 0xb5, 0x41, 0x2b, 0xf3,
    0x32, 0x2f, 0x0b, 0x63, 0x97, 0x4e, 0xfd, 0xd5, 0xa7, 0xbd, 0xb2, 0x88, 0xdf, 0xaa, 0x4a,
    0x60, 0x54, 0xdc, 0x1a, 0xb9, 0x8d, 0x77, 0x5c, 0xfc, 0x8d, 0xa2, 0x6d, 0xb5, 0xa0, 0x81,
    0x6e, 0x6e, 0xc8, 0xa5, 0xfe, 0x54, 0xfc, 0x7e, 0xaa, 0x2f, 0x7e, 0xa7, 0x6b, 0x10, 0xdc,
    0x53, 0x35, 0x43, 0x00, 0x56, 0xc9, 0x64, 0x75, 0x94, 0x46, 0xeb, 0x96, 0xd8, 0xdf, 0x6a,
    0xcf, 0x25, 0x48, 0x0c, 0x3c, 0x60, 0x33, 0xf1, 0xd5, 0x8f, 0x20, 0xaa, 0x17, 0x60, 0x08,
    0xda, 0xad, 0x47, 0x8c, 0xe2, 0x2c, 0x97, 0xe5, 0x83, 0x72, 0x42, 0x0a, 0x5a, 0x96, 0xed,
    0xde, 0x72, 0x52, 0x20, 0xca, 0xca, 0xdc, 0xa3, 0x02, 0x76, 0xe1, 0x8a, 0x73, 0xbc, 0x69,
    0xa0, 0x24, 0x9f, 0x9e, 0x18, 0x75, 0xb8, 0xa8, 0xd8, 0x48, 0x68, 0xcc, 0x25, 0x41, 0x7d,
    0x68, 0x1a, 0xaa, 0x45, 0x50, 0x1b, 0x8e, 0xcf, 0xbd, 0x25, 0x57, 0x86, 0x64, 0xd9, 0xb2,
    0xda, 0x4b, 0xca, 0x10, 0x25, 0x06, 0x0a, 0xc5, 0xdb, 0x59, 0xc1, 0x26, 0x74, 0x94, 0x49,
    0x18, 0x16, 0xa1, 0xbe, 0xed, 0xac, 0xc5, 0x22, 0x74, 0x56, 0x30, 0x08, 0x3a, 0x7d, 0xda,
    0xcc, 0xc1, 0x1a, 0x80, 0x09, 0x5c, 0xcb, 0x4b, 0x43, 0x1b, 0xb3, 0x32, 0x12, 0x98, 0x65,
    0x5b, 0x98, 0xb6, 0x9f, 0xe0, 0xf1, 0x56, 0xf8, 0x0a, 0x9d, 0xf8, 0x35, 0x66, 0xb6, 0x29,
    0xb4, 0x4a, 0xb7, 0x40, 0x23, 0x6c, 0xd3, 0x29, 0x5c, 0xf4, 0x93, 0x6f, 0xdc, 0xa5, 0x73,
    0xe1, 0x5e, 0xc2, 0x07, 0xc8, 0x6a, 0xf5, 0xf6, 0x72, 0xea, 0x0c, 0xca, 0x11, 0xab, 0xf9,
    0xba, 0xe7, 0xf9, 0x83, 0xa5, 0x58, 0x4d, 0x96, 0x35, 0x59, 0x0d, 0x8a, 0x84, 0x6e, 0x3f,
    0xa2, 0xdb, 0x9e, 0x7f, 0xfd, 0x5d, 0xb7, 0x75, 0xaf, 0xa7, 0x68, 0x96, 0xd3, 0x4b, 0xa1,
    0x26, 0x2a, 0xd5, 0x7a, 0x7b, 0xb9, 0xdc, 0x2f, 0x94, 0x7b, 0x48, 0xa9, 0xe2, 0x9a, 0x40,
    0x32, 0x1e, 0x0a, 0xa4, 0xb1, 0xb6, 0x21, 0x7e, 0x57, 0x4f, 0xff, 0x70, 0xab, 0x49, 0x5b,
    0x11, 0xaf, 0x3e, 0x57, 0xbf, 0x48, 0xea, 0xa6, 0xec, 0x37, 0xfc, 0x39, 0x28, 0xe4, 0x8a,
    0x6a, 0xec, 0xa4, 0xf8, 0xed, 0x76, 0x43, 0xf0, 0xd5, 0x09, 0xbb, 0x52, 0xff, 0x4a, 0x15,
    0xdf, 0x2e, 0x9d, 0xfc, 0xfb, 0x63, 0x45, 0x4c, 0x77, 0xe5, 0xef, 0xff, 0xbd, 0xe3, 0xfe,
    0xf2, 0x30, 0xde, 0x58, 0x85, 0x59, 0xa4, 0x17, 0x8d, 0xd5, 0x34, 0xb7, 0x38, 0xdb, 0x4e,
    0x48, 0xec, 0x13, 0x71, 0x72, 0x19, 0x70, 0x63, 0x16, 0xf0, 0xf2, 0xae, 0x75, 0x1b, 0x13,
    0x0a, 0x70, 0xc3, 0x00, 0x6c, 0x35, 0xd6, 0x08, 0xb8, 0x3e, 0x0b, 0x78, 0x79, 0x7f, 0xbb,
    0xa1, 0xba, 0x02, 0x5c, 0xf8, 0xdb, 0x72, 0x13, 0xcf, 0xba, 0x00, 0x3b, 0xb3, 0x80, 0x97,
    0xb8, 0x6d, 0xbd, 0xb3, 0x07, 0xab, 0x09, 0xc0, 0x1d, 0xbd, 0x01, 0x64, 0x5d, 0x80, 0xed,
    0xc0, 0xcb, 0x2b, 0xe2, 0xb6, 0xde, 0xec, 0xd3, 0xd6, 0x7b, 0x7d, 0x3a, 0xc5, 0xce, 0x8b,
    0x01, 0xb6, 0x66, 0x01, 0xaf, 0xa2, 0xa1, 0xbb, 0x1a, 0xaf, 0x65, 0xe2, 0x75, 0xd6, 0x87,
    0x3b, 0x03, 0x77, 0xf9, 0x0d, 0x41, 0x6d, 0xb5, 0x1f, 0xa8, 0xad, 0xb6, 0x03, 0xad, 0x1d,
    0x67, 0x06, 0xec, 0xf2, 0x3b, 0x84, 0xda, 0x6a, 0x83, 0x50, 0x5b, 0xed, 0x0f, 0xea, 0xe0,
    0xa1, 0xb3, 0x46, 0x59, 0x6b, 0xcf, 0x80, 0x5d, 0x7e, 0xcb, 0x50, 0xbb, 0xd6, 0x52, 0x60,
    0x06, 0x58, 0xda, 0x49, 0xba, 0x26, 0xb0, 0xad, 0x19, 0xb0, 0xcb, 0x6f, 0xdb, 0x69, 0xab,
    0x50, 0x5b, 0x6d, 0xda, 0xe9, 0xe0, 0x2a, 0x9e, 0xb3, 0x46, 0xb0, 0xb3, 0x76, 0x6d, 0x15,
    0xa6, 0xad, 0x5a, 0xd3, 0x00, 0x6b, 0xd7, 0xef, 0x0b, 0x88, 0xdd, 0x1b, 0xda, 0x88, 0x25,
    0x1f, 0x83, 0xa9, 0xd7, 0xe8, 0xd5, 0x31, 0xa1, 0xd2, 0x37, 0x82, 0x28, 0xce, 0x59, 0x2e,
    0x83, 0x72, 0xe4, 0xf6, 0xd4, 0x9d, 0x66, 0xdb, 0x71, 0x1e, 0xb7, 0x16, 0xe8, 0xf6, 0xc8,
    0xe5, 0xa8, 0x71, 0x49, 0x8f, 0x1e, 0xca, 0x6d, 0x51, 0xf1, 0xe5, 0x22, 0x68, 0xec, 0x66,
    0xa9, 0x6a, 0x75, 0xee, 0xed, 0x6c, 0x91, 0x53, 0x05, 0xc5, 0xb7, 0xe6, 0xbd, 0x91, 0x59,
    0xbe, 0x8a, 0x69, 0xd7, 0x96, 0xbd, 0x61, 0x4e, 0xda, 0x1a, 0x39, 0x6c, 0xd6, 0xae, 0xaf,
    0xd6, 0xb5, 0x55, 0xaf, 0x1b, 0x60, 0x29, 0xf9, 0xb8, 0x26, 0xb0, 0xb3, 0x36, 0x7d, 0x25,
    0xae, 0xc0, 0x3a, 0xdf, 0x08, 0xec, 0x9c, 0x3d, 0x5f, 0x01, 0x6c, 0x61, 0xcd, 0x35, 0xd8,
    0x88, 0xab, 0xd6, 0x04, 0x56, 0xdb, 0x72, 0x81, 0x75, 0x79, 0x4b, 0xde, 0x2a, 0xf4, 0x8c,
    0x62, 0x5d, 0xb8, 0x4d, 0xa5, 0x08, 0xf0, 0x0f, 0xf3, 0x84, 0x7e, 0x24, 0x41, 0xfc, 0x04,
    0xf0, 0x85, 0x17, 0x09, 0x87, 0x38, 0xcf, 0x26, 0x79, 0x46, 0xba, 0xc6, 0x6e, 0x3f, 0x62,
    0xa4, 0x1c, 0x42, 0x39, 0x11, 0x62, 0xf1, 0xfa, 0xc0, 0x6a, 0x3d, 0xce, 0x15, 0x14, 0x62,
    0xb2, 0x25, 0x5d, 0xd3, 0x5a, 0x4e, 0xd5, 0xb4, 0x16, 0x49, 0xfd, 0x33, 0x05, 0xff, 0x1c,
    0x5b, 0x33, 0x7a, 0xb3, 0xb5, 0x82, 0xde, 0x6c, 0x29, 0xbd, 0xd9, 0x32, 0xf4, 0x66, 0x47,
    0x8e, 0xaf, 0x45, 0x60, 0x5a, 0x33, 0x7a, 0xb3, 0xb5, 0x82, 0xde, 0x6c, 0x29, 0xbd, 0xd9,
    0xf4, 0xe6, 0x7a, 0xc1, 0x1a, 0x7a, 0x93, 0xbe, 0x1a, 0xbd, 0x3e, 0x69, 0x90, 0xfb, 0x57,
    0x70, 0xf5, 0x4f, 0x76, 0xcd, 0x9f, 0xff, 0x8f, 0x2f, 0x63, 0x3f, 0x6d, 0x1f, 0x8f, 0x9c,
    0xd2, 0x70, 0xea, 0x73, 0xef, 0xff, 0xb5, 0x9d, 0xe7, 0xf7, 0xff, 0xbe, 0xc9, 0x25, 0x4e,
    0x2f, 0x52, 0x63, 0x6c, 0xfe, 0x14, 0x46, 0xf9, 0x6e, 0xf0, 0x20, 0x8e, 0x37, 0xb7, 0x5e,
    0xd9, 0xfd, 0x3f, 0xe8, 0xe3, 0xf0, 0x8d, 0x8a, 0xa5, 0xf3, 0xb0, 0x64, 0x1d, 0x95, 0x38,
    0xca, 0x2f, 0xe4, 0x59, 0xfd, 0xba, 0xaa, 0xcf, 0xbd, 0x10, 0x7f, 0x64, 0x73, 0xf1, 0xaf,
    0xbc, 0x60, 0xe2, 0xc8, 0xb3, 0x7b, 0x2b, 0x2c, 0x3c, 0xed, 0x5f, 0x1e, 0x44, 0x51, 0x3e,
    0x5f, 0x9c, 0xe1, 0x7f, 0xcf, 0x91, 0xff, 0x2f, 0xf0, 0xf7, 0xd8, 0x7e, 0xfe, 0xc5, 0x18,
    0x5f, 0x3d, 0x25, 0xcf, 0xd7, 0xf3, 0xf5, 0x7c, 0x3d, 0x5f, 0xdf, 0xe4, 0xfa, 0x3f, 0x0c,
    0x5d, 0x02, 0x00, 0xae, 0x00,
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/golang/scopejsiicalcbaseofbase.go 1`] = `
package scopejsiicalcbaseofbase

import (
    "github.com/aws-cdk/jsii/jsii"
)

type IVeryBaseInterface interface {
    Foo()
}

type StaticConsumerIface interface {
    Consume() jsii.Any
}

type StaticConsumer struct {
}

func (s *StaticConsumer) Consume() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "StaticConsumer",
        Method: "Consume",
        Args: []string{"any",},

    })
    return nil
}

type VeryIface interface {
    Hey() float64
}

type Very struct {
}

func (v *Very) Hey() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Very",
        Method: "Hey",
        Args: []string{},

    })
    return 0.0
}

type VeryBasePropsIface interface {
    GetFoo() Very
}

type VeryBaseProps struct {
    Foo Very
}


func (v VeryBaseProps) GetFoo() Very {
    return v.Foo
}



`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/java/pom.xml 1`] = `
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <name>\${project.groupId}:\${project.artifactId}</name>
  <description>An example transitive dependency for jsii-calc.</description>
  <url>https://github.com/aws/jsii</url>
  <licenses>
    <license>
      <name>Apache License 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0</url>
      <distribution>repo</distribution>
      <comments>An OSI-approved license</comments>
    </license>
  </licenses>
  <developers>
    <developer>
      <organization>Amazon Web Services</organization>
      <roles>
        <role>author</role>
      </roles>
      <organizationUrl>https://aws.amazon.com</organizationUrl>
    </developer>
  </developers>
  <scm>
    <connection>scm:git:https://github.com/aws/jsii.git</connection>
    <url>https://github.com/aws/jsii.git</url>
  </scm>
  <groupId>software.amazon.jsii.tests</groupId>
  <artifactId>calculator-base-of-base</artifactId>
  <version>0.0.0</version>
  <packaging>jar</packaging>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
    <dependency>
      <groupId>software.amazon.jsii</groupId>
      <artifactId>jsii-runtime</artifactId>
      <version>[0.0.0,0.0.1)</version>
    </dependency>
    <dependency>
      <groupId>org.jetbrains</groupId>
      <artifactId>annotations</artifactId>
      <version>[16.0.3,20.0.0)</version>
    </dependency>
    <dependency>
      <!-- Provides @javax.annotation.Generated for JDKs >= 9 -->
      <groupId>javax.annotation</groupId>
      <artifactId>javax.annotation-api</artifactId>
      <version>[1.3.2,1.4.0)</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
          <archive>
            <index>true</index>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.1.1</version>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <failOnError>false</failOnError>
          <show>protected</show>
          <sourceFileExcludes>
            <exclude>**/$Module.java</exclude>
          </sourceFileExcludes>
          <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
          <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>3.6</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <generateBackupPoms>false</generateBackupPoms>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/baseofbase/$Module.java 1`] = `
package software.amazon.jsii.tests.calculator.baseofbase;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.Reader;
import java.io.UncheckedIOException;

import java.nio.charset.StandardCharsets;

import java.util.HashMap;
import java.util.Map;

import software.amazon.jsii.JsiiModule;

public final class $Module extends JsiiModule {
    private static final Map<String, String> MODULE_TYPES = load();

    private static Map<String, String> load() {
        final Map<String, String> result = new HashMap<>();
        final ClassLoader cl = $Module.class.getClassLoader();
        try (final InputStream is = cl.getResourceAsStream("software/amazon/jsii/tests/calculator/baseofbase/$Module.txt");
             final Reader rd = new InputStreamReader(is, StandardCharsets.UTF_8);
             final BufferedReader br = new BufferedReader(rd)) {
            br.lines()
              .filter(line -> !line.trim().isEmpty())
              .forEach(line ->  {
                final String[] parts = line.split("=", 2);
                final String fqn = parts[0];
                final String className = parts[1];
                result.put(fqn, className);
            });
        }
        catch (final IOException exception) {
            throw new UncheckedIOException(exception);
        }
        return result;
    }

    private final Map<String, Class<?>> cache = new HashMap<>();

    public $Module() {
        super("@scope/jsii-calc-base-of-base", "0.0.0", $Module.class, "jsii-calc-base-of-base@0.0.0.jsii.tgz");
    }

    @Override
    protected Class<?> resolveClass(final String fqn) throws ClassNotFoundException {
        if (!MODULE_TYPES.containsKey(fqn)) {
            throw new ClassNotFoundException("Unknown JSII type: " + fqn);
        }
        String className = MODULE_TYPES.get(fqn);
        if (!this.cache.containsKey(className)) {
            this.cache.put(className, this.findClass(className));
        }
        return this.cache.get(className);
    }

    private Class<?> findClass(final String binaryName) {
        try {
            return Class.forName(binaryName);
        }
        catch (final ClassNotFoundException exception) {
            throw new RuntimeException(exception);
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/baseofbase/IVeryBaseInterface.java 1`] = `
package software.amazon.jsii.tests.calculator.baseofbase;

@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.baseofbase.$Module.class, fqn = "@scope/jsii-calc-base-of-base.IVeryBaseInterface")
@software.amazon.jsii.Jsii.Proxy(IVeryBaseInterface.Jsii$Proxy.class)
public interface IVeryBaseInterface extends software.amazon.jsii.JsiiSerializable {

    void foo();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.baseofbase.IVeryBaseInterface {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        @Override
        public void foo() {
            this.jsiiCall("foo", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/baseofbase/StaticConsumer.java 1`] = `
package software.amazon.jsii.tests.calculator.baseofbase;

@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.baseofbase.$Module.class, fqn = "@scope/jsii-calc-base-of-base.StaticConsumer")
public class StaticConsumer extends software.amazon.jsii.JsiiObject {

    protected StaticConsumer(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected StaticConsumer(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    public static void consume(final @org.jetbrains.annotations.NotNull java.lang.Object... _args) {
        software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.baseofbase.StaticConsumer.class, "consume", software.amazon.jsii.NativeType.VOID, java.util.Arrays.<Object>stream(_args).toArray(Object[]::new));
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/baseofbase/Very.java 1`] = `
package software.amazon.jsii.tests.calculator.baseofbase;

@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.baseofbase.$Module.class, fqn = "@scope/jsii-calc-base-of-base.Very")
public class Very extends software.amazon.jsii.JsiiObject {

    protected Very(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Very(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    public Very() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    public @org.jetbrains.annotations.NotNull java.lang.Number hey() {
        return this.jsiiCall("hey", java.lang.Number.class);
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/baseofbase/VeryBaseProps.java 1`] = `
package software.amazon.jsii.tests.calculator.baseofbase;

@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.baseofbase.$Module.class, fqn = "@scope/jsii-calc-base-of-base.VeryBaseProps")
@software.amazon.jsii.Jsii.Proxy(VeryBaseProps.Jsii$Proxy.class)
public interface VeryBaseProps extends software.amazon.jsii.JsiiSerializable {

    @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.baseofbase.Very getFoo();

    /**
     * @return a {@link Builder} of {@link VeryBaseProps}
     */
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link VeryBaseProps}
     */
    public static final class Builder implements software.amazon.jsii.Builder<VeryBaseProps> {
        private software.amazon.jsii.tests.calculator.baseofbase.Very foo;

        /**
         * Sets the value of {@link VeryBaseProps#getFoo}
         * @param foo the value to be set. This parameter is required.
         * @return {@code this}
         */
        public Builder foo(software.amazon.jsii.tests.calculator.baseofbase.Very foo) {
            this.foo = foo;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link VeryBaseProps}
         * @throws NullPointerException if any required attribute was not provided
         */
        @Override
        public VeryBaseProps build() {
            return new Jsii$Proxy(foo);
        }
    }

    /**
     * An implementation for {@link VeryBaseProps}
     */
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements VeryBaseProps {
        private final software.amazon.jsii.tests.calculator.baseofbase.Very foo;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.foo = this.jsiiGet("foo", software.amazon.jsii.tests.calculator.baseofbase.Very.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final software.amazon.jsii.tests.calculator.baseofbase.Very foo) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.foo = java.util.Objects.requireNonNull(foo, "foo is required");
        }

        @Override
        public software.amazon.jsii.tests.calculator.baseofbase.Very getFoo() {
            return this.foo;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("foo", om.valueToTree(this.getFoo()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("@scope/jsii-calc-base-of-base.VeryBaseProps"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            VeryBaseProps.Jsii$Proxy that = (VeryBaseProps.Jsii$Proxy) o;

            return this.foo.equals(that.foo);
        }

        @Override
        public int hashCode() {
            int result = this.foo.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/java/src/main/resources/software/amazon/jsii/tests/calculator/baseofbase/$Module.txt 1`] = `
@scope/jsii-calc-base-of-base.IVeryBaseInterface=software.amazon.jsii.tests.calculator.baseofbase.IVeryBaseInterface
@scope/jsii-calc-base-of-base.StaticConsumer=software.amazon.jsii.tests.calculator.baseofbase.StaticConsumer
@scope/jsii-calc-base-of-base.Very=software.amazon.jsii.tests.calculator.baseofbase.Very
@scope/jsii-calc-base-of-base.VeryBaseProps=software.amazon.jsii.tests.calculator.baseofbase.VeryBaseProps

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/java/src/main/resources/software/amazon/jsii/tests/calculator/baseofbase/jsii-calc-base-of-base@0.0.0.jsii.tgz 1`] = `java/src/main/resources/software/amazon/jsii/tests/calculator/baseofbase/jsii-calc-base-of-base@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/js/jsii-calc-base-of-base@0.0.0.jsii.tgz 1`] = `js/jsii-calc-base-of-base@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/MANIFEST.in 1`] = `
include pyproject.toml

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/README.md 1`] = `


`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/pyproject.toml 1`] = `
[build-system]
requires = ["setuptools >= 49.3.1", "wheel >= 0.34.2"]
build-backend = "setuptools.build_meta"

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/setup.py 1`] = `
import json
import setuptools

kwargs = json.loads(
    """
{
    "name": "scope.jsii-calc-base-of-base",
    "version": "0.0.0",
    "description": "An example transitive dependency for jsii-calc.",
    "license": "Apache-2.0",
    "url": "https://github.com/aws/jsii",
    "long_description_content_type": "text/markdown",
    "author": "Amazon Web Services",
    "bdist_wheel": {
        "universal": true
    },
    "project_urls": {
        "Source": "https://github.com/aws/jsii.git"
    },
    "package_dir": {
        "": "src"
    },
    "packages": [
        "scope.jsii_calc_base_of_base",
        "scope.jsii_calc_base_of_base._jsii"
    ],
    "package_data": {
        "scope.jsii_calc_base_of_base._jsii": [
            "jsii-calc-base-of-base@0.0.0.jsii.tgz"
        ],
        "scope.jsii_calc_base_of_base": [
            "py.typed"
        ]
    },
    "python_requires": ">=3.6",
    "install_requires": [
        "jsii>=0.0.0, <0.0.1",
        "publication>=0.0.3"
    ],
    "classifiers": [
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Programming Language :: JavaScript",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Typing :: Typed",
        "License :: OSI Approved"
    ]
}
"""
)

with open("README.md") as fp:
    kwargs["long_description"] = fp.read()


setuptools.setup(**kwargs)

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/src/scope/jsii_calc_base_of_base/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from ._jsii import *


@jsii.interface(jsii_type="@scope/jsii-calc-base-of-base.IVeryBaseInterface")
class IVeryBaseInterface(jsii.compat.Protocol):
    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IVeryBaseInterfaceProxy

    @jsii.member(jsii_name="foo")
    def foo(self) -> None:
        ...


class _IVeryBaseInterfaceProxy:
    __jsii_type__ = "@scope/jsii-calc-base-of-base.IVeryBaseInterface"

    @jsii.member(jsii_name="foo")
    def foo(self) -> None:
        return jsii.invoke(self, "foo", [])


class StaticConsumer(
    metaclass=jsii.JSIIMeta, jsii_type="@scope/jsii-calc-base-of-base.StaticConsumer"
):
    @jsii.member(jsii_name="consume")
    @builtins.classmethod
    def consume(cls, *_args: typing.Any) -> None:
        """
        :param _args: -
        """
        return jsii.sinvoke(cls, "consume", [*_args])


class Very(metaclass=jsii.JSIIMeta, jsii_type="@scope/jsii-calc-base-of-base.Very"):
    def __init__(self) -> None:
        jsii.create(Very, self, [])

    @jsii.member(jsii_name="hey")
    def hey(self) -> jsii.Number:
        return jsii.invoke(self, "hey", [])


@jsii.data_type(
    jsii_type="@scope/jsii-calc-base-of-base.VeryBaseProps",
    jsii_struct_bases=[],
    name_mapping={"foo": "foo"},
)
class VeryBaseProps:
    def __init__(self, *, foo: "Very") -> None:
        """
        :param foo: -
        """
        self._values = {
            "foo": foo,
        }

    @builtins.property
    def foo(self) -> "Very":
        return self._values.get("foo")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "VeryBaseProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "IVeryBaseInterface",
    "StaticConsumer",
    "Very",
    "VeryBaseProps",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/src/scope/jsii_calc_base_of_base/_jsii/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

__jsii_assembly__ = jsii.JSIIAssembly.load(
    "@scope/jsii-calc-base-of-base",
    "0.0.0",
    __name__[0:-6],
    "jsii-calc-base-of-base@0.0.0.jsii.tgz",
)

__all__ = [
    "__jsii_assembly__",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/src/scope/jsii_calc_base_of_base/_jsii/jsii-calc-base-of-base@0.0.0.jsii.tgz 1`] = `python/src/scope/jsii_calc_base_of_base/_jsii/jsii-calc-base-of-base@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/src/scope/jsii_calc_base_of_base/py.typed 1`] = `


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/ 1`] = `
<root>
 ┣━ 📁 dotnet
 ┃  ┗━ 📁 Amazon.JSII.Tests.CalculatorPackageId.LibPackageId
 ┃     ┣━ 📄 .jsii
 ┃     ┣━ 📁 Amazon
 ┃     ┃  ┗━ 📁 JSII
 ┃     ┃     ┗━ 📁 Tests
 ┃     ┃        ┣━ 📁 CalculatorNamespace
 ┃     ┃        ┃  ┗━ 📁 LibNamespace
 ┃     ┃        ┃     ┣━ 📄 EnumFromScopedModule.cs
 ┃     ┃        ┃     ┣━ 📄 IDoublable.cs
 ┃     ┃        ┃     ┣━ 📄 IDoublableProxy.cs
 ┃     ┃        ┃     ┣━ 📄 IFriendly.cs
 ┃     ┃        ┃     ┣━ 📄 IFriendlyProxy.cs
 ┃     ┃        ┃     ┣━ 📄 IMyFirstStruct.cs
 ┃     ┃        ┃     ┣━ 📁 Internal
 ┃     ┃        ┃     ┃  ┗━ 📁 DependencyResolution
 ┃     ┃        ┃     ┃     ┗━ 📄 Anchor.cs
 ┃     ┃        ┃     ┣━ 📄 IStructWithOnlyOptionals.cs
 ┃     ┃        ┃     ┣━ 📄 IThreeLevelsInterface.cs
 ┃     ┃        ┃     ┣━ 📄 IThreeLevelsInterfaceProxy.cs
 ┃     ┃        ┃     ┣━ 📄 MyFirstStruct.cs
 ┃     ┃        ┃     ┣━ 📄 MyFirstStructProxy.cs
 ┃     ┃        ┃     ┣━ 📄 Number.cs
 ┃     ┃        ┃     ┣━ 📄 Operation.cs
 ┃     ┃        ┃     ┣━ 📄 OperationProxy.cs
 ┃     ┃        ┃     ┣━ 📄 StructWithOnlyOptionals.cs
 ┃     ┃        ┃     ┣━ 📄 StructWithOnlyOptionalsProxy.cs
 ┃     ┃        ┃     ┣━ 📄 Value_.cs
 ┃     ┃        ┃     ┗━ 📄 ValueProxy.cs
 ┃     ┃        ┗━ 📁 CustomSubmoduleName
 ┃     ┃           ┣━ 📄 IReflectable.cs
 ┃     ┃           ┣━ 📄 IReflectableEntry.cs
 ┃     ┃           ┣━ 📄 IReflectableProxy.cs
 ┃     ┃           ┣━ 📄 NestingClass.cs
 ┃     ┃           ┣━ 📄 ReflectableEntry.cs
 ┃     ┃           ┣━ 📄 ReflectableEntryProxy.cs
 ┃     ┃           ┗━ 📄 Reflector.cs
 ┃     ┣━ 📄 Amazon.JSII.Tests.CalculatorPackageId.LibPackageId.csproj
 ┃     ┣━ 📄 AssemblyInfo.cs
 ┃     ┗━ 📄 scope-jsii-calc-lib-0.0.0.tgz
 ┣━ 📁 golang
 ┃  ┣━ 📁 _jsii
 ┃  ┃  ┗━ 📄 bundled-runtime.go
 ┃  ┣━ 📁 scopejsiicalclib
 ┃  ┃  ┗━ 📄 submodule.go
 ┃  ┗━ 📄 scopejsiicalclib.go
 ┣━ 📁 java
 ┃  ┣━ 📄 pom.xml
 ┃  ┗━ 📁 src
 ┃     ┗━ 📁 main
 ┃        ┣━ 📁 java
 ┃        ┃  ┗━ 📁 software
 ┃        ┃     ┗━ 📁 amazon
 ┃        ┃        ┗━ 📁 jsii
 ┃        ┃           ┗━ 📁 tests
 ┃        ┃              ┗━ 📁 calculator
 ┃        ┃                 ┣━ 📁 custom_submodule_name
 ┃        ┃                 ┃  ┣━ 📄 IReflectable.java
 ┃        ┃                 ┃  ┣━ 📄 NestingClass.java
 ┃        ┃                 ┃  ┣━ 📄 ReflectableEntry.java
 ┃        ┃                 ┃  ┗━ 📄 Reflector.java
 ┃        ┃                 ┗━ 📁 lib
 ┃        ┃                    ┣━ 📄 $Module.java
 ┃        ┃                    ┣━ 📄 EnumFromScopedModule.java
 ┃        ┃                    ┣━ 📄 IDoublable.java
 ┃        ┃                    ┣━ 📄 IFriendly.java
 ┃        ┃                    ┣━ 📄 IThreeLevelsInterface.java
 ┃        ┃                    ┣━ 📄 MyFirstStruct.java
 ┃        ┃                    ┣━ 📄 Number.java
 ┃        ┃                    ┣━ 📄 Operation.java
 ┃        ┃                    ┣━ 📄 package-info.java
 ┃        ┃                    ┣━ 📄 StructWithOnlyOptionals.java
 ┃        ┃                    ┗━ 📄 Value.java
 ┃        ┗━ 📁 resources
 ┃           ┗━ 📁 software
 ┃              ┗━ 📁 amazon
 ┃                 ┗━ 📁 jsii
 ┃                    ┗━ 📁 tests
 ┃                       ┗━ 📁 calculator
 ┃                          ┗━ 📁 lib
 ┃                             ┣━ 📄 $Module.txt
 ┃                             ┗━ 📄 jsii-calc-lib@0.0.0.jsii.tgz
 ┣━ 📁 js
 ┃  ┗━ 📄 jsii-calc-lib@0.0.0.jsii.tgz
 ┗━ 📁 python
    ┣━ 📄 MANIFEST.in
    ┣━ 📄 pyproject.toml
    ┣━ 📄 README.md
    ┣━ 📄 setup.py
    ┗━ 📁 src
       ┗━ 📁 scope
          ┗━ 📁 jsii_calc_lib
             ┣━ 📄 __init__.py
             ┣━ 📁 _jsii
             ┃  ┣━ 📄 __init__.py
             ┃  ┗━ 📄 jsii-calc-lib@0.0.0.jsii.tgz
             ┣━ 📁 custom_submodule_name
             ┃  ┗━ 📄 __init__.py
             ┗━ 📄 py.typed
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/.jsii 1`] = `
{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@scope/jsii-calc-base": "^0.0.0",
    "@scope/jsii-calc-base-of-base": "^0.0.0"
  },
  "dependencyClosure": {
    "@scope/jsii-calc-base": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace",
          "packageId": "Amazon.JSII.Tests.CalculatorPackageId.BasePackageId"
        },
        "go": {},
        "java": {
          "maven": {
            "artifactId": "calculator-base",
            "groupId": "software.amazon.jsii.tests"
          },
          "package": "software.amazon.jsii.tests.calculator.base"
        },
        "js": {
          "npm": "@scope/jsii-calc-base"
        },
        "python": {
          "distName": "scope.jsii-calc-base",
          "module": "scope.jsii_calc_base"
        }
      }
    },
    "@scope/jsii-calc-base-of-base": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace",
          "packageId": "Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId"
        },
        "go": {},
        "java": {
          "maven": {
            "artifactId": "calculator-base-of-base",
            "groupId": "software.amazon.jsii.tests"
          },
          "package": "software.amazon.jsii.tests.calculator.baseofbase"
        },
        "js": {
          "npm": "@scope/jsii-calc-base-of-base"
        },
        "python": {
          "distName": "scope.jsii-calc-base-of-base",
          "module": "scope.jsii_calc_base_of_base"
        }
      }
    }
  },
  "description": "A simple calcuator library built on JSII.",
  "docs": {
    "deprecated": "Really just deprecated for shows...",
    "stability": "deprecated"
  },
  "homepage": "https://github.com/aws/jsii",
  "jsiiVersion": "0.0.0",
  "license": "Apache-2.0",
  "name": "@scope/jsii-calc-lib",
  "repository": {
    "directory": "packages/@scope/jsii-calc-lib",
    "type": "git",
    "url": "https://github.com/aws/jsii.git"
  },
  "schema": "jsii/0.10.0",
  "submodules": {
    "@scope/jsii-calc-lib.submodule": {
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 112
      },
      "targets": {
        "dotnet": {
          "namespace": "Amazon.JSII.Tests.CustomSubmoduleName"
        },
        "java": {
          "package": "software.amazon.jsii.tests.calculator.custom_submodule_name"
        },
        "python": {
          "module": "scope.jsii_calc_lib.custom_submodule_name"
        }
      }
    }
  },
  "targets": {
    "dotnet": {
      "namespace": "Amazon.JSII.Tests.CalculatorNamespace.LibNamespace",
      "packageId": "Amazon.JSII.Tests.CalculatorPackageId.LibPackageId",
      "versionSuffix": "-devpreview"
    },
    "go": {},
    "java": {
      "maven": {
        "artifactId": "calculator-lib",
        "groupId": "software.amazon.jsii.tests",
        "versionSuffix": ".DEVPREVIEW"
      },
      "package": "software.amazon.jsii.tests.calculator.lib"
    },
    "js": {
      "npm": "@scope/jsii-calc-lib"
    },
    "python": {
      "distName": "scope.jsii-calc-lib",
      "module": "scope.jsii_calc_lib"
    }
  },
  "types": {
    "@scope/jsii-calc-lib.EnumFromScopedModule": {
      "assembly": "@scope/jsii-calc-lib",
      "docs": {
        "remarks": "See awslabs/jsii#138",
        "stability": "deprecated",
        "summary": "Check that enums from \\\\@scoped packages can be references."
      },
      "fqn": "@scope/jsii-calc-lib.EnumFromScopedModule",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 97
      },
      "members": [
        {
          "docs": {
            "stability": "deprecated"
          },
          "name": "VALUE1"
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "name": "VALUE2"
        }
      ],
      "name": "EnumFromScopedModule"
    },
    "@scope/jsii-calc-lib.IDoublable": {
      "assembly": "@scope/jsii-calc-lib",
      "docs": {
        "stability": "deprecated",
        "summary": "The general contract for a concrete number."
      },
      "fqn": "@scope/jsii-calc-lib.IDoublable",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 23
      },
      "name": "IDoublable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 24
          },
          "name": "doubleValue",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@scope/jsii-calc-lib.IFriendly": {
      "assembly": "@scope/jsii-calc-lib",
      "docs": {
        "remarks": "These classes can be greeted with\\na \\"hello\\" or \\"goodbye\\" blessing and they will respond back in a fun and friendly manner.",
        "stability": "deprecated",
        "summary": "Applies to classes that are considered friendly."
      },
      "fqn": "@scope/jsii-calc-lib.IFriendly",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 58
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "Say hello!"
          },
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 62
          },
          "name": "hello",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IFriendly"
    },
    "@scope/jsii-calc-lib.IThreeLevelsInterface": {
      "assembly": "@scope/jsii-calc-lib",
      "docs": {
        "remarks": "Their presence validates that .NET/Java/jsii-reflect can track all fields\\nfar enough up the tree.",
        "stability": "deprecated",
        "summary": "Interface that inherits from packages 2 levels up the tree."
      },
      "fqn": "@scope/jsii-calc-lib.IThreeLevelsInterface",
      "interfaces": [
        "@scope/jsii-calc-base.IBaseInterface"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 108
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 109
          },
          "name": "baz"
        }
      ],
      "name": "IThreeLevelsInterface"
    },
    "@scope/jsii-calc-lib.MyFirstStruct": {
      "assembly": "@scope/jsii-calc-lib",
      "datatype": true,
      "docs": {
        "stability": "deprecated",
        "summary": "This is the first struct we have created in jsii."
      },
      "fqn": "@scope/jsii-calc-lib.MyFirstStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 68
      },
      "name": "MyFirstStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "An awesome number value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 77
          },
          "name": "anumber",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "A string value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 72
          },
          "name": "astring",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 78
          },
          "name": "firstOptional",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@scope/jsii-calc-lib.Number": {
      "assembly": "@scope/jsii-calc-lib",
      "base": "@scope/jsii-calc-lib.Value",
      "docs": {
        "stability": "deprecated",
        "summary": "Represents a concrete number."
      },
      "fqn": "@scope/jsii-calc-lib.Number",
      "initializer": {
        "docs": {
          "stability": "deprecated",
          "summary": "Creates a Number object."
        },
        "locationInModule": {
          "filename": "lib/index.ts",
          "line": 35
        },
        "parameters": [
          {
            "docs": {
              "summary": "The number."
            },
            "name": "value",
            "type": {
              "primitive": "number"
            }
          }
        ]
      },
      "interfaces": [
        "@scope/jsii-calc-lib.IDoublable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 30
      },
      "name": "Number",
      "properties": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "The number multiplied by 2."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 42
          },
          "name": "doubleValue",
          "overrides": "@scope/jsii-calc-lib.IDoublable",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "The number."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 35
          },
          "name": "value",
          "overrides": "@scope/jsii-calc-lib.Value",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@scope/jsii-calc-lib.Operation": {
      "abstract": true,
      "assembly": "@scope/jsii-calc-lib",
      "base": "@scope/jsii-calc-lib.Value",
      "docs": {
        "stability": "deprecated",
        "summary": "Represents an operation on values."
      },
      "fqn": "@scope/jsii-calc-lib.Operation",
      "initializer": {},
      "kind": "class",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 50
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "String representation of the value."
          },
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 51
          },
          "name": "toString",
          "overrides": "@scope/jsii-calc-lib.Value",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Operation"
    },
    "@scope/jsii-calc-lib.StructWithOnlyOptionals": {
      "assembly": "@scope/jsii-calc-lib",
      "datatype": true,
      "docs": {
        "stability": "deprecated",
        "summary": "This is a struct with only optional properties."
      },
      "fqn": "@scope/jsii-calc-lib.StructWithOnlyOptionals",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 84
      },
      "name": "StructWithOnlyOptionals",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "The first optional!"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 88
          },
          "name": "optional1",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 89
          },
          "name": "optional2",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 90
          },
          "name": "optional3",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "@scope/jsii-calc-lib.Value": {
      "abstract": true,
      "assembly": "@scope/jsii-calc-lib",
      "base": "@scope/jsii-calc-base.Base",
      "docs": {
        "stability": "deprecated",
        "summary": "Abstract class which represents a numeric value."
      },
      "fqn": "@scope/jsii-calc-lib.Value",
      "initializer": {},
      "kind": "class",
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "String representation of the value."
          },
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 15
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Value",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "The value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 10
          },
          "name": "value",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@scope/jsii-calc-lib.submodule.IReflectable": {
      "assembly": "@scope/jsii-calc-lib",
      "docs": {
        "stability": "deprecated"
      },
      "fqn": "@scope/jsii-calc-lib.submodule.IReflectable",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/submodule/index.ts",
        "line": 1
      },
      "name": "IReflectable",
      "namespace": "submodule",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/index.ts",
            "line": 2
          },
          "name": "entries",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.submodule.ReflectableEntry"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@scope/jsii-calc-lib.submodule.NestingClass": {
      "assembly": "@scope/jsii-calc-lib",
      "docs": {
        "stability": "deprecated",
        "summary": "This class is here to show we can use nested classes across module boundaries."
      },
      "fqn": "@scope/jsii-calc-lib.submodule.NestingClass",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/submodule/index.ts",
        "line": 22
      },
      "name": "NestingClass",
      "namespace": "submodule"
    },
    "@scope/jsii-calc-lib.submodule.NestingClass.NestedClass": {
      "assembly": "@scope/jsii-calc-lib",
      "docs": {
        "stability": "deprecated",
        "summary": "This class is here to show we can use nested classes across module boundaries."
      },
      "fqn": "@scope/jsii-calc-lib.submodule.NestingClass.NestedClass",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/submodule/index.ts",
        "line": 30
      },
      "name": "NestedClass",
      "namespace": "submodule.NestingClass",
      "properties": [
        {
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/index.ts",
            "line": 31
          },
          "name": "property",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct": {
      "assembly": "@scope/jsii-calc-lib",
      "datatype": true,
      "docs": {
        "remarks": "Normal.",
        "stability": "deprecated",
        "summary": "This is a struct, nested within a class."
      },
      "fqn": "@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/submodule/index.ts",
        "line": 37
      },
      "name": "NestedStruct",
      "namespace": "submodule.NestingClass",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/index.ts",
            "line": 38
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@scope/jsii-calc-lib.submodule.ReflectableEntry": {
      "assembly": "@scope/jsii-calc-lib",
      "datatype": true,
      "docs": {
        "stability": "deprecated"
      },
      "fqn": "@scope/jsii-calc-lib.submodule.ReflectableEntry",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/submodule/index.ts",
        "line": 5
      },
      "name": "ReflectableEntry",
      "namespace": "submodule",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/index.ts",
            "line": 6
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/index.ts",
            "line": 7
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "@scope/jsii-calc-lib.submodule.Reflector": {
      "assembly": "@scope/jsii-calc-lib",
      "docs": {
        "stability": "deprecated"
      },
      "fqn": "@scope/jsii-calc-lib.submodule.Reflector",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/submodule/index.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/submodule/index.ts",
            "line": 11
          },
          "name": "asMap",
          "parameters": [
            {
              "name": "reflectable",
              "type": {
                "fqn": "@scope/jsii-calc-lib.submodule.IReflectable"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "Reflector",
      "namespace": "submodule"
    }
  },
  "version": "0.0.0",
  "fingerprint": "eQh0XE5tmf4g2rxlhgkrIZJ93RG55/oLM+RNpmaQyGs="
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId.csproj 1`] = `
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- Package Identification -->
    <Description>A simple calcuator library built on JSII. (Stability: Deprecated)</Description>
    <PackageId>Amazon.JSII.Tests.CalculatorPackageId.LibPackageId</PackageId>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageVersion>0.0.0-devpreview</PackageVersion>
    <!-- Additional Metadata -->
    <Authors>Amazon Web Services</Authors>
    <Company>Amazon Web Services</Company>
    <Language>en-US</Language>
    <ProjectUrl>https://github.com/aws/jsii</ProjectUrl>
    <RepositoryUrl>https://github.com/aws/jsii.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <!-- Build Configuration -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <Nullable>enable</Nullable>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <TargetFramework>netcoreapp3.1</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedResource Include="scope-jsii-calc-lib-0.0.0.tgz" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Amazon.JSII.Runtime" Version="[0.0.0,0.0.1)" />
    <PackageReference Include="Amazon.JSII.Tests.CalculatorPackageId.BasePackageId" Version="[0.0.0,0.0.1)" />
    <PackageReference Include="Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId" Version="[0.0.0,0.0.1)" />
  </ItemGroup>
  <PropertyGroup>
    <NoWarn>0612,0618</NoWarn>
  </PropertyGroup>
</Project>


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/EnumFromScopedModule.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>Check that enums from \\@scoped packages can be references.</summary>
    /// <remarks>
    /// See awslabs/jsii#138
    /// 
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiEnum(nativeType: typeof(EnumFromScopedModule), fullyQualifiedName: "@scope/jsii-calc-lib.EnumFromScopedModule")]
    [System.Obsolete()]
    public enum EnumFromScopedModule
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiEnumMember(name: "VALUE1")]
        [System.Obsolete()]
        VALUE1,
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiEnumMember(name: "VALUE2")]
        [System.Obsolete()]
        VALUE2
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/IDoublable.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>The general contract for a concrete number.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IDoublable), fullyQualifiedName: "@scope/jsii-calc-lib.IDoublable")]
    [System.Obsolete()]
    public interface IDoublable
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "doubleValue", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        double DoubleValue
        {
            get;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/IDoublableProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>The general contract for a concrete number.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IDoublable), fullyQualifiedName: "@scope/jsii-calc-lib.IDoublable")]
    [System.Obsolete()]
    internal sealed class IDoublableProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IDoublable
    {
        private IDoublableProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "doubleValue", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        public double DoubleValue
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/IFriendly.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>Applies to classes that are considered friendly.</summary>
    /// <remarks>
    /// These classes can be greeted with
    /// a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.
    /// 
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IFriendly), fullyQualifiedName: "@scope/jsii-calc-lib.IFriendly")]
    [System.Obsolete()]
    public interface IFriendly
    {
        /// <summary>Say hello!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "hello", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        [System.Obsolete()]
        string Hello();
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/IFriendlyProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>Applies to classes that are considered friendly.</summary>
    /// <remarks>
    /// These classes can be greeted with
    /// a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.
    /// 
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IFriendly), fullyQualifiedName: "@scope/jsii-calc-lib.IFriendly")]
    [System.Obsolete()]
    internal sealed class IFriendlyProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IFriendly
    {
        private IFriendlyProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Say hello!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "hello", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        [System.Obsolete()]
        public string Hello()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/IMyFirstStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>This is the first struct we have created in jsii.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IMyFirstStruct), fullyQualifiedName: "@scope/jsii-calc-lib.MyFirstStruct")]
    [System.Obsolete()]
    public interface IMyFirstStruct
    {
        /// <summary>An awesome number value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "anumber", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        double Anumber
        {
            get;
        }

        /// <summary>A string value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "astring", typeJson: "{\\"primitive\\":\\"string\\"}")]
        [System.Obsolete()]
        string Astring
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "firstOptional", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}", isOptional: true)]
        [System.Obsolete()]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string[]? FirstOptional
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/IStructWithOnlyOptionals.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>This is a struct with only optional properties.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IStructWithOnlyOptionals), fullyQualifiedName: "@scope/jsii-calc-lib.StructWithOnlyOptionals")]
    [System.Obsolete()]
    public interface IStructWithOnlyOptionals
    {
        /// <summary>The first optional!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "optional1", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [System.Obsolete()]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Optional1
        {
            get
            {
                return null;
            }
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "optional2", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [System.Obsolete()]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? Optional2
        {
            get
            {
                return null;
            }
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "optional3", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true)]
        [System.Obsolete()]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        bool? Optional3
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/IThreeLevelsInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>Interface that inherits from packages 2 levels up the tree.</summary>
    /// <remarks>
    /// Their presence validates that .NET/Java/jsii-reflect can track all fields
    /// far enough up the tree.
    /// 
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IThreeLevelsInterface), fullyQualifiedName: "@scope/jsii-calc-lib.IThreeLevelsInterface")]
    [System.Obsolete()]
    public interface IThreeLevelsInterface : Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.IBaseInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "baz")]
        [System.Obsolete()]
        void Baz();
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/IThreeLevelsInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>Interface that inherits from packages 2 levels up the tree.</summary>
    /// <remarks>
    /// Their presence validates that .NET/Java/jsii-reflect can track all fields
    /// far enough up the tree.
    /// 
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IThreeLevelsInterface), fullyQualifiedName: "@scope/jsii-calc-lib.IThreeLevelsInterface")]
    [System.Obsolete()]
    internal sealed class IThreeLevelsInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IThreeLevelsInterface
    {
        private IThreeLevelsInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "baz")]
        [System.Obsolete()]
        public void Baz()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        [JsiiMethod(name: "bar")]
        public void Bar()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        [JsiiMethod(name: "foo")]
        public void Foo()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/Internal/DependencyResolution/Anchor.cs 1`] = `
#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Internal.DependencyResolution
{
    public sealed class Anchor
    {
        public Anchor()
        {
            new Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.Internal.DependencyResolution.Anchor();
            new Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Internal.DependencyResolution.Anchor();
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/MyFirstStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    #pragma warning disable CS8618

    /// <summary>This is the first struct we have created in jsii.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiByValue(fqn: "@scope/jsii-calc-lib.MyFirstStruct")]
    public class MyFirstStruct : Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IMyFirstStruct
    {
        /// <summary>An awesome number value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "anumber", typeJson: "{\\"primitive\\":\\"number\\"}", isOverride: true)]
        [System.Obsolete()]
        public double Anumber
        {
            get;
            set;
        }

        /// <summary>A string value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "astring", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        [System.Obsolete()]
        public string Astring
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "firstOptional", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}", isOptional: true, isOverride: true)]
        [System.Obsolete()]
        public string[]? FirstOptional
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/MyFirstStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>This is the first struct we have created in jsii.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IMyFirstStruct), fullyQualifiedName: "@scope/jsii-calc-lib.MyFirstStruct")]
    [System.Obsolete()]
    internal sealed class MyFirstStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IMyFirstStruct
    {
        private MyFirstStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>An awesome number value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "anumber", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        public double Anumber
        {
            get => GetInstanceProperty<double>();
        }

        /// <summary>A string value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "astring", typeJson: "{\\"primitive\\":\\"string\\"}")]
        [System.Obsolete()]
        public string Astring
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "firstOptional", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}", isOptional: true)]
        [System.Obsolete()]
        public string[]? FirstOptional
        {
            get => GetInstanceProperty<string[]?>();
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/Number.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>Represents a concrete number.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Number), fullyQualifiedName: "@scope/jsii-calc-lib.Number", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"The number.\\"},\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
    [System.Obsolete()]
    public class Number : Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IDoublable
    {
        /// <summary>Creates a Number object.</summary>
        /// <param name="value">The number.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [System.Obsolete()]
        public Number(double @value): base(new DeputyProps(new object[]{@value}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.Obsolete()]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Number(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.Obsolete()]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Number(DeputyProps props): base(props)
        {
        }

        /// <summary>The number multiplied by 2.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "doubleValue", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        public virtual double DoubleValue
        {
            get => GetInstanceProperty<double>();
        }

        /// <summary>The number.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        public override double Value
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/Operation.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>Represents an operation on values.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Operation), fullyQualifiedName: "@scope/jsii-calc-lib.Operation")]
    [System.Obsolete()]
    public abstract class Operation : Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_
    {
        protected Operation(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Operation(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Operation(DeputyProps props): base(props)
        {
        }

        /// <summary>String representation of the value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "toString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        [System.Obsolete()]
        public override abstract string ToString();

    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/OperationProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>Represents an operation on values.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Operation), fullyQualifiedName: "@scope/jsii-calc-lib.Operation")]
    [System.Obsolete()]
    internal sealed class OperationProxy : Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Operation
    {
        private OperationProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>The value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        public override double Value
        {
            get => GetInstanceProperty<double>();
        }

        /// <summary>String representation of the value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "toString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        [System.Obsolete()]
        public override string ToString()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/StructWithOnlyOptionals.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>This is a struct with only optional properties.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiByValue(fqn: "@scope/jsii-calc-lib.StructWithOnlyOptionals")]
    public class StructWithOnlyOptionals : Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IStructWithOnlyOptionals
    {
        /// <summary>The first optional!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optional1", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        [System.Obsolete()]
        public string? Optional1
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optional2", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true, isOverride: true)]
        [System.Obsolete()]
        public double? Optional2
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optional3", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true, isOverride: true)]
        [System.Obsolete()]
        public bool? Optional3
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/StructWithOnlyOptionalsProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>This is a struct with only optional properties.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IStructWithOnlyOptionals), fullyQualifiedName: "@scope/jsii-calc-lib.StructWithOnlyOptionals")]
    [System.Obsolete()]
    internal sealed class StructWithOnlyOptionalsProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IStructWithOnlyOptionals
    {
        private StructWithOnlyOptionalsProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>The first optional!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optional1", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [System.Obsolete()]
        public string? Optional1
        {
            get => GetInstanceProperty<string?>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optional2", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [System.Obsolete()]
        public double? Optional2
        {
            get => GetInstanceProperty<double?>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optional3", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true)]
        [System.Obsolete()]
        public bool? Optional3
        {
            get => GetInstanceProperty<bool?>();
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/Value_.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>Abstract class which represents a numeric value.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_), fullyQualifiedName: "@scope/jsii-calc-lib.Value")]
    [System.Obsolete()]
    public abstract class Value_ : Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.Base
    {
        protected Value_(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Value_(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Value_(DeputyProps props): base(props)
        {
        }

        /// <summary>String representation of the value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "toString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        [System.Obsolete()]
        public override string ToString()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>The value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        public abstract double Value
        {
            get;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CalculatorNamespace/LibNamespace/ValueProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.LibNamespace
{
    /// <summary>Abstract class which represents a numeric value.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_), fullyQualifiedName: "@scope/jsii-calc-lib.Value")]
    [System.Obsolete()]
    internal sealed class ValueProxy : Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_
    {
        private ValueProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>The value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        public override double Value
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CustomSubmoduleName/IReflectable.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CustomSubmoduleName
{
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IReflectable), fullyQualifiedName: "@scope/jsii-calc-lib.submodule.IReflectable")]
    [System.Obsolete()]
    public interface IReflectable
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "entries", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.submodule.ReflectableEntry\\"},\\"kind\\":\\"array\\"}}")]
        [System.Obsolete()]
        Amazon.JSII.Tests.CustomSubmoduleName.IReflectableEntry[] Entries
        {
            get;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CustomSubmoduleName/IReflectableEntry.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CustomSubmoduleName
{
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IReflectableEntry), fullyQualifiedName: "@scope/jsii-calc-lib.submodule.ReflectableEntry")]
    [System.Obsolete()]
    public interface IReflectableEntry
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "key", typeJson: "{\\"primitive\\":\\"string\\"}")]
        [System.Obsolete()]
        string Key
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"any\\"}")]
        [System.Obsolete()]
        object Value
        {
            get;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CustomSubmoduleName/IReflectableProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CustomSubmoduleName
{
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IReflectable), fullyQualifiedName: "@scope/jsii-calc-lib.submodule.IReflectable")]
    [System.Obsolete()]
    internal sealed class IReflectableProxy : DeputyBase, Amazon.JSII.Tests.CustomSubmoduleName.IReflectable
    {
        private IReflectableProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "entries", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.submodule.ReflectableEntry\\"},\\"kind\\":\\"array\\"}}")]
        [System.Obsolete()]
        public Amazon.JSII.Tests.CustomSubmoduleName.IReflectableEntry[] Entries
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CustomSubmoduleName.IReflectableEntry[]>();
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CustomSubmoduleName/NestingClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CustomSubmoduleName
{
    /// <summary>This class is here to show we can use nested classes across module boundaries.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CustomSubmoduleName.NestingClass), fullyQualifiedName: "@scope/jsii-calc-lib.submodule.NestingClass")]
    [System.Obsolete()]
    public class NestingClass : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NestingClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NestingClass(DeputyProps props): base(props)
        {
        }
        /// <summary>This class is here to show we can use nested classes across module boundaries.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CustomSubmoduleName.NestingClass.NestedClass), fullyQualifiedName: "@scope/jsii-calc-lib.submodule.NestingClass.NestedClass")]
        [System.Obsolete()]
        public class NestedClass : DeputyBase
        {
            /// <remarks>
            /// <strong>Stability</strong>: Deprecated
            /// </remarks>
            [System.Obsolete()]
            public NestedClass(): base(new DeputyProps(System.Array.Empty<object>()))
            {
            }

            /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
            /// <param name="reference">The Javascript-owned object reference</param>
            [System.Obsolete()]
            [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
            protected NestedClass(ByRefValue reference): base(reference)
            {
            }

            /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
            /// <param name="props">The deputy props</param>
            [System.Obsolete()]
            [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
            protected NestedClass(DeputyProps props): base(props)
            {
            }

            /// <remarks>
            /// <strong>Stability</strong>: Deprecated
            /// </remarks>
            [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}")]
            [System.Obsolete()]
            public virtual string Property
            {
                get => GetInstanceProperty<string>();
            }
        }
        /// <summary>This is a struct, nested within a class.</summary>
        /// <remarks>
        /// Normal.
        /// 
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiInterface(nativeType: typeof(INestedStruct), fullyQualifiedName: "@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct")]
        [System.Obsolete()]
        public interface INestedStruct
        {
            /// <remarks>
            /// <strong>Stability</strong>: Deprecated
            /// </remarks>
            [JsiiProperty(name: "name", typeJson: "{\\"primitive\\":\\"string\\"}")]
            [System.Obsolete()]
            string Name
            {
                get;
            }
        }
        /// <summary>This is a struct, nested within a class.</summary>
        /// <remarks>
        /// Normal.
        /// 
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiTypeProxy(nativeType: typeof(INestedStruct), fullyQualifiedName: "@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct")]
        [System.Obsolete()]
        internal sealed class NestedStructProxy : DeputyBase, Amazon.JSII.Tests.CustomSubmoduleName.NestingClass.INestedStruct
        {
            private NestedStructProxy(ByRefValue reference): base(reference)
            {
            }

            /// <remarks>
            /// <strong>Stability</strong>: Deprecated
            /// </remarks>
            [JsiiProperty(name: "name", typeJson: "{\\"primitive\\":\\"string\\"}")]
            [System.Obsolete()]
            public string Name
            {
                get => GetInstanceProperty<string>();
            }
        }
        #pragma warning disable CS8618

        /// <summary>This is a struct, nested within a class.</summary>
        /// <remarks>
        /// Normal.
        /// 
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiByValue(fqn: "@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct")]
        public class NestedStruct : Amazon.JSII.Tests.CustomSubmoduleName.NestingClass.INestedStruct
        {
            /// <remarks>
            /// <strong>Stability</strong>: Deprecated
            /// </remarks>
            [JsiiProperty(name: "name", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
            [System.Obsolete()]
            public string Name
            {
                get;
                set;
            }
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CustomSubmoduleName/ReflectableEntry.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CustomSubmoduleName
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiByValue(fqn: "@scope/jsii-calc-lib.submodule.ReflectableEntry")]
    public class ReflectableEntry : Amazon.JSII.Tests.CustomSubmoduleName.IReflectableEntry
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "key", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        [System.Obsolete()]
        public string Key
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"any\\"}", isOverride: true)]
        [System.Obsolete()]
        public object Value
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CustomSubmoduleName/ReflectableEntryProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CustomSubmoduleName
{
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IReflectableEntry), fullyQualifiedName: "@scope/jsii-calc-lib.submodule.ReflectableEntry")]
    [System.Obsolete()]
    internal sealed class ReflectableEntryProxy : DeputyBase, Amazon.JSII.Tests.CustomSubmoduleName.IReflectableEntry
    {
        private ReflectableEntryProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "key", typeJson: "{\\"primitive\\":\\"string\\"}")]
        [System.Obsolete()]
        public string Key
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"any\\"}")]
        [System.Obsolete()]
        public object Value
        {
            get => GetInstanceProperty<object>();
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/Amazon/JSII/Tests/CustomSubmoduleName/Reflector.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CustomSubmoduleName
{
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CustomSubmoduleName.Reflector), fullyQualifiedName: "@scope/jsii-calc-lib.submodule.Reflector")]
    [System.Obsolete()]
    public class Reflector : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [System.Obsolete()]
        public Reflector(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.Obsolete()]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Reflector(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.Obsolete()]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Reflector(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "asMap", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"map\\"}}}", parametersJson: "[{\\"name\\":\\"reflectable\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.submodule.IReflectable\\"}}]")]
        [System.Obsolete()]
        public virtual System.Collections.Generic.IDictionary<string, object> AsMap(Amazon.JSII.Tests.CustomSubmoduleName.IReflectable reflectable)
        {
            return InvokeInstanceMethod<System.Collections.Generic.IDictionary<string, object>>(new System.Type[]{typeof(Amazon.JSII.Tests.CustomSubmoduleName.IReflectable)}, new object[]{reflectable});
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/AssemblyInfo.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

[assembly: JsiiAssembly("@scope/jsii-calc-lib", "0.0.0", "scope-jsii-calc-lib-0.0.0.tgz")]

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/scope-jsii-calc-lib-0.0.0.tgz 1`] = `dotnet/Amazon.JSII.Tests.CalculatorPackageId.LibPackageId/scope-jsii-calc-lib-0.0.0.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/golang/_jsii/bundled-runtime.go 1`] = `
// Embedded data for the tarball containing the runtime of @scope/jsii-calc-lib@0.0.0
const tarball = []byte {
    0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xed, 0x7d, 0x69, 0x5b, 0xe3,
    0x92, 0xf0, 0x7c, 0xe6, 0x57, 0x68, 0xdc, 0xcf, 0xbb, 0x53, 0xf4, 0x82, 0x91, 0xe4, 0x0b,
    0x6f, 0xcf, 0x0e, 0x37, 0xa6, 0x29, 0x28, 0xcc, 0x4d, 0x77, 0x4f, 0xb7, 0x2c, 0xa5, 0x6d,
    0xb2, 0xe4, 0x96, 0x64, 0xc0, 0xcc, 0xd6, 0x7f, 0x7f, 0x23, 0xf2, 0x52, 0xea, 0xf0, 0x45,
    0xa0, 0x76, 0xb6, 0xbc, 0xdb, 0x53, 0x58, 0xce, 0x23, 0x32, 0xee, 0x88, 0x4c, 0x45, 0x0e,
    0xfb, 0xde, 0xea, 0x91, 0x8d, 0xf2, 0xc7, 0xc8, 0x75, 0xff, 0xf2, 0x65, 0x3e, 0xba, 0xae,
    0xab, 0x55, 0xad, 0xe8, 0xb9, 0xae, 0x57, 0x1b, 0x75, 0xb3, 0xae, 0xfd, 0xa5, 0x52, 0xab,
    0x86, 0x51, 0xaf, 0xeb, 0xd0, 0x4e, 0x37, 0x74, 0xb3, 0x02, 0xcf, 0xf4, 0x2f, 0x04, 0x4f,
    0x33, 0x8a, 0x62, 0x2b, 0x04, 0x50, 0x3e, 0x77, 0x1c, 0xba, 0x18, 0x5d, 0x93, 0xff, 0xfe,
    0xf9, 0xfc, 0x6b, 0x45, 0xd3, 0x4a, 0xd6, 0x28, 0xee, 0x07, 0x61, 0xe9, 0x07, 0x0d, 0xbf,
    0x77, 0xdf, 0x1a, 0x10, 0xf8, 0x56, 0xda, 0x1a, 0x58, 0xcf, 0x81, 0xaf, 0x5d, 0x93, 0x8e,
    0x4e, 0xc2, 0x07, 0xd7, 0x26, 0x51, 0x69, 0x8d, 0x35, 0x09, 0xc2, 0x9e, 0xe5, 0xbb, 0xcf,
    0xec, 0x06, 0x3e, 0x34, 0x8d, 0xc3, 0x11, 0xe1, 0xbf, 0x84, 0x81, 0x07, 0xcd, 0x7e, 0xd0,
    0xa1, 0x5f, 0x93, 0xd1, 0xe9, 0xd7, 0xdf, 0x78, 0xa3, 0x51, 0xe8, 0xe1, 0x04, 0xfd, 0x38,
    0x46, 0x3f, 0x6c, 0x6c, 0x58, 0x8f, 0x51, 0xd9, 0xa2, 0x93, 0x95, 0xed, 0x60, 0x80, 0x4d,
    0x61, 0xc3, 0x92, 0x43, 0x86, 0xc4, 0x77, 0x88, 0x6f, 0xbb, 0x74, 0x48, 0x0e, 0xde, 0x3f,
    0x3b, 0x18, 0x92, 0x0d, 0xe4, 0xd8, 0x75, 0xdb, 0xf2, 0xec, 0xf5, 0x8e, 0x15, 0x51, 0x78,
    0xa9, 0x97, 0xe1, 0xff, 0x04, 0x88, 0x85, 0xcd, 0xd6, 0x83, 0x6e, 0xb6, 0x79, 0x7e, 0xb6,
    0x8e, 0x17, 0x44, 0xa3, 0x90, 0xcc, 0x9e, 0xf2, 0x5f, 0x62, 0x91, 0xc0, 0x44, 0x3d, 0x12,
    0xca, 0x23, 0x1c, 0x30, 0x88, 0x7d, 0x12, 0xa7, 0x9e, 0x71, 0xec, 0x46, 0x43, 0xcb, 0x56,
    0x5c, 0x3e, 0x3a, 0x6f, 0xb5, 0xca, 0x17, 0x24, 0x8a, 0xa3, 0xf2, 0x0e, 0x0c, 0x3f, 0xf2,
    0x38, 0x08, 0x4f, 0x44, 0xc3, 0xf2, 0x36, 0xcc, 0x26, 0xbf, 0xf1, 0xf5, 0xf1, 0xd1, 0x86,
    0x80, 0x5b, 0xce, 0xac, 0xd1, 0x3e, 0x88, 0x86, 0x74, 0x34, 0xf9, 0xad, 0x24, 0x07, 0xfb,
    0x8c, 0x5b, 0xea, 0x05, 0x08, 0xb5, 0xfa, 0xe4, 0xa3, 0xf5, 0x60, 0x65, 0x57, 0x32, 0xb0,
    0x88, 0x9f, 0x79, 0x88, 0x04, 0x0f, 0x63, 0xb7, 0x6b, 0xd9, 0x31, 0x83, 0xc9, 0x96, 0x10,
    0xa4, 0xad, 0xa5, 0x1b, 0xf7, 0xc2, 0x60, 0x34, 0x64, 0x2d, 0xa3, 0xa0, 0x1b, 0x3f, 0x5a,
    0x11, 0xac, 0x80, 0xd8, 0x2e, 0xc7, 0xb8, 0x8c, 0x92, 0xd2, 0xe7, 0x53, 0xd1, 0xf2, 0xa7,
    0x2f, 0x27, 0x30, 0x94, 0x29, 0x0c, 0x85, 0x6b, 0xfe, 0x18, 0xe5, 0x28, 0x35, 0x1c, 0xe0,
    0xc5, 0xc4, 0x2f, 0x1c, 0x63, 0x38, 0x06, 0x5e, 0xcf, 0xa2, 0xa4, 0xe4, 0xb8, 0x51, 0x7c,
    0x65, 0x8a, 0x8e, 0x55, 0xce, 0x8c, 0x95, 0x5a, 0xd2, 0x20, 0x70, 0x46, 0x5e, 0xa6, 0xed,
    0xd8, 0xf6, 0xf7, 0xcc, 0xbc, 0x2b, 0xea, 0xbf, 0x9f, 0xe6, 0xe4, 0xfa, 0x57, 0xe4, 0xd8,
    0xee, 0xf2, 0xf9, 0x96, 0x8d, 0xf9, 0x66, 0xdc, 0x2b, 0x11, 0xf9, 0x15, 0x70, 0x71, 0xd0,
    0x16, 0x2f, 0xcb, 0x55, 0x2d, 0x91, 0xa7, 0x0b, 0x31, 0x35, 0x83, 0xb7, 0x7f, 0x0f, 0xba,
    0x79, 0x5c, 0x51, 0xd5, 0x91, 0x1d, 0xba, 0x43, 0x6e, 0x7d, 0x4a, 0x5b, 0x5a, 0xe4, 0x0e,
    0x1e, 0xd1, 0x28, 0x8a, 0x10, 0x43, 0x9a, 0xe7, 0x76, 0x42, 0x2b, 0x1c, 0x6b, 0x9d, 0x91,
    0xc5, 0x1a, 0x58, 0x31, 0xca, 0x5c, 0x25, 0xd6, 0x3b, 0xb0, 0x15, 0x73, 0x02, 0x6a, 0x3f,
    0xb6, 0x15, 0x13, 0x4a, 0xbe, 0x36, 0xb1, 0x3c, 0x6f, 0xac, 0x7d, 0x04, 0xbf, 0x40, 0x4b,
    0xd1, 0xba, 0x30, 0x64, 0xd4, 0x0f, 0xc0, 0x4e, 0x95, 0xcb, 0xc2, 0xc0, 0x80, 0xe7, 0xd0,
    0x3d, 0x37, 0x1e, 0x63, 0x3f, 0x65, 0x14, 0x09, 0x65, 0x3f, 0x18, 0x90, 0x21, 0xa7, 0xab,
    0x75, 0x3d, 0x37, 0xee, 0x8f, 0x3a, 0x68, 0xe6, 0xd0, 0xea, 0x51, 0x42, 0x30, 0xa0, 0xf0,
    0x2b, 0x12, 0x46, 0x7c, 0x49, 0x89, 0x29, 0x2b, 0x79, 0x60, 0x78, 0x7d, 0x66, 0xb2, 0xb6,
    0x53, 0xfa, 0x64, 0xdd, 0x14, 0x3f, 0x09, 0x4b, 0x9d, 0x23, 0x2b, 0x2c, 0x9f, 0xb5, 0x08,
    0x30, 0x88, 0x5c, 0xc0, 0xc8, 0x58, 0x59, 0xb1, 0x0b, 0xa0, 0xf2, 0x47, 0x82, 0xf7, 0xa2,
    0x89, 0x63, 0xa0, 0xb2, 0x18, 0x0f, 0xe9, 0x3c, 0x00, 0x7d, 0xa9, 0xd8, 0x84, 0x17, 0xac,
    0x8c, 0xad, 0x25, 0x32, 0x22, 0x00, 0x7c, 0x80, 0x42, 0x48, 0x57, 0xba, 0xa1, 0x97, 0x0d,
    0xc0, 0x68, 0xd4, 0x61, 0x8c, 0x31, 0xcd, 0xc8, 0x03, 0x34, 0x65, 0xd9, 0x50, 0x55, 0x64,
    0x60, 0x53, 0x37, 0xa4, 0xe5, 0xbf, 0xcf, 0xfe, 0x06, 0xbf, 0x76, 0x5d, 0x8f, 0x08, 0x2c,
    0x10, 0x1b, 0x2e, 0x58, 0xf8, 0xa7, 0x72, 0x1c, 0x29, 0x7c, 0x09, 0xcf, 0x7d, 0xfc, 0xdd,
    0x4c, 0xc1, 0x6e, 0xe2, 0xc7, 0x65, 0x6a, 0x49, 0xe0, 0xa8, 0x60, 0x70, 0x2e, 0x56, 0x40,
    0xa7, 0x58, 0x76, 0x0b, 0x74, 0xd5, 0xc2, 0x0a, 0xc2, 0xa6, 0xb3, 0xfd, 0x2e, 0x11, 0xf6,
    0x3f, 0x71, 0xbe, 0x62, 0xf9, 0x9e, 0x2c, 0xa9, 0x48, 0x88, 0x59, 0xc3, 0x4f, 0x10, 0xdb,
    0x36, 0xf3, 0x98, 0x7c, 0x89, 0xad, 0x39, 0x76, 0x3b, 0x79, 0x23, 0xf3, 0x12, 0x03, 0x03,
    0x25, 0x96, 0x45, 0x0e, 0xf4, 0xc0, 0x84, 0xf2, 0x7c, 0xd4, 0xed, 0xba, 0x4f, 0x38, 0xd8,
    0x43, 0x1e, 0x40, 0xd8, 0x1f, 0x5c, 0xf2, 0x58, 0x4a, 0xd9, 0xde, 0x94, 0xdd, 0xc9, 0xd2,
    0xc0, 0xde, 0x4c, 0xb6, 0x35, 0x89, 0xe8, 0xb1, 0x81, 0xe7, 0x32, 0x2f, 0x4a, 0x87, 0x1c,
    0xe5, 0xdd, 0xbd, 0xab, 0x0f, 0xed, 0xbd, 0xab, 0xd6, 0xde, 0x75, 0x29, 0xc7, 0xe4, 0x0b,
    0x17, 0x82, 0x97, 0x5a, 0x79, 0xca, 0xde, 0x4c, 0xb4, 0x35, 0xb9, 0x6e, 0x39, 0xd6, 0x9b,
    0x56, 0x54, 0xa4, 0x4c, 0xe7, 0xcf, 0x52, 0x96, 0xef, 0x40, 0x7d, 0xcd, 0xd2, 0x2d, 0x7b,
    0x68, 0xb0, 0x1f, 0x82, 0x84, 0xe2, 0x6f, 0x4e, 0x4e, 0x95, 0x94, 0xac, 0x28, 0x22, 0x83,
    0x37, 0x9e, 0xaa, 0x6e, 0x39, 0x53, 0xdb, 0x19, 0x85, 0x11, 0x82, 0xe6, 0x0b, 0xef, 0xf1,
    0xe9, 0x9c, 0x10, 0x0d, 0x14, 0xa4, 0x67, 0x75, 0x98, 0x92, 0xfc, 0xce, 0xa8, 0x6c, 0xaa,
    0x9b, 0x64, 0x54, 0xd4, 0x26, 0xa3, 0x01, 0x0c, 0x47, 0x1b, 0xec, 0xf4, 0x89, 0x7d, 0xaf,
    0x7d, 0x2b, 0xd6, 0x08, 0xc0, 0x1f, 0x69, 0x5d, 0x58, 0x81, 0xf6, 0xeb, 0xaf, 0x0c, 0x40,
    0x13, 0xca, 0x1d, 0x0c, 0xa3, 0xaf, 0x75, 0x88, 0x16, 0x92, 0x2e, 0x09, 0x21, 0xc2, 0x21,
    0x39, 0xcf, 0x06, 0xdd, 0x3f, 0xfd, 0x49, 0x8b, 0x2b, 0xc6, 0x8e, 0xec, 0x79, 0x0f, 0x5a,
    0xbb, 0x22, 0x0c, 0xc9, 0xd3, 0xa5, 0x29, 0xe6, 0x66, 0x23, 0x07, 0xeb, 0x00, 0x68, 0x01,
    0xae, 0xc4, 0x99, 0x5a, 0xc6, 0x3f, 0xc9, 0x12, 0x61, 0x2a, 0x76, 0x27, 0x7a, 0x66, 0x02,
    0xab, 0xad, 0xe3, 0xcb, 0x3d, 0xa3, 0x50, 0x81, 0x7e, 0xf1, 0x69, 0xcd, 0xbc, 0x62, 0xfd,
    0x22, 0x42, 0xb4, 0x2c, 0x24, 0xd0, 0xf4, 0xc8, 0x00, 0xe9, 0xda, 0xda, 0x0d, 0x46, 0x1d,
    0xc6, 0xe5, 0xf1, 0xfa, 0x62, 0x0c, 0x7c, 0xd1, 0x27, 0x5a, 0x8f, 0xf8, 0x24, 0xb4, 0x3c,
    0x0e, 0xfc, 0x38, 0x04, 0x6d, 0x48, 0x9d, 0x2d, 0x0b, 0xbf, 0xda, 0x21, 0x89, 0x89, 0x06,
    0x03, 0x5a, 0x2f, 0xc8, 0xb0, 0xca, 0xc2, 0x72, 0x6c, 0xea, 0xfa, 0x31, 0x09, 0xbb, 0x29,
    0xb1, 0x34, 0x5e, 0x35, 0x2b, 0x39, 0x30, 0x45, 0xcf, 0x22, 0x90, 0x86, 0x21, 0x80, 0x0e,
    0x80, 0x4c, 0x61, 0x65, 0x50, 0x15, 0x14, 0x2f, 0xa9, 0x3c, 0xcb, 0x72, 0xf9, 0xcd, 0x1d,
    0x46, 0x31, 0xe7, 0x82, 0xdc, 0x1c, 0x53, 0x71, 0x33, 0x2f, 0x7e, 0x52, 0x38, 0xaa, 0xce,
    0x7c, 0x07, 0x51, 0x45, 0xae, 0x2c, 0x6f, 0x94, 0x89, 0x20, 0xb8, 0x27, 0x9a, 0x01, 0x60,
    0xba, 0x03, 0x37, 0x76, 0x1f, 0x68, 0x5f, 0xc6, 0x2f, 0xa9, 0xc5, 0xe6, 0x05, 0x68, 0x0e,
    0xd8, 0x0f, 0x5d, 0xe2, 0x3b, 0xde, 0x78, 0x59, 0x92, 0xa1, 0x58, 0x01, 0x60, 0xfb, 0x08,
    0x15, 0x0f, 0x87, 0x93, 0xca, 0xb9, 0x17, 0x12, 0x82, 0xb1, 0xc6, 0x23, 0xb8, 0xd2, 0xbf,
    0x96, 0xf6, 0x6b, 0xa9, 0x4f, 0x3c, 0x2f, 0xf8, 0xb5, 0xa4, 0x81, 0x3c, 0xfc, 0x0a, 0xde,
    0xe0, 0x74, 0xc6, 0x04, 0xbe, 0x02, 0x66, 0xa2, 0xc8, 0xf5, 0x7b, 0x9a, 0xe5, 0x3b, 0xa0,
    0xc9, 0x18, 0xba, 0x78, 0x1e, 0x28, 0xf7, 0x68, 0x18, 0xc0, 0x93, 0x0e, 0x28, 0x7d, 0xcd,
    0x41, 0x84, 0xba, 0x23, 0x9f, 0xb6, 0xe9, 0xf2, 0x95, 0x68, 0x03, 0xcb, 0xf7, 0x51, 0x94,
    0x6c, 0x70, 0xb6, 0x86, 0x43, 0x0f, 0x98, 0x55, 0x8b, 0x03, 0x09, 0x3d, 0xb5, 0x3e, 0xe0,
    0xa0, 0xc0, 0x46, 0xae, 0x03, 0xf6, 0x25, 0x99, 0x70, 0x51, 0xa1, 0x95, 0x28, 0x7f, 0x55,
    0xad, 0x6d, 0x16, 0xd8, 0x17, 0xf0, 0x4c, 0x9c, 0x57, 0x11, 0xca, 0x8c, 0x8c, 0x28, 0xc8,
    0xb7, 0xc6, 0x1a, 0x65, 0x81, 0xbf, 0x4e, 0x96, 0xdc, 0xa5, 0x0b, 0x67, 0xdd, 0x9c, 0x29,
    0x14, 0xa6, 0xb4, 0x58, 0x82, 0xa2, 0x1e, 0x85, 0x7e, 0xc1, 0xaa, 0x0b, 0xe5, 0x35, 0x2b,
    0x80, 0x4a, 0x60, 0xe7, 0x52, 0xaa, 0xcd, 0xa7, 0x95, 0xa2, 0xbf, 0x27, 0x1b, 0xc0, 0x84,
    0xe6, 0x10, 0xed, 0x8b, 0x3e, 0xc8, 0xda, 0x31, 0x79, 0x20, 0x5e, 0xd4, 0x92, 0x8c, 0xf5,
    0xc4, 0xdc, 0x0d, 0x35, 0xa0, 0x74, 0x84, 0x3e, 0x97, 0xf6, 0x60, 0x79, 0xae, 0x03, 0x34,
    0x32, 0x53, 0x3e, 0xd9, 0xbb, 0xd8, 0x38, 0x82, 0x28, 0x81, 0x8d, 0x0d, 0xbe, 0x99, 0x07,
    0x39, 0xd5, 0x06, 0xc8, 0x5a, 0xf7, 0x9a, 0x05, 0x42, 0xdd, 0x75, 0x89, 0xe7, 0x44, 0xbf,
    0x5d, 0x2b, 0x04, 0x17, 0x2f, 0x18, 0xf5, 0xfa, 0xda, 0x68, 0x88, 0x42, 0x0f, 0x6d, 0x08,
    0x0c, 0x49, 0x96, 0xeb, 0x66, 0xc0, 0xb8, 0x7e, 0x9f, 0x84, 0x6e, 0xcc, 0x3d, 0x48, 0xe9,
    0x9a, 0x9a, 0x47, 0xb1, 0x94, 0x9e, 0x74, 0x31, 0xa1, 0x2e, 0x44, 0xb6, 0xec, 0x2a, 0x05,
    0x2d, 0x6c, 0xc5, 0x99, 0xaa, 0x72, 0x0b, 0xd3, 0x7f, 0xc9, 0x28, 0x39, 0x6e, 0x78, 0x0d,
    0x61, 0xe8, 0x6f, 0xaa, 0x2f, 0x5e, 0x4f, 0x15, 0x18, 0x7a, 0x73, 0xa6, 0x2e, 0xe8, 0x58,
    0xf3, 0xb8, 0xa7, 0xc5, 0x4c, 0x30, 0x5b, 0x52, 0xdf, 0x8f, 0xf7, 0xdd, 0x30, 0x8a, 0xcf,
    0x67, 0x76, 0xfc, 0x42, 0x09, 0xb5, 0x62, 0x8b, 0x6b, 0x21, 0x15, 0xf3, 0x4b, 0x70, 0x5d,
    0x48, 0x73, 0x23, 0x2a, 0x16, 0x5d, 0x04, 0x52, 0x8b, 0x28, 0x94, 0xda, 0x23, 0xd1, 0xfa,
    0xeb, 0x6b, 0xe0, 0xbd, 0xd2, 0xdc, 0x21, 0x98, 0x62, 0x1a, 0x46, 0x2f, 0x26, 0x36, 0xe9,
    0xbf, 0x2a, 0x83, 0xd7, 0xf3, 0xfc, 0x2d, 0x7a, 0x4e, 0x80, 0xea, 0x75, 0xdd, 0xd8, 0xc9,
    0x73, 0x0b, 0xfc, 0x9d, 0x47, 0x12, 0x05, 0x03, 0x11, 0x35, 0xa0, 0xce, 0x1d, 0x25, 0x1a,
    0xb5, 0x28, 0xda, 0xf9, 0x75, 0x3d, 0xdf, 0x46, 0x63, 0xa6, 0x40, 0x59, 0xdc, 0x7d, 0x5d,
    0xd7, 0x3b, 0x21, 0x5a, 0x7d, 0x15, 0x92, 0x68, 0xcc, 0xba, 0x7f, 0x6d, 0x94, 0x98, 0xed,
    0x58, 0xdc, 0x2d, 0x59, 0x94, 0x12, 0x79, 0x6f, 0xe6, 0x35, 0x29, 0xf1, 0xb5, 0xe0, 0x77,
    0x26, 0x7e, 0xa9, 0xd2, 0x3c, 0xa5, 0x9b, 0x38, 0x96, 0x97, 0xc6, 0x72, 0x20, 0x9e, 0x16,
    0x5a, 0x4c, 0x01, 0x3b, 0xf0, 0xd0, 0x7b, 0x72, 0x73, 0x99, 0x6c, 0xfa, 0x2b, 0xf1, 0xc8,
    0xf8, 0xf1, 0x04, 0x67, 0x74, 0x1e, 0x77, 0x34, 0xb3, 0x08, 0xda, 0x49, 0xe8, 0x62, 0x2b,
    0xad, 0xf1, 0x42, 0xde, 0xeb, 0x6c, 0xc3, 0x77, 0xc2, 0xc4, 0xf9, 0x45, 0x16, 0x4f, 0x1c,
    0x28, 0x1c, 0x38, 0x1d, 0x53, 0x7f, 0xb6, 0x15, 0x6c, 0x13, 0xe6, 0xde, 0x82, 0xe7, 0xf8,
    0x29, 0x9b, 0x93, 0xb4, 0xe2, 0x03, 0x13, 0x07, 0x14, 0x01, 0x97, 0xf9, 0x39, 0x85, 0x87,
    0x81, 0x98, 0x4b, 0x31, 0xa5, 0x32, 0xa7, 0xd4, 0x38, 0x23, 0xd0, 0x6c, 0x5a, 0x2d, 0xe8,
    0x04, 0xfe, 0x29, 0x17, 0xa6, 0xf8, 0x66, 0x89, 0xc7, 0x7c, 0xc2, 0x21, 0x44, 0xa3, 0x52,
    0x9c, 0x63, 0x68, 0x85, 0x30, 0x42, 0x9c, 0xcd, 0x6a, 0x6a, 0x59, 0x4e, 0x2f, 0x54, 0x07,
    0xd7, 0x24, 0x47, 0x82, 0xdc, 0x7c, 0xb4, 0x8f, 0x80, 0xf9, 0x21, 0x97, 0x68, 0x99, 0x37,
    0xcb, 0x9b, 0x9d, 0x49, 0xcc, 0xff, 0x5b, 0x8e, 0x19, 0xe6, 0x76, 0xfd, 0x33, 0x09, 0xbd,
    0x5e, 0x3f, 0x4d, 0x49, 0x7c, 0x01, 0x87, 0xa8, 0xa2, 0x4f, 0x74, 0x88, 0xb2, 0x4c, 0x3b,
    0x27, 0xb4, 0x2c, 0xd3, 0x9a, 0x90, 0x59, 0x1b, 0x8c, 0xbc, 0xd8, 0xc5, 0xd4, 0x8c, 0xa3,
    0xc6, 0x9a, 0xf9, 0xd5, 0x98, 0xd9, 0xea, 0x6c, 0x33, 0x3b, 0x31, 0xd5, 0x17, 0x3c, 0x90,
    0x74, 0x1d, 0x8a, 0xc9, 0xb9, 0x93, 0xbc, 0xb4, 0xe7, 0x17, 0x72, 0x97, 0x96, 0x4f, 0xb7,
    0x86, 0x4e, 0x8a, 0x4e, 0x9a, 0x44, 0xa7, 0xbc, 0x8e, 0x98, 0x83, 0x42, 0x6f, 0x9a, 0xc1,
    0x05, 0x49, 0xb4, 0x32, 0x2e, 0xc1, 0x24, 0x4f, 0xeb, 0x7f, 0x81, 0x79, 0xf5, 0xb5, 0x40,
    0x08, 0x0f, 0xb4, 0x50, 0x7a, 0x2c, 0xba, 0x8f, 0x97, 0xa0, 0x64, 0x92, 0x99, 0xfd, 0xf4,
    0x5a, 0xb5, 0x96, 0xd7, 0xaa, 0x5f, 0x47, 0xda, 0x95, 0xc5, 0x2b, 0xa1, 0x40, 0x3d, 0xc7,
    0x97, 0x46, 0xfa, 0xb3, 0xa2, 0x98, 0xa5, 0x4b, 0x66, 0xcd, 0x98, 0x29, 0x99, 0x71, 0x70,
    0x10, 0xa9, 0xbc, 0x48, 0x38, 0xdf, 0x3e, 0x8f, 0x9b, 0x70, 0xe8, 0x6c, 0x01, 0x67, 0x69,
    0x6b, 0x37, 0xee, 0x9f, 0xfa, 0xde, 0x58, 0x84, 0x12, 0xa9, 0xb3, 0x08, 0x5f, 0x4f, 0x9e,
    0x92, 0xf9, 0x21, 0x80, 0x17, 0x04, 0xd8, 0x1b, 0x6b, 0x22, 0xcc, 0xd1, 0x12, 0xaf, 0x61,
    0x79, 0x9e, 0x84, 0x81, 0x57, 0xcd, 0x17, 0x6d, 0x56, 0x73, 0x30, 0x8b, 0x9e, 0x33, 0xe1,
    0x5a, 0x32, 0x47, 0x17, 0x32, 0x8b, 0x27, 0x88, 0x32, 0x65, 0xd3, 0xe5, 0x75, 0x6d, 0xf3,
    0xec, 0x50, 0x5a, 0xc0, 0x6c, 0x7c, 0x6e, 0x18, 0xfd, 0x2d, 0x91, 0x91, 0x8c, 0xc4, 0xb1,
    0x3b, 0x07, 0x2e, 0xd0, 0x6c, 0x2e, 0x15, 0xfb, 0x6f, 0x9b, 0xd0, 0xfb, 0x4a, 0xb0, 0xdf,
    0xe7, 0xc6, 0x7e, 0x65, 0xa9, 0xd8, 0xef, 0x04, 0x81, 0x47, 0x2c, 0xff, 0xb3, 0x7d, 0x50,
    0x63, 0x5f, 0xc7, 0xff, 0xa4, 0x3b, 0x64, 0xdb, 0xea, 0xa1, 0xeb, 0xcf, 0x36, 0x5e, 0x5b,
    0x5a, 0xb6, 0xdb, 0xaf, 0x3d, 0xf6, 0x5d, 0xbb, 0x9f, 0x78, 0x46, 0x68, 0xd4, 0x80, 0x4d,
    0xe8, 0xda, 0x19, 0xc7, 0x68, 0x3e, 0xeb, 0x95, 0x71, 0x96, 0xdf, 0xcc, 0x13, 0xad, 0x2f,
    0x88, 0xfe, 0x7b, 0x3a, 0x9b, 0xc6, 0xec, 0x30, 0xb0, 0xd8, 0xd9, 0x7c, 0x7b, 0xbf, 0x31,
    0x4b, 0x5f, 0x93, 0x5f, 0xf1, 0x75, 0xed, 0x7c, 0x18, 0xb3, 0x55, 0x6a, 0x41, 0xa8, 0xff,
    0x51, 0xbb, 0x3c, 0x54, 0x5e, 0x6e, 0xb5, 0xd9, 0x91, 0x88, 0xd7, 0x38, 0x9e, 0xb8, 0x90,
    0x9a, 0x00, 0xe2, 0xf2, 0x9d, 0x6e, 0x39, 0xd1, 0xd4, 0xf3, 0x08, 0x13, 0xbd, 0xef, 0x62,
    0x52, 0x47, 0xec, 0x93, 0x57, 0x2a, 0xde, 0x48, 0x74, 0x5e, 0x4b, 0x2a, 0xa6, 0xa2, 0x52,
    0xe7, 0xec, 0x8c, 0x25, 0xa8, 0xe9, 0xd0, 0x25, 0xd1, 0x3c, 0x02, 0xf2, 0x99, 0xdb, 0x52,
    0x31, 0xa1, 0x42, 0xe5, 0x3d, 0x00, 0x6d, 0xfc, 0xb6, 0x3b, 0x57, 0x09, 0x5c, 0x27, 0x24,
    0x41, 0xaf, 0xef, 0x50, 0xab, 0xfd, 0x46, 0xc7, 0x8b, 0x21, 0xf0, 0x66, 0xae, 0x0b, 0xfc,
    0x27, 0x21, 0xc1, 0x93, 0x8b, 0xf8, 0x22, 0x17, 0x9e, 0xd2, 0xc0, 0x93, 0x56, 0xa3, 0x88,
    0x3e, 0xc0, 0x49, 0x1c, 0x79, 0xa0, 0xd1, 0xb2, 0xc3, 0x00, 0x3a, 0xb0, 0x45, 0x68, 0x9d,
    0xe4, 0x3b, 0x56, 0xb8, 0x78, 0x68, 0x3e, 0x01, 0x0f, 0xcb, 0x75, 0x6a, 0xe6, 0x52, 0x10,
    0xfe, 0xbd, 0x26, 0xb9, 0x7d, 0x51, 0x08, 0xda, 0x04, 0x0d, 0xf1, 0x52, 0xda, 0xd3, 0x2f,
    0xf9, 0xc6, 0x07, 0x93, 0x70, 0x32, 0xc9, 0x03, 0x4e, 0xd6, 0xb2, 0xc8, 0x96, 0x67, 0x4e,
    0x97, 0xec, 0x48, 0xcf, 0xc5, 0x73, 0xd3, 0xb6, 0xcc, 0x8a, 0x56, 0x5e, 0xcc, 0x72, 0x13,
    0x67, 0xf9, 0x9b, 0x6c, 0x5f, 0x9d, 0x15, 0xaa, 0xcc, 0x4e, 0xfb, 0x72, 0x2c, 0x8c, 0x17,
    0xd4, 0xa6, 0xe6, 0x75, 0x3e, 0x57, 0xd1, 0x73, 0xc6, 0x7e, 0x9d, 0x13, 0x7b, 0xca, 0x59,
    0x93, 0x20, 0x1c, 0x58, 0xde, 0x67, 0x1c, 0x88, 0xcd, 0xe6, 0x69, 0xd7, 0x84, 0x3e, 0xc0,
    0x2d, 0x3d, 0x4e, 0x4f, 0xa5, 0x66, 0x99, 0xd2, 0xff, 0xc5, 0x0e, 0xf7, 0xcd, 0x27, 0xa2,
    0xd7, 0xaa, 0xd2, 0x22, 0x9a, 0x05, 0x6f, 0xe9, 0x32, 0xfa, 0x6f, 0xec, 0x45, 0x56, 0x66,
    0x6d, 0xe9, 0xbf, 0x6f, 0x2e, 0xbb, 0x39, 0xe7, 0xf1, 0x8d, 0x36, 0x4f, 0x5e, 0x28, 0x55,
    0xf0, 0xdf, 0x48, 0x98, 0x6a, 0x13, 0x65, 0x69, 0x32, 0x84, 0xdf, 0x02, 0xb1, 0xe9, 0x6f,
    0xcc, 0x94, 0xa0, 0x7b, 0xb2, 0x64, 0xe3, 0xf7, 0x6f, 0x93, 0x56, 0x9f, 0x1b, 0xc9, 0xb3,
    0x24, 0xbf, 0x2c, 0x19, 0x64, 0xf9, 0xe3, 0xe5, 0x2b, 0xa9, 0xe0, 0x85, 0x07, 0x22, 0x5f,
    0x0b, 0x05, 0xcb, 0x3e, 0xbd, 0xf8, 0x55, 0xb8, 0xf2, 0xc6, 0x0b, 0xce, 0x69, 0xbc, 0xd9,
    0x2d, 0x73, 0x33, 0xbe, 0x31, 0xdb, 0xc1, 0xb6, 0xa2, 0xf7, 0xd6, 0x30, 0xcd, 0xf9, 0x13,
    0x69, 0x66, 0x8f, 0x69, 0x2a, 0xc3, 0x84, 0x05, 0x49, 0x38, 0xd9, 0xe8, 0x73, 0x73, 0x3f,
    0x14, 0x5f, 0x66, 0x90, 0x4f, 0x2b, 0x93, 0xbe, 0xfd, 0x96, 0x5a, 0xd4, 0xc2, 0xc9, 0xfb,
    0x59, 0xad, 0x39, 0xf2, 0x5a, 0x33, 0x94, 0x05, 0x87, 0x37, 0x8b, 0x2b, 0x85, 0xe9, 0x07,
    0x97, 0xb9, 0x17, 0x3b, 0xcf, 0xee, 0x41, 0x81, 0x00, 0x4f, 0x4d, 0x82, 0xac, 0x70, 0xf8,
    0xa5, 0x0d, 0x6c, 0xa3, 0x94, 0xec, 0xe9, 0x82, 0x89, 0x21, 0x21, 0xac, 0xd1, 0x47, 0x9b,
    0x22, 0x67, 0x7d, 0xfd, 0x66, 0xaf, 0x16, 0x0f, 0xba, 0xd5, 0x9e, 0x19, 0x3e, 0x79, 0xfd,
    0x7d, 0xd8, 0xba, 0x3b, 0x6a, 0x56, 0xda, 0x07, 0xb5, 0xda, 0x46, 0x70, 0xfc, 0xfe, 0x3f,
    0x27, 0xc3, 0x81, 0x75, 0x36, 0x3e, 0x88, 0x7e, 0x2a, 0xad, 0x7c, 0x5a, 0x79, 0xbd, 0xfa,
    0xfc, 0x45, 0xbf, 0x8d, 0xe3, 0xd6, 0xce, 0xde, 0xc9, 0xf9, 0xde, 0x17, 0x99, 0x63, 0x6a,
    0x47, 0xb3, 0x6e, 0x34, 0xcc, 0x7c, 0xfd, 0xc7, 0x46, 0xed, 0x5b, 0xfd, 0xc7, 0xd7, 0xf8,
    0x88, 0x66, 0xe6, 0xc3, 0x4a, 0x4e, 0x69, 0xc7, 0xac, 0x08, 0xd5, 0xb4, 0xf6, 0xbc, 0x7a,
    0x66, 0x96, 0xf5, 0x35, 0xed, 0xc8, 0xf2, 0x47, 0x58, 0x7f, 0xcb, 0xd4, 0xf5, 0xea, 0xc4,
    0x58, 0x3c, 0xea, 0x87, 0x8d, 0x8d, 0xc7, 0xc7, 0xc7, 0xb2, 0x45, 0xa7, 0x29, 0x07, 0x61,
    0x83, 0xd7, 0xbb, 0x8a, 0x36, 0x56, 0xb0, 0xe3, 0xc5, 0x5e, 0xfb, 0xfd, 0xb9, 0xb6, 0x75,
    0xab, 0xed, 0x9c, 0x9e, 0xec, 0xb6, 0x2e, 0x5a, 0xa7, 0x27, 0xe7, 0xda, 0xfe, 0x69, 0x5b,
    0x3c, 0xdf, 0x5b, 0xd3, 0xda, 0x7b, 0x1f, 0xda, 0xa7, 0xbb, 0x97, 0x3b, 0xf8, 0x78, 0x8d,
    0xda, 0x6d, 0x9d, 0x5f, 0xb4, 0x5b, 0xdb, 0x97, 0xf8, 0x84, 0x0e, 0x60, 0x94, 0xb5, 0x5d,
    0xa5, 0xe6, 0x38, 0xf0, 0xa3, 0xf2, 0x8a, 0x90, 0x6f, 0xbe, 0xa2, 0x92, 0x16, 0xf5, 0xf1,
    0xdb, 0x01, 0xc1, 0xf7, 0x6e, 0xf1, 0x15, 0x57, 0x12, 0x0e, 0x22, 0xfa, 0xda, 0xbc, 0x1d,
    0x0e, 0xeb, 0x45, 0x4b, 0x52, 0x8c, 0x22, 0xb2, 0x46, 0x37, 0x6a, 0x41, 0x11, 0x50, 0xe5,
    0x54, 0x05, 0xb6, 0xc5, 0xc2, 0x35, 0xa1, 0xdb, 0x19, 0xd1, 0xed, 0x5b, 0x2b, 0xd2, 0x1c,
    0x92, 0x9d, 0xc6, 0x3e, 0x67, 0xaa, 0x32, 0xd2, 0x0c, 0x18, 0x3f, 0xa4, 0xaf, 0xf0, 0x36,
    0x0e, 0xaf, 0x0b, 0xed, 0x02, 0x7b, 0x84, 0xba, 0x32, 0x0b, 0x17, 0x68, 0xa2, 0x2c, 0x60,
    0x07, 0xc6, 0xa1, 0xdb, 0xeb, 0xc7, 0x5a, 0xf0, 0xe8, 0xe3, 0x1b, 0x0b, 0xf8, 0x46, 0x70,
    0xd6, 0x54, 0x63, 0x25, 0x36, 0xc1, 0xd5, 0xc0, 0xf9, 0xf8, 0x38, 0x45, 0x3d, 0xd8, 0x9b,
    0x91, 0xd6, 0x0b, 0x2d, 0x1f, 0x43, 0x76, 0xda, 0x88, 0xe3, 0x41, 0x01, 0x80, 0xf4, 0x2c,
    0xdb, 0xa3, 0x43, 0xe7, 0x80, 0x18, 0xf9, 0xca, 0xfe, 0x34, 0xb8, 0xc4, 0x38, 0x8a, 0x80,
    0xd0, 0x00, 0x6d, 0xf9, 0x30, 0x01, 0x34, 0xe0, 0x00, 0xba, 0xe2, 0x8d, 0x67, 0x5a, 0xe1,
    0xf0, 0xd6, 0x44, 0xb9, 0x00, 0xfc, 0xe2, 0x51, 0xa0, 0xd7, 0x70, 0x35, 0xf8, 0x74, 0x04,
    0x3b, 0x84, 0xdf, 0x06, 0x83, 0xc0, 0xe7, 0x23, 0xf1, 0x86, 0xec, 0xdc, 0x1c, 0xaf, 0x75,
    0x13, 0x96, 0xb5, 0xfd, 0x20, 0xa4, 0x70, 0x0c, 0x47, 0xe1, 0x30, 0xc0, 0x94, 0xad, 0xc4,
    0x24, 0xb8, 0x54, 0xe7, 0x7c, 0x94, 0x12, 0x5d, 0x4a, 0xa4, 0xbd, 0x73, 0x57, 0x59, 0xd7,
    0x91, 0x84, 0x6b, 0x1a, 0x2b, 0x89, 0x86, 0x40, 0x80, 0x85, 0xa1, 0x7f, 0xaf, 0xd1, 0x1a,
    0x16, 0xe6, 0x85, 0xa1, 0x1d, 0x1f, 0x85, 0xfd, 0x44, 0x31, 0x10, 0x62, 0x31, 0x05, 0x50,
    0x48, 0x3c, 0x9c, 0x37, 0x1a, 0xd9, 0x7d, 0x0e, 0xd8, 0x9a, 0xf6, 0xd8, 0x27, 0x74, 0xf9,
    0x7d, 0x59, 0xd5, 0x24, 0x08, 0x55, 0xcc, 0x3c, 0xba, 0xc8, 0x4d, 0x30, 0xca, 0x3b, 0x17,
    0xa1, 0xe4, 0x89, 0xfa, 0xee, 0x10, 0x47, 0xea, 0xba, 0x5d, 0xc0, 0x26, 0x44, 0x7e, 0x36,
    0xfd, 0xae, 0xa6, 0xff, 0xbf, 0x55, 0x3a, 0x5d, 0x00, 0xe8, 0x61, 0x88, 0x17, 0x03, 0x8d,
    0xd0, 0x5e, 0x00, 0x2f, 0xd0, 0x00, 0xc8, 0x14, 0x92, 0x48, 0x8c, 0x08, 0x43, 0x76, 0x88,
    0x48, 0xb0, 0xc1, 0x05, 0x4d, 0x8f, 0xae, 0xc0, 0x99, 0x90, 0xfc, 0x36, 0x18, 0x95, 0xb4,
    0xd0, 0x17, 0xff, 0x0a, 0x4b, 0xab, 0x2a, 0xd5, 0xe1, 0xff, 0x11, 0x27, 0x0f, 0xae, 0x33,
    0xb1, 0x42, 0x4d, 0xe5, 0x0f, 0x3e, 0x00, 0x79, 0x02, 0x68, 0x5d, 0x5a, 0x93, 0x02, 0xe0,
    0xb8, 0x51, 0x44, 0x19, 0x9e, 0xf2, 0x19, 0x13, 0x02, 0x4a, 0x96, 0x1c, 0xab, 0x9d, 0xc3,
    0x60, 0x60, 0x51, 0xbc, 0x06, 0x59, 0x4e, 0x1b, 0xd2, 0x62, 0x45, 0x21, 0x2b, 0xbe, 0x37,
    0x12, 0x38, 0xb0, 0xee, 0x71, 0x0a, 0xb0, 0xc4, 0x2e, 0x2c, 0x8d, 0x7a, 0x86, 0x91, 0x20,
    0xeb, 0xdb, 0xde, 0x88, 0xa2, 0x02, 0x84, 0x50, 0xf3, 0x83, 0x58, 0xf3, 0xd0, 0xc3, 0x80,
    0x98, 0xe9, 0xe7, 0x65, 0xad, 0xe0, 0x0f, 0x9c, 0x10, 0x88, 0xe2, 0x00, 0xf6, 0x85, 0xec,
    0x81, 0xf8, 0x30, 0xac, 0xc1, 0x9a, 0x90, 0xff, 0xae, 0xdb, 0x1b, 0xf1, 0x23, 0xd7, 0xe8,
    0x2a, 0xea, 0xe3, 0x94, 0xbe, 0x2f, 0x94, 0x07, 0x1d, 0x7c, 0x19, 0xf6, 0x0c, 0xc8, 0x81,
    0x65, 0x00, 0x40, 0xf4, 0x95, 0xfa, 0x01, 0xb1, 0xfb, 0x96, 0x0f, 0x50, 0x0b, 0x01, 0x01,
    0xf0, 0x23, 0x6c, 0x69, 0x09, 0x86, 0xa2, 0x4f, 0x3c, 0x79, 0x02, 0xc4, 0xd2, 0x18, 0x7a,
    0x70, 0x6b, 0xe9, 0x05, 0xf2, 0x31, 0x32, 0xcb, 0x04, 0xb1, 0x19, 0xba, 0x28, 0x50, 0xec,
    0x26, 0xbe, 0x4c, 0x56, 0x5f, 0x07, 0x9b, 0xa4, 0x16, 0xac, 0x6a, 0x2f, 0x58, 0x29, 0x77,
    0x68, 0x69, 0x0f, 0x26, 0xbb, 0x03, 0xe2, 0xb8, 0x96, 0x46, 0x6b, 0x67, 0x25, 0xcb, 0xbe,
    0xc2, 0xfb, 0x9c, 0x52, 0x78, 0x84, 0x87, 0x14, 0x62, 0xaa, 0x87, 0x90, 0xd3, 0x12, 0x11,
    0x7d, 0xb1, 0x0c, 0x29, 0x00, 0x0c, 0x75, 0x7c, 0x59, 0x03, 0xcb, 0x01, 0x45, 0xf2, 0x60,
    0xf4, 0x3d, 0x0e, 0x2e, 0xff, 0x8a, 0x5e, 0x5a, 0x43, 0x6d, 0x8a, 0x0c, 0xc8, 0x0a, 0x31,
    0x2b, 0x59, 0x52, 0x2f, 0x08, 0xed, 0x06, 0x68, 0x70, 0x65, 0x21, 0x83, 0x88, 0x63, 0x8a,
    0x79, 0x8d, 0x6a, 0x25, 0x8e, 0xd1, 0xb6, 0x50, 0x0c, 0x09, 0x68, 0xf9, 0x10, 0xef, 0x60,
    0xe4, 0xc9, 0xa2, 0xb5, 0x23, 0xa1, 0x23, 0xa8, 0x76, 0x60, 0x73, 0xd6, 0x11, 0x5b, 0x6e,
    0xb1, 0x22, 0xb0, 0xfb, 0x04, 0xc2, 0xe4, 0x05, 0x8f, 0xab, 0x09, 0x16, 0x76, 0x49, 0xe8,
    0x58, 0xe8, 0xbe, 0x6a, 0x88, 0x90, 0xa8, 0x94, 0xe5, 0x00, 0x9c, 0xa3, 0x18, 0x07, 0x7c,
    0x7c, 0x24, 0x86, 0x03, 0x01, 0x38, 0x1e, 0xe0, 0x72, 0xf0, 0x6c, 0x3f, 0x8a, 0xa2, 0x83,
    0xd0, 0x5a, 0x2a, 0xc1, 0x80, 0xe9, 0x2a, 0x9c, 0x8a, 0xd5, 0x73, 0x81, 0x9f, 0xd9, 0x51,
    0x44, 0x19, 0x00, 0xb1, 0xc0, 0x7d, 0x45, 0x71, 0xc7, 0xd2, 0x74, 0x94, 0x94, 0xc8, 0xc5,
    0x1a, 0x2e, 0x27, 0x1a, 0x01, 0x0c, 0x07, 0xa1, 0xf8, 0x06, 0x43, 0x70, 0x32, 0xab, 0xd2,
    0x07, 0x93, 0xc7, 0x91, 0x28, 0xf6, 0x2d, 0x98, 0x2c, 0xf0, 0xa8, 0x50, 0x40, 0x37, 0xb7,
    0xe2, 0x91, 0xe5, 0x3c, 0xcd, 0xf3, 0xfa, 0x58, 0xe8, 0xa9, 0x6e, 0x4a, 0xfc, 0xd7, 0xb4,
    0xfa, 0x38, 0xf6, 0x90, 0x9b, 0x39, 0xed, 0xe8, 0xf0, 0xdc, 0x6a, 0x60, 0x92, 0xdf, 0x95,
    0x49, 0x30, 0x04, 0x43, 0x4e, 0x41, 0xbc, 0xd0, 0x65, 0x0c, 0x48, 0x48, 0xbc, 0x31, 0xc8,
    0x7f, 0x4f, 0x11, 0xd7, 0x71, 0x7d, 0xca, 0x27, 0xe8, 0xc0, 0xaf, 0x0a, 0xa2, 0x27, 0xef,
    0x01, 0x38, 0x6b, 0x8a, 0x8d, 0x94, 0x48, 0xcd, 0x01, 0x85, 0xd8, 0x21, 0x41, 0x37, 0xa1,
    0x0e, 0xaa, 0x72, 0x6e, 0xe3, 0x0b, 0x29, 0x9e, 0x95, 0x01, 0x29, 0xb2, 0xca, 0x7c, 0x12,
    0x5c, 0xe0, 0x84, 0x2d, 0x95, 0x70, 0xe0, 0x60, 0x29, 0x9a, 0x50, 0x1e, 0x76, 0xb8, 0x27,
    0x46, 0x0a, 0x18, 0x6e, 0x68, 0x2f, 0xf8, 0x7d, 0x12, 0xf0, 0x6b, 0x8a, 0x50, 0xc4, 0xa8,
    0xf1, 0x48, 0xa4, 0x27, 0xd4, 0x36, 0x46, 0x35, 0x6e, 0xcc, 0x95, 0x87, 0xf0, 0x3b, 0x28,
    0x51, 0xc8, 0x29, 0x78, 0x5c, 0x14, 0xe8, 0x44, 0x54, 0x8f, 0xe7, 0xdc, 0x0a, 0x41, 0x65,
    0xee, 0xa6, 0x5a, 0x0b, 0xd5, 0x51, 0x41, 0xad, 0x4c, 0xa7, 0x47, 0x7e, 0xef, 0x10, 0x40,
    0x17, 0x50, 0x31, 0xd9, 0x79, 0x99, 0xcf, 0xda, 0xb3, 0x48, 0x8d, 0xae, 0x49, 0x04, 0x88,
    0xde, 0x4b, 0xb5, 0x0c, 0x9d, 0x08, 0x86, 0x7a, 0x61, 0x00, 0xca, 0x78, 0x0d, 0xa9, 0xd0,
    0x3c, 0xca, 0x47, 0x8f, 0x21, 0xf6, 0xf3, 0xa9, 0xf3, 0x31, 0xf2, 0x39, 0xf6, 0x35, 0x94,
    0x15, 0xe9, 0x24, 0x41, 0x14, 0xe2, 0x29, 0x8e, 0x52, 0x67, 0xf7, 0x1e, 0xd0, 0x06, 0x4f,
    0x45, 0x52, 0x77, 0xa9, 0x73, 0xc0, 0xff, 0x27, 0x30, 0x81, 0x46, 0x74, 0x3d, 0xec, 0xec,
    0x4b, 0x09, 0xa3, 0x29, 0x26, 0x4b, 0xba, 0x42, 0xd1, 0x38, 0x8a, 0xc9, 0x20, 0x52, 0x55,
    0xd8, 0xdc, 0x11, 0x61, 0x85, 0x63, 0xa8, 0x3f, 0xc0, 0x5a, 0x24, 0xd5, 0x99, 0x98, 0xb7,
    0x7d, 0x2d, 0x15, 0xe9, 0x6b, 0x8a, 0x1a, 0x49, 0x71, 0x81, 0x82, 0x6d, 0xc4, 0x1b, 0xf8,
    0xf6, 0x28, 0xa9, 0x3c, 0xe5, 0x0e, 0xa8, 0xbe, 0xe4, 0x6e, 0xe4, 0x35, 0xd5, 0x78, 0x89,
    0x22, 0x4f, 0x02, 0x09, 0xe9, 0xb5, 0x0a, 0x7e, 0xc4, 0x6a, 0x51, 0x43, 0xd7, 0x1e, 0x05,
    0x88, 0x16, 0xa6, 0x0a, 0xef, 0x51, 0xf5, 0x85, 0x89, 0x77, 0x24, 0x5c, 0x2e, 0x12, 0xb9,
    0x5f, 0x14, 0xd2, 0x40, 0x1a, 0x51, 0xc4, 0x16, 0x72, 0x22, 0x2a, 0xab, 0xd2, 0x09, 0xe0,
    0xd2, 0x54, 0x59, 0x2d, 0x97, 0xf2, 0x22, 0x9c, 0xf1, 0xaf, 0xe5, 0xb2, 0x85, 0x04, 0xce,
    0x79, 0x54, 0x04, 0xa2, 0x7e, 0x1c, 0x64, 0x26, 0xd5, 0xfa, 0x00, 0x4c, 0x87, 0x00, 0x3f,
    0xcb, 0x48, 0xa8, 0x26, 0x07, 0xa0, 0xd5, 0x79, 0x12, 0x21, 0x8c, 0xc8, 0x9f, 0x23, 0xe0,
    0x0f, 0xa7, 0xb5, 0x03, 0xc0, 0x37, 0x33, 0xd7, 0x7c, 0xe3, 0x51, 0x60, 0x97, 0x29, 0x22,
    0xac, 0x1d, 0xa0, 0x5b, 0x85, 0xd3, 0xee, 0xc8, 0xe5, 0x0b, 0xcf, 0x4a, 0x3b, 0x1f, 0x31,
    0xca, 0x79, 0xb5, 0x30, 0x98, 0x51, 0xc4, 0x4c, 0xd5, 0xca, 0x04, 0xac, 0xa4, 0xa6, 0x20,
    0x9e, 0x93, 0x00, 0x98, 0xa9, 0x17, 0x47, 0xfd, 0x02, 0x70, 0x0e, 0x61, 0x95, 0xe0, 0xe1,
    0x49, 0x0c, 0x98, 0x11, 0xec, 0x07, 0xaa, 0xcf, 0x73, 0x1e, 0x5d, 0xf4, 0x35, 0xfc, 0xc0,
    0xa7, 0x94, 0x8f, 0x60, 0xc5, 0xf8, 0x75, 0x1d, 0xbc, 0x9e, 0xb0, 0x87, 0x81, 0x53, 0x30,
    0xbc, 0x78, 0xbc, 0xde, 0x0d, 0x09, 0x7c, 0x73, 0xc1, 0xb1, 0x7b, 0x08, 0x6c, 0x54, 0xe4,
    0x6b, 0xce, 0xe3, 0x3f, 0x9c, 0x50, 0x44, 0x5b, 0xd0, 0x03, 0x64, 0x6c, 0x88, 0x7c, 0x9c,
    0x74, 0x89, 0x3a, 0x1f, 0x8e, 0x3a, 0xd0, 0x17, 0xb0, 0x08, 0x8c, 0x3a, 0xf4, 0x2c, 0x60,
    0xf9, 0x04, 0x60, 0x66, 0xa6, 0x36, 0xa2, 0x4f, 0xb8, 0x63, 0xa1, 0xc6, 0x6d, 0xaa, 0x9b,
    0x75, 0x31, 0x75, 0x96, 0x73, 0x33, 0x16, 0x98, 0x73, 0xaa, 0x5b, 0x18, 0x81, 0x2a, 0x0a,
    0x3e, 0x58, 0xa8, 0x74, 0xff, 0x0d, 0xa8, 0xf3, 0x0e, 0xba, 0x91, 0x61, 0x8c, 0x02, 0x06,
    0x47, 0x2c, 0x5c, 0x24, 0x00, 0x30, 0x62, 0x01, 0xd1, 0xaa, 0x36, 0x64, 0x6b, 0x55, 0xa8,
    0xee, 0x3a, 0x0c, 0x46, 0x6b, 0xe1, 0xa0, 0x97, 0x27, 0x00, 0xa2, 0x71, 0x74, 0xd0, 0xed,
    0x9f, 0x07, 0x46, 0x80, 0x78, 0xa0, 0x7e, 0xd9, 0xff, 0x82, 0x46, 0x09, 0xc2, 0x98, 0x11,
    0xea, 0x01, 0xee, 0x28, 0x73, 0xaf, 0x90, 0xaa, 0x19, 0xb1, 0x32, 0x7a, 0x90, 0x87, 0xd2,
    0xcc, 0x6a, 0xf1, 0xfa, 0x74, 0xf4, 0xf5, 0x2a, 0x8a, 0x65, 0xd4, 0x5d, 0x1c, 0x34, 0xdb,
    0x5c, 0xc0, 0x37, 0x6b, 0xab, 0x2c, 0x0e, 0xb0, 0x48, 0x07, 0x51, 0xb1, 0x2b, 0xf5, 0xa6,
    0xd2, 0x1b, 0x45, 0x56, 0xe8, 0x52, 0xe9, 0xec, 0xe2, 0xe6, 0x91, 0x88, 0x68, 0x88, 0x2b,
    0x9f, 0x2a, 0xf8, 0xef, 0xa2, 0x55, 0x08, 0x83, 0x03, 0x9f, 0x70, 0x8b, 0x08, 0xea, 0x0f,
    0x12, 0xf5, 0x5c, 0xb7, 0x1b, 0x66, 0x3b, 0x88, 0x05, 0xb1, 0x08, 0x97, 0x5b, 0x5b, 0x00,
    0x39, 0x79, 0x69, 0xe0, 0xf8, 0x14, 0x8f, 0x48, 0x0a, 0x61, 0xeb, 0xca, 0x5a, 0xab, 0x8b,
    0x97, 0xb1, 0x50, 0x04, 0x9a, 0x0a, 0x79, 0x5a, 0x12, 0x25, 0x76, 0x7b, 0x0c, 0x04, 0xab,
    0xe1, 0xcf, 0x54, 0xc9, 0xf1, 0xc0, 0xfd, 0x5d, 0x62, 0xb0, 0xa4, 0x6f, 0x8d, 0x47, 0x9f,
    0x29, 0xc2, 0x70, 0x19, 0x76, 0x30, 0x42, 0xff, 0x89, 0x7d, 0xa7, 0x67, 0x21, 0x3c, 0xeb,
    0x1a, 0xb9, 0x31, 0x2e, 0xd5, 0x23, 0x3d, 0x66, 0x04, 0x00, 0x63, 0x02, 0xf8, 0xc4, 0x27,
    0x68, 0xc5, 0x69, 0x0a, 0x8e, 0xda, 0x04, 0x06, 0x78, 0xc4, 0x43, 0xed, 0x64, 0x1c, 0x3b,
    0xce, 0x58, 0x2c, 0x4b, 0xd0, 0x63, 0x40, 0x3d, 0x55, 0x18, 0x86, 0xb9, 0x62, 0x69, 0x4e,
    0x2e, 0x93, 0x08, 0x46, 0xb9, 0xa4, 0x88, 0x40, 0x23, 0x91, 0x31, 0x6e, 0xf2, 0x84, 0x57,
    0xac, 0x03, 0x8a, 0x28, 0x52, 0x4f, 0xf0, 0x8a, 0x15, 0x09, 0x87, 0x0d, 0x2b, 0xb9, 0x09,
    0x93, 0xd8, 0x85, 0xd1, 0x30, 0x4e, 0x74, 0x98, 0x2a, 0xa8, 0x96, 0xb5, 0x36, 0x51, 0x33,
    0x65, 0x3a, 0xf5, 0xc0, 0x1a, 0x27, 0x9a, 0x2d, 0xab, 0x85, 0x40, 0x0f, 0xba, 0xc2, 0xb7,
    0xe9, 0xa3, 0x29, 0x5e, 0x1e, 0x25, 0x09, 0xba, 0x8d, 0x30, 0xd9, 0x08, 0x94, 0x1c, 0x7b,
    0x30, 0xa4, 0xff, 0x06, 0xd2, 0x22, 0xa7, 0xc3, 0x66, 0x66, 0xc2, 0x27, 0x68, 0xb2, 0xb5,
    0x14, 0xa2, 0x08, 0x49, 0x58, 0x6b, 0x40, 0x08, 0xa3, 0x72, 0x37, 0xf0, 0x20, 0x26, 0x62,
    0x5d, 0xe8, 0xae, 0x1f, 0x84, 0x9d, 0x7d, 0x67, 0xad, 0xb2, 0x95, 0x62, 0x19, 0xfd, 0x1e,
    0x8b, 0xe0, 0xb1, 0x78, 0x03, 0xc8, 0xea, 0xc2, 0x12, 0x51, 0x69, 0xa9, 0xae, 0xaf, 0x8c,
    0xf1, 0x93, 0x5b, 0xa8, 0x45, 0xed, 0x43, 0x36, 0x92, 0xf8, 0x91, 0x9a, 0x51, 0x31, 0x67,
    0x99, 0x93, 0x25, 0x6e, 0x12, 0x57, 0x1a, 0xe3, 0x28, 0x8c, 0xdf, 0x59, 0x52, 0x27, 0x44,
    0x82, 0xf0, 0xc1, 0xf5, 0x91, 0x4f, 0x58, 0xf4, 0x18, 0x29, 0xd3, 0xa3, 0x8a, 0x93, 0x2c,
    0x63, 0x62, 0xe8, 0xde, 0xa3, 0xc8, 0x20, 0x6c, 0x9c, 0xf4, 0xcc, 0xb6, 0x32, 0x73, 0x48,
    0x10, 0xb0, 0x35, 0xe1, 0x37, 0x2b, 0x21, 0x3c, 0x8d, 0x0e, 0x00, 0xa2, 0xec, 0xe2, 0x94,
    0xe5, 0x84, 0x09, 0x43, 0xac, 0xd1, 0x32, 0x80, 0xd2, 0x3a, 0xae, 0x71, 0xee, 0x5e, 0x43,
    0xe8, 0xd0, 0xe3, 0x4f, 0x6b, 0x8a, 0x33, 0x41, 0x59, 0x34, 0x4e, 0xc4, 0x8d, 0xaf, 0x8d,
    0x20, 0x0a, 0xe0, 0xc9, 0xaa, 0x54, 0xfc, 0x24, 0x9e, 0x1b, 0xd3, 0x9e, 0x62, 0x0c, 0x0a,
    0x13, 0x50, 0x87, 0x16, 0xcf, 0x25, 0x58, 0xb8, 0xc4, 0x80, 0x4b, 0x5c, 0x18, 0x27, 0x86,
    0xad, 0x24, 0x6f, 0xaa, 0xd3, 0x48, 0x73, 0x56, 0x51, 0x69, 0x49, 0xfa, 0xf3, 0xc0, 0x0f,
    0x5d, 0x3a, 0x39, 0xbd, 0x68, 0xed, 0xec, 0x95, 0x40, 0xf8, 0x9e, 0x62, 0x8a, 0x6f, 0x14,
    0x3e, 0x07, 0xba, 0xdc, 0xca, 0x3c, 0xaa, 0x74, 0x29, 0x2a, 0xa0, 0x40, 0x52, 0x72, 0x98,
    0xf4, 0x52, 0x86, 0x12, 0xa1, 0xa7, 0x05, 0x34, 0xb4, 0x1c, 0x1a, 0x63, 0x26, 0x4c, 0x47,
    0xd1, 0x8a, 0x4a, 0xc9, 0xc2, 0x3c, 0xaf, 0x32, 0x0c, 0x57, 0x6a, 0x54, 0x33, 0xb0, 0x85,
    0x25, 0xac, 0xcd, 0x83, 0x57, 0x65, 0x98, 0x62, 0x0c, 0x17, 0xe2, 0x95, 0x32, 0x1b, 0x8c,
    0x11, 0x0b, 0xdf, 0x5f, 0xf5, 0xd5, 0x2c, 0x3d, 0xef, 0x92, 0x48, 0x2b, 0x38, 0x46, 0x30,
    0x0f, 0xc9, 0xa9, 0x36, 0x0e, 0x63, 0x82, 0xeb, 0x04, 0x43, 0x29, 0xae, 0x8a, 0xa6, 0xc2,
    0xa3, 0xaa, 0xcc, 0x53, 0x4c, 0xa6, 0xca, 0x75, 0x3a, 0x01, 0xa5, 0xb9, 0xdd, 0x44, 0xcf,
    0xc9, 0xec, 0x25, 0x16, 0x30, 0x3f, 0x7e, 0x10, 0xae, 0xe5, 0xb1, 0x6c, 0x09, 0x5f, 0x4f,
    0x72, 0xf1, 0xd8, 0xa0, 0x00, 0x4b, 0xdd, 0x8c, 0xa4, 0x50, 0x07, 0x02, 0x22, 0x40, 0x46,
    0x18, 0x30, 0x74, 0xd6, 0x71, 0x91, 0x63, 0x49, 0x1b, 0x9f, 0x9e, 0x2a, 0x04, 0xd3, 0x0f,
    0x05, 0xb1, 0x20, 0x08, 0xbd, 0xe8, 0xb3, 0x28, 0x0c, 0xf5, 0x57, 0x1e, 0xcd, 0x0a, 0xbd,
    0xf3, 0xc0, 0x42, 0x69, 0x99, 0xe4, 0xc3, 0x37, 0xbd, 0x65, 0xf0, 0x8a, 0x1e, 0x4a, 0x1a,
    0x2e, 0x5b, 0x54, 0x63, 0x8d, 0x53, 0xb9, 0x79, 0x69, 0x36, 0x2c, 0xc7, 0xc1, 0xbf, 0x43,
    0x77, 0x54, 0x8e, 0x54, 0x46, 0x11, 0xa0, 0x73, 0x0c, 0xcd, 0x23, 0x09, 0x6b, 0x0c, 0xfb,
    0xbd, 0x57, 0x5d, 0x13, 0x8d, 0xa7, 0x30, 0xbd, 0xe1, 0x38, 0xc4, 0x77, 0x46, 0x03, 0xe1,
    0xa6, 0x38, 0x46, 0x28, 0x16, 0x16, 0xff, 0x09, 0x72, 0x66, 0x75, 0x1a, 0x45, 0xb0, 0x48,
    0x00, 0x1a, 0x0a, 0x85, 0x89, 0x66, 0xab, 0xb0, 0x12, 0x32, 0xf5, 0x03, 0xc2, 0x51, 0x96,
    0x18, 0x62, 0x26, 0xed, 0x5b, 0x14, 0xa2, 0x28, 0x89, 0x2a, 0xa8, 0xdb, 0x4a, 0x93, 0xf5,
    0x01, 0xc8, 0x24, 0xbe, 0x14, 0x52, 0xe0, 0x20, 0x7c, 0x1d, 0x2a, 0xc8, 0x98, 0x92, 0x73,
    0xb4, 0x7e, 0xbe, 0xe2, 0xe5, 0x16, 0x78, 0xf0, 0x49, 0x6a, 0xaf, 0x60, 0xcb, 0x88, 0x0d,
    0xec, 0x15, 0x05, 0xdd, 0x02, 0x68, 0xd6, 0x12, 0xb1, 0xa1, 0xc5, 0xd0, 0xfd, 0xf1, 0x84,
    0x44, 0xcd, 0xce, 0x49, 0x51, 0xa2, 0xe3, 0xe1, 0xd4, 0x4a, 0x36, 0x2f, 0x01, 0x20, 0xb7,
    0x95, 0xb2, 0xc2, 0xd2, 0xeb, 0xc6, 0x5c, 0x32, 0x75, 0xa5, 0x91, 0x8f, 0x52, 0x69, 0x19,
    0xa9, 0x64, 0x22, 0x81, 0x14, 0x41, 0x6a, 0x34, 0xd8, 0xe1, 0x3b, 0x01, 0x2c, 0x56, 0x4d,
    0xc0, 0xa8, 0xac, 0x5d, 0xfa, 0x58, 0xc4, 0x9a, 0x12, 0x8d, 0x3c, 0xc1, 0x44, 0xb6, 0x8b,
    0x2f, 0x1d, 0x51, 0xd9, 0x20, 0x91, 0xf9, 0x8d, 0x71, 0xd6, 0x8b, 0x54, 0x92, 0x59, 0x4a,
    0x6b, 0x62, 0xea, 0x2a, 0xf1, 0xf4, 0x71, 0xc6, 0x6c, 0x22, 0x87, 0xb9, 0x7a, 0x1d, 0x35,
    0xbc, 0x48, 0x68, 0xc6, 0xdd, 0x2c, 0x0a, 0xa6, 0xc2, 0x30, 0x6c, 0x08, 0xe6, 0xba, 0x3a,
    0xf7, 0x91, 0xf5, 0x3f, 0x09, 0x62, 0xec, 0x24, 0x77, 0x6f, 0xa8, 0x7d, 0xe9, 0x04, 0x2c,
    0x43, 0xb1, 0xed, 0xd1, 0xf0, 0x0e, 0xcd, 0x08, 0x05, 0x2d, 0x1a, 0x81, 0x39, 0x88, 0x88,
    0xd8, 0x46, 0x10, 0x8a, 0x81, 0x42, 0x12, 0x3e, 0x11, 0xf3, 0x2e, 0x58, 0x82, 0x14, 0xb0,
    0x43, 0x22, 0xac, 0x2b, 0x4e, 0x19, 0x7f, 0xcc, 0x25, 0x84, 0x46, 0x64, 0xe4, 0x89, 0xd8,
    0x8a, 0xa7, 0x8a, 0x57, 0x22, 0x24, 0x24, 0x3d, 0x2b, 0x64, 0xfb, 0x4a, 0xd9, 0xd8, 0x83,
    0x05, 0xd4, 0x41, 0x15, 0x0a, 0x07, 0x24, 0x42, 0xb5, 0xa8, 0xf8, 0xd1, 0x4e, 0x40, 0x35,
    0xcc, 0x5c, 0x6e, 0x65, 0x47, 0x08, 0x11, 0xcf, 0x37, 0xd4, 0x98, 0xfb, 0x22, 0xb6, 0x31,
    0xa8, 0x85, 0xe2, 0xd1, 0x60, 0xd6, 0x8b, 0x5d, 0x38, 0xa8, 0xf1, 0xaf, 0x01, 0x96, 0x51,
    0x3c, 0xcc, 0x1a, 0x0b, 0xa6, 0x15, 0x10, 0x0b, 0x4e, 0x49, 0xc2, 0xd4, 0x90, 0xfc, 0x39,
    0xf9, 0xee, 0x11, 0x1a, 0xf4, 0x08, 0x68, 0x82, 0x26, 0x9d, 0x92, 0x94, 0x5e, 0x5f, 0x83,
    0xd3, 0x08, 0x0d, 0x60, 0x99, 0xdd, 0x27, 0xd5, 0xe1, 0xa4, 0x90, 0x41, 0x07, 0x66, 0x6a,
    0xf9, 0x59, 0x21, 0x4d, 0x82, 0x6e, 0xdc, 0x1a, 0x14, 0x98, 0x00, 0x86, 0xa9, 0x46, 0x59,
    0x75, 0x23, 0x1a, 0x3a, 0xe1, 0xa6, 0x6d, 0x57, 0xbb, 0xc6, 0xb7, 0xae, 0x7c, 0xdc, 0xbf,
    0x42, 0x20, 0x41, 0xed, 0x8c, 0x59, 0x00, 0x4b, 0x23, 0x6f, 0x0c, 0xb1, 0x12, 0x35, 0x40,
    0x48, 0x83, 0x97, 0x24, 0x0b, 0xb6, 0x96, 0x10, 0x8c, 0xcb, 0x7e, 0x94, 0x80, 0xfa, 0x0e,
    0xc5, 0xa4, 0x41, 0x36, 0x44, 0x55, 0x5b, 0x63, 0xfa, 0x32, 0x45, 0xdc, 0x55, 0xcc, 0x6b,
    0xca, 0x2f, 0x6d, 0x9d, 0x6b, 0xad, 0xf3, 0x92, 0xb6, 0xbd, 0x75, 0xde, 0x3a, 0x17, 0xc8,
    0x6e, 0x5d, 0x1c, 0x9e, 0x5e, 0x5e, 0x68, 0xd7, 0x5b, 0xed, 0xf6, 0xd6, 0xc9, 0x45, 0x6b,
    0x5c, 0x3b, 0x6d, 0xab, 0xdb, 0xf2, 0xa7, 0xfb, 0xda, 0xd6, 0xc9, 0xad, 0xf6, 0x73, 0xeb,
    0x17, 0xdc, 0x1d, 0x97, 0xed, 0x00, 0x3f, 0x61, 0x76, 0x34, 0x4a, 0x56, 0xe2, 0x52, 0xbd,
    0x28, 0x69, 0xd2, 0x44, 0x82, 0x68, 0x9e, 0xd4, 0x12, 0x7a, 0x6a, 0x0c, 0x41, 0x2e, 0x45,
    0x0d, 0x88, 0xc2, 0xbc, 0x8a, 0x05, 0x64, 0x5e, 0xb4, 0x2e, 0x8e, 0xf7, 0xd6, 0x00, 0xeb,
    0xeb, 0xad, 0x93, 0xfd, 0x76, 0xeb, 0xe4, 0x60, 0xef, 0xfd, 0xde, 0xc9, 0xc5, 0x9a, 0xf6,
    0xaf, 0xbd, 0x73, 0x08, 0x50, 0x6e, 0x6d, 0xb7, 0x8e, 0x5b, 0x17, 0xb7, 0x94, 0x85, 0xf6,
    0x17, 0x27, 0x7b, 0xe7, 0xec, 0xf8, 0xc0, 0x16, 0x1f, 0xe3, 0xc3, 0x56, 0x1b, 0x08, 0x76,
    0xbc, 0xd5, 0xd6, 0x3e, 0x5c, 0xb6, 0x3f, 0x9c, 0x9e, 0xef, 0x31, 0x6b, 0xcb, 0x76, 0x0b,
    0xdc, 0x59, 0x60, 0x85, 0xf5, 0x23, 0x97, 0xee, 0x3a, 0xd0, 0x9d, 0x19, 0x16, 0x15, 0xa6,
    0x05, 0x28, 0x17, 0x06, 0xc3, 0xd0, 0x45, 0xf7, 0x9c, 0x2e, 0xb8, 0x0b, 0xdc, 0x85, 0x4d,
    0xff, 0x25, 0x1a, 0x57, 0xc9, 0x97, 0xb2, 0x6c, 0x63, 0x14, 0x81, 0x4f, 0x84, 0xcb, 0x15,
    0xda, 0x8d, 0xa8, 0x66, 0x8f, 0x02, 0xdb, 0x95, 0x61, 0x32, 0x53, 0xea, 0x7c, 0x9f, 0x95,
    0x63, 0xd5, 0x8d, 0xd6, 0x7c, 0x30, 0xcb, 0x78, 0x6f, 0xb3, 0x0c, 0xdf, 0x05, 0x4a, 0xb1,
    0xb1, 0xcb, 0x4f, 0xe0, 0x95, 0xb5, 0x16, 0x5a, 0x5e, 0x0d, 0xdc, 0x1f, 0x3f, 0xa6, 0x70,
    0x31, 0xe0, 0x91, 0x47, 0x93, 0x9d, 0x00, 0x23, 0x44, 0xda, 0x4a, 0xaa, 0x45, 0xec, 0x64,
    0x03, 0xc5, 0x6a, 0xca, 0xc0, 0x27, 0x3d, 0xcf, 0xed, 0x61, 0x81, 0xf3, 0xd5, 0x35, 0xb9,
    0xbd, 0x96, 0x4a, 0xe5, 0xca, 0xcc, 0xcf, 0x4c, 0x7e, 0x7f, 0xc7, 0x1c, 0x05, 0xcc, 0xe9,
    0x6e, 0x87, 0x3a, 0x74, 0x14, 0xb8, 0x1e, 0xe6, 0x23, 0xe4, 0xbe, 0x85, 0x98, 0x32, 0xc6,
    0x08, 0x11, 0xdd, 0x1d, 0x2f, 0x96, 0x0f, 0xa6, 0x3d, 0x53, 0xe6, 0x03, 0x93, 0x32, 0x82,
    0x9e, 0x4b, 0x27, 0xe6, 0x19, 0x01, 0x4a, 0x5a, 0x6b, 0x80, 0x75, 0xcf, 0xd5, 0x1c, 0x3e,
    0x16, 0x47, 0x02, 0x92, 0xc3, 0x01, 0xd1, 0x90, 0xe0, 0xde, 0xba, 0xb2, 0xfb, 0x0c, 0x02,
    0x8e, 0x2d, 0xdb, 0x4a, 0x40, 0x07, 0x86, 0xe5, 0x74, 0x71, 0x43, 0x8e, 0x0f, 0x2a, 0x34,
    0xe6, 0xdc, 0x00, 0x6e, 0x4c, 0x57, 0x87, 0x6c, 0xcf, 0x1c, 0xad, 0xb8, 0xb4, 0xd5, 0xb8,
    0x9c, 0x0d, 0x74, 0x29, 0x36, 0x47, 0x52, 0xc7, 0x8c, 0xd8, 0x13, 0xd7, 0xe7, 0xc4, 0x54,
    0xaa, 0x9a, 0x31, 0x78, 0x37, 0x75, 0x4f, 0x5c, 0x40, 0x85, 0xcb, 0xf6, 0x02, 0xc6, 0xb0,
    0xc7, 0x04, 0xde, 0x25, 0xa1, 0xe4, 0x0e, 0xef, 0xc1, 0x28, 0x07, 0x43, 0xbc, 0xc6, 0x6e,
    0xfa, 0x04, 0x23, 0x04, 0xbc, 0x6b, 0xb9, 0xde, 0x28, 0x64, 0xd6, 0xc8, 0xf2, 0xba, 0x23,
    0x71, 0x6e, 0xa8, 0x11, 0x2c, 0x38, 0x09, 0x82, 0xbb, 0x00, 0xc8, 0xbc, 0x2a, 0x3e, 0xd8,
    0x24, 0x02, 0xc6, 0x41, 0x3e, 0x44, 0x07, 0x3d, 0x9b, 0x88, 0xe3, 0x63, 0xc8, 0x64, 0xba,
    0x3c, 0xb8, 0x74, 0x93, 0xb4, 0xcb, 0x8f, 0x6f, 0x80, 0x04, 0x70, 0x24, 0x88, 0xc3, 0x0d,
    0x78, 0x26, 0x01, 0xcd, 0xb2, 0xb6, 0x65, 0xa3, 0x4d, 0x40, 0x2c, 0x08, 0xcd, 0x8b, 0x33,
    0x25, 0x86, 0x5a, 0x11, 0x8a, 0xeb, 0x3e, 0xba, 0xee, 0x69, 0x71, 0xcd, 0x6e, 0x16, 0x4e,
    0x6e, 0x13, 0x5e, 0xa8, 0xdd, 0x0f, 0x02, 0x96, 0x05, 0xa5, 0x99, 0xce, 0xd4, 0x66, 0x3b,
    0xb9, 0xe2, 0xf5, 0x1c, 0x84, 0xea, 0x13, 0x50, 0x75, 0x14, 0x42, 0x0b, 0xef, 0x08, 0xa0,
    0x18, 0xb2, 0x34, 0x28, 0xd7, 0x7e, 0x63, 0xca, 0x77, 0x64, 0xe0, 0xe3, 0xd1, 0x92, 0x24,
    0xc6, 0xd0, 0xea, 0x09, 0xd8, 0xb5, 0xa0, 0xe3, 0xf1, 0x2c, 0x14, 0xf5, 0x5b, 0x36, 0x50,
    0xa0, 0xe7, 0xcb, 0xb6, 0x5a, 0x60, 0x3d, 0x28, 0x2f, 0x3c, 0xbe, 0x72, 0x85, 0x06, 0x95,
    0xc6, 0x61, 0xf0, 0x88, 0x91, 0x10, 0x0b, 0x25, 0x25, 0xc2, 0x28, 0x3e, 0x95, 0x81, 0x93,
    0xd1, 0x13, 0x2d, 0xbe, 0xa7, 0xec, 0x86, 0x48, 0x9f, 0x9b, 0x6f, 0x8b, 0xd0, 0x24, 0x2e,
    0x8c, 0x8a, 0x34, 0x51, 0xa3, 0x14, 0x5e, 0xea, 0xe9, 0x24, 0xbb, 0x28, 0x89, 0x46, 0x4f,
    0x45, 0x0a, 0x1b, 0xf0, 0x9c, 0x30, 0xc6, 0x4c, 0x6e, 0x97, 0xe9, 0x67, 0x14, 0x78, 0x26,
    0x14, 0x37, 0x5d, 0x89, 0x1b, 0x87, 0x74, 0x21, 0x5c, 0x61, 0x3d, 0xc0, 0x33, 0x76, 0x0a,
    0xe7, 0x56, 0x38, 0xa0, 0x9a, 0x48, 0x38, 0xd7, 0x12, 0x8b, 0x89, 0x38, 0x8f, 0xc2, 0x30,
    0x2d, 0xe3, 0x99, 0x63, 0x3c, 0x71, 0x1e, 0xa2, 0xf8, 0xf0, 0x24, 0xea, 0x5a, 0x3e, 0x6f,
    0x19, 0x73, 0x67, 0x23, 0x59, 0xd0, 0x18, 0x31, 0x90, 0xe0, 0x54, 0x3a, 0xf3, 0x8f, 0x0a,
    0x2a, 0x6e, 0xa3, 0x84, 0x85, 0x31, 0xf0, 0xde, 0xc9, 0x2e, 0xda, 0xd5, 0xa2, 0x63, 0x70,
    0xf7, 0xad, 0x0f, 0x1f, 0xa0, 0x49, 0xeb, 0xe6, 0x07, 0x24, 0x21, 0xcd, 0x16, 0x80, 0x46,
    0xf3, 0xe3, 0x0b, 0xea, 0xd1, 0x3d, 0xfc, 0x8d, 0x82, 0xf2, 0x28, 0xf7, 0x92, 0xe0, 0x73,
    0x67, 0x87, 0x35, 0x7e, 0x8c, 0x22, 0x9d, 0x4d, 0x10, 0x6e, 0x75, 0x00, 0x52, 0x13, 0x42,
    0x1e, 0x8b, 0xac, 0xc6, 0x5a, 0x12, 0xc9, 0xb3, 0x1b, 0x2c, 0x34, 0x30, 0x10, 0x20, 0xec,
    0xe9, 0x77, 0x70, 0x97, 0x92, 0x00, 0x67, 0x96, 0x7e, 0xf9, 0xad, 0x24, 0x15, 0x1f, 0xcd,
    0x70, 0x6b, 0x37, 0x16, 0xcc, 0x44, 0xb5, 0x2a, 0x8f, 0xfa, 0x94, 0x48, 0xba, 0xac, 0xbd,
    0x0d, 0xfc, 0xbf, 0xc9, 0xf3, 0x02, 0x8a, 0x8c, 0x8a, 0xc1, 0xff, 0xba, 0xaa, 0xd1, 0x68,
    0x86, 0xa9, 0x11, 0xb8, 0x17, 0xc0, 0x09, 0xe0, 0xe2, 0x4b, 0x38, 0x78, 0x74, 0xa0, 0x98,
    0x65, 0x6f, 0x16, 0x65, 0x25, 0x1a, 0x83, 0x3e, 0x7f, 0x92, 0x1b, 0xa1, 0x34, 0xa8, 0x67,
    0x80, 0x9e, 0x80, 0x8e, 0x5e, 0x84, 0x1b, 0x54, 0xac, 0x35, 0xcf, 0x93, 0x0a, 0x2d, 0x4e,
    0x32, 0xbe, 0x01, 0x2e, 0x43, 0x8f, 0x95, 0x85, 0x5d, 0xc9, 0xb5, 0xa5, 0xd4, 0x82, 0xf3,
    0xd5, 0x0e, 0x49, 0x8e, 0xac, 0xd0, 0x1d, 0x52, 0x01, 0x49, 0x84, 0x1d, 0x4b, 0xf4, 0x18,
    0xbd, 0xcc, 0xad, 0x47, 0x4a, 0x68, 0x2b, 0xd2, 0x3b, 0x9f, 0xfc, 0xf0, 0x0b, 0x82, 0x09,
    0xe7, 0xca, 0xfd, 0x78, 0x8e, 0x39, 0xb1, 0xef, 0x2a, 0xd3, 0x33, 0x49, 0x92, 0xc3, 0x0a,
    0x3e, 0xee, 0x58, 0x33, 0x66, 0x48, 0x36, 0x13, 0x4d, 0xdd, 0xd8, 0xd4, 0xb6, 0xe4, 0x7d,
    0x6b, 0xe0, 0x2a, 0xd8, 0x65, 0xb1, 0xdb, 0x6d, 0x75, 0x61, 0x71, 0x88, 0x2d, 0xf0, 0xfa,
    0xc0, 0xb8, 0xb6, 0x99, 0x8e, 0x69, 0x13, 0xf4, 0xd8, 0x45, 0xe2, 0x9b, 0x73, 0x90, 0xa3,
    0x54, 0x69, 0xde, 0x5a, 0x53, 0x4f, 0x8b, 0x6a, 0xef, 0xb0, 0x81, 0x3c, 0x90, 0xb9, 0xfa,
    0x0e, 0x21, 0x82, 0x15, 0xd4, 0x12, 0xcc, 0xb6, 0xf1, 0xdc, 0xba, 0xf0, 0xf1, 0x5d, 0x9f,
    0xa8, 0x54, 0x6f, 0x4a, 0x76, 0x93, 0xfe, 0x8f, 0x96, 0xa4, 0x04, 0x82, 0x0e, 0x4d, 0xa5,
    0xa9, 0x7c, 0x9e, 0xe0, 0x72, 0x2b, 0x16, 0xb2, 0x30, 0xeb, 0x3c, 0x2a, 0x3f, 0x24, 0x8d,
    0xaf, 0xd2, 0x2e, 0xf3, 0xb8, 0xef, 0x93, 0x1c, 0x13, 0x7e, 0x20, 0x0d, 0x87, 0x51, 0xf2,
    0xf9, 0xe3, 0x4f, 0xb8, 0xa3, 0xa0, 0x36, 0x98, 0xe4, 0x9e, 0x7f, 0xa6, 0x6f, 0x2e, 0xbc,
    0x8a, 0x36, 0xbc, 0xa3, 0x50, 0x05, 0x41, 0x48, 0x00, 0xf5, 0x79, 0x80, 0xa1, 0x60, 0x69,
    0x6f, 0x04, 0xdc, 0x08, 0xfe, 0x02, 0xd8, 0x0c, 0x3f, 0x7b, 0xec, 0x8f, 0xa7, 0x52, 0x12,
    0x3e, 0xca, 0xaf, 0xab, 0xfc, 0xd6, 0x27, 0x9f, 0xbf, 0x7d, 0xf0, 0x23, 0xce, 0xff, 0xb3,
    0xf5, 0xcb, 0xcc, 0x31, 0xf5, 0xfc, 0xbf, 0xae, 0x1b, 0x46, 0x2d, 0x77, 0xfe, 0xdf, 0xa8,
    0xdf, 0xce, 0xff, 0xbf, 0xc6, 0x07, 0x5f, 0x2b, 0x5a, 0x59, 0x96, 0xe6, 0x7f, 0xeb, 0xc5,
    0xfb, 0x2c, 0xfc, 0x11, 0xf2, 0x8f, 0xd7, 0xa4, 0x3b, 0xfc, 0x95, 0xb9, 0x8f, 0xd1, 0x72,
    0x98, 0x2a, 0xff, 0x86, 0x59, 0xab, 0x57, 0xb3, 0xf2, 0x6f, 0xea, 0x95, 0xea, 0x37, 0xf9,
    0x8d, 0x4f, 0x09, 0x5d, 0x2b, 0xf4, 0x2e, 0xec, 0xb8, 0xf4, 0xe3, 0x0a, 0x3b, 0x01, 0x50,
    0xef, 0xae, 0x7c, 0xe0, 0xe5, 0x45, 0xde, 0x81, 0x97, 0x00, 0xe1, 0x28, 0xc4, 0x7e, 0xa5,
    0x7f, 0x27, 0x91, 0xb8, 0xfb, 0x57, 0xfb, 0x17, 0xab, 0x6b, 0xc7, 0x5e, 0x57, 0xd6, 0x3e,
    0xd7, 0xc6, 0x1b, 0x16, 0x5e, 0x16, 0xac, 0xfd, 0xa4, 0x89, 0x9f, 0x65, 0x85, 0x67, 0xe5,
    0xbf, 0x84, 0x23, 0x79, 0x40, 0xcb, 0xf9, 0xc1, 0xf7, 0x87, 0xc0, 0x75, 0x34, 0xfd, 0xc7,
    0xba, 0x25, 0x44, 0x0f, 0x48, 0xc3, 0x43, 0xee, 0x71, 0xbd, 0x2b, 0x2e, 0x81, 0x89, 0x0e,
    0xc6, 0xf7, 0xdf, 0xaf, 0x68, 0xdf, 0x6b, 0x8b, 0x96, 0xaf, 0x84, 0x3e, 0x1b, 0x2b, 0xac,
    0x03, 0x00, 0x62, 0x07, 0x70, 0xee, 0xd9, 0xc9, 0x6c, 0x5a, 0x5a, 0x93, 0xbf, 0xcd, 0x48,
    0xc7, 0xcf, 0xf7, 0xda, 0x1c, 0x15, 0x1c, 0x79, 0xd3, 0x0d, 0xfa, 0xaf, 0x28, 0xa0, 0xf8,
    0x55, 0x79, 0x33, 0x92, 0xbd, 0x82, 0x49, 0x9d, 0xdc, 0x32, 0xeb, 0x93, 0x34, 0xa3, 0xee,
    0xf6, 0x69, 0xe5, 0xd3, 0x4a, 0x16, 0x39, 0xf4, 0x5f, 0xb9, 0xd8, 0xa9, 0x57, 0xb1, 0x28,
    0xe3, 0xb8, 0x16, 0x4b, 0x63, 0x83, 0xe5, 0x96, 0x35, 0xe9, 0x82, 0x14, 0xf1, 0xfb, 0x3f,
    0xab, 0xb0, 0x6c, 0x81, 0x34, 0xce, 0x92, 0x13, 0x29, 0x6b, 0xe5, 0x1b, 0x79, 0xf8, 0x62,
    0x3b, 0xda, 0x52, 0x5d, 0x33, 0xdd, 0xd4, 0x10, 0xcb, 0x63, 0xd1, 0x9b, 0x58, 0x3d, 0x12,
    0xad, 0x8d, 0x2d, 0x3d, 0x03, 0x5b, 0x32, 0x5d, 0xee, 0xe2, 0x8b, 0xd4, 0xf4, 0x3d, 0x82,
    0xeb, 0xf2, 0x7a, 0x89, 0x22, 0x8c, 0x9b, 0x30, 0x5c, 0x32, 0x6f, 0x1e, 0xd5, 0x92, 0x31,
    0x1f, 0x85, 0xc8, 0x2e, 0x2e, 0xcc, 0xaf, 0x60, 0x3c, 0xe1, 0xf8, 0x2c, 0xd2, 0x93, 0x89,
    0xa9, 0x90, 0x7f, 0xcb, 0xe9, 0x26, 0x5c, 0xf4, 0x3d, 0xc7, 0x3d, 0xdf, 0xd8, 0xbb, 0xe8,
    0x71, 0x0a, 0xde, 0x83, 0x15, 0x6a, 0x45, 0xd2, 0xfa, 0xe3, 0xca, 0x3b, 0x91, 0xd4, 0xd3,
    0x15, 0x35, 0x10, 0x98, 0x2c, 0xfa, 0xed, 0x97, 0xc2, 0x87, 0xe2, 0x0a, 0xed, 0xdf, 0x60,
    0x3a, 0xfe, 0x8f, 0x78, 0xf0, 0xe3, 0x8b, 0x06, 0x32, 0xe9, 0x40, 0x46, 0x32, 0x90, 0x09,
    0x7d, 0x5a, 0x2d, 0x04, 0x56, 0x51, 0x2b, 0x85, 0x3f, 0xff, 0xcf, 0xff, 0x68, 0xef, 0x66,
    0xae, 0x7f, 0x7d, 0x5a, 0x55, 0x14, 0x9c, 0x7c, 0x1b, 0x58, 0xd5, 0x45, 0xe5, 0xe4, 0xdd,
    0xaa, 0x81, 0x36, 0xbe, 0xe3, 0x47, 0xb7, 0xdf, 0x43, 0x50, 0x08, 0x82, 0x7c, 0xd9, 0x3e,
    0x09, 0xcb, 0xa4, 0xfc, 0xc0, 0x63, 0x44, 0x44, 0x2e, 0x50, 0x03, 0x88, 0x8c, 0xca, 0xa5,
    0x5d, 0x23, 0xe3, 0x23, 0xf3, 0xee, 0xe6, 0xe8, 0xd9, 0xba, 0x6e, 0x8e, 0x5a, 0x1f, 0x83,
    0xe3, 0x9d, 0xa3, 0x81, 0x75, 0xfd, 0xe4, 0xc1, 0xdf, 0xae, 0x75, 0x5d, 0xbb, 0xbf, 0xbb,
    0xa0, 0xcb, 0x7f, 0xef, 0xc2, 0xf3, 0xe7, 0x4e, 0xe5, 0x6a, 0x7c, 0x6b, 0x5e, 0x9d, 0x77,
    0xa6, 0x8e, 0xbf, 0xb7, 0xdc, 0x47, 0xd7, 0x36, 0x9b, 0x86, 0x3d, 0x38, 0xf1, 0xec, 0x71,
    0x7e, 0x3d, 0x6e, 0x8d, 0x8e, 0xdd, 0x66, 0x64, 0x5d, 0xb7, 0x1e, 0x44, 0x5f, 0xe7, 0xf0,
    0x7b, 0x73, 0xfe, 0xe8, 0x76, 0x06, 0xfb, 0xf1, 0xdd, 0xcd, 0x7b, 0xf7, 0xd4, 0x8b, 0x1d,
    0x2b, 0xbe, 0xbd, 0xd9, 0x7e, 0x84, 0x36, 0x3e, 0xf6, 0x6b, 0x7d, 0x8c, 0x1a, 0xa7, 0xfa,
    0xf6, 0xd9, 0xe5, 0x5e, 0x74, 0xba, 0x77, 0xb2, 0x7d, 0x76, 0xd1, 0xdf, 0xc5, 0xef, 0xed,
    0x6f, 0xf7, 0xf4, 0x39, 0x3e, 0x3c, 0xbb, 0xbc, 0x3a, 0xa4, 0xbf, 0xeb, 0xbd, 0xe8, 0xe2,
    0x7f, 0xdb, 0xd6, 0x5b, 0xd1, 0x39, 0x7c, 0xbf, 0x38, 0x7f, 0xba, 0x38, 0xbb, 0xdc, 0x6f,
    0xef, 0x79, 0xd0, 0xf7, 0x3e, 0x3a, 0xc3, 0x36, 0xe3, 0xa7, 0x23, 0x78, 0x76, 0x74, 0xaa,
    0xdb, 0x17, 0x37, 0x43, 0xec, 0xff, 0x81, 0xf5, 0x87, 0x36, 0xfa, 0x7d, 0x74, 0x09, 0xfd,
    0x2f, 0xe2, 0xf6, 0xd9, 0xe5, 0xc9, 0xed, 0xf1, 0x5e, 0x13, 0xfa, 0x6d, 0x46, 0xe7, 0xf0,
    0xfc, 0xfc, 0x69, 0x17, 0xfa, 0xed, 0x1e, 0xef, 0xc5, 0xf0, 0x2c, 0x12, 0x63, 0xb5, 0xd9,
    0x57, 0xf0, 0xec, 0x92, 0x3d, 0x7b, 0x8e, 0x61, 0xfc, 0x93, 0x3f, 0xe1, 0x37, 0xda, 0xfe,
    0x07, 0x78, 0xf5, 0xa0, 0x01, 0x7f, 0x5b, 0xed, 0x9d, 0xa7, 0xe7, 0xb3, 0xfb, 0xfd, 0x3b,
    0xb3, 0x7d, 0x76, 0x75, 0xb2, 0x57, 0x04, 0xfb, 0xed, 0xf9, 0xd3, 0x09, 0xb4, 0xfd, 0x70,
    0x0f, 0xfd, 0xae, 0xf6, 0xe8, 0x3a, 0xce, 0xe9, 0x98, 0xef, 0x2b, 0x67, 0x14, 0x0f, 0xcd,
    0xb6, 0x6e, 0x37, 0x00, 0xa6, 0xdd, 0xf3, 0x9d, 0xa7, 0x3b, 0x68, 0xfb, 0x74, 0xe6, 0x3e,
    0xc3, 0xbf, 0xfd, 0x53, 0x03, 0xe7, 0xf7, 0x76, 0x04, 0x8c, 0x6d, 0x18, 0xaf, 0xcd, 0xe1,
    0xdf, 0xda, 0xfb, 0xef, 0xa3, 0x2b, 0x5c, 0xcb, 0xf8, 0x09, 0xe6, 0xdd, 0x7f, 0xaf, 0xae,
    0xd6, 0x0c, 0x73, 0x5c, 0x45, 0x09, 0xdc, 0xde, 0x76, 0xfb, 0xf2, 0x8c, 0xcd, 0x77, 0x29,
    0xa3, 0xb8, 0x3b, 0xde, 0x77, 0x00, 0x36, 0xbb, 0x01, 0xb8, 0xda, 0xbd, 0xde, 0x79, 0xfa,
    0xe1, 0x45, 0xba, 0x5c, 0xbe, 0x8f, 0xda, 0x48, 0x17, 0x8e, 0x63, 0xf1, 0x8c, 0xae, 0x41,
    0xf7, 0xec, 0x79, 0x7f, 0x87, 0xff, 0xd6, 0x80, 0xb9, 0x77, 0xcf, 0x3f, 0x02, 0x1c, 0xd7,
    0x7b, 0xc7, 0x87, 0xce, 0xce, 0xd9, 0xf5, 0x15, 0xa3, 0x2d, 0x9d, 0xdb, 0xa1, 0x73, 0x9f,
    0xb9, 0x11, 0x2f, 0xcf, 0xb0, 0x56, 0xa4, 0xe9, 0x55, 0x06, 0x3f, 0x30, 0xf6, 0xa5, 0x41,
    0x7a, 0x09, 0xe3, 0xec, 0xf6, 0x77, 0x60, 0x2d, 0x74, 0x1c, 0x72, 0x89, 0x78, 0x8e, 0x1a,
    0xd7, 0x61, 0x9b, 0xfe, 0x7e, 0xd2, 0xa2, 0xfc, 0x70, 0x75, 0x1f, 0x75, 0xf4, 0xa3, 0xed,
    0xd1, 0xc3, 0xf1, 0x5b, 0x40, 0x9b, 0x1b, 0xf8, 0xf7, 0xee, 0xf8, 0xa0, 0x09, 0x7d, 0xf7,
    0xce, 0x3e, 0x52, 0x9c, 0x1b, 0x30, 0x5f, 0x8c, 0x78, 0xbc, 0x60, 0x78, 0xdc, 0x66, 0x7c,
    0x8d, 0x3a, 0x97, 0x48, 0x73, 0x9d, 0xd1, 0xfc, 0x82, 0x8e, 0x7b, 0x2d, 0x71, 0x00, 0xe3,
    0x8d, 0x9f, 0x1e, 0x80, 0xd6, 0xdb, 0x1d, 0xe0, 0x45, 0xc4, 0x89, 0xbd, 0xd7, 0x8a, 0x4e,
    0x8e, 0x60, 0x9d, 0x4d, 0x46, 0x9f, 0x9b, 0xed, 0x9d, 0xe3, 0xdd, 0x36, 0x9b, 0xcb, 0x45,
    0xb2, 0x71, 0x4e, 0x80, 0xcb, 0x03, 0xf8, 0x8f, 0x70, 0xae, 0xda, 0xd9, 0xb8, 0x15, 0xb5,
    0x93, 0x07, 0xe7, 0xe6, 0xe8, 0xe3, 0xdd, 0xcd, 0xc9, 0x6e, 0xc7, 0xac, 0xe9, 0x77, 0xd7,
    0x90, 0xad, 0x61, 0xa7, 0x35, 0xf0, 0x62, 0xfb, 0xa0, 0x39, 0x76, 0x76, 0xb6, 0xfe, 0x6c,
    0xec, 0x3f, 0xb7, 0x0e, 0x8e, 0xfa, 0xb6, 0x79, 0xd9, 0xbb, 0xf3, 0x8f, 0x1e, 0x3a, 0xe7,
    0xfe, 0xd9, 0xe1, 0xc9, 0xc7, 0x4e, 0x65, 0xdb, 0x3b, 0x36, 0x87, 0x20, 0xbb, 0xf7, 0xf1,
    0xb9, 0x1f, 0xdd, 0x8e, 0x0d, 0xf7, 0xf6, 0xe6, 0xc4, 0x3b, 0x7a, 0x8e, 0xed, 0x8e, 0xf7,
    0x3a, 0x1e, 0x07, 0x7f, 0xde, 0x1c, 0x54, 0x7b, 0x3f, 0xbb, 0xdb, 0xdb, 0xb7, 0xfe, 0x89,
    0x0f, 0xf6, 0x3f, 0x3a, 0x3b, 0xdb, 0x1f, 0x3b, 0x30, 0x9e, 0x3d, 0xde, 0xae, 0x58, 0x07,
    0x47, 0x6b, 0x67, 0x7b, 0x7c, 0x77, 0x83, 0xff, 0x9d, 0x78, 0x1d, 0xbf, 0x0d, 0xf3, 0xec,
    0x3a, 0xfe, 0x15, 0xc8, 0xea, 0xd1, 0xf0, 0x76, 0xbc, 0x6d, 0xde, 0x5e, 0x3f, 0x19, 0x77,
    0x35, 0xbb, 0xe3, 0x6e, 0xfd, 0x79, 0x6c, 0x3c, 0x8d, 0xee, 0x6e, 0xfa, 0x8f, 0x9d, 0xca,
    0x0e, 0x30, 0xb9, 0x76, 0xa5, 0x3d, 0xbe, 0xbd, 0x3e, 0x81, 0xbf, 0x4f, 0x22, 0x98, 0xf7,
    0xb5, 0x7f, 0xd7, 0xef, 0x1c, 0x5e, 0x79, 0xad, 0x83, 0xab, 0xaa, 0x73, 0x70, 0x35, 0xba,
    0x7c, 0xdf, 0xbb, 0x1d, 0xec, 0x3f, 0x43, 0xff, 0x1d, 0x84, 0xab, 0x75, 0x18, 0xe3, 0x38,
    0xd6, 0xce, 0xd6, 0xc3, 0xcf, 0xee, 0x50, 0xfc, 0x8d, 0xf0, 0x5d, 0x5a, 0x07, 0x97, 0x3d,
    0xb0, 0x1f, 0x39, 0xd7, 0x97, 0x23, 0x84, 0x19, 0x9f, 0xb7, 0x76, 0x82, 0x07, 0xf1, 0xb7,
    0x78, 0xe5, 0x76, 0x00, 0xde, 0xd4, 0xbc, 0x87, 0x47, 0xde, 0xed, 0x75, 0xfb, 0xa1, 0x33,
    0xaa, 0xb5, 0x0e, 0xd9, 0xdc, 0xa7, 0xee, 0xf6, 0xc8, 0xb9, 0x36, 0xdc, 0xbb, 0x9b, 0x56,
    0xe6, 0xa0, 0x36, 0x69, 0xbe, 0x0b, 0xe7, 0xf0, 0x68, 0xd8, 0x19, 0xd8, 0x3d, 0x7b, 0x70,
    0x08, 0xff, 0x3d, 0x23, 0xde, 0x6f, 0x6f, 0xda, 0xc3, 0x8e, 0x59, 0xed, 0x75, 0xcc, 0xdb,
    0x73, 0xd0, 0xf7, 0xc4, 0x98, 0xc7, 0x80, 0x4b, 0x06, 0x0f, 0xc3, 0x01, 0xfd, 0xfb, 0x70,
    0xb8, 0x1d, 0x3c, 0x21, 0x8e, 0xf4, 0x8e, 0x81, 0xb8, 0xf5, 0x46, 0x77, 0xe3, 0xde, 0x50,
    0x23, 0x83, 0x7b, 0x70, 0xa5, 0x03, 0x7d, 0x47, 0xad, 0xc3, 0x76, 0x60, 0xdd, 0xbc, 0x1f,
    0x35, 0x3a, 0x07, 0x4d, 0x01, 0x43, 0xf0, 0xf3, 0x85, 0xe8, 0xb3, 0xdd, 0x04, 0x98, 0x9b,
    0xee, 0xcd, 0x3f, 0x7f, 0xa6, 0xf3, 0x06, 0xbd, 0x2b, 0x84, 0xe5, 0xc0, 0xf1, 0x3a, 0x03,
    0xbf, 0xd7, 0x8f, 0xbd, 0x5b, 0xb3, 0x09, 0x7a, 0xf5, 0xa8, 0x7f, 0x5b, 0x39, 0xeb, 0xdd,
    0x9a, 0x63, 0xa4, 0x19, 0x3e, 0xbb, 0xad, 0x1c, 0x79, 0x0e, 0xe0, 0x11, 0xe9, 0x77, 0x0b,
    0x19, 0xdc, 0x88, 0xc3, 0x9a, 0x47, 0x0e, 0xb7, 0x1f, 0x6c, 0xff, 0xac, 0x07, 0x3a, 0x57,
    0xda, 0x0e, 0x00, 0x7f, 0x5e, 0x6b, 0xcf, 0xdb, 0x03, 0x9d, 0x0e, 0x78, 0xdd, 0x87, 0xff,
    0x7b, 0x44, 0xae, 0x4d, 0xc1, 0xeb, 0x41, 0xfb, 0xc1, 0xb9, 0x3e, 0x8a, 0xee, 0xae, 0x0a,
    0x9b, 0x83, 0xf5, 0x52, 0xc1, 0x27, 0xf0, 0x58, 0x1f, 0x78, 0x03, 0xc6, 0x39, 0x01, 0xfe,
    0xc3, 0x1a, 0x6a, 0x46, 0xe7, 0xfa, 0xc8, 0xb3, 0xdd, 0x22, 0x7e, 0xe2, 0x3c, 0xb4, 0x27,
    0x6c, 0x03, 0xcc, 0x6d, 0x58, 0x73, 0x5b, 0xe1, 0x2b, 0x94, 0x89, 0x27, 0xaf, 0x73, 0x7d,
    0x76, 0xa5, 0x77, 0x7e, 0xc9, 0x60, 0xbb, 0x45, 0xf8, 0xce, 0xb7, 0x1b, 0x82, 0x57, 0x04,
    0x73, 0x1e, 0xea, 0x9d, 0x01, 0x5e, 0x80, 0xb6, 0x1e, 0x85, 0x27, 0x19, 0xff, 0xe1, 0x76,
    0xf4, 0x00, 0x87, 0xa3, 0x54, 0xdb, 0xc3, 0xed, 0x3e, 0xc8, 0x49, 0x2c, 0x68, 0xdf, 0xda,
    0x07, 0x30, 0xb6, 0x58, 0x73, 0x21, 0x6f, 0x22, 0xee, 0x91, 0x27, 0x1d, 0xe0, 0xc9, 0x4e,
    0x15, 0xc0, 0xfa, 0xfb, 0x77, 0x07, 0xcd, 0x51, 0xe7, 0xf0, 0x5e, 0xf0, 0x74, 0x3d, 0x59,
    0x7d, 0x82, 0x67, 0xfa, 0xdf, 0xf6, 0xb3, 0x73, 0xb3, 0x0d, 0xcf, 0x7b, 0xc3, 0x53, 0x89,
    0x83, 0xca, 0x2f, 0xfb, 0x5d, 0xe0, 0x96, 0xf1, 0x5f, 0x06, 0x9e, 0x5e, 0xe7, 0xe6, 0x2a,
    0x0e, 0xbc, 0x47, 0x90, 0x0d, 0xef, 0x6e, 0x67, 0xdb, 0x25, 0xe7, 0x5b, 0xe3, 0x42, 0x7e,
    0xfe, 0x01, 0xd9, 0xbf, 0x67, 0xf4, 0xbe, 0xba, 0x66, 0x72, 0x3d, 0x85, 0x5f, 0x77, 0x5b,
    0x27, 0x3a, 0xe8, 0x88, 0xe7, 0x63, 0x9f, 0xd3, 0x5e, 0x85, 0xcf, 0x37, 0xb2, 0x3a, 0xe6,
    0xad, 0x47, 0xf6, 0x47, 0xad, 0x83, 0xe6, 0x23, 0xf0, 0x5a, 0x1f, 0xe0, 0x7b, 0xe8, 0x00,
    0xe1, 0x3f, 0xa6, 0x4f, 0x40, 0x0e, 0x58, 0x9f, 0xa6, 0x0d, 0x3c, 0x5d, 0x65, 0x7a, 0x6e,
    0x5f, 0xa0, 0xa3, 0x3e, 0xd8, 0x07, 0xc0, 0xf3, 0x5c, 0x2e, 0x81, 0x57, 0x50, 0x3f, 0xde,
    0x73, 0x0e, 0x7f, 0x42, 0xf3, 0x62, 0xfd, 0xd0, 0x7e, 0xb8, 0x84, 0xbf, 0xd1, 0xcf, 0xf8,
    0xe7, 0xbe, 0xde, 0x3a, 0xe4, 0x72, 0x8a, 0xfa, 0x31, 0x0f, 0xff, 0xb6, 0x7d, 0xb8, 0x0d,
    0xcb, 0xd5, 0x33, 0xf6, 0x13, 0xfc, 0x08, 0xb0, 0xa2, 0x2e, 0xe8, 0x23, 0x7c, 0xf6, 0xe0,
    0xd1, 0xda, 0xf4, 0xc0, 0xb7, 0x39, 0x42, 0x7c, 0x0f, 0x60, 0x3c, 0xe4, 0xd1, 0x88, 0x9c,
    0xa9, 0x9c, 0xa2, 0x8e, 0xbe, 0x35, 0x9f, 0xfa, 0x76, 0x05, 0x7d, 0xa2, 0xed, 0x8f, 0xb7,
    0x55, 0xd0, 0x81, 0xa0, 0xb7, 0x81, 0x07, 0x51, 0x06, 0xa0, 0x4f, 0xc5, 0xba, 0x69, 0x07,
    0xce, 0x7e, 0x6b, 0xff, 0xd1, 0xb5, 0x0e, 0xae, 0xa2, 0xce, 0x41, 0xd3, 0x6e, 0x01, 0x8e,
    0x2f, 0xed, 0xd6, 0xc0, 0x79, 0xe8, 0x98, 0x6d, 0x97, 0x5c, 0x5f, 0xe1, 0x33, 0xa4, 0xd7,
    0xcc, 0x09, 0xfa, 0x65, 0xbb, 0xdf, 0x19, 0x9c, 0x51, 0xdd, 0x44, 0xce, 0x61, 0x9c, 0xeb,
    0x08, 0x65, 0xd5, 0xae, 0x00, 0x6e, 0xe1, 0x39, 0xe8, 0xda, 0x8f, 0xd6, 0x78, 0x7b, 0xd8,
    0x71, 0x0f, 0xee, 0x0c, 0xfc, 0x17, 0x9f, 0x83, 0xcd, 0x18, 0x22, 0xde, 0x90, 0x1f, 0x3b,
    0xfb, 0xa3, 0xce, 0x7c, 0xba, 0xe1, 0x20, 0x59, 0xdb, 0x64, 0xd9, 0xba, 0x34, 0xf7, 0x41,
    0xf4, 0xbd, 0xce, 0xc1, 0xd3, 0x43, 0xeb, 0xaa, 0x88, 0xef, 0xd8, 0x6f, 0x29, 0xfc, 0xc3,
    0x5d, 0x68, 0x0b, 0xe3, 0x08, 0xbd, 0x4c, 0xf9, 0x1a, 0xf4, 0x63, 0xcf, 0x62, 0xf8, 0x06,
    0xbf, 0x1b, 0xda, 0x3e, 0xd2, 0x10, 0xfa, 0xf8, 0x57, 0xc8, 0x13, 0x15, 0xa0, 0x77, 0x70,
    0x73, 0x07, 0xbf, 0x81, 0x3e, 0xb9, 0xde, 0x07, 0x5e, 0x40, 0x98, 0xab, 0x3d, 0xcb, 0x3f,
    0x5a, 0x57, 0xb3, 0xd6, 0x63, 0xd4, 0xda, 0x03, 0x6f, 0x0c, 0xbc, 0x81, 0x7a, 0xd7, 0x40,
    0x99, 0xc8, 0x61, 0x46, 0xc6, 0xf6, 0xf6, 0x7a, 0x36, 0xe7, 0x1b, 0xa1, 0x07, 0x0a, 0x6d,
    0x22, 0xe7, 0xc0, 0x2b, 0x9c, 0xb7, 0x02, 0xd9, 0x77, 0x8a, 0xfd, 0xd9, 0x46, 0xda, 0x38,
    0xd5, 0x73, 0xc7, 0x34, 0x14, 0xbd, 0xc8, 0xe5, 0xa3, 0x08, 0x8f, 0x29, 0x9d, 0xbc, 0x2f,
    0x3f, 0xd1, 0x2b, 0x5e, 0x51, 0x3b, 0x86, 0xc3, 0x8b, 0x0a, 0xc8, 0x31, 0xf8, 0xf7, 0x60,
    0x36, 0x40, 0x7f, 0x3f, 0x33, 0xbb, 0xe3, 0x80, 0xea, 0x98, 0x4e, 0x87, 0xdb, 0x73, 0xda,
    0xe2, 0xca, 0x31, 0x3d, 0x1d, 0x7c, 0x05, 0x3e, 0x6e, 0xf3, 0x91, 0xca, 0x34, 0xe8, 0x36,
    0x83, 0x63, 0xf4, 0x43, 0x6c, 0xbf, 0x3d, 0x9c, 0x20, 0xd7, 0x43, 0xd0, 0x07, 0x9e, 0x3d,
    0xeb, 0xdf, 0x82, 0x6c, 0x5c, 0x72, 0x3d, 0x79, 0x85, 0xe3, 0xed, 0x21, 0xee, 0xbc, 0x0f,
    0x21, 0xca, 0x77, 0x0d, 0xf0, 0xfc, 0x7e, 0x32, 0x4d, 0x98, 0xde, 0x1b, 0x58, 0x10, 0xab,
    0x98, 0x0f, 0xb2, 0xcf, 0xce, 0xbe, 0x82, 0xd7, 0xa6, 0xb0, 0xa3, 0xc8, 0x1f, 0xf7, 0xf0,
    0xf2, 0x6e, 0xd2, 0x76, 0x77, 0x4f, 0x5d, 0xff, 0x8c, 0xb6, 0xad, 0x8d, 0xc4, 0xd6, 0x1d,
    0x68, 0xfb, 0x1e, 0xdb, 0xba, 0x10, 0x17, 0x45, 0xf0, 0xfb, 0xa8, 0xc8, 0x2e, 0x9e, 0x99,
    0xef, 0xd6, 0x8c, 0x84, 0x2e, 0xf1, 0xd0, 0x46, 0x83, 0x7e, 0x00, 0xfd, 0xd1, 0x8c, 0x5b,
    0x4f, 0xb6, 0xf0, 0xe7, 0x40, 0x3f, 0x3c, 0x02, 0xbf, 0x86, 0xb7, 0xd7, 0x4e, 0x4a, 0x7f,
    0xaf, 0x0d, 0x50, 0xe7, 0x74, 0x68, 0xac, 0x55, 0xe3, 0xb4, 0x3a, 0xf1, 0x00, 0x27, 0x7d,
    0x72, 0x82, 0x36, 0xf0, 0x99, 0xfb, 0x82, 0x1f, 0xdf, 0x5f, 0xbc, 0xaf, 0x16, 0xd0, 0x81,
    0xd9, 0xda, 0xbb, 0xc2, 0x35, 0x1d, 0xe0, 0xbc, 0x97, 0xe6, 0xc9, 0x03, 0xe8, 0xd7, 0xfb,
    0xeb, 0xe6, 0xbd, 0x83, 0x31, 0x9f, 0xb4, 0x05, 0xdb, 0xd7, 0x67, 0x97, 0x4f, 0x57, 0xed,
    0xbd, 0x48, 0xf0, 0xfa, 0xd5, 0xfd, 0xfe, 0xfb, 0xab, 0xcb, 0xcb, 0x71, 0xd1, 0xda, 0xce,
    0x39, 0x03, 0x3f, 0xe7, 0xf6, 0x86, 0xca, 0x5e, 0x80, 0x3e, 0x24, 0xda, 0x69, 0xe6, 0xb3,
    0xeb, 0xda, 0x02, 0x9f, 0xe5, 0xc9, 0x73, 0x06, 0x57, 0x11, 0xac, 0xd1, 0xb0, 0x77, 0xd0,
    0x80, 0xff, 0x07, 0xbc, 0xcb, 0x78, 0x3f, 0xe1, 0xc5, 0xbb, 0x6b, 0x6f, 0x8c, 0x3c, 0x46,
    0xca, 0xe0, 0x84, 0xf9, 0x64, 0x07, 0xde, 0x3d, 0xb7, 0xe7, 0xd0, 0x6f, 0x5f, 0x6f, 0xed,
    0x4e, 0xdb, 0x57, 0x67, 0x0f, 0xe7, 0x83, 0x7d, 0xf3, 0xf6, 0xbc, 0xf9, 0x27, 0xe8, 0xca,
    0x31, 0xea, 0xe7, 0xc1, 0x13, 0xda, 0x77, 0xd0, 0xc7, 0xfb, 0xe8, 0x7f, 0xa1, 0x4d, 0x08,
    0x76, 0xa2, 0x0e, 0xe8, 0x6d, 0xd0, 0xf3, 0xd1, 0xdd, 0xe1, 0x09, 0x9b, 0xe7, 0xe0, 0xae,
    0xfe, 0x46, 0x67, 0xd0, 0x34, 0xee, 0xcc, 0x5e, 0xcf, 0xb9, 0xd9, 0xe2, 0xfe, 0x5f, 0x1b,
    0x7d, 0x39, 0x93, 0xa7, 0xcf, 0xaf, 0xda, 0x68, 0xf3, 0xbd, 0x8b, 0x83, 0x2b, 0xf3, 0xee,
    0xe9, 0x39, 0x85, 0x8f, 0xbc, 0x2f, 0x7c, 0x74, 0x86, 0xff, 0x5e, 0x7a, 0xe0, 0x03, 0x5e,
    0xef, 0x40, 0x67, 0xab, 0x76, 0x0c, 0xda, 0xd4, 0x99, 0xae, 0xbc, 0x83, 0x18, 0xfa, 0x2c,
    0xb1, 0xe4, 0xdc, 0x3c, 0x1e, 0x38, 0x3c, 0x01, 0xff, 0xd3, 0x78, 0xb8, 0x3b, 0xbc, 0x42,
    0x87, 0xf1, 0xd1, 0x8e, 0x3d, 0x3a, 0xae, 0xa8, 0xcf, 0x6d, 0x1c, 0xd7, 0xbd, 0xb9, 0xd1,
    0x7a, 0xeb, 0x9c, 0xaf, 0xfa, 0x49, 0xe7, 0xff, 0xb3, 0xc5, 0xf3, 0x96, 0xb3, 0x13, 0x30,
    0xff, 0xaf, 0x6e, 0xd4, 0x2b, 0xd9, 0xfc, 0x7f, 0x55, 0xaf, 0x7c, 0xdb, 0xff, 0x7b, 0x95,
    0x17, 0xc9, 0xff, 0xab, 0x05, 0xa1, 0x95, 0xdc, 0x9b, 0xac, 0xb1, 0xa7, 0xa6, 0xf5, 0x69,
    0xe4, 0x17, 0x96, 0x55, 0xa4, 0x85, 0x17, 0xdf, 0x29, 0x75, 0x13, 0x0b, 0x12, 0xb7, 0xca,
    0x65, 0x7e, 0x21, 0x47, 0x39, 0x24, 0xf8, 0x46, 0xe5, 0xbb, 0x77, 0x03, 0x96, 0x71, 0x5b,
    0x17, 0x5c, 0xc3, 0xf1, 0xaa, 0xf6, 0xd3, 0xdf, 0x33, 0x45, 0x08, 0x79, 0x83, 0x5f, 0xe8,
    0xe5, 0x7b, 0x32, 0xc6, 0x3c, 0x22, 0xfb, 0xa2, 0xe4, 0x81, 0x33, 0x33, 0xf2, 0x4e, 0xc9,
    0x9f, 0xd6, 0x30, 0x2f, 0x98, 0xcf, 0x19, 0xab, 0x0b, 0x95, 0x7f, 0xcb, 0x54, 0xee, 0x72,
    0x22, 0x50, 0xf3, 0xfa, 0x2a, 0xda, 0xff, 0x95, 0xcb, 0xbf, 0x03, 0x0e, 0xd3, 0x99, 0xed,
    0x95, 0xd4, 0xaf, 0x98, 0xbd, 0xd4, 0x48, 0xe4, 0xb9, 0x7e, 0xbc, 0xee, 0xb8, 0xf4, 0x55,
    0x75, 0x9f, 0x3c, 0xc5, 0xeb, 0x58, 0x3b, 0x53, 0xfb, 0x07, 0x2d, 0x09, 0x44, 0x0f, 0x32,
    0xb3, 0x46, 0x1b, 0x7e, 0xb0, 0x2e, 0xcb, 0x25, 0xaa, 0xa9, 0x63, 0x75, 0xd0, 0xd5, 0xfc,
    0xc3, 0xb2, 0x51, 0xa1, 0xee, 0x3c, 0x48, 0x94, 0xf0, 0xab, 0x06, 0x14, 0x0e, 0xc8, 0x60,
    0x45, 0x6b, 0xba, 0x17, 0x20, 0x2a, 0xeb, 0x03, 0x5a, 0xfe, 0x26, 0xfe, 0xfe, 0x9b, 0x42,
    0x65, 0x57, 0x62, 0xd2, 0x9d, 0x0e, 0x1c, 0xa3, 0xfc, 0x1b, 0x4d, 0x4d, 0x4f, 0x10, 0x8b,
    0x63, 0x35, 0x15, 0x9d, 0x69, 0xcf, 0x52, 0xd0, 0x5f, 0x43, 0x5a, 0x79, 0x53, 0xa6, 0x96,
    0x0c, 0x61, 0xb9, 0xcb, 0x72, 0x8c, 0x61, 0x11, 0x98, 0xd8, 0x63, 0x0c, 0x39, 0x3d, 0x3d,
    0x0d, 0xc0, 0x1d, 0xc3, 0x10, 0xee, 0xe3, 0xb0, 0x43, 0xd3, 0xce, 0xd7, 0xfb, 0x8f, 0xf6,
    0xb4, 0xa9, 0xbc, 0x77, 0x4f, 0xdd, 0x56, 0xe3, 0x94, 0xa5, 0x66, 0xb7, 0x8f, 0xf7, 0x8c,
    0xb3, 0xeb, 0xbd, 0xe8, 0x12, 0x53, 0xa3, 0x2c, 0xa5, 0xeb, 0x66, 0x52, 0xbf, 0x37, 0x34,
    0xf7, 0x91, 0xa6, 0x8a, 0x1f, 0xe1, 0x3b, 0x4b, 0x83, 0xb2, 0xd4, 0xa8, 0x68, 0x93, 0x4a,
    0x5e, 0x24, 0x69, 0xc4, 0x5d, 0xf9, 0x0c, 0xd3, 0xd4, 0xe3, 0xa7, 0x7d, 0x78, 0xb6, 0x9f,
    0xdb, 0xd2, 0x67, 0xa7, 0x86, 0xb7, 0x7d, 0x66, 0xd6, 0xf6, 0x44, 0x2a, 0x9a, 0x8f, 0x8b,
    0xde, 0xe3, 0x4c, 0xca, 0x95, 0x8f, 0x0b, 0xf3, 0x5f, 0xda, 0xa9, 0x94, 0x6b, 0x0a, 0xee,
    0xf8, 0x8e, 0xa7, 0xa7, 0x39, 0x6c, 0xca, 0xb8, 0xcf, 0x74, 0x2d, 0x7f, 0x9e, 0xb9, 0xa2,
    0x4b, 0x6b, 0x23, 0x3c, 0x27, 0xf7, 0x2d, 0x31, 0x77, 0x92, 0xc6, 0xad, 0x6c, 0xef, 0xaa,
    0xdc, 0x36, 0x4d, 0x5f, 0x6e, 0xf3, 0xf4, 0x6b, 0x73, 0x5a, 0x1a, 0xb7, 0x7f, 0xbc, 0x4f,
    0xb0, 0x34, 0xad, 0xec, 0xc0, 0xd8, 0x77, 0xfa, 0xd1, 0xf6, 0xd9, 0xcd, 0x55, 0x2a, 0x2d,
    0xee, 0x5b, 0xd8, 0xe7, 0xa0, 0xbd, 0xf3, 0xf4, 0x00, 0xdf, 0xf7, 0x59, 0x7a, 0xf7, 0x04,
    0xa3, 0x7b, 0x67, 0x97, 0x7b, 0xe3, 0xf6, 0x2e, 0x7e, 0x7f, 0xff, 0xcc, 0x53, 0xb7, 0x43,
    0x1b, 0xd3, 0xe1, 0x77, 0x2c, 0xc5, 0x7c, 0xb2, 0x93, 0x4e, 0xed, 0xcb, 0xf4, 0x3a, 0xb6,
    0xa1, 0xa9, 0xf2, 0x9b, 0xfe, 0x0e, 0xc3, 0x6f, 0xbc, 0x73, 0x7c, 0xb0, 0x4f, 0xd3, 0xc9,
    0xcb, 0xab, 0xf1, 0xd3, 0x15, 0x4d, 0x31, 0x73, 0x58, 0x30, 0xcd, 0x6d, 0xed, 0x9d, 0x09,
    0x1d, 0x8b, 0x34, 0x70, 0xdb, 0xbb, 0x8f, 0x1c, 0x84, 0x1b, 0xe8, 0x7d, 0x0b, 0xf0, 0x39,
    0x47, 0x98, 0x0e, 0xbe, 0xda, 0x6f, 0x29, 0xe9, 0xe0, 0xfb, 0x3b, 0xbd, 0x15, 0x5d, 0x43,
    0xeb, 0x73, 0x9a, 0x7a, 0xb7, 0x78, 0x9a, 0xf9, 0x8e, 0xd2, 0xe6, 0x2a, 0xa0, 0xa9, 0x68,
    0x49, 0xc3, 0x5c, 0x1f, 0x4f, 0x2e, 0x5b, 0x2a, 0xdf, 0x3f, 0x9f, 0x61, 0x3a, 0x0f, 0x5c,
    0x67, 0x07, 0x79, 0xfd, 0x68, 0x52, 0x38, 0x7e, 0x7e, 0x77, 0x7d, 0x07, 0xe1, 0xc5, 0x89,
    0x4a, 0x77, 0xa5, 0xc2, 0x3d, 0x4c, 0x8b, 0x1d, 0x61, 0x18, 0x56, 0x6f, 0xed, 0x0b, 0xf7,
    0xdd, 0xbf, 0x85, 0x7f, 0xdb, 0x98, 0x8e, 0xf3, 0xbd, 0xce, 0xcd, 0x45, 0x92, 0xfa, 0x48,
    0x6f, 0x29, 0x57, 0x34, 0x3d, 0xcf, 0x25, 0x1d, 0xb3, 0x26, 0x42, 0x03, 0x35, 0xe4, 0xb5,
    0xab, 0x5a, 0x12, 0x4e, 0xd9, 0x79, 0x78, 0x92, 0x94, 0xac, 0xd1, 0x19, 0xc4, 0xa3, 0x4e,
    0x19, 0x9d, 0xca, 0xd0, 0x3f, 0x09, 0xd3, 0x59, 0xba, 0xe4, 0x3d, 0xa6, 0x0e, 0x07, 0x9d,
    0x08, 0xf5, 0xc1, 0xcd, 0x95, 0xf3, 0x25, 0x69, 0x9d, 0xe7, 0x0b, 0x90, 0xe5, 0x9f, 0x0f,
    0xeb, 0x82, 0xb1, 0x8f, 0x92, 0x7e, 0x34, 0x8d, 0x39, 0x3c, 0xc5, 0x54, 0xd4, 0x35, 0x84,
    0x83, 0xb3, 0x4d, 0x11, 0x8a, 0x1f, 0xef, 0x24, 0x30, 0x7c, 0x70, 0x95, 0xb4, 0x91, 0x4c,
    0xa6, 0xc7, 0x3d, 0x1e, 0x48, 0x5c, 0x8e, 0xa0, 0x0d, 0xe8, 0x9a, 0x13, 0xef, 0xe7, 0x9d,
    0xdc, 0xb6, 0x3a, 0xa6, 0xe1, 0x54, 0x7b, 0x4c, 0xce, 0xef, 0x7b, 0x1f, 0x2e, 0xaa, 0xa9,
    0x9e, 0xd4, 0x39, 0x46, 0xcc, 0xdb, 0xd4, 0xc2, 0xbb, 0x1b, 0xcf, 0x69, 0xed, 0xea, 0x3d,
    0x16, 0xf5, 0xef, 0x45, 0x1a, 0xb8, 0x91, 0xa4, 0x15, 0x30, 0xc4, 0x69, 0x83, 0xce, 0xab,
    0xfd, 0x9f, 0x93, 0xb4, 0x30, 0xcc, 0xd7, 0xe8, 0x42, 0xa8, 0x07, 0x21, 0xcf, 0x8c, 0xb5,
    0x73, 0x3a, 0x14, 0xa6, 0xe8, 0x2e, 0x31, 0x9d, 0x27, 0x53, 0xad, 0xf4, 0xef, 0xbe, 0x87,
    0x2d, 0xe7, 0x60, 0xb3, 0x67, 0x9b, 0xfd, 0x07, 0x67, 0x4c, 0xd3, 0x2c, 0x34, 0xec, 0x74,
    0x65, 0x0f, 0x74, 0x82, 0x79, 0x30, 0x2c, 0x65, 0x29, 0x39, 0xe0, 0x57, 0xa0, 0xc5, 0x47,
    0x37, 0x30, 0x3d, 0x17, 0x77, 0xcc, 0xb6, 0x81, 0xa9, 0xe3, 0x5b, 0x08, 0x9d, 0x3a, 0x83,
    0x1f, 0x53, 0x46, 0x22, 0x3c, 0x9d, 0x90, 0xde, 0xc5, 0xf1, 0x30, 0xfc, 0xde, 0xe5, 0x29,
    0x0e, 0xef, 0xf6, 0xd8, 0xba, 0xb9, 0xeb, 0x63, 0xfa, 0x3a, 0x9b, 0x4e, 0xfd, 0x19, 0x78,
    0xcb, 0x53, 0x15, 0xc7, 0xe3, 0xcd, 0x1e, 0x84, 0x82, 0x11, 0xca, 0xc6, 0xf1, 0x75, 0x7b,
    0x9b, 0x94, 0xe6, 0x31, 0x86, 0x47, 0xce, 0x8e, 0x81, 0xcf, 0x41, 0x56, 0xb6, 0x75, 0x82,
    0x55, 0xf3, 0x04, 0xc6, 0xdc, 0x86, 0x76, 0x57, 0xcf, 0x1d, 0xe4, 0xf1, 0x1d, 0xe0, 0xdb,
    0x31, 0xba, 0xbd, 0x36, 0x30, 0x65, 0x06, 0xa1, 0xdb, 0x95, 0x1a, 0xd2, 0x29, 0xcf, 0x2f,
    0x17, 0x83, 0xab, 0x67, 0x07, 0x69, 0xa0, 0x73, 0xb8, 0x39, 0x3f, 0x2a, 0xe9, 0x2f, 0x99,
    0x11, 0xfc, 0x4b, 0xd3, 0x26, 0x28, 0x47, 0xe7, 0xdb, 0x7a, 0x67, 0xbc, 0xfd, 0x6c, 0x1d,
    0x2b, 0xad, 0x43, 0x07, 0xd3, 0x55, 0xfd, 0x0e, 0xc8, 0x00, 0xa6, 0x06, 0x3b, 0x74, 0xdc,
    0x7b, 0x35, 0xbd, 0x08, 0xf2, 0x3d, 0xee, 0x54, 0x90, 0x1e, 0x32, 0x9c, 0x73, 0x41, 0x37,
    0x5d, 0xdb, 0x1f, 0x63, 0x3a, 0x52, 0xa4, 0x73, 0x45, 0x7a, 0x63, 0x02, 0x4e, 0xbd, 0xbb,
    0x34, 0xac, 0xc0, 0x37, 0x8f, 0x98, 0x1e, 0xb7, 0xae, 0xdf, 0xa7, 0xe4, 0xd6, 0x3e, 0x3c,
    0xb0, 0x7f, 0xec, 0x1c, 0x2a, 0x29, 0xb9, 0xf1, 0x56, 0xb3, 0xb5, 0xe3, 0x3c, 0x02, 0x5d,
    0x65, 0xab, 0x93, 0x73, 0x3b, 0xe1, 0x23, 0x36, 0xbf, 0x92, 0xc2, 0xa2, 0x5b, 0x12, 0x43,
    0xdd, 0x90, 0xa6, 0xd4, 0x65, 0x8a, 0xee, 0x31, 0x59, 0xdf, 0xa1, 0x33, 0x84, 0x10, 0x9a,
    0x22, 0x19, 0x5c, 0xc7, 0xee, 0xf6, 0x29, 0xc0, 0x1d, 0xdf, 0x5e, 0x3f, 0x8a, 0x34, 0x3a,
    0x6f, 0x6d, 0x4f, 0xd0, 0x79, 0x7c, 0x5d, 0xfb, 0x32, 0x05, 0xd8, 0x28, 0x4a, 0xbd, 0xd1,
    0xe5, 0x8b, 0x24, 0xed, 0xc6, 0xd2, 0xd4, 0x62, 0x2b, 0xe5, 0xeb, 0x0b, 0x7f, 0xff, 0xcf,
    0x44, 0xfc, 0x1f, 0x83, 0xaf, 0xb9, 0x21, 0x2e, 0x54, 0x28, 0xe3, 0x19, 0x91, 0xe5, 0xcd,
    0x35, 0xfe, 0xaf, 0x36, 0xea, 0x66, 0x3d, 0x77, 0xfe, 0xaf, 0x51, 0xfb, 0x56, 0xff, 0xfb,
    0x3e, 0x18, 0xfc, 0x94, 0x58, 0x55, 0x46, 0x59, 0xa9, 0x5f, 0x16, 0xc5, 0x67, 0x07, 0x81,
    0x6b, 0xd2, 0xd1, 0xce, 0xd9, 0xeb, 0xd8, 0xe2, 0x32, 0x85, 0x52, 0x10, 0xf6, 0x2c, 0xdf,
    0xb6, 0xf8, 0x1d, 0x00, 0xc9, 0x8d, 0x25, 0xa5, 0x30, 0xf0, 0x52, 0xf7, 0xd5, 0x88, 0xd1,
    0x57, 0x5e, 0x78, 0xbf, 0x34, 0x0a, 0xf1, 0x5e, 0xee, 0x12, 0xbe, 0x6f, 0x11, 0xfd, 0xb0,
    0x61, 0x3d, 0x46, 0x65, 0x4b, 0x9e, 0x3a, 0xc6, 0xa6, 0xac, 0xb8, 0xbe, 0x43, 0xb0, 0xfe,
    0xf1, 0x6d, 0x76, 0x05, 0x0e, 0x07, 0xaf, 0xf8, 0xd0, 0x1f, 0x0c, 0xf7, 0xcf, 0xa4, 0x02,
    0xa4, 0x66, 0xeb, 0x41, 0x37, 0xdb, 0x3c, 0x3f, 0xdb, 0x78, 0xc7, 0x0b, 0xa2, 0x51, 0x48,
    0x4f, 0x29, 0xef, 0x22, 0x89, 0xf1, 0x95, 0xbe, 0x38, 0x73, 0xc9, 0x88, 0x13, 0xc4, 0x3e,
    0x33, 0x37, 0x20, 0xa4, 0xef, 0x15, 0xe0, 0x67, 0xad, 0x8f, 0xce, 0x5b, 0xad, 0xf2, 0x05,
    0x60, 0x54, 0xde, 0x81, 0xe1, 0x47, 0x9e, 0x05, 0xb1, 0xe9, 0x89, 0x68, 0x48, 0x0f, 0x1e,
    0x6f, 0xd9, 0x0b, 0x29, 0xa8, 0x00, 0xb7, 0x9c, 0x59, 0xa3, 0x7d, 0x10, 0x0d, 0xe9, 0x68,
    0x9b, 0x72, 0xc5, 0x88, 0x72, 0xf3, 0x47, 0x2f, 0x28, 0xa9, 0x17, 0x70, 0xc3, 0x93, 0x8f,
    0x83, 0x95, 0x5d, 0xc9, 0xc0, 0x7a, 0x20, 0xf9, 0x1b, 0x20, 0x4a, 0x56, 0x18, 0xbb, 0x5d,
    0x8e, 0x19, 0x4c, 0xb6, 0x84, 0x80, 0x21, 0x2d, 0x73, 0x1b, 0x47, 0x2f, 0x0c, 0x46, 0x43,
    0x52, 0xbc, 0x13, 0x23, 0x58, 0x01, 0xb1, 0x5d, 0x46, 0xc5, 0x14, 0x4d, 0xbe, 0x20, 0x84,
    0x7f, 0x7a, 0xf7, 0x72, 0x02, 0x43, 0x99, 0xc2, 0x50, 0xb8, 0xe6, 0x8f, 0xb9, 0x5b, 0x59,
    0xe1, 0xa0, 0xf0, 0x06, 0x8e, 0xc9, 0x63, 0x0c, 0xc7, 0xc0, 0xeb, 0x59, 0x94, 0x94, 0xf0,
    0x9d, 0x13, 0x2e, 0x53, 0x74, 0xac, 0x72, 0x66, 0xac, 0xd4, 0x92, 0x06, 0xe2, 0xa6, 0x13,
    0xed, 0xef, 0xd8, 0xf6, 0xf7, 0xcc, 0xbc, 0x2b, 0xea, 0xbf, 0x13, 0x2f, 0xd2, 0xc9, 0x70,
    0x2b, 0x72, 0xec, 0x69, 0x77, 0xf9, 0x7c, 0xcb, 0xc6, 0x7c, 0x33, 0xee, 0x95, 0x88, 0xfc,
    0xb8, 0x38, 0xe8, 0x2e, 0x8b, 0x97, 0xe5, 0xaa, 0x96, 0xc8, 0xd3, 0x85, 0x98, 0x9a, 0xc1,
    0xbf, 0x07, 0xdd, 0xe9, 0x3c, 0xae, 0xa8, 0x6a, 0xf9, 0x22, 0x25, 0xe5, 0x1f, 0x2d, 0x72,
    0x0d, 0x6f, 0x8a, 0x22, 0xc4, 0x90, 0xe6, 0xb9, 0x9d, 0x10, 0x0b, 0x7c, 0xe0, 0xc6, 0x06,
    0xcd, 0x98, 0x32, 0x17, 0xbb, 0x9d, 0x25, 0x75, 0x39, 0x91, 0x7a, 0x0f, 0x11, 0xbd, 0x08,
    0x96, 0x94, 0xf9, 0x88, 0xa5, 0xdc, 0x92, 0x5f, 0xe8, 0x2b, 0x70, 0x98, 0x97, 0x8c, 0xca,
    0x71, 0xc5, 0xe4, 0xb4, 0xdb, 0x8c, 0x18, 0x94, 0xfd, 0x60, 0x40, 0x86, 0x9c, 0xae, 0xc2,
    0xf5, 0xdc, 0xb8, 0x3f, 0xea, 0xa0, 0x99, 0x43, 0xab, 0x47, 0x09, 0xc1, 0x80, 0xc2, 0xbf,
    0x0a, 0x2f, 0x93, 0xe1, 0xef, 0x1f, 0xd2, 0x85, 0xd2, 0xb7, 0x12, 0xf1, 0x05, 0x44, 0xf6,
    0xb0, 0xd4, 0x13, 0xaf, 0xbf, 0x2a, 0x85, 0x64, 0x18, 0x44, 0x58, 0x19, 0x7c, 0xac, 0xac,
    0xd6, 0x30, 0x60, 0x8f, 0x04, 0xef, 0x45, 0x1b, 0x53, 0xae, 0xd0, 0x12, 0x17, 0x01, 0x95,
    0xfa, 0x52, 0xb1, 0x09, 0x2f, 0x58, 0x57, 0x19, 0x5b, 0x4b, 0x64, 0x44, 0x00, 0xf8, 0x00,
    0x90, 0xae, 0x74, 0x43, 0x2f, 0x1b, 0x72, 0x81, 0x72, 0xdb, 0x69, 0x9a, 0x91, 0x4f, 0x5d,
    0xa4, 0x2a, 0xb2, 0xc5, 0x6e, 0xbc, 0x9a, 0x76, 0xcf, 0x95, 0x91, 0xbf, 0x27, 0x79, 0x89,
    0x92, 0xd6, 0x9c, 0x39, 0x17, 0x2b, 0xa0, 0xb2, 0x53, 0x2c, 0xbb, 0x05, 0xba, 0x6a, 0x61,
    0xc1, 0x2a, 0xdc, 0xfc, 0x2e, 0x11, 0xf6, 0xbb, 0x3f, 0x71, 0xbe, 0x62, 0xf9, 0x9e, 0x2c,
    0x48, 0x88, 0x59, 0xc3, 0x4f, 0x10, 0xdb, 0x2c, 0x36, 0xf3, 0x98, 0x7c, 0x89, 0xad, 0x39,
    0x3b, 0x79, 0x23, 0xf3, 0x12, 0x03, 0x03, 0x03, 0x25, 0x96, 0x45, 0x0e, 0xc4, 0xeb, 0xb4,
    0x8f, 0xba, 0x5d, 0xf7, 0x09, 0x07, 0x5b, 0x77, 0xc8, 0xc3, 0x10, 0x8b, 0xec, 0x93, 0xc7,
    0x95, 0xd8, 0x29, 0xbb, 0x93, 0xa5, 0x63, 0x81, 0xbd, 0x99, 0x6c, 0x6b, 0xd4, 0xdb, 0xeb,
    0x36, 0x2f, 0x4a, 0x87, 0x1c, 0xcc, 0xe5, 0xdd, 0xbd, 0xab, 0x0f, 0xed, 0xbd, 0xab, 0xd6,
    0x75, 0xfe, 0x8e, 0xbb, 0x85, 0xb9, 0x0b, 0xc1, 0x4b, 0xad, 0x3c, 0x65, 0x6f, 0x26, 0xda,
    0x5c, 0xb7, 0x1c, 0xeb, 0x4d, 0x35, 0x2b, 0xa9, 0x2b, 0xfd, 0xa6, 0xf2, 0x67, 0xf6, 0x92,
    0xba, 0x61, 0x35, 0x43, 0xb7, 0x14, 0x1d, 0xfc, 0x5f, 0xd6, 0x6d, 0x83, 0xca, 0x35, 0xc5,
    0xaf, 0x62, 0xbc, 0xfc, 0xce, 0xe2, 0x09, 0xaf, 0x85, 0xcc, 0xf3, 0x5e, 0xc8, 0x62, 0x57,
    0x16, 0x62, 0x27, 0x77, 0x17, 0x21, 0xc2, 0xf0, 0xd2, 0xab, 0x08, 0xa7, 0x28, 0xe6, 0x66,
    0xa2, 0xe2, 0x01, 0xc1, 0xb7, 0x71, 0xbe, 0xfc, 0x05, 0x84, 0x02, 0x42, 0xfe, 0xae, 0x4a,
    0x02, 0xfd, 0xe2, 0xd3, 0x9a, 0x79, 0xc5, 0x9a, 0xbf, 0xc0, 0xae, 0x90, 0x40, 0xd3, 0x23,
    0xa4, 0x6b, 0x6b, 0x17, 0x5f, 0x8f, 0xe2, 0xf7, 0x8e, 0x7e, 0xd1, 0x9b, 0x35, 0x8b, 0x19,
    0xdf, 0xe4, 0x62, 0x95, 0x3b, 0xbd, 0xe4, 0xa6, 0x24, 0x5a, 0x95, 0x25, 0xf7, 0x06, 0xdb,
    0x0c, 0xab, 0x2c, 0x2c, 0xc7, 0xa6, 0x9f, 0x7d, 0x23, 0xf0, 0x14, 0x5e, 0x35, 0x2b, 0x39,
    0x45, 0xcf, 0x22, 0x90, 0xfe, 0x3d, 0xaf, 0xf8, 0x9d, 0x71, 0xf5, 0xa6, 0x59, 0x9d, 0xc9,
    0xca, 0x5b, 0x7b, 0x0b, 0x5f, 0x3d, 0xcb, 0xf8, 0xe5, 0xb3, 0x6f, 0x9f, 0x6d, 0xed, 0x87,
    0xf1, 0x1d, 0xef, 0xa5, 0x37, 0x62, 0x4f, 0xb3, 0x02, 0xc0, 0xf6, 0x58, 0x62, 0x93, 0x9f,
    0xe0, 0xca, 0x19, 0x0b, 0x85, 0x88, 0x72, 0x6f, 0xbf, 0xfa, 0x96, 0xf6, 0x6b, 0xa9, 0x4f,
    0x2f, 0xf8, 0xb5, 0x84, 0x2f, 0xe0, 0xff, 0x5a, 0xc2, 0xda, 0x5c, 0x9d, 0x31, 0x81, 0xaf,
    0x2c, 0x3b, 0x22, 0x6e, 0xe1, 0x88, 0xfb, 0x64, 0xac, 0x61, 0xcd, 0x2e, 0x5e, 0x5f, 0xc9,
    0x3a, 0xa0, 0xf4, 0x59, 0x91, 0xf6, 0xee, 0xc8, 0x67, 0xf7, 0x05, 0xf1, 0x95, 0xe0, 0x25,
    0x78, 0x95, 0xca, 0xcb, 0x0d, 0xce, 0x16, 0xaf, 0xaf, 0x8f, 0x65, 0xb4, 0x39, 0xf4, 0xb2,
    0x3e, 0x2d, 0x33, 0xe5, 0x10, 0x5a, 0x73, 0x91, 0x4f, 0xb8, 0xa8, 0xd0, 0x4a, 0x94, 0xbf,
    0xcc, 0xd6, 0x36, 0x73, 0x50, 0xce, 0xbc, 0xe0, 0x76, 0x79, 0x42, 0x99, 0x91, 0x11, 0x05,
    0xe7, 0x58, 0xab, 0x13, 0x59, 0xe0, 0xaf, 0xcb, 0xbc, 0x21, 0x77, 0xd6, 0xad, 0xdb, 0xe6,
    0xe1, 0xa4, 0x30, 0xa5, 0xc5, 0x72, 0xe1, 0x2b, 0x64, 0x67, 0xdc, 0xc9, 0xbd, 0xf8, 0x0d,
    0x09, 0xef, 0xcc, 0x21, 0xda, 0x17, 0x7d, 0x90, 0xb5, 0x63, 0xf2, 0x40, 0xbc, 0xa8, 0x25,
    0xeb, 0x8b, 0x88, 0xb9, 0x8b, 0xd5, 0x36, 0xf1, 0x45, 0x61, 0x9b, 0xbe, 0x0c, 0xee, 0x3a,
    0xa5, 0x6a, 0x2a, 0x33, 0xe5, 0x93, 0xbd, 0x8b, 0x8d, 0x23, 0x88, 0x12, 0xd8, 0xd8, 0xfc,
    0x1b, 0xd5, 0x06, 0xf4, 0x1a, 0x1f, 0x5a, 0xf8, 0x9d, 0x55, 0xcf, 0xfa, 0xd5, 0xef, 0x5a,
    0x99, 0x22, 0xbd, 0x3c, 0x72, 0x34, 0xe4, 0x05, 0x54, 0x09, 0xf9, 0x0c, 0x49, 0x96, 0xeb,
    0x37, 0xf2, 0xf8, 0x7d, 0x12, 0x62, 0x95, 0x0f, 0xea, 0x41, 0x4a, 0xbf, 0xd1, 0xd4, 0x3c,
    0xa5, 0xf4, 0xa4, 0x8b, 0x09, 0x75, 0x21, 0xb2, 0x65, 0xd7, 0xe4, 0x62, 0xae, 0x94, 0xb0,
    0x67, 0xaa, 0xca, 0x2d, 0x4c, 0xff, 0x25, 0xa3, 0xe4, 0xb8, 0xe1, 0x35, 0xd4, 0x85, 0xa1,
    0xa9, 0xbe, 0x78, 0x3d, 0x55, 0x60, 0xe8, 0xcd, 0x99, 0xba, 0xa0, 0x63, 0x3d, 0xcf, 0xe3,
    0x16, 0x33, 0xc1, 0x6c, 0x49, 0x7d, 0x3f, 0xde, 0x77, 0xc3, 0x28, 0x3e, 0xa7, 0xc7, 0xf5,
    0x28, 0xa1, 0x56, 0x6c, 0x71, 0x2d, 0xa4, 0x62, 0x7e, 0x09, 0xae, 0xab, 0x4b, 0x8f, 0x2d,
    0xda, 0x70, 0x00, 0xa4, 0xc6, 0x0e, 0x15, 0xe2, 0xd1, 0x45, 0x5a, 0x61, 0xd9, 0xa6, 0x15,
    0x68, 0xa1, 0x39, 0x1a, 0x46, 0x2f, 0x26, 0x36, 0xe9, 0x95, 0xbf, 0x2a, 0x83, 0xd7, 0xf3,
    0x2d, 0x7a, 0x4e, 0x80, 0xea, 0x75, 0xdd, 0xd8, 0xc9, 0x16, 0x73, 0x0b, 0xfc, 0x9d, 0x47,
    0x05, 0x03, 0x59, 0x1f, 0x82, 0x15, 0xd3, 0xf8, 0x5a, 0x3c, 0xdf, 0x46, 0x63, 0xa6, 0x40,
    0xdc, 0x7d, 0x5d, 0xaa, 0xd7, 0x3b, 0x21, 0x5a, 0x7d, 0x15, 0x92, 0x68, 0xcc, 0xba, 0x7f,
    0x94, 0x98, 0xed, 0xe6, 0x58, 0xdc, 0x2d, 0x59, 0x94, 0x12, 0x79, 0x6f, 0xe6, 0x35, 0x29,
    0xb5, 0xe0, 0x77, 0x73, 0x26, 0x7e, 0xa9, 0xd2, 0x3c, 0x1d, 0xb2, 0xb2, 0xa7, 0x69, 0x2c,
    0xe2, 0x69, 0x01, 0xa8, 0xc5, 0x14, 0xb0, 0xf1, 0x26, 0x69, 0x9b, 0x6f, 0x08, 0xe5, 0xbc,
    0xe2, 0xd1, 0x0a, 0xf8, 0x13, 0x9c, 0xd1, 0x79, 0xdc, 0xd1, 0xcc, 0x22, 0x68, 0x27, 0xa1,
    0xb1, 0x8e, 0xeb, 0x78, 0x21, 0xef, 0x75, 0xb6, 0xe1, 0x63, 0xe5, 0x66, 0x5e, 0x66, 0xf1,
    0x01, 0x87, 0xc2, 0x81, 0xd3, 0x31, 0xf5, 0x67, 0x5b, 0xc1, 0xa9, 0x45, 0x87, 0x16, 0xb3,
    0x27, 0x69, 0xc5, 0x57, 0xa2, 0x77, 0x7a, 0x82, 0xcb, 0xfc, 0x9c, 0xc2, 0x43, 0xb1, 0x40,
    0xa5, 0x98, 0x52, 0x99, 0xd3, 0x09, 0xe5, 0x8d, 0x8a, 0xf7, 0x48, 0x66, 0x88, 0xc7, 0x7c,
    0x21, 0x44, 0xa3, 0x52, 0x2b, 0x9c, 0x83, 0xd6, 0x53, 0xc2, 0xca, 0xf2, 0x69, 0x1b, 0xaa,
    0x39, 0xbd, 0x50, 0x1d, 0x64, 0x5d, 0x93, 0x1c, 0x09, 0x72, 0xf3, 0xd1, 0x3e, 0x02, 0xe6,
    0x5c, 0xa2, 0x65, 0xde, 0xd0, 0x2d, 0x6f, 0x76, 0x26, 0x31, 0xff, 0x6f, 0x39, 0x66, 0x98,
    0xf5, 0xcf, 0x24, 0xf4, 0x26, 0x7a, 0xfd, 0x34, 0x25, 0xf1, 0x05, 0x1c, 0xa2, 0x8a, 0x3e,
    0x21, 0xca, 0x32, 0xed, 0x3c, 0x9e, 0xd0, 0xb2, 0x4c, 0xeb, 0x94, 0x32, 0x58, 0x5f, 0x8b,
    0xa8, 0xce, 0x36, 0xb3, 0x13, 0x53, 0x7d, 0x58, 0x5b, 0x36, 0xc4, 0x6b, 0x2a, 0x26, 0x87,
    0xf9, 0x8c, 0x2a, 0xed, 0xf9, 0x85, 0xdc, 0xa5, 0xe5, 0xd3, 0xed, 0xab, 0xa1, 0x93, 0xa2,
    0x26, 0xd1, 0x29, 0xaf, 0x23, 0xe6, 0xa0, 0xd0, 0x9b, 0x66, 0x70, 0x65, 0x19, 0xb5, 0x94,
    0x2d, 0xf6, 0xb4, 0xfe, 0x17, 0x98, 0xd7, 0xe2, 0x32, 0x73, 0x8b, 0xd9, 0xd8, 0x04, 0x25,
    0xcc, 0xec, 0xa7, 0x57, 0xd3, 0xaa, 0xb5, 0xbc, 0x56, 0xfd, 0x3a, 0xd2, 0xae, 0xb3, 0x0b,
    0xbe, 0x62, 0x12, 0xa6, 0x66, 0xcc, 0x94, 0x4c, 0x51, 0x2a, 0x72, 0x09, 0xc2, 0xf9, 0xf6,
    0xdc, 0x84, 0x43, 0x67, 0x0b, 0x38, 0x4b, 0x43, 0x5c, 0xbb, 0x71, 0xff, 0xd4, 0xf7, 0xc6,
    0x94, 0x48, 0x9d, 0x45, 0xf8, 0x7a, 0xf2, 0x44, 0x96, 0xcc, 0x0f, 0xd1, 0xdb, 0x59, 0xf1,
    0x0b, 0x11, 0xe6, 0x68, 0x89, 0xd7, 0xb0, 0xa0, 0x3c, 0x4f, 0xc2, 0xc0, 0xab, 0xe6, 0x8b,
    0xab, 0x39, 0x98, 0x45, 0xcf, 0x99, 0xf0, 0x7d, 0x2d, 0x99, 0xa3, 0x0b, 0x99, 0xc5, 0x13,
    0x99, 0xb2, 0xe9, 0xf2, 0xba, 0xb6, 0x79, 0x73, 0x76, 0x28, 0x2d, 0x60, 0x36, 0x3e, 0x37,
    0xfe, 0x96, 0xc8, 0x48, 0x46, 0xe2, 0xd8, 0x9f, 0x9d, 0x03, 0x17, 0x68, 0x36, 0x97, 0x8a,
    0xb7, 0x4d, 0xe8, 0x7d, 0x25, 0xd8, 0x6f, 0xea, 0x73, 0x63, 0xbf, 0xb2, 0x54, 0xec, 0x77,
    0xc0, 0x23, 0x96, 0xff, 0xd9, 0x3e, 0x28, 0xb3, 0xb1, 0xaf, 0xe3, 0x7f, 0xca, 0x22, 0xd5,
    0xf3, 0x3f, 0x17, 0x2d, 0xa0, 0xbd, 0x98, 0xf5, 0xca, 0x38, 0xcb, 0x6f, 0xe6, 0x89, 0xd6,
    0x77, 0x44, 0xff, 0x3d, 0x9d, 0x4d, 0x63, 0x76, 0x18, 0x58, 0xec, 0x6c, 0xbe, 0xbd, 0xdf,
    0xe1, 0xa5, 0xaf, 0xc9, 0xaf, 0xf8, 0xba, 0x76, 0x3e, 0x8c, 0xd9, 0x2a, 0xb5, 0x20, 0xd4,
    0xbd, 0xa8, 0x5d, 0x1e, 0x2a, 0x2f, 0xb7, 0xda, 0x49, 0x8d, 0x9f, 0x17, 0xfa, 0xf4, 0x73,
    0xbf, 0x85, 0xf4, 0xd6, 0x04, 0x10, 0x97, 0xef, 0x74, 0x67, 0x0b, 0x72, 0x15, 0x9f, 0x47,
    0xe8, 0x7d, 0x17, 0x43, 0x97, 0x3a, 0x62, 0x9f, 0xbc, 0x52, 0xf1, 0x46, 0xa2, 0xf3, 0x5a,
    0x31, 0x15, 0x95, 0x2a, 0x3a, 0x67, 0x67, 0x2c, 0x79, 0xb9, 0xa9, 0x79, 0x04, 0xe4, 0x33,
    0xa5, 0xe6, 0x63, 0x42, 0x85, 0xca, 0x7b, 0x58, 0xc3, 0xea, 0x6d, 0x77, 0xae, 0x12, 0xb8,
    0x02, 0x46, 0x5f, 0x5a, 0x7e, 0xa7, 0xc4, 0xde, 0x4b, 0x2b, 0x30, 0xf5, 0x52, 0x25, 0x91,
    0xc3, 0x72, 0x9d, 0x9a, 0xb9, 0x14, 0x84, 0x99, 0x7f, 0xaf, 0x49, 0x6e, 0x5f, 0x14, 0x82,
    0x41, 0x43, 0xbc, 0x94, 0xf6, 0x6a, 0x5d, 0xac, 0x6f, 0x7c, 0x50, 0x80, 0x93, 0x49, 0x1e,
    0xb2, 0x96, 0x45, 0xb6, 0x3c, 0x73, 0x42, 0xbb, 0x64, 0x47, 0x7a, 0x2e, 0x9e, 0x9b, 0xb6,
    0x56, 0xb4, 0xf2, 0x62, 0x96, 0x9b, 0x20, 0x3a, 0xcb, 0xdf, 0x64, 0xfb, 0xea, 0xac, 0x50,
    0x76, 0xda, 0x57, 0x54, 0xa6, 0x5b, 0xee, 0x01, 0x95, 0xcf, 0x55, 0xf4, 0x9c, 0xb1, 0x5f,
    0xc4, 0x9e, 0x72, 0xd6, 0xf6, 0x04, 0x6f, 0x66, 0xf5, 0x3e, 0xe3, 0x40, 0x6c, 0x36, 0x4f,
    0x26, 0xf4, 0x01, 0xbf, 0x39, 0xd5, 0x62, 0x8a, 0x61, 0x99, 0xd2, 0xff, 0xc5, 0x0e, 0xf7,
    0x27, 0xa2, 0xf9, 0xd7, 0xaa, 0xd2, 0x22, 0x9a, 0x05, 0x6f, 0xe9, 0x32, 0xfa, 0x6f, 0xec,
    0x56, 0x66, 0x27, 0x6d, 0xe9, 0xbf, 0x6f, 0x2e, 0xbb, 0x39, 0xe7, 0xf1, 0x8d, 0x36, 0x4f,
    0x28, 0x55, 0x39, 0xf0, 0xdf, 0x48, 0x98, 0x6a, 0x13, 0x65, 0x69, 0x32, 0x84, 0xdf, 0x02,
    0xe9, 0x6f, 0xa2, 0xcc, 0x94, 0xa0, 0x7b, 0xb2, 0x64, 0xe3, 0xf7, 0x6f, 0x93, 0x56, 0x9f,
    0xc9, 0xb3, 0x0f, 0x24, 0xbf, 0x2c, 0x19, 0x64, 0xf9, 0xe3, 0xe5, 0x2b, 0xa9, 0xe0, 0x85,
    0x22, 0x5f, 0x4b, 0x0b, 0x05, 0xcb, 0x3e, 0xbd, 0xf8, 0x55, 0xb8, 0xf2, 0xc6, 0x0b, 0xce,
    0xbc, 0xd9, 0x2b, 0x2d, 0x73, 0x33, 0xbe, 0x31, 0xdb, 0xc1, 0xa6, 0x65, 0xc8, 0xd3, 0x9c,
    0xf1, 0x90, 0x66, 0xf6, 0x98, 0xa6, 0x32, 0x4c, 0x58, 0x90, 0x84, 0x93, 0x8d, 0x3e, 0x37,
    0x93, 0x4a, 0xf1, 0x65, 0x06, 0xf9, 0xb4, 0x32, 0xe9, 0xdb, 0x6f, 0xa9, 0x45, 0x2d, 0x9c,
    0x9f, 0x9a, 0xd5, 0x9a, 0x23, 0xaf, 0x35, 0x43, 0x59, 0x70, 0x78, 0xb3, 0xb8, 0x52, 0x98,
    0x00, 0x74, 0x99, 0x7b, 0xb1, 0xf3, 0xec, 0x1e, 0x14, 0x08, 0xf0, 0xd4, 0x24, 0xc8, 0x0a,
    0x4f, 0x54, 0xda, 0xc0, 0x36, 0x4a, 0xc9, 0x9e, 0x2e, 0x98, 0x18, 0x12, 0xc2, 0x1a, 0x7d,
    0x19, 0x25, 0x72, 0xd6, 0xd7, 0x6f, 0xf6, 0x6a, 0xf1, 0xa0, 0x5b, 0xed, 0x99, 0xe1, 0x93,
    0xef, 0xdd, 0x87, 0xad, 0xbb, 0xa3, 0x66, 0xa5, 0x7d, 0x50, 0xab, 0x6d, 0x04, 0xc7, 0xef,
    0xb3, 0x7d, 0x32, 0x1c, 0x58, 0x67, 0xe3, 0x83, 0xe8, 0xa7, 0xd2, 0xca, 0xa7, 0x57, 0xbc,
    0x5b, 0xd4, 0x7f, 0xe4, 0x85, 0x3e, 0x80, 0x8b, 0xca, 0x58, 0x3b, 0x7c, 0xa9, 0x73, 0xcc,
    0xff, 0x5d, 0x37, 0x72, 0xf5, 0x1f, 0x0d, 0x5a, 0x4a, 0x71, 0xa9, 0x50, 0x4c, 0xf8, 0x7c,
    0xff, 0x98, 0xe2, 0x61, 0x76, 0x80, 0xa4, 0x14, 0x07, 0x81, 0x57, 0x5c, 0x8c, 0x2a, 0xf2,
    0xe1, 0x90, 0xd7, 0xf0, 0xf9, 0xf4, 0xaa, 0xac, 0xfa, 0xed, 0xf3, 0x05, 0x3e, 0x42, 0xfe,
    0xa6, 0x93, 0x6a, 0x83, 0xd0, 0x5e, 0x92, 0x2a, 0x98, 0x21, 0xff, 0xd5, 0x4a, 0x23, 0x77,
    0x8b, 0x59, 0xff, 0x56, 0xff, 0xf5, 0x55, 0x3e, 0x54, 0xfe, 0x97, 0x50, 0x96, 0x6b, 0x52,
    0xb3, 0x49, 0xc5, 0xb0, 0x96, 0x59, 0xd0, 0x6c, 0x72, 0x35, 0xa9, 0x17, 0x17, 0x31, 0xa3,
    0xfd, 0xff, 0x82, 0x76, 0x13, 0xf2, 0xcf, 0xff, 0x5d, 0xbe, 0xf1, 0xff, 0xcb, 0x2c, 0xf9,
    0x34, 0xaa, 0x7a, 0x56, 0xfe, 0x8d, 0x5a, 0xcd, 0xfc, 0x26, 0xff, 0xaf, 0xf1, 0xa1, 0xf2,
    0xbb, 0x8a, 0x64, 0xb1, 0x97, 0x0b, 0xfe, 0xed, 0x03, 0xc4, 0x6f, 0x4a, 0xc6, 0xe2, 0x73,
    0x73, 0xbe, 0xa8, 0x14, 0xe7, 0xd4, 0x3c, 0xff, 0xb4, 0xea, 0x99, 0x2f, 0xa8, 0x7b, 0x3d,
    0x70, 0x35, 0x6f, 0x54, 0x50, 0x1c, 0x5b, 0xc6, 0x0b, 0x0b, 0xd5, 0x04, 0xed, 0x8c, 0x7a,
    0x56, 0x9e, 0x5d, 0x71, 0x73, 0xc3, 0x8d, 0xa2, 0x11, 0x89, 0x92, 0xa2, 0x9b, 0x45, 0xd5,
    0x5f, 0x5e, 0xcb, 0x93, 0xb7, 0x5e, 0xa0, 0x7c, 0xa8, 0x04, 0x84, 0xf8, 0x3d, 0x08, 0xbb,
    0xc5, 0xf8, 0x81, 0x43, 0xa1, 0xf8, 0xfb, 0x4f, 0x9a, 0xa1, 0x97, 0x2b, 0x6a, 0x1d, 0xee,
    0xe5, 0x52, 0xe6, 0x61, 0x77, 0xd2, 0x89, 0x9b, 0xe8, 0xb8, 0x63, 0xca, 0x2b, 0xf9, 0xa5,
    0x74, 0x44, 0x94, 0x5f, 0x62, 0xcc, 0xa7, 0x4c, 0x43, 0x9b, 0x61, 0x7b, 0x84, 0x4b, 0x5b,
    0x1f, 0x86, 0x01, 0xbe, 0xe6, 0xb9, 0x9e, 0x14, 0xc2, 0xd3, 0xfe, 0xe3, 0x3f, 0x34, 0x56,
    0x25, 0x88, 0x48, 0x1c, 0x5b, 0x62, 0x95, 0xb0, 0xb0, 0x81, 0x75, 0x2f, 0xba, 0xae, 0xf3,
    0xfc, 0x47, 0x34, 0x4f, 0x94, 0xd9, 0xdc, 0x6e, 0x77, 0x1d, 0xbf, 0x68, 0xf9, 0x02, 0xfa,
    0x59, 0x12, 0x92, 0xf7, 0xf8, 0x61, 0x34, 0x74, 0x98, 0xbc, 0x60, 0x89, 0x44, 0x2d, 0x1c,
    0x54, 0x0a, 0x1c, 0x04, 0xe1, 0xf2, 0xc3, 0xee, 0xd6, 0xc5, 0xde, 0xef, 0xbb, 0xad, 0xfd,
    0x9f, 0x0c, 0x4d, 0xfc, 0x4c, 0xe7, 0x91, 0x88, 0x79, 0x59, 0x39, 0x74, 0xd9, 0x7d, 0x48,
    0xb8, 0xfb, 0xca, 0x15, 0xd5, 0x1f, 0x26, 0x4c, 0x48, 0xe9, 0xb8, 0x21, 0x98, 0xe0, 0x9f,
    0x02, 0x46, 0xa3, 0x6c, 0x8a, 0x4a, 0x88, 0x14, 0xe5, 0xf9, 0xf9, 0xe9, 0xc4, 0x14, 0x63,
    0x18, 0xa0, 0x44, 0x13, 0x5a, 0x08, 0x42, 0xe6, 0x7e, 0x05, 0xc5, 0x10, 0xc7, 0x2e, 0xcd,
    0x95, 0xfe, 0x09, 0x5a, 0xa0, 0x5c, 0x4b, 0x40, 0xe5, 0x33, 0x72, 0xf8, 0x82, 0x51, 0x0c,
    0xce, 0x28, 0x1c, 0x49, 0xc6, 0xcf, 0x17, 0x83, 0xcd, 0x96, 0x9a, 0xce, 0x17, 0x6f, 0x7d,
    0x71, 0x4d, 0x25, 0x09, 0x57, 0x54, 0xa6, 0x7a, 0xe1, 0x82, 0xa0, 0xda, 0xdc, 0xb5, 0x46,
    0xf9, 0x8a, 0x87, 0x16, 0x65, 0x24, 0x0b, 0xca, 0xe2, 0x2e, 0xad, 0x9c, 0x6b, 0x82, 0xc8,
    0x2e, 0xe8, 0x5a, 0xb4, 0xc2, 0x5c, 0x49, 0x57, 0x75, 0x5d, 0x05, 0x05, 0x72, 0xe7, 0xae,
    0x3a, 0xcb, 0x09, 0x95, 0xb3, 0xa5, 0x3c, 0xd9, 0x38, 0xb2, 0x55, 0x26, 0x03, 0x6e, 0xdc,
    0xdc, 0xc8, 0xd4, 0x59, 0xaa, 0x2d, 0x5f, 0xcb, 0x3e, 0x6e, 0x7f, 0x53, 0x9d, 0x04, 0xb6,
    0x64, 0x4a, 0x63, 0x0e, 0x07, 0x56, 0xf8, 0x7f, 0x3b, 0x87, 0x5b, 0x27, 0x07, 0x7b, 0xc7,
    0x07, 0xe5, 0x81, 0xb3, 0x6c, 0x1f, 0x63, 0xaa, 0xff, 0x57, 0xa9, 0xd5, 0x1a, 0xb5, 0x9c,
    0x67, 0x18, 0xdf, 0xf2, 0x3f, 0xaf, 0xf2, 0xf9, 0x4e, 0xdb, 0xe9, 0x5b, 0x7e, 0x8f, 0x68,
    0x41, 0x6f, 0x65, 0x65, 0xcb, 0xf3, 0x34, 0x3f, 0xa0, 0xb9, 0x64, 0xcd, 0xa6, 0xcf, 0x69,
    0x3f, 0xbc, 0x13, 0x51, 0xe3, 0x96, 0x93, 0x95, 0x1a, 0xec, 0x10, 0xcd, 0x09, 0xec, 0x11,
    0x79, 0x59, 0x81, 0x23, 0xda, 0x04, 0x73, 0xf1, 0xe5, 0x15, 0xac, 0x70, 0xfb, 0xcb, 0x4e,
    0x83, 0xda, 0xe2, 0x6f, 0xb7, 0xed, 0x04, 0x83, 0x81, 0x1b, 0x47, 0xbf, 0xbd, 0x13, 0x0e,
    0xad, 0xfc, 0x6a, 0xb3, 0x1f, 0xcb, 0xe0, 0x34, 0xad, 0x52, 0xdf, 0x8e, 0x3d, 0xd0, 0x7a,
    0xd7, 0x21, 0x98, 0xab, 0x8f, 0xca, 0x2b, 0x2b, 0xdf, 0x69, 0xbf, 0x18, 0x65, 0xa3, 0xac,
    0x43, 0x14, 0x79, 0x3f, 0xf0, 0x65, 0x08, 0x9a, 0x70, 0xe3, 0xc1, 0x40, 0xad, 0x0f, 0xee,
    0x03, 0xed, 0xb4, 0xaa, 0xbd, 0x33, 0x75, 0x53, 0x5f, 0xd7, 0x2b, 0xeb, 0x86, 0xbe, 0xba,
    0xf2, 0xfd, 0xf7, 0x27, 0x41, 0x4c, 0x7e, 0xf8, 0xfe, 0x7b, 0x8d, 0xa7, 0xb8, 0xc0, 0x0a,
    0x86, 0xec, 0x8d, 0x3c, 0x04, 0x80, 0xcb, 0x84, 0x56, 0xe4, 0xd1, 0xac, 0xd0, 0x0f, 0x05,
    0x9f, 0x1b, 0x1c, 0xbd, 0x6c, 0x9a, 0x02, 0x1e, 0x5d, 0x81, 0xc7, 0x5c, 0x37, 0x1a, 0xcb,
    0x87, 0xcd, 0x31, 0x3f, 0x40, 0x46, 0xd9, 0x44, 0x80, 0x58, 0x37, 0x05, 0x22, 0xbd, 0xbe,
    0x88, 0x18, 0x48, 0x30, 0xcb, 0x22, 0x20, 0x19, 0x1c, 0x24, 0xe8, 0x26, 0x41, 0x32, 0xd6,
    0x73, 0xb9, 0x20, 0x19, 0x8b, 0x80, 0xa4, 0x4b, 0x90, 0x0c, 0x05, 0x24, 0xbd, 0xb2, 0x44,
    0xcd, 0xcf, 0xd7, 0xd0, 0x18, 0x1c, 0xa5, 0x04, 0x4b, 0xba, 0x0a, 0x12, 0x62, 0x09, 0x16,
    0x9d, 0xb6, 0x3d, 0xea, 0x69, 0xfb, 0xee, 0x13, 0x89, 0x00, 0x44, 0xed, 0xfb, 0xef, 0x99,
    0x8a, 0x60, 0xb2, 0x42, 0xbb, 0x28, 0xb1, 0xaa, 0x27, 0x49, 0x6b, 0x77, 0x82, 0xd4, 0xb3,
    0x9d, 0x51, 0x0c, 0x82, 0xc9, 0x5e, 0x51, 0x65, 0xd7, 0x8c, 0x52, 0x5f, 0x94, 0x9f, 0x81,
    0xf7, 0xcb, 0x77, 0x86, 0x51, 0x9d, 0x81, 0x3f, 0x16, 0x83, 0x6c, 0x60, 0xc3, 0x55, 0x80,
    0x17, 0xbd, 0x62, 0x9a, 0x46, 0x97, 0xcc, 0x5c, 0x22, 0x08, 0xfd, 0x06, 0x6f, 0x5b, 0xb7,
    0x8e, 0x59, 0xaf, 0x1a, 0x55, 0xcb, 0xae, 0xd6, 0xba, 0x9d, 0x7a, 0xb3, 0x52, 0x33, 0xab,
    0xdd, 0x20, 0xb6, 0x5e, 0xab, 0xe9, 0x4d, 0xc7, 0x5e, 0x5d, 0x5d, 0xd3, 0x6c, 0x2f, 0xc0,
    0x9a, 0xbf, 0x7c, 0x57, 0x6f, 0xd4, 0xe7, 0x82, 0x08, 0xda, 0xad, 0x6a, 0xb8, 0x82, 0x4a,
    0xce, 0x15, 0x54, 0x1a, 0x02, 0xa7, 0xfb, 0xc4, 0x8a, 0x47, 0xa1, 0x40, 0x29, 0xf7, 0x30,
    0xa7, 0x71, 0x68, 0xf9, 0x11, 0xb8, 0x1d, 0x44, 0x23, 0x4f, 0x16, 0x86, 0xba, 0x54, 0x63,
    0x55, 0x47, 0x5a, 0x79, 0x75, 0xe7, 0x3b, 0x44, 0x5a, 0x73, 0xb3, 0x36, 0xd7, 0x8c, 0xd0,
    0xa2, 0xcc, 0xa9, 0x35, 0x8d, 0xce, 0xac, 0x3e, 0x1c, 0x65, 0xbc, 0x6d, 0x93, 0x18, 0xdd,
    0x55, 0xe9, 0x56, 0x9b, 0x8d, 0x5a, 0xa5, 0xd3, 0x34, 0x9c, 0x46, 0xcd, 0x24, 0x3a, 0xa9,
    0xaa, 0x55, 0x5d, 0x6f, 0x34, 0x6b, 0x64, 0x75, 0x35, 0x25, 0x06, 0xc8, 0x47, 0x0b, 0x71,
    0x10, 0x04, 0xec, 0x48, 0xd9, 0xce, 0x68, 0xae, 0x1b, 0xa0, 0xc1, 0x96, 0x24, 0x09, 0x12,
    0x85, 0x64, 0xa1, 0x99, 0x00, 0xa5, 0x7f, 0x41, 0xa0, 0x9a, 0x8b, 0xc0, 0xb4, 0x29, 0x61,
    0xaa, 0x20, 0x19, 0xcb, 0x05, 0x69, 0x73, 0x11, 0x90, 0x1a, 0x12, 0xa4, 0x4d, 0x09, 0x12,
    0xd5, 0xea, 0x72, 0x41, 0x9a, 0x21, 0x55, 0x69, 0x90, 0x6a, 0x12, 0xa4, 0x86, 0x02, 0x92,
    0x39, 0x53, 0xe0, 0xc8, 0x13, 0x7b, 0x21, 0x11, 0xa5, 0x0b, 0x87, 0x04, 0x9f, 0x43, 0x8b,
    0xe4, 0xb9, 0x3e, 0xc8, 0x5e, 0x89, 0xfa, 0x2f, 0x10, 0xfe, 0x50, 0xc9, 0x33, 0xe7, 0x94,
    0x93, 0x49, 0x1e, 0x21, 0x76, 0xb5, 0x4a, 0x66, 0x4b, 0x06, 0x4a, 0x1e, 0x6f, 0xab, 0xd7,
    0x31, 0x48, 0xc5, 0x31, 0xe1, 0x3f, 0xbd, 0xd2, 0x6d, 0xe8, 0xa4, 0xea, 0x6c, 0x36, 0xac,
    0xd3, 0x20, 0x44, 0xef, 0x74, 0x3a, 0x56, 0x4e, 0xf2, 0x66, 0xa8, 0xab, 0x49, 0x88, 0xaa,
    0x88, 0x5a, 0x32, 0xed, 0x66, 0xeb, 0x1a, 0x05, 0xa4, 0xaa, 0x04, 0xa9, 0xa6, 0x82, 0xb4,
    0xa1, 0xab, 0x2e, 0x02, 0x52, 0x45, 0x82, 0x54, 0x55, 0x41, 0x5a, 0xaa, 0xe7, 0x00, 0xb3,
    0x02, 0x92, 0x29, 0x41, 0xaa, 0xa8, 0x20, 0x2d, 0x59, 0x0f, 0x2c, 0xe0, 0x5f, 0xe9, 0xd2,
    0xd2, 0xb9, 0x7f, 0xc5, 0x40, 0xd2, 0x37, 0x97, 0xac, 0xc2, 0x17, 0x01, 0x49, 0x31, 0x2b,
    0x48, 0x4b, 0xf5, 0x42, 0x17, 0xf1, 0xd4, 0x8d, 0xa6, 0x02, 0x52, 0x62, 0x53, 0xf4, 0xf5,
    0x5e, 0xac, 0x9a, 0xee, 0x49, 0xe8, 0x13, 0x0f, 0xa1, 0xb4, 0x7c, 0x8c, 0x9d, 0xc0, 0x13,
    0x29, 0x6f, 0x19, 0x1b, 0x89, 0x1a, 0x67, 0x98, 0xeb, 0x2e, 0x9d, 0x76, 0x3e, 0xb6, 0x49,
    0x14, 0xa1, 0x6e, 0xda, 0x9c, 0x53, 0x37, 0x6d, 0x72, 0xdd, 0x64, 0x55, 0x89, 0xa9, 0x37,
    0xf3, 0x0a, 0x78, 0xdb, 0x4a, 0xd3, 0x68, 0xea, 0x76, 0x87, 0x18, 0xb5, 0x7a, 0xb5, 0x6e,
    0xea, 0xd5, 0xae, 0x59, 0x37, 0x1a, 0xa4, 0x69, 0xe9, 0x35, 0xbb, 0x56, 0xdb, 0x6c, 0x82,
    0x95, 0xf1, 0x11, 0x59, 0x42, 0x12, 0x2b, 0x4f, 0x63, 0x2a, 0x4b, 0xe3, 0x29, 0x2f, 0xcd,
    0x54, 0xbd, 0x4d, 0x3d, 0xc0, 0xcd, 0xea, 0x0c, 0x73, 0x28, 0xc0, 0xae, 0x36, 0x29, 0xd8,
    0xa7, 0xb1, 0x69, 0x56, 0x9d, 0xb9, 0xc0, 0xe6, 0x6d, 0x6b, 0x5d, 0xdd, 0xb2, 0x2a, 0xb5,
    0x59, 0xeb, 0xda, 0xb5, 0x7a, 0x67, 0xb3, 0xa2, 0x1b, 0x1d, 0xdb, 0x6c, 0x58, 0x06, 0xa9,
    0xc1, 0xb5, 0xa9, 0xd6, 0xa5, 0x4a, 0x45, 0xfa, 0x22, 0xc9, 0xe6, 0xa7, 0xef, 0xa6, 0xa0,
    0x76, 0x53, 0xe8, 0xbb, 0x2c, 0x8d, 0x4a, 0x21, 0xda, 0x5c, 0x04, 0xa2, 0x86, 0x90, 0x4b,
    0xa6, 0x40, 0xa4, 0x1b, 0x45, 0x1c, 0x07, 0x5e, 0x7a, 0xd7, 0xed, 0xc1, 0x37, 0xed, 0x0f,
    0x54, 0xff, 0x83, 0xb9, 0xeb, 0x7f, 0x60, 0x36, 0x55, 0x93, 0xf9, 0xf4, 0x3f, 0x90, 0x56,
    0x59, 0xec, 0xc2, 0x69, 0x05, 0xed, 0x28, 0xad, 0xea, 0x46, 0xbd, 0xda, 0xa9, 0x77, 0xe6,
    0x15, 0x6f, 0x9b, 0x72, 0xc5, 0x1b, 0xcd, 0x19, 0x5a, 0x5b, 0xce, 0x57, 0x4d, 0x19, 0x45,
    0xc1, 0x22, 0x08, 0x13, 0x24, 0x6c, 0x24, 0x5a, 0x43, 0x6f, 0x32, 0x11, 0x5d, 0x16, 0x09,
    0x8b, 0x90, 0xb0, 0xae, 0x40, 0xa4, 0x2b, 0x10, 0x19, 0x4b, 0x52, 0xad, 0x14, 0xa2, 0xfa,
    0x10, 0xd5, 0x24, 0x53, 0xd5, 0x15, 0x88, 0x36, 0xd7, 0xcd, 0xe6, 0x12, 0x35, 0x2b, 0xce,
    0x08, 0x48, 0x02, 0x49, 0x35, 0x85, 0x6c, 0x9b, 0x4b, 0x43, 0x92, 0x00, 0x69, 0x01, 0x2c,
    0x85, 0xe3, 0x80, 0xdd, 0x54, 0x90, 0x96, 0xe9, 0x38, 0xe0, 0x2c, 0x8b, 0x80, 0xc4, 0x1d,
    0xec, 0xa6, 0x80, 0xa4, 0x2f, 0xd3, 0x71, 0xc0, 0x59, 0x16, 0x01, 0xc9, 0x90, 0x20, 0x49,
    0x41, 0x6f, 0xac, 0x1b, 0x4b, 0xe5, 0xa5, 0xea, 0x22, 0xbc, 0x54, 0x95, 0xbc, 0x54, 0x55,
    0xa9, 0xb1, 0xd4, 0x84, 0x1a, 0x4e, 0x32, 0x3f, 0x44, 0x15, 0xe1, 0x16, 0x63, 0x37, 0x05,
    0xa5, 0x7a, 0x57, 0x38, 0xcb, 0x22, 0x20, 0x09, 0xee, 0xae, 0x24, 0x6e, 0x31, 0x82, 0xb4,
    0x4f, 0x1d, 0x67, 0x59, 0x04, 0x24, 0x53, 0x82, 0x54, 0x51, 0x41, 0x5a, 0x2a, 0x77, 0x57,
    0xe1, 0x6e, 0x53, 0x72, 0x77, 0x25, 0xc5, 0xdd, 0xc5, 0xe6, 0x57, 0xf5, 0x95, 0xa2, 0xd1,
    0x18, 0x84, 0x10, 0x8a, 0x3a, 0x0e, 0xbd, 0x8d, 0x07, 0x1e, 0xe0, 0x86, 0x92, 0x4c, 0x00,
    0x78, 0xf9, 0x16, 0x0d, 0x1a, 0xe4, 0x5a, 0x6d, 0x06, 0x64, 0xdc, 0x40, 0x42, 0x3b, 0x96,
    0xea, 0x3a, 0xa4, 0xd2, 0xb0, 0xe6, 0xcb, 0x04, 0xb1, 0xb6, 0x39, 0x97, 0x2e, 0x03, 0x66,
    0x24, 0x5e, 0x40, 0x92, 0x05, 0x32, 0x62, 0x50, 0xce, 0x97, 0x21, 0x83, 0x76, 0x14, 0xca,
    0xd3, 0x72, 0xba, 0xc6, 0xec, 0x2c, 0x09, 0x42, 0xc9, 0xdb, 0xa6, 0x83, 0x62, 0x24, 0xc2,
    0x14, 0x13, 0xc2, 0x6f, 0x2a, 0xc2, 0x5f, 0x5f, 0x07, 0x3f, 0x79, 0x79, 0xc2, 0xbf, 0x48,
    0xdd, 0x30, 0xa4, 0xa4, 0x99, 0x8a, 0xf0, 0xd7, 0x59, 0x8a, 0xa5, 0x80, 0x87, 0x70, 0x00,
    0xcc, 0xf0, 0x01, 0x24, 0x70, 0xab, 0xf1, 0xe2, 0x3c, 0x8d, 0xdd, 0x69, 0xa7, 0xd1, 0x2d,
    0x24, 0x4f, 0x87, 0x68, 0x5b, 0xc7, 0xc7, 0xbf, 0xef, 0x6c, 0x7d, 0x38, 0xa7, 0x44, 0x99,
    0xf1, 0x5a, 0xe3, 0x79, 0x57, 0x7b, 0x73, 0x53, 0xdf, 0xd4, 0xe7, 0xf3, 0xbb, 0x79, 0x5b,
    0x97, 0x13, 0x97, 0x14, 0xc2, 0xbf, 0xeb, 0xb6, 0x73, 0xff, 0x9d, 0x69, 0x6e, 0x4e, 0x64,
    0xb5, 0xa1, 0x00, 0x03, 0xdb, 0xcb, 0x8c, 0x74, 0x7b, 0x6f, 0xeb, 0xe7, 0xd6, 0xc9, 0x81,
    0xb6, 0x19, 0xcf, 0xd3, 0x48, 0xd8, 0x4b, 0x16, 0x2f, 0x92, 0xd1, 0x8f, 0x1a, 0x79, 0x1a,
    0x1b, 0x03, 0x28, 0x86, 0x88, 0x3f, 0x04, 0x26, 0xfe, 0x48, 0xb1, 0x8d, 0xb1, 0x88, 0xee,
    0x5b, 0x1e, 0xd8, 0x4d, 0x21, 0xd2, 0x72, 0xfd, 0x8f, 0x45, 0xb6, 0x3c, 0x0c, 0xb9, 0xe5,
    0x18, 0x8a, 0xee, 0xa9, 0x83, 0xfa, 0x59, 0x2e, 0x48, 0x0b, 0x08, 0x97, 0xdc, 0xf2, 0x30,
    0x94, 0x70, 0xe9, 0x85, 0xb9, 0xf0, 0x36, 0xe9, 0xe1, 0x96, 0x41, 0xc8, 0x77, 0x08, 0xd6,
    0x6d, 0x41, 0x9a, 0x3c, 0x90, 0x45, 0xf9, 0xd6, 0x98, 0x2f, 0x06, 0x81, 0x76, 0x2c, 0x05,
    0xb5, 0x48, 0xb5, 0x3a, 0x3b, 0x99, 0x48, 0x53, 0x70, 0xac, 0x6d, 0x11, 0xdf, 0x02, 0x2b,
    0x07, 0xc3, 0xe8, 0xbb, 0x4a, 0x7d, 0x3a, 0xdb, 0xf2, 0x76, 0x02, 0x0a, 0x68, 0xbe, 0x9a,
    0xce, 0x0f, 0x61, 0x30, 0xb4, 0x7a, 0x18, 0xd6, 0x27, 0xab, 0x02, 0x9e, 0x14, 0xfc, 0x8a,
    0x34, 0xe7, 0xd4, 0xe9, 0x26, 0xd3, 0xe9, 0xa6, 0x5e, 0xd3, 0x1b, 0x64, 0x76, 0x12, 0x10,
    0xc8, 0xdb, 0xa6, 0xe3, 0xdd, 0x45, 0x36, 0x8c, 0x0c, 0x99, 0x41, 0x34, 0x0c, 0x45, 0x35,
    0xd6, 0xcd, 0xa5, 0x5a, 0xdc, 0x45, 0x32, 0x88, 0x86, 0xcc, 0x20, 0x1a, 0x4a, 0x06, 0x11,
    0x5a, 0x6a, 0xd6, 0xc7, 0x58, 0x24, 0x83, 0x68, 0xc8, 0x0c, 0xa2, 0xa1, 0x64, 0x10, 0x11,
    0x25, 0x99, 0x14, 0x01, 0xd2, 0x02, 0xea, 0x4a, 0x66, 0x10, 0x0d, 0x25, 0x83, 0xa8, 0x57,
    0x9b, 0xb6, 0x37, 0x16, 0xc9, 0x20, 0x1a, 0x32, 0x83, 0x68, 0x28, 0x19, 0x44, 0x00, 0x69,
    0x1a, 0x74, 0x91, 0x0c, 0xa2, 0x21, 0x33, 0x88, 0x86, 0x92, 0x41, 0x44, 0x90, 0x96, 0x19,
    0x2c, 0x92, 0x40, 0x6c, 0x2a, 0x00, 0xe9, 0x2a, 0x40, 0xf5, 0x09, 0xfb, 0xb3, 0x42, 0xd1,
    0x3d, 0x2b, 0x8e, 0x89, 0xaf, 0x05, 0xa3, 0x38, 0xd9, 0x9f, 0x1d, 0x6b, 0x1e, 0xe8, 0x57,
    0x32, 0xd5, 0xda, 0x7c, 0xa9, 0x15, 0x68, 0xc7, 0xd4, 0x68, 0xc7, 0x71, 0x8c, 0x39, 0xcd,
    0x6f, 0x9b, 0x4a, 0xe5, 0x54, 0x6b, 0x33, 0x78, 0x55, 0xce, 0x57, 0x99, 0xec, 0xe3, 0xac,
    0x60, 0xc5, 0x71, 0x71, 0xef, 0x03, 0x07, 0xec, 0x82, 0x7c, 0x7b, 0x52, 0x16, 0xd9, 0xe5,
    0xa2, 0x5a, 0x99, 0x4f, 0x85, 0x42, 0x3b, 0xa6, 0x42, 0x0d, 0x52, 0xdd, 0xac, 0xcd, 0xe7,
    0xf3, 0xb6, 0xa9, 0xc5, 0x99, 0xcd, 0xf9, 0xb6, 0x8c, 0xa1, 0x1d, 0x6e, 0x19, 0x57, 0x8d,
    0x71, 0x6f, 0x54, 0x67, 0xbb, 0x3c, 0x12, 0x27, 0x78, 0x78, 0x4d, 0xe3, 0x47, 0x46, 0x71,
    0x3e, 0xd9, 0x9e, 0xef, 0x8c, 0xb5, 0xc0, 0x73, 0xf0, 0xf6, 0x2a, 0xe1, 0x94, 0xf3, 0x82,
    0x78, 0xec, 0x71, 0x85, 0x9e, 0xc0, 0xe9, 0x5a, 0xae, 0xa7, 0x79, 0x81, 0x45, 0x5d, 0x7a,
    0xff, 0xa3, 0x47, 0x70, 0x7c, 0xf2, 0x28, 0x3a, 0xad, 0xd1, 0x2d, 0x32, 0x3c, 0xbd, 0xbc,
    0x4f, 0xac, 0x32, 0x18, 0xeb, 0x75, 0xb1, 0x63, 0x36, 0x0e, 0x46, 0xe1, 0x0a, 0x3f, 0xd2,
    0xfb, 0x66, 0x5a, 0x10, 0xe2, 0x7c, 0x60, 0xd8, 0x68, 0x6c, 0x00, 0x43, 0x95, 0x15, 0x01,
    0x24, 0xc1, 0xba, 0x29, 0xd4, 0x56, 0x33, 0xc5, 0xfe, 0xfa, 0x0c, 0x4f, 0x38, 0x24, 0x36,
    0x20, 0xce, 0x1c, 0x88, 0xf7, 0x7e, 0x29, 0x68, 0xe2, 0x54, 0x2d, 0x65, 0x14, 0x73, 0xbe,
    0x33, 0xb4, 0x63, 0x52, 0x50, 0xd7, 0x0d, 0x5b, 0xb7, 0xe7, 0x93, 0x02, 0xd6, 0x76, 0x35,
    0xff, 0x2f, 0xac, 0x1e, 0x45, 0x3d, 0x7e, 0x17, 0x1b, 0x8e, 0x92, 0x30, 0xec, 0xe8, 0x13,
    0x47, 0x7d, 0x55, 0x5a, 0x52, 0x50, 0x67, 0x20, 0x4d, 0x82, 0xaa, 0x53, 0x50, 0xab, 0xa6,
    0xec, 0x39, 0xb7, 0x1e, 0x79, 0xdb, 0xb4, 0xc0, 0x1a, 0x73, 0xca, 0x10, 0x26, 0xb7, 0x24,
    0xe2, 0x09, 0x66, 0x1a, 0x24, 0xc6, 0x16, 0x96, 0xb7, 0x72, 0xdc, 0x67, 0x7a, 0xb4, 0x8b,
    0xc2, 0xc2, 0x0a, 0xaf, 0x6b, 0x18, 0x36, 0x6a, 0x5b, 0x1f, 0x5a, 0x74, 0xed, 0x40, 0x14,
    0x02, 0x05, 0x1e, 0x5d, 0xe5, 0x9c, 0xde, 0x5d, 0x95, 0x7b, 0x77, 0x4d, 0xbb, 0xeb, 0x6c,
    0x76, 0xc9, 0xd2, 0xa1, 0x22, 0x6b, 0x9b, 0x0e, 0x15, 0x37, 0x17, 0x30, 0x58, 0x9b, 0xc2,
    0x6d, 0x2a, 0xe6, 0xaa, 0xb2, 0x6e, 0x2e, 0xd3, 0x5c, 0x6d, 0x2e, 0x60, 0xad, 0xe4, 0xde,
    0xa6, 0x62, 0xab, 0x96, 0x07, 0x0f, 0x03, 0x67, 0x7e, 0x51, 0x6d, 0x60, 0xda, 0x93, 0xc3,
    0xab, 0xf0, 0x14, 0x6e, 0x75, 0x0d, 0xb1, 0x7a, 0x1a, 0xd6, 0x79, 0xd1, 0xe8, 0xe1, 0x6d,
    0x1d, 0x2b, 0x93, 0x14, 0xad, 0x82, 0xba, 0x5a, 0xa7, 0x45, 0x22, 0x40, 0x1a, 0x20, 0x16,
    0x1c, 0xd4, 0x56, 0xf0, 0x2c, 0x24, 0x5d, 0xe4, 0x90, 0xca, 0x9c, 0xc7, 0x73, 0xa0, 0x1d,
    0x79, 0x74, 0x2a, 0xb6, 0xed, 0x74, 0xe7, 0x4b, 0x79, 0xb0, 0xb6, 0xd3, 0xe2, 0xd6, 0x66,
    0x22, 0x83, 0x16, 0x85, 0xad, 0xd0, 0x1c, 0x35, 0x7e, 0xa5, 0x31, 0x1f, 0x5b, 0x43, 0xbb,
    0x1a, 0x1f, 0xf7, 0xd1, 0x92, 0x2a, 0x2e, 0xa8, 0x2d, 0x94, 0xfd, 0xc0, 0x4c, 0x31, 0x65,
    0xb7, 0x03, 0x7c, 0xe7, 0x05, 0xc2, 0x5e, 0xac, 0x6e, 0x05, 0xf6, 0xc0, 0x8a, 0xb4, 0x3f,
    0x40, 0x2c, 0x32, 0xc3, 0x1f, 0x65, 0xed, 0x14, 0x54, 0x4e, 0xf8, 0xe8, 0x46, 0x64, 0x4d,
    0x4a, 0xac, 0x72, 0xb0, 0x34, 0x0e, 0x5c, 0x7f, 0xff, 0x97, 0x45, 0x13, 0x0a, 0x3f, 0x95,
    0xb9, 0x4b, 0x7f, 0xff, 0xaf, 0x0d, 0xeb, 0xef, 0x9c, 0x75, 0xf1, 0xc1, 0x22, 0xcc, 0xc2,
    0x76, 0xec, 0x26, 0xb9, 0xc5, 0x5c, 0x37, 0x1b, 0x4c, 0x3e, 0x3f, 0x8f, 0x81, 0xd3, 0x70,
    0xb3, 0x70, 0xce, 0xef, 0xca, 0x37, 0x30, 0x8f, 0x27, 0xe0, 0xac, 0x2a, 0x70, 0xea, 0xd5,
    0xc3, 0x59, 0xc9, 0xc2, 0x39, 0xbf, 0x7f, 0xdf, 0xc0, 0x5c, 0x91, 0x80, 0x33, 0xf1, 0xef,
    0xd9, 0xc2, 0x25, 0xc3, 0x69, 0x66, 0xe1, 0x9c, 0x5f, 0x87, 0x36, 0xe4, 0x81, 0x43, 0xec,
    0xe0, 0xdc, 0x94, 0x27, 0x9a, 0x96, 0x0c, 0xa7, 0x91, 0x85, 0x73, 0x7e, 0xdd, 0xda, 0x90,
    0xd4, 0x1a, 0xf2, 0x84, 0xda, 0x66, 0x72, 0xa6, 0x68, 0xb9, 0x70, 0xea, 0x59, 0x38, 0x17,
    0xba, 0x4d, 0x09, 0xa6, 0xae, 0x82, 0x69, 0x2e, 0x1d, 0xcc, 0x66, 0x06, 0xca, 0xf9, 0x8f,
    0x35, 0xc4, 0x29, 0xb6, 0x86, 0x38, 0xc4, 0xa6, 0xc0, 0x58, 0x10, 0xc3, 0x84, 0x23, 0x3f,
    0x07, 0x64, 0x83, 0xbd, 0x02, 0x82, 0xc0, 0xef, 0x04, 0x21, 0xbe, 0x25, 0xc6, 0x0a, 0xc4,
    0xfb, 0xf5, 0xba, 0x54, 0xb7, 0x81, 0x4a, 0x1b, 0x0e, 0xc1, 0x67, 0xa5, 0x2e, 0x92, 0xd9,
    0x2f, 0xa5, 0x09, 0xed, 0xd8, 0x51, 0x52, 0xa7, 0xd6, 0x74, 0xac, 0xf9, 0xb6, 0xa7, 0x79,
    0x8c, 0xdb, 0x3f, 0x9f, 0x4b, 0x06, 0xed, 0x56, 0xf3, 0x96, 0xc4, 0xd0, 0xcd, 0x85, 0x32,
    0xd8, 0x7e, 0xbe, 0xf4, 0x2f, 0xbe, 0x99, 0x95, 0x3e, 0x93, 0x4b, 0x91, 0x33, 0x5f, 0xd0,
    0xed, 0x28, 0x72, 0x8c, 0x06, 0x1e, 0xf7, 0x98, 0xcd, 0x88, 0x88, 0x1c, 0xde, 0x76, 0xaa,
    0x6c, 0x4c, 0x64, 0x97, 0x42, 0xbb, 0xd9, 0x68, 0xae, 0xe6, 0x0d, 0xce, 0x66, 0x86, 0x03,
    0x3f, 0xb5, 0xd8, 0x10, 0x87, 0x16, 0x1b, 0xe2, 0xcc, 0xe2, 0x26, 0x9e, 0x89, 0x30, 0x97,
    0x1c, 0x1b, 0x19, 0x18, 0xe7, 0x3f, 0xc6, 0xd8, 0x28, 0xd7, 0x05, 0x8c, 0x0d, 0x05, 0x46,
    0x92, 0xc1, 0x72, 0x61, 0xac, 0x67, 0x60, 0x9c, 0xff, 0x04, 0x61, 0x43, 0xa4, 0xff, 0x1a,
    0xfc, 0xe0, 0x26, 0x1e, 0x4c, 0x30, 0x97, 0x0f, 0x63, 0xd6, 0xb7, 0x58, 0xc4, 0xb5, 0x90,
    0x45, 0x4d, 0x81, 0xd1, 0xa8, 0x4c, 0xca, 0x98, 0x58, 0x0f, 0x56, 0x6a, 0x63, 0x4b, 0x5c,
    0xc1, 0x0a, 0x19, 0x09, 0xff, 0x14, 0x44, 0xc8, 0x9c, 0x53, 0x84, 0x4c, 0x26, 0x42, 0x15,
    0xd6, 0x30, 0xcd, 0xd9, 0x36, 0x1c, 0x45, 0x88, 0xb7, 0x4d, 0xeb, 0x97, 0x39, 0x43, 0x3e,
    0xb7, 0x4a, 0x9b, 0xcf, 0x97, 0x62, 0xc1, 0x69, 0xf2, 0x02, 0x5a, 0xdf, 0x9c, 0x38, 0x59,
    0x80, 0x42, 0xf3, 0x02, 0x01, 0xcd, 0x3a, 0x5a, 0x8b, 0xf8, 0x59, 0xd2, 0xcd, 0xaa, 0xaa,
    0x5b, 0x3e, 0x63, 0x65, 0x9d, 0xac, 0x45, 0x7c, 0x2c, 0xe9, 0x62, 0x55, 0x14, 0x18, 0x69,
    0x79, 0xb9, 0x30, 0x66, 0x1d, 0xac, 0x85, 0xfc, 0x2b, 0x01, 0xa3, 0xf9, 0x65, 0x61, 0xcc,
    0x57, 0x0b, 0xc0, 0x98, 0xb8, 0x56, 0x12, 0xc6, 0x4d, 0x16, 0xb7, 0x2e, 0x17, 0x46, 0xe9,
    0x31, 0x10, 0xe7, 0x77, 0xab, 0xea, 0x89, 0x0e, 0xd1, 0x55, 0x10, 0x27, 0x6c, 0xe2, 0x0b,
    0xbc, 0x3f, 0x0a, 0x31, 0x98, 0xd2, 0x7c, 0x5a, 0x3d, 0x18, 0x93, 0x1f, 0x32, 0xdb, 0x14,
    0xe2, 0xe1, 0x28, 0xa6, 0x7a, 0xc4, 0x68, 0xcc, 0xf9, 0xc6, 0x48, 0x83, 0xed, 0x87, 0x3b,
    0xd2, 0xd5, 0xeb, 0xb3, 0x79, 0x80, 0x86, 0xb0, 0xac, 0x6d, 0xfa, 0x8d, 0x96, 0xf9, 0xd4,
    0xbd, 0x48, 0xa2, 0xbf, 0x61, 0xf0, 0xf3, 0x30, 0x58, 0xcf, 0xe8, 0xc4, 0xfa, 0x02, 0x3a,
    0x2e, 0x74, 0x62, 0x5d, 0xd1, 0x89, 0x9b, 0xec, 0x08, 0xd0, 0x32, 0xe5, 0xa4, 0x9e, 0xd1,
    0xf5, 0x05, 0x74, 0x62, 0x5d, 0xe8, 0xc4, 0xba, 0xa2, 0x13, 0xbf, 0x08, 0x8c, 0x8a, 0x4e,
    0x5f, 0x95, 0xc9, 0x1a, 0x85, 0x96, 0xbd, 0xf4, 0xde, 0xf2, 0x60, 0x8e, 0x01, 0x71, 0xd8,
    0x08, 0x56, 0x79, 0x54, 0x7b, 0xec, 0x13, 0xac, 0xcf, 0x8f, 0x89, 0xee, 0x5f, 0xd8, 0xb4,
    0xbb, 0x1a, 0xec, 0xa7, 0x55, 0x01, 0x22, 0xe3, 0xbb, 0xca, 0x7c, 0xf9, 0x62, 0x68, 0xc7,
    0xb0, 0xa4, 0xa1, 0x9b, 0xfa, 0x7c, 0x27, 0x59, 0x78, 0xdb, 0x14, 0xdf, 0x19, 0x95, 0x19,
    0xae, 0x9c, 0x0f, 0xf0, 0xfd, 0xd6, 0x2f, 0xff, 0xfe, 0x25, 0x79, 0xff, 0x3b, 0x5b, 0x4e,
    0x99, 0x73, 0x4c, 0xaf, 0xff, 0x53, 0x35, 0xf5, 0x5c, 0xfd, 0x2f, 0xd3, 0xac, 0x57, 0xbe,
    0xff, 0xfd, 0x1a, 0x1f, 0x77, 0x40, 0x3d, 0xe8, 0xef, 0x31, 0xc5, 0x88, 0x55, 0x3c, 0xb4,
    0x18, 0x0c, 0xb4, 0xbf, 0x15, 0x56, 0xfa, 0xf8, 0xdb, 0x8f, 0x2b, 0x1b, 0xdf, 0x7f, 0xbf,
    0x8d, 0x17, 0xbd, 0x15, 0x0e, 0xfa, 0x6c, 0xac, 0x90, 0x27, 0x3a, 0x95, 0x43, 0xa0, 0x53,
    0x12, 0xa7, 0x9d, 0x8d, 0x41, 0xaf, 0xef, 0xc2, 0x97, 0xbb, 0x20, 0x06, 0x66, 0xa0, 0xd0,
    0xec, 0x78, 0x11, 0x04, 0x3a, 0x2f, 0x7e, 0xbe, 0xd7, 0x92, 0x0b, 0xb5, 0xf8, 0x93, 0x0d,
    0xaf, 0x12, 0x03, 0xb0, 0x3c, 0x29, 0x6b, 0xf4, 0x03, 0x4f, 0x3f, 0xfc, 0x98, 0x1d, 0x66,
    0x7b, 0xd7, 0x52, 0xe3, 0x8b, 0x6b, 0xcf, 0xde, 0xad, 0xfe, 0xa0, 0xb1, 0x12, 0xd2, 0x3f,
    0x7c, 0x12, 0xf8, 0x40, 0x98, 0xd8, 0xee, 0x9d, 0x87, 0xe7, 0xf3, 0x19, 0x20, 0xa8, 0x2d,
    0xfc, 0x6a, 0x43, 0x58, 0x22, 0x2f, 0xfc, 0x56, 0x51, 0x21, 0x73, 0xc1, 0x5a, 0x72, 0x91,
    0x5f, 0xb0, 0x5c, 0x85, 0x72, 0x3b, 0x7a, 0xb2, 0x16, 0x39, 0xb1, 0x7a, 0x3d, 0xf4, 0xd4,
    0x04, 0xd6, 0x19, 0xb2, 0xd9, 0xa5, 0xf5, 0x12, 0xdb, 0x0c, 0xf7, 0xf2, 0xad, 0x95, 0x68,
    0x38, 0xd3, 0x91, 0xba, 0x03, 0xed, 0x62, 0x7c, 0xa3, 0x58, 0xcc, 0x10, 0x74, 0x70, 0x83,
    0x60, 0x52, 0xfb, 0x07, 0xdd, 0x00, 0x66, 0x83, 0x68, 0xca, 0x2d, 0xe8, 0x29, 0x4c, 0xe3,
    0xc8, 0x74, 0x67, 0x21, 0x08, 0xdf, 0xa5, 0xa6, 0x5b, 0xcd, 0xcd, 0x97, 0x0c, 0xa1, 0x0d,
    0x5e, 0xec, 0x0e, 0x3d, 0x97, 0xed, 0x9e, 0x9a, 0xe9, 0x21, 0x7b, 0x24, 0x56, 0x11, 0x89,
    0x9c, 0x8a, 0xca, 0xe2, 0x9b, 0xb6, 0xe7, 0xe0, 0x62, 0x79, 0x79, 0x71, 0x06, 0xb7, 0xff,
    0xf3, 0xe8, 0x54, 0x66, 0xda, 0x1a, 0x0e, 0xe9, 0x16, 0x62, 0x1c, 0xc8, 0x9b, 0x68, 0xe2,
    0x15, 0xd3, 0x93, 0x71, 0xf4, 0x15, 0x6d, 0x87, 0x84, 0x58, 0x06, 0x2b, 0x74, 0x61, 0x02,
    0x5c, 0x46, 0x2c, 0x44, 0x44, 0xb6, 0xc5, 0xcb, 0x6c, 0x3a, 0xc0, 0x8e, 0x21, 0x21, 0xe2,
    0x0a, 0x1c, 0xd5, 0xd2, 0x4a, 0x7d, 0xe2, 0x79, 0x41, 0x49, 0x03, 0xb6, 0x2c, 0xf5, 0x82,
    0xe9, 0x8c, 0xc1, 0xb6, 0x02, 0x4a, 0x22, 0x6a, 0x59, 0x71, 0xaf, 0x18, 0x58, 0x7f, 0xcc,
    0x10, 0x00, 0x13, 0xc3, 0x00, 0x9e, 0x74, 0xc0, 0x3c, 0xd0, 0x2d, 0x58, 0xad, 0x3b, 0xf2,
    0x1b, 0x31, 0xad, 0x36, 0xb0, 0x7c, 0x7f, 0x32, 0x3f, 0xef, 0x8b, 0x66, 0x39, 0xf9, 0x3d,
    0xc6, 0x1a, 0x85, 0xe4, 0xaf, 0x29, 0x12, 0xd1, 0x47, 0x13, 0x84, 0x8b, 0xdd, 0xcb, 0x11,
    0x1b, 0x7a, 0xc5, 0x3d, 0xca, 0x44, 0xeb, 0x5b, 0x0f, 0xb0, 0x72, 0xca, 0x75, 0xb4, 0x0c,
    0x2a, 0xac, 0x62, 0x88, 0xde, 0x8f, 0xf7, 0xb1, 0x2f, 0xbb, 0xd2, 0x22, 0x0f, 0xd5, 0x16,
    0x97, 0xd1, 0x3a, 0x05, 0x99, 0xe4, 0x7d, 0x8b, 0x35, 0x49, 0x40, 0xcc, 0x8e, 0x01, 0x18,
    0x24, 0x51, 0x30, 0x90, 0x4c, 0x39, 0x6d, 0x30, 0xd6, 0x24, 0x2d, 0x4a, 0xf2, 0x57, 0xba,
    0x71, 0x5b, 0xf2, 0x7f, 0x8b, 0x19, 0x7f, 0xf9, 0xad, 0x00, 0x2d, 0x73, 0x5e, 0x2b, 0x5d,
    0x95, 0x09, 0xd7, 0x33, 0x17, 0x6b, 0xdd, 0xcc, 0xf5, 0xc8, 0xc5, 0xeb, 0x92, 0x37, 0x11,
    0x77, 0x1a, 0x4f, 0xb9, 0x06, 0xe6, 0x7f, 0x4f, 0x58, 0xbb, 0xbc, 0xcf, 0x15, 0x1a, 0xf0,
    0x58, 0x95, 0x65, 0xef, 0xf4, 0x09, 0xb0, 0x24, 0x15, 0x08, 0xf4, 0x11, 0x23, 0x66, 0xb0,
    0xe5, 0x7e, 0x61, 0xe2, 0xfb, 0x71, 0x31, 0x48, 0xea, 0x7c, 0x21, 0x06, 0x34, 0xac, 0x4d,
    0xf2, 0x23, 0xc8, 0x2b, 0xe8, 0xaf, 0x15, 0x89, 0x35, 0x75, 0x3f, 0xf1, 0x5c, 0xea, 0x3e,
    0x7e, 0x4e, 0x87, 0x66, 0x05, 0xc8, 0x39, 0x66, 0xae, 0xb6, 0x8e, 0x2f, 0xf7, 0x0c, 0xed,
    0x4d, 0x5f, 0x4b, 0xbe, 0x9b, 0xf0, 0xdd, 0x48, 0x20, 0x6d, 0x49, 0x2c, 0x53, 0x68, 0x5d,
    0xa2, 0x24, 0x37, 0xe6, 0x00, 0x4b, 0x38, 0x4d, 0x8d, 0x1e, 0x99, 0x8c, 0xb4, 0xd1, 0x90,
    0xf0, 0x00, 0xb9, 0x85, 0xde, 0xdc, 0xaa, 0xb8, 0xe0, 0x70, 0x53, 0xad, 0x64, 0x53, 0xa3,
    0x3a, 0x54, 0xbd, 0xd2, 0xf1, 0xf0, 0xf0, 0xf6, 0x06, 0x1e, 0x33, 0x67, 0x56, 0x9a, 0x17,
    0xa7, 0xeb, 0x46, 0x25, 0x73, 0x4f, 0xf7, 0x1e, 0xbb, 0x2e, 0xf1, 0x9c, 0x08, 0x07, 0xeb,
    0xa0, 0xef, 0xfd, 0x60, 0xd4, 0xeb, 0xab, 0x33, 0x4d, 0x12, 0xdf, 0x8b, 0x3e, 0xfc, 0x78,
    0x01, 0x4b, 0x96, 0x91, 0x32, 0xce, 0x2d, 0xb4, 0xce, 0xc9, 0x6f, 0x0c, 0x2d, 0x1d, 0xeb,
    0x45, 0xf8, 0x21, 0x70, 0x1d, 0x24, 0x19, 0x1f, 0x97, 0x3a, 0x17, 0xb2, 0xca, 0x26, 0xf7,
    0xca, 0x49, 0xb9, 0x59, 0xf0, 0x2b, 0xde, 0xda, 0x0d, 0xfa, 0x3f, 0xfb, 0x49, 0xfb, 0xff,
    0xe2, 0xf9, 0xcb, 0x89, 0x04, 0xa6, 0xfb, 0xff, 0x46, 0x35, 0x5f, 0xff, 0xbb, 0x6a, 0xd6,
    0xf9, 0xff, 0xaf, 0xf2, 0xc9, 0x8b, 0xbe, 0x72, 0x9f, 0x40, 0xd6, 0xf9, 0xe3, 0xf7, 0x5e,
    0xa0, 0x65, 0xaf, 0xb4, 0x61, 0x86, 0x29, 0x37, 0x56, 0xb6, 0x59, 0x76, 0xbc, 0x7b, 0x32,
    0x60, 0x24, 0xb8, 0xdf, 0x37, 0xf2, 0xef, 0xfd, 0xe0, 0xd1, 0x57, 0x06, 0x4f, 0xfb, 0xb1,
    0x6a, 0xbf, 0x70, 0xb0, 0xf0, 0xc2, 0x86, 0x77, 0xca, 0x7d, 0x0b, 0x3f, 0xa4, 0xd6, 0xb3,
    0x90, 0xe3, 0x31, 0xb3, 0xff, 0x62, 0x93, 0xae, 0x89, 0x09, 0xfe, 0x9e, 0xb5, 0xab, 0x4b,
    0x2a, 0x70, 0x8a, 0x0f, 0xae, 0xdc, 0x9a, 0xc5, 0xc1, 0xe7, 0xf5, 0x54, 0x53, 0x1e, 0xf0,
    0xc1, 0xe2, 0x65, 0x51, 0xbd, 0xa2, 0x41, 0x52, 0x46, 0x7b, 0xb9, 0x4b, 0x51, 0x9d, 0x74,
    0x06, 0x7e, 0x93, 0x9f, 0x52, 0x1c, 0x4f, 0x52, 0x51, 0x5c, 0x50, 0x97, 0x26, 0xf2, 0xa7,
    0x30, 0xe7, 0xb8, 0x78, 0x4d, 0xe3, 0x57, 0xbc, 0xa5, 0x00, 0x49, 0xb8, 0x4d, 0xbd, 0xb3,
    0x08, 0x1a, 0xc4, 0x5a, 0x16, 0x92, 0xff, 0x03, 0x15, 0x9e, 0xbf, 0x7d, 0xbe, 0x7d, 0xbe,
    0xbe, 0x7d, 0x8a, 0x3f, 0xff, 0x1f, 0x53, 0xbf, 0x22, 0x43, 0x00, 0x66, 0x01,
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/golang/scopejsiicalclib.go 1`] = `
package scopejsiicalclib

import (
    "github.com/aws-cdk/jsii/jsii"
)

type EnumFromScopedModule string

const (
    EnumFromScopedModuleValue1 EnumFromScopedModule = "VALUE1"
    EnumFromScopedModuleValue2 EnumFromScopedModule = "VALUE2"
)

type IDoublable interface {
    GetDoubleValue() float64
}

type IFriendly interface {
    Hello() string
}

type IThreeLevelsInterface interface {
    Baz()
}

type MyFirstStructIface interface {
    GetAnumber() float64
    GetAstring() string
    GetFirstOptional() []string
}

type MyFirstStruct struct {
    Anumber float64
    Astring string
    FirstOptional []string
}


func (m MyFirstStruct) GetAnumber() float64 {
    return m.Anumber
}

func (m MyFirstStruct) GetAstring() string {
    return m.Astring
}

func (m MyFirstStruct) GetFirstOptional() []string {
    return m.FirstOptional
}


type NumberIface interface {
    GetDoubleValue() float64
    SetDoubleValue()
    GetValue() float64
    SetValue()
}

type Number struct {
    DoubleValue float64
    Value float64
}

type OperationIface interface {
    ToString() string
}

type Operation struct {
}

func (o *Operation) ToString() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Operation",
        Method: "ToString",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type StructWithOnlyOptionalsIface interface {
    GetOptional1() string
    GetOptional2() float64
    GetOptional3() bool
}

type StructWithOnlyOptionals struct {
    Optional1 string
    Optional2 float64
    Optional3 bool
}


func (s StructWithOnlyOptionals) GetOptional1() string {
    return s.Optional1
}

func (s StructWithOnlyOptionals) GetOptional2() float64 {
    return s.Optional2
}

func (s StructWithOnlyOptionals) GetOptional3() bool {
    return s.Optional3
}


type ValueIface interface {
    GetValue() float64
    SetValue()
    ToString() string
}

type Value struct {
    Value float64
}

func (v *Value) ToString() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Value",
        Method: "ToString",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/golang/scopejsiicalclib/submodule.go 1`] = `
package submodule

import (
    "github.com/aws-cdk/jsii/jsii"
)

type IReflectable interface {
    GetEntries() []ReflectableEntry
}

type NestingClassIface interface {
}

type NestingClass struct {
}

type NestedClassIface interface {
    GetProperty() string
    SetProperty()
}

type NestedClass struct {
    Property string
}

type NestedStructIface interface {
    GetName() string
}

type NestedStruct struct {
    Name string
}


func (n NestedStruct) GetName() string {
    return n.Name
}


type ReflectableEntryIface interface {
    GetKey() string
    GetValue() jsii.Any
}

type ReflectableEntry struct {
    Key string
    Value jsii.Any
}


func (r ReflectableEntry) GetKey() string {
    return r.Key
}

func (r ReflectableEntry) GetValue() jsii.Any {
    return r.Value
}


type ReflectorIface interface {
    AsMap() map[string]jsii.Any
}

type Reflector struct {
}

func (r *Reflector) AsMap() map[string]jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Reflector",
        Method: "AsMap",
        Args: []string{"@scope/jsii-calc-lib.submodule.IReflectable",},

    })
    return nil
}


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/pom.xml 1`] = `
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <name>\${project.groupId}:\${project.artifactId}</name>
  <description>A simple calcuator library built on JSII.</description>
  <url>https://github.com/aws/jsii</url>
  <licenses>
    <license>
      <name>Apache License 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0</url>
      <distribution>repo</distribution>
      <comments>An OSI-approved license</comments>
    </license>
  </licenses>
  <developers>
    <developer>
      <organization>Amazon Web Services</organization>
      <roles>
        <role>author</role>
      </roles>
      <organizationUrl>https://aws.amazon.com</organizationUrl>
    </developer>
  </developers>
  <scm>
    <connection>scm:git:https://github.com/aws/jsii.git</connection>
    <url>https://github.com/aws/jsii.git</url>
  </scm>
  <groupId>software.amazon.jsii.tests</groupId>
  <artifactId>calculator-lib</artifactId>
  <version>0.0.0.DEVPREVIEW</version>
  <packaging>jar</packaging>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
    <dependency>
      <groupId>software.amazon.jsii.tests</groupId>
      <artifactId>calculator-base</artifactId>
      <version>[0.0.0,0.0.1)</version>
    </dependency>
    <dependency>
      <groupId>software.amazon.jsii.tests</groupId>
      <artifactId>calculator-base-of-base</artifactId>
      <version>[0.0.0,0.0.1)</version>
    </dependency>
    <dependency>
      <groupId>software.amazon.jsii</groupId>
      <artifactId>jsii-runtime</artifactId>
      <version>[0.0.0,0.0.1)</version>
    </dependency>
    <dependency>
      <groupId>org.jetbrains</groupId>
      <artifactId>annotations</artifactId>
      <version>[16.0.3,20.0.0)</version>
    </dependency>
    <dependency>
      <!-- Provides @javax.annotation.Generated for JDKs >= 9 -->
      <groupId>javax.annotation</groupId>
      <artifactId>javax.annotation-api</artifactId>
      <version>[1.3.2,1.4.0)</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
          <archive>
            <index>true</index>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.1.1</version>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <failOnError>false</failOnError>
          <show>protected</show>
          <sourceFileExcludes>
            <exclude>**/$Module.java</exclude>
          </sourceFileExcludes>
          <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
          <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>3.6</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <generateBackupPoms>false</generateBackupPoms>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/custom_submodule_name/IReflectable.java 1`] = `
package software.amazon.jsii.tests.calculator.custom_submodule_name;

/**
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.submodule.IReflectable")
@software.amazon.jsii.Jsii.Proxy(IReflectable.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
public interface IReflectable extends software.amazon.jsii.JsiiSerializable {

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.custom_submodule_name.ReflectableEntry> getEntries();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.custom_submodule_name.IReflectable {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.custom_submodule_name.ReflectableEntry> getEntries() {
            return java.util.Collections.unmodifiableList(this.jsiiGet("entries", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.custom_submodule_name.ReflectableEntry.class))));
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/custom_submodule_name/NestingClass.java 1`] = `
package software.amazon.jsii.tests.calculator.custom_submodule_name;

/**
 * This class is here to show we can use nested classes across module boundaries.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.submodule.NestingClass")
public class NestingClass extends software.amazon.jsii.JsiiObject {

    protected NestingClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected NestingClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }
    /**
     * This class is here to show we can use nested classes across module boundaries.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    @software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.submodule.NestingClass.NestedClass")
    public static class NestedClass extends software.amazon.jsii.JsiiObject {

        protected NestedClass(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        protected NestedClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
            super(initializationMode);
        }

        /**
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public NestedClass() {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
        }

        /**
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public @org.jetbrains.annotations.NotNull java.lang.String getProperty() {
            return this.jsiiGet("property", java.lang.String.class);
        }
    }
    /**
     * This is a struct, nested within a class.
     * <p>
     * Normal.
     */
    @software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct")
    @software.amazon.jsii.Jsii.Proxy(NestedStruct.Jsii$Proxy.class)
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public static interface NestedStruct extends software.amazon.jsii.JsiiSerializable {

        /**
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @org.jetbrains.annotations.NotNull java.lang.String getName();

        /**
         * @return a {@link Builder} of {@link NestedStruct}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        static Builder builder() {
            return new Builder();
        }
        /**
         * A builder for {@link NestedStruct}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public static final class Builder implements software.amazon.jsii.Builder<NestedStruct> {
            private java.lang.String name;

            /**
             * Sets the value of {@link NestedStruct#getName}
             * @param name the value to be set. This parameter is required.
             * @return {@code this}
             */
            @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
            @Deprecated
            public Builder name(java.lang.String name) {
                this.name = name;
                return this;
            }

            /**
             * Builds the configured instance.
             * @return a new instance of {@link NestedStruct}
             * @throws NullPointerException if any required attribute was not provided
             */
            @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
            @Deprecated
            @Override
            public NestedStruct build() {
                return new Jsii$Proxy(name);
            }
        }

        /**
         * An implementation for {@link NestedStruct}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements NestedStruct {
            private final java.lang.String name;

            /**
             * Constructor that initializes the object based on values retrieved from the JsiiObject.
             * @param objRef Reference to the JSII managed object.
             */
            protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
                super(objRef);
                this.name = this.jsiiGet("name", java.lang.String.class);
            }

            /**
             * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
             */
            private Jsii$Proxy(final java.lang.String name) {
                super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
                this.name = java.util.Objects.requireNonNull(name, "name is required");
            }

            @Override
            public java.lang.String getName() {
                return this.name;
            }

            @Override
            public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
                final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
                final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

                data.set("name", om.valueToTree(this.getName()));

                final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
                struct.set("fqn", om.valueToTree("@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct"));
                struct.set("data", data);

                final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
                obj.set("$jsii.struct", struct);

                return obj;
            }

            @Override
            public boolean equals(Object o) {
                if (this == o) return true;
                if (o == null || getClass() != o.getClass()) return false;

                NestedStruct.Jsii$Proxy that = (NestedStruct.Jsii$Proxy) o;

                return this.name.equals(that.name);
            }

            @Override
            public int hashCode() {
                int result = this.name.hashCode();
                return result;
            }
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/custom_submodule_name/ReflectableEntry.java 1`] = `
package software.amazon.jsii.tests.calculator.custom_submodule_name;

/**
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.submodule.ReflectableEntry")
@software.amazon.jsii.Jsii.Proxy(ReflectableEntry.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
public interface ReflectableEntry extends software.amazon.jsii.JsiiSerializable {

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    @org.jetbrains.annotations.NotNull java.lang.String getKey();

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    @org.jetbrains.annotations.NotNull java.lang.Object getValue();

    /**
     * @return a {@link Builder} of {@link ReflectableEntry}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link ReflectableEntry}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public static final class Builder implements software.amazon.jsii.Builder<ReflectableEntry> {
        private java.lang.String key;
        private java.lang.Object value;

        /**
         * Sets the value of {@link ReflectableEntry#getKey}
         * @param key the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder key(java.lang.String key) {
            this.key = key;
            return this;
        }

        /**
         * Sets the value of {@link ReflectableEntry#getValue}
         * @param value the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder value(java.lang.Object value) {
            this.value = value;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link ReflectableEntry}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public ReflectableEntry build() {
            return new Jsii$Proxy(key, value);
        }
    }

    /**
     * An implementation for {@link ReflectableEntry}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements ReflectableEntry {
        private final java.lang.String key;
        private final java.lang.Object value;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.key = this.jsiiGet("key", java.lang.String.class);
            this.value = this.jsiiGet("value", java.lang.Object.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String key, final java.lang.Object value) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.key = java.util.Objects.requireNonNull(key, "key is required");
            this.value = java.util.Objects.requireNonNull(value, "value is required");
        }

        @Override
        public java.lang.String getKey() {
            return this.key;
        }

        @Override
        public java.lang.Object getValue() {
            return this.value;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("key", om.valueToTree(this.getKey()));
            data.set("value", om.valueToTree(this.getValue()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("@scope/jsii-calc-lib.submodule.ReflectableEntry"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ReflectableEntry.Jsii$Proxy that = (ReflectableEntry.Jsii$Proxy) o;

            if (!key.equals(that.key)) return false;
            return this.value.equals(that.value);
        }

        @Override
        public int hashCode() {
            int result = this.key.hashCode();
            result = 31 * result + (this.value.hashCode());
            return result;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/custom_submodule_name/Reflector.java 1`] = `
package software.amazon.jsii.tests.calculator.custom_submodule_name;

/**
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.submodule.Reflector")
public class Reflector extends software.amazon.jsii.JsiiObject {

    protected Reflector(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Reflector(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public Reflector() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * @param reflectable This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> asMap(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.custom_submodule_name.IReflectable reflectable) {
        return java.util.Collections.unmodifiableMap(this.jsiiCall("asMap", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(java.lang.Object.class)), new Object[] { java.util.Objects.requireNonNull(reflectable, "reflectable is required") }));
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/lib/$Module.java 1`] = `
package software.amazon.jsii.tests.calculator.lib;

import static java.util.Arrays.asList;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.Reader;
import java.io.UncheckedIOException;

import java.nio.charset.StandardCharsets;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import software.amazon.jsii.JsiiModule;

public final class $Module extends JsiiModule {
    private static final Map<String, String> MODULE_TYPES = load();

    private static Map<String, String> load() {
        final Map<String, String> result = new HashMap<>();
        final ClassLoader cl = $Module.class.getClassLoader();
        try (final InputStream is = cl.getResourceAsStream("software/amazon/jsii/tests/calculator/lib/$Module.txt");
             final Reader rd = new InputStreamReader(is, StandardCharsets.UTF_8);
             final BufferedReader br = new BufferedReader(rd)) {
            br.lines()
              .filter(line -> !line.trim().isEmpty())
              .forEach(line ->  {
                final String[] parts = line.split("=", 2);
                final String fqn = parts[0];
                final String className = parts[1];
                result.put(fqn, className);
            });
        }
        catch (final IOException exception) {
            throw new UncheckedIOException(exception);
        }
        return result;
    }

    private final Map<String, Class<?>> cache = new HashMap<>();

    public $Module() {
        super("@scope/jsii-calc-lib", "0.0.0", $Module.class, "jsii-calc-lib@0.0.0.jsii.tgz");
    }

    @Override
    public List<Class<? extends JsiiModule>> getDependencies() {
        return asList(software.amazon.jsii.tests.calculator.base.$Module.class, software.amazon.jsii.tests.calculator.baseofbase.$Module.class);
    }

    @Override
    protected Class<?> resolveClass(final String fqn) throws ClassNotFoundException {
        if (!MODULE_TYPES.containsKey(fqn)) {
            throw new ClassNotFoundException("Unknown JSII type: " + fqn);
        }
        String className = MODULE_TYPES.get(fqn);
        if (!this.cache.containsKey(className)) {
            this.cache.put(className, this.findClass(className));
        }
        return this.cache.get(className);
    }

    private Class<?> findClass(final String binaryName) {
        try {
            return Class.forName(binaryName);
        }
        catch (final ClassNotFoundException exception) {
            throw new RuntimeException(exception);
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/lib/EnumFromScopedModule.java 1`] = `
package software.amazon.jsii.tests.calculator.lib;

/**
 * Check that enums from \\@scoped packages can be references.
 * <p>
 * See awslabs/jsii#138
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.EnumFromScopedModule")
public enum EnumFromScopedModule {
    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    VALUE1,
    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    VALUE2,
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/lib/IDoublable.java 1`] = `
package software.amazon.jsii.tests.calculator.lib;

/**
 * The general contract for a concrete number.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.IDoublable")
@software.amazon.jsii.Jsii.Proxy(IDoublable.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
public interface IDoublable extends software.amazon.jsii.JsiiSerializable {

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    @org.jetbrains.annotations.NotNull java.lang.Number getDoubleValue();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.lib.IDoublable {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public @org.jetbrains.annotations.NotNull java.lang.Number getDoubleValue() {
            return this.jsiiGet("doubleValue", java.lang.Number.class);
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/lib/IFriendly.java 1`] = `
package software.amazon.jsii.tests.calculator.lib;

/**
 * Applies to classes that are considered friendly.
 * <p>
 * These classes can be greeted with
 * a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.IFriendly")
@software.amazon.jsii.Jsii.Proxy(IFriendly.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
public interface IFriendly extends software.amazon.jsii.JsiiSerializable {

    /**
     * Say hello!
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    @org.jetbrains.annotations.NotNull java.lang.String hello();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.lib.IFriendly {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * Say hello!
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String hello() {
            return this.jsiiCall("hello", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/lib/IThreeLevelsInterface.java 1`] = `
package software.amazon.jsii.tests.calculator.lib;

/**
 * Interface that inherits from packages 2 levels up the tree.
 * <p>
 * Their presence validates that .NET/Java/jsii-reflect can track all fields
 * far enough up the tree.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.IThreeLevelsInterface")
@software.amazon.jsii.Jsii.Proxy(IThreeLevelsInterface.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
public interface IThreeLevelsInterface extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.base.IBaseInterface {

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    void baz();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.lib.IThreeLevelsInterface {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public void baz() {
            this.jsiiCall("baz", software.amazon.jsii.NativeType.VOID);
        }

        @Override
        public void bar() {
            this.jsiiCall("bar", software.amazon.jsii.NativeType.VOID);
        }

        @Override
        public void foo() {
            this.jsiiCall("foo", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/lib/MyFirstStruct.java 1`] = `
package software.amazon.jsii.tests.calculator.lib;

/**
 * This is the first struct we have created in jsii.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.MyFirstStruct")
@software.amazon.jsii.Jsii.Proxy(MyFirstStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
public interface MyFirstStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * An awesome number value.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    @org.jetbrains.annotations.NotNull java.lang.Number getAnumber();

    /**
     * A string value.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    @org.jetbrains.annotations.NotNull java.lang.String getAstring();

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    default @org.jetbrains.annotations.Nullable java.util.List<java.lang.String> getFirstOptional() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link MyFirstStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link MyFirstStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public static final class Builder implements software.amazon.jsii.Builder<MyFirstStruct> {
        private java.lang.Number anumber;
        private java.lang.String astring;
        private java.util.List<java.lang.String> firstOptional;

        /**
         * Sets the value of {@link MyFirstStruct#getAnumber}
         * @param anumber An awesome number value. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder anumber(java.lang.Number anumber) {
            this.anumber = anumber;
            return this;
        }

        /**
         * Sets the value of {@link MyFirstStruct#getAstring}
         * @param astring A string value. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder astring(java.lang.String astring) {
            this.astring = astring;
            return this;
        }

        /**
         * Sets the value of {@link MyFirstStruct#getFirstOptional}
         * @param firstOptional the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder firstOptional(java.util.List<java.lang.String> firstOptional) {
            this.firstOptional = firstOptional;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link MyFirstStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public MyFirstStruct build() {
            return new Jsii$Proxy(anumber, astring, firstOptional);
        }
    }

    /**
     * An implementation for {@link MyFirstStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements MyFirstStruct {
        private final java.lang.Number anumber;
        private final java.lang.String astring;
        private final java.util.List<java.lang.String> firstOptional;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.anumber = this.jsiiGet("anumber", java.lang.Number.class);
            this.astring = this.jsiiGet("astring", java.lang.String.class);
            this.firstOptional = this.jsiiGet("firstOptional", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class)));
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Number anumber, final java.lang.String astring, final java.util.List<java.lang.String> firstOptional) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.anumber = java.util.Objects.requireNonNull(anumber, "anumber is required");
            this.astring = java.util.Objects.requireNonNull(astring, "astring is required");
            this.firstOptional = firstOptional;
        }

        @Override
        public java.lang.Number getAnumber() {
            return this.anumber;
        }

        @Override
        public java.lang.String getAstring() {
            return this.astring;
        }

        @Override
        public java.util.List<java.lang.String> getFirstOptional() {
            return this.firstOptional;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("anumber", om.valueToTree(this.getAnumber()));
            data.set("astring", om.valueToTree(this.getAstring()));
            if (this.getFirstOptional() != null) {
                data.set("firstOptional", om.valueToTree(this.getFirstOptional()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("@scope/jsii-calc-lib.MyFirstStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            MyFirstStruct.Jsii$Proxy that = (MyFirstStruct.Jsii$Proxy) o;

            if (!anumber.equals(that.anumber)) return false;
            if (!astring.equals(that.astring)) return false;
            return this.firstOptional != null ? this.firstOptional.equals(that.firstOptional) : that.firstOptional == null;
        }

        @Override
        public int hashCode() {
            int result = this.anumber.hashCode();
            result = 31 * result + (this.astring.hashCode());
            result = 31 * result + (this.firstOptional != null ? this.firstOptional.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/lib/Number.java 1`] = `
package software.amazon.jsii.tests.calculator.lib;

/**
 * Represents a concrete number.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.Number")
public class Number extends software.amazon.jsii.tests.calculator.lib.Value implements software.amazon.jsii.tests.calculator.lib.IDoublable {

    protected Number(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Number(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * Creates a Number object.
     * <p>
     * @param value The number. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public Number(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }

    /**
     * The number multiplied by 2.
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public @org.jetbrains.annotations.NotNull java.lang.Number getDoubleValue() {
        return this.jsiiGet("doubleValue", java.lang.Number.class);
    }

    /**
     * The number.
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
        return this.jsiiGet("value", java.lang.Number.class);
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/lib/Operation.java 1`] = `
package software.amazon.jsii.tests.calculator.lib;

/**
 * Represents an operation on values.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.Operation")
public abstract class Operation extends software.amazon.jsii.tests.calculator.lib.Value {

    protected Operation(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Operation(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    protected Operation() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * String representation of the value.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    @Override
    public abstract @org.jetbrains.annotations.NotNull java.lang.String toString();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.lib.Operation {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * The value.
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
            return this.jsiiGet("value", java.lang.Number.class);
        }

        /**
         * String representation of the value.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String toString() {
            return this.jsiiCall("toString", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/lib/StructWithOnlyOptionals.java 1`] = `
package software.amazon.jsii.tests.calculator.lib;

/**
 * This is a struct with only optional properties.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.StructWithOnlyOptionals")
@software.amazon.jsii.Jsii.Proxy(StructWithOnlyOptionals.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
public interface StructWithOnlyOptionals extends software.amazon.jsii.JsiiSerializable {

    /**
     * The first optional!
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    default @org.jetbrains.annotations.Nullable java.lang.String getOptional1() {
        return null;
    }

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    default @org.jetbrains.annotations.Nullable java.lang.Number getOptional2() {
        return null;
    }

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    default @org.jetbrains.annotations.Nullable java.lang.Boolean getOptional3() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link StructWithOnlyOptionals}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link StructWithOnlyOptionals}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public static final class Builder implements software.amazon.jsii.Builder<StructWithOnlyOptionals> {
        private java.lang.String optional1;
        private java.lang.Number optional2;
        private java.lang.Boolean optional3;

        /**
         * Sets the value of {@link StructWithOnlyOptionals#getOptional1}
         * @param optional1 The first optional!.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder optional1(java.lang.String optional1) {
            this.optional1 = optional1;
            return this;
        }

        /**
         * Sets the value of {@link StructWithOnlyOptionals#getOptional2}
         * @param optional2 the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder optional2(java.lang.Number optional2) {
            this.optional2 = optional2;
            return this;
        }

        /**
         * Sets the value of {@link StructWithOnlyOptionals#getOptional3}
         * @param optional3 the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder optional3(java.lang.Boolean optional3) {
            this.optional3 = optional3;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link StructWithOnlyOptionals}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public StructWithOnlyOptionals build() {
            return new Jsii$Proxy(optional1, optional2, optional3);
        }
    }

    /**
     * An implementation for {@link StructWithOnlyOptionals}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements StructWithOnlyOptionals {
        private final java.lang.String optional1;
        private final java.lang.Number optional2;
        private final java.lang.Boolean optional3;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.optional1 = this.jsiiGet("optional1", java.lang.String.class);
            this.optional2 = this.jsiiGet("optional2", java.lang.Number.class);
            this.optional3 = this.jsiiGet("optional3", java.lang.Boolean.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String optional1, final java.lang.Number optional2, final java.lang.Boolean optional3) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.optional1 = optional1;
            this.optional2 = optional2;
            this.optional3 = optional3;
        }

        @Override
        public java.lang.String getOptional1() {
            return this.optional1;
        }

        @Override
        public java.lang.Number getOptional2() {
            return this.optional2;
        }

        @Override
        public java.lang.Boolean getOptional3() {
            return this.optional3;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            if (this.getOptional1() != null) {
                data.set("optional1", om.valueToTree(this.getOptional1()));
            }
            if (this.getOptional2() != null) {
                data.set("optional2", om.valueToTree(this.getOptional2()));
            }
            if (this.getOptional3() != null) {
                data.set("optional3", om.valueToTree(this.getOptional3()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("@scope/jsii-calc-lib.StructWithOnlyOptionals"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            StructWithOnlyOptionals.Jsii$Proxy that = (StructWithOnlyOptionals.Jsii$Proxy) o;

            if (this.optional1 != null ? !this.optional1.equals(that.optional1) : that.optional1 != null) return false;
            if (this.optional2 != null ? !this.optional2.equals(that.optional2) : that.optional2 != null) return false;
            return this.optional3 != null ? this.optional3.equals(that.optional3) : that.optional3 == null;
        }

        @Override
        public int hashCode() {
            int result = this.optional1 != null ? this.optional1.hashCode() : 0;
            result = 31 * result + (this.optional2 != null ? this.optional2.hashCode() : 0);
            result = 31 * result + (this.optional3 != null ? this.optional3.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/lib/Value.java 1`] = `
package software.amazon.jsii.tests.calculator.lib;

/**
 * Abstract class which represents a numeric value.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.lib.$Module.class, fqn = "@scope/jsii-calc-lib.Value")
public abstract class Value extends software.amazon.jsii.tests.calculator.base.Base {

    protected Value(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Value(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    protected Value() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * String representation of the value.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public @org.jetbrains.annotations.NotNull java.lang.String toString() {
        return this.jsiiCall("toString", java.lang.String.class);
    }

    /**
     * The value.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public abstract @org.jetbrains.annotations.NotNull java.lang.Number getValue();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.lib.Value {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * The value.
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
            return this.jsiiGet("value", java.lang.Number.class);
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/lib/package-info.java 1`] = `
/**
 *
 * Deprecated: Really just deprecated for shows...
 */
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
package software.amazon.jsii.tests.calculator.lib;

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/resources/software/amazon/jsii/tests/calculator/lib/$Module.txt 1`] = `
@scope/jsii-calc-lib.EnumFromScopedModule=software.amazon.jsii.tests.calculator.lib.EnumFromScopedModule
@scope/jsii-calc-lib.IDoublable=software.amazon.jsii.tests.calculator.lib.IDoublable
@scope/jsii-calc-lib.IFriendly=software.amazon.jsii.tests.calculator.lib.IFriendly
@scope/jsii-calc-lib.IThreeLevelsInterface=software.amazon.jsii.tests.calculator.lib.IThreeLevelsInterface
@scope/jsii-calc-lib.MyFirstStruct=software.amazon.jsii.tests.calculator.lib.MyFirstStruct
@scope/jsii-calc-lib.Number=software.amazon.jsii.tests.calculator.lib.Number
@scope/jsii-calc-lib.Operation=software.amazon.jsii.tests.calculator.lib.Operation
@scope/jsii-calc-lib.StructWithOnlyOptionals=software.amazon.jsii.tests.calculator.lib.StructWithOnlyOptionals
@scope/jsii-calc-lib.Value=software.amazon.jsii.tests.calculator.lib.Value
@scope/jsii-calc-lib.submodule.IReflectable=software.amazon.jsii.tests.calculator.custom_submodule_name.IReflectable
@scope/jsii-calc-lib.submodule.NestingClass=software.amazon.jsii.tests.calculator.custom_submodule_name.NestingClass
@scope/jsii-calc-lib.submodule.NestingClass.NestedClass=software.amazon.jsii.tests.calculator.custom_submodule_name.NestingClass$NestedClass
@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct=software.amazon.jsii.tests.calculator.custom_submodule_name.NestingClass$NestedStruct
@scope/jsii-calc-lib.submodule.ReflectableEntry=software.amazon.jsii.tests.calculator.custom_submodule_name.ReflectableEntry
@scope/jsii-calc-lib.submodule.Reflector=software.amazon.jsii.tests.calculator.custom_submodule_name.Reflector

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/java/src/main/resources/software/amazon/jsii/tests/calculator/lib/jsii-calc-lib@0.0.0.jsii.tgz 1`] = `java/src/main/resources/software/amazon/jsii/tests/calculator/lib/jsii-calc-lib@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/js/jsii-calc-lib@0.0.0.jsii.tgz 1`] = `js/jsii-calc-lib@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/MANIFEST.in 1`] = `
include pyproject.toml

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/README.md 1`] = `


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/pyproject.toml 1`] = `
[build-system]
requires = ["setuptools >= 49.3.1", "wheel >= 0.34.2"]
build-backend = "setuptools.build_meta"

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/setup.py 1`] = `
import json
import setuptools

kwargs = json.loads(
    """
{
    "name": "scope.jsii-calc-lib",
    "version": "0.0.0",
    "description": "A simple calcuator library built on JSII.",
    "license": "Apache-2.0",
    "url": "https://github.com/aws/jsii",
    "long_description_content_type": "text/markdown",
    "author": "Amazon Web Services",
    "bdist_wheel": {
        "universal": true
    },
    "project_urls": {
        "Source": "https://github.com/aws/jsii.git"
    },
    "package_dir": {
        "": "src"
    },
    "packages": [
        "scope.jsii_calc_lib",
        "scope.jsii_calc_lib._jsii",
        "scope.jsii_calc_lib.custom_submodule_name"
    ],
    "package_data": {
        "scope.jsii_calc_lib._jsii": [
            "jsii-calc-lib@0.0.0.jsii.tgz"
        ],
        "scope.jsii_calc_lib": [
            "py.typed"
        ]
    },
    "python_requires": ">=3.6",
    "install_requires": [
        "jsii>=0.0.0, <0.0.1",
        "publication>=0.0.3",
        "scope.jsii-calc-base-of-base>=0.0.0, <0.0.1",
        "scope.jsii-calc-base>=0.0.0, <0.0.1"
    ],
    "classifiers": [
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Programming Language :: JavaScript",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Typing :: Typed",
        "Development Status :: 7 - Inactive",
        "License :: OSI Approved"
    ]
}
"""
)

with open("README.md") as fp:
    kwargs["long_description"] = fp.read()


setuptools.setup(**kwargs)

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/src/scope/jsii_calc_lib/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from ._jsii import *

import scope.jsii_calc_base


@jsii.enum(jsii_type="@scope/jsii-calc-lib.EnumFromScopedModule")
class EnumFromScopedModule(enum.Enum):
    """Check that enums from @scoped packages can be references.

    See awslabs/jsii#138

    stability
    :stability: deprecated
    """

    VALUE1 = "VALUE1"
    """
    stability
    :stability: deprecated
    """
    VALUE2 = "VALUE2"
    """
    stability
    :stability: deprecated
    """


@jsii.interface(jsii_type="@scope/jsii-calc-lib.IDoublable")
class IDoublable(jsii.compat.Protocol):
    """The general contract for a concrete number.

    stability
    :stability: deprecated
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IDoublableProxy

    @builtins.property
    @jsii.member(jsii_name="doubleValue")
    def double_value(self) -> jsii.Number:
        """
        stability
        :stability: deprecated
        """
        ...


class _IDoublableProxy:
    """The general contract for a concrete number.

    stability
    :stability: deprecated
    """

    __jsii_type__ = "@scope/jsii-calc-lib.IDoublable"

    @builtins.property
    @jsii.member(jsii_name="doubleValue")
    def double_value(self) -> jsii.Number:
        """
        stability
        :stability: deprecated
        """
        return jsii.get(self, "doubleValue")


@jsii.interface(jsii_type="@scope/jsii-calc-lib.IFriendly")
class IFriendly(jsii.compat.Protocol):
    """Applies to classes that are considered friendly.

    These classes can be greeted with
    a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.

    stability
    :stability: deprecated
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IFriendlyProxy

    @jsii.member(jsii_name="hello")
    def hello(self) -> str:
        """Say hello!

        stability
        :stability: deprecated
        """
        ...


class _IFriendlyProxy:
    """Applies to classes that are considered friendly.

    These classes can be greeted with
    a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.

    stability
    :stability: deprecated
    """

    __jsii_type__ = "@scope/jsii-calc-lib.IFriendly"

    @jsii.member(jsii_name="hello")
    def hello(self) -> str:
        """Say hello!

        stability
        :stability: deprecated
        """
        return jsii.invoke(self, "hello", [])


@jsii.interface(jsii_type="@scope/jsii-calc-lib.IThreeLevelsInterface")
class IThreeLevelsInterface(scope.jsii_calc_base.IBaseInterface, jsii.compat.Protocol):
    """Interface that inherits from packages 2 levels up the tree.

    Their presence validates that .NET/Java/jsii-reflect can track all fields
    far enough up the tree.

    stability
    :stability: deprecated
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IThreeLevelsInterfaceProxy

    @jsii.member(jsii_name="baz")
    def baz(self) -> None:
        """
        stability
        :stability: deprecated
        """
        ...


class _IThreeLevelsInterfaceProxy(jsii.proxy_for(scope.jsii_calc_base.IBaseInterface)):
    """Interface that inherits from packages 2 levels up the tree.

    Their presence validates that .NET/Java/jsii-reflect can track all fields
    far enough up the tree.

    stability
    :stability: deprecated
    """

    __jsii_type__ = "@scope/jsii-calc-lib.IThreeLevelsInterface"

    @jsii.member(jsii_name="baz")
    def baz(self) -> None:
        """
        stability
        :stability: deprecated
        """
        return jsii.invoke(self, "baz", [])


@jsii.data_type(
    jsii_type="@scope/jsii-calc-lib.MyFirstStruct",
    jsii_struct_bases=[],
    name_mapping={
        "anumber": "anumber",
        "astring": "astring",
        "first_optional": "firstOptional",
    },
)
class MyFirstStruct:
    def __init__(
        self,
        *,
        anumber: jsii.Number,
        astring: str,
        first_optional: typing.Optional[typing.List[str]] = None,
    ) -> None:
        """This is the first struct we have created in jsii.

        :param anumber: An awesome number value.
        :param astring: A string value.
        :param first_optional: 

        stability
        :stability: deprecated
        """
        self._values = {
            "anumber": anumber,
            "astring": astring,
        }
        if first_optional is not None:
            self._values["first_optional"] = first_optional

    @builtins.property
    def anumber(self) -> jsii.Number:
        """An awesome number value.

        stability
        :stability: deprecated
        """
        return self._values.get("anumber")

    @builtins.property
    def astring(self) -> str:
        """A string value.

        stability
        :stability: deprecated
        """
        return self._values.get("astring")

    @builtins.property
    def first_optional(self) -> typing.Optional[typing.List[str]]:
        """
        stability
        :stability: deprecated
        """
        return self._values.get("first_optional")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MyFirstStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@scope/jsii-calc-lib.StructWithOnlyOptionals",
    jsii_struct_bases=[],
    name_mapping={
        "optional1": "optional1",
        "optional2": "optional2",
        "optional3": "optional3",
    },
)
class StructWithOnlyOptionals:
    def __init__(
        self,
        *,
        optional1: typing.Optional[str] = None,
        optional2: typing.Optional[jsii.Number] = None,
        optional3: typing.Optional[bool] = None,
    ) -> None:
        """This is a struct with only optional properties.

        :param optional1: The first optional!
        :param optional2: 
        :param optional3: 

        stability
        :stability: deprecated
        """
        self._values = {}
        if optional1 is not None:
            self._values["optional1"] = optional1
        if optional2 is not None:
            self._values["optional2"] = optional2
        if optional3 is not None:
            self._values["optional3"] = optional3

    @builtins.property
    def optional1(self) -> typing.Optional[str]:
        """The first optional!

        stability
        :stability: deprecated
        """
        return self._values.get("optional1")

    @builtins.property
    def optional2(self) -> typing.Optional[jsii.Number]:
        """
        stability
        :stability: deprecated
        """
        return self._values.get("optional2")

    @builtins.property
    def optional3(self) -> typing.Optional[bool]:
        """
        stability
        :stability: deprecated
        """
        return self._values.get("optional3")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructWithOnlyOptionals(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Value(
    scope.jsii_calc_base.Base,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="@scope/jsii-calc-lib.Value",
):
    """Abstract class which represents a numeric value.

    stability
    :stability: deprecated
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _ValueProxy

    def __init__(self) -> None:
        jsii.create(Value, self, [])

    @jsii.member(jsii_name="toString")
    def to_string(self) -> str:
        """String representation of the value.

        stability
        :stability: deprecated
        """
        return jsii.invoke(self, "toString", [])

    @builtins.property
    @jsii.member(jsii_name="value")
    @abc.abstractmethod
    def value(self) -> jsii.Number:
        """The value.

        stability
        :stability: deprecated
        """
        ...


class _ValueProxy(Value, jsii.proxy_for(scope.jsii_calc_base.Base)):
    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        """The value.

        stability
        :stability: deprecated
        """
        return jsii.get(self, "value")


@jsii.implements(IDoublable)
class Number(Value, metaclass=jsii.JSIIMeta, jsii_type="@scope/jsii-calc-lib.Number"):
    """Represents a concrete number.

    stability
    :stability: deprecated
    """

    def __init__(self, value: jsii.Number) -> None:
        """Creates a Number object.

        :param value: The number.

        stability
        :stability: deprecated
        """
        jsii.create(Number, self, [value])

    @builtins.property
    @jsii.member(jsii_name="doubleValue")
    def double_value(self) -> jsii.Number:
        """The number multiplied by 2.

        stability
        :stability: deprecated
        """
        return jsii.get(self, "doubleValue")

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        """The number.

        stability
        :stability: deprecated
        """
        return jsii.get(self, "value")


class Operation(
    Value, metaclass=jsii.JSIIAbstractClass, jsii_type="@scope/jsii-calc-lib.Operation"
):
    """Represents an operation on values.

    stability
    :stability: deprecated
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _OperationProxy

    def __init__(self) -> None:
        jsii.create(Operation, self, [])

    @jsii.member(jsii_name="toString")
    @abc.abstractmethod
    def to_string(self) -> str:
        """String representation of the value.

        stability
        :stability: deprecated
        """
        ...


class _OperationProxy(Operation, jsii.proxy_for(Value)):
    @jsii.member(jsii_name="toString")
    def to_string(self) -> str:
        """String representation of the value.

        stability
        :stability: deprecated
        """
        return jsii.invoke(self, "toString", [])


__all__ = [
    "EnumFromScopedModule",
    "IDoublable",
    "IFriendly",
    "IThreeLevelsInterface",
    "MyFirstStruct",
    "Number",
    "Operation",
    "StructWithOnlyOptionals",
    "Value",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/src/scope/jsii_calc_lib/_jsii/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

import scope.jsii_calc_base._jsii
import scope.jsii_calc_base_of_base._jsii

__jsii_assembly__ = jsii.JSIIAssembly.load(
    "@scope/jsii-calc-lib", "0.0.0", __name__[0:-6], "jsii-calc-lib@0.0.0.jsii.tgz"
)

__all__ = [
    "__jsii_assembly__",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/src/scope/jsii_calc_lib/_jsii/jsii-calc-lib@0.0.0.jsii.tgz 1`] = `python/src/scope/jsii_calc_lib/_jsii/jsii-calc-lib@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/src/scope/jsii_calc_lib/custom_submodule_name/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from .._jsii import *


@jsii.interface(jsii_type="@scope/jsii-calc-lib.submodule.IReflectable")
class IReflectable(jsii.compat.Protocol):
    """
    stability
    :stability: deprecated
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IReflectableProxy

    @builtins.property
    @jsii.member(jsii_name="entries")
    def entries(self) -> typing.List["ReflectableEntry"]:
        """
        stability
        :stability: deprecated
        """
        ...


class _IReflectableProxy:
    """
    stability
    :stability: deprecated
    """

    __jsii_type__ = "@scope/jsii-calc-lib.submodule.IReflectable"

    @builtins.property
    @jsii.member(jsii_name="entries")
    def entries(self) -> typing.List["ReflectableEntry"]:
        """
        stability
        :stability: deprecated
        """
        return jsii.get(self, "entries")


class NestingClass(
    metaclass=jsii.JSIIMeta, jsii_type="@scope/jsii-calc-lib.submodule.NestingClass"
):
    """This class is here to show we can use nested classes across module boundaries.

    stability
    :stability: deprecated
    """

    class NestedClass(
        metaclass=jsii.JSIIMeta,
        jsii_type="@scope/jsii-calc-lib.submodule.NestingClass.NestedClass",
    ):
        """This class is here to show we can use nested classes across module boundaries.

        stability
        :stability: deprecated
        """

        def __init__(self) -> None:
            """
            stability
            :stability: deprecated
            """
            jsii.create(NestingClass.NestedClass, self, [])

        @builtins.property
        @jsii.member(jsii_name="property")
        def property(self) -> str:
            """
            stability
            :stability: deprecated
            """
            return jsii.get(self, "property")

    @jsii.data_type(
        jsii_type="@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct",
        jsii_struct_bases=[],
        name_mapping={"name": "name"},
    )
    class NestedStruct:
        def __init__(self, *, name: str) -> None:
            """This is a struct, nested within a class.

            Normal.

            :param name: 

            stability
            :stability: deprecated
            """
            self._values = {
                "name": name,
            }

        @builtins.property
        def name(self) -> str:
            """
            stability
            :stability: deprecated
            """
            return self._values.get("name")

        def __eq__(self, rhs) -> bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs) -> bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "NestedStruct(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )


@jsii.data_type(
    jsii_type="@scope/jsii-calc-lib.submodule.ReflectableEntry",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "value": "value"},
)
class ReflectableEntry:
    def __init__(self, *, key: str, value: typing.Any) -> None:
        """
        :param key: 
        :param value: 

        stability
        :stability: deprecated
        """
        self._values = {
            "key": key,
            "value": value,
        }

    @builtins.property
    def key(self) -> str:
        """
        stability
        :stability: deprecated
        """
        return self._values.get("key")

    @builtins.property
    def value(self) -> typing.Any:
        """
        stability
        :stability: deprecated
        """
        return self._values.get("value")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ReflectableEntry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Reflector(
    metaclass=jsii.JSIIMeta, jsii_type="@scope/jsii-calc-lib.submodule.Reflector"
):
    """
    stability
    :stability: deprecated
    """

    def __init__(self) -> None:
        """
        stability
        :stability: deprecated
        """
        jsii.create(Reflector, self, [])

    @jsii.member(jsii_name="asMap")
    def as_map(self, reflectable: "IReflectable") -> typing.Mapping[str, typing.Any]:
        """
        :param reflectable: -

        stability
        :stability: deprecated
        """
        return jsii.invoke(self, "asMap", [reflectable])


__all__ = [
    "IReflectable",
    "NestingClass",
    "ReflectableEntry",
    "Reflector",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/src/scope/jsii_calc_lib/py.typed 1`] = `


`;

exports[`Generated code for "jsii-calc": <outDir>/ 1`] = `
<root>
 ┣━ 📁 dotnet
 ┃  ┗━ 📁 Amazon.JSII.Tests.CalculatorPackageId
 ┃     ┣━ 📄 .jsii
 ┃     ┣━ 📁 Amazon
 ┃     ┃  ┗━ 📁 JSII
 ┃     ┃     ┗━ 📁 Tests
 ┃     ┃        ┗━ 📁 CalculatorNamespace
 ┃     ┃           ┣━ 📄 AbstractClass.cs
 ┃     ┃           ┣━ 📄 AbstractClassBase.cs
 ┃     ┃           ┣━ 📄 AbstractClassBaseProxy.cs
 ┃     ┃           ┣━ 📄 AbstractClassProxy.cs
 ┃     ┃           ┣━ 📄 AbstractClassReturner.cs
 ┃     ┃           ┣━ 📄 AbstractSuite.cs
 ┃     ┃           ┣━ 📄 AbstractSuiteProxy.cs
 ┃     ┃           ┣━ 📄 Add.cs
 ┃     ┃           ┣━ 📄 AllowedMethodNames.cs
 ┃     ┃           ┣━ 📄 AllTypes.cs
 ┃     ┃           ┣━ 📄 AllTypesEnum.cs
 ┃     ┃           ┣━ 📄 AmbiguousParameters.cs
 ┃     ┃           ┣━ 📄 AnonymousImplementationProvider.cs
 ┃     ┃           ┣━ 📄 AsyncVirtualMethods.cs
 ┃     ┃           ┣━ 📄 AugmentableClass.cs
 ┃     ┃           ┣━ 📄 BaseJsii976.cs
 ┃     ┃           ┣━ 📄 Bell.cs
 ┃     ┃           ┣━ 📄 BinaryOperation.cs
 ┃     ┃           ┣━ 📄 BinaryOperationProxy.cs
 ┃     ┃           ┣━ 📄 BurriedAnonymousObject.cs
 ┃     ┃           ┣━ 📄 BurriedAnonymousObjectProxy.cs
 ┃     ┃           ┣━ 📄 Calculator.cs
 ┃     ┃           ┣━ 📄 CalculatorProps.cs
 ┃     ┃           ┣━ 📄 CalculatorPropsProxy.cs
 ┃     ┃           ┣━ 📄 ChildStruct982.cs
 ┃     ┃           ┣━ 📄 ChildStruct982Proxy.cs
 ┃     ┃           ┣━ 📄 ClassThatImplementsTheInternalInterface.cs
 ┃     ┃           ┣━ 📄 ClassThatImplementsThePrivateInterface.cs
 ┃     ┃           ┣━ 📄 ClassWithCollections.cs
 ┃     ┃           ┣━ 📄 ClassWithDocs.cs
 ┃     ┃           ┣━ 📄 ClassWithJavaReservedWords.cs
 ┃     ┃           ┣━ 📄 ClassWithMutableObjectLiteralProperty.cs
 ┃     ┃           ┣━ 📄 ClassWithPrivateConstructorAndAutomaticProperties.cs
 ┃     ┃           ┣━ 📁 Composition
 ┃     ┃           ┃  ┣━ 📄 CompositeOperation.cs
 ┃     ┃           ┃  ┗━ 📄 CompositeOperationProxy.cs
 ┃     ┃           ┣━ 📄 ConfusingToJackson.cs
 ┃     ┃           ┣━ 📄 ConfusingToJacksonStruct.cs
 ┃     ┃           ┣━ 📄 ConfusingToJacksonStructProxy.cs
 ┃     ┃           ┣━ 📄 ConstructorPassesThisOut.cs
 ┃     ┃           ┣━ 📄 Constructors.cs
 ┃     ┃           ┣━ 📄 ConsumePureInterface.cs
 ┃     ┃           ┣━ 📄 ConsumerCanRingBell.cs
 ┃     ┃           ┣━ 📄 ConsumersOfThisCrazyTypeSystem.cs
 ┃     ┃           ┣━ 📄 DataRenderer.cs
 ┃     ┃           ┣━ 📄 DefaultedConstructorArgument.cs
 ┃     ┃           ┣━ 📄 Demonstrate982.cs
 ┃     ┃           ┣━ 📄 DeprecatedClass.cs
 ┃     ┃           ┣━ 📄 DeprecatedEnum.cs
 ┃     ┃           ┣━ 📄 DeprecatedStruct.cs
 ┃     ┃           ┣━ 📄 DeprecatedStructProxy.cs
 ┃     ┃           ┣━ 📁 DerivedClassHasNoProperties
 ┃     ┃           ┃  ┣━ 📄 Base.cs
 ┃     ┃           ┃  ┗━ 📄 Derived.cs
 ┃     ┃           ┣━ 📄 DerivedStruct.cs
 ┃     ┃           ┣━ 📄 DerivedStructProxy.cs
 ┃     ┃           ┣━ 📄 DiamondInheritanceBaseLevelStruct.cs
 ┃     ┃           ┣━ 📄 DiamondInheritanceBaseLevelStructProxy.cs
 ┃     ┃           ┣━ 📄 DiamondInheritanceFirstMidLevelStruct.cs
 ┃     ┃           ┣━ 📄 DiamondInheritanceFirstMidLevelStructProxy.cs
 ┃     ┃           ┣━ 📄 DiamondInheritanceSecondMidLevelStruct.cs
 ┃     ┃           ┣━ 📄 DiamondInheritanceSecondMidLevelStructProxy.cs
 ┃     ┃           ┣━ 📄 DiamondInheritanceTopLevelStruct.cs
 ┃     ┃           ┣━ 📄 DiamondInheritanceTopLevelStructProxy.cs
 ┃     ┃           ┣━ 📄 DisappointingCollectionSource.cs
 ┃     ┃           ┣━ 📄 DocumentedClass.cs
 ┃     ┃           ┣━ 📄 DoNotOverridePrivates.cs
 ┃     ┃           ┣━ 📄 DoNotRecognizeAnyAsOptional.cs
 ┃     ┃           ┣━ 📄 DontComplainAboutVariadicAfterOptional.cs
 ┃     ┃           ┣━ 📄 DoubleTrouble.cs
 ┃     ┃           ┣━ 📄 EnumDispenser.cs
 ┃     ┃           ┣━ 📄 EraseUndefinedHashValues.cs
 ┃     ┃           ┣━ 📄 EraseUndefinedHashValuesOptions.cs
 ┃     ┃           ┣━ 📄 EraseUndefinedHashValuesOptionsProxy.cs
 ┃     ┃           ┣━ 📄 ExperimentalClass.cs
 ┃     ┃           ┣━ 📄 ExperimentalEnum.cs
 ┃     ┃           ┣━ 📄 ExperimentalStruct.cs
 ┃     ┃           ┣━ 📄 ExperimentalStructProxy.cs
 ┃     ┃           ┣━ 📄 ExportedBaseClass.cs
 ┃     ┃           ┣━ 📄 ExtendsInternalInterface.cs
 ┃     ┃           ┣━ 📄 ExtendsInternalInterfaceProxy.cs
 ┃     ┃           ┣━ 📄 ExternalClass.cs
 ┃     ┃           ┣━ 📄 ExternalEnum.cs
 ┃     ┃           ┣━ 📄 ExternalStruct.cs
 ┃     ┃           ┣━ 📄 ExternalStructProxy.cs
 ┃     ┃           ┣━ 📄 GiveMeStructs.cs
 ┃     ┃           ┣━ 📄 Greetee.cs
 ┃     ┃           ┣━ 📄 GreeteeProxy.cs
 ┃     ┃           ┣━ 📄 GreetingAugmenter.cs
 ┃     ┃           ┣━ 📄 IAnonymousImplementationProvider.cs
 ┃     ┃           ┣━ 📄 IAnonymousImplementationProviderProxy.cs
 ┃     ┃           ┣━ 📄 IAnonymouslyImplementMe.cs
 ┃     ┃           ┣━ 📄 IAnonymouslyImplementMeProxy.cs
 ┃     ┃           ┣━ 📄 IAnotherPublicInterface.cs
 ┃     ┃           ┣━ 📄 IAnotherPublicInterfaceProxy.cs
 ┃     ┃           ┣━ 📄 IBell.cs
 ┃     ┃           ┣━ 📄 IBellProxy.cs
 ┃     ┃           ┣━ 📄 IBellRinger.cs
 ┃     ┃           ┣━ 📄 IBellRingerProxy.cs
 ┃     ┃           ┣━ 📄 ICalculatorProps.cs
 ┃     ┃           ┣━ 📄 IChildStruct982.cs
 ┃     ┃           ┣━ 📄 IConcreteBellRinger.cs
 ┃     ┃           ┣━ 📄 IConcreteBellRingerProxy.cs
 ┃     ┃           ┣━ 📄 IConfusingToJacksonStruct.cs
 ┃     ┃           ┣━ 📄 IDeprecatedInterface.cs
 ┃     ┃           ┣━ 📄 IDeprecatedInterfaceProxy.cs
 ┃     ┃           ┣━ 📄 IDeprecatedStruct.cs
 ┃     ┃           ┣━ 📄 IDerivedStruct.cs
 ┃     ┃           ┣━ 📄 IDiamondInheritanceBaseLevelStruct.cs
 ┃     ┃           ┣━ 📄 IDiamondInheritanceFirstMidLevelStruct.cs
 ┃     ┃           ┣━ 📄 IDiamondInheritanceSecondMidLevelStruct.cs
 ┃     ┃           ┣━ 📄 IDiamondInheritanceTopLevelStruct.cs
 ┃     ┃           ┣━ 📄 IEraseUndefinedHashValuesOptions.cs
 ┃     ┃           ┣━ 📄 IExperimentalInterface.cs
 ┃     ┃           ┣━ 📄 IExperimentalInterfaceProxy.cs
 ┃     ┃           ┣━ 📄 IExperimentalStruct.cs
 ┃     ┃           ┣━ 📄 IExtendsInternalInterface.cs
 ┃     ┃           ┣━ 📄 IExtendsPrivateInterface.cs
 ┃     ┃           ┣━ 📄 IExtendsPrivateInterfaceProxy.cs
 ┃     ┃           ┣━ 📄 IExternalInterface.cs
 ┃     ┃           ┣━ 📄 IExternalInterfaceProxy.cs
 ┃     ┃           ┣━ 📄 IExternalStruct.cs
 ┃     ┃           ┣━ 📄 IFriendlier.cs
 ┃     ┃           ┣━ 📄 IFriendlierProxy.cs
 ┃     ┃           ┣━ 📄 IFriendlyRandomGenerator.cs
 ┃     ┃           ┣━ 📄 IFriendlyRandomGeneratorProxy.cs
 ┃     ┃           ┣━ 📄 IGreetee.cs
 ┃     ┃           ┣━ 📄 IImplictBaseOfBase.cs
 ┃     ┃           ┣━ 📄 IInterfaceImplementedByAbstractClass.cs
 ┃     ┃           ┣━ 📄 IInterfaceImplementedByAbstractClassProxy.cs
 ┃     ┃           ┣━ 📄 IInterfaceThatShouldNotBeADataType.cs
 ┃     ┃           ┣━ 📄 IInterfaceThatShouldNotBeADataTypeProxy.cs
 ┃     ┃           ┣━ 📄 IInterfaceWithInternal.cs
 ┃     ┃           ┣━ 📄 IInterfaceWithInternalProxy.cs
 ┃     ┃           ┣━ 📄 IInterfaceWithMethods.cs
 ┃     ┃           ┣━ 📄 IInterfaceWithMethodsProxy.cs
 ┃     ┃           ┣━ 📄 IInterfaceWithOptionalMethodArguments.cs
 ┃     ┃           ┣━ 📄 IInterfaceWithOptionalMethodArgumentsProxy.cs
 ┃     ┃           ┣━ 📄 IInterfaceWithProperties.cs
 ┃     ┃           ┣━ 📄 IInterfaceWithPropertiesExtension.cs
 ┃     ┃           ┣━ 📄 IInterfaceWithPropertiesExtensionProxy.cs
 ┃     ┃           ┣━ 📄 IInterfaceWithPropertiesProxy.cs
 ┃     ┃           ┣━ 📄 IJSII417Derived.cs
 ┃     ┃           ┣━ 📄 IJSII417DerivedProxy.cs
 ┃     ┃           ┣━ 📄 IJSII417PublicBaseOfBase.cs
 ┃     ┃           ┣━ 📄 IJSII417PublicBaseOfBaseProxy.cs
 ┃     ┃           ┣━ 📄 IJsii487External.cs
 ┃     ┃           ┣━ 📄 IJsii487External2.cs
 ┃     ┃           ┣━ 📄 IJsii487External2Proxy.cs
 ┃     ┃           ┣━ 📄 IJsii487ExternalProxy.cs
 ┃     ┃           ┣━ 📄 IJsii496.cs
 ┃     ┃           ┣━ 📄 IJsii496Proxy.cs
 ┃     ┃           ┣━ 📄 ILoadBalancedFargateServiceProps.cs
 ┃     ┃           ┣━ 📄 Implementation.cs
 ┃     ┃           ┣━ 📄 ImplementInternalInterface.cs
 ┃     ┃           ┣━ 📄 ImplementsInterfaceWithInternal.cs
 ┃     ┃           ┣━ 📄 ImplementsInterfaceWithInternalSubclass.cs
 ┃     ┃           ┣━ 📄 ImplementsPrivateInterface.cs
 ┃     ┃           ┣━ 📄 ImplictBaseOfBase.cs
 ┃     ┃           ┣━ 📄 ImplictBaseOfBaseProxy.cs
 ┃     ┃           ┣━ 📄 IMutableObjectLiteral.cs
 ┃     ┃           ┣━ 📄 IMutableObjectLiteralProxy.cs
 ┃     ┃           ┣━ 📄 InbetweenClass.cs
 ┃     ┃           ┣━ 📄 INestedStruct.cs
 ┃     ┃           ┣━ 📄 INonInternalInterface.cs
 ┃     ┃           ┣━ 📄 INonInternalInterfaceProxy.cs
 ┃     ┃           ┣━ 📄 InterfaceCollections.cs
 ┃     ┃           ┣━ 📁 InterfaceInNamespaceIncludesClasses
 ┃     ┃           ┃  ┣━ 📄 Foo.cs
 ┃     ┃           ┃  ┣━ 📄 Hello.cs
 ┃     ┃           ┃  ┣━ 📄 HelloProxy.cs
 ┃     ┃           ┃  ┗━ 📄 IHello.cs
 ┃     ┃           ┣━ 📁 InterfaceInNamespaceOnlyInterface
 ┃     ┃           ┃  ┣━ 📄 Hello.cs
 ┃     ┃           ┃  ┣━ 📄 HelloProxy.cs
 ┃     ┃           ┃  ┗━ 📄 IHello.cs
 ┃     ┃           ┣━ 📄 InterfacesMaker.cs
 ┃     ┃           ┣━ 📁 Internal
 ┃     ┃           ┃  ┗━ 📁 DependencyResolution
 ┃     ┃           ┃     ┗━ 📄 Anchor.cs
 ┃     ┃           ┣━ 📄 INullShouldBeTreatedAsUndefinedData.cs
 ┃     ┃           ┣━ 📄 IObjectWithProperty.cs
 ┃     ┃           ┣━ 📄 IObjectWithPropertyProxy.cs
 ┃     ┃           ┣━ 📄 IOptionalMethod.cs
 ┃     ┃           ┣━ 📄 IOptionalMethodProxy.cs
 ┃     ┃           ┣━ 📄 IOptionalStruct.cs
 ┃     ┃           ┣━ 📄 IParentStruct982.cs
 ┃     ┃           ┣━ 📄 IPrivatelyImplemented.cs
 ┃     ┃           ┣━ 📄 IPrivatelyImplementedProxy.cs
 ┃     ┃           ┣━ 📄 IPublicInterface.cs
 ┃     ┃           ┣━ 📄 IPublicInterface2.cs
 ┃     ┃           ┣━ 📄 IPublicInterface2Proxy.cs
 ┃     ┃           ┣━ 📄 IPublicInterfaceProxy.cs
 ┃     ┃           ┣━ 📄 IRandomNumberGenerator.cs
 ┃     ┃           ┣━ 📄 IRandomNumberGeneratorProxy.cs
 ┃     ┃           ┣━ 📄 IReturnJsii976.cs
 ┃     ┃           ┣━ 📄 IReturnJsii976Proxy.cs
 ┃     ┃           ┣━ 📄 IReturnsNumber.cs
 ┃     ┃           ┣━ 📄 IReturnsNumberProxy.cs
 ┃     ┃           ┣━ 📄 IRootStruct.cs
 ┃     ┃           ┣━ 📄 ISecondLevelStruct.cs
 ┃     ┃           ┣━ 📄 ISmellyStruct.cs
 ┃     ┃           ┣━ 📄 Isomorphism.cs
 ┃     ┃           ┣━ 📄 IsomorphismProxy.cs
 ┃     ┃           ┣━ 📄 IStableInterface.cs
 ┃     ┃           ┣━ 📄 IStableInterfaceProxy.cs
 ┃     ┃           ┣━ 📄 IStableStruct.cs
 ┃     ┃           ┣━ 📄 IStructA.cs
 ┃     ┃           ┣━ 📄 IStructB.cs
 ┃     ┃           ┣━ 📄 IStructParameterType.cs
 ┃     ┃           ┣━ 📄 IStructReturningDelegate.cs
 ┃     ┃           ┣━ 📄 IStructReturningDelegateProxy.cs
 ┃     ┃           ┣━ 📄 IStructWithJavaReservedWords.cs
 ┃     ┃           ┣━ 📄 ISupportsNiceJavaBuilderProps.cs
 ┃     ┃           ┣━ 📄 ITopLevelStruct.cs
 ┃     ┃           ┣━ 📄 IUnionProperties.cs
 ┃     ┃           ┣━ 📄 JavaReservedWords.cs
 ┃     ┃           ┣━ 📄 JSII417Derived.cs
 ┃     ┃           ┣━ 📄 JSII417PublicBaseOfBase.cs
 ┃     ┃           ┣━ 📄 Jsii487Derived.cs
 ┃     ┃           ┣━ 📄 Jsii496Derived.cs
 ┃     ┃           ┣━ 📄 JsiiAgent_.cs
 ┃     ┃           ┣━ 📄 JSObjectLiteralForInterface.cs
 ┃     ┃           ┣━ 📄 JSObjectLiteralToNative.cs
 ┃     ┃           ┣━ 📄 JSObjectLiteralToNativeClass.cs
 ┃     ┃           ┣━ 📄 JsonFormatter.cs
 ┃     ┃           ┣━ 📄 LoadBalancedFargateServiceProps.cs
 ┃     ┃           ┣━ 📄 LoadBalancedFargateServicePropsProxy.cs
 ┃     ┃           ┣━ 📄 MethodNamedProperty.cs
 ┃     ┃           ┣━ 📄 Multiply.cs
 ┃     ┃           ┣━ 📄 NamespaceDoc.cs
 ┃     ┃           ┣━ 📄 Negate.cs
 ┃     ┃           ┣━ 📄 NestedClassInstance.cs
 ┃     ┃           ┣━ 📄 NestedStruct.cs
 ┃     ┃           ┣━ 📄 NestedStructProxy.cs
 ┃     ┃           ┣━ 📄 NodeStandardLibrary.cs
 ┃     ┃           ┣━ 📄 NullShouldBeTreatedAsUndefined.cs
 ┃     ┃           ┣━ 📄 NullShouldBeTreatedAsUndefinedData.cs
 ┃     ┃           ┣━ 📄 NullShouldBeTreatedAsUndefinedDataProxy.cs
 ┃     ┃           ┣━ 📄 NumberGenerator.cs
 ┃     ┃           ┣━ 📄 ObjectRefsInCollections.cs
 ┃     ┃           ┣━ 📄 ObjectWithPropertyProvider.cs
 ┃     ┃           ┣━ 📄 Old.cs
 ┃     ┃           ┣━ 📄 OptionalArgumentInvoker.cs
 ┃     ┃           ┣━ 📄 OptionalConstructorArgument.cs
 ┃     ┃           ┣━ 📄 OptionalStruct.cs
 ┃     ┃           ┣━ 📄 OptionalStructConsumer.cs
 ┃     ┃           ┣━ 📄 OptionalStructProxy.cs
 ┃     ┃           ┣━ 📄 OverridableProtectedMember.cs
 ┃     ┃           ┣━ 📄 OverrideReturnsObject.cs
 ┃     ┃           ┣━ 📄 ParentStruct982.cs
 ┃     ┃           ┣━ 📄 ParentStruct982Proxy.cs
 ┃     ┃           ┣━ 📄 PartiallyInitializedThisConsumer.cs
 ┃     ┃           ┣━ 📄 PartiallyInitializedThisConsumerProxy.cs
 ┃     ┃           ┣━ 📄 Polymorphism.cs
 ┃     ┃           ┣━ 📄 Power.cs
 ┃     ┃           ┣━ 📄 PropertyNamedProperty.cs
 ┃     ┃           ┣━ 📄 PublicClass.cs
 ┃     ┃           ┣━ 📄 PythonReservedWords.cs
 ┃     ┃           ┣━ 📁 PythonSelf
 ┃     ┃           ┃  ┣━ 📄 ClassWithSelf.cs
 ┃     ┃           ┃  ┣━ 📄 ClassWithSelfKwarg.cs
 ┃     ┃           ┃  ┣━ 📄 IInterfaceWithSelf.cs
 ┃     ┃           ┃  ┣━ 📄 IInterfaceWithSelfProxy.cs
 ┃     ┃           ┃  ┣━ 📄 IStructWithSelf.cs
 ┃     ┃           ┃  ┣━ 📄 StructWithSelf.cs
 ┃     ┃           ┃  ┗━ 📄 StructWithSelfProxy.cs
 ┃     ┃           ┣━ 📄 ReferenceEnumFromScopedPackage.cs
 ┃     ┃           ┣━ 📄 ReturnsPrivateImplementationOfInterface.cs
 ┃     ┃           ┣━ 📄 RootStruct.cs
 ┃     ┃           ┣━ 📄 RootStructProxy.cs
 ┃     ┃           ┣━ 📄 RootStructValidator.cs
 ┃     ┃           ┣━ 📄 RuntimeTypeChecking.cs
 ┃     ┃           ┣━ 📄 SecondLevelStruct.cs
 ┃     ┃           ┣━ 📄 SecondLevelStructProxy.cs
 ┃     ┃           ┣━ 📄 SingleInstanceTwoTypes.cs
 ┃     ┃           ┣━ 📄 SingletonInt.cs
 ┃     ┃           ┣━ 📄 SingletonIntEnum.cs
 ┃     ┃           ┣━ 📄 SingletonString.cs
 ┃     ┃           ┣━ 📄 SingletonStringEnum.cs
 ┃     ┃           ┣━ 📄 SmellyStruct.cs
 ┃     ┃           ┣━ 📄 SmellyStructProxy.cs
 ┃     ┃           ┣━ 📄 SomeTypeJsii976.cs
 ┃     ┃           ┣━ 📄 StableClass.cs
 ┃     ┃           ┣━ 📄 StableEnum.cs
 ┃     ┃           ┣━ 📄 StableStruct.cs
 ┃     ┃           ┣━ 📄 StableStructProxy.cs
 ┃     ┃           ┣━ 📄 StaticContext.cs
 ┃     ┃           ┣━ 📄 Statics.cs
 ┃     ┃           ┣━ 📄 StringEnum.cs
 ┃     ┃           ┣━ 📄 StripInternal.cs
 ┃     ┃           ┣━ 📄 StructA.cs
 ┃     ┃           ┣━ 📄 StructAProxy.cs
 ┃     ┃           ┣━ 📄 StructB.cs
 ┃     ┃           ┣━ 📄 StructBProxy.cs
 ┃     ┃           ┣━ 📄 StructParameterType.cs
 ┃     ┃           ┣━ 📄 StructParameterTypeProxy.cs
 ┃     ┃           ┣━ 📄 StructPassing.cs
 ┃     ┃           ┣━ 📄 StructUnionConsumer.cs
 ┃     ┃           ┣━ 📄 StructWithJavaReservedWords.cs
 ┃     ┃           ┣━ 📄 StructWithJavaReservedWordsProxy.cs
 ┃     ┃           ┣━ 📁 Submodule
 ┃     ┃           ┃  ┣━ 📁 BackReferences
 ┃     ┃           ┃  ┃  ┣━ 📄 IMyClassReference.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 MyClassReference.cs
 ┃     ┃           ┃  ┃  ┗━ 📄 MyClassReferenceProxy.cs
 ┃     ┃           ┃  ┣━ 📁 Child
 ┃     ┃           ┃  ┃  ┣━ 📄 Awesomeness.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 Goodness.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 IKwargsProps.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 InnerClass.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 ISomeStruct.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 IStructure.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 KwargsProps.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 KwargsPropsProxy.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 OuterClass.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 SomeEnum.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 SomeStruct.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 SomeStructProxy.cs
 ┃     ┃           ┃  ┃  ┣━ 📄 Structure.cs
 ┃     ┃           ┃  ┃  ┗━ 📄 StructureProxy.cs
 ┃     ┃           ┃  ┣━ 📁 Isolated
 ┃     ┃           ┃  ┃  ┗━ 📄 Kwargs.cs
 ┃     ┃           ┃  ┣━ 📄 MyClass.cs
 ┃     ┃           ┃  ┗━ 📁 NestedSubmodule
 ┃     ┃           ┃     ┣━ 📁 DeeplyNested
 ┃     ┃           ┃     ┃  ┣━ 📄 INamespaced.cs
 ┃     ┃           ┃     ┃  ┗━ 📄 INamespacedProxy.cs
 ┃     ┃           ┃     ┣━ 📄 Namespaced.cs
 ┃     ┃           ┃     ┗━ 📄 NamespacedProxy.cs
 ┃     ┃           ┣━ 📄 Sum.cs
 ┃     ┃           ┣━ 📄 SupportsNiceJavaBuilder.cs
 ┃     ┃           ┣━ 📄 SupportsNiceJavaBuilderProps.cs
 ┃     ┃           ┣━ 📄 SupportsNiceJavaBuilderPropsProxy.cs
 ┃     ┃           ┣━ 📄 SupportsNiceJavaBuilderWithRequiredProps.cs
 ┃     ┃           ┣━ 📄 SyncVirtualMethods.cs
 ┃     ┃           ┣━ 📄 Thrower.cs
 ┃     ┃           ┣━ 📄 TopLevelStruct.cs
 ┃     ┃           ┣━ 📄 TopLevelStructProxy.cs
 ┃     ┃           ┣━ 📄 UmaskCheck.cs
 ┃     ┃           ┣━ 📄 UnaryOperation.cs
 ┃     ┃           ┣━ 📄 UnaryOperationProxy.cs
 ┃     ┃           ┣━ 📄 UnionProperties.cs
 ┃     ┃           ┣━ 📄 UnionPropertiesProxy.cs
 ┃     ┃           ┣━ 📄 UpcasingReflectable.cs
 ┃     ┃           ┣━ 📄 UseBundledDependency.cs
 ┃     ┃           ┣━ 📄 UseCalcBase.cs
 ┃     ┃           ┣━ 📄 UsesInterfaceWithProperties.cs
 ┃     ┃           ┣━ 📄 VariadicInvoker.cs
 ┃     ┃           ┣━ 📄 VariadicMethod.cs
 ┃     ┃           ┣━ 📄 VirtualMethodPlayground.cs
 ┃     ┃           ┣━ 📄 VoidCallback.cs
 ┃     ┃           ┣━ 📄 VoidCallbackProxy.cs
 ┃     ┃           ┗━ 📄 WithPrivatePropertyInConstructor.cs
 ┃     ┣━ 📄 Amazon.JSII.Tests.CalculatorPackageId.csproj
 ┃     ┣━ 📄 AssemblyInfo.cs
 ┃     ┗━ 📄 jsii-calc-0.0.0.tgz
 ┣━ 📁 golang
 ┃  ┣━ 📁 _jsii
 ┃  ┃  ┗━ 📄 bundled-runtime.go
 ┃  ┣━ 📁 jsiicalc
 ┃  ┃  ┣━ 📄 composition.go
 ┃  ┃  ┣━ 📄 DerivedClassHasNoProperties.go
 ┃  ┃  ┣━ 📄 InterfaceInNamespaceIncludesClasses.go
 ┃  ┃  ┣━ 📄 InterfaceInNamespaceOnlyInterface.go
 ┃  ┃  ┣━ 📄 PythonSelf.go
 ┃  ┃  ┣━ 📁 submodule
 ┃  ┃  ┃  ┣━ 📄 backreferences.go
 ┃  ┃  ┃  ┣━ 📄 child.go
 ┃  ┃  ┃  ┣━ 📄 isolated.go
 ┃  ┃  ┃  ┣━ 📁 nestedsubmodule
 ┃  ┃  ┃  ┃  ┗━ 📄 deeplyNested.go
 ┃  ┃  ┃  ┗━ 📄 nestedsubmodule.go
 ┃  ┃  ┗━ 📄 submodule.go
 ┃  ┗━ 📄 jsiicalc.go
 ┣━ 📁 java
 ┃  ┣━ 📄 pom.xml
 ┃  ┗━ 📁 src
 ┃     ┗━ 📁 main
 ┃        ┣━ 📁 java
 ┃        ┃  ┗━ 📁 software
 ┃        ┃     ┗━ 📁 amazon
 ┃        ┃        ┗━ 📁 jsii
 ┃        ┃           ┗━ 📁 tests
 ┃        ┃              ┗━ 📁 calculator
 ┃        ┃                 ┣━ 📄 $Module.java
 ┃        ┃                 ┣━ 📄 AbstractClass.java
 ┃        ┃                 ┣━ 📄 AbstractClassBase.java
 ┃        ┃                 ┣━ 📄 AbstractClassReturner.java
 ┃        ┃                 ┣━ 📄 AbstractSuite.java
 ┃        ┃                 ┣━ 📄 Add.java
 ┃        ┃                 ┣━ 📄 AllowedMethodNames.java
 ┃        ┃                 ┣━ 📄 AllTypes.java
 ┃        ┃                 ┣━ 📄 AllTypesEnum.java
 ┃        ┃                 ┣━ 📄 AmbiguousParameters.java
 ┃        ┃                 ┣━ 📄 AnonymousImplementationProvider.java
 ┃        ┃                 ┣━ 📄 AsyncVirtualMethods.java
 ┃        ┃                 ┣━ 📄 AugmentableClass.java
 ┃        ┃                 ┣━ 📄 BaseJsii976.java
 ┃        ┃                 ┣━ 📄 Bell.java
 ┃        ┃                 ┣━ 📄 BinaryOperation.java
 ┃        ┃                 ┣━ 📄 BurriedAnonymousObject.java
 ┃        ┃                 ┣━ 📄 Calculator.java
 ┃        ┃                 ┣━ 📄 CalculatorProps.java
 ┃        ┃                 ┣━ 📄 ChildStruct982.java
 ┃        ┃                 ┣━ 📄 ClassThatImplementsTheInternalInterface.java
 ┃        ┃                 ┣━ 📄 ClassThatImplementsThePrivateInterface.java
 ┃        ┃                 ┣━ 📄 ClassWithCollections.java
 ┃        ┃                 ┣━ 📄 ClassWithDocs.java
 ┃        ┃                 ┣━ 📄 ClassWithJavaReservedWords.java
 ┃        ┃                 ┣━ 📄 ClassWithMutableObjectLiteralProperty.java
 ┃        ┃                 ┣━ 📄 ClassWithPrivateConstructorAndAutomaticProperties.java
 ┃        ┃                 ┣━ 📁 composition
 ┃        ┃                 ┃  ┗━ 📄 CompositeOperation.java
 ┃        ┃                 ┣━ 📄 ConfusingToJackson.java
 ┃        ┃                 ┣━ 📄 ConfusingToJacksonStruct.java
 ┃        ┃                 ┣━ 📄 ConstructorPassesThisOut.java
 ┃        ┃                 ┣━ 📄 Constructors.java
 ┃        ┃                 ┣━ 📄 ConsumePureInterface.java
 ┃        ┃                 ┣━ 📄 ConsumerCanRingBell.java
 ┃        ┃                 ┣━ 📄 ConsumersOfThisCrazyTypeSystem.java
 ┃        ┃                 ┣━ 📄 DataRenderer.java
 ┃        ┃                 ┣━ 📄 DefaultedConstructorArgument.java
 ┃        ┃                 ┣━ 📄 Demonstrate982.java
 ┃        ┃                 ┣━ 📄 DeprecatedClass.java
 ┃        ┃                 ┣━ 📄 DeprecatedEnum.java
 ┃        ┃                 ┣━ 📄 DeprecatedStruct.java
 ┃        ┃                 ┣━ 📁 derived_class_has_no_properties
 ┃        ┃                 ┃  ┣━ 📄 Base.java
 ┃        ┃                 ┃  ┗━ 📄 Derived.java
 ┃        ┃                 ┣━ 📄 DerivedStruct.java
 ┃        ┃                 ┣━ 📄 DiamondInheritanceBaseLevelStruct.java
 ┃        ┃                 ┣━ 📄 DiamondInheritanceFirstMidLevelStruct.java
 ┃        ┃                 ┣━ 📄 DiamondInheritanceSecondMidLevelStruct.java
 ┃        ┃                 ┣━ 📄 DiamondInheritanceTopLevelStruct.java
 ┃        ┃                 ┣━ 📄 DisappointingCollectionSource.java
 ┃        ┃                 ┣━ 📄 DocumentedClass.java
 ┃        ┃                 ┣━ 📄 DoNotOverridePrivates.java
 ┃        ┃                 ┣━ 📄 DoNotRecognizeAnyAsOptional.java
 ┃        ┃                 ┣━ 📄 DontComplainAboutVariadicAfterOptional.java
 ┃        ┃                 ┣━ 📄 DoubleTrouble.java
 ┃        ┃                 ┣━ 📄 EnumDispenser.java
 ┃        ┃                 ┣━ 📄 EraseUndefinedHashValues.java
 ┃        ┃                 ┣━ 📄 EraseUndefinedHashValuesOptions.java
 ┃        ┃                 ┣━ 📄 ExperimentalClass.java
 ┃        ┃                 ┣━ 📄 ExperimentalEnum.java
 ┃        ┃                 ┣━ 📄 ExperimentalStruct.java
 ┃        ┃                 ┣━ 📄 ExportedBaseClass.java
 ┃        ┃                 ┣━ 📄 ExtendsInternalInterface.java
 ┃        ┃                 ┣━ 📄 ExternalClass.java
 ┃        ┃                 ┣━ 📄 ExternalEnum.java
 ┃        ┃                 ┣━ 📄 ExternalStruct.java
 ┃        ┃                 ┣━ 📄 GiveMeStructs.java
 ┃        ┃                 ┣━ 📄 Greetee.java
 ┃        ┃                 ┣━ 📄 GreetingAugmenter.java
 ┃        ┃                 ┣━ 📄 IAnonymousImplementationProvider.java
 ┃        ┃                 ┣━ 📄 IAnonymouslyImplementMe.java
 ┃        ┃                 ┣━ 📄 IAnotherPublicInterface.java
 ┃        ┃                 ┣━ 📄 IBell.java
 ┃        ┃                 ┣━ 📄 IBellRinger.java
 ┃        ┃                 ┣━ 📄 IConcreteBellRinger.java
 ┃        ┃                 ┣━ 📄 IDeprecatedInterface.java
 ┃        ┃                 ┣━ 📄 IExperimentalInterface.java
 ┃        ┃                 ┣━ 📄 IExtendsPrivateInterface.java
 ┃        ┃                 ┣━ 📄 IExternalInterface.java
 ┃        ┃                 ┣━ 📄 IFriendlier.java
 ┃        ┃                 ┣━ 📄 IFriendlyRandomGenerator.java
 ┃        ┃                 ┣━ 📄 IInterfaceImplementedByAbstractClass.java
 ┃        ┃                 ┣━ 📄 IInterfaceThatShouldNotBeADataType.java
 ┃        ┃                 ┣━ 📄 IInterfaceWithInternal.java
 ┃        ┃                 ┣━ 📄 IInterfaceWithMethods.java
 ┃        ┃                 ┣━ 📄 IInterfaceWithOptionalMethodArguments.java
 ┃        ┃                 ┣━ 📄 IInterfaceWithProperties.java
 ┃        ┃                 ┣━ 📄 IInterfaceWithPropertiesExtension.java
 ┃        ┃                 ┣━ 📄 IJSII417Derived.java
 ┃        ┃                 ┣━ 📄 IJSII417PublicBaseOfBase.java
 ┃        ┃                 ┣━ 📄 IJsii487External.java
 ┃        ┃                 ┣━ 📄 IJsii487External2.java
 ┃        ┃                 ┣━ 📄 IJsii496.java
 ┃        ┃                 ┣━ 📄 Implementation.java
 ┃        ┃                 ┣━ 📄 ImplementInternalInterface.java
 ┃        ┃                 ┣━ 📄 ImplementsInterfaceWithInternal.java
 ┃        ┃                 ┣━ 📄 ImplementsInterfaceWithInternalSubclass.java
 ┃        ┃                 ┣━ 📄 ImplementsPrivateInterface.java
 ┃        ┃                 ┣━ 📄 ImplictBaseOfBase.java
 ┃        ┃                 ┣━ 📄 IMutableObjectLiteral.java
 ┃        ┃                 ┣━ 📄 InbetweenClass.java
 ┃        ┃                 ┣━ 📄 INonInternalInterface.java
 ┃        ┃                 ┣━ 📁 interface_in_namespace_includes_classes
 ┃        ┃                 ┃  ┣━ 📄 Foo.java
 ┃        ┃                 ┃  ┗━ 📄 Hello.java
 ┃        ┃                 ┣━ 📁 interface_in_namespace_only_interface
 ┃        ┃                 ┃  ┗━ 📄 Hello.java
 ┃        ┃                 ┣━ 📄 InterfaceCollections.java
 ┃        ┃                 ┣━ 📄 InterfacesMaker.java
 ┃        ┃                 ┣━ 📄 IObjectWithProperty.java
 ┃        ┃                 ┣━ 📄 IOptionalMethod.java
 ┃        ┃                 ┣━ 📄 IPrivatelyImplemented.java
 ┃        ┃                 ┣━ 📄 IPublicInterface.java
 ┃        ┃                 ┣━ 📄 IPublicInterface2.java
 ┃        ┃                 ┣━ 📄 IRandomNumberGenerator.java
 ┃        ┃                 ┣━ 📄 IReturnJsii976.java
 ┃        ┃                 ┣━ 📄 IReturnsNumber.java
 ┃        ┃                 ┣━ 📄 Isomorphism.java
 ┃        ┃                 ┣━ 📄 IStableInterface.java
 ┃        ┃                 ┣━ 📄 IStructReturningDelegate.java
 ┃        ┃                 ┣━ 📄 JavaReservedWords.java
 ┃        ┃                 ┣━ 📄 JSII417Derived.java
 ┃        ┃                 ┣━ 📄 JSII417PublicBaseOfBase.java
 ┃        ┃                 ┣━ 📄 Jsii487Derived.java
 ┃        ┃                 ┣━ 📄 Jsii496Derived.java
 ┃        ┃                 ┣━ 📄 JsiiAgent.java
 ┃        ┃                 ┣━ 📄 JSObjectLiteralForInterface.java
 ┃        ┃                 ┣━ 📄 JSObjectLiteralToNative.java
 ┃        ┃                 ┣━ 📄 JSObjectLiteralToNativeClass.java
 ┃        ┃                 ┣━ 📄 JsonFormatter.java
 ┃        ┃                 ┣━ 📄 LoadBalancedFargateServiceProps.java
 ┃        ┃                 ┣━ 📄 MethodNamedProperty.java
 ┃        ┃                 ┣━ 📄 Multiply.java
 ┃        ┃                 ┣━ 📄 Negate.java
 ┃        ┃                 ┣━ 📄 NestedClassInstance.java
 ┃        ┃                 ┣━ 📄 NestedStruct.java
 ┃        ┃                 ┣━ 📄 NodeStandardLibrary.java
 ┃        ┃                 ┣━ 📄 NullShouldBeTreatedAsUndefined.java
 ┃        ┃                 ┣━ 📄 NullShouldBeTreatedAsUndefinedData.java
 ┃        ┃                 ┣━ 📄 NumberGenerator.java
 ┃        ┃                 ┣━ 📄 ObjectRefsInCollections.java
 ┃        ┃                 ┣━ 📄 ObjectWithPropertyProvider.java
 ┃        ┃                 ┣━ 📄 Old.java
 ┃        ┃                 ┣━ 📄 OptionalArgumentInvoker.java
 ┃        ┃                 ┣━ 📄 OptionalConstructorArgument.java
 ┃        ┃                 ┣━ 📄 OptionalStruct.java
 ┃        ┃                 ┣━ 📄 OptionalStructConsumer.java
 ┃        ┃                 ┣━ 📄 OverridableProtectedMember.java
 ┃        ┃                 ┣━ 📄 OverrideReturnsObject.java
 ┃        ┃                 ┣━ 📄 package-info.java
 ┃        ┃                 ┣━ 📄 ParentStruct982.java
 ┃        ┃                 ┣━ 📄 PartiallyInitializedThisConsumer.java
 ┃        ┃                 ┣━ 📄 Polymorphism.java
 ┃        ┃                 ┣━ 📄 Power.java
 ┃        ┃                 ┣━ 📄 PropertyNamedProperty.java
 ┃        ┃                 ┣━ 📄 PublicClass.java
 ┃        ┃                 ┣━ 📁 python_self
 ┃        ┃                 ┃  ┣━ 📄 ClassWithSelf.java
 ┃        ┃                 ┃  ┣━ 📄 ClassWithSelfKwarg.java
 ┃        ┃                 ┃  ┣━ 📄 IInterfaceWithSelf.java
 ┃        ┃                 ┃  ┗━ 📄 StructWithSelf.java
 ┃        ┃                 ┣━ 📄 PythonReservedWords.java
 ┃        ┃                 ┣━ 📄 ReferenceEnumFromScopedPackage.java
 ┃        ┃                 ┣━ 📄 ReturnsPrivateImplementationOfInterface.java
 ┃        ┃                 ┣━ 📄 RootStruct.java
 ┃        ┃                 ┣━ 📄 RootStructValidator.java
 ┃        ┃                 ┣━ 📄 RuntimeTypeChecking.java
 ┃        ┃                 ┣━ 📄 SecondLevelStruct.java
 ┃        ┃                 ┣━ 📄 SingleInstanceTwoTypes.java
 ┃        ┃                 ┣━ 📄 SingletonInt.java
 ┃        ┃                 ┣━ 📄 SingletonIntEnum.java
 ┃        ┃                 ┣━ 📄 SingletonString.java
 ┃        ┃                 ┣━ 📄 SingletonStringEnum.java
 ┃        ┃                 ┣━ 📄 SmellyStruct.java
 ┃        ┃                 ┣━ 📄 SomeTypeJsii976.java
 ┃        ┃                 ┣━ 📄 StableClass.java
 ┃        ┃                 ┣━ 📄 StableEnum.java
 ┃        ┃                 ┣━ 📄 StableStruct.java
 ┃        ┃                 ┣━ 📄 StaticContext.java
 ┃        ┃                 ┣━ 📄 Statics.java
 ┃        ┃                 ┣━ 📄 StringEnum.java
 ┃        ┃                 ┣━ 📄 StripInternal.java
 ┃        ┃                 ┣━ 📄 StructA.java
 ┃        ┃                 ┣━ 📄 StructB.java
 ┃        ┃                 ┣━ 📄 StructParameterType.java
 ┃        ┃                 ┣━ 📄 StructPassing.java
 ┃        ┃                 ┣━ 📄 StructUnionConsumer.java
 ┃        ┃                 ┣━ 📄 StructWithJavaReservedWords.java
 ┃        ┃                 ┣━ 📁 submodule
 ┃        ┃                 ┃  ┣━ 📁 back_references
 ┃        ┃                 ┃  ┃  ┗━ 📄 MyClassReference.java
 ┃        ┃                 ┃  ┣━ 📁 child
 ┃        ┃                 ┃  ┃  ┣━ 📄 Awesomeness.java
 ┃        ┃                 ┃  ┃  ┣━ 📄 Goodness.java
 ┃        ┃                 ┃  ┃  ┣━ 📄 InnerClass.java
 ┃        ┃                 ┃  ┃  ┣━ 📄 KwargsProps.java
 ┃        ┃                 ┃  ┃  ┣━ 📄 OuterClass.java
 ┃        ┃                 ┃  ┃  ┣━ 📄 SomeEnum.java
 ┃        ┃                 ┃  ┃  ┣━ 📄 SomeStruct.java
 ┃        ┃                 ┃  ┃  ┗━ 📄 Structure.java
 ┃        ┃                 ┃  ┣━ 📁 isolated
 ┃        ┃                 ┃  ┃  ┗━ 📄 Kwargs.java
 ┃        ┃                 ┃  ┣━ 📄 MyClass.java
 ┃        ┃                 ┃  ┗━ 📁 nested_submodule
 ┃        ┃                 ┃     ┣━ 📁 deeply_nested
 ┃        ┃                 ┃     ┃  ┗━ 📄 INamespaced.java
 ┃        ┃                 ┃     ┗━ 📄 Namespaced.java
 ┃        ┃                 ┣━ 📄 Sum.java
 ┃        ┃                 ┣━ 📄 SupportsNiceJavaBuilder.java
 ┃        ┃                 ┣━ 📄 SupportsNiceJavaBuilderProps.java
 ┃        ┃                 ┣━ 📄 SupportsNiceJavaBuilderWithRequiredProps.java
 ┃        ┃                 ┣━ 📄 SyncVirtualMethods.java
 ┃        ┃                 ┣━ 📄 Thrower.java
 ┃        ┃                 ┣━ 📄 TopLevelStruct.java
 ┃        ┃                 ┣━ 📄 UmaskCheck.java
 ┃        ┃                 ┣━ 📄 UnaryOperation.java
 ┃        ┃                 ┣━ 📄 UnionProperties.java
 ┃        ┃                 ┣━ 📄 UpcasingReflectable.java
 ┃        ┃                 ┣━ 📄 UseBundledDependency.java
 ┃        ┃                 ┣━ 📄 UseCalcBase.java
 ┃        ┃                 ┣━ 📄 UsesInterfaceWithProperties.java
 ┃        ┃                 ┣━ 📄 VariadicInvoker.java
 ┃        ┃                 ┣━ 📄 VariadicMethod.java
 ┃        ┃                 ┣━ 📄 VirtualMethodPlayground.java
 ┃        ┃                 ┣━ 📄 VoidCallback.java
 ┃        ┃                 ┗━ 📄 WithPrivatePropertyInConstructor.java
 ┃        ┗━ 📁 resources
 ┃           ┗━ 📁 software
 ┃              ┗━ 📁 amazon
 ┃                 ┗━ 📁 jsii
 ┃                    ┗━ 📁 tests
 ┃                       ┗━ 📁 calculator
 ┃                          ┣━ 📄 $Module.txt
 ┃                          ┗━ 📄 jsii-calc@0.0.0.jsii.tgz
 ┣━ 📁 js
 ┃  ┗━ 📄 jsii-calc@0.0.0.jsii.tgz
 ┗━ 📁 python
    ┣━ 📄 MANIFEST.in
    ┣━ 📄 pyproject.toml
    ┣━ 📄 README.md
    ┣━ 📄 setup.py
    ┗━ 📁 src
       ┗━ 📁 jsii_calc
          ┣━ 📄 __init__.py
          ┣━ 📁 _jsii
          ┃  ┣━ 📄 __init__.py
          ┃  ┗━ 📄 jsii-calc@0.0.0.jsii.tgz
          ┣━ 📁 composition
          ┃  ┗━ 📄 __init__.py
          ┣━ 📁 derived_class_has_no_properties
          ┃  ┗━ 📄 __init__.py
          ┣━ 📁 interface_in_namespace_includes_classes
          ┃  ┗━ 📄 __init__.py
          ┣━ 📁 interface_in_namespace_only_interface
          ┃  ┗━ 📄 __init__.py
          ┣━ 📄 py.typed
          ┣━ 📁 python_self
          ┃  ┗━ 📄 __init__.py
          ┗━ 📁 submodule
             ┣━ 📄 __init__.py
             ┣━ 📁 back_references
             ┃  ┗━ 📄 __init__.py
             ┣━ 📁 child
             ┃  ┗━ 📄 __init__.py
             ┣━ 📁 isolated
             ┃  ┗━ 📄 __init__.py
             ┗━ 📁 nested_submodule
                ┣━ 📄 __init__.py
                ┗━ 📁 deeply_nested
                   ┗━ 📄 __init__.py
`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/.jsii 1`] = `
{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "bundled": {
    "@fixtures/jsii-calc-bundled": "^0.19.0"
  },
  "contributors": [
    {
      "name": "Elad Ben-Israel",
      "roles": [
        "maintainer"
      ],
      "url": "https://github.com/eladb"
    },
    {
      "name": "Rico Huijbers",
      "roles": [
        "maintainer"
      ],
      "url": "https://github.com/rix0rrr"
    },
    {
      "name": "Romain Marcadier-Muller",
      "roles": [
        "maintainer"
      ],
      "url": "https://github.com/RomainMuller"
    }
  ],
  "dependencies": {
    "@scope/jsii-calc-base": "^0.0.0",
    "@scope/jsii-calc-base-of-base": "^0.0.0",
    "@scope/jsii-calc-lib": "^0.0.0"
  },
  "dependencyClosure": {
    "@scope/jsii-calc-base": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace",
          "packageId": "Amazon.JSII.Tests.CalculatorPackageId.BasePackageId"
        },
        "go": {},
        "java": {
          "maven": {
            "artifactId": "calculator-base",
            "groupId": "software.amazon.jsii.tests"
          },
          "package": "software.amazon.jsii.tests.calculator.base"
        },
        "js": {
          "npm": "@scope/jsii-calc-base"
        },
        "python": {
          "distName": "scope.jsii-calc-base",
          "module": "scope.jsii_calc_base"
        }
      }
    },
    "@scope/jsii-calc-base-of-base": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace",
          "packageId": "Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId"
        },
        "go": {},
        "java": {
          "maven": {
            "artifactId": "calculator-base-of-base",
            "groupId": "software.amazon.jsii.tests"
          },
          "package": "software.amazon.jsii.tests.calculator.baseofbase"
        },
        "js": {
          "npm": "@scope/jsii-calc-base-of-base"
        },
        "python": {
          "distName": "scope.jsii-calc-base-of-base",
          "module": "scope.jsii_calc_base_of_base"
        }
      }
    },
    "@scope/jsii-calc-lib": {
      "submodules": {
        "@scope/jsii-calc-lib.submodule": {
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 112
          },
          "targets": {
            "dotnet": {
              "namespace": "Amazon.JSII.Tests.CustomSubmoduleName"
            },
            "java": {
              "package": "software.amazon.jsii.tests.calculator.custom_submodule_name"
            },
            "python": {
              "module": "scope.jsii_calc_lib.custom_submodule_name"
            }
          }
        }
      },
      "targets": {
        "dotnet": {
          "namespace": "Amazon.JSII.Tests.CalculatorNamespace.LibNamespace",
          "packageId": "Amazon.JSII.Tests.CalculatorPackageId.LibPackageId",
          "versionSuffix": "-devpreview"
        },
        "go": {},
        "java": {
          "maven": {
            "artifactId": "calculator-lib",
            "groupId": "software.amazon.jsii.tests",
            "versionSuffix": ".DEVPREVIEW"
          },
          "package": "software.amazon.jsii.tests.calculator.lib"
        },
        "js": {
          "npm": "@scope/jsii-calc-lib"
        },
        "python": {
          "distName": "scope.jsii-calc-lib",
          "module": "scope.jsii_calc_lib"
        }
      }
    }
  },
  "description": "A simple calcuator built on JSII.",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/jsii",
  "jsiiVersion": "0.0.0",
  "keywords": [
    "aws",
    "jsii",
    "test"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii:boolean": true,
    "jsii:number": 1337,
    "jsii:object": {
      "string": "yes!"
    }
  },
  "name": "jsii-calc",
  "readme": {
    "markdown": "# jsii Calculator\\n\\nThis library is used to demonstrate and test the features of JSII\\n\\n## How to use running sum API:\\n\\nFirst, create a calculator:\\n\\n\`\`\`ts\\nconst calculator = new calc.Calculator();\\n\`\`\`\\n\\nThen call some operations:\\n\\n\\n\`\`\`ts fixture=with-calculator\\ncalculator.add(10);\\n\`\`\`\\n\\n## Code Samples\\n\\n\`\`\`ts\\n/* This is totes a magic comment in here, just you wait! */\\nconst foo = 'bar';\\n\`\`\`\\n"
  },
  "repository": {
    "directory": "packages/jsii-calc",
    "type": "git",
    "url": "https://github.com/aws/jsii.git"
  },
  "schema": "jsii/0.10.0",
  "submodules": {
    "@scope/jsii-calc-lib.submodule": {
      "locationInModule": {
        "filename": "../@scope/jsii-calc-lib/build/index.d.ts",
        "line": 94
      }
    },
    "jsii-calc.DerivedClassHasNoProperties": {
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 325
      }
    },
    "jsii-calc.InterfaceInNamespaceIncludesClasses": {
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1206
      }
    },
    "jsii-calc.InterfaceInNamespaceOnlyInterface": {
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1199
      }
    },
    "jsii-calc.PythonSelf": {
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1090
      }
    },
    "jsii-calc.composition": {
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 134
      }
    },
    "jsii-calc.submodule": {
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 9
      }
    },
    "jsii-calc.submodule.back_references": {
      "locationInModule": {
        "filename": "lib/submodule/index.ts",
        "line": 5
      }
    },
    "jsii-calc.submodule.child": {
      "locationInModule": {
        "filename": "lib/submodule/index.ts",
        "line": 1
      }
    },
    "jsii-calc.submodule.isolated": {
      "locationInModule": {
        "filename": "lib/submodule/index.ts",
        "line": 2
      }
    },
    "jsii-calc.submodule.nested_submodule": {
      "locationInModule": {
        "filename": "lib/submodule/nested_submodule.ts",
        "line": 4
      }
    },
    "jsii-calc.submodule.nested_submodule.deeplyNested": {
      "locationInModule": {
        "filename": "lib/submodule/nested_submodule.ts",
        "line": 6
      }
    }
  },
  "targets": {
    "dotnet": {
      "iconUrl": "https://sdk-for-net.amazonwebservices.com/images/AWSLogo128x128.png",
      "namespace": "Amazon.JSII.Tests.CalculatorNamespace",
      "packageId": "Amazon.JSII.Tests.CalculatorPackageId"
    },
    "go": {},
    "java": {
      "maven": {
        "artifactId": "calculator",
        "groupId": "software.amazon.jsii.tests"
      },
      "package": "software.amazon.jsii.tests.calculator"
    },
    "js": {
      "npm": "jsii-calc"
    },
    "python": {
      "classifiers": [
        "Test :: Classifier :: Is Dummy"
      ],
      "distName": "jsii-calc",
      "module": "jsii_calc"
    }
  },
  "types": {
    "jsii-calc.AbstractClass": {
      "abstract": true,
      "assembly": "jsii-calc",
      "base": "jsii-calc.AbstractClassBase",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.AbstractClass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "jsii-calc.IInterfaceImplementedByAbstractClass"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1250
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1256
          },
          "name": "abstractMethod",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1252
          },
          "name": "nonAbstractMethod",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "AbstractClass",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1258
          },
          "name": "propFromInterface",
          "overrides": "jsii-calc.IInterfaceImplementedByAbstractClass",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.AbstractClassBase": {
      "abstract": true,
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.AbstractClassBase",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1246
      },
      "name": "AbstractClassBase",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1247
          },
          "name": "abstractProperty",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.AbstractClassReturner": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.AbstractClassReturner",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1273
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1274
          },
          "name": "giveMeAbstract",
          "returns": {
            "type": {
              "fqn": "jsii-calc.AbstractClass"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1278
          },
          "name": "giveMeInterface",
          "returns": {
            "type": {
              "fqn": "jsii-calc.IInterfaceImplementedByAbstractClass"
            }
          }
        }
      ],
      "name": "AbstractClassReturner",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1282
          },
          "name": "returnAbstractFromProperty",
          "type": {
            "fqn": "jsii-calc.AbstractClassBase"
          }
        }
      ]
    },
    "jsii-calc.AbstractSuite": {
      "abstract": true,
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Ensures abstract members implementations correctly register overrides in various languages."
      },
      "fqn": "jsii-calc.AbstractSuite",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 411
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 413
          },
          "name": "someMethod",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Sets \`seed\` to \`this.property\`, then calls \`someMethod\` with \`this.property\` and returns the result."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 419
          },
          "name": "workItAll",
          "parameters": [
            {
              "docs": {
                "summary": "a \`string\`."
              },
              "name": "seed",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "AbstractSuite",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 412
          },
          "name": "property",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.Add": {
      "assembly": "jsii-calc",
      "base": "jsii-calc.BinaryOperation",
      "docs": {
        "stability": "experimental",
        "summary": "The \\"+\\" binary operation."
      },
      "fqn": "jsii-calc.Add",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Creates a BinaryOperation."
        },
        "locationInModule": {
          "filename": "lib/calculator.ts",
          "line": 49
        },
        "parameters": [
          {
            "docs": {
              "summary": "Left-hand side operand."
            },
            "name": "lhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "summary": "Right-hand side operand."
            },
            "name": "rhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 61
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "String representation of the value."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 66
          },
          "name": "toString",
          "overrides": "@scope/jsii-calc-lib.Operation",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Add",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 62
          },
          "name": "value",
          "overrides": "@scope/jsii-calc-lib.Value",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.AllTypes": {
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "The setters will validate\\nthat the value set is of the expected type and throw otherwise.",
        "stability": "experimental",
        "summary": "This class includes property for all types supported by jsii."
      },
      "fqn": "jsii-calc.AllTypes",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 63
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 232
          },
          "name": "anyIn",
          "parameters": [
            {
              "name": "inp",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 224
          },
          "name": "anyOut",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 220
          },
          "name": "enumMethod",
          "parameters": [
            {
              "name": "value",
              "type": {
                "fqn": "jsii-calc.StringEnum"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "jsii-calc.StringEnum"
            }
          }
        }
      ],
      "name": "AllTypes",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 216
          },
          "name": "enumPropertyValue",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 180
          },
          "name": "anyArrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 181
          },
          "name": "anyMapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 179
          },
          "name": "anyProperty",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 165
          },
          "name": "arrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 68
          },
          "name": "booleanProperty",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 114
          },
          "name": "dateProperty",
          "type": {
            "primitive": "date"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 200
          },
          "name": "enumProperty",
          "type": {
            "fqn": "jsii-calc.AllTypesEnum"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 133
          },
          "name": "jsonProperty",
          "type": {
            "primitive": "json"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 150
          },
          "name": "mapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.Number"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 99
          },
          "name": "numberProperty",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 83
          },
          "name": "stringProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 192
          },
          "name": "unionArrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "number"
                    },
                    {
                      "fqn": "@scope/jsii-calc-lib.Value"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 193
          },
          "name": "unionMapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "primitive": "number"
                    },
                    {
                      "fqn": "@scope/jsii-calc-lib.Number"
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 191
          },
          "name": "unionProperty",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                },
                {
                  "fqn": "jsii-calc.Multiply"
                },
                {
                  "fqn": "@scope/jsii-calc-lib.Number"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 186
          },
          "name": "unknownArrayProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 187
          },
          "name": "unknownMapProperty",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 185
          },
          "name": "unknownProperty",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 197
          },
          "name": "optionalEnumValue",
          "optional": true,
          "type": {
            "fqn": "jsii-calc.StringEnum"
          }
        }
      ]
    },
    "jsii-calc.AllTypesEnum": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.AllTypesEnum",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 33
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "MY_ENUM_VALUE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "YOUR_ENUM_VALUE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "THIS_IS_GREAT"
        }
      ],
      "name": "AllTypesEnum"
    },
    "jsii-calc.AllowedMethodNames": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.AllowedMethodNames",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 615
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 623
          },
          "name": "getBar",
          "parameters": [
            {
              "name": "_p1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_p2",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 619
          },
          "name": "getFoo",
          "parameters": [
            {
              "name": "withParam",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 634
          },
          "name": "setBar",
          "parameters": [
            {
              "name": "_x",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_y",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "_z",
              "type": {
                "primitive": "boolean"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 630
          },
          "name": "setFoo",
          "parameters": [
            {
              "name": "_x",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_y",
              "type": {
                "primitive": "number"
              }
            }
          ]
        }
      ],
      "name": "AllowedMethodNames"
    },
    "jsii-calc.AmbiguousParameters": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.AmbiguousParameters",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 2683
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "jsii-calc.Bell"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "jsii-calc.StructParameterType"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2682
      },
      "name": "AmbiguousParameters",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2685
          },
          "name": "props",
          "type": {
            "fqn": "jsii-calc.StructParameterType"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2684
          },
          "name": "scope",
          "type": {
            "fqn": "jsii-calc.Bell"
          }
        }
      ]
    },
    "jsii-calc.AnonymousImplementationProvider": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.AnonymousImplementationProvider",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "jsii-calc.IAnonymousImplementationProvider"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2212
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2216
          },
          "name": "provideAsClass",
          "overrides": "jsii-calc.IAnonymousImplementationProvider",
          "returns": {
            "type": {
              "fqn": "jsii-calc.Implementation"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2220
          },
          "name": "provideAsInterface",
          "overrides": "jsii-calc.IAnonymousImplementationProvider",
          "returns": {
            "type": {
              "fqn": "jsii-calc.IAnonymouslyImplementMe"
            }
          }
        }
      ],
      "name": "AnonymousImplementationProvider"
    },
    "jsii-calc.AsyncVirtualMethods": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.AsyncVirtualMethods",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 333
      },
      "methods": [
        {
          "async": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 334
          },
          "name": "callMe",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Just calls \\"overrideMeToo\\"."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 353
          },
          "name": "callMe2",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "remarks": "This is a \\"double promise\\" situation, which\\nmeans that callbacks are not going to be available immediate, but only\\nafter an \\"immediates\\" cycle.",
            "stability": "experimental",
            "summary": "This method calls the \\"callMe\\" async method indirectly, which will then invoke a virtual method."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 363
          },
          "name": "callMeDoublePromise",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 371
          },
          "name": "dontOverrideMe",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 342
          },
          "name": "overrideMe",
          "parameters": [
            {
              "name": "mult",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 346
          },
          "name": "overrideMeToo",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "AsyncVirtualMethods"
    },
    "jsii-calc.AugmentableClass": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.AugmentableClass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1539
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1540
          },
          "name": "methodOne"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1546
          },
          "name": "methodTwo"
        }
      ],
      "name": "AugmentableClass"
    },
    "jsii-calc.BaseJsii976": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.BaseJsii976",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2477
      },
      "name": "BaseJsii976"
    },
    "jsii-calc.Bell": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.Bell",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "jsii-calc.IBell"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2421
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2424
          },
          "name": "ring",
          "overrides": "jsii-calc.IBell"
        }
      ],
      "name": "Bell",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2422
          },
          "name": "rung",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.BinaryOperation": {
      "abstract": true,
      "assembly": "jsii-calc",
      "base": "@scope/jsii-calc-lib.Operation",
      "docs": {
        "stability": "experimental",
        "summary": "Represents an operation with two operands."
      },
      "fqn": "jsii-calc.BinaryOperation",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Creates a BinaryOperation."
        },
        "locationInModule": {
          "filename": "lib/calculator.ts",
          "line": 49
        },
        "parameters": [
          {
            "docs": {
              "summary": "Left-hand side operand."
            },
            "name": "lhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "summary": "Right-hand side operand."
            },
            "name": "rhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "interfaces": [
        "@scope/jsii-calc-lib.IFriendly"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 43
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Say hello!"
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 53
          },
          "name": "hello",
          "overrides": "@scope/jsii-calc-lib.IFriendly",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "BinaryOperation",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Left-hand side operand."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 49
          },
          "name": "lhs",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Right-hand side operand."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 49
          },
          "name": "rhs",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        }
      ]
    },
    "jsii-calc.BurriedAnonymousObject": {
      "abstract": true,
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "See https://github.com/aws/aws-cdk/issues/7977."
      },
      "fqn": "jsii-calc.BurriedAnonymousObject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2767
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2768
          },
          "name": "check",
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "returns": "\`value\`",
            "stability": "experimental",
            "summary": "Implement this method and have it return it's parameter."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2785
          },
          "name": "giveItBack",
          "parameters": [
            {
              "docs": {
                "summary": "the value that should be returned."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "BurriedAnonymousObject"
    },
    "jsii-calc.Calculator": {
      "assembly": "jsii-calc",
      "base": "jsii-calc.composition.CompositeOperation",
      "docs": {
        "example": "const calculator = new calc.Calculator();\\ncalculator.add(5);\\ncalculator.mul(3);\\nconsole.log(calculator.expression.value);",
        "remarks": "Here's how you use it:\\n\\n\`\`\`ts\\nconst calculator = new calc.Calculator();\\ncalculator.add(5);\\ncalculator.mul(3);\\nconsole.log(calculator.expression.value);\\n\`\`\`\\n\\nI will repeat this example again, but in an @example tag.",
        "stability": "experimental",
        "summary": "A calculator which maintains a current value and allows adding operations."
      },
      "fqn": "jsii-calc.Calculator",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Creates a Calculator object."
        },
        "locationInModule": {
          "filename": "lib/calculator.ts",
          "line": 287
        },
        "parameters": [
          {
            "docs": {
              "summary": "Initialization properties."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "jsii-calc.CalculatorProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 282
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a number to the current value."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 320
          },
          "name": "add",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Multiplies the current value by a number."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 327
          },
          "name": "mul",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Negates the current value."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 341
          },
          "name": "neg"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Raises the current value by a power."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 334
          },
          "name": "pow",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns teh value of the union property (if defined)."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 360
          },
          "name": "readUnionValue",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "Calculator",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 348
          },
          "name": "expression",
          "overrides": "jsii-calc.composition.CompositeOperation",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A log of all operations."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 310
          },
          "name": "operationsLog",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.Value"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A map of per operation name of all operations performed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 305
          },
          "name": "operationsMap",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "fqn": "@scope/jsii-calc-lib.Value"
                  },
                  "kind": "array"
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The current value."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 300
          },
          "name": "curr",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The maximum value allows in this calculator."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 315
          },
          "name": "maxValue",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Example of a property that accepts a union of types."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 355
          },
          "name": "unionProperty",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "jsii-calc.Add"
                },
                {
                  "fqn": "jsii-calc.Multiply"
                },
                {
                  "fqn": "jsii-calc.Power"
                }
              ]
            }
          }
        }
      ]
    },
    "jsii-calc.CalculatorProps": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for Calculator."
      },
      "fqn": "jsii-calc.CalculatorProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 243
      },
      "name": "CalculatorProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "0",
            "remarks": "NOTE: Any number works here, it's fine.",
            "stability": "experimental",
            "summary": "The initial value of the calculator."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 251
          },
          "name": "initialValue",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "experimental",
            "summary": "The maximum value the calculator can store."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 258
          },
          "name": "maximumValue",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.ChildStruct982": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ChildStruct982",
      "interfaces": [
        "jsii-calc.ParentStruct982"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2501
      },
      "name": "ChildStruct982",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2502
          },
          "name": "bar",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.ClassThatImplementsTheInternalInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ClassThatImplementsTheInternalInterface",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "jsii-calc.INonInternalInterface"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1802
      },
      "name": "ClassThatImplementsTheInternalInterface",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1806
          },
          "name": "a",
          "overrides": "jsii-calc.IAnotherPublicInterface",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1807
          },
          "name": "b",
          "overrides": "jsii-calc.INonInternalInterface",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1808
          },
          "name": "c",
          "overrides": "jsii-calc.INonInternalInterface",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1809
          },
          "name": "d",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.ClassThatImplementsThePrivateInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ClassThatImplementsThePrivateInterface",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "jsii-calc.INonInternalInterface"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1812
      },
      "name": "ClassThatImplementsThePrivateInterface",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1814
          },
          "name": "a",
          "overrides": "jsii-calc.IAnotherPublicInterface",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1815
          },
          "name": "b",
          "overrides": "jsii-calc.INonInternalInterface",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1816
          },
          "name": "c",
          "overrides": "jsii-calc.INonInternalInterface",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1817
          },
          "name": "e",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.ClassWithCollections": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ClassWithCollections",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 2118
        },
        "parameters": [
          {
            "name": "map",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          },
          {
            "name": "array",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2108
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2123
          },
          "name": "createAList",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2127
          },
          "name": "createAMap",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        }
      ],
      "name": "ClassWithCollections",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2116
          },
          "name": "staticArray",
          "static": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2112
          },
          "name": "staticMap",
          "static": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2110
          },
          "name": "array",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2109
          },
          "name": "map",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "jsii-calc.ClassWithDocs": {
      "assembly": "jsii-calc",
      "docs": {
        "custom": {
          "customAttribute": "hasAValue"
        },
        "example": "function anExample() {\\n}",
        "remarks": "The docs are great. They're a bunch of tags.",
        "see": "https://aws.amazon.com/",
        "stability": "stable",
        "summary": "This class has docs."
      },
      "fqn": "jsii-calc.ClassWithDocs",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1885
      },
      "name": "ClassWithDocs"
    },
    "jsii-calc.ClassWithJavaReservedWords": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ClassWithJavaReservedWords",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 2058
        },
        "parameters": [
          {
            "name": "int",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2055
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2062
          },
          "name": "import",
          "parameters": [
            {
              "name": "assert",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ClassWithJavaReservedWords",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2056
          },
          "name": "int",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.ClassWithMutableObjectLiteralProperty": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ClassWithMutableObjectLiteralProperty",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1293
      },
      "name": "ClassWithMutableObjectLiteralProperty",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1294
          },
          "name": "mutableObject",
          "type": {
            "fqn": "jsii-calc.IMutableObjectLiteral"
          }
        }
      ]
    },
    "jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Class that implements interface properties automatically, but using a private constructor."
      },
      "fqn": "jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties",
      "interfaces": [
        "jsii-calc.IInterfaceWithProperties"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1320
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1322
          },
          "name": "create",
          "parameters": [
            {
              "name": "readOnlyString",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "readWriteString",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties"
            }
          },
          "static": true
        }
      ],
      "name": "ClassWithPrivateConstructorAndAutomaticProperties",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1330
          },
          "name": "readOnlyString",
          "overrides": "jsii-calc.IInterfaceWithProperties",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1331
          },
          "name": "readWriteString",
          "overrides": "jsii-calc.IInterfaceWithProperties",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.ConfusingToJackson": {
      "assembly": "jsii-calc",
      "docs": {
        "see": "https://github.com/aws/aws-cdk/issues/4080",
        "stability": "experimental",
        "summary": "This tries to confuse Jackson by having overloaded property setters."
      },
      "fqn": "jsii-calc.ConfusingToJackson",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2640
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2641
          },
          "name": "makeInstance",
          "returns": {
            "type": {
              "fqn": "jsii-calc.ConfusingToJackson"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2645
          },
          "name": "makeStructInstance",
          "returns": {
            "type": {
              "fqn": "jsii-calc.ConfusingToJacksonStruct"
            }
          },
          "static": true
        }
      ],
      "name": "ConfusingToJackson",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2649
          },
          "name": "unionProperty",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@scope/jsii-calc-lib.IFriendly"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@scope/jsii-calc-lib.IFriendly"
                          },
                          {
                            "fqn": "jsii-calc.AbstractClass"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "jsii-calc.ConfusingToJacksonStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ConfusingToJacksonStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2653
      },
      "name": "ConfusingToJacksonStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2654
          },
          "name": "unionProperty",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@scope/jsii-calc-lib.IFriendly"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@scope/jsii-calc-lib.IFriendly"
                          },
                          {
                            "fqn": "jsii-calc.AbstractClass"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "jsii-calc.ConstructorPassesThisOut": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ConstructorPassesThisOut",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 1842
        },
        "parameters": [
          {
            "name": "consumer",
            "type": {
              "fqn": "jsii-calc.PartiallyInitializedThisConsumer"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1841
      },
      "name": "ConstructorPassesThisOut"
    },
    "jsii-calc.Constructors": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.Constructors",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1587
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1604
          },
          "name": "hiddenInterface",
          "returns": {
            "type": {
              "fqn": "jsii-calc.IPublicInterface"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1608
          },
          "name": "hiddenInterfaces",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "jsii-calc.IPublicInterface"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1612
          },
          "name": "hiddenSubInterfaces",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "jsii-calc.IPublicInterface"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1588
          },
          "name": "makeClass",
          "returns": {
            "type": {
              "fqn": "jsii-calc.PublicClass"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1592
          },
          "name": "makeInterface",
          "returns": {
            "type": {
              "fqn": "jsii-calc.IPublicInterface"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1596
          },
          "name": "makeInterface2",
          "returns": {
            "type": {
              "fqn": "jsii-calc.IPublicInterface2"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1600
          },
          "name": "makeInterfaces",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "jsii-calc.IPublicInterface"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        }
      ],
      "name": "Constructors"
    },
    "jsii-calc.ConsumePureInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ConsumePureInterface",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 2664
        },
        "parameters": [
          {
            "name": "delegate",
            "type": {
              "fqn": "jsii-calc.IStructReturningDelegate"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2663
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2666
          },
          "name": "workItBaby",
          "returns": {
            "type": {
              "fqn": "jsii-calc.StructB"
            }
          }
        }
      ],
      "name": "ConsumePureInterface"
    },
    "jsii-calc.ConsumerCanRingBell": {
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "Check that if a JSII consumer implements IConsumerWithInterfaceParam, they can call\\nthe method on the argument that they're passed...",
        "stability": "experimental",
        "summary": "Test calling back to consumers that implement interfaces."
      },
      "fqn": "jsii-calc.ConsumerCanRingBell",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2306
      },
      "methods": [
        {
          "docs": {
            "remarks": "Returns whether the bell was rung.",
            "stability": "experimental",
            "summary": "...if the interface is implemented using an object literal."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2312
          },
          "name": "staticImplementedByObjectLiteral",
          "parameters": [
            {
              "name": "ringer",
              "type": {
                "fqn": "jsii-calc.IBellRinger"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Return whether the bell was rung.",
            "stability": "experimental",
            "summary": "...if the interface is implemented using a private class."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2338
          },
          "name": "staticImplementedByPrivateClass",
          "parameters": [
            {
              "name": "ringer",
              "type": {
                "fqn": "jsii-calc.IBellRinger"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Return whether the bell was rung.",
            "stability": "experimental",
            "summary": "...if the interface is implemented using a public class."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2327
          },
          "name": "staticImplementedByPublicClass",
          "parameters": [
            {
              "name": "ringer",
              "type": {
                "fqn": "jsii-calc.IBellRinger"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Return whether the bell was rung.",
            "stability": "experimental",
            "summary": "If the parameter is a concrete class instead of an interface."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2349
          },
          "name": "staticWhenTypedAsClass",
          "parameters": [
            {
              "name": "ringer",
              "type": {
                "fqn": "jsii-calc.IConcreteBellRinger"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Returns whether the bell was rung.",
            "stability": "experimental",
            "summary": "...if the interface is implemented using an object literal."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2359
          },
          "name": "implementedByObjectLiteral",
          "parameters": [
            {
              "name": "ringer",
              "type": {
                "fqn": "jsii-calc.IBellRinger"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "remarks": "Return whether the bell was rung.",
            "stability": "experimental",
            "summary": "...if the interface is implemented using a private class."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2385
          },
          "name": "implementedByPrivateClass",
          "parameters": [
            {
              "name": "ringer",
              "type": {
                "fqn": "jsii-calc.IBellRinger"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "remarks": "Return whether the bell was rung.",
            "stability": "experimental",
            "summary": "...if the interface is implemented using a public class."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2374
          },
          "name": "implementedByPublicClass",
          "parameters": [
            {
              "name": "ringer",
              "type": {
                "fqn": "jsii-calc.IBellRinger"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "remarks": "Return whether the bell was rung.",
            "stability": "experimental",
            "summary": "If the parameter is a concrete class instead of an interface."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2396
          },
          "name": "whenTypedAsClass",
          "parameters": [
            {
              "name": "ringer",
              "type": {
                "fqn": "jsii-calc.IConcreteBellRinger"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        }
      ],
      "name": "ConsumerCanRingBell"
    },
    "jsii-calc.ConsumersOfThisCrazyTypeSystem": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ConsumersOfThisCrazyTypeSystem",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1820
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1821
          },
          "name": "consumeAnotherPublicInterface",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "fqn": "jsii-calc.IAnotherPublicInterface"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1825
          },
          "name": "consumeNonInternalInterface",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "fqn": "jsii-calc.INonInternalInterface"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "ConsumersOfThisCrazyTypeSystem"
    },
    "jsii-calc.DataRenderer": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Verifies proper type handling through dynamic overrides."
      },
      "fqn": "jsii-calc.DataRenderer",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1981
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1982
          },
          "name": "render",
          "parameters": [
            {
              "name": "data",
              "optional": true,
              "type": {
                "fqn": "@scope/jsii-calc-lib.MyFirstStruct"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1988
          },
          "name": "renderArbitrary",
          "parameters": [
            {
              "name": "data",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1992
          },
          "name": "renderMap",
          "parameters": [
            {
              "name": "map",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "DataRenderer"
    },
    "jsii-calc.DefaultedConstructorArgument": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.DefaultedConstructorArgument",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 318
        },
        "parameters": [
          {
            "name": "arg1",
            "optional": true,
            "type": {
              "primitive": "number"
            }
          },
          {
            "name": "arg2",
            "optional": true,
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "arg3",
            "optional": true,
            "type": {
              "primitive": "date"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 317
      },
      "name": "DefaultedConstructorArgument",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 319
          },
          "name": "arg1",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 321
          },
          "name": "arg3",
          "type": {
            "primitive": "date"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 320
          },
          "name": "arg2",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.Demonstrate982": {
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "call #takeThis() -> An ObjectRef will be provisioned for the value (it'll be re-used!)\\n2. call #takeThisToo() -> The ObjectRef from before will need to be down-cased to the ParentStruct982 type",
        "stability": "experimental",
        "summary": "1."
      },
      "fqn": "jsii-calc.Demonstrate982",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2508
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "It's dangerous to go alone!"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2515
          },
          "name": "takeThis",
          "returns": {
            "type": {
              "fqn": "jsii-calc.ChildStruct982"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "It's dangerous to go alone!"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2520
          },
          "name": "takeThisToo",
          "returns": {
            "type": {
              "fqn": "jsii-calc.ParentStruct982"
            }
          },
          "static": true
        }
      ],
      "name": "Demonstrate982"
    },
    "jsii-calc.DeprecatedClass": {
      "assembly": "jsii-calc",
      "docs": {
        "deprecated": "a pretty boring class",
        "stability": "deprecated"
      },
      "fqn": "jsii-calc.DeprecatedClass",
      "initializer": {
        "docs": {
          "deprecated": "this constructor is \\"just\\" okay",
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/stability.ts",
          "line": 95
        },
        "parameters": [
          {
            "name": "readonlyString",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "mutableNumber",
            "optional": true,
            "type": {
              "primitive": "number"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 89
      },
      "methods": [
        {
          "docs": {
            "deprecated": "it was a bad idea",
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 100
          },
          "name": "method"
        }
      ],
      "name": "DeprecatedClass",
      "properties": [
        {
          "docs": {
            "deprecated": "this is not always \\"wazoo\\", be ready to be disappointed",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 91
          },
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "deprecated": "shouldn't have been mutable",
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 93
          },
          "name": "mutableProperty",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.DeprecatedEnum": {
      "assembly": "jsii-calc",
      "docs": {
        "deprecated": "your deprecated selection of bad options",
        "stability": "deprecated"
      },
      "fqn": "jsii-calc.DeprecatedEnum",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 105
      },
      "members": [
        {
          "docs": {
            "deprecated": "option A is not great",
            "stability": "deprecated"
          },
          "name": "OPTION_A"
        },
        {
          "docs": {
            "deprecated": "option B is kinda bad, too",
            "stability": "deprecated"
          },
          "name": "OPTION_B"
        }
      ],
      "name": "DeprecatedEnum"
    },
    "jsii-calc.DeprecatedStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "deprecated": "it just wraps a string",
        "stability": "deprecated"
      },
      "fqn": "jsii-calc.DeprecatedStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 77
      },
      "name": "DeprecatedStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "deprecated": "well, yeah",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 79
          },
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.DerivedClassHasNoProperties.Base": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.DerivedClassHasNoProperties.Base",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 326
      },
      "name": "Base",
      "namespace": "DerivedClassHasNoProperties",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 327
          },
          "name": "prop",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.DerivedClassHasNoProperties.Derived": {
      "assembly": "jsii-calc",
      "base": "jsii-calc.DerivedClassHasNoProperties.Base",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.DerivedClassHasNoProperties.Derived",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 330
      },
      "name": "Derived",
      "namespace": "DerivedClassHasNoProperties"
    },
    "jsii-calc.DerivedStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "A struct which derives from another struct."
      },
      "fqn": "jsii-calc.DerivedStruct",
      "interfaces": [
        "@scope/jsii-calc-lib.MyFirstStruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 541
      },
      "name": "DerivedStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 547
          },
          "name": "anotherRequired",
          "type": {
            "primitive": "date"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 546
          },
          "name": "bool",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "An example of a non primitive property."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 545
          },
          "name": "nonPrimitive",
          "type": {
            "fqn": "jsii-calc.DoubleTrouble"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "This is optional."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 553
          },
          "name": "anotherOptional",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.Value"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 549
          },
          "name": "optionalAny",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 548
          },
          "name": "optionalArray",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "jsii-calc.DiamondInheritanceBaseLevelStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.DiamondInheritanceBaseLevelStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2026
      },
      "name": "DiamondInheritanceBaseLevelStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2027
          },
          "name": "baseLevelProperty",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.DiamondInheritanceFirstMidLevelStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.DiamondInheritanceFirstMidLevelStruct",
      "interfaces": [
        "jsii-calc.DiamondInheritanceBaseLevelStruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2030
      },
      "name": "DiamondInheritanceFirstMidLevelStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2032
          },
          "name": "firstMidLevelProperty",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.DiamondInheritanceSecondMidLevelStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.DiamondInheritanceSecondMidLevelStruct",
      "interfaces": [
        "jsii-calc.DiamondInheritanceBaseLevelStruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2035
      },
      "name": "DiamondInheritanceSecondMidLevelStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2037
          },
          "name": "secondMidLevelProperty",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.DiamondInheritanceTopLevelStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.DiamondInheritanceTopLevelStruct",
      "interfaces": [
        "jsii-calc.DiamondInheritanceFirstMidLevelStruct",
        "jsii-calc.DiamondInheritanceSecondMidLevelStruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2040
      },
      "name": "DiamondInheritanceTopLevelStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2043
          },
          "name": "topLevelProperty",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.DisappointingCollectionSource": {
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "This source of collections is disappointing - it'll always give you nothing :(",
        "stability": "experimental",
        "summary": "Verifies that null/undefined can be returned for optional collections."
      },
      "fqn": "jsii-calc.DisappointingCollectionSource",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2530
      },
      "name": "DisappointingCollectionSource",
      "properties": [
        {
          "const": true,
          "docs": {
            "remarks": "(Nah, just a billion dollars mistake!)",
            "stability": "experimental",
            "summary": "Some List of strings, maybe?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2532
          },
          "name": "maybeList",
          "optional": true,
          "static": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "(Nah, just a billion dollars mistake!)",
            "stability": "experimental",
            "summary": "Some Map of strings to numbers, maybe?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2534
          },
          "name": "maybeMap",
          "optional": true,
          "static": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "jsii-calc.DoNotOverridePrivates": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.DoNotOverridePrivates",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1297
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1312
          },
          "name": "changePrivatePropertyValue",
          "parameters": [
            {
              "name": "newValue",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1304
          },
          "name": "privateMethodValue",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1308
          },
          "name": "privatePropertyValue",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "DoNotOverridePrivates"
    },
    "jsii-calc.DoNotRecognizeAnyAsOptional": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "jsii#284: do not recognize \\"any\\" as an optional argument."
      },
      "fqn": "jsii-calc.DoNotRecognizeAnyAsOptional",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1353
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1354
          },
          "name": "method",
          "parameters": [
            {
              "name": "_requiredAny",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "_optionalAny",
              "optional": true,
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "_optionalString",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "DoNotRecognizeAnyAsOptional"
    },
    "jsii-calc.DocumentedClass": {
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "This is the meat of the TSDoc comment. It may contain\\nmultiple lines and multiple paragraphs.\\n\\nMultiple paragraphs are separated by an empty line.",
        "stability": "stable",
        "summary": "Here's the first line of the TSDoc comment."
      },
      "fqn": "jsii-calc.DocumentedClass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/documented.ts",
        "line": 11
      },
      "methods": [
        {
          "docs": {
            "remarks": "This will print out a friendly greeting intended for\\nthe indicated person.",
            "returns": "A number that everyone knows very well",
            "stability": "stable",
            "summary": "Greet the indicated person."
          },
          "locationInModule": {
            "filename": "lib/documented.ts",
            "line": 21
          },
          "name": "greet",
          "parameters": [
            {
              "docs": {
                "summary": "The person to be greeted."
              },
              "name": "greetee",
              "optional": true,
              "type": {
                "fqn": "jsii-calc.Greetee"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Say ¡Hola!"
          },
          "locationInModule": {
            "filename": "lib/documented.ts",
            "line": 31
          },
          "name": "hola"
        }
      ],
      "name": "DocumentedClass"
    },
    "jsii-calc.DontComplainAboutVariadicAfterOptional": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.DontComplainAboutVariadicAfterOptional",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1430
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1431
          },
          "name": "optionalAndVariadic",
          "parameters": [
            {
              "name": "optional",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "things",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "variadic": true
        }
      ],
      "name": "DontComplainAboutVariadicAfterOptional"
    },
    "jsii-calc.DoubleTrouble": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.DoubleTrouble",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "jsii-calc.IFriendlyRandomGenerator"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 485
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Say hello!"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 490
          },
          "name": "hello",
          "overrides": "@scope/jsii-calc-lib.IFriendly",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns another random number."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 486
          },
          "name": "next",
          "overrides": "jsii-calc.IRandomNumberGenerator",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "DoubleTrouble"
    },
    "jsii-calc.EnumDispenser": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.EnumDispenser",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 45
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 51
          },
          "name": "randomIntegerLikeEnum",
          "returns": {
            "type": {
              "fqn": "jsii-calc.AllTypesEnum"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 46
          },
          "name": "randomStringLikeEnum",
          "returns": {
            "type": {
              "fqn": "jsii-calc.StringEnum"
            }
          },
          "static": true
        }
      ],
      "name": "EnumDispenser"
    },
    "jsii-calc.EraseUndefinedHashValues": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.EraseUndefinedHashValues",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1643
      },
      "methods": [
        {
          "docs": {
            "remarks": "Used to check that undefined/null hash values\\nare being erased when sending values from native code to JS.",
            "stability": "experimental",
            "summary": "Returns \`true\` if \`key\` is defined in \`opts\`."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1648
          },
          "name": "doesKeyExist",
          "parameters": [
            {
              "name": "opts",
              "type": {
                "fqn": "jsii-calc.EraseUndefinedHashValuesOptions"
              }
            },
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "We expect \\"prop1\\" to be erased."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1668
          },
          "name": "prop1IsNull",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "We expect \\"prop2\\" to be erased."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1658
          },
          "name": "prop2IsUndefined",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        }
      ],
      "name": "EraseUndefinedHashValues"
    },
    "jsii-calc.EraseUndefinedHashValuesOptions": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.EraseUndefinedHashValuesOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1638
      },
      "name": "EraseUndefinedHashValuesOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1639
          },
          "name": "option1",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1640
          },
          "name": "option2",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.ExperimentalClass": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ExperimentalClass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/stability.ts",
          "line": 22
        },
        "parameters": [
          {
            "name": "readonlyString",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "mutableNumber",
            "optional": true,
            "type": {
              "primitive": "number"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 16
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 28
          },
          "name": "method"
        }
      ],
      "name": "ExperimentalClass",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 18
          },
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 20
          },
          "name": "mutableProperty",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.ExperimentalEnum": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ExperimentalEnum",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 33
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "OPTION_A"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "OPTION_B"
        }
      ],
      "name": "ExperimentalEnum"
    },
    "jsii-calc.ExperimentalStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ExperimentalStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 4
      },
      "name": "ExperimentalStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 6
          },
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.ExportedBaseClass": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ExportedBaseClass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 1516
        },
        "parameters": [
          {
            "name": "success",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1515
      },
      "name": "ExportedBaseClass",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1516
          },
          "name": "success",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.ExtendsInternalInterface": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ExtendsInternalInterface",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1757
      },
      "name": "ExtendsInternalInterface",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1758
          },
          "name": "boom",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1698
          },
          "name": "prop",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.ExternalClass": {
      "assembly": "jsii-calc",
      "docs": {
        "custom": {
          "external": "true"
        },
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ExternalClass",
      "initializer": {
        "docs": {
          "custom": {
            "external": "true"
          },
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/stability.ts",
          "line": 131
        },
        "parameters": [
          {
            "name": "readonlyString",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "mutableNumber",
            "optional": true,
            "type": {
              "primitive": "number"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 125
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "external": "true"
            },
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 136
          },
          "name": "method"
        }
      ],
      "name": "ExternalClass",
      "properties": [
        {
          "docs": {
            "custom": {
              "external": "true"
            },
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 127
          },
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "external": "true"
            },
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 129
          },
          "name": "mutableProperty",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.ExternalEnum": {
      "assembly": "jsii-calc",
      "docs": {
        "custom": {
          "external": "true"
        },
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ExternalEnum",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 141
      },
      "members": [
        {
          "docs": {
            "custom": {
              "external": "true"
            },
            "stability": "experimental"
          },
          "name": "OPTION_A"
        },
        {
          "docs": {
            "custom": {
              "external": "true"
            },
            "stability": "experimental"
          },
          "name": "OPTION_B"
        }
      ],
      "name": "ExternalEnum"
    },
    "jsii-calc.ExternalStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "custom": {
          "external": "true"
        },
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ExternalStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 113
      },
      "name": "ExternalStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "external": "true"
            },
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 115
          },
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.GiveMeStructs": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.GiveMeStructs",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 556
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 574
          },
          "name": "derivedToFirst",
          "parameters": [
            {
              "name": "derived",
              "type": {
                "fqn": "jsii-calc.DerivedStruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@scope/jsii-calc-lib.MyFirstStruct"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the boolean from a DerivedStruct struct."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 567
          },
          "name": "readDerivedNonPrimitive",
          "parameters": [
            {
              "name": "derived",
              "type": {
                "fqn": "jsii-calc.DerivedStruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "jsii-calc.DoubleTrouble"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the \\"anumber\\" from a MyFirstStruct struct;"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 560
          },
          "name": "readFirstNumber",
          "parameters": [
            {
              "name": "first",
              "type": {
                "fqn": "@scope/jsii-calc-lib.MyFirstStruct"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "GiveMeStructs",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 578
          },
          "name": "structLiteral",
          "type": {
            "fqn": "@scope/jsii-calc-lib.StructWithOnlyOptionals"
          }
        }
      ]
    },
    "jsii-calc.Greetee": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "These are some arguments you can pass to a method."
      },
      "fqn": "jsii-calc.Greetee",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/documented.ts",
        "line": 39
      },
      "name": "Greetee",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "world",
            "stability": "experimental",
            "summary": "The name of the greetee."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/documented.ts",
            "line": 45
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.GreetingAugmenter": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.GreetingAugmenter",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 532
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 533
          },
          "name": "betterGreeting",
          "parameters": [
            {
              "name": "friendly",
              "type": {
                "fqn": "@scope/jsii-calc-lib.IFriendly"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "GreetingAugmenter"
    },
    "jsii-calc.IAnonymousImplementationProvider": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "We can return an anonymous interface implementation from an override without losing the interface declarations."
      },
      "fqn": "jsii-calc.IAnonymousImplementationProvider",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2208
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2210
          },
          "name": "provideAsClass",
          "returns": {
            "type": {
              "fqn": "jsii-calc.Implementation"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2209
          },
          "name": "provideAsInterface",
          "returns": {
            "type": {
              "fqn": "jsii-calc.IAnonymouslyImplementMe"
            }
          }
        }
      ],
      "name": "IAnonymousImplementationProvider"
    },
    "jsii-calc.IAnonymouslyImplementMe": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IAnonymouslyImplementMe",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2227
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2229
          },
          "name": "verb",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IAnonymouslyImplementMe",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2228
          },
          "name": "value",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.IAnotherPublicInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IAnotherPublicInterface",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1778
      },
      "name": "IAnotherPublicInterface",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1779
          },
          "name": "a",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.IBell": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IBell",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2417
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2418
          },
          "name": "ring"
        }
      ],
      "name": "IBell"
    },
    "jsii-calc.IBellRinger": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Takes the object parameter as an interface."
      },
      "fqn": "jsii-calc.IBellRinger",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2406
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2407
          },
          "name": "yourTurn",
          "parameters": [
            {
              "name": "bell",
              "type": {
                "fqn": "jsii-calc.IBell"
              }
            }
          ]
        }
      ],
      "name": "IBellRinger"
    },
    "jsii-calc.IConcreteBellRinger": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Takes the object parameter as a calss."
      },
      "fqn": "jsii-calc.IConcreteBellRinger",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2413
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2414
          },
          "name": "yourTurn",
          "parameters": [
            {
              "name": "bell",
              "type": {
                "fqn": "jsii-calc.Bell"
              }
            }
          ]
        }
      ],
      "name": "IConcreteBellRinger"
    },
    "jsii-calc.IDeprecatedInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "deprecated": "useless interface",
        "stability": "deprecated"
      },
      "fqn": "jsii-calc.IDeprecatedInterface",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 82
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "deprecated": "services no purpose",
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 86
          },
          "name": "method"
        }
      ],
      "name": "IDeprecatedInterface",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "deprecated": "could be better",
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 84
          },
          "name": "mutableProperty",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.IExperimentalInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IExperimentalInterface",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 9
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 13
          },
          "name": "method"
        }
      ],
      "name": "IExperimentalInterface",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 11
          },
          "name": "mutableProperty",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.IExtendsPrivateInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IExtendsPrivateInterface",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1769
      },
      "name": "IExtendsPrivateInterface",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1770
          },
          "name": "moreThings",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1754
          },
          "name": "private",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.IExternalInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "custom": {
          "external": "true"
        },
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IExternalInterface",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 118
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "external": "true"
            },
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 122
          },
          "name": "method"
        }
      ],
      "name": "IExternalInterface",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "external": "true"
            },
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 120
          },
          "name": "mutableProperty",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.IFriendlier": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Even friendlier classes can implement this interface."
      },
      "fqn": "jsii-calc.IFriendlier",
      "interfaces": [
        "@scope/jsii-calc-lib.IFriendly"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 12
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Say farewell."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 22
          },
          "name": "farewell",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "returns": "A goodbye blessing.",
            "stability": "experimental",
            "summary": "Say goodbye."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 17
          },
          "name": "goodbye",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IFriendlier"
    },
    "jsii-calc.IFriendlyRandomGenerator": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IFriendlyRandomGenerator",
      "interfaces": [
        "jsii-calc.IRandomNumberGenerator",
        "@scope/jsii-calc-lib.IFriendly"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 36
      },
      "name": "IFriendlyRandomGenerator"
    },
    "jsii-calc.IInterfaceImplementedByAbstractClass": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "awslabs/jsii#220 Abstract return type."
      },
      "fqn": "jsii-calc.IInterfaceImplementedByAbstractClass",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1242
      },
      "name": "IInterfaceImplementedByAbstractClass",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1243
          },
          "name": "propFromInterface",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.IInterfaceThatShouldNotBeADataType": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype."
      },
      "fqn": "jsii-calc.IInterfaceThatShouldNotBeADataType",
      "interfaces": [
        "jsii-calc.IInterfaceWithMethods"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1345
      },
      "name": "IInterfaceThatShouldNotBeADataType",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1347
          },
          "name": "otherValue",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.IInterfaceWithInternal": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IInterfaceWithInternal",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1709
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1710
          },
          "name": "visible"
        }
      ],
      "name": "IInterfaceWithInternal"
    },
    "jsii-calc.IInterfaceWithMethods": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IInterfaceWithMethods",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1335
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1338
          },
          "name": "doThings"
        }
      ],
      "name": "IInterfaceWithMethods",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1336
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.IInterfaceWithOptionalMethodArguments": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods."
      },
      "fqn": "jsii-calc.IInterfaceWithOptionalMethodArguments",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1220
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1221
          },
          "name": "hello",
          "parameters": [
            {
              "name": "arg1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg2",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ]
        }
      ],
      "name": "IInterfaceWithOptionalMethodArguments"
    },
    "jsii-calc.IInterfaceWithProperties": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IInterfaceWithProperties",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 586
      },
      "name": "IInterfaceWithProperties",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 587
          },
          "name": "readOnlyString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 588
          },
          "name": "readWriteString",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.IInterfaceWithPropertiesExtension": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IInterfaceWithPropertiesExtension",
      "interfaces": [
        "jsii-calc.IInterfaceWithProperties"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 591
      },
      "name": "IInterfaceWithPropertiesExtension",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 593
          },
          "name": "foo",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.IJSII417Derived": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IJSII417Derived",
      "interfaces": [
        "jsii-calc.IJSII417PublicBaseOfBase"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/erasures.ts",
        "line": 43
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/erasures.ts",
            "line": 41
          },
          "name": "bar"
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/erasures.ts",
            "line": 44
          },
          "name": "baz"
        }
      ],
      "name": "IJSII417Derived",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/erasures.ts",
            "line": 40
          },
          "name": "property",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.IJSII417PublicBaseOfBase": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IJSII417PublicBaseOfBase",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/erasures.ts",
        "line": 36
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/erasures.ts",
            "line": 37
          },
          "name": "foo"
        }
      ],
      "name": "IJSII417PublicBaseOfBase",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/erasures.ts",
            "line": 34
          },
          "name": "hasRoot",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.IJsii487External": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IJsii487External",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/erasures.ts",
        "line": 52
      },
      "name": "IJsii487External"
    },
    "jsii-calc.IJsii487External2": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IJsii487External2",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/erasures.ts",
        "line": 54
      },
      "name": "IJsii487External2"
    },
    "jsii-calc.IJsii496": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IJsii496",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/erasures.ts",
        "line": 64
      },
      "name": "IJsii496"
    },
    "jsii-calc.IMutableObjectLiteral": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IMutableObjectLiteral",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1289
      },
      "name": "IMutableObjectLiteral",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1290
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.INonInternalInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.INonInternalInterface",
      "interfaces": [
        "jsii-calc.IAnotherPublicInterface"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1787
      },
      "name": "INonInternalInterface",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1784
          },
          "name": "b",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1788
          },
          "name": "c",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.IObjectWithProperty": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Make sure that setters are properly called on objects with interfaces."
      },
      "fqn": "jsii-calc.IObjectWithProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2542
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2544
          },
          "name": "wasSet",
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        }
      ],
      "name": "IObjectWithProperty",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2543
          },
          "name": "property",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.IOptionalMethod": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Checks that optional result from interface method code generates correctly."
      },
      "fqn": "jsii-calc.IOptionalMethod",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2731
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2732
          },
          "name": "optional",
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IOptionalMethod"
    },
    "jsii-calc.IPrivatelyImplemented": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IPrivatelyImplemented",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1512
      },
      "name": "IPrivatelyImplemented",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1513
          },
          "name": "success",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.IPublicInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IPublicInterface",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1558
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1559
          },
          "name": "bye",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IPublicInterface"
    },
    "jsii-calc.IPublicInterface2": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IPublicInterface2",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1562
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1563
          },
          "name": "ciao",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IPublicInterface2"
    },
    "jsii-calc.IRandomNumberGenerator": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Generates random numbers."
      },
      "fqn": "jsii-calc.IRandomNumberGenerator",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 28
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "returns": "A random number.",
            "stability": "experimental",
            "summary": "Returns another random number."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 33
          },
          "name": "next",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "IRandomNumberGenerator"
    },
    "jsii-calc.IReturnJsii976": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Returns a subclass of a known class which implements an interface."
      },
      "fqn": "jsii-calc.IReturnJsii976",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2473
      },
      "name": "IReturnJsii976",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2474
          },
          "name": "foo",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.IReturnsNumber": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.IReturnsNumber",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 639
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 640
          },
          "name": "obtainNumber",
          "returns": {
            "type": {
              "fqn": "@scope/jsii-calc-lib.IDoublable"
            }
          }
        }
      ],
      "name": "IReturnsNumber",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 642
          },
          "name": "numberProp",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Number"
          }
        }
      ]
    },
    "jsii-calc.IStableInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "stable"
      },
      "fqn": "jsii-calc.IStableInterface",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 46
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 50
          },
          "name": "method"
        }
      ],
      "name": "IStableInterface",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 48
          },
          "name": "mutableProperty",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.IStructReturningDelegate": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Verifies that a \\"pure\\" implementation of an interface works correctly."
      },
      "fqn": "jsii-calc.IStructReturningDelegate",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2660
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2661
          },
          "name": "returnStruct",
          "returns": {
            "type": {
              "fqn": "jsii-calc.StructB"
            }
          }
        }
      ],
      "name": "IStructReturningDelegate"
    },
    "jsii-calc.ImplementInternalInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ImplementInternalInterface",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1761
      },
      "name": "ImplementInternalInterface",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1762
          },
          "name": "prop",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.Implementation": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.Implementation",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2224
      },
      "name": "Implementation",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2225
          },
          "name": "value",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.ImplementsInterfaceWithInternal": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ImplementsInterfaceWithInternal",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "jsii-calc.IInterfaceWithInternal"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1716
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1717
          },
          "name": "visible",
          "overrides": "jsii-calc.IInterfaceWithInternal"
        }
      ],
      "name": "ImplementsInterfaceWithInternal"
    },
    "jsii-calc.ImplementsInterfaceWithInternalSubclass": {
      "assembly": "jsii-calc",
      "base": "jsii-calc.ImplementsInterfaceWithInternal",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ImplementsInterfaceWithInternalSubclass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1735
      },
      "name": "ImplementsInterfaceWithInternalSubclass"
    },
    "jsii-calc.ImplementsPrivateInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ImplementsPrivateInterface",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1765
      },
      "name": "ImplementsPrivateInterface",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1766
          },
          "name": "private",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.ImplictBaseOfBase": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ImplictBaseOfBase",
      "interfaces": [
        "@scope/jsii-calc-base.BaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1176
      },
      "name": "ImplictBaseOfBase",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1177
          },
          "name": "goo",
          "type": {
            "primitive": "date"
          }
        }
      ]
    },
    "jsii-calc.InbetweenClass": {
      "assembly": "jsii-calc",
      "base": "jsii-calc.PublicClass",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.InbetweenClass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "jsii-calc.IPublicInterface2"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1565
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1566
          },
          "name": "ciao",
          "overrides": "jsii-calc.IPublicInterface2",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "InbetweenClass"
    },
    "jsii-calc.InterfaceCollections": {
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "See: https://github.com/aws/jsii/issues/1196",
        "stability": "experimental",
        "summary": "Verifies that collections of interfaces or structs are correctly handled."
      },
      "fqn": "jsii-calc.InterfaceCollections",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2694
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2705
          },
          "name": "listOfInterfaces",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "jsii-calc.IBell"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2695
          },
          "name": "listOfStructs",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "jsii-calc.StructA"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2715
          },
          "name": "mapOfInterfaces",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "jsii-calc.IBell"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2699
          },
          "name": "mapOfStructs",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "jsii-calc.StructA"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        }
      ],
      "name": "InterfaceCollections"
    },
    "jsii-calc.InterfaceInNamespaceIncludesClasses.Foo": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1207
      },
      "name": "Foo",
      "namespace": "InterfaceInNamespaceIncludesClasses",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1208
          },
          "name": "bar",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.InterfaceInNamespaceIncludesClasses.Hello": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.InterfaceInNamespaceIncludesClasses.Hello",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1211
      },
      "name": "Hello",
      "namespace": "InterfaceInNamespaceIncludesClasses",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1212
          },
          "name": "foo",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.InterfaceInNamespaceOnlyInterface.Hello": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.InterfaceInNamespaceOnlyInterface.Hello",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1201
      },
      "name": "Hello",
      "namespace": "InterfaceInNamespaceOnlyInterface",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1202
          },
          "name": "foo",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.InterfacesMaker": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "We can return arrays of interfaces See aws/aws-cdk#2362."
      },
      "fqn": "jsii-calc.InterfacesMaker",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2096
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2097
          },
          "name": "makeInterfaces",
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@scope/jsii-calc-lib.IDoublable"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        }
      ],
      "name": "InterfacesMaker"
    },
    "jsii-calc.Isomorphism": {
      "abstract": true,
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "Create a subclass of this, and assert that \`this.myself()\` actually returns\\n\`this\` from within the constructor.",
        "stability": "experimental",
        "summary": "Checks the \\"same instance\\" isomorphism is preserved within the constructor."
      },
      "fqn": "jsii-calc.Isomorphism",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2741
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2742
          },
          "name": "myself",
          "returns": {
            "type": {
              "fqn": "jsii-calc.Isomorphism"
            }
          }
        }
      ],
      "name": "Isomorphism"
    },
    "jsii-calc.JSII417Derived": {
      "assembly": "jsii-calc",
      "base": "jsii-calc.JSII417PublicBaseOfBase",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.JSII417Derived",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/erasures.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "property",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/erasures.ts",
        "line": 24
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/erasures.ts",
            "line": 25
          },
          "name": "bar"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/erasures.ts",
            "line": 28
          },
          "name": "baz"
        }
      ],
      "name": "JSII417Derived",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/erasures.ts",
            "line": 17
          },
          "name": "property",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.JSII417PublicBaseOfBase": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.JSII417PublicBaseOfBase",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/erasures.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/erasures.ts",
            "line": 9
          },
          "name": "makeInstance",
          "returns": {
            "type": {
              "fqn": "jsii-calc.JSII417PublicBaseOfBase"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/erasures.ts",
            "line": 12
          },
          "name": "foo"
        }
      ],
      "name": "JSII417PublicBaseOfBase",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/erasures.ts",
            "line": 6
          },
          "name": "hasRoot",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.JSObjectLiteralForInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.JSObjectLiteralForInterface",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 517
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 518
          },
          "name": "giveMeFriendly",
          "returns": {
            "type": {
              "fqn": "@scope/jsii-calc-lib.IFriendly"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 524
          },
          "name": "giveMeFriendlyGenerator",
          "returns": {
            "type": {
              "fqn": "jsii-calc.IFriendlyRandomGenerator"
            }
          }
        }
      ],
      "name": "JSObjectLiteralForInterface"
    },
    "jsii-calc.JSObjectLiteralToNative": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.JSObjectLiteralToNative",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 247
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 248
          },
          "name": "returnLiteral",
          "returns": {
            "type": {
              "fqn": "jsii-calc.JSObjectLiteralToNativeClass"
            }
          }
        }
      ],
      "name": "JSObjectLiteralToNative"
    },
    "jsii-calc.JSObjectLiteralToNativeClass": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.JSObjectLiteralToNativeClass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 256
      },
      "name": "JSObjectLiteralToNativeClass",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 257
          },
          "name": "propA",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 258
          },
          "name": "propB",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.JavaReservedWords": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.JavaReservedWords",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 745
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 746
          },
          "name": "abstract"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 750
          },
          "name": "assert"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 754
          },
          "name": "boolean"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 758
          },
          "name": "break"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 762
          },
          "name": "byte"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 766
          },
          "name": "case"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 770
          },
          "name": "catch"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 774
          },
          "name": "char"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 778
          },
          "name": "class"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 782
          },
          "name": "const"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 786
          },
          "name": "continue"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 790
          },
          "name": "default"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 798
          },
          "name": "do"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 794
          },
          "name": "double"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 802
          },
          "name": "else"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 806
          },
          "name": "enum"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 810
          },
          "name": "extends"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 814
          },
          "name": "false"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 818
          },
          "name": "final"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 822
          },
          "name": "finally"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 826
          },
          "name": "float"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 830
          },
          "name": "for"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 834
          },
          "name": "goto"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 838
          },
          "name": "if"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 842
          },
          "name": "implements"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 846
          },
          "name": "import"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 850
          },
          "name": "instanceof"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 854
          },
          "name": "int"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 858
          },
          "name": "interface"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 862
          },
          "name": "long"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 866
          },
          "name": "native"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 870
          },
          "name": "new"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 874
          },
          "name": "null"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 878
          },
          "name": "package"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 882
          },
          "name": "private"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 886
          },
          "name": "protected"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 890
          },
          "name": "public"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 894
          },
          "name": "return"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 898
          },
          "name": "short"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 902
          },
          "name": "static"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 906
          },
          "name": "strictfp"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 910
          },
          "name": "super"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 914
          },
          "name": "switch"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 918
          },
          "name": "synchronized"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 922
          },
          "name": "this"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 926
          },
          "name": "throw"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 930
          },
          "name": "throws"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 934
          },
          "name": "transient"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 938
          },
          "name": "true"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 942
          },
          "name": "try"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 946
          },
          "name": "void"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 950
          },
          "name": "volatile"
        }
      ],
      "name": "JavaReservedWords",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 954
          },
          "name": "while",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.Jsii487Derived": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.Jsii487Derived",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "jsii-calc.IJsii487External2",
        "jsii-calc.IJsii487External"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/erasures.ts",
        "line": 56
      },
      "name": "Jsii487Derived"
    },
    "jsii-calc.Jsii496Derived": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.Jsii496Derived",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "jsii-calc.IJsii496"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/erasures.ts",
        "line": 66
      },
      "name": "Jsii496Derived"
    },
    "jsii-calc.JsiiAgent": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Host runtime version should be set via JSII_AGENT."
      },
      "fqn": "jsii-calc.JsiiAgent",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1528
      },
      "name": "JsiiAgent",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the value of the JSII_AGENT environment variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1532
          },
          "name": "jsiiAgent",
          "optional": true,
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.JsonFormatter": {
      "assembly": "jsii-calc",
      "docs": {
        "see": "https://github.com/aws/aws-cdk/issues/5066",
        "stability": "experimental",
        "summary": "Make sure structs are un-decorated on the way in."
      },
      "fqn": "jsii-calc.JsonFormatter",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2575
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2620
          },
          "name": "anyArray",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2616
          },
          "name": "anyBooleanFalse",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2612
          },
          "name": "anyBooleanTrue",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2592
          },
          "name": "anyDate",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2608
          },
          "name": "anyEmptyString",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2588
          },
          "name": "anyFunction",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2624
          },
          "name": "anyHash",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2580
          },
          "name": "anyNull",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2596
          },
          "name": "anyNumber",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2628
          },
          "name": "anyRef",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2604
          },
          "name": "anyString",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2584
          },
          "name": "anyUndefined",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2600
          },
          "name": "anyZero",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2576
          },
          "name": "stringify",
          "parameters": [
            {
              "name": "value",
              "optional": true,
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "JsonFormatter"
    },
    "jsii-calc.LoadBalancedFargateServiceProps": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "jsii#298: show default values in sphinx documentation, and respect newlines."
      },
      "fqn": "jsii-calc.LoadBalancedFargateServiceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1439
      },
      "name": "LoadBalancedFargateServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "80",
            "remarks": "Corresponds to container port mapping.",
            "stability": "experimental",
            "summary": "The container port of the application load balancer attached to your Fargate service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1482
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "256",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:\\n256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\\n512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\\n1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\\n2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\\n4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\\n\\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "experimental",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1453
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "512",
            "remarks": "This field is required and you must use one of the following values, which determines your range of valid values\\nfor the cpu parameter:\\n\\n0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)\\n\\n1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)\\n\\n2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)\\n\\nBetween 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)\\n\\nBetween 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)\\n\\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "experimental",
            "summary": "The amount (in MiB) of memory used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1475
          },
          "name": "memoryMiB",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Determines whether the Application Load Balancer will be internet-facing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1489
          },
          "name": "publicLoadBalancer",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Determines whether your Fargate Service will be assigned a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1496
          },
          "name": "publicTasks",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.MethodNamedProperty": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.MethodNamedProperty",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 396
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 397
          },
          "name": "property",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "MethodNamedProperty",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 401
          },
          "name": "elite",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.Multiply": {
      "assembly": "jsii-calc",
      "base": "jsii-calc.BinaryOperation",
      "docs": {
        "stability": "experimental",
        "summary": "The \\"*\\" binary operation."
      },
      "fqn": "jsii-calc.Multiply",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Creates a BinaryOperation."
        },
        "locationInModule": {
          "filename": "lib/calculator.ts",
          "line": 49
        },
        "parameters": [
          {
            "docs": {
              "summary": "Left-hand side operand."
            },
            "name": "lhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "summary": "Right-hand side operand."
            },
            "name": "rhs",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "interfaces": [
        "jsii-calc.IFriendlier",
        "jsii-calc.IRandomNumberGenerator"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 74
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Say farewell."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 88
          },
          "name": "farewell",
          "overrides": "jsii-calc.IFriendlier",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Say goodbye."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 84
          },
          "name": "goodbye",
          "overrides": "jsii-calc.IFriendlier",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns another random number."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 92
          },
          "name": "next",
          "overrides": "jsii-calc.IRandomNumberGenerator",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "String representation of the value."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 80
          },
          "name": "toString",
          "overrides": "@scope/jsii-calc-lib.Operation",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Multiply",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 76
          },
          "name": "value",
          "overrides": "@scope/jsii-calc-lib.Value",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.Negate": {
      "assembly": "jsii-calc",
      "base": "jsii-calc.UnaryOperation",
      "docs": {
        "stability": "experimental",
        "summary": "The negation operation (\\"-value\\")."
      },
      "fqn": "jsii-calc.Negate",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/calculator.ts",
          "line": 101
        },
        "parameters": [
          {
            "name": "operand",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "interfaces": [
        "jsii-calc.IFriendlier"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 109
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Say farewell."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 126
          },
          "name": "farewell",
          "overrides": "jsii-calc.IFriendlier",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Say goodbye."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 122
          },
          "name": "goodbye",
          "overrides": "jsii-calc.IFriendlier",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Say hello!"
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 118
          },
          "name": "hello",
          "overrides": "@scope/jsii-calc-lib.IFriendly",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "String representation of the value."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 114
          },
          "name": "toString",
          "overrides": "@scope/jsii-calc-lib.Operation",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Negate",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 110
          },
          "name": "value",
          "overrides": "@scope/jsii-calc-lib.Value",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.NestedClassInstance": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.NestedClassInstance",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/nested-class.ts",
        "line": 3
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/nested-class.ts",
            "line": 4
          },
          "name": "makeInstance",
          "returns": {
            "type": {
              "fqn": "@scope/jsii-calc-lib.submodule.NestingClass.NestedClass"
            }
          },
          "static": true
        }
      ],
      "name": "NestedClassInstance"
    },
    "jsii-calc.NestedStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.NestedStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2449
      },
      "name": "NestedStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "When provided, must be > 0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2453
          },
          "name": "numberProp",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.NodeStandardLibrary": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Test fixture to verify that jsii modules can use the node standard library."
      },
      "fqn": "jsii-calc.NodeStandardLibrary",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1126
      },
      "methods": [
        {
          "docs": {
            "returns": "\\"6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\\"",
            "stability": "experimental",
            "summary": "Uses node.js \\"crypto\\" module to calculate sha256 of a string."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1157
          },
          "name": "cryptoSha256",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "returns": "\\"Hello, resource!\\"",
            "stability": "experimental",
            "summary": "Reads a local resource file (resource.txt) asynchronously."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1131
          },
          "name": "fsReadFile",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "returns": "\\"Hello, resource! SYNC!\\"",
            "stability": "experimental",
            "summary": "Sync version of fsReadFile."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1140
          },
          "name": "fsReadFileSync",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "NodeStandardLibrary",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the current os.platform() from the \\"os\\" node module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1149
          },
          "name": "osPlatform",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.NullShouldBeTreatedAsUndefined": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "jsii#282, aws-cdk#157: null should be treated as \\"undefined\\"."
      },
      "fqn": "jsii-calc.NullShouldBeTreatedAsUndefined",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 1369
        },
        "parameters": [
          {
            "name": "_param1",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "optional",
            "optional": true,
            "type": {
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1366
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1377
          },
          "name": "giveMeUndefined",
          "parameters": [
            {
              "name": "value",
              "optional": true,
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1387
          },
          "name": "giveMeUndefinedInsideAnObject",
          "parameters": [
            {
              "name": "input",
              "type": {
                "fqn": "jsii-calc.NullShouldBeTreatedAsUndefinedData"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1416
          },
          "name": "verifyPropertyIsUndefined"
        }
      ],
      "name": "NullShouldBeTreatedAsUndefined",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1367
          },
          "name": "changeMeToUndefined",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.NullShouldBeTreatedAsUndefinedData": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.NullShouldBeTreatedAsUndefinedData",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1425
      },
      "name": "NullShouldBeTreatedAsUndefinedData",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1427
          },
          "name": "arrayWithThreeElementsAndUndefinedAsSecondArgument",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1426
          },
          "name": "thisShouldBeUndefined",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "jsii-calc.NumberGenerator": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "This allows us to test that a reference can be stored for objects that implement interfaces."
      },
      "fqn": "jsii-calc.NumberGenerator",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 506
        },
        "parameters": [
          {
            "name": "generator",
            "type": {
              "fqn": "jsii-calc.IRandomNumberGenerator"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 505
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 512
          },
          "name": "isSameGenerator",
          "parameters": [
            {
              "name": "gen",
              "type": {
                "fqn": "jsii-calc.IRandomNumberGenerator"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 508
          },
          "name": "nextTimes100",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "NumberGenerator",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 506
          },
          "name": "generator",
          "type": {
            "fqn": "jsii-calc.IRandomNumberGenerator"
          }
        }
      ]
    },
    "jsii-calc.ObjectRefsInCollections": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Verify that object references can be passed inside collections."
      },
      "fqn": "jsii-calc.ObjectRefsInCollections",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 264
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the sum of all values."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 268
          },
          "name": "sumFromArray",
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@scope/jsii-calc-lib.Value"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the sum of all values in a map."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 279
          },
          "name": "sumFromMap",
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@scope/jsii-calc-lib.Value"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "ObjectRefsInCollections"
    },
    "jsii-calc.ObjectWithPropertyProvider": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.ObjectWithPropertyProvider",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2546
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2547
          },
          "name": "provide",
          "returns": {
            "type": {
              "fqn": "jsii-calc.IObjectWithProperty"
            }
          },
          "static": true
        }
      ],
      "name": "ObjectWithPropertyProvider"
    },
    "jsii-calc.Old": {
      "assembly": "jsii-calc",
      "docs": {
        "deprecated": "Use the new class",
        "stability": "deprecated",
        "summary": "Old class."
      },
      "fqn": "jsii-calc.Old",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/documented.ts",
        "line": 53
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Doo wop that thing."
          },
          "locationInModule": {
            "filename": "lib/documented.ts",
            "line": 57
          },
          "name": "doAThing"
        }
      ],
      "name": "Old"
    },
    "jsii-calc.OptionalArgumentInvoker": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.OptionalArgumentInvoker",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 1224
        },
        "parameters": [
          {
            "name": "delegate",
            "type": {
              "fqn": "jsii-calc.IInterfaceWithOptionalMethodArguments"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1223
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1232
          },
          "name": "invokeWithOptional"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1228
          },
          "name": "invokeWithoutOptional"
        }
      ],
      "name": "OptionalArgumentInvoker"
    },
    "jsii-calc.OptionalConstructorArgument": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.OptionalConstructorArgument",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 310
        },
        "parameters": [
          {
            "name": "arg1",
            "type": {
              "primitive": "number"
            }
          },
          {
            "name": "arg2",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "arg3",
            "optional": true,
            "type": {
              "primitive": "date"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 309
      },
      "name": "OptionalConstructorArgument",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 311
          },
          "name": "arg1",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 312
          },
          "name": "arg2",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 313
          },
          "name": "arg3",
          "optional": true,
          "type": {
            "primitive": "date"
          }
        }
      ]
    },
    "jsii-calc.OptionalStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.OptionalStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1867
      },
      "name": "OptionalStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1868
          },
          "name": "field",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.OptionalStructConsumer": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.OptionalStructConsumer",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 1862
        },
        "parameters": [
          {
            "name": "optionalStruct",
            "optional": true,
            "type": {
              "fqn": "jsii-calc.OptionalStruct"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1858
      },
      "name": "OptionalStructConsumer",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1859
          },
          "name": "parameterWasUndefined",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1860
          },
          "name": "fieldValue",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.OverridableProtectedMember": {
      "assembly": "jsii-calc",
      "docs": {
        "see": "https://github.com/aws/jsii/issues/903",
        "stability": "experimental"
      },
      "fqn": "jsii-calc.OverridableProtectedMember",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2135
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2147
          },
          "name": "overrideMe",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2143
          },
          "name": "switchModes"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2139
          },
          "name": "valueFromProtected",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "OverridableProtectedMember",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2136
          },
          "name": "overrideReadOnly",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2137
          },
          "name": "overrideReadWrite",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.OverrideReturnsObject": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.OverrideReturnsObject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 645
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 646
          },
          "name": "test",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "fqn": "jsii-calc.IReturnsNumber"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "OverrideReturnsObject"
    },
    "jsii-calc.ParentStruct982": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "https://github.com/aws/jsii/issues/982."
      },
      "fqn": "jsii-calc.ParentStruct982",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2498
      },
      "name": "ParentStruct982",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2499
          },
          "name": "foo",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.PartiallyInitializedThisConsumer": {
      "abstract": true,
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.PartiallyInitializedThisConsumer",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1833
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1834
          },
          "name": "consumePartiallyInitializedThis",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "fqn": "jsii-calc.ConstructorPassesThisOut"
              }
            },
            {
              "name": "dt",
              "type": {
                "primitive": "date"
              }
            },
            {
              "name": "ev",
              "type": {
                "fqn": "jsii-calc.AllTypesEnum"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "PartiallyInitializedThisConsumer"
    },
    "jsii-calc.Polymorphism": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.Polymorphism",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 495
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 496
          },
          "name": "sayHello",
          "parameters": [
            {
              "name": "friendly",
              "type": {
                "fqn": "@scope/jsii-calc-lib.IFriendly"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Polymorphism"
    },
    "jsii-calc.Power": {
      "assembly": "jsii-calc",
      "base": "jsii-calc.composition.CompositeOperation",
      "docs": {
        "stability": "experimental",
        "summary": "The power operation."
      },
      "fqn": "jsii-calc.Power",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Creates a Power operation."
        },
        "locationInModule": {
          "filename": "lib/calculator.ts",
          "line": 227
        },
        "parameters": [
          {
            "docs": {
              "summary": "The base of the power."
            },
            "name": "base",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          },
          {
            "docs": {
              "summary": "The number of times to multiply."
            },
            "name": "pow",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 221
      },
      "name": "Power",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The base of the power."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 227
          },
          "name": "base",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "remarks": "Must be implemented by derived classes.",
            "stability": "experimental",
            "summary": "The expression that this operation consists of."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 231
          },
          "name": "expression",
          "overrides": "jsii-calc.composition.CompositeOperation",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The number of times to multiply."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 227
          },
          "name": "pow",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        }
      ]
    },
    "jsii-calc.PropertyNamedProperty": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Reproduction for https://github.com/aws/jsii/issues/1113 Where a method or property named \\"property\\" would result in impossible to load Python code."
      },
      "fqn": "jsii-calc.PropertyNamedProperty",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 392
      },
      "name": "PropertyNamedProperty",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 393
          },
          "name": "property",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 394
          },
          "name": "yetAnoterOne",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.PublicClass": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.PublicClass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1553
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1554
          },
          "name": "hello"
        }
      ],
      "name": "PublicClass"
    },
    "jsii-calc.PythonReservedWords": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.PythonReservedWords",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 957
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 958
          },
          "name": "and"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 962
          },
          "name": "as"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 966
          },
          "name": "assert"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 970
          },
          "name": "async"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 974
          },
          "name": "await"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 978
          },
          "name": "break"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 982
          },
          "name": "class"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 986
          },
          "name": "continue"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 990
          },
          "name": "def"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 994
          },
          "name": "del"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 998
          },
          "name": "elif"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1002
          },
          "name": "else"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1006
          },
          "name": "except"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1010
          },
          "name": "finally"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1014
          },
          "name": "for"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1018
          },
          "name": "from"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1022
          },
          "name": "global"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1026
          },
          "name": "if"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1030
          },
          "name": "import"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1034
          },
          "name": "in"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1038
          },
          "name": "is"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1042
          },
          "name": "lambda"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1046
          },
          "name": "nonlocal"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1050
          },
          "name": "not"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1054
          },
          "name": "or"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1058
          },
          "name": "pass"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1062
          },
          "name": "raise"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1066
          },
          "name": "return"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1070
          },
          "name": "try"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1074
          },
          "name": "while"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1078
          },
          "name": "with"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1082
          },
          "name": "yield"
        }
      ],
      "name": "PythonReservedWords"
    },
    "jsii-calc.PythonSelf.ClassWithSelf": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.PythonSelf.ClassWithSelf",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 1092
        },
        "parameters": [
          {
            "name": "self",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1091
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1094
          },
          "name": "method",
          "parameters": [
            {
              "name": "self",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ClassWithSelf",
      "namespace": "PythonSelf",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1092
          },
          "name": "self",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.PythonSelf.ClassWithSelfKwarg": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.PythonSelf.ClassWithSelfKwarg",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 1100
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "jsii-calc.PythonSelf.StructWithSelf"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1099
      },
      "name": "ClassWithSelfKwarg",
      "namespace": "PythonSelf",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1100
          },
          "name": "props",
          "type": {
            "fqn": "jsii-calc.PythonSelf.StructWithSelf"
          }
        }
      ]
    },
    "jsii-calc.PythonSelf.IInterfaceWithSelf": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.PythonSelf.IInterfaceWithSelf",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1107
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1108
          },
          "name": "method",
          "parameters": [
            {
              "name": "self",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IInterfaceWithSelf",
      "namespace": "PythonSelf"
    },
    "jsii-calc.PythonSelf.StructWithSelf": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.PythonSelf.StructWithSelf",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1103
      },
      "name": "StructWithSelf",
      "namespace": "PythonSelf",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1104
          },
          "name": "self",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.ReferenceEnumFromScopedPackage": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "See awslabs/jsii#138."
      },
      "fqn": "jsii-calc.ReferenceEnumFromScopedPackage",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1183
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1186
          },
          "name": "loadFoo",
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@scope/jsii-calc-lib.EnumFromScopedModule"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1190
          },
          "name": "saveFoo",
          "parameters": [
            {
              "name": "value",
              "type": {
                "fqn": "@scope/jsii-calc-lib.EnumFromScopedModule"
              }
            }
          ]
        }
      ],
      "name": "ReferenceEnumFromScopedPackage",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1184
          },
          "name": "foo",
          "optional": true,
          "type": {
            "fqn": "@scope/jsii-calc-lib.EnumFromScopedModule"
          }
        }
      ]
    },
    "jsii-calc.ReturnsPrivateImplementationOfInterface": {
      "assembly": "jsii-calc",
      "docs": {
        "returns": "an instance of an un-exported class that extends \`ExportedBaseClass\`, declared as \`IPrivatelyImplemented\`.",
        "see": "https://github.com/aws/jsii/issues/320",
        "stability": "experimental",
        "summary": "Helps ensure the JSII kernel & runtime cooperate correctly when an un-exported instance of a class is returned with a declared type that is an exported interface, and the instance inherits from an exported class."
      },
      "fqn": "jsii-calc.ReturnsPrivateImplementationOfInterface",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1507
      },
      "name": "ReturnsPrivateImplementationOfInterface",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1508
          },
          "name": "privateImplementation",
          "type": {
            "fqn": "jsii-calc.IPrivatelyImplemented"
          }
        }
      ]
    },
    "jsii-calc.RootStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "remarks": "This is cheating with the (current) declared types, but this is the \\"more\\nidiomatic\\" way for Pythonists.",
        "stability": "experimental",
        "summary": "This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary."
      },
      "fqn": "jsii-calc.RootStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2442
      },
      "name": "RootStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "May not be empty."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2446
          },
          "name": "stringProp",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2447
          },
          "name": "nestedStruct",
          "optional": true,
          "type": {
            "fqn": "jsii-calc.NestedStruct"
          }
        }
      ]
    },
    "jsii-calc.RootStructValidator": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.RootStructValidator",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2455
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2456
          },
          "name": "validate",
          "parameters": [
            {
              "name": "struct",
              "type": {
                "fqn": "jsii-calc.RootStruct"
              }
            }
          ],
          "static": true
        }
      ],
      "name": "RootStructValidator"
    },
    "jsii-calc.RuntimeTypeChecking": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.RuntimeTypeChecking",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 288
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 296
          },
          "name": "methodWithDefaultedArguments",
          "parameters": [
            {
              "name": "arg1",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "arg2",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg3",
              "optional": true,
              "type": {
                "primitive": "date"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 304
          },
          "name": "methodWithOptionalAnyArgument",
          "parameters": [
            {
              "name": "arg",
              "optional": true,
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Used to verify verification of number of method arguments."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 292
          },
          "name": "methodWithOptionalArguments",
          "parameters": [
            {
              "name": "arg1",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "arg2",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg3",
              "optional": true,
              "type": {
                "primitive": "date"
              }
            }
          ]
        }
      ],
      "name": "RuntimeTypeChecking"
    },
    "jsii-calc.SecondLevelStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.SecondLevelStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2014
      },
      "name": "SecondLevelStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "It's long and required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2018
          },
          "name": "deeperRequiredProp",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "It's long, but you'll almost never pass it."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2023
          },
          "name": "deeperOptionalProp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.SingleInstanceTwoTypes": {
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "JSII clients can instantiate 2 different strongly-typed wrappers for the same\\nobject. Unfortunately, this will break object equality, but if we didn't do\\nthis it would break runtime type checks in the JVM or CLR.",
        "stability": "experimental",
        "summary": "Test that a single instance can be returned under two different FQNs."
      },
      "fqn": "jsii-calc.SingleInstanceTwoTypes",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1624
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1627
          },
          "name": "interface1",
          "returns": {
            "type": {
              "fqn": "jsii-calc.InbetweenClass"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1631
          },
          "name": "interface2",
          "returns": {
            "type": {
              "fqn": "jsii-calc.IPublicInterface"
            }
          }
        }
      ],
      "name": "SingleInstanceTwoTypes"
    },
    "jsii-calc.SingletonInt": {
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "https://github.com/aws/jsii/issues/231",
        "stability": "experimental",
        "summary": "Verifies that singleton enums are handled correctly."
      },
      "fqn": "jsii-calc.SingletonInt",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1966
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1968
          },
          "name": "isSingletonInt",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        }
      ],
      "name": "SingletonInt"
    },
    "jsii-calc.SingletonIntEnum": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "A singleton integer."
      },
      "fqn": "jsii-calc.SingletonIntEnum",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1973
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Elite!"
          },
          "name": "SINGLETON_INT"
        }
      ],
      "name": "SingletonIntEnum"
    },
    "jsii-calc.SingletonString": {
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "https://github.com/aws/jsii/issues/231",
        "stability": "experimental",
        "summary": "Verifies that singleton enums are handled correctly."
      },
      "fqn": "jsii-calc.SingletonString",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1949
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1952
          },
          "name": "isSingletonString",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        }
      ],
      "name": "SingletonString"
    },
    "jsii-calc.SingletonStringEnum": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "A singleton string."
      },
      "fqn": "jsii-calc.SingletonStringEnum",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1957
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "1337."
          },
          "name": "SINGLETON_STRING"
        }
      ],
      "name": "SingletonStringEnum"
    },
    "jsii-calc.SmellyStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.SmellyStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 403
      },
      "name": "SmellyStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 404
          },
          "name": "property",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 405
          },
          "name": "yetAnoterOne",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.SomeTypeJsii976": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.SomeTypeJsii976",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2479
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2488
          },
          "name": "returnAnonymous",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2480
          },
          "name": "returnReturn",
          "returns": {
            "type": {
              "fqn": "jsii-calc.IReturnJsii976"
            }
          },
          "static": true
        }
      ],
      "name": "SomeTypeJsii976"
    },
    "jsii-calc.StableClass": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "stable"
      },
      "fqn": "jsii-calc.StableClass",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/stability.ts",
          "line": 59
        },
        "parameters": [
          {
            "name": "readonlyString",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "mutableNumber",
            "optional": true,
            "type": {
              "primitive": "number"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 53
      },
      "methods": [
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 64
          },
          "name": "method"
        }
      ],
      "name": "StableClass",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 55
          },
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 57
          },
          "name": "mutableProperty",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "jsii-calc.StableEnum": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "stable"
      },
      "fqn": "jsii-calc.StableEnum",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 69
      },
      "members": [
        {
          "docs": {
            "stability": "stable"
          },
          "name": "OPTION_A"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "OPTION_B"
        }
      ],
      "name": "StableEnum"
    },
    "jsii-calc.StableStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "stable"
      },
      "fqn": "jsii-calc.StableStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stability.ts",
        "line": 41
      },
      "name": "StableStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stability.ts",
            "line": 43
          },
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.StaticContext": {
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "https://github.com/awslabs/aws-cdk/issues/2304",
        "stability": "experimental",
        "summary": "This is used to validate the ability to use \`this\` from within a static context."
      },
      "fqn": "jsii-calc.StaticContext",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1892
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1895
          },
          "name": "canAccessStaticContext",
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "StaticContext",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1903
          },
          "name": "staticVariable",
          "static": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.Statics": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.Statics",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 690
        },
        "parameters": [
          {
            "name": "value",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 689
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Jsdocs for static method."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 696
          },
          "name": "staticMethod",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the person to say hello to."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 700
          },
          "name": "justMethod",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Statics",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Constants may also use all-caps."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 712
          },
          "name": "BAR",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 741
          },
          "name": "ConstObj",
          "static": true,
          "type": {
            "fqn": "jsii-calc.DoubleTrouble"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Jsdocs for static property."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 707
          },
          "name": "Foo",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Constants can also use camelCase."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 717
          },
          "name": "zooBar",
          "static": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "remarks": "Jsdocs for static setter.",
            "stability": "experimental",
            "summary": "Jsdocs for static getter."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 726
          },
          "name": "instance",
          "static": true,
          "type": {
            "fqn": "jsii-calc.Statics"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 740
          },
          "name": "nonConstStatic",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 690
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.StringEnum": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.StringEnum",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 39
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "A"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "B"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "C"
        }
      ],
      "name": "StringEnum"
    },
    "jsii-calc.StripInternal": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.StripInternal",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1677
      },
      "name": "StripInternal",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1678
          },
          "name": "youSeeMe",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.StructA": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "We can serialize and deserialize structs without silently ignoring optional fields."
      },
      "fqn": "jsii-calc.StructA",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2240
      },
      "name": "StructA",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2241
          },
          "name": "requiredString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2243
          },
          "name": "optionalNumber",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2242
          },
          "name": "optionalString",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.StructB": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those."
      },
      "fqn": "jsii-calc.StructB",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2249
      },
      "name": "StructB",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2250
          },
          "name": "requiredString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2251
          },
          "name": "optionalBoolean",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2252
          },
          "name": "optionalStructA",
          "optional": true,
          "type": {
            "fqn": "jsii-calc.StructA"
          }
        }
      ]
    },
    "jsii-calc.StructParameterType": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "remarks": "See: https://github.com/aws/aws-cdk/issues/4302",
        "stability": "experimental",
        "summary": "Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted."
      },
      "fqn": "jsii-calc.StructParameterType",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2678
      },
      "name": "StructParameterType",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2679
          },
          "name": "scope",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2680
          },
          "name": "props",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.StructPassing": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "external",
        "summary": "Just because we can."
      },
      "fqn": "jsii-calc.StructPassing",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2072
      },
      "methods": [
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2084
          },
          "name": "howManyVarArgsDidIPass",
          "parameters": [
            {
              "name": "_positional",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "inputs",
              "type": {
                "fqn": "jsii-calc.TopLevelStruct"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2073
          },
          "name": "roundTrip",
          "parameters": [
            {
              "name": "_positional",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "input",
              "type": {
                "fqn": "jsii-calc.TopLevelStruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "jsii-calc.TopLevelStruct"
            }
          },
          "static": true
        }
      ],
      "name": "StructPassing"
    },
    "jsii-calc.StructUnionConsumer": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.StructUnionConsumer",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2254
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2255
          },
          "name": "isStructA",
          "parameters": [
            {
              "name": "struct",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "jsii-calc.StructA"
                    },
                    {
                      "fqn": "jsii-calc.StructB"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2276
          },
          "name": "isStructB",
          "parameters": [
            {
              "name": "struct",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "jsii-calc.StructA"
                    },
                    {
                      "fqn": "jsii-calc.StructB"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "StructUnionConsumer"
    },
    "jsii-calc.StructWithJavaReservedWords": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.StructWithJavaReservedWords",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2046
      },
      "name": "StructWithJavaReservedWords",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2047
          },
          "name": "default",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2048
          },
          "name": "assert",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2051
          },
          "name": "result",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2052
          },
          "name": "that",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.Sum": {
      "assembly": "jsii-calc",
      "base": "jsii-calc.composition.CompositeOperation",
      "docs": {
        "stability": "experimental",
        "summary": "An operation that sums multiple values."
      },
      "fqn": "jsii-calc.Sum",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/calculator.ts",
          "line": 205
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 197
      },
      "name": "Sum",
      "properties": [
        {
          "docs": {
            "remarks": "Must be implemented by derived classes.",
            "stability": "experimental",
            "summary": "The expression that this operation consists of."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 209
          },
          "name": "expression",
          "overrides": "jsii-calc.composition.CompositeOperation",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The parts to sum."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 201
          },
          "name": "parts",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.Value"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "jsii-calc.SupportsNiceJavaBuilder": {
      "assembly": "jsii-calc",
      "base": "jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.SupportsNiceJavaBuilder",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 2181
        },
        "parameters": [
          {
            "docs": {
              "summary": "some identifier."
            },
            "name": "id",
            "type": {
              "primitive": "number"
            }
          },
          {
            "docs": {
              "summary": "the default value of \`bar\`."
            },
            "name": "defaultBar",
            "optional": true,
            "type": {
              "primitive": "number"
            }
          },
          {
            "docs": {
              "summary": "some props once can provide."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "jsii-calc.SupportsNiceJavaBuilderProps"
            }
          },
          {
            "docs": {
              "summary": "a variadic continuation."
            },
            "name": "rest",
            "type": {
              "primitive": "string"
            },
            "variadic": true
          }
        ],
        "variadic": true
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2171
      },
      "name": "SupportsNiceJavaBuilder",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "some identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2182
          },
          "name": "id",
          "overrides": "jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2172
          },
          "name": "rest",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "jsii-calc.SupportsNiceJavaBuilderProps": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.SupportsNiceJavaBuilderProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2191
      },
      "name": "SupportsNiceJavaBuilderProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Some number, like 42."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2201
          },
          "name": "bar",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "But here we are, doing it like we didn't care.",
            "stability": "experimental",
            "summary": "An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2196
          },
          "name": "id",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.SupportsNiceJavaBuilderWithRequiredProps": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "We can generate fancy builders in Java for classes which take a mix of positional & struct parameters."
      },
      "fqn": "jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 2163
        },
        "parameters": [
          {
            "docs": {
              "summary": "some identifier of your choice."
            },
            "name": "id",
            "type": {
              "primitive": "number"
            }
          },
          {
            "docs": {
              "summary": "some properties."
            },
            "name": "props",
            "type": {
              "fqn": "jsii-calc.SupportsNiceJavaBuilderProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2155
      },
      "name": "SupportsNiceJavaBuilderWithRequiredProps",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2157
          },
          "name": "bar",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "some identifier of your choice."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2164
          },
          "name": "id",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2156
          },
          "name": "propId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.SyncVirtualMethods": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.SyncVirtualMethods",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 376
      },
      "methods": [
        {
          "async": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 389
          },
          "name": "callerIsAsync",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 377
          },
          "name": "callerIsMethod",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 429
          },
          "name": "modifyOtherProperty",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 401
          },
          "name": "modifyValueOfTheProperty",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 442
          },
          "name": "readA",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 433
          },
          "name": "retrieveOtherProperty",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 413
          },
          "name": "retrieveReadOnlyProperty",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 405
          },
          "name": "retrieveValueOfTheProperty",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 393
          },
          "name": "virtualMethod",
          "parameters": [
            {
              "name": "n",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 446
          },
          "name": "writeA",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ]
        }
      ],
      "name": "SyncVirtualMethods",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 411
          },
          "name": "readonlyProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 440
          },
          "name": "a",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 381
          },
          "name": "callerIsProperty",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 419
          },
          "name": "otherProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 399
          },
          "name": "theProperty",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 427
          },
          "name": "valueOfOtherProperty",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.Thrower": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.Thrower",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 651
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 652
          },
          "name": "throwError"
        }
      ],
      "name": "Thrower"
    },
    "jsii-calc.TopLevelStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.TopLevelStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1997
      },
      "name": "TopLevelStruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "This is a required field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2001
          },
          "name": "required",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A union to really stress test our serialization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2011
          },
          "name": "secondLevel",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "number"
                },
                {
                  "fqn": "jsii-calc.SecondLevelStruct"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "You don't have to pass this."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2006
          },
          "name": "optional",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.UmaskCheck": {
      "assembly": "jsii-calc",
      "docs": {
        "see": "https://github.com/aws/jsii/issues/1765",
        "stability": "experimental",
        "summary": "Checks the current file permissions are cool (no funky UMASK down-scoping happened)."
      },
      "fqn": "jsii-calc.UmaskCheck",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 2752
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "This should return 0o644 (-rw-r--r--)."
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 2756
          },
          "name": "mode",
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        }
      ],
      "name": "UmaskCheck"
    },
    "jsii-calc.UnaryOperation": {
      "abstract": true,
      "assembly": "jsii-calc",
      "base": "@scope/jsii-calc-lib.Operation",
      "docs": {
        "stability": "experimental",
        "summary": "An operation on a single operand."
      },
      "fqn": "jsii-calc.UnaryOperation",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/calculator.ts",
          "line": 101
        },
        "parameters": [
          {
            "name": "operand",
            "type": {
              "fqn": "@scope/jsii-calc-lib.Value"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 100
      },
      "name": "UnaryOperation",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 101
          },
          "name": "operand",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        }
      ]
    },
    "jsii-calc.UnionProperties": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.UnionProperties",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1112
      },
      "name": "UnionProperties",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1114
          },
          "name": "bar",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                },
                {
                  "fqn": "jsii-calc.AllTypes"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1113
          },
          "name": "foo",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                }
              ]
            }
          }
        }
      ]
    },
    "jsii-calc.UpcasingReflectable": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Ensures submodule-imported types from dependencies can be used correctly."
      },
      "fqn": "jsii-calc.UpcasingReflectable",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/submodules.ts",
          "line": 9
        },
        "parameters": [
          {
            "name": "delegate",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        ]
      },
      "interfaces": [
        "@scope/jsii-calc-lib.submodule.IReflectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/submodules.ts",
        "line": 6
      },
      "name": "UpcasingReflectable",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodules.ts",
            "line": 7
          },
          "name": "reflector",
          "static": true,
          "type": {
            "fqn": "@scope/jsii-calc-lib.submodule.Reflector"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodules.ts",
            "line": 11
          },
          "name": "entries",
          "overrides": "@scope/jsii-calc-lib.submodule.IReflectable",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@scope/jsii-calc-lib.submodule.ReflectableEntry"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "jsii-calc.UseBundledDependency": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.UseBundledDependency",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1117
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1118
          },
          "name": "value",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "UseBundledDependency"
    },
    "jsii-calc.UseCalcBase": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Depend on a type from jsii-calc-base as a test for awslabs/jsii#128."
      },
      "fqn": "jsii-calc.UseCalcBase",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1168
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1169
          },
          "name": "hello",
          "returns": {
            "type": {
              "fqn": "@scope/jsii-calc-base.Base"
            }
          }
        }
      ],
      "name": "UseCalcBase"
    },
    "jsii-calc.UsesInterfaceWithProperties": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.UsesInterfaceWithProperties",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 597
        },
        "parameters": [
          {
            "name": "obj",
            "type": {
              "fqn": "jsii-calc.IInterfaceWithProperties"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 596
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 599
          },
          "name": "justRead",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 608
          },
          "name": "readStringAndNumber",
          "parameters": [
            {
              "name": "ext",
              "type": {
                "fqn": "jsii-calc.IInterfaceWithPropertiesExtension"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 603
          },
          "name": "writeAndRead",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "UsesInterfaceWithProperties",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 597
          },
          "name": "obj",
          "type": {
            "fqn": "jsii-calc.IInterfaceWithProperties"
          }
        }
      ]
    },
    "jsii-calc.VariadicInvoker": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.VariadicInvoker",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 681
        },
        "parameters": [
          {
            "name": "method",
            "type": {
              "fqn": "jsii-calc.VariadicMethod"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 680
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 683
          },
          "name": "asArray",
          "parameters": [
            {
              "name": "values",
              "type": {
                "primitive": "number"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          },
          "variadic": true
        }
      ],
      "name": "VariadicInvoker"
    },
    "jsii-calc.VariadicMethod": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.VariadicMethod",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 667
        },
        "parameters": [
          {
            "docs": {
              "summary": "a prefix that will be use for all values returned by \`#asArray\`."
            },
            "name": "prefix",
            "type": {
              "primitive": "number"
            },
            "variadic": true
          }
        ],
        "variadic": true
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 661
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 675
          },
          "name": "asArray",
          "parameters": [
            {
              "docs": {
                "summary": "the first element of the array to be returned (after the \`prefix\` provided at construction time)."
              },
              "name": "first",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "other elements to be included in the array."
              },
              "name": "others",
              "type": {
                "primitive": "number"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          },
          "variadic": true
        }
      ],
      "name": "VariadicMethod"
    },
    "jsii-calc.VirtualMethodPlayground": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.VirtualMethodPlayground",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 451
      },
      "methods": [
        {
          "async": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 476
          },
          "name": "overrideMeAsync",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 480
          },
          "name": "overrideMeSync",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 458
          },
          "name": "parallelSumAsync",
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 452
          },
          "name": "serialSumAsync",
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 468
          },
          "name": "sumSync",
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "VirtualMethodPlayground"
    },
    "jsii-calc.VoidCallback": {
      "abstract": true,
      "assembly": "jsii-calc",
      "docs": {
        "remarks": "- Implement \`overrideMe\` (method does not have to do anything).\\n- Invoke \`callMe\`\\n- Verify that \`methodWasCalled\` is \`true\`.",
        "stability": "experimental",
        "summary": "This test is used to validate the runtimes can return correctly from a void callback."
      },
      "fqn": "jsii-calc.VoidCallback",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1921
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1926
          },
          "name": "callMe"
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1930
          },
          "name": "overrideMe",
          "protected": true
        }
      ],
      "name": "VoidCallback",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1923
          },
          "name": "methodWasCalled",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.WithPrivatePropertyInConstructor": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Verifies that private property declarations in constructor arguments are hidden."
      },
      "fqn": "jsii-calc.WithPrivatePropertyInConstructor",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/compliance.ts",
          "line": 1937
        },
        "parameters": [
          {
            "name": "privateField",
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/compliance.ts",
        "line": 1936
      },
      "name": "WithPrivatePropertyInConstructor",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/compliance.ts",
            "line": 1939
          },
          "name": "success",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.composition.CompositeOperation": {
      "abstract": true,
      "assembly": "jsii-calc",
      "base": "@scope/jsii-calc-lib.Operation",
      "docs": {
        "stability": "experimental",
        "summary": "Abstract operation composed from an expression of other operations."
      },
      "fqn": "jsii-calc.composition.CompositeOperation",
      "initializer": {},
      "kind": "class",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 138
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "String representation of the value."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 164
          },
          "name": "toString",
          "overrides": "@scope/jsii-calc-lib.Operation",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "CompositeOperation",
      "namespace": "composition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Must be implemented by derived classes.",
            "stability": "experimental",
            "summary": "The expression that this operation consists of."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 162
          },
          "name": "expression",
          "type": {
            "fqn": "@scope/jsii-calc-lib.Value"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 154
          },
          "name": "value",
          "overrides": "@scope/jsii-calc-lib.Value",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A set of postfixes to include in a decorated .toString()."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 152
          },
          "name": "decorationPostfixes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A set of prefixes to include in a decorated .toString()."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 147
          },
          "name": "decorationPrefixes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The .toString() style."
          },
          "locationInModule": {
            "filename": "lib/calculator.ts",
            "line": 142
          },
          "name": "stringStyle",
          "type": {
            "fqn": "jsii-calc.composition.CompositeOperation.CompositionStringStyle"
          }
        }
      ]
    },
    "jsii-calc.composition.CompositeOperation.CompositionStringStyle": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Style of .toString() output for CompositeOperation."
      },
      "fqn": "jsii-calc.composition.CompositeOperation.CompositionStringStyle",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/calculator.ts",
        "line": 184
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Normal string expression."
          },
          "name": "NORMAL"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Decorated string expression."
          },
          "name": "DECORATED"
        }
      ],
      "name": "CompositionStringStyle",
      "namespace": "composition.CompositeOperation"
    },
    "jsii-calc.submodule.MyClass": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.submodule.MyClass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/submodule/my-class.ts",
          "line": 11
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "jsii-calc.submodule.child.SomeStruct"
            }
          }
        ]
      },
      "interfaces": [
        "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/submodule/my-class.ts",
        "line": 5
      },
      "name": "MyClass",
      "namespace": "submodule",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/my-class.ts",
            "line": 8
          },
          "name": "awesomeness",
          "type": {
            "fqn": "jsii-calc.submodule.child.Awesomeness"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/my-class.ts",
            "line": 6
          },
          "name": "definedAt",
          "overrides": "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/my-class.ts",
            "line": 7
          },
          "name": "goodness",
          "type": {
            "fqn": "jsii-calc.submodule.child.Goodness"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/my-class.ts",
            "line": 11
          },
          "name": "props",
          "type": {
            "fqn": "jsii-calc.submodule.child.SomeStruct"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/submodule/my-class.ts",
            "line": 9
          },
          "name": "allTypes",
          "optional": true,
          "type": {
            "fqn": "jsii-calc.AllTypes"
          }
        }
      ]
    },
    "jsii-calc.submodule.back_references.MyClassReference": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.submodule.back_references.MyClassReference",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/submodule/refers-to-parent/index.ts",
        "line": 3
      },
      "name": "MyClassReference",
      "namespace": "submodule.back_references",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/refers-to-parent/index.ts",
            "line": 4
          },
          "name": "reference",
          "type": {
            "fqn": "jsii-calc.submodule.MyClass"
          }
        }
      ]
    },
    "jsii-calc.submodule.child.Awesomeness": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.submodule.child.Awesomeness",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/submodule/child/index.ts",
        "line": 15
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "It was awesome!"
          },
          "name": "AWESOME"
        }
      ],
      "name": "Awesomeness",
      "namespace": "submodule.child"
    },
    "jsii-calc.submodule.child.Goodness": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.submodule.child.Goodness",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/submodule/child/index.ts",
        "line": 5
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "It's pretty good."
          },
          "name": "PRETTY_GOOD"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "It's really good."
          },
          "name": "REALLY_GOOD"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "It's amazingly good."
          },
          "name": "AMAZINGLY_GOOD"
        }
      ],
      "name": "Goodness",
      "namespace": "submodule.child"
    },
    "jsii-calc.submodule.child.InnerClass": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.submodule.child.InnerClass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/submodule/child/index.ts",
        "line": 37
      },
      "name": "InnerClass",
      "namespace": "submodule.child",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/child/index.ts",
            "line": 38
          },
          "name": "staticProp",
          "static": true,
          "type": {
            "fqn": "jsii-calc.submodule.child.SomeStruct"
          }
        }
      ]
    },
    "jsii-calc.submodule.child.KwargsProps": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.submodule.child.KwargsProps",
      "interfaces": [
        "jsii-calc.submodule.child.SomeStruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/submodule/child/index.ts",
        "line": 41
      },
      "name": "KwargsProps",
      "namespace": "submodule.child",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/child/index.ts",
            "line": 42
          },
          "name": "extra",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "jsii-calc.submodule.child.OuterClass": {
      "assembly": "jsii-calc",
      "docs": {
        "see": ": https://github.com/aws/jsii/pull/1706",
        "stability": "experimental",
        "summary": "Checks that classes can self-reference during initialization."
      },
      "fqn": "jsii-calc.submodule.child.OuterClass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/submodule/child/index.ts",
          "line": 27
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/submodule/child/index.ts",
        "line": 24
      },
      "name": "OuterClass",
      "namespace": "submodule.child",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/child/index.ts",
            "line": 25
          },
          "name": "innerClass",
          "type": {
            "fqn": "jsii-calc.submodule.child.InnerClass"
          }
        }
      ]
    },
    "jsii-calc.submodule.child.SomeEnum": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.submodule.child.SomeEnum",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/submodule/child/index.ts",
        "line": 31
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "SOME"
        }
      ],
      "name": "SomeEnum",
      "namespace": "submodule.child"
    },
    "jsii-calc.submodule.child.SomeStruct": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.submodule.child.SomeStruct",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/submodule/child/index.ts",
        "line": 34
      },
      "name": "SomeStruct",
      "namespace": "submodule.child",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/child/index.ts",
            "line": 35
          },
          "name": "prop",
          "type": {
            "fqn": "jsii-calc.submodule.child.SomeEnum"
          }
        }
      ]
    },
    "jsii-calc.submodule.child.Structure": {
      "assembly": "jsii-calc",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.submodule.child.Structure",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/submodule/child/index.ts",
        "line": 1
      },
      "name": "Structure",
      "namespace": "submodule.child",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/child/index.ts",
            "line": 2
          },
          "name": "bool",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "jsii-calc.submodule.isolated.Kwargs": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental",
        "summary": "Ensures imports are correctly registered for kwargs lifted properties from super-structs."
      },
      "fqn": "jsii-calc.submodule.isolated.Kwargs",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/submodule/isolated.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/submodule/isolated.ts",
            "line": 8
          },
          "name": "method",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "jsii-calc.submodule.child.KwargsProps"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "Kwargs",
      "namespace": "submodule.isolated"
    },
    "jsii-calc.submodule.nested_submodule.Namespaced": {
      "abstract": true,
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.submodule.nested_submodule.Namespaced",
      "interfaces": [
        "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/submodule/nested_submodule.ts",
        "line": 12
      },
      "name": "Namespaced",
      "namespace": "submodule.nested_submodule",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/nested_submodule.ts",
            "line": 13
          },
          "name": "definedAt",
          "overrides": "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/nested_submodule.ts",
            "line": 14
          },
          "name": "goodness",
          "type": {
            "fqn": "jsii-calc.submodule.child.Goodness"
          }
        }
      ]
    },
    "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced": {
      "assembly": "jsii-calc",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/submodule/nested_submodule.ts",
        "line": 7
      },
      "name": "INamespaced",
      "namespace": "submodule.nested_submodule.deeplyNested",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/submodule/nested_submodule.ts",
            "line": 8
          },
          "name": "definedAt",
          "type": {
            "primitive": "string"
          }
        }
      ]
    }
  },
  "version": "0.0.0",
  "fingerprint": "2+VsCif006Pa9j/t5xrvI5psaT2mh2x58UwU31ByN5E="
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon.JSII.Tests.CalculatorPackageId.csproj 1`] = `
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- Package Identification -->
    <Description>A simple calcuator built on JSII. (Stability: Experimental)</Description>
    <PackageIconUrl>https://sdk-for-net.amazonwebservices.com/images/AWSLogo128x128.png</PackageIconUrl>
    <PackageId>Amazon.JSII.Tests.CalculatorPackageId</PackageId>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageVersion>0.0.0</PackageVersion>
    <!-- Additional Metadata -->
    <Authors>Amazon Web Services</Authors>
    <Company>Amazon Web Services</Company>
    <PackageTags>aws;jsii;test</PackageTags>
    <Language>en-US</Language>
    <ProjectUrl>https://github.com/aws/jsii</ProjectUrl>
    <RepositoryUrl>https://github.com/aws/jsii.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <!-- Build Configuration -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <Nullable>enable</Nullable>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <TargetFramework>netcoreapp3.1</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedResource Include="jsii-calc-0.0.0.tgz" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Amazon.JSII.Runtime" Version="[0.0.0,0.0.1)" />
    <PackageReference Include="Amazon.JSII.Tests.CalculatorPackageId.BasePackageId" Version="[0.0.0,0.0.1)" />
    <PackageReference Include="Amazon.JSII.Tests.CalculatorPackageId.BaseOfBasePackageId" Version="[0.0.0,0.0.1)" />
    <PackageReference Include="Amazon.JSII.Tests.CalculatorPackageId.LibPackageId" Version="[0.0.0-devpreview,0.0.1)" />
  </ItemGroup>
  <PropertyGroup>
    <NoWarn>0612,0618</NoWarn>
  </PropertyGroup>
</Project>


`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AbstractClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AbstractClass), fullyQualifiedName: "jsii-calc.AbstractClass")]
    public abstract class AbstractClass : Amazon.JSII.Tests.CalculatorNamespace.AbstractClassBase, Amazon.JSII.Tests.CalculatorNamespace.IInterfaceImplementedByAbstractClass
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        protected AbstractClass(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AbstractClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AbstractClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "abstractMethod", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"name\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public abstract string AbstractMethod(string name);


        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "nonAbstractMethod", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}")]
        public virtual double NonAbstractMethod()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "propFromInterface", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string PropFromInterface
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AbstractClassBase.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AbstractClassBase), fullyQualifiedName: "jsii-calc.AbstractClassBase")]
    public abstract class AbstractClassBase : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        protected AbstractClassBase(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AbstractClassBase(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AbstractClassBase(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "abstractProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public abstract string AbstractProperty
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AbstractClassBaseProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AbstractClassBase), fullyQualifiedName: "jsii-calc.AbstractClassBase")]
    internal sealed class AbstractClassBaseProxy : Amazon.JSII.Tests.CalculatorNamespace.AbstractClassBase
    {
        private AbstractClassBaseProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "abstractProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public override string AbstractProperty
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AbstractClassProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AbstractClass), fullyQualifiedName: "jsii-calc.AbstractClass")]
    internal sealed class AbstractClassProxy : Amazon.JSII.Tests.CalculatorNamespace.AbstractClass
    {
        private AbstractClassProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "abstractProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public override string AbstractProperty
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "abstractMethod", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"name\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public override string AbstractMethod(string name)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(string)}, new object[]{name});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AbstractClassReturner.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AbstractClassReturner), fullyQualifiedName: "jsii-calc.AbstractClassReturner")]
    public class AbstractClassReturner : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public AbstractClassReturner(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AbstractClassReturner(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AbstractClassReturner(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "giveMeAbstract", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.AbstractClass\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.AbstractClass GiveMeAbstract()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.AbstractClass>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "giveMeInterface", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.IInterfaceImplementedByAbstractClass\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.IInterfaceImplementedByAbstractClass GiveMeInterface()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.IInterfaceImplementedByAbstractClass>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "returnAbstractFromProperty", typeJson: "{\\"fqn\\":\\"jsii-calc.AbstractClassBase\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.AbstractClassBase ReturnAbstractFromProperty
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.AbstractClassBase>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AbstractSuite.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Ensures abstract members implementations correctly register overrides in various languages.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AbstractSuite), fullyQualifiedName: "jsii-calc.AbstractSuite")]
    public abstract class AbstractSuite : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        protected AbstractSuite(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AbstractSuite(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AbstractSuite(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "someMethod", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"str\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        protected abstract string SomeMethod(string str);


        /// <summary>Sets \`seed\` to \`this.property\`, then calls \`someMethod\` with \`this.property\` and returns the result.</summary>
        /// <param name="seed">a \`string\`.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "workItAll", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"a \`string\`.\\"},\\"name\\":\\"seed\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public virtual string WorkItAll(string seed)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(string)}, new object[]{seed});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}")]
        protected abstract string Property
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AbstractSuiteProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Ensures abstract members implementations correctly register overrides in various languages.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AbstractSuite), fullyQualifiedName: "jsii-calc.AbstractSuite")]
    internal sealed class AbstractSuiteProxy : Amazon.JSII.Tests.CalculatorNamespace.AbstractSuite
    {
        private AbstractSuiteProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}")]
        protected override string Property
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "someMethod", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"str\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        protected override string SomeMethod(string str)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(string)}, new object[]{str});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Add.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>The "+" binary operation.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Add), fullyQualifiedName: "jsii-calc.Add", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"Left-hand side operand.\\"},\\"name\\":\\"lhs\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}},{\\"docs\\":{\\"summary\\":\\"Right-hand side operand.\\"},\\"name\\":\\"rhs\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}}]")]
    public class Add : Amazon.JSII.Tests.CalculatorNamespace.BinaryOperation
    {
        /// <summary>Creates a BinaryOperation.</summary>
        /// <param name="lhs">Left-hand side operand.</param>
        /// <param name="rhs">Right-hand side operand.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Add(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ lhs, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ rhs): base(new DeputyProps(new object[]{lhs, rhs}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Add(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Add(DeputyProps props): base(props)
        {
        }

        /// <summary>String representation of the value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "toString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public override string ToString()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>The value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public override double Value
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AllTypes.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>This class includes property for all types supported by jsii.</summary>
    /// <remarks>
    /// The setters will validate
    /// that the value set is of the expected type and throw otherwise.
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AllTypes), fullyQualifiedName: "jsii-calc.AllTypes")]
    public class AllTypes : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public AllTypes(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AllTypes(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AllTypes(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyIn", parametersJson: "[{\\"name\\":\\"inp\\",\\"type\\":{\\"primitive\\":\\"any\\"}}]")]
        public virtual void AnyIn(object inp)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(object)}, new object[]{inp});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyOut", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public virtual object AnyOut()
        {
            return InvokeInstanceMethod<object>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "enumMethod", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.StringEnum\\"}}", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.StringEnum\\"}}]")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.StringEnum EnumMethod(Amazon.JSII.Tests.CalculatorNamespace.StringEnum @value)
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.StringEnum>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.StringEnum)}, new object[]{@value});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "enumPropertyValue", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public virtual double EnumPropertyValue
        {
            get => GetInstanceProperty<double>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "anyArrayProperty", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"array\\"}}")]
        public virtual object[] AnyArrayProperty
        {
            get => GetInstanceProperty<object[]>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "anyMapProperty", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"map\\"}}")]
        public virtual System.Collections.Generic.IDictionary<string, object> AnyMapProperty
        {
            get => GetInstanceProperty<System.Collections.Generic.IDictionary<string, object>>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "anyProperty", typeJson: "{\\"primitive\\":\\"any\\"}")]
        public virtual object AnyProperty
        {
            get => GetInstanceProperty<object>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "arrayProperty", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}")]
        public virtual string[] ArrayProperty
        {
            get => GetInstanceProperty<string[]>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "booleanProperty", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public virtual bool BooleanProperty
        {
            get => GetInstanceProperty<bool>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "dateProperty", typeJson: "{\\"primitive\\":\\"date\\"}")]
        public virtual System.DateTime DateProperty
        {
            get => GetInstanceProperty<System.DateTime>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "enumProperty", typeJson: "{\\"fqn\\":\\"jsii-calc.AllTypesEnum\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.AllTypesEnum EnumProperty
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.AllTypesEnum>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "jsonProperty", typeJson: "{\\"primitive\\":\\"json\\"}")]
        public virtual Newtonsoft.Json.Linq.JObject JsonProperty
        {
            get => GetInstanceProperty<Newtonsoft.Json.Linq.JObject>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "mapProperty", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Number\\"},\\"kind\\":\\"map\\"}}")]
        public virtual System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Number> MapProperty
        {
            get => GetInstanceProperty<System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Number>>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "numberProperty", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public virtual double NumberProperty
        {
            get => GetInstanceProperty<double>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "stringProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string StringProperty
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "unionArrayProperty", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"number\\"},{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}]}},\\"kind\\":\\"array\\"}}")]
        public virtual object[] UnionArrayProperty
        {
            get => GetInstanceProperty<object[]>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "unionMapProperty", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"string\\"},{\\"primitive\\":\\"number\\"},{\\"fqn\\":\\"@scope/jsii-calc-lib.Number\\"}]}},\\"kind\\":\\"map\\"}}")]
        public virtual System.Collections.Generic.IDictionary<string, object> UnionMapProperty
        {
            get => GetInstanceProperty<System.Collections.Generic.IDictionary<string, object>>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "unionProperty", typeJson: "{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"string\\"},{\\"primitive\\":\\"number\\"},{\\"fqn\\":\\"jsii-calc.Multiply\\"},{\\"fqn\\":\\"@scope/jsii-calc-lib.Number\\"}]}}")]
        public virtual object UnionProperty
        {
            get => GetInstanceProperty<object>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "unknownArrayProperty", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"array\\"}}")]
        public virtual object[] UnknownArrayProperty
        {
            get => GetInstanceProperty<object[]>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "unknownMapProperty", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"map\\"}}")]
        public virtual System.Collections.Generic.IDictionary<string, object> UnknownMapProperty
        {
            get => GetInstanceProperty<System.Collections.Generic.IDictionary<string, object>>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "unknownProperty", typeJson: "{\\"primitive\\":\\"any\\"}")]
        public virtual object UnknownProperty
        {
            get => GetInstanceProperty<object>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalEnumValue", typeJson: "{\\"fqn\\":\\"jsii-calc.StringEnum\\"}", isOptional: true)]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.StringEnum? OptionalEnumValue
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.StringEnum?>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AllTypesEnum.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiEnum(nativeType: typeof(AllTypesEnum), fullyQualifiedName: "jsii-calc.AllTypesEnum")]
    public enum AllTypesEnum
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "MY_ENUM_VALUE")]
        MY_ENUM_VALUE,
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "YOUR_ENUM_VALUE")]
        YOUR_ENUM_VALUE,
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "THIS_IS_GREAT")]
        THIS_IS_GREAT
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AllowedMethodNames.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AllowedMethodNames), fullyQualifiedName: "jsii-calc.AllowedMethodNames")]
    public class AllowedMethodNames : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public AllowedMethodNames(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AllowedMethodNames(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AllowedMethodNames(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "getBar", parametersJson: "[{\\"name\\":\\"_p1\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"_p2\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public virtual void GetBar(string p1, double p2)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(string), typeof(double)}, new object[]{p1, p2});
        }

        /// <summary>getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "getFoo", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"withParam\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public virtual string GetFoo(string withParam)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(string)}, new object[]{withParam});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "setBar", parametersJson: "[{\\"name\\":\\"_x\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"_y\\",\\"type\\":{\\"primitive\\":\\"number\\"}},{\\"name\\":\\"_z\\",\\"type\\":{\\"primitive\\":\\"boolean\\"}}]")]
        public virtual void SetBar(string x, double y, bool z)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(string), typeof(double), typeof(bool)}, new object[]{x, y, z});
        }

        /// <summary>setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "setFoo", parametersJson: "[{\\"name\\":\\"_x\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"_y\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public virtual void SetFoo(string x, double y)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(string), typeof(double)}, new object[]{x, y});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AmbiguousParameters.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AmbiguousParameters), fullyQualifiedName: "jsii-calc.AmbiguousParameters", parametersJson: "[{\\"name\\":\\"scope\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.Bell\\"}},{\\"name\\":\\"props\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.StructParameterType\\"}}]")]
    public class AmbiguousParameters : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public AmbiguousParameters(Amazon.JSII.Tests.CalculatorNamespace.Bell scope, Amazon.JSII.Tests.CalculatorNamespace.IStructParameterType props): base(new DeputyProps(new object[]{scope, props}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AmbiguousParameters(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AmbiguousParameters(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "props", typeJson: "{\\"fqn\\":\\"jsii-calc.StructParameterType\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.IStructParameterType Props
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.IStructParameterType>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "scope", typeJson: "{\\"fqn\\":\\"jsii-calc.Bell\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.Bell Scope
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.Bell>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AnonymousImplementationProvider.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AnonymousImplementationProvider), fullyQualifiedName: "jsii-calc.AnonymousImplementationProvider")]
    public class AnonymousImplementationProvider : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IAnonymousImplementationProvider
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public AnonymousImplementationProvider(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AnonymousImplementationProvider(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AnonymousImplementationProvider(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "provideAsClass", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.Implementation\\"}}", isOverride: true)]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.Implementation ProvideAsClass()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.Implementation>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "provideAsInterface", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.IAnonymouslyImplementMe\\"}}", isOverride: true)]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.IAnonymouslyImplementMe ProvideAsInterface()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.IAnonymouslyImplementMe>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AsyncVirtualMethods.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AsyncVirtualMethods), fullyQualifiedName: "jsii-calc.AsyncVirtualMethods")]
    public class AsyncVirtualMethods : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public AsyncVirtualMethods(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AsyncVirtualMethods(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AsyncVirtualMethods(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "callMe", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", isAsync: true)]
        public virtual double CallMe()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Just calls "overrideMeToo".</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "callMe2", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", isAsync: true)]
        public virtual double CallMe2()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <summary>This method calls the "callMe" async method indirectly, which will then invoke a virtual method.</summary>
        /// <remarks>
        /// This is a "double promise" situation, which
        /// means that callbacks are not going to be available immediate, but only
        /// after an "immediates" cycle.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "callMeDoublePromise", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", isAsync: true)]
        public virtual double CallMeDoublePromise()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "dontOverrideMe", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}")]
        public virtual double DontOverrideMe()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "overrideMe", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"mult\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]", isAsync: true)]
        public virtual double OverrideMe(double mult)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(double)}, new object[]{mult});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "overrideMeToo", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", isAsync: true)]
        public virtual double OverrideMeToo()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/AugmentableClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.AugmentableClass), fullyQualifiedName: "jsii-calc.AugmentableClass")]
    public class AugmentableClass : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public AugmentableClass(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AugmentableClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AugmentableClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "methodOne")]
        public virtual void MethodOne()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "methodTwo")]
        public virtual void MethodTwo()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/BaseJsii976.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.BaseJsii976), fullyQualifiedName: "jsii-calc.BaseJsii976")]
    public class BaseJsii976 : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public BaseJsii976(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected BaseJsii976(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected BaseJsii976(DeputyProps props): base(props)
        {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Bell.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Bell), fullyQualifiedName: "jsii-calc.Bell")]
    public class Bell : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IBell
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Bell(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Bell(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Bell(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "ring", isOverride: true)]
        public virtual void Ring()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "rung", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public virtual bool Rung
        {
            get => GetInstanceProperty<bool>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/BinaryOperation.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Represents an operation with two operands.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.BinaryOperation), fullyQualifiedName: "jsii-calc.BinaryOperation", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"Left-hand side operand.\\"},\\"name\\":\\"lhs\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}},{\\"docs\\":{\\"summary\\":\\"Right-hand side operand.\\"},\\"name\\":\\"rhs\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}}]")]
    public abstract class BinaryOperation : Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Operation, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IFriendly
    {
        /// <summary>Creates a BinaryOperation.</summary>
        /// <param name="lhs">Left-hand side operand.</param>
        /// <param name="rhs">Right-hand side operand.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        protected BinaryOperation(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ lhs, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ rhs): base(new DeputyProps(new object[]{lhs, rhs}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected BinaryOperation(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected BinaryOperation(DeputyProps props): base(props)
        {
        }

        /// <summary>Say hello!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "hello", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public virtual string Hello()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Left-hand side operand.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "lhs", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ Lhs
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>();
        }

        /// <summary>Right-hand side operand.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "rhs", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ Rhs
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/BinaryOperationProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Represents an operation with two operands.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.BinaryOperation), fullyQualifiedName: "jsii-calc.BinaryOperation")]
    internal sealed class BinaryOperationProxy : Amazon.JSII.Tests.CalculatorNamespace.BinaryOperation
    {
        private BinaryOperationProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>The value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        public override double Value
        {
            get => GetInstanceProperty<double>();
        }

        /// <summary>String representation of the value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "toString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        [System.Obsolete()]
        public override string ToString()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/BurriedAnonymousObject.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>See https://github.com/aws/aws-cdk/issues/7977.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.BurriedAnonymousObject), fullyQualifiedName: "jsii-calc.BurriedAnonymousObject")]
    public abstract class BurriedAnonymousObject : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        protected BurriedAnonymousObject(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected BurriedAnonymousObject(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected BurriedAnonymousObject(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "check", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}")]
        public virtual bool Check()
        {
            return InvokeInstanceMethod<bool>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Implement this method and have it return it's parameter.</summary>
        /// <param name="value">the value that should be returned.</param>
        /// <returns>\`value\`</returns>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "giveItBack", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"the value that should be returned.\\"},\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"any\\"}}]")]
        public abstract object GiveItBack(object @value);

    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/BurriedAnonymousObjectProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>See https://github.com/aws/aws-cdk/issues/7977.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.BurriedAnonymousObject), fullyQualifiedName: "jsii-calc.BurriedAnonymousObject")]
    internal sealed class BurriedAnonymousObjectProxy : Amazon.JSII.Tests.CalculatorNamespace.BurriedAnonymousObject
    {
        private BurriedAnonymousObjectProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Implement this method and have it return it's parameter.</summary>
        /// <param name="value">the value that should be returned.</param>
        /// <returns>\`value\`</returns>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "giveItBack", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"the value that should be returned.\\"},\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"any\\"}}]")]
        public override object GiveItBack(object @value)
        {
            return InvokeInstanceMethod<object>(new System.Type[]{typeof(object)}, new object[]{@value});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Calculator.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>A calculator which maintains a current value and allows adding operations.</summary>
    /// <remarks>
    /// Here's how you use it:
    /// 
    /// <code><![CDATA[
    /// // Example automatically generated. See https://github.com/aws/jsii/issues/826
    /// Calculator calculator = new Calculator();
    /// calculator.Add(5);
    /// calculator.Mul(3);
    /// Console.WriteLine(calculator.Expression.Value);
    /// ]]></code>
    /// 
    /// I will repeat this example again, but in an @example tag.
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    /// <example>
    /// <code>// Example automatically generated. See https://github.com/aws/jsii/issues/826
    /// Calculator calculator = new Calculator();
    /// calculator.Add(5);
    /// calculator.Mul(3);
    /// Console.WriteLine(calculator.Expression.Value);</code>
    /// </example>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Calculator), fullyQualifiedName: "jsii-calc.Calculator", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"Initialization properties.\\"},\\"name\\":\\"props\\",\\"optional\\":true,\\"type\\":{\\"fqn\\":\\"jsii-calc.CalculatorProps\\"}}]")]
    public class Calculator : Amazon.JSII.Tests.CalculatorNamespace.Composition.CompositeOperation
    {
        /// <summary>Creates a Calculator object.</summary>
        /// <param name="props">Initialization properties.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Calculator(Amazon.JSII.Tests.CalculatorNamespace.ICalculatorProps? props = null): base(new DeputyProps(new object?[]{props}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Calculator(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Calculator(DeputyProps props): base(props)
        {
        }

        /// <summary>Adds a number to the current value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "add", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public virtual void Add(double @value)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(double)}, new object[]{@value});
        }

        /// <summary>Multiplies the current value by a number.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "mul", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public virtual void Mul(double @value)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(double)}, new object[]{@value});
        }

        /// <summary>Negates the current value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "neg")]
        public virtual void Neg()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <summary>Raises the current value by a power.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "pow", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public virtual void Pow(double @value)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(double)}, new object[]{@value});
        }

        /// <summary>Returns teh value of the union property (if defined).</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "readUnionValue", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}")]
        public virtual double ReadUnionValue()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Returns the expression.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "expression", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}")]
        public override Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ Expression
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>();
        }

        /// <summary>A log of all operations.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "operationsLog", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"},\\"kind\\":\\"array\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_[] OperationsLog
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_[]>();
        }

        /// <summary>A map of per operation name of all operations performed.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "operationsMap", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"},\\"kind\\":\\"array\\"}},\\"kind\\":\\"map\\"}}")]
        public virtual System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_[]> OperationsMap
        {
            get => GetInstanceProperty<System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_[]>>();
        }

        /// <summary>The current value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "curr", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ Curr
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>();
            set => SetInstanceProperty(value);
        }

        /// <summary>The maximum value allows in this calculator.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "maxValue", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        public virtual double? MaxValue
        {
            get => GetInstanceProperty<double?>();
            set => SetInstanceProperty(value);
        }

        /// <summary>Example of a property that accepts a union of types.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "unionProperty", typeJson: "{\\"union\\":{\\"types\\":[{\\"fqn\\":\\"jsii-calc.Add\\"},{\\"fqn\\":\\"jsii-calc.Multiply\\"},{\\"fqn\\":\\"jsii-calc.Power\\"}]}}", isOptional: true)]
        public virtual object? UnionProperty
        {
            get => GetInstanceProperty<object?>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/CalculatorProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Properties for Calculator.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.CalculatorProps")]
    public class CalculatorProps : Amazon.JSII.Tests.CalculatorNamespace.ICalculatorProps
    {
        /// <summary>The initial value of the calculator.</summary>
        /// <remarks>
        /// NOTE: Any number works here, it's fine.
        /// 
        /// <strong>Default</strong>: 0
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "initialValue", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true, isOverride: true)]
        public double? InitialValue
        {
            get;
            set;
        }

        /// <summary>The maximum value the calculator can store.</summary>
        /// <remarks>
        /// <strong>Default</strong>: none
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "maximumValue", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true, isOverride: true)]
        public double? MaximumValue
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/CalculatorPropsProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Properties for Calculator.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(ICalculatorProps), fullyQualifiedName: "jsii-calc.CalculatorProps")]
    internal sealed class CalculatorPropsProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.ICalculatorProps
    {
        private CalculatorPropsProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>The initial value of the calculator.</summary>
        /// <remarks>
        /// NOTE: Any number works here, it's fine.
        /// 
        /// <strong>Default</strong>: 0
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "initialValue", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        public double? InitialValue
        {
            get => GetInstanceProperty<double?>();
        }

        /// <summary>The maximum value the calculator can store.</summary>
        /// <remarks>
        /// <strong>Default</strong>: none
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "maximumValue", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        public double? MaximumValue
        {
            get => GetInstanceProperty<double?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ChildStruct982.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.ChildStruct982")]
    public class ChildStruct982 : Amazon.JSII.Tests.CalculatorNamespace.IChildStruct982
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"number\\"}", isOverride: true)]
        public double Bar
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string Foo
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ChildStruct982Proxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IChildStruct982), fullyQualifiedName: "jsii-calc.ChildStruct982")]
    internal sealed class ChildStruct982Proxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IChildStruct982
    {
        private ChildStruct982Proxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public double Bar
        {
            get => GetInstanceProperty<double>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Foo
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ClassThatImplementsTheInternalInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassThatImplementsTheInternalInterface), fullyQualifiedName: "jsii-calc.ClassThatImplementsTheInternalInterface")]
    public class ClassThatImplementsTheInternalInterface : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.INonInternalInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ClassThatImplementsTheInternalInterface(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassThatImplementsTheInternalInterface(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassThatImplementsTheInternalInterface(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "a", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string A
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "b", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string B
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "c", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string C
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "d", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string D
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ClassThatImplementsThePrivateInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassThatImplementsThePrivateInterface), fullyQualifiedName: "jsii-calc.ClassThatImplementsThePrivateInterface")]
    public class ClassThatImplementsThePrivateInterface : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.INonInternalInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ClassThatImplementsThePrivateInterface(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassThatImplementsThePrivateInterface(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassThatImplementsThePrivateInterface(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "a", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string A
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "b", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string B
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "c", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string C
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "e", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string E
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ClassWithCollections.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithCollections), fullyQualifiedName: "jsii-calc.ClassWithCollections", parametersJson: "[{\\"name\\":\\"map\\",\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"map\\"}}},{\\"name\\":\\"array\\",\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}}]")]
    public class ClassWithCollections : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ClassWithCollections(System.Collections.Generic.IDictionary<string, string> map, string[] array): base(new DeputyProps(new object[]{map, array}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithCollections(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithCollections(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "createAList", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}}")]
        public static string[] CreateAList()
        {
            return InvokeStaticMethod<string[]>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithCollections), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "createAMap", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"map\\"}}}")]
        public static System.Collections.Generic.IDictionary<string, string> CreateAMap()
        {
            return InvokeStaticMethod<System.Collections.Generic.IDictionary<string, string>>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithCollections), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "staticArray", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}")]
        public static string[] StaticArray
        {
            get => GetStaticProperty<string[]>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithCollections));
            set => SetStaticProperty(typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithCollections), value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "staticMap", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"map\\"}}")]
        public static System.Collections.Generic.IDictionary<string, string> StaticMap
        {
            get => GetStaticProperty<System.Collections.Generic.IDictionary<string, string>>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithCollections));
            set => SetStaticProperty(typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithCollections), value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "array", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}")]
        public virtual string[] Array
        {
            get => GetInstanceProperty<string[]>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "map", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"map\\"}}")]
        public virtual System.Collections.Generic.IDictionary<string, string> Map
        {
            get => GetInstanceProperty<System.Collections.Generic.IDictionary<string, string>>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ClassWithDocs.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>This class has docs.</summary>
    /// <remarks>
    /// The docs are great. They're a bunch of tags.
    /// 
    /// <strong>See</strong>: https://aws.amazon.com/
    /// 
    /// <strong>CustomAttribute</strong>: hasAValue
    /// </remarks>
    /// <example>
    /// <code>// Example automatically generated. See https://github.com/aws/jsii/issues/826
    /// public void AnExample()
    /// {
    /// }</code>
    /// </example>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithDocs), fullyQualifiedName: "jsii-calc.ClassWithDocs")]
    public class ClassWithDocs : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ClassWithDocs(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithDocs(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithDocs(DeputyProps props): base(props)
        {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ClassWithJavaReservedWords.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithJavaReservedWords), fullyQualifiedName: "jsii-calc.ClassWithJavaReservedWords", parametersJson: "[{\\"name\\":\\"int\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
    public class ClassWithJavaReservedWords : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ClassWithJavaReservedWords(string @int): base(new DeputyProps(new object[]{@int}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithJavaReservedWords(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithJavaReservedWords(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "import", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"assert\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public virtual string Import(string assert)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(string)}, new object[]{assert});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "int", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string Int
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ClassWithMutableObjectLiteralProperty.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithMutableObjectLiteralProperty), fullyQualifiedName: "jsii-calc.ClassWithMutableObjectLiteralProperty")]
    public class ClassWithMutableObjectLiteralProperty : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ClassWithMutableObjectLiteralProperty(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithMutableObjectLiteralProperty(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithMutableObjectLiteralProperty(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "mutableObject", typeJson: "{\\"fqn\\":\\"jsii-calc.IMutableObjectLiteral\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.IMutableObjectLiteral MutableObject
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.IMutableObjectLiteral>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ClassWithPrivateConstructorAndAutomaticProperties.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Class that implements interface properties automatically, but using a private constructor.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithPrivateConstructorAndAutomaticProperties), fullyQualifiedName: "jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties")]
    public class ClassWithPrivateConstructorAndAutomaticProperties : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithProperties
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithPrivateConstructorAndAutomaticProperties(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithPrivateConstructorAndAutomaticProperties(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "create", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties\\"}}", parametersJson: "[{\\"name\\":\\"readOnlyString\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"readWriteString\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public static Amazon.JSII.Tests.CalculatorNamespace.ClassWithPrivateConstructorAndAutomaticProperties Create(string readOnlyString, string readWriteString)
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.ClassWithPrivateConstructorAndAutomaticProperties>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ClassWithPrivateConstructorAndAutomaticProperties), new System.Type[]{typeof(string), typeof(string)}, new object[]{readOnlyString, readWriteString});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readOnlyString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string ReadOnlyString
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readWriteString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string ReadWriteString
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Composition/CompositeOperation.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Composition
{
    /// <summary>Abstract operation composed from an expression of other operations.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Composition.CompositeOperation), fullyQualifiedName: "jsii-calc.composition.CompositeOperation")]
    public abstract class CompositeOperation : Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Operation
    {
        protected CompositeOperation(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CompositeOperation(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CompositeOperation(DeputyProps props): base(props)
        {
        }

        /// <summary>String representation of the value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "toString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public override string ToString()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>The expression that this operation consists of.</summary>
        /// <remarks>
        /// Must be implemented by derived classes.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "expression", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}")]
        public abstract Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ Expression
        {
            get;
        }

        /// <summary>The value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public override double Value
        {
            get => GetInstanceProperty<double>();
        }

        /// <summary>A set of postfixes to include in a decorated .toString().</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "decorationPostfixes", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}")]
        public virtual string[] DecorationPostfixes
        {
            get => GetInstanceProperty<string[]>();
            set => SetInstanceProperty(value);
        }

        /// <summary>A set of prefixes to include in a decorated .toString().</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "decorationPrefixes", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}")]
        public virtual string[] DecorationPrefixes
        {
            get => GetInstanceProperty<string[]>();
            set => SetInstanceProperty(value);
        }

        /// <summary>The .toString() style.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "stringStyle", typeJson: "{\\"fqn\\":\\"jsii-calc.composition.CompositeOperation.CompositionStringStyle\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.Composition.CompositeOperation.CompositionStringStyle StringStyle
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.Composition.CompositeOperation.CompositionStringStyle>();
            set => SetInstanceProperty(value);
        }

        /// <summary>Style of .toString() output for CompositeOperation.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnum(nativeType: typeof(CompositionStringStyle), fullyQualifiedName: "jsii-calc.composition.CompositeOperation.CompositionStringStyle")]
        public enum CompositionStringStyle
        {
            /// <summary>Normal string expression.</summary>
            /// <remarks>
            /// <strong>Stability</strong>: Experimental
            /// </remarks>
            [JsiiEnumMember(name: "NORMAL")]
            NORMAL,
            /// <summary>Decorated string expression.</summary>
            /// <remarks>
            /// <strong>Stability</strong>: Experimental
            /// </remarks>
            [JsiiEnumMember(name: "DECORATED")]
            DECORATED
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Composition/CompositeOperationProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Composition
{
    /// <summary>Abstract operation composed from an expression of other operations.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Composition.CompositeOperation), fullyQualifiedName: "jsii-calc.composition.CompositeOperation")]
    internal sealed class CompositeOperationProxy : Amazon.JSII.Tests.CalculatorNamespace.Composition.CompositeOperation
    {
        private CompositeOperationProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>The expression that this operation consists of.</summary>
        /// <remarks>
        /// Must be implemented by derived classes.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "expression", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}")]
        public override Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ Expression
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ConfusingToJackson.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>This tries to confuse Jackson by having overloaded property setters.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>See</strong>: https://github.com/aws/aws-cdk/issues/4080
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ConfusingToJackson), fullyQualifiedName: "jsii-calc.ConfusingToJackson")]
    public class ConfusingToJackson : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ConfusingToJackson(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ConfusingToJackson(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "makeInstance", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.ConfusingToJackson\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.ConfusingToJackson MakeInstance()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.ConfusingToJackson>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ConfusingToJackson), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "makeStructInstance", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.ConfusingToJacksonStruct\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IConfusingToJacksonStruct MakeStructInstance()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IConfusingToJacksonStruct>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ConfusingToJackson), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "unionProperty", typeJson: "{\\"union\\":{\\"types\\":[{\\"fqn\\":\\"@scope/jsii-calc-lib.IFriendly\\"},{\\"collection\\":{\\"elementtype\\":{\\"union\\":{\\"types\\":[{\\"fqn\\":\\"@scope/jsii-calc-lib.IFriendly\\"},{\\"fqn\\":\\"jsii-calc.AbstractClass\\"}]}},\\"kind\\":\\"array\\"}}]}}", isOptional: true)]
        public virtual object? UnionProperty
        {
            get => GetInstanceProperty<object?>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ConfusingToJacksonStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.ConfusingToJacksonStruct")]
    public class ConfusingToJacksonStruct : Amazon.JSII.Tests.CalculatorNamespace.IConfusingToJacksonStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "unionProperty", typeJson: "{\\"union\\":{\\"types\\":[{\\"fqn\\":\\"@scope/jsii-calc-lib.IFriendly\\"},{\\"collection\\":{\\"elementtype\\":{\\"union\\":{\\"types\\":[{\\"fqn\\":\\"@scope/jsii-calc-lib.IFriendly\\"},{\\"fqn\\":\\"jsii-calc.AbstractClass\\"}]}},\\"kind\\":\\"array\\"}}]}}", isOptional: true, isOverride: true)]
        public object? UnionProperty
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ConfusingToJacksonStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IConfusingToJacksonStruct), fullyQualifiedName: "jsii-calc.ConfusingToJacksonStruct")]
    internal sealed class ConfusingToJacksonStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IConfusingToJacksonStruct
    {
        private ConfusingToJacksonStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "unionProperty", typeJson: "{\\"union\\":{\\"types\\":[{\\"fqn\\":\\"@scope/jsii-calc-lib.IFriendly\\"},{\\"collection\\":{\\"elementtype\\":{\\"union\\":{\\"types\\":[{\\"fqn\\":\\"@scope/jsii-calc-lib.IFriendly\\"},{\\"fqn\\":\\"jsii-calc.AbstractClass\\"}]}},\\"kind\\":\\"array\\"}}]}}", isOptional: true)]
        public object? UnionProperty
        {
            get => GetInstanceProperty<object?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ConstructorPassesThisOut.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ConstructorPassesThisOut), fullyQualifiedName: "jsii-calc.ConstructorPassesThisOut", parametersJson: "[{\\"name\\":\\"consumer\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.PartiallyInitializedThisConsumer\\"}}]")]
    public class ConstructorPassesThisOut : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ConstructorPassesThisOut(Amazon.JSII.Tests.CalculatorNamespace.PartiallyInitializedThisConsumer consumer): base(new DeputyProps(new object[]{consumer}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ConstructorPassesThisOut(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ConstructorPassesThisOut(DeputyProps props): base(props)
        {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Constructors.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Constructors), fullyQualifiedName: "jsii-calc.Constructors")]
    public class Constructors : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Constructors(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Constructors(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Constructors(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "hiddenInterface", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.IPublicInterface\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface HiddenInterface()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Constructors), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "hiddenInterfaces", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"jsii-calc.IPublicInterface\\"},\\"kind\\":\\"array\\"}}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface[] HiddenInterfaces()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface[]>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Constructors), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "hiddenSubInterfaces", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"jsii-calc.IPublicInterface\\"},\\"kind\\":\\"array\\"}}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface[] HiddenSubInterfaces()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface[]>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Constructors), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "makeClass", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.PublicClass\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.PublicClass MakeClass()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.PublicClass>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Constructors), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "makeInterface", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.IPublicInterface\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface MakeInterface()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Constructors), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "makeInterface2", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.IPublicInterface2\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface2 MakeInterface2()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface2>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Constructors), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "makeInterfaces", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"jsii-calc.IPublicInterface\\"},\\"kind\\":\\"array\\"}}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface[] MakeInterfaces()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface[]>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Constructors), new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ConsumePureInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ConsumePureInterface), fullyQualifiedName: "jsii-calc.ConsumePureInterface", parametersJson: "[{\\"name\\":\\"delegate\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IStructReturningDelegate\\"}}]")]
    public class ConsumePureInterface : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ConsumePureInterface(Amazon.JSII.Tests.CalculatorNamespace.IStructReturningDelegate @delegate): base(new DeputyProps(new object[]{@delegate}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ConsumePureInterface(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ConsumePureInterface(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "workItBaby", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.StructB\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.IStructB WorkItBaby()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.IStructB>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ConsumerCanRingBell.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Test calling back to consumers that implement interfaces.</summary>
    /// <remarks>
    /// Check that if a JSII consumer implements IConsumerWithInterfaceParam, they can call
    /// the method on the argument that they're passed...
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ConsumerCanRingBell), fullyQualifiedName: "jsii-calc.ConsumerCanRingBell")]
    public class ConsumerCanRingBell : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ConsumerCanRingBell(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ConsumerCanRingBell(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ConsumerCanRingBell(DeputyProps props): base(props)
        {
        }

        /// <summary>...if the interface is implemented using an object literal.</summary>
        /// <remarks>
        /// Returns whether the bell was rung.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "staticImplementedByObjectLiteral", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"ringer\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IBellRinger\\"}}]")]
        public static bool StaticImplementedByObjectLiteral(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger ringer)
        {
            return InvokeStaticMethod<bool>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ConsumerCanRingBell), new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger)}, new object[]{ringer});
        }

        /// <summary>...if the interface is implemented using a private class.</summary>
        /// <remarks>
        /// Return whether the bell was rung.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "staticImplementedByPrivateClass", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"ringer\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IBellRinger\\"}}]")]
        public static bool StaticImplementedByPrivateClass(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger ringer)
        {
            return InvokeStaticMethod<bool>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ConsumerCanRingBell), new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger)}, new object[]{ringer});
        }

        /// <summary>...if the interface is implemented using a public class.</summary>
        /// <remarks>
        /// Return whether the bell was rung.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "staticImplementedByPublicClass", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"ringer\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IBellRinger\\"}}]")]
        public static bool StaticImplementedByPublicClass(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger ringer)
        {
            return InvokeStaticMethod<bool>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ConsumerCanRingBell), new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger)}, new object[]{ringer});
        }

        /// <summary>If the parameter is a concrete class instead of an interface.</summary>
        /// <remarks>
        /// Return whether the bell was rung.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "staticWhenTypedAsClass", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"ringer\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IConcreteBellRinger\\"}}]")]
        public static bool StaticWhenTypedAsClass(Amazon.JSII.Tests.CalculatorNamespace.IConcreteBellRinger ringer)
        {
            return InvokeStaticMethod<bool>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ConsumerCanRingBell), new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IConcreteBellRinger)}, new object[]{ringer});
        }

        /// <summary>...if the interface is implemented using an object literal.</summary>
        /// <remarks>
        /// Returns whether the bell was rung.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "implementedByObjectLiteral", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"ringer\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IBellRinger\\"}}]")]
        public virtual bool ImplementedByObjectLiteral(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger ringer)
        {
            return InvokeInstanceMethod<bool>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger)}, new object[]{ringer});
        }

        /// <summary>...if the interface is implemented using a private class.</summary>
        /// <remarks>
        /// Return whether the bell was rung.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "implementedByPrivateClass", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"ringer\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IBellRinger\\"}}]")]
        public virtual bool ImplementedByPrivateClass(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger ringer)
        {
            return InvokeInstanceMethod<bool>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger)}, new object[]{ringer});
        }

        /// <summary>...if the interface is implemented using a public class.</summary>
        /// <remarks>
        /// Return whether the bell was rung.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "implementedByPublicClass", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"ringer\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IBellRinger\\"}}]")]
        public virtual bool ImplementedByPublicClass(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger ringer)
        {
            return InvokeInstanceMethod<bool>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IBellRinger)}, new object[]{ringer});
        }

        /// <summary>If the parameter is a concrete class instead of an interface.</summary>
        /// <remarks>
        /// Return whether the bell was rung.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "whenTypedAsClass", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"ringer\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IConcreteBellRinger\\"}}]")]
        public virtual bool WhenTypedAsClass(Amazon.JSII.Tests.CalculatorNamespace.IConcreteBellRinger ringer)
        {
            return InvokeInstanceMethod<bool>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IConcreteBellRinger)}, new object[]{ringer});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ConsumersOfThisCrazyTypeSystem.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ConsumersOfThisCrazyTypeSystem), fullyQualifiedName: "jsii-calc.ConsumersOfThisCrazyTypeSystem")]
    public class ConsumersOfThisCrazyTypeSystem : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ConsumersOfThisCrazyTypeSystem(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ConsumersOfThisCrazyTypeSystem(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ConsumersOfThisCrazyTypeSystem(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "consumeAnotherPublicInterface", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"obj\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IAnotherPublicInterface\\"}}]")]
        public virtual string ConsumeAnotherPublicInterface(Amazon.JSII.Tests.CalculatorNamespace.IAnotherPublicInterface obj)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IAnotherPublicInterface)}, new object[]{obj});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "consumeNonInternalInterface", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}", parametersJson: "[{\\"name\\":\\"obj\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.INonInternalInterface\\"}}]")]
        public virtual object ConsumeNonInternalInterface(Amazon.JSII.Tests.CalculatorNamespace.INonInternalInterface obj)
        {
            return InvokeInstanceMethod<object>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.INonInternalInterface)}, new object[]{obj});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DataRenderer.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Verifies proper type handling through dynamic overrides.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.DataRenderer), fullyQualifiedName: "jsii-calc.DataRenderer")]
    public class DataRenderer : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public DataRenderer(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DataRenderer(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DataRenderer(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "render", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"data\\",\\"optional\\":true,\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.MyFirstStruct\\"}}]")]
        public virtual string Render(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IMyFirstStruct? data = null)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IMyFirstStruct)}, new object?[]{data});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "renderArbitrary", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"data\\",\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"map\\"}}}]")]
        public virtual string RenderArbitrary(System.Collections.Generic.IDictionary<string, object> data)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(System.Collections.Generic.IDictionary<string, object>)}, new object[]{data});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "renderMap", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"map\\",\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"map\\"}}}]")]
        public virtual string RenderMap(System.Collections.Generic.IDictionary<string, object> map)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(System.Collections.Generic.IDictionary<string, object>)}, new object[]{map});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DefaultedConstructorArgument.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.DefaultedConstructorArgument), fullyQualifiedName: "jsii-calc.DefaultedConstructorArgument", parametersJson: "[{\\"name\\":\\"arg1\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"number\\"}},{\\"name\\":\\"arg2\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"arg3\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"date\\"}}]")]
    public class DefaultedConstructorArgument : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public DefaultedConstructorArgument(double? arg1 = null, string? arg2 = null, System.DateTime? arg3 = null): base(new DeputyProps(new object?[]{arg1, arg2, arg3}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DefaultedConstructorArgument(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DefaultedConstructorArgument(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "arg1", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public virtual double Arg1
        {
            get => GetInstanceProperty<double>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "arg3", typeJson: "{\\"primitive\\":\\"date\\"}")]
        public virtual System.DateTime Arg3
        {
            get => GetInstanceProperty<System.DateTime>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "arg2", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public virtual string? Arg2
        {
            get => GetInstanceProperty<string?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Demonstrate982.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>1.</summary>
    /// <remarks>
    /// call #takeThis() -&gt; An ObjectRef will be provisioned for the value (it'll be re-used!)
    /// 2. call #takeThisToo() -&gt; The ObjectRef from before will need to be down-cased to the ParentStruct982 type
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Demonstrate982), fullyQualifiedName: "jsii-calc.Demonstrate982")]
    public class Demonstrate982 : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Demonstrate982(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Demonstrate982(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Demonstrate982(DeputyProps props): base(props)
        {
        }

        /// <summary>It's dangerous to go alone!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "takeThis", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.ChildStruct982\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IChildStruct982 TakeThis()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IChildStruct982>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Demonstrate982), new System.Type[]{}, new object[]{});
        }

        /// <summary>It's dangerous to go alone!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "takeThisToo", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.ParentStruct982\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IParentStruct982 TakeThisToo()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IParentStruct982>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Demonstrate982), new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DeprecatedClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.DeprecatedClass), fullyQualifiedName: "jsii-calc.DeprecatedClass", parametersJson: "[{\\"name\\":\\"readonlyString\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"mutableNumber\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
    [System.Obsolete("a pretty boring class")]
    public class DeprecatedClass : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [System.Obsolete("this constructor is \\"just\\" okay")]
        public DeprecatedClass(string readonlyString, double? mutableNumber = null): base(new DeputyProps(new object?[]{readonlyString, mutableNumber}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.Obsolete("this constructor is \\"just\\" okay")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DeprecatedClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.Obsolete("this constructor is \\"just\\" okay")]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DeprecatedClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "method")]
        [System.Obsolete("it was a bad idea")]
        public virtual void Method()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        [System.Obsolete("this is not always \\"wazoo\\", be ready to be disappointed")]
        public virtual string ReadonlyProperty
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [System.Obsolete("shouldn't have been mutable")]
        public virtual double? MutableProperty
        {
            get => GetInstanceProperty<double?>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DeprecatedEnum.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{

    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiEnum(nativeType: typeof(DeprecatedEnum), fullyQualifiedName: "jsii-calc.DeprecatedEnum")]
    [System.Obsolete("your deprecated selection of bad options")]
    public enum DeprecatedEnum
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiEnumMember(name: "OPTION_A")]
        [System.Obsolete("option A is not great")]
        OPTION_A,
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiEnumMember(name: "OPTION_B")]
        [System.Obsolete("option B is kinda bad, too")]
        OPTION_B
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DeprecatedStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.DeprecatedStruct")]
    public class DeprecatedStruct : Amazon.JSII.Tests.CalculatorNamespace.IDeprecatedStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        [System.Obsolete("well, yeah")]
        public string ReadonlyProperty
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DeprecatedStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IDeprecatedStruct), fullyQualifiedName: "jsii-calc.DeprecatedStruct")]
    [System.Obsolete("it just wraps a string")]
    internal sealed class DeprecatedStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IDeprecatedStruct
    {
        private DeprecatedStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        [System.Obsolete("well, yeah")]
        public string ReadonlyProperty
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DerivedClassHasNoProperties/Base.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.DerivedClassHasNoProperties
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.DerivedClassHasNoProperties.Base), fullyQualifiedName: "jsii-calc.DerivedClassHasNoProperties.Base")]
    public class Base : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Base(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Base(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Base(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "prop", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string Prop
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DerivedClassHasNoProperties/Derived.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.DerivedClassHasNoProperties
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.DerivedClassHasNoProperties.Derived), fullyQualifiedName: "jsii-calc.DerivedClassHasNoProperties.Derived")]
    public class Derived : Amazon.JSII.Tests.CalculatorNamespace.DerivedClassHasNoProperties.Base
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Derived(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Derived(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Derived(DeputyProps props): base(props)
        {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DerivedStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <summary>A struct which derives from another struct.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.DerivedStruct")]
    public class DerivedStruct : Amazon.JSII.Tests.CalculatorNamespace.IDerivedStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "anotherRequired", typeJson: "{\\"primitive\\":\\"date\\"}", isOverride: true)]
        public System.DateTime AnotherRequired
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bool", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOverride: true)]
        public bool Bool
        {
            get;
            set;
        }

        /// <summary>An example of a non primitive property.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "nonPrimitive", typeJson: "{\\"fqn\\":\\"jsii-calc.DoubleTrouble\\"}", isOverride: true)]
        public Amazon.JSII.Tests.CalculatorNamespace.DoubleTrouble NonPrimitive
        {
            get;
            set;
        }

        /// <summary>This is optional.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "anotherOptional", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"},\\"kind\\":\\"map\\"}}", isOptional: true, isOverride: true)]
        public System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>? AnotherOptional
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalAny", typeJson: "{\\"primitive\\":\\"any\\"}", isOptional: true, isOverride: true)]
        public object? OptionalAny
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalArray", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}", isOptional: true, isOverride: true)]
        public string[]? OptionalArray
        {
            get;
            set;
        }

        /// <summary>An awesome number value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "anumber", typeJson: "{\\"primitive\\":\\"number\\"}", isOverride: true)]
        [System.Obsolete()]
        public double Anumber
        {
            get;
            set;
        }

        /// <summary>A string value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "astring", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        [System.Obsolete()]
        public string Astring
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "firstOptional", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}", isOptional: true, isOverride: true)]
        [System.Obsolete()]
        public string[]? FirstOptional
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DerivedStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>A struct which derives from another struct.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IDerivedStruct), fullyQualifiedName: "jsii-calc.DerivedStruct")]
    internal sealed class DerivedStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IDerivedStruct
    {
        private DerivedStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "anotherRequired", typeJson: "{\\"primitive\\":\\"date\\"}")]
        public System.DateTime AnotherRequired
        {
            get => GetInstanceProperty<System.DateTime>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bool", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public bool Bool
        {
            get => GetInstanceProperty<bool>();
        }

        /// <summary>An example of a non primitive property.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "nonPrimitive", typeJson: "{\\"fqn\\":\\"jsii-calc.DoubleTrouble\\"}")]
        public Amazon.JSII.Tests.CalculatorNamespace.DoubleTrouble NonPrimitive
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.DoubleTrouble>();
        }

        /// <summary>This is optional.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "anotherOptional", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"},\\"kind\\":\\"map\\"}}", isOptional: true)]
        public System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>? AnotherOptional
        {
            get => GetInstanceProperty<System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>?>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalAny", typeJson: "{\\"primitive\\":\\"any\\"}", isOptional: true)]
        public object? OptionalAny
        {
            get => GetInstanceProperty<object?>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalArray", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}", isOptional: true)]
        public string[]? OptionalArray
        {
            get => GetInstanceProperty<string[]?>();
        }

        /// <summary>An awesome number value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "anumber", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        public double Anumber
        {
            get => GetInstanceProperty<double>();
        }

        /// <summary>A string value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "astring", typeJson: "{\\"primitive\\":\\"string\\"}")]
        [System.Obsolete()]
        public string Astring
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "firstOptional", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}", isOptional: true)]
        [System.Obsolete()]
        public string[]? FirstOptional
        {
            get => GetInstanceProperty<string[]?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DiamondInheritanceBaseLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.DiamondInheritanceBaseLevelStruct")]
    public class DiamondInheritanceBaseLevelStruct : Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceBaseLevelStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "baseLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string BaseLevelProperty
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DiamondInheritanceBaseLevelStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IDiamondInheritanceBaseLevelStruct), fullyQualifiedName: "jsii-calc.DiamondInheritanceBaseLevelStruct")]
    internal sealed class DiamondInheritanceBaseLevelStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceBaseLevelStruct
    {
        private DiamondInheritanceBaseLevelStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "baseLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string BaseLevelProperty
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DiamondInheritanceFirstMidLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.DiamondInheritanceFirstMidLevelStruct")]
    public class DiamondInheritanceFirstMidLevelStruct : Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceFirstMidLevelStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "firstMidLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string FirstMidLevelProperty
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "baseLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string BaseLevelProperty
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DiamondInheritanceFirstMidLevelStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IDiamondInheritanceFirstMidLevelStruct), fullyQualifiedName: "jsii-calc.DiamondInheritanceFirstMidLevelStruct")]
    internal sealed class DiamondInheritanceFirstMidLevelStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceFirstMidLevelStruct
    {
        private DiamondInheritanceFirstMidLevelStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "firstMidLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string FirstMidLevelProperty
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "baseLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string BaseLevelProperty
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DiamondInheritanceSecondMidLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.DiamondInheritanceSecondMidLevelStruct")]
    public class DiamondInheritanceSecondMidLevelStruct : Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceSecondMidLevelStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "secondMidLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string SecondMidLevelProperty
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "baseLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string BaseLevelProperty
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DiamondInheritanceSecondMidLevelStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IDiamondInheritanceSecondMidLevelStruct), fullyQualifiedName: "jsii-calc.DiamondInheritanceSecondMidLevelStruct")]
    internal sealed class DiamondInheritanceSecondMidLevelStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceSecondMidLevelStruct
    {
        private DiamondInheritanceSecondMidLevelStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "secondMidLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string SecondMidLevelProperty
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "baseLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string BaseLevelProperty
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DiamondInheritanceTopLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.DiamondInheritanceTopLevelStruct")]
    public class DiamondInheritanceTopLevelStruct : Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceTopLevelStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "topLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string TopLevelProperty
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "firstMidLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string FirstMidLevelProperty
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "baseLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string BaseLevelProperty
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "secondMidLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string SecondMidLevelProperty
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DiamondInheritanceTopLevelStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IDiamondInheritanceTopLevelStruct), fullyQualifiedName: "jsii-calc.DiamondInheritanceTopLevelStruct")]
    internal sealed class DiamondInheritanceTopLevelStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceTopLevelStruct
    {
        private DiamondInheritanceTopLevelStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "topLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string TopLevelProperty
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "firstMidLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string FirstMidLevelProperty
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "baseLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string BaseLevelProperty
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "secondMidLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string SecondMidLevelProperty
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DisappointingCollectionSource.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Verifies that null/undefined can be returned for optional collections.</summary>
    /// <remarks>
    /// This source of collections is disappointing - it'll always give you nothing :(
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.DisappointingCollectionSource), fullyQualifiedName: "jsii-calc.DisappointingCollectionSource")]
    public class DisappointingCollectionSource : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DisappointingCollectionSource(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DisappointingCollectionSource(DeputyProps props): base(props)
        {
        }

        /// <summary>Some List of strings, maybe?</summary>
        /// <remarks>
        /// (Nah, just a billion dollars mistake!)
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "maybeList", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}", isOptional: true)]
        public static string[] MaybeList
        {
            get;
        }
        = GetStaticProperty<string[]>(typeof(Amazon.JSII.Tests.CalculatorNamespace.DisappointingCollectionSource));

        /// <summary>Some Map of strings to numbers, maybe?</summary>
        /// <remarks>
        /// (Nah, just a billion dollars mistake!)
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "maybeMap", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"number\\"},\\"kind\\":\\"map\\"}}", isOptional: true)]
        public static System.Collections.Generic.IDictionary<string, double> MaybeMap
        {
            get;
        }
        = GetStaticProperty<System.Collections.Generic.IDictionary<string, double>>(typeof(Amazon.JSII.Tests.CalculatorNamespace.DisappointingCollectionSource));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DoNotOverridePrivates.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.DoNotOverridePrivates), fullyQualifiedName: "jsii-calc.DoNotOverridePrivates")]
    public class DoNotOverridePrivates : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public DoNotOverridePrivates(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DoNotOverridePrivates(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DoNotOverridePrivates(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "changePrivatePropertyValue", parametersJson: "[{\\"name\\":\\"newValue\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public virtual void ChangePrivatePropertyValue(string newValue)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(string)}, new object[]{newValue});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "privateMethodValue", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public virtual string PrivateMethodValue()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "privatePropertyValue", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public virtual string PrivatePropertyValue()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DoNotRecognizeAnyAsOptional.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>jsii#284: do not recognize "any" as an optional argument.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.DoNotRecognizeAnyAsOptional), fullyQualifiedName: "jsii-calc.DoNotRecognizeAnyAsOptional")]
    public class DoNotRecognizeAnyAsOptional : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public DoNotRecognizeAnyAsOptional(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DoNotRecognizeAnyAsOptional(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DoNotRecognizeAnyAsOptional(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "method", parametersJson: "[{\\"name\\":\\"_requiredAny\\",\\"type\\":{\\"primitive\\":\\"any\\"}},{\\"name\\":\\"_optionalAny\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"any\\"}},{\\"name\\":\\"_optionalString\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public virtual void Method(object requiredAny, object? optionalAny = null, string? optionalString = null)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(object), typeof(object), typeof(string)}, new object?[]{requiredAny, optionalAny, optionalString});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DocumentedClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Here's the first line of the TSDoc comment.</summary>
    /// <remarks>
    /// This is the meat of the TSDoc comment. It may contain
    /// multiple lines and multiple paragraphs.
    /// 
    /// Multiple paragraphs are separated by an empty line.
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.DocumentedClass), fullyQualifiedName: "jsii-calc.DocumentedClass")]
    public class DocumentedClass : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public DocumentedClass(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DocumentedClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DocumentedClass(DeputyProps props): base(props)
        {
        }

        /// <summary>Greet the indicated person.</summary>
        /// <param name="greetee">The person to be greeted.</param>
        /// <returns>A number that everyone knows very well</returns>
        /// <remarks>
        /// This will print out a friendly greeting intended for
        /// the indicated person.
        /// </remarks>
        [JsiiMethod(name: "greet", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"The person to be greeted.\\"},\\"name\\":\\"greetee\\",\\"optional\\":true,\\"type\\":{\\"fqn\\":\\"jsii-calc.Greetee\\"}}]")]
        public virtual double Greet(Amazon.JSII.Tests.CalculatorNamespace.IGreetee? greetee = null)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IGreetee)}, new object?[]{greetee});
        }

        /// <summary>Say ¡Hola!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "hola")]
        public virtual void Hola()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DontComplainAboutVariadicAfterOptional.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.DontComplainAboutVariadicAfterOptional), fullyQualifiedName: "jsii-calc.DontComplainAboutVariadicAfterOptional")]
    public class DontComplainAboutVariadicAfterOptional : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public DontComplainAboutVariadicAfterOptional(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DontComplainAboutVariadicAfterOptional(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DontComplainAboutVariadicAfterOptional(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "optionalAndVariadic", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"optional\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"things\\",\\"type\\":{\\"primitive\\":\\"string\\"},\\"variadic\\":true}]")]
        public virtual string OptionalAndVariadic(string? optional = null, params string[] things)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(string), typeof(string[])}, new object?[]{optional, things});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/DoubleTrouble.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.DoubleTrouble), fullyQualifiedName: "jsii-calc.DoubleTrouble")]
    public class DoubleTrouble : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IFriendlyRandomGenerator
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public DoubleTrouble(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DoubleTrouble(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DoubleTrouble(DeputyProps props): base(props)
        {
        }

        /// <summary>Say hello!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "hello", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public virtual string Hello()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Returns another random number.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "next", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", isOverride: true)]
        public virtual double Next()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/EnumDispenser.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.EnumDispenser), fullyQualifiedName: "jsii-calc.EnumDispenser")]
    public class EnumDispenser : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected EnumDispenser(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected EnumDispenser(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "randomIntegerLikeEnum", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.AllTypesEnum\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.AllTypesEnum RandomIntegerLikeEnum()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.AllTypesEnum>(typeof(Amazon.JSII.Tests.CalculatorNamespace.EnumDispenser), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "randomStringLikeEnum", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.StringEnum\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.StringEnum RandomStringLikeEnum()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.StringEnum>(typeof(Amazon.JSII.Tests.CalculatorNamespace.EnumDispenser), new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/EraseUndefinedHashValues.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.EraseUndefinedHashValues), fullyQualifiedName: "jsii-calc.EraseUndefinedHashValues")]
    public class EraseUndefinedHashValues : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public EraseUndefinedHashValues(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected EraseUndefinedHashValues(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected EraseUndefinedHashValues(DeputyProps props): base(props)
        {
        }

        /// <summary>Returns \`true\` if \`key\` is defined in \`opts\`.</summary>
        /// <remarks>
        /// Used to check that undefined/null hash values
        /// are being erased when sending values from native code to JS.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "doesKeyExist", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"opts\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.EraseUndefinedHashValuesOptions\\"}},{\\"name\\":\\"key\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public static bool DoesKeyExist(Amazon.JSII.Tests.CalculatorNamespace.IEraseUndefinedHashValuesOptions opts, string key)
        {
            return InvokeStaticMethod<bool>(typeof(Amazon.JSII.Tests.CalculatorNamespace.EraseUndefinedHashValues), new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IEraseUndefinedHashValuesOptions), typeof(string)}, new object[]{opts, key});
        }

        /// <summary>We expect "prop1" to be erased.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "prop1IsNull", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"map\\"}}}")]
        public static System.Collections.Generic.IDictionary<string, object> Prop1IsNull()
        {
            return InvokeStaticMethod<System.Collections.Generic.IDictionary<string, object>>(typeof(Amazon.JSII.Tests.CalculatorNamespace.EraseUndefinedHashValues), new System.Type[]{}, new object[]{});
        }

        /// <summary>We expect "prop2" to be erased.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "prop2IsUndefined", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"map\\"}}}")]
        public static System.Collections.Generic.IDictionary<string, object> Prop2IsUndefined()
        {
            return InvokeStaticMethod<System.Collections.Generic.IDictionary<string, object>>(typeof(Amazon.JSII.Tests.CalculatorNamespace.EraseUndefinedHashValues), new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/EraseUndefinedHashValuesOptions.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.EraseUndefinedHashValuesOptions")]
    public class EraseUndefinedHashValuesOptions : Amazon.JSII.Tests.CalculatorNamespace.IEraseUndefinedHashValuesOptions
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "option1", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? Option1
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "option2", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? Option2
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/EraseUndefinedHashValuesOptionsProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IEraseUndefinedHashValuesOptions), fullyQualifiedName: "jsii-calc.EraseUndefinedHashValuesOptions")]
    internal sealed class EraseUndefinedHashValuesOptionsProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IEraseUndefinedHashValuesOptions
    {
        private EraseUndefinedHashValuesOptionsProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "option1", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? Option1
        {
            get => GetInstanceProperty<string?>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "option2", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? Option2
        {
            get => GetInstanceProperty<string?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ExperimentalClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ExperimentalClass), fullyQualifiedName: "jsii-calc.ExperimentalClass", parametersJson: "[{\\"name\\":\\"readonlyString\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"mutableNumber\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
    public class ExperimentalClass : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ExperimentalClass(string readonlyString, double? mutableNumber = null): base(new DeputyProps(new object?[]{readonlyString, mutableNumber}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ExperimentalClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ExperimentalClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "method")]
        public virtual void Method()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string ReadonlyProperty
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        public virtual double? MutableProperty
        {
            get => GetInstanceProperty<double?>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ExperimentalEnum.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiEnum(nativeType: typeof(ExperimentalEnum), fullyQualifiedName: "jsii-calc.ExperimentalEnum")]
    public enum ExperimentalEnum
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "OPTION_A")]
        OPTION_A,
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "OPTION_B")]
        OPTION_B
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ExperimentalStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.ExperimentalStruct")]
    public class ExperimentalStruct : Amazon.JSII.Tests.CalculatorNamespace.IExperimentalStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string ReadonlyProperty
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ExperimentalStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IExperimentalStruct), fullyQualifiedName: "jsii-calc.ExperimentalStruct")]
    internal sealed class ExperimentalStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IExperimentalStruct
    {
        private ExperimentalStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string ReadonlyProperty
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ExportedBaseClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ExportedBaseClass), fullyQualifiedName: "jsii-calc.ExportedBaseClass", parametersJson: "[{\\"name\\":\\"success\\",\\"type\\":{\\"primitive\\":\\"boolean\\"}}]")]
    public class ExportedBaseClass : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ExportedBaseClass(bool success): base(new DeputyProps(new object[]{success}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ExportedBaseClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ExportedBaseClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "success", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public virtual bool Success
        {
            get => GetInstanceProperty<bool>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ExtendsInternalInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.ExtendsInternalInterface")]
    public class ExtendsInternalInterface : Amazon.JSII.Tests.CalculatorNamespace.IExtendsInternalInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "boom", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOverride: true)]
        public bool Boom
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "prop", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string Prop
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ExtendsInternalInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IExtendsInternalInterface), fullyQualifiedName: "jsii-calc.ExtendsInternalInterface")]
    internal sealed class ExtendsInternalInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IExtendsInternalInterface
    {
        private ExtendsInternalInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "boom", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public bool Boom
        {
            get => GetInstanceProperty<bool>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "prop", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Prop
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ExternalClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>External</strong>: true
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ExternalClass), fullyQualifiedName: "jsii-calc.ExternalClass", parametersJson: "[{\\"name\\":\\"readonlyString\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"mutableNumber\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
    public class ExternalClass : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        public ExternalClass(string readonlyString, double? mutableNumber = null): base(new DeputyProps(new object?[]{readonlyString, mutableNumber}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ExternalClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ExternalClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiMethod(name: "method")]
        public virtual void Method()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string ReadonlyProperty
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        public virtual double? MutableProperty
        {
            get => GetInstanceProperty<double?>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ExternalEnum.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>External</strong>: true
    /// </remarks>
    [JsiiEnum(nativeType: typeof(ExternalEnum), fullyQualifiedName: "jsii-calc.ExternalEnum")]
    public enum ExternalEnum
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiEnumMember(name: "OPTION_A")]
        OPTION_A,
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiEnumMember(name: "OPTION_B")]
        OPTION_B
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ExternalStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>External</strong>: true
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.ExternalStruct")]
    public class ExternalStruct : Amazon.JSII.Tests.CalculatorNamespace.IExternalStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string ReadonlyProperty
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ExternalStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>External</strong>: true
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IExternalStruct), fullyQualifiedName: "jsii-calc.ExternalStruct")]
    internal sealed class ExternalStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IExternalStruct
    {
        private ExternalStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string ReadonlyProperty
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/GiveMeStructs.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.GiveMeStructs), fullyQualifiedName: "jsii-calc.GiveMeStructs")]
    public class GiveMeStructs : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public GiveMeStructs(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected GiveMeStructs(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected GiveMeStructs(DeputyProps props): base(props)
        {
        }

        /// <summary>Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "derivedToFirst", returnsJson: "{\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.MyFirstStruct\\"}}", parametersJson: "[{\\"name\\":\\"derived\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.DerivedStruct\\"}}]")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IMyFirstStruct DerivedToFirst(Amazon.JSII.Tests.CalculatorNamespace.IDerivedStruct derived)
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IMyFirstStruct>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IDerivedStruct)}, new object[]{derived});
        }

        /// <summary>Returns the boolean from a DerivedStruct struct.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "readDerivedNonPrimitive", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.DoubleTrouble\\"}}", parametersJson: "[{\\"name\\":\\"derived\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.DerivedStruct\\"}}]")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.DoubleTrouble ReadDerivedNonPrimitive(Amazon.JSII.Tests.CalculatorNamespace.IDerivedStruct derived)
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.DoubleTrouble>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IDerivedStruct)}, new object[]{derived});
        }

        /// <summary>Returns the "anumber" from a MyFirstStruct struct;</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "readFirstNumber", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"first\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.MyFirstStruct\\"}}]")]
        public virtual double ReadFirstNumber(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IMyFirstStruct first)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IMyFirstStruct)}, new object[]{first});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "structLiteral", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.StructWithOnlyOptionals\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IStructWithOnlyOptionals StructLiteral
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IStructWithOnlyOptionals>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Greetee.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>These are some arguments you can pass to a method.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.Greetee")]
    public class Greetee : Amazon.JSII.Tests.CalculatorNamespace.IGreetee
    {
        /// <summary>The name of the greetee.</summary>
        /// <remarks>
        /// <strong>Default</strong>: world
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "name", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? Name
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/GreeteeProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>These are some arguments you can pass to a method.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IGreetee), fullyQualifiedName: "jsii-calc.Greetee")]
    internal sealed class GreeteeProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IGreetee
    {
        private GreeteeProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>The name of the greetee.</summary>
        /// <remarks>
        /// <strong>Default</strong>: world
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "name", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? Name
        {
            get => GetInstanceProperty<string?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/GreetingAugmenter.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.GreetingAugmenter), fullyQualifiedName: "jsii-calc.GreetingAugmenter")]
    public class GreetingAugmenter : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public GreetingAugmenter(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected GreetingAugmenter(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected GreetingAugmenter(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "betterGreeting", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"friendly\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.IFriendly\\"}}]")]
        public virtual string BetterGreeting(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IFriendly friendly)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IFriendly)}, new object[]{friendly});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IAnonymousImplementationProvider.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>We can return an anonymous interface implementation from an override without losing the interface declarations.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IAnonymousImplementationProvider), fullyQualifiedName: "jsii-calc.IAnonymousImplementationProvider")]
    public interface IAnonymousImplementationProvider
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "provideAsClass", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.Implementation\\"}}")]
        Amazon.JSII.Tests.CalculatorNamespace.Implementation ProvideAsClass();
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "provideAsInterface", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.IAnonymouslyImplementMe\\"}}")]
        Amazon.JSII.Tests.CalculatorNamespace.IAnonymouslyImplementMe ProvideAsInterface();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IAnonymousImplementationProviderProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>We can return an anonymous interface implementation from an override without losing the interface declarations.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IAnonymousImplementationProvider), fullyQualifiedName: "jsii-calc.IAnonymousImplementationProvider")]
    internal sealed class IAnonymousImplementationProviderProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IAnonymousImplementationProvider
    {
        private IAnonymousImplementationProviderProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "provideAsClass", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.Implementation\\"}}")]
        public Amazon.JSII.Tests.CalculatorNamespace.Implementation ProvideAsClass()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.Implementation>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "provideAsInterface", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.IAnonymouslyImplementMe\\"}}")]
        public Amazon.JSII.Tests.CalculatorNamespace.IAnonymouslyImplementMe ProvideAsInterface()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.IAnonymouslyImplementMe>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IAnonymouslyImplementMe.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IAnonymouslyImplementMe), fullyQualifiedName: "jsii-calc.IAnonymouslyImplementMe")]
    public interface IAnonymouslyImplementMe
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        double Value
        {
            get;
        }
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "verb", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        string Verb();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IAnonymouslyImplementMeProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IAnonymouslyImplementMe), fullyQualifiedName: "jsii-calc.IAnonymouslyImplementMe")]
    internal sealed class IAnonymouslyImplementMeProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IAnonymouslyImplementMe
    {
        private IAnonymouslyImplementMeProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public double Value
        {
            get => GetInstanceProperty<double>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "verb", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public string Verb()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IAnotherPublicInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IAnotherPublicInterface), fullyQualifiedName: "jsii-calc.IAnotherPublicInterface")]
    public interface IAnotherPublicInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "a", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string A
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IAnotherPublicInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IAnotherPublicInterface), fullyQualifiedName: "jsii-calc.IAnotherPublicInterface")]
    internal sealed class IAnotherPublicInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IAnotherPublicInterface
    {
        private IAnotherPublicInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "a", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string A
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IBell.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IBell), fullyQualifiedName: "jsii-calc.IBell")]
    public interface IBell
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "ring")]
        void Ring();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IBellProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IBell), fullyQualifiedName: "jsii-calc.IBell")]
    internal sealed class IBellProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IBell
    {
        private IBellProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "ring")]
        public void Ring()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IBellRinger.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Takes the object parameter as an interface.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IBellRinger), fullyQualifiedName: "jsii-calc.IBellRinger")]
    public interface IBellRinger
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "yourTurn", parametersJson: "[{\\"name\\":\\"bell\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IBell\\"}}]")]
        void YourTurn(Amazon.JSII.Tests.CalculatorNamespace.IBell bell);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IBellRingerProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Takes the object parameter as an interface.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IBellRinger), fullyQualifiedName: "jsii-calc.IBellRinger")]
    internal sealed class IBellRingerProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IBellRinger
    {
        private IBellRingerProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "yourTurn", parametersJson: "[{\\"name\\":\\"bell\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IBell\\"}}]")]
        public void YourTurn(Amazon.JSII.Tests.CalculatorNamespace.IBell bell)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IBell)}, new object[]{bell});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ICalculatorProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Properties for Calculator.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(ICalculatorProps), fullyQualifiedName: "jsii-calc.CalculatorProps")]
    public interface ICalculatorProps
    {
        /// <summary>The initial value of the calculator.</summary>
        /// <remarks>
        /// NOTE: Any number works here, it's fine.
        /// 
        /// <strong>Default</strong>: 0
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "initialValue", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? InitialValue
        {
            get
            {
                return null;
            }
        }

        /// <summary>The maximum value the calculator can store.</summary>
        /// <remarks>
        /// <strong>Default</strong>: none
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "maximumValue", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? MaximumValue
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IChildStruct982.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IChildStruct982), fullyQualifiedName: "jsii-calc.ChildStruct982")]
    public interface IChildStruct982 : Amazon.JSII.Tests.CalculatorNamespace.IParentStruct982
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"number\\"}")]
        double Bar
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IConcreteBellRinger.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Takes the object parameter as a calss.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IConcreteBellRinger), fullyQualifiedName: "jsii-calc.IConcreteBellRinger")]
    public interface IConcreteBellRinger
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "yourTurn", parametersJson: "[{\\"name\\":\\"bell\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.Bell\\"}}]")]
        void YourTurn(Amazon.JSII.Tests.CalculatorNamespace.Bell bell);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IConcreteBellRingerProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Takes the object parameter as a calss.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IConcreteBellRinger), fullyQualifiedName: "jsii-calc.IConcreteBellRinger")]
    internal sealed class IConcreteBellRingerProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IConcreteBellRinger
    {
        private IConcreteBellRingerProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "yourTurn", parametersJson: "[{\\"name\\":\\"bell\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.Bell\\"}}]")]
        public void YourTurn(Amazon.JSII.Tests.CalculatorNamespace.Bell bell)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.Bell)}, new object[]{bell});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IConfusingToJacksonStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IConfusingToJacksonStruct), fullyQualifiedName: "jsii-calc.ConfusingToJacksonStruct")]
    public interface IConfusingToJacksonStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "unionProperty", typeJson: "{\\"union\\":{\\"types\\":[{\\"fqn\\":\\"@scope/jsii-calc-lib.IFriendly\\"},{\\"collection\\":{\\"elementtype\\":{\\"union\\":{\\"types\\":[{\\"fqn\\":\\"@scope/jsii-calc-lib.IFriendly\\"},{\\"fqn\\":\\"jsii-calc.AbstractClass\\"}]}},\\"kind\\":\\"array\\"}}]}}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        object? UnionProperty
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IDeprecatedInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IDeprecatedInterface), fullyQualifiedName: "jsii-calc.IDeprecatedInterface")]
    [System.Obsolete("useless interface")]
    public interface IDeprecatedInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [System.Obsolete("could be better")]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? MutableProperty
        {
            get
            {
                return null;
            }
            set
            {
                throw new System.NotSupportedException("'set' for 'MutableProperty' is not implemented");
            }
        }
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "method")]
        [System.Obsolete("services no purpose")]
        void Method();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IDeprecatedInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IDeprecatedInterface), fullyQualifiedName: "jsii-calc.IDeprecatedInterface")]
    [System.Obsolete("useless interface")]
    internal sealed class IDeprecatedInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IDeprecatedInterface
    {
        private IDeprecatedInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [System.Obsolete("could be better")]
        public double? MutableProperty
        {
            get => GetInstanceProperty<double?>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "method")]
        [System.Obsolete("services no purpose")]
        public void Method()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IDeprecatedStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IDeprecatedStruct), fullyQualifiedName: "jsii-calc.DeprecatedStruct")]
    [System.Obsolete("it just wraps a string")]
    public interface IDeprecatedStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        [System.Obsolete("well, yeah")]
        string ReadonlyProperty
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IDerivedStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>A struct which derives from another struct.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IDerivedStruct), fullyQualifiedName: "jsii-calc.DerivedStruct")]
    public interface IDerivedStruct : Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IMyFirstStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "anotherRequired", typeJson: "{\\"primitive\\":\\"date\\"}")]
        System.DateTime AnotherRequired
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bool", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        bool Bool
        {
            get;
        }

        /// <summary>An example of a non primitive property.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "nonPrimitive", typeJson: "{\\"fqn\\":\\"jsii-calc.DoubleTrouble\\"}")]
        Amazon.JSII.Tests.CalculatorNamespace.DoubleTrouble NonPrimitive
        {
            get;
        }

        /// <summary>This is optional.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "anotherOptional", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"},\\"kind\\":\\"map\\"}}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>? AnotherOptional
        {
            get
            {
                return null;
            }
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "optionalAny", typeJson: "{\\"primitive\\":\\"any\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        object? OptionalAny
        {
            get
            {
                return null;
            }
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "optionalArray", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string[]? OptionalArray
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IDiamondInheritanceBaseLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IDiamondInheritanceBaseLevelStruct), fullyQualifiedName: "jsii-calc.DiamondInheritanceBaseLevelStruct")]
    public interface IDiamondInheritanceBaseLevelStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "baseLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string BaseLevelProperty
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IDiamondInheritanceFirstMidLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IDiamondInheritanceFirstMidLevelStruct), fullyQualifiedName: "jsii-calc.DiamondInheritanceFirstMidLevelStruct")]
    public interface IDiamondInheritanceFirstMidLevelStruct : Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceBaseLevelStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "firstMidLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string FirstMidLevelProperty
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IDiamondInheritanceSecondMidLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IDiamondInheritanceSecondMidLevelStruct), fullyQualifiedName: "jsii-calc.DiamondInheritanceSecondMidLevelStruct")]
    public interface IDiamondInheritanceSecondMidLevelStruct : Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceBaseLevelStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "secondMidLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string SecondMidLevelProperty
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IDiamondInheritanceTopLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IDiamondInheritanceTopLevelStruct), fullyQualifiedName: "jsii-calc.DiamondInheritanceTopLevelStruct")]
    public interface IDiamondInheritanceTopLevelStruct : Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceFirstMidLevelStruct, Amazon.JSII.Tests.CalculatorNamespace.IDiamondInheritanceSecondMidLevelStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "topLevelProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string TopLevelProperty
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IEraseUndefinedHashValuesOptions.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IEraseUndefinedHashValuesOptions), fullyQualifiedName: "jsii-calc.EraseUndefinedHashValuesOptions")]
    public interface IEraseUndefinedHashValuesOptions
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "option1", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Option1
        {
            get
            {
                return null;
            }
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "option2", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Option2
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IExperimentalInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IExperimentalInterface), fullyQualifiedName: "jsii-calc.IExperimentalInterface")]
    public interface IExperimentalInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? MutableProperty
        {
            get
            {
                return null;
            }
            set
            {
                throw new System.NotSupportedException("'set' for 'MutableProperty' is not implemented");
            }
        }
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "method")]
        void Method();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IExperimentalInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IExperimentalInterface), fullyQualifiedName: "jsii-calc.IExperimentalInterface")]
    internal sealed class IExperimentalInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IExperimentalInterface
    {
        private IExperimentalInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        public double? MutableProperty
        {
            get => GetInstanceProperty<double?>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "method")]
        public void Method()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IExperimentalStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IExperimentalStruct), fullyQualifiedName: "jsii-calc.ExperimentalStruct")]
    public interface IExperimentalStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string ReadonlyProperty
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IExtendsInternalInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IExtendsInternalInterface), fullyQualifiedName: "jsii-calc.ExtendsInternalInterface")]
    public interface IExtendsInternalInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "boom", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        bool Boom
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "prop", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Prop
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IExtendsPrivateInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IExtendsPrivateInterface), fullyQualifiedName: "jsii-calc.IExtendsPrivateInterface")]
    public interface IExtendsPrivateInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "moreThings", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}")]
        string[] MoreThings
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "private", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Private
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IExtendsPrivateInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IExtendsPrivateInterface), fullyQualifiedName: "jsii-calc.IExtendsPrivateInterface")]
    internal sealed class IExtendsPrivateInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IExtendsPrivateInterface
    {
        private IExtendsPrivateInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "moreThings", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}")]
        public string[] MoreThings
        {
            get => GetInstanceProperty<string[]>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "private", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Private
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IExternalInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>External</strong>: true
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IExternalInterface), fullyQualifiedName: "jsii-calc.IExternalInterface")]
    public interface IExternalInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? MutableProperty
        {
            get
            {
                return null;
            }
            set
            {
                throw new System.NotSupportedException("'set' for 'MutableProperty' is not implemented");
            }
        }
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiMethod(name: "method")]
        void Method();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IExternalInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>External</strong>: true
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IExternalInterface), fullyQualifiedName: "jsii-calc.IExternalInterface")]
    internal sealed class IExternalInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IExternalInterface
    {
        private IExternalInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        public double? MutableProperty
        {
            get => GetInstanceProperty<double?>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiMethod(name: "method")]
        public void Method()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IExternalStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>External</strong>: true
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IExternalStruct), fullyQualifiedName: "jsii-calc.ExternalStruct")]
    public interface IExternalStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// 
        /// <strong>External</strong>: true
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string ReadonlyProperty
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IFriendlier.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Even friendlier classes can implement this interface.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IFriendlier), fullyQualifiedName: "jsii-calc.IFriendlier")]
    public interface IFriendlier : Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IFriendly
    {
        /// <summary>Say farewell.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "farewell", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        string Farewell();
        /// <summary>Say goodbye.</summary>
        /// <returns>A goodbye blessing.</returns>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "goodbye", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        string Goodbye();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IFriendlierProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Even friendlier classes can implement this interface.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IFriendlier), fullyQualifiedName: "jsii-calc.IFriendlier")]
    internal sealed class IFriendlierProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IFriendlier
    {
        private IFriendlierProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Say farewell.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "farewell", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public string Farewell()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Say goodbye.</summary>
        /// <returns>A goodbye blessing.</returns>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "goodbye", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public string Goodbye()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Say hello!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "hello", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        [System.Obsolete()]
        public string Hello()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IFriendlyRandomGenerator.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IFriendlyRandomGenerator), fullyQualifiedName: "jsii-calc.IFriendlyRandomGenerator")]
    public interface IFriendlyRandomGenerator : Amazon.JSII.Tests.CalculatorNamespace.IRandomNumberGenerator, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IFriendly
    {
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IFriendlyRandomGeneratorProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IFriendlyRandomGenerator), fullyQualifiedName: "jsii-calc.IFriendlyRandomGenerator")]
    internal sealed class IFriendlyRandomGeneratorProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IFriendlyRandomGenerator
    {
        private IFriendlyRandomGeneratorProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Returns another random number.</summary>
        /// <returns>A random number.</returns>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "next", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}")]
        public double Next()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Say hello!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "hello", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        [System.Obsolete()]
        public string Hello()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IGreetee.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>These are some arguments you can pass to a method.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IGreetee), fullyQualifiedName: "jsii-calc.Greetee")]
    public interface IGreetee
    {
        /// <summary>The name of the greetee.</summary>
        /// <remarks>
        /// <strong>Default</strong>: world
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "name", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Name
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IImplictBaseOfBase.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IImplictBaseOfBase), fullyQualifiedName: "jsii-calc.ImplictBaseOfBase")]
    public interface IImplictBaseOfBase : Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.IBaseProps
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "goo", typeJson: "{\\"primitive\\":\\"date\\"}")]
        System.DateTime Goo
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceImplementedByAbstractClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>awslabs/jsii#220 Abstract return type.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IInterfaceImplementedByAbstractClass), fullyQualifiedName: "jsii-calc.IInterfaceImplementedByAbstractClass")]
    public interface IInterfaceImplementedByAbstractClass
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "propFromInterface", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string PropFromInterface
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceImplementedByAbstractClassProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>awslabs/jsii#220 Abstract return type.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IInterfaceImplementedByAbstractClass), fullyQualifiedName: "jsii-calc.IInterfaceImplementedByAbstractClass")]
    internal sealed class IInterfaceImplementedByAbstractClassProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IInterfaceImplementedByAbstractClass
    {
        private IInterfaceImplementedByAbstractClassProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "propFromInterface", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string PropFromInterface
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceThatShouldNotBeADataType.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IInterfaceThatShouldNotBeADataType), fullyQualifiedName: "jsii-calc.IInterfaceThatShouldNotBeADataType")]
    public interface IInterfaceThatShouldNotBeADataType : Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithMethods
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "otherValue", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string OtherValue
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceThatShouldNotBeADataTypeProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IInterfaceThatShouldNotBeADataType), fullyQualifiedName: "jsii-calc.IInterfaceThatShouldNotBeADataType")]
    internal sealed class IInterfaceThatShouldNotBeADataTypeProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IInterfaceThatShouldNotBeADataType
    {
        private IInterfaceThatShouldNotBeADataTypeProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "otherValue", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string OtherValue
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Value
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "doThings")]
        public void DoThings()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceWithInternal.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IInterfaceWithInternal), fullyQualifiedName: "jsii-calc.IInterfaceWithInternal")]
    public interface IInterfaceWithInternal
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "visible")]
        void Visible();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceWithInternalProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IInterfaceWithInternal), fullyQualifiedName: "jsii-calc.IInterfaceWithInternal")]
    internal sealed class IInterfaceWithInternalProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithInternal
    {
        private IInterfaceWithInternalProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "visible")]
        public void Visible()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceWithMethods.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IInterfaceWithMethods), fullyQualifiedName: "jsii-calc.IInterfaceWithMethods")]
    public interface IInterfaceWithMethods
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Value
        {
            get;
        }
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "doThings")]
        void DoThings();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceWithMethodsProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IInterfaceWithMethods), fullyQualifiedName: "jsii-calc.IInterfaceWithMethods")]
    internal sealed class IInterfaceWithMethodsProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithMethods
    {
        private IInterfaceWithMethodsProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Value
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "doThings")]
        public void DoThings()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceWithOptionalMethodArguments.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IInterfaceWithOptionalMethodArguments), fullyQualifiedName: "jsii-calc.IInterfaceWithOptionalMethodArguments")]
    public interface IInterfaceWithOptionalMethodArguments
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "hello", parametersJson: "[{\\"name\\":\\"arg1\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"arg2\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        void Hello(string arg1, double? arg2 = null);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceWithOptionalMethodArgumentsProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IInterfaceWithOptionalMethodArguments), fullyQualifiedName: "jsii-calc.IInterfaceWithOptionalMethodArguments")]
    internal sealed class IInterfaceWithOptionalMethodArgumentsProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithOptionalMethodArguments
    {
        private IInterfaceWithOptionalMethodArgumentsProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "hello", parametersJson: "[{\\"name\\":\\"arg1\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"arg2\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public void Hello(string arg1, double? arg2 = null)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(string), typeof(double)}, new object?[]{arg1, arg2});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceWithProperties.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IInterfaceWithProperties), fullyQualifiedName: "jsii-calc.IInterfaceWithProperties")]
    public interface IInterfaceWithProperties
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readOnlyString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string ReadOnlyString
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readWriteString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string ReadWriteString
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceWithPropertiesExtension.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IInterfaceWithPropertiesExtension), fullyQualifiedName: "jsii-calc.IInterfaceWithPropertiesExtension")]
    public interface IInterfaceWithPropertiesExtension : Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithProperties
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"number\\"}")]
        double Foo
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceWithPropertiesExtensionProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IInterfaceWithPropertiesExtension), fullyQualifiedName: "jsii-calc.IInterfaceWithPropertiesExtension")]
    internal sealed class IInterfaceWithPropertiesExtensionProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithPropertiesExtension
    {
        private IInterfaceWithPropertiesExtensionProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public double Foo
        {
            get => GetInstanceProperty<double>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readOnlyString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string ReadOnlyString
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readWriteString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string ReadWriteString
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IInterfaceWithPropertiesProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IInterfaceWithProperties), fullyQualifiedName: "jsii-calc.IInterfaceWithProperties")]
    internal sealed class IInterfaceWithPropertiesProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithProperties
    {
        private IInterfaceWithPropertiesProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readOnlyString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string ReadOnlyString
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readWriteString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string ReadWriteString
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IJSII417Derived.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IJSII417Derived), fullyQualifiedName: "jsii-calc.IJSII417Derived")]
    public interface IJSII417Derived : Amazon.JSII.Tests.CalculatorNamespace.IJSII417PublicBaseOfBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Property
        {
            get;
        }
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "bar")]
        void Bar();
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "baz")]
        void Baz();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IJSII417DerivedProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IJSII417Derived), fullyQualifiedName: "jsii-calc.IJSII417Derived")]
    internal sealed class IJSII417DerivedProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IJSII417Derived
    {
        private IJSII417DerivedProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Property
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "hasRoot", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public bool HasRoot
        {
            get => GetInstanceProperty<bool>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "bar")]
        public void Bar()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "baz")]
        public void Baz()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "foo")]
        public void Foo()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IJSII417PublicBaseOfBase.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IJSII417PublicBaseOfBase), fullyQualifiedName: "jsii-calc.IJSII417PublicBaseOfBase")]
    public interface IJSII417PublicBaseOfBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "hasRoot", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        bool HasRoot
        {
            get;
        }
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "foo")]
        void Foo();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IJSII417PublicBaseOfBaseProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IJSII417PublicBaseOfBase), fullyQualifiedName: "jsii-calc.IJSII417PublicBaseOfBase")]
    internal sealed class IJSII417PublicBaseOfBaseProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IJSII417PublicBaseOfBase
    {
        private IJSII417PublicBaseOfBaseProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "hasRoot", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public bool HasRoot
        {
            get => GetInstanceProperty<bool>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "foo")]
        public void Foo()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IJsii487External.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IJsii487External), fullyQualifiedName: "jsii-calc.IJsii487External")]
    public interface IJsii487External
    {
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IJsii487External2.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IJsii487External2), fullyQualifiedName: "jsii-calc.IJsii487External2")]
    public interface IJsii487External2
    {
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IJsii487External2Proxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IJsii487External2), fullyQualifiedName: "jsii-calc.IJsii487External2")]
    internal sealed class IJsii487External2Proxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IJsii487External2
    {
        private IJsii487External2Proxy(ByRefValue reference): base(reference)
        {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IJsii487ExternalProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IJsii487External), fullyQualifiedName: "jsii-calc.IJsii487External")]
    internal sealed class IJsii487ExternalProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IJsii487External
    {
        private IJsii487ExternalProxy(ByRefValue reference): base(reference)
        {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IJsii496.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IJsii496), fullyQualifiedName: "jsii-calc.IJsii496")]
    public interface IJsii496
    {
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IJsii496Proxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IJsii496), fullyQualifiedName: "jsii-calc.IJsii496")]
    internal sealed class IJsii496Proxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IJsii496
    {
        private IJsii496Proxy(ByRefValue reference): base(reference)
        {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ILoadBalancedFargateServiceProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>jsii#298: show default values in sphinx documentation, and respect newlines.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(ILoadBalancedFargateServiceProps), fullyQualifiedName: "jsii-calc.LoadBalancedFargateServiceProps")]
    public interface ILoadBalancedFargateServiceProps
    {
        /// <summary>The container port of the application load balancer attached to your Fargate service.</summary>
        /// <remarks>
        /// Corresponds to container port mapping.
        /// 
        /// <strong>Default</strong>: 80
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "containerPort", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? ContainerPort
        {
            get
            {
                return null;
            }
        }

        /// <summary>The number of cpu units used by the task.</summary>
        /// <remarks>
        /// Valid values, which determines your range of valid values for the memory parameter:
        /// 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
        /// 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
        /// 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
        /// 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
        /// 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
        /// 
        /// This default is set in the underlying FargateTaskDefinition construct.
        /// 
        /// <strong>Default</strong>: 256
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "cpu", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Cpu
        {
            get
            {
                return null;
            }
        }

        /// <summary>The amount (in MiB) of memory used by the task.</summary>
        /// <remarks>
        /// This field is required and you must use one of the following values, which determines your range of valid values
        /// for the cpu parameter:
        /// 
        /// 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
        /// 
        /// 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
        /// 
        /// 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
        /// 
        /// Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
        /// 
        /// Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
        /// 
        /// This default is set in the underlying FargateTaskDefinition construct.
        /// 
        /// <strong>Default</strong>: 512
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "memoryMiB", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? MemoryMiB
        {
            get
            {
                return null;
            }
        }

        /// <summary>Determines whether the Application Load Balancer will be internet-facing.</summary>
        /// <remarks>
        /// <strong>Default</strong>: true
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "publicLoadBalancer", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        bool? PublicLoadBalancer
        {
            get
            {
                return null;
            }
        }

        /// <summary>Determines whether your Fargate Service will be assigned a public IP address.</summary>
        /// <remarks>
        /// <strong>Default</strong>: false
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "publicTasks", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        bool? PublicTasks
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IMutableObjectLiteral.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IMutableObjectLiteral), fullyQualifiedName: "jsii-calc.IMutableObjectLiteral")]
    public interface IMutableObjectLiteral
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Value
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IMutableObjectLiteralProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IMutableObjectLiteral), fullyQualifiedName: "jsii-calc.IMutableObjectLiteral")]
    internal sealed class IMutableObjectLiteralProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IMutableObjectLiteral
    {
        private IMutableObjectLiteralProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Value
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/INestedStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(INestedStruct), fullyQualifiedName: "jsii-calc.NestedStruct")]
    public interface INestedStruct
    {
        /// <summary>When provided, must be &gt; 0.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "numberProp", typeJson: "{\\"primitive\\":\\"number\\"}")]
        double NumberProp
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/INonInternalInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(INonInternalInterface), fullyQualifiedName: "jsii-calc.INonInternalInterface")]
    public interface INonInternalInterface : Amazon.JSII.Tests.CalculatorNamespace.IAnotherPublicInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "b", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string B
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "c", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string C
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/INonInternalInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(INonInternalInterface), fullyQualifiedName: "jsii-calc.INonInternalInterface")]
    internal sealed class INonInternalInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.INonInternalInterface
    {
        private INonInternalInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "b", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string B
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "c", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string C
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "a", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string A
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/INullShouldBeTreatedAsUndefinedData.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(INullShouldBeTreatedAsUndefinedData), fullyQualifiedName: "jsii-calc.NullShouldBeTreatedAsUndefinedData")]
    public interface INullShouldBeTreatedAsUndefinedData
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "arrayWithThreeElementsAndUndefinedAsSecondArgument", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"array\\"}}")]
        object[] ArrayWithThreeElementsAndUndefinedAsSecondArgument
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "thisShouldBeUndefined", typeJson: "{\\"primitive\\":\\"any\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        object? ThisShouldBeUndefined
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IObjectWithProperty.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Make sure that setters are properly called on objects with interfaces.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IObjectWithProperty), fullyQualifiedName: "jsii-calc.IObjectWithProperty")]
    public interface IObjectWithProperty
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Property
        {
            get;
            set;
        }
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "wasSet", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}")]
        bool WasSet();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IObjectWithPropertyProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Make sure that setters are properly called on objects with interfaces.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IObjectWithProperty), fullyQualifiedName: "jsii-calc.IObjectWithProperty")]
    internal sealed class IObjectWithPropertyProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IObjectWithProperty
    {
        private IObjectWithPropertyProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Property
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "wasSet", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}")]
        public bool WasSet()
        {
            return InvokeInstanceMethod<bool>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IOptionalMethod.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Checks that optional result from interface method code generates correctly.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IOptionalMethod), fullyQualifiedName: "jsii-calc.IOptionalMethod")]
    public interface IOptionalMethod
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "optional", returnsJson: "{\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        string? Optional();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IOptionalMethodProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Checks that optional result from interface method code generates correctly.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IOptionalMethod), fullyQualifiedName: "jsii-calc.IOptionalMethod")]
    internal sealed class IOptionalMethodProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IOptionalMethod
    {
        private IOptionalMethodProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "optional", returnsJson: "{\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public string? Optional()
        {
            return InvokeInstanceMethod<string?>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IOptionalStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IOptionalStruct), fullyQualifiedName: "jsii-calc.OptionalStruct")]
    public interface IOptionalStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "field", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Field
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IParentStruct982.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>https://github.com/aws/jsii/issues/982.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IParentStruct982), fullyQualifiedName: "jsii-calc.ParentStruct982")]
    public interface IParentStruct982
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Foo
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IPrivatelyImplemented.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IPrivatelyImplemented), fullyQualifiedName: "jsii-calc.IPrivatelyImplemented")]
    public interface IPrivatelyImplemented
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "success", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        bool Success
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IPrivatelyImplementedProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IPrivatelyImplemented), fullyQualifiedName: "jsii-calc.IPrivatelyImplemented")]
    internal sealed class IPrivatelyImplementedProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IPrivatelyImplemented
    {
        private IPrivatelyImplementedProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "success", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public bool Success
        {
            get => GetInstanceProperty<bool>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IPublicInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IPublicInterface), fullyQualifiedName: "jsii-calc.IPublicInterface")]
    public interface IPublicInterface
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "bye", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        string Bye();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IPublicInterface2.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IPublicInterface2), fullyQualifiedName: "jsii-calc.IPublicInterface2")]
    public interface IPublicInterface2
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "ciao", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        string Ciao();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IPublicInterface2Proxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IPublicInterface2), fullyQualifiedName: "jsii-calc.IPublicInterface2")]
    internal sealed class IPublicInterface2Proxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface2
    {
        private IPublicInterface2Proxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "ciao", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public string Ciao()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IPublicInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IPublicInterface), fullyQualifiedName: "jsii-calc.IPublicInterface")]
    internal sealed class IPublicInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface
    {
        private IPublicInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "bye", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public string Bye()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IRandomNumberGenerator.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Generates random numbers.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IRandomNumberGenerator), fullyQualifiedName: "jsii-calc.IRandomNumberGenerator")]
    public interface IRandomNumberGenerator
    {
        /// <summary>Returns another random number.</summary>
        /// <returns>A random number.</returns>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "next", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}")]
        double Next();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IRandomNumberGeneratorProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Generates random numbers.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IRandomNumberGenerator), fullyQualifiedName: "jsii-calc.IRandomNumberGenerator")]
    internal sealed class IRandomNumberGeneratorProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IRandomNumberGenerator
    {
        private IRandomNumberGeneratorProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Returns another random number.</summary>
        /// <returns>A random number.</returns>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "next", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}")]
        public double Next()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IReturnJsii976.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Returns a subclass of a known class which implements an interface.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IReturnJsii976), fullyQualifiedName: "jsii-calc.IReturnJsii976")]
    public interface IReturnJsii976
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"number\\"}")]
        double Foo
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IReturnJsii976Proxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Returns a subclass of a known class which implements an interface.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IReturnJsii976), fullyQualifiedName: "jsii-calc.IReturnJsii976")]
    internal sealed class IReturnJsii976Proxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IReturnJsii976
    {
        private IReturnJsii976Proxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public double Foo
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IReturnsNumber.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IReturnsNumber), fullyQualifiedName: "jsii-calc.IReturnsNumber")]
    public interface IReturnsNumber
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "numberProp", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Number\\"}")]
        Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Number NumberProp
        {
            get;
        }
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "obtainNumber", returnsJson: "{\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.IDoublable\\"}}")]
        Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IDoublable ObtainNumber();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IReturnsNumberProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IReturnsNumber), fullyQualifiedName: "jsii-calc.IReturnsNumber")]
    internal sealed class IReturnsNumberProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IReturnsNumber
    {
        private IReturnsNumberProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "numberProp", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Number\\"}")]
        public Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Number NumberProp
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Number>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "obtainNumber", returnsJson: "{\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.IDoublable\\"}}")]
        public Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IDoublable ObtainNumber()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IDoublable>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IRootStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.</summary>
    /// <remarks>
    /// This is cheating with the (current) declared types, but this is the "more
    /// idiomatic" way for Pythonists.
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IRootStruct), fullyQualifiedName: "jsii-calc.RootStruct")]
    public interface IRootStruct
    {
        /// <summary>May not be empty.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "stringProp", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string StringProp
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "nestedStruct", typeJson: "{\\"fqn\\":\\"jsii-calc.NestedStruct\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        Amazon.JSII.Tests.CalculatorNamespace.INestedStruct? NestedStruct
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ISecondLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(ISecondLevelStruct), fullyQualifiedName: "jsii-calc.SecondLevelStruct")]
    public interface ISecondLevelStruct
    {
        /// <summary>It's long and required.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "deeperRequiredProp", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string DeeperRequiredProp
        {
            get;
        }

        /// <summary>It's long, but you'll almost never pass it.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "deeperOptionalProp", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? DeeperOptionalProp
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ISmellyStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(ISmellyStruct), fullyQualifiedName: "jsii-calc.SmellyStruct")]
    public interface ISmellyStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Property
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "yetAnoterOne", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        bool YetAnoterOne
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IStableInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    [JsiiInterface(nativeType: typeof(IStableInterface), fullyQualifiedName: "jsii-calc.IStableInterface")]
    public interface IStableInterface
    {
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? MutableProperty
        {
            get
            {
                return null;
            }
            set
            {
                throw new System.NotSupportedException("'set' for 'MutableProperty' is not implemented");
            }
        }
        [JsiiMethod(name: "method")]
        void Method();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IStableInterfaceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    [JsiiTypeProxy(nativeType: typeof(IStableInterface), fullyQualifiedName: "jsii-calc.IStableInterface")]
    internal sealed class IStableInterfaceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IStableInterface
    {
        private IStableInterfaceProxy(ByRefValue reference): base(reference)
        {
        }

        [JsiiOptional]
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        public double? MutableProperty
        {
            get => GetInstanceProperty<double?>();
            set => SetInstanceProperty(value);
        }

        [JsiiMethod(name: "method")]
        public void Method()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IStableStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    [JsiiInterface(nativeType: typeof(IStableStruct), fullyQualifiedName: "jsii-calc.StableStruct")]
    public interface IStableStruct
    {
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string ReadonlyProperty
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IStructA.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>We can serialize and deserialize structs without silently ignoring optional fields.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IStructA), fullyQualifiedName: "jsii-calc.StructA")]
    public interface IStructA
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "requiredString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string RequiredString
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "optionalNumber", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? OptionalNumber
        {
            get
            {
                return null;
            }
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "optionalString", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? OptionalString
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IStructB.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IStructB), fullyQualifiedName: "jsii-calc.StructB")]
    public interface IStructB
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "requiredString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string RequiredString
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "optionalBoolean", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        bool? OptionalBoolean
        {
            get
            {
                return null;
            }
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "optionalStructA", typeJson: "{\\"fqn\\":\\"jsii-calc.StructA\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        Amazon.JSII.Tests.CalculatorNamespace.IStructA? OptionalStructA
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IStructParameterType.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.</summary>
    /// <remarks>
    /// See: https://github.com/aws/aws-cdk/issues/4302
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IStructParameterType), fullyQualifiedName: "jsii-calc.StructParameterType")]
    public interface IStructParameterType
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "scope", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Scope
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "props", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        bool? Props
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IStructReturningDelegate.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Verifies that a "pure" implementation of an interface works correctly.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IStructReturningDelegate), fullyQualifiedName: "jsii-calc.IStructReturningDelegate")]
    public interface IStructReturningDelegate
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "returnStruct", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.StructB\\"}}")]
        Amazon.JSII.Tests.CalculatorNamespace.IStructB ReturnStruct();
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IStructReturningDelegateProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Verifies that a "pure" implementation of an interface works correctly.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IStructReturningDelegate), fullyQualifiedName: "jsii-calc.IStructReturningDelegate")]
    internal sealed class IStructReturningDelegateProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IStructReturningDelegate
    {
        private IStructReturningDelegateProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "returnStruct", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.StructB\\"}}")]
        public Amazon.JSII.Tests.CalculatorNamespace.IStructB ReturnStruct()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.IStructB>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IStructWithJavaReservedWords.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IStructWithJavaReservedWords), fullyQualifiedName: "jsii-calc.StructWithJavaReservedWords")]
    public interface IStructWithJavaReservedWords
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "default", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Default
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "assert", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Assert
        {
            get
            {
                return null;
            }
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "result", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Result
        {
            get
            {
                return null;
            }
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "that", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? That
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ISupportsNiceJavaBuilderProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(ISupportsNiceJavaBuilderProps), fullyQualifiedName: "jsii-calc.SupportsNiceJavaBuilderProps")]
    public interface ISupportsNiceJavaBuilderProps
    {
        /// <summary>Some number, like 42.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"number\\"}")]
        double Bar
        {
            get;
        }

        /// <summary>An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.</summary>
        /// <remarks>
        /// But here we are, doing it like we didn't care.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "id", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Id
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ITopLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(ITopLevelStruct), fullyQualifiedName: "jsii-calc.TopLevelStruct")]
    public interface ITopLevelStruct
    {
        /// <summary>This is a required field.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "required", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Required
        {
            get;
        }

        /// <summary>A union to really stress test our serialization.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "secondLevel", typeJson: "{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"number\\"},{\\"fqn\\":\\"jsii-calc.SecondLevelStruct\\"}]}}")]
        object SecondLevel
        {
            get;
        }

        /// <summary>You don't have to pass this.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "optional", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Optional
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IUnionProperties.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IUnionProperties), fullyQualifiedName: "jsii-calc.UnionProperties")]
    public interface IUnionProperties
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bar", typeJson: "{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"string\\"},{\\"primitive\\":\\"number\\"},{\\"fqn\\":\\"jsii-calc.AllTypes\\"}]}}")]
        object Bar
        {
            get;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"string\\"},{\\"primitive\\":\\"number\\"}]}}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        object? Foo
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ImplementInternalInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ImplementInternalInterface), fullyQualifiedName: "jsii-calc.ImplementInternalInterface")]
    public class ImplementInternalInterface : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ImplementInternalInterface(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ImplementInternalInterface(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ImplementInternalInterface(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "prop", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string Prop
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Implementation.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Implementation), fullyQualifiedName: "jsii-calc.Implementation")]
    public class Implementation : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Implementation(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Implementation(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Implementation(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public virtual double Value
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ImplementsInterfaceWithInternal.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ImplementsInterfaceWithInternal), fullyQualifiedName: "jsii-calc.ImplementsInterfaceWithInternal")]
    public class ImplementsInterfaceWithInternal : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithInternal
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ImplementsInterfaceWithInternal(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ImplementsInterfaceWithInternal(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ImplementsInterfaceWithInternal(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "visible", isOverride: true)]
        public virtual void Visible()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ImplementsInterfaceWithInternalSubclass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ImplementsInterfaceWithInternalSubclass), fullyQualifiedName: "jsii-calc.ImplementsInterfaceWithInternalSubclass")]
    public class ImplementsInterfaceWithInternalSubclass : Amazon.JSII.Tests.CalculatorNamespace.ImplementsInterfaceWithInternal
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ImplementsInterfaceWithInternalSubclass(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ImplementsInterfaceWithInternalSubclass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ImplementsInterfaceWithInternalSubclass(DeputyProps props): base(props)
        {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ImplementsPrivateInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ImplementsPrivateInterface), fullyQualifiedName: "jsii-calc.ImplementsPrivateInterface")]
    public class ImplementsPrivateInterface : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ImplementsPrivateInterface(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ImplementsPrivateInterface(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ImplementsPrivateInterface(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "private", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string Private
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ImplictBaseOfBase.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.ImplictBaseOfBase")]
    public class ImplictBaseOfBase : Amazon.JSII.Tests.CalculatorNamespace.IImplictBaseOfBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "goo", typeJson: "{\\"primitive\\":\\"date\\"}", isOverride: true)]
        public System.DateTime Goo
        {
            get;
            set;
        }

        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string Bar
        {
            get;
            set;
        }

        [JsiiProperty(name: "foo", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-base-of-base.Very\\"}", isOverride: true)]
        public Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Very Foo
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ImplictBaseOfBaseProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IImplictBaseOfBase), fullyQualifiedName: "jsii-calc.ImplictBaseOfBase")]
    internal sealed class ImplictBaseOfBaseProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IImplictBaseOfBase
    {
        private ImplictBaseOfBaseProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "goo", typeJson: "{\\"primitive\\":\\"date\\"}")]
        public System.DateTime Goo
        {
            get => GetInstanceProperty<System.DateTime>();
        }

        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Bar
        {
            get => GetInstanceProperty<string>();
        }

        [JsiiProperty(name: "foo", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-base-of-base.Very\\"}")]
        public Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Very Foo
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Very>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/InbetweenClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.InbetweenClass), fullyQualifiedName: "jsii-calc.InbetweenClass")]
    public class InbetweenClass : Amazon.JSII.Tests.CalculatorNamespace.PublicClass, Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface2
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public InbetweenClass(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected InbetweenClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected InbetweenClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "ciao", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public virtual string Ciao()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/InterfaceCollections.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Verifies that collections of interfaces or structs are correctly handled.</summary>
    /// <remarks>
    /// See: https://github.com/aws/jsii/issues/1196
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.InterfaceCollections), fullyQualifiedName: "jsii-calc.InterfaceCollections")]
    public class InterfaceCollections : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected InterfaceCollections(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected InterfaceCollections(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "listOfInterfaces", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"jsii-calc.IBell\\"},\\"kind\\":\\"array\\"}}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IBell[] ListOfInterfaces()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IBell[]>(typeof(Amazon.JSII.Tests.CalculatorNamespace.InterfaceCollections), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "listOfStructs", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"jsii-calc.StructA\\"},\\"kind\\":\\"array\\"}}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IStructA[] ListOfStructs()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IStructA[]>(typeof(Amazon.JSII.Tests.CalculatorNamespace.InterfaceCollections), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "mapOfInterfaces", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"jsii-calc.IBell\\"},\\"kind\\":\\"map\\"}}}")]
        public static System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.IBell> MapOfInterfaces()
        {
            return InvokeStaticMethod<System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.IBell>>(typeof(Amazon.JSII.Tests.CalculatorNamespace.InterfaceCollections), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "mapOfStructs", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"jsii-calc.StructA\\"},\\"kind\\":\\"map\\"}}}")]
        public static System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.IStructA> MapOfStructs()
        {
            return InvokeStaticMethod<System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.IStructA>>(typeof(Amazon.JSII.Tests.CalculatorNamespace.InterfaceCollections), new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/InterfaceInNamespaceIncludesClasses/Foo.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceIncludesClasses
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceIncludesClasses.Foo), fullyQualifiedName: "jsii-calc.InterfaceInNamespaceIncludesClasses.Foo")]
    public class Foo : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Foo(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Foo(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Foo(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public virtual string? Bar
        {
            get => GetInstanceProperty<string?>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/InterfaceInNamespaceIncludesClasses/Hello.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceIncludesClasses
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.InterfaceInNamespaceIncludesClasses.Hello")]
    public class Hello : Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceIncludesClasses.IHello
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"number\\"}", isOverride: true)]
        public double Foo
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/InterfaceInNamespaceIncludesClasses/HelloProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceIncludesClasses
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IHello), fullyQualifiedName: "jsii-calc.InterfaceInNamespaceIncludesClasses.Hello")]
    internal sealed class HelloProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceIncludesClasses.IHello
    {
        private HelloProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public double Foo
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/InterfaceInNamespaceIncludesClasses/IHello.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceIncludesClasses
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IHello), fullyQualifiedName: "jsii-calc.InterfaceInNamespaceIncludesClasses.Hello")]
    public interface IHello
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"number\\"}")]
        double Foo
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/InterfaceInNamespaceOnlyInterface/Hello.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceOnlyInterface
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.InterfaceInNamespaceOnlyInterface.Hello")]
    public class Hello : Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceOnlyInterface.IHello
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"number\\"}", isOverride: true)]
        public double Foo
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/InterfaceInNamespaceOnlyInterface/HelloProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceOnlyInterface
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IHello), fullyQualifiedName: "jsii-calc.InterfaceInNamespaceOnlyInterface.Hello")]
    internal sealed class HelloProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceOnlyInterface.IHello
    {
        private HelloProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public double Foo
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/InterfaceInNamespaceOnlyInterface/IHello.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.InterfaceInNamespaceOnlyInterface
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IHello), fullyQualifiedName: "jsii-calc.InterfaceInNamespaceOnlyInterface.Hello")]
    public interface IHello
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"number\\"}")]
        double Foo
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/InterfacesMaker.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>We can return arrays of interfaces See aws/aws-cdk#2362.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.InterfacesMaker), fullyQualifiedName: "jsii-calc.InterfacesMaker")]
    public class InterfacesMaker : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected InterfacesMaker(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected InterfacesMaker(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "makeInterfaces", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.IDoublable\\"},\\"kind\\":\\"array\\"}}}", parametersJson: "[{\\"name\\":\\"count\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public static Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IDoublable[] MakeInterfaces(double count)
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IDoublable[]>(typeof(Amazon.JSII.Tests.CalculatorNamespace.InterfacesMaker), new System.Type[]{typeof(double)}, new object[]{count});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Internal/DependencyResolution/Anchor.cs 1`] = `
#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Internal.DependencyResolution
{
    public sealed class Anchor
    {
        public Anchor()
        {
            new Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.Internal.DependencyResolution.Anchor();
            new Amazon.JSII.Tests.CalculatorNamespace.BaseOfBaseNamespace.Internal.DependencyResolution.Anchor();
            new Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Internal.DependencyResolution.Anchor();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Isomorphism.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Checks the "same instance" isomorphism is preserved within the constructor.</summary>
    /// <remarks>
    /// Create a subclass of this, and assert that <c>this.myself()</c> actually returns
    /// <c>this</c> from within the constructor.
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Isomorphism), fullyQualifiedName: "jsii-calc.Isomorphism")]
    public abstract class Isomorphism : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        protected Isomorphism(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Isomorphism(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Isomorphism(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "myself", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.Isomorphism\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.Isomorphism Myself()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.Isomorphism>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/IsomorphismProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Checks the "same instance" isomorphism is preserved within the constructor.</summary>
    /// <remarks>
    /// Create a subclass of this, and assert that <c>this.myself()</c> actually returns
    /// <c>this</c> from within the constructor.
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Isomorphism), fullyQualifiedName: "jsii-calc.Isomorphism")]
    internal sealed class IsomorphismProxy : Amazon.JSII.Tests.CalculatorNamespace.Isomorphism
    {
        private IsomorphismProxy(ByRefValue reference): base(reference)
        {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/JSII417Derived.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.JSII417Derived), fullyQualifiedName: "jsii-calc.JSII417Derived", parametersJson: "[{\\"name\\":\\"property\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
    public class JSII417Derived : Amazon.JSII.Tests.CalculatorNamespace.JSII417PublicBaseOfBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public JSII417Derived(string property): base(new DeputyProps(new object[]{property}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JSII417Derived(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JSII417Derived(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "bar")]
        public virtual void Bar()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "baz")]
        public virtual void Baz()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}")]
        protected virtual string Property
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/JSII417PublicBaseOfBase.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.JSII417PublicBaseOfBase), fullyQualifiedName: "jsii-calc.JSII417PublicBaseOfBase")]
    public class JSII417PublicBaseOfBase : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public JSII417PublicBaseOfBase(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JSII417PublicBaseOfBase(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JSII417PublicBaseOfBase(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "makeInstance", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.JSII417PublicBaseOfBase\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.JSII417PublicBaseOfBase MakeInstance()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.JSII417PublicBaseOfBase>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JSII417PublicBaseOfBase), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "foo")]
        public virtual void Foo()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "hasRoot", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public virtual bool HasRoot
        {
            get => GetInstanceProperty<bool>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/JSObjectLiteralForInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.JSObjectLiteralForInterface), fullyQualifiedName: "jsii-calc.JSObjectLiteralForInterface")]
    public class JSObjectLiteralForInterface : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public JSObjectLiteralForInterface(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JSObjectLiteralForInterface(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JSObjectLiteralForInterface(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "giveMeFriendly", returnsJson: "{\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.IFriendly\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IFriendly GiveMeFriendly()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IFriendly>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "giveMeFriendlyGenerator", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.IFriendlyRandomGenerator\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.IFriendlyRandomGenerator GiveMeFriendlyGenerator()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.IFriendlyRandomGenerator>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/JSObjectLiteralToNative.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.JSObjectLiteralToNative), fullyQualifiedName: "jsii-calc.JSObjectLiteralToNative")]
    public class JSObjectLiteralToNative : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public JSObjectLiteralToNative(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JSObjectLiteralToNative(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JSObjectLiteralToNative(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "returnLiteral", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.JSObjectLiteralToNativeClass\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.JSObjectLiteralToNativeClass ReturnLiteral()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.JSObjectLiteralToNativeClass>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/JSObjectLiteralToNativeClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.JSObjectLiteralToNativeClass), fullyQualifiedName: "jsii-calc.JSObjectLiteralToNativeClass")]
    public class JSObjectLiteralToNativeClass : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public JSObjectLiteralToNativeClass(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JSObjectLiteralToNativeClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JSObjectLiteralToNativeClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "propA", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string PropA
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "propB", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public virtual double PropB
        {
            get => GetInstanceProperty<double>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/JavaReservedWords.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.JavaReservedWords), fullyQualifiedName: "jsii-calc.JavaReservedWords")]
    public class JavaReservedWords : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public JavaReservedWords(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JavaReservedWords(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JavaReservedWords(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "abstract")]
        public virtual void Abstract()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "assert")]
        public virtual void Assert()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "boolean")]
        public virtual void Boolean()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "break")]
        public virtual void Break()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "byte")]
        public virtual void Byte()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "case")]
        public virtual void Case()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "catch")]
        public virtual void Catch()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "char")]
        public virtual void Char()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "class")]
        public virtual void Class()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "const")]
        public virtual void Const()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "continue")]
        public virtual void Continue()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "default")]
        public virtual void Default()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "do")]
        public virtual void Do()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "double")]
        public virtual void Double()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "else")]
        public virtual void Else()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "enum")]
        public virtual void Enum()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "extends")]
        public virtual void Extends()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "false")]
        public virtual void False()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "final")]
        public virtual void Final()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "finally")]
        public virtual void Finally()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "float")]
        public virtual void Float()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "for")]
        public virtual void For()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "goto")]
        public virtual void Goto()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "if")]
        public virtual void If()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "implements")]
        public virtual void Implements()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "import")]
        public virtual void Import()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "instanceof")]
        public virtual void Instanceof()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "int")]
        public virtual void Int()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "interface")]
        public virtual void Interface()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "long")]
        public virtual void Long()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "native")]
        public virtual void Native()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "new")]
        public virtual void New()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "null")]
        public virtual void Null()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "package")]
        public virtual void Package()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "private")]
        public virtual void Private()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "protected")]
        public virtual void Protected()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "public")]
        public virtual void Public()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "return")]
        public virtual void Return()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "short")]
        public virtual void Short()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "static")]
        public virtual void Static()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "strictfp")]
        public virtual void Strictfp()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "super")]
        public virtual void Super()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "switch")]
        public virtual void Switch()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "synchronized")]
        public virtual void Synchronized()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "this")]
        public virtual void This()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "throw")]
        public virtual void Throw()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "throws")]
        public virtual void Throws()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "transient")]
        public virtual void Transient()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "true")]
        public virtual void True()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "try")]
        public virtual void Try()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "void")]
        public virtual void Void()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "volatile")]
        public virtual void Volatile()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "while", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string While
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Jsii487Derived.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Jsii487Derived), fullyQualifiedName: "jsii-calc.Jsii487Derived")]
    public class Jsii487Derived : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IJsii487External2, Amazon.JSII.Tests.CalculatorNamespace.IJsii487External
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Jsii487Derived(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Jsii487Derived(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Jsii487Derived(DeputyProps props): base(props)
        {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Jsii496Derived.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Jsii496Derived), fullyQualifiedName: "jsii-calc.Jsii496Derived")]
    public class Jsii496Derived : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IJsii496
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Jsii496Derived(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Jsii496Derived(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Jsii496Derived(DeputyProps props): base(props)
        {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/JsiiAgent_.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Host runtime version should be set via JSII_AGENT.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.JsiiAgent_), fullyQualifiedName: "jsii-calc.JsiiAgent")]
    public class JsiiAgent_ : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public JsiiAgent_(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JsiiAgent_(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JsiiAgent_(DeputyProps props): base(props)
        {
        }

        /// <summary>Returns the value of the JSII_AGENT environment variable.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "jsiiAgent", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public static string? JsiiAgent
        {
            get => GetStaticProperty<string?>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsiiAgent_));
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/JsonFormatter.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Make sure structs are un-decorated on the way in.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>See</strong>: https://github.com/aws/aws-cdk/issues/5066
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), fullyQualifiedName: "jsii-calc.JsonFormatter")]
    public class JsonFormatter : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JsonFormatter(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JsonFormatter(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyArray", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyArray()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyBooleanFalse", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyBooleanFalse()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyBooleanTrue", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyBooleanTrue()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyDate", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyDate()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyEmptyString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyEmptyString()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyFunction", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyFunction()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyHash", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyHash()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyNull", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyNull()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyNumber", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyNumber()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyRef", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyRef()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyString()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyUndefined", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyUndefined()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "anyZero", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object AnyZero()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "stringify", returnsJson: "{\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"value\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"any\\"}}]")]
        public static string? Stringify(object? @value = null)
        {
            return InvokeStaticMethod<string?>(typeof(Amazon.JSII.Tests.CalculatorNamespace.JsonFormatter), new System.Type[]{typeof(object)}, new object?[]{@value});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/LoadBalancedFargateServiceProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>jsii#298: show default values in sphinx documentation, and respect newlines.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.LoadBalancedFargateServiceProps")]
    public class LoadBalancedFargateServiceProps : Amazon.JSII.Tests.CalculatorNamespace.ILoadBalancedFargateServiceProps
    {
        /// <summary>The container port of the application load balancer attached to your Fargate service.</summary>
        /// <remarks>
        /// Corresponds to container port mapping.
        /// 
        /// <strong>Default</strong>: 80
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "containerPort", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true, isOverride: true)]
        public double? ContainerPort
        {
            get;
            set;
        }

        /// <summary>The number of cpu units used by the task.</summary>
        /// <remarks>
        /// Valid values, which determines your range of valid values for the memory parameter:
        /// 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
        /// 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
        /// 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
        /// 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
        /// 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
        /// 
        /// This default is set in the underlying FargateTaskDefinition construct.
        /// 
        /// <strong>Default</strong>: 256
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "cpu", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? Cpu
        {
            get;
            set;
        }

        /// <summary>The amount (in MiB) of memory used by the task.</summary>
        /// <remarks>
        /// This field is required and you must use one of the following values, which determines your range of valid values
        /// for the cpu parameter:
        /// 
        /// 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
        /// 
        /// 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
        /// 
        /// 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
        /// 
        /// Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
        /// 
        /// Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
        /// 
        /// This default is set in the underlying FargateTaskDefinition construct.
        /// 
        /// <strong>Default</strong>: 512
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "memoryMiB", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? MemoryMiB
        {
            get;
            set;
        }

        /// <summary>Determines whether the Application Load Balancer will be internet-facing.</summary>
        /// <remarks>
        /// <strong>Default</strong>: true
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "publicLoadBalancer", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true, isOverride: true)]
        public bool? PublicLoadBalancer
        {
            get;
            set;
        }

        /// <summary>Determines whether your Fargate Service will be assigned a public IP address.</summary>
        /// <remarks>
        /// <strong>Default</strong>: false
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "publicTasks", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true, isOverride: true)]
        public bool? PublicTasks
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/LoadBalancedFargateServicePropsProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>jsii#298: show default values in sphinx documentation, and respect newlines.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(ILoadBalancedFargateServiceProps), fullyQualifiedName: "jsii-calc.LoadBalancedFargateServiceProps")]
    internal sealed class LoadBalancedFargateServicePropsProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.ILoadBalancedFargateServiceProps
    {
        private LoadBalancedFargateServicePropsProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>The container port of the application load balancer attached to your Fargate service.</summary>
        /// <remarks>
        /// Corresponds to container port mapping.
        /// 
        /// <strong>Default</strong>: 80
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "containerPort", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        public double? ContainerPort
        {
            get => GetInstanceProperty<double?>();
        }

        /// <summary>The number of cpu units used by the task.</summary>
        /// <remarks>
        /// Valid values, which determines your range of valid values for the memory parameter:
        /// 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
        /// 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
        /// 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
        /// 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
        /// 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
        /// 
        /// This default is set in the underlying FargateTaskDefinition construct.
        /// 
        /// <strong>Default</strong>: 256
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "cpu", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? Cpu
        {
            get => GetInstanceProperty<string?>();
        }

        /// <summary>The amount (in MiB) of memory used by the task.</summary>
        /// <remarks>
        /// This field is required and you must use one of the following values, which determines your range of valid values
        /// for the cpu parameter:
        /// 
        /// 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
        /// 
        /// 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
        /// 
        /// 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
        /// 
        /// Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
        /// 
        /// Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
        /// 
        /// This default is set in the underlying FargateTaskDefinition construct.
        /// 
        /// <strong>Default</strong>: 512
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "memoryMiB", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? MemoryMiB
        {
            get => GetInstanceProperty<string?>();
        }

        /// <summary>Determines whether the Application Load Balancer will be internet-facing.</summary>
        /// <remarks>
        /// <strong>Default</strong>: true
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "publicLoadBalancer", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true)]
        public bool? PublicLoadBalancer
        {
            get => GetInstanceProperty<bool?>();
        }

        /// <summary>Determines whether your Fargate Service will be assigned a public IP address.</summary>
        /// <remarks>
        /// <strong>Default</strong>: false
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "publicTasks", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true)]
        public bool? PublicTasks
        {
            get => GetInstanceProperty<bool?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/MethodNamedProperty.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.MethodNamedProperty), fullyQualifiedName: "jsii-calc.MethodNamedProperty")]
    public class MethodNamedProperty : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public MethodNamedProperty(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected MethodNamedProperty(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected MethodNamedProperty(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "property", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public virtual string Property()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "elite", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public virtual double Elite
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Multiply.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>The "*" binary operation.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Multiply), fullyQualifiedName: "jsii-calc.Multiply", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"Left-hand side operand.\\"},\\"name\\":\\"lhs\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}},{\\"docs\\":{\\"summary\\":\\"Right-hand side operand.\\"},\\"name\\":\\"rhs\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}}]")]
    public class Multiply : Amazon.JSII.Tests.CalculatorNamespace.BinaryOperation, Amazon.JSII.Tests.CalculatorNamespace.IFriendlier, Amazon.JSII.Tests.CalculatorNamespace.IRandomNumberGenerator
    {
        /// <summary>Creates a BinaryOperation.</summary>
        /// <param name="lhs">Left-hand side operand.</param>
        /// <param name="rhs">Right-hand side operand.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Multiply(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ lhs, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ rhs): base(new DeputyProps(new object[]{lhs, rhs}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Multiply(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Multiply(DeputyProps props): base(props)
        {
        }

        /// <summary>Say farewell.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "farewell", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public virtual string Farewell()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Say goodbye.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "goodbye", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public virtual string Goodbye()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Returns another random number.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "next", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", isOverride: true)]
        public virtual double Next()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <summary>String representation of the value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "toString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public override string ToString()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>The value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public override double Value
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/NamespaceDoc.cs 1`] = `
#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <h1>jsii Calculator</h1>
    /// 
    /// This library is used to demonstrate and test the features of JSII
    /// 
    /// <h2>How to use running sum API:</h2>
    /// 
    /// First, create a calculator:
    /// 
    /// <code><![CDATA[
    /// // Example automatically generated. See https://github.com/aws/jsii/issues/826
    /// Calculator calculator = new Calculator();
    /// ]]></code>
    /// 
    /// Then call some operations:
    /// 
    /// <code><![CDATA[
    /// // Example automatically generated. See https://github.com/aws/jsii/issues/826
    /// calculator.Add(10);
    /// ]]></code>
    /// 
    /// <h2>Code Samples</h2>
    /// 
    /// <code><![CDATA[
    /// // Example automatically generated. See https://github.com/aws/jsii/issues/826
    /// /* This is totes a magic comment in here, just you wait! */
    /// string foo = "bar";
    /// ]]></code>
    /// </remarks>
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public class NamespaceDoc
    {
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Negate.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>The negation operation ("-value").</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Negate), fullyQualifiedName: "jsii-calc.Negate", parametersJson: "[{\\"name\\":\\"operand\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}}]")]
    public class Negate : Amazon.JSII.Tests.CalculatorNamespace.UnaryOperation, Amazon.JSII.Tests.CalculatorNamespace.IFriendlier
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Negate(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ operand): base(new DeputyProps(new object[]{operand}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Negate(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Negate(DeputyProps props): base(props)
        {
        }

        /// <summary>Say farewell.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "farewell", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public virtual string Farewell()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Say goodbye.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "goodbye", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public virtual string Goodbye()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Say hello!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "hello", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public virtual string Hello()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>String representation of the value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "toString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        public override string ToString()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>The value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public override double Value
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/NestedClassInstance.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.NestedClassInstance), fullyQualifiedName: "jsii-calc.NestedClassInstance")]
    public class NestedClassInstance : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NestedClassInstance(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NestedClassInstance(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "makeInstance", returnsJson: "{\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.submodule.NestingClass.NestedClass\\"}}")]
        public static Amazon.JSII.Tests.CustomSubmoduleName.NestingClass.NestedClass MakeInstance()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CustomSubmoduleName.NestingClass.NestedClass>(typeof(Amazon.JSII.Tests.CalculatorNamespace.NestedClassInstance), new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/NestedStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.NestedStruct")]
    public class NestedStruct : Amazon.JSII.Tests.CalculatorNamespace.INestedStruct
    {
        /// <summary>When provided, must be &gt; 0.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "numberProp", typeJson: "{\\"primitive\\":\\"number\\"}", isOverride: true)]
        public double NumberProp
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/NestedStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(INestedStruct), fullyQualifiedName: "jsii-calc.NestedStruct")]
    internal sealed class NestedStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.INestedStruct
    {
        private NestedStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>When provided, must be &gt; 0.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "numberProp", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public double NumberProp
        {
            get => GetInstanceProperty<double>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/NodeStandardLibrary.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Test fixture to verify that jsii modules can use the node standard library.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.NodeStandardLibrary), fullyQualifiedName: "jsii-calc.NodeStandardLibrary")]
    public class NodeStandardLibrary : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public NodeStandardLibrary(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NodeStandardLibrary(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NodeStandardLibrary(DeputyProps props): base(props)
        {
        }

        /// <summary>Uses node.js "crypto" module to calculate sha256 of a string.</summary>
        /// <returns>"6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50"</returns>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "cryptoSha256", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public virtual string CryptoSha256()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Reads a local resource file (resource.txt) asynchronously.</summary>
        /// <returns>"Hello, resource!"</returns>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "fsReadFile", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isAsync: true)]
        public virtual string FsReadFile()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Sync version of fsReadFile.</summary>
        /// <returns>"Hello, resource! SYNC!"</returns>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "fsReadFileSync", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public virtual string FsReadFileSync()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Returns the current os.platform() from the "os" node module.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "osPlatform", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string OsPlatform
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/NullShouldBeTreatedAsUndefined.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>jsii#282, aws-cdk#157: null should be treated as "undefined".</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.NullShouldBeTreatedAsUndefined), fullyQualifiedName: "jsii-calc.NullShouldBeTreatedAsUndefined", parametersJson: "[{\\"name\\":\\"_param1\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"optional\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"any\\"}}]")]
    public class NullShouldBeTreatedAsUndefined : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public NullShouldBeTreatedAsUndefined(string param1, object? optional = null): base(new DeputyProps(new object?[]{param1, optional}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NullShouldBeTreatedAsUndefined(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NullShouldBeTreatedAsUndefined(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "giveMeUndefined", parametersJson: "[{\\"name\\":\\"value\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"any\\"}}]")]
        public virtual void GiveMeUndefined(object? @value = null)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(object)}, new object?[]{@value});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "giveMeUndefinedInsideAnObject", parametersJson: "[{\\"name\\":\\"input\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.NullShouldBeTreatedAsUndefinedData\\"}}]")]
        public virtual void GiveMeUndefinedInsideAnObject(Amazon.JSII.Tests.CalculatorNamespace.INullShouldBeTreatedAsUndefinedData input)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.INullShouldBeTreatedAsUndefinedData)}, new object[]{input});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "verifyPropertyIsUndefined")]
        public virtual void VerifyPropertyIsUndefined()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "changeMeToUndefined", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public virtual string? ChangeMeToUndefined
        {
            get => GetInstanceProperty<string?>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/NullShouldBeTreatedAsUndefinedData.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.NullShouldBeTreatedAsUndefinedData")]
    public class NullShouldBeTreatedAsUndefinedData : Amazon.JSII.Tests.CalculatorNamespace.INullShouldBeTreatedAsUndefinedData
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "arrayWithThreeElementsAndUndefinedAsSecondArgument", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"array\\"}}", isOverride: true)]
        public object[] ArrayWithThreeElementsAndUndefinedAsSecondArgument
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "thisShouldBeUndefined", typeJson: "{\\"primitive\\":\\"any\\"}", isOptional: true, isOverride: true)]
        public object? ThisShouldBeUndefined
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/NullShouldBeTreatedAsUndefinedDataProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(INullShouldBeTreatedAsUndefinedData), fullyQualifiedName: "jsii-calc.NullShouldBeTreatedAsUndefinedData")]
    internal sealed class NullShouldBeTreatedAsUndefinedDataProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.INullShouldBeTreatedAsUndefinedData
    {
        private NullShouldBeTreatedAsUndefinedDataProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "arrayWithThreeElementsAndUndefinedAsSecondArgument", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"array\\"}}")]
        public object[] ArrayWithThreeElementsAndUndefinedAsSecondArgument
        {
            get => GetInstanceProperty<object[]>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "thisShouldBeUndefined", typeJson: "{\\"primitive\\":\\"any\\"}", isOptional: true)]
        public object? ThisShouldBeUndefined
        {
            get => GetInstanceProperty<object?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/NumberGenerator.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>This allows us to test that a reference can be stored for objects that implement interfaces.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.NumberGenerator), fullyQualifiedName: "jsii-calc.NumberGenerator", parametersJson: "[{\\"name\\":\\"generator\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IRandomNumberGenerator\\"}}]")]
    public class NumberGenerator : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public NumberGenerator(Amazon.JSII.Tests.CalculatorNamespace.IRandomNumberGenerator generator): base(new DeputyProps(new object[]{generator}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NumberGenerator(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NumberGenerator(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "isSameGenerator", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"gen\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IRandomNumberGenerator\\"}}]")]
        public virtual bool IsSameGenerator(Amazon.JSII.Tests.CalculatorNamespace.IRandomNumberGenerator gen)
        {
            return InvokeInstanceMethod<bool>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IRandomNumberGenerator)}, new object[]{gen});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "nextTimes100", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}")]
        public virtual double NextTimes100()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "generator", typeJson: "{\\"fqn\\":\\"jsii-calc.IRandomNumberGenerator\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.IRandomNumberGenerator Generator
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.IRandomNumberGenerator>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ObjectRefsInCollections.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Verify that object references can be passed inside collections.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ObjectRefsInCollections), fullyQualifiedName: "jsii-calc.ObjectRefsInCollections")]
    public class ObjectRefsInCollections : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ObjectRefsInCollections(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ObjectRefsInCollections(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ObjectRefsInCollections(DeputyProps props): base(props)
        {
        }

        /// <summary>Returns the sum of all values.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "sumFromArray", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"values\\",\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"},\\"kind\\":\\"array\\"}}}]")]
        public virtual double SumFromArray(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_[] values)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_[])}, new object[]{values});
        }

        /// <summary>Returns the sum of all values in a map.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "sumFromMap", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"values\\",\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"},\\"kind\\":\\"map\\"}}}]")]
        public virtual double SumFromMap(System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_> values)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(System.Collections.Generic.IDictionary<string, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>)}, new object[]{values});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ObjectWithPropertyProvider.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ObjectWithPropertyProvider), fullyQualifiedName: "jsii-calc.ObjectWithPropertyProvider")]
    public class ObjectWithPropertyProvider : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ObjectWithPropertyProvider(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ObjectWithPropertyProvider(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "provide", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.IObjectWithProperty\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IObjectWithProperty Provide()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IObjectWithProperty>(typeof(Amazon.JSII.Tests.CalculatorNamespace.ObjectWithPropertyProvider), new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Old.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Old class.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Deprecated
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Old), fullyQualifiedName: "jsii-calc.Old")]
    [System.Obsolete("Use the new class")]
    public class Old : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Old(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Old(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Old(DeputyProps props): base(props)
        {
        }

        /// <summary>Doo wop that thing.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "doAThing")]
        [System.Obsolete()]
        public virtual void DoAThing()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/OptionalArgumentInvoker.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.OptionalArgumentInvoker), fullyQualifiedName: "jsii-calc.OptionalArgumentInvoker", parametersJson: "[{\\"name\\":\\"delegate\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IInterfaceWithOptionalMethodArguments\\"}}]")]
    public class OptionalArgumentInvoker : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public OptionalArgumentInvoker(Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithOptionalMethodArguments @delegate): base(new DeputyProps(new object[]{@delegate}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OptionalArgumentInvoker(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OptionalArgumentInvoker(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "invokeWithOptional")]
        public virtual void InvokeWithOptional()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "invokeWithoutOptional")]
        public virtual void InvokeWithoutOptional()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/OptionalConstructorArgument.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.OptionalConstructorArgument), fullyQualifiedName: "jsii-calc.OptionalConstructorArgument", parametersJson: "[{\\"name\\":\\"arg1\\",\\"type\\":{\\"primitive\\":\\"number\\"}},{\\"name\\":\\"arg2\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"arg3\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"date\\"}}]")]
    public class OptionalConstructorArgument : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public OptionalConstructorArgument(double arg1, string arg2, System.DateTime? arg3 = null): base(new DeputyProps(new object?[]{arg1, arg2, arg3}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OptionalConstructorArgument(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OptionalConstructorArgument(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "arg1", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public virtual double Arg1
        {
            get => GetInstanceProperty<double>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "arg2", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string Arg2
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "arg3", typeJson: "{\\"primitive\\":\\"date\\"}", isOptional: true)]
        public virtual System.DateTime? Arg3
        {
            get => GetInstanceProperty<System.DateTime?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/OptionalStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.OptionalStruct")]
    public class OptionalStruct : Amazon.JSII.Tests.CalculatorNamespace.IOptionalStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "field", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? Field
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/OptionalStructConsumer.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.OptionalStructConsumer), fullyQualifiedName: "jsii-calc.OptionalStructConsumer", parametersJson: "[{\\"name\\":\\"optionalStruct\\",\\"optional\\":true,\\"type\\":{\\"fqn\\":\\"jsii-calc.OptionalStruct\\"}}]")]
    public class OptionalStructConsumer : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public OptionalStructConsumer(Amazon.JSII.Tests.CalculatorNamespace.IOptionalStruct? optionalStruct = null): base(new DeputyProps(new object?[]{optionalStruct}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OptionalStructConsumer(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OptionalStructConsumer(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "parameterWasUndefined", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public virtual bool ParameterWasUndefined
        {
            get => GetInstanceProperty<bool>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "fieldValue", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public virtual string? FieldValue
        {
            get => GetInstanceProperty<string?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/OptionalStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IOptionalStruct), fullyQualifiedName: "jsii-calc.OptionalStruct")]
    internal sealed class OptionalStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IOptionalStruct
    {
        private OptionalStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "field", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? Field
        {
            get => GetInstanceProperty<string?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/OverridableProtectedMember.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>See</strong>: https://github.com/aws/jsii/issues/903
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.OverridableProtectedMember), fullyQualifiedName: "jsii-calc.OverridableProtectedMember")]
    public class OverridableProtectedMember : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public OverridableProtectedMember(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OverridableProtectedMember(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OverridableProtectedMember(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "overrideMe", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        protected virtual string OverrideMe()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "switchModes")]
        public virtual void SwitchModes()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "valueFromProtected", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public virtual string ValueFromProtected()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "overrideReadOnly", typeJson: "{\\"primitive\\":\\"string\\"}")]
        protected virtual string OverrideReadOnly
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "overrideReadWrite", typeJson: "{\\"primitive\\":\\"string\\"}")]
        protected virtual string OverrideReadWrite
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/OverrideReturnsObject.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.OverrideReturnsObject), fullyQualifiedName: "jsii-calc.OverrideReturnsObject")]
    public class OverrideReturnsObject : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public OverrideReturnsObject(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OverrideReturnsObject(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OverrideReturnsObject(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "test", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"obj\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IReturnsNumber\\"}}]")]
        public virtual double Test(Amazon.JSII.Tests.CalculatorNamespace.IReturnsNumber obj)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IReturnsNumber)}, new object[]{obj});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ParentStruct982.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <summary>https://github.com/aws/jsii/issues/982.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.ParentStruct982")]
    public class ParentStruct982 : Amazon.JSII.Tests.CalculatorNamespace.IParentStruct982
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string Foo
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ParentStruct982Proxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>https://github.com/aws/jsii/issues/982.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IParentStruct982), fullyQualifiedName: "jsii-calc.ParentStruct982")]
    internal sealed class ParentStruct982Proxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IParentStruct982
    {
        private ParentStruct982Proxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "foo", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Foo
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PartiallyInitializedThisConsumer.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.PartiallyInitializedThisConsumer), fullyQualifiedName: "jsii-calc.PartiallyInitializedThisConsumer")]
    public abstract class PartiallyInitializedThisConsumer : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        protected PartiallyInitializedThisConsumer(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PartiallyInitializedThisConsumer(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PartiallyInitializedThisConsumer(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "consumePartiallyInitializedThis", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"obj\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.ConstructorPassesThisOut\\"}},{\\"name\\":\\"dt\\",\\"type\\":{\\"primitive\\":\\"date\\"}},{\\"name\\":\\"ev\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.AllTypesEnum\\"}}]")]
        public abstract string ConsumePartiallyInitializedThis(Amazon.JSII.Tests.CalculatorNamespace.ConstructorPassesThisOut obj, System.DateTime dt, Amazon.JSII.Tests.CalculatorNamespace.AllTypesEnum ev);

    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PartiallyInitializedThisConsumerProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.PartiallyInitializedThisConsumer), fullyQualifiedName: "jsii-calc.PartiallyInitializedThisConsumer")]
    internal sealed class PartiallyInitializedThisConsumerProxy : Amazon.JSII.Tests.CalculatorNamespace.PartiallyInitializedThisConsumer
    {
        private PartiallyInitializedThisConsumerProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "consumePartiallyInitializedThis", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"obj\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.ConstructorPassesThisOut\\"}},{\\"name\\":\\"dt\\",\\"type\\":{\\"primitive\\":\\"date\\"}},{\\"name\\":\\"ev\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.AllTypesEnum\\"}}]")]
        public override string ConsumePartiallyInitializedThis(Amazon.JSII.Tests.CalculatorNamespace.ConstructorPassesThisOut obj, System.DateTime dt, Amazon.JSII.Tests.CalculatorNamespace.AllTypesEnum ev)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.ConstructorPassesThisOut), typeof(System.DateTime), typeof(Amazon.JSII.Tests.CalculatorNamespace.AllTypesEnum)}, new object[]{obj, dt, ev});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Polymorphism.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Polymorphism), fullyQualifiedName: "jsii-calc.Polymorphism")]
    public class Polymorphism : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Polymorphism(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Polymorphism(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Polymorphism(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "sayHello", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"friendly\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.IFriendly\\"}}]")]
        public virtual string SayHello(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IFriendly friendly)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.IFriendly)}, new object[]{friendly});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Power.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>The power operation.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Power), fullyQualifiedName: "jsii-calc.Power", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"The base of the power.\\"},\\"name\\":\\"base\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}},{\\"docs\\":{\\"summary\\":\\"The number of times to multiply.\\"},\\"name\\":\\"pow\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}}]")]
    public class Power : Amazon.JSII.Tests.CalculatorNamespace.Composition.CompositeOperation
    {
        /// <summary>Creates a Power operation.</summary>
        /// <param name="base">The base of the power.</param>
        /// <param name="pow">The number of times to multiply.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Power(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ @base, Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ pow): base(new DeputyProps(new object[]{@base, pow}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Power(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Power(DeputyProps props): base(props)
        {
        }

        /// <summary>The base of the power.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "base", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ Base
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>();
        }

        /// <summary>The expression that this operation consists of.</summary>
        /// <remarks>
        /// Must be implemented by derived classes.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "expression", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}")]
        public override Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ Expression
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>();
        }

        /// <summary>The number of times to multiply.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "pow", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ Pow
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PropertyNamedProperty.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Reproduction for https://github.com/aws/jsii/issues/1113 Where a method or property named "property" would result in impossible to load Python code.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.PropertyNamedProperty), fullyQualifiedName: "jsii-calc.PropertyNamedProperty")]
    public class PropertyNamedProperty : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public PropertyNamedProperty(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PropertyNamedProperty(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PropertyNamedProperty(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string Property
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "yetAnoterOne", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public virtual bool YetAnoterOne
        {
            get => GetInstanceProperty<bool>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PublicClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.PublicClass), fullyQualifiedName: "jsii-calc.PublicClass")]
    public class PublicClass : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public PublicClass(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PublicClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PublicClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "hello")]
        public virtual void Hello()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PythonReservedWords.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.PythonReservedWords), fullyQualifiedName: "jsii-calc.PythonReservedWords")]
    public class PythonReservedWords : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public PythonReservedWords(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PythonReservedWords(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PythonReservedWords(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "and")]
        public virtual void And()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "as")]
        public virtual void As()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "assert")]
        public virtual void Assert()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "async")]
        public virtual void Async()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "await")]
        public virtual void Await()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "break")]
        public virtual void Break()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "class")]
        public virtual void Class()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "continue")]
        public virtual void Continue()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "def")]
        public virtual void Def()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "del")]
        public virtual void Del()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "elif")]
        public virtual void Elif()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "else")]
        public virtual void Else()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "except")]
        public virtual void Except()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "finally")]
        public virtual void Finally()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "for")]
        public virtual void For()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "from")]
        public virtual void From()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "global")]
        public virtual void Global()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "if")]
        public virtual void If()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "import")]
        public virtual void Import()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "in")]
        public virtual void In()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "is")]
        public virtual void Is()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "lambda")]
        public virtual void Lambda()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "nonlocal")]
        public virtual void Nonlocal()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "not")]
        public virtual void Not()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "or")]
        public virtual void Or()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "pass")]
        public virtual void Pass()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "raise")]
        public virtual void Raise()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "return")]
        public virtual void Return()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "try")]
        public virtual void Try()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "while")]
        public virtual void While()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "with")]
        public virtual void With()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "yield")]
        public virtual void Yield()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PythonSelf/ClassWithSelf.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.PythonSelf
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.PythonSelf.ClassWithSelf), fullyQualifiedName: "jsii-calc.PythonSelf.ClassWithSelf", parametersJson: "[{\\"name\\":\\"self\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
    public class ClassWithSelf : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ClassWithSelf(string self): base(new DeputyProps(new object[]{self}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithSelf(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithSelf(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "method", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"self\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public virtual string Method(double self)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(double)}, new object[]{self});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "self", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string Self
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PythonSelf/ClassWithSelfKwarg.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.PythonSelf
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.PythonSelf.ClassWithSelfKwarg), fullyQualifiedName: "jsii-calc.PythonSelf.ClassWithSelfKwarg", parametersJson: "[{\\"name\\":\\"props\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.PythonSelf.StructWithSelf\\"}}]")]
    public class ClassWithSelfKwarg : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ClassWithSelfKwarg(Amazon.JSII.Tests.CalculatorNamespace.PythonSelf.IStructWithSelf props): base(new DeputyProps(new object[]{props}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithSelfKwarg(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ClassWithSelfKwarg(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "props", typeJson: "{\\"fqn\\":\\"jsii-calc.PythonSelf.StructWithSelf\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.PythonSelf.IStructWithSelf Props
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.PythonSelf.IStructWithSelf>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PythonSelf/IInterfaceWithSelf.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.PythonSelf
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IInterfaceWithSelf), fullyQualifiedName: "jsii-calc.PythonSelf.IInterfaceWithSelf")]
    public interface IInterfaceWithSelf
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "method", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"self\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        string Method(double self);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PythonSelf/IInterfaceWithSelfProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.PythonSelf
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IInterfaceWithSelf), fullyQualifiedName: "jsii-calc.PythonSelf.IInterfaceWithSelf")]
    internal sealed class IInterfaceWithSelfProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.PythonSelf.IInterfaceWithSelf
    {
        private IInterfaceWithSelfProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "method", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"self\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public string Method(double self)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(double)}, new object[]{self});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PythonSelf/IStructWithSelf.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.PythonSelf
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IStructWithSelf), fullyQualifiedName: "jsii-calc.PythonSelf.StructWithSelf")]
    public interface IStructWithSelf
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "self", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string Self
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PythonSelf/StructWithSelf.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.PythonSelf
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.PythonSelf.StructWithSelf")]
    public class StructWithSelf : Amazon.JSII.Tests.CalculatorNamespace.PythonSelf.IStructWithSelf
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "self", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string Self
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/PythonSelf/StructWithSelfProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.PythonSelf
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IStructWithSelf), fullyQualifiedName: "jsii-calc.PythonSelf.StructWithSelf")]
    internal sealed class StructWithSelfProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.PythonSelf.IStructWithSelf
    {
        private StructWithSelfProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "self", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Self
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ReferenceEnumFromScopedPackage.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>See awslabs/jsii#138.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ReferenceEnumFromScopedPackage), fullyQualifiedName: "jsii-calc.ReferenceEnumFromScopedPackage")]
    public class ReferenceEnumFromScopedPackage : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ReferenceEnumFromScopedPackage(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ReferenceEnumFromScopedPackage(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ReferenceEnumFromScopedPackage(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "loadFoo", returnsJson: "{\\"optional\\":true,\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.EnumFromScopedModule\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.EnumFromScopedModule? LoadFoo()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.EnumFromScopedModule?>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "saveFoo", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.EnumFromScopedModule\\"}}]")]
        public virtual void SaveFoo(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.EnumFromScopedModule @value)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.EnumFromScopedModule)}, new object[]{@value});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "foo", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.EnumFromScopedModule\\"}", isOptional: true)]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.EnumFromScopedModule? Foo
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.EnumFromScopedModule?>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/ReturnsPrivateImplementationOfInterface.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Helps ensure the JSII kernel &amp; runtime cooperate correctly when an un-exported instance of a class is returned with a declared type that is an exported interface, and the instance inherits from an exported class.</summary>
    /// <returns>an instance of an un-exported class that extends \`ExportedBaseClass\`, declared as \`IPrivatelyImplemented\`.</returns>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>See</strong>: https://github.com/aws/jsii/issues/320
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.ReturnsPrivateImplementationOfInterface), fullyQualifiedName: "jsii-calc.ReturnsPrivateImplementationOfInterface")]
    public class ReturnsPrivateImplementationOfInterface : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public ReturnsPrivateImplementationOfInterface(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ReturnsPrivateImplementationOfInterface(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ReturnsPrivateImplementationOfInterface(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "privateImplementation", typeJson: "{\\"fqn\\":\\"jsii-calc.IPrivatelyImplemented\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.IPrivatelyImplemented PrivateImplementation
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.IPrivatelyImplemented>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/RootStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <summary>This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.</summary>
    /// <remarks>
    /// This is cheating with the (current) declared types, but this is the "more
    /// idiomatic" way for Pythonists.
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.RootStruct")]
    public class RootStruct : Amazon.JSII.Tests.CalculatorNamespace.IRootStruct
    {
        /// <summary>May not be empty.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "stringProp", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string StringProp
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "nestedStruct", typeJson: "{\\"fqn\\":\\"jsii-calc.NestedStruct\\"}", isOptional: true, isOverride: true)]
        public Amazon.JSII.Tests.CalculatorNamespace.INestedStruct? NestedStruct
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/RootStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.</summary>
    /// <remarks>
    /// This is cheating with the (current) declared types, but this is the "more
    /// idiomatic" way for Pythonists.
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IRootStruct), fullyQualifiedName: "jsii-calc.RootStruct")]
    internal sealed class RootStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IRootStruct
    {
        private RootStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>May not be empty.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "stringProp", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string StringProp
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "nestedStruct", typeJson: "{\\"fqn\\":\\"jsii-calc.NestedStruct\\"}", isOptional: true)]
        public Amazon.JSII.Tests.CalculatorNamespace.INestedStruct? NestedStruct
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.INestedStruct?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/RootStructValidator.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.RootStructValidator), fullyQualifiedName: "jsii-calc.RootStructValidator")]
    public class RootStructValidator : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RootStructValidator(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RootStructValidator(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "validate", parametersJson: "[{\\"name\\":\\"struct\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.RootStruct\\"}}]")]
        public static void Validate(Amazon.JSII.Tests.CalculatorNamespace.IRootStruct @struct)
        {
            InvokeStaticVoidMethod(typeof(Amazon.JSII.Tests.CalculatorNamespace.RootStructValidator), new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IRootStruct)}, new object[]{@struct});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/RuntimeTypeChecking.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.RuntimeTypeChecking), fullyQualifiedName: "jsii-calc.RuntimeTypeChecking")]
    public class RuntimeTypeChecking : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public RuntimeTypeChecking(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RuntimeTypeChecking(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RuntimeTypeChecking(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "methodWithDefaultedArguments", parametersJson: "[{\\"name\\":\\"arg1\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"number\\"}},{\\"name\\":\\"arg2\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"arg3\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"date\\"}}]")]
        public virtual void MethodWithDefaultedArguments(double? arg1 = null, string? arg2 = null, System.DateTime? arg3 = null)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(double), typeof(string), typeof(System.DateTime)}, new object?[]{arg1, arg2, arg3});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "methodWithOptionalAnyArgument", parametersJson: "[{\\"name\\":\\"arg\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"any\\"}}]")]
        public virtual void MethodWithOptionalAnyArgument(object? arg = null)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(object)}, new object?[]{arg});
        }

        /// <summary>Used to verify verification of number of method arguments.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "methodWithOptionalArguments", parametersJson: "[{\\"name\\":\\"arg1\\",\\"type\\":{\\"primitive\\":\\"number\\"}},{\\"name\\":\\"arg2\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"arg3\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"date\\"}}]")]
        public virtual void MethodWithOptionalArguments(double arg1, string arg2, System.DateTime? arg3 = null)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(double), typeof(string), typeof(System.DateTime)}, new object?[]{arg1, arg2, arg3});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SecondLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.SecondLevelStruct")]
    public class SecondLevelStruct : Amazon.JSII.Tests.CalculatorNamespace.ISecondLevelStruct
    {
        /// <summary>It's long and required.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "deeperRequiredProp", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string DeeperRequiredProp
        {
            get;
            set;
        }

        /// <summary>It's long, but you'll almost never pass it.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "deeperOptionalProp", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? DeeperOptionalProp
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SecondLevelStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(ISecondLevelStruct), fullyQualifiedName: "jsii-calc.SecondLevelStruct")]
    internal sealed class SecondLevelStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.ISecondLevelStruct
    {
        private SecondLevelStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>It's long and required.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "deeperRequiredProp", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string DeeperRequiredProp
        {
            get => GetInstanceProperty<string>();
        }

        /// <summary>It's long, but you'll almost never pass it.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "deeperOptionalProp", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? DeeperOptionalProp
        {
            get => GetInstanceProperty<string?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SingleInstanceTwoTypes.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Test that a single instance can be returned under two different FQNs.</summary>
    /// <remarks>
    /// JSII clients can instantiate 2 different strongly-typed wrappers for the same
    /// object. Unfortunately, this will break object equality, but if we didn't do
    /// this it would break runtime type checks in the JVM or CLR.
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.SingleInstanceTwoTypes), fullyQualifiedName: "jsii-calc.SingleInstanceTwoTypes")]
    public class SingleInstanceTwoTypes : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public SingleInstanceTwoTypes(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SingleInstanceTwoTypes(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SingleInstanceTwoTypes(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "interface1", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.InbetweenClass\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.InbetweenClass Interface1()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.InbetweenClass>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "interface2", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.IPublicInterface\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface Interface2()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.IPublicInterface>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SingletonInt.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Verifies that singleton enums are handled correctly.</summary>
    /// <remarks>
    /// https://github.com/aws/jsii/issues/231
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.SingletonInt), fullyQualifiedName: "jsii-calc.SingletonInt")]
    public class SingletonInt : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SingletonInt(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SingletonInt(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "isSingletonInt", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public virtual bool IsSingletonInt(double @value)
        {
            return InvokeInstanceMethod<bool>(new System.Type[]{typeof(double)}, new object[]{@value});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SingletonIntEnum.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{

    /// <summary>A singleton integer.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiEnum(nativeType: typeof(SingletonIntEnum), fullyQualifiedName: "jsii-calc.SingletonIntEnum")]
    public enum SingletonIntEnum
    {
        /// <summary>Elite!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "SINGLETON_INT")]
        SINGLETON_INT
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SingletonString.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Verifies that singleton enums are handled correctly.</summary>
    /// <remarks>
    /// https://github.com/aws/jsii/issues/231
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.SingletonString), fullyQualifiedName: "jsii-calc.SingletonString")]
    public class SingletonString : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SingletonString(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SingletonString(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "isSingletonString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public virtual bool IsSingletonString(string @value)
        {
            return InvokeInstanceMethod<bool>(new System.Type[]{typeof(string)}, new object[]{@value});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SingletonStringEnum.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{

    /// <summary>A singleton string.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiEnum(nativeType: typeof(SingletonStringEnum), fullyQualifiedName: "jsii-calc.SingletonStringEnum")]
    public enum SingletonStringEnum
    {
        /// <summary>1337.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "SINGLETON_STRING")]
        SINGLETON_STRING
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SmellyStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.SmellyStruct")]
    public class SmellyStruct : Amazon.JSII.Tests.CalculatorNamespace.ISmellyStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string Property
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "yetAnoterOne", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOverride: true)]
        public bool YetAnoterOne
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SmellyStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(ISmellyStruct), fullyQualifiedName: "jsii-calc.SmellyStruct")]
    internal sealed class SmellyStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.ISmellyStruct
    {
        private SmellyStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "property", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Property
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "yetAnoterOne", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public bool YetAnoterOne
        {
            get => GetInstanceProperty<bool>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SomeTypeJsii976.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.SomeTypeJsii976), fullyQualifiedName: "jsii-calc.SomeTypeJsii976")]
    public class SomeTypeJsii976 : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public SomeTypeJsii976(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SomeTypeJsii976(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SomeTypeJsii976(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "returnAnonymous", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public static object ReturnAnonymous()
        {
            return InvokeStaticMethod<object>(typeof(Amazon.JSII.Tests.CalculatorNamespace.SomeTypeJsii976), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "returnReturn", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.IReturnJsii976\\"}}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.IReturnJsii976 ReturnReturn()
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.IReturnJsii976>(typeof(Amazon.JSII.Tests.CalculatorNamespace.SomeTypeJsii976), new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StableClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.StableClass), fullyQualifiedName: "jsii-calc.StableClass", parametersJson: "[{\\"name\\":\\"readonlyString\\",\\"type\\":{\\"primitive\\":\\"string\\"}},{\\"name\\":\\"mutableNumber\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
    public class StableClass : DeputyBase
    {
        public StableClass(string readonlyString, double? mutableNumber = null): base(new DeputyProps(new object?[]{readonlyString, mutableNumber}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StableClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StableClass(DeputyProps props): base(props)
        {
        }

        [JsiiMethod(name: "method")]
        public virtual void Method()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string ReadonlyProperty
        {
            get => GetInstanceProperty<string>();
        }

        [JsiiOptional]
        [JsiiProperty(name: "mutableProperty", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        public virtual double? MutableProperty
        {
            get => GetInstanceProperty<double?>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StableEnum.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{

    [JsiiEnum(nativeType: typeof(StableEnum), fullyQualifiedName: "jsii-calc.StableEnum")]
    public enum StableEnum
    {
        [JsiiEnumMember(name: "OPTION_A")]
        OPTION_A,
        [JsiiEnumMember(name: "OPTION_B")]
        OPTION_B
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StableStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    [JsiiByValue(fqn: "jsii-calc.StableStruct")]
    public class StableStruct : Amazon.JSII.Tests.CalculatorNamespace.IStableStruct
    {
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string ReadonlyProperty
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StableStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    [JsiiTypeProxy(nativeType: typeof(IStableStruct), fullyQualifiedName: "jsii-calc.StableStruct")]
    internal sealed class StableStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IStableStruct
    {
        private StableStructProxy(ByRefValue reference): base(reference)
        {
        }

        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string ReadonlyProperty
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StaticContext.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>This is used to validate the ability to use \`this\` from within a static context.</summary>
    /// <remarks>
    /// https://github.com/awslabs/aws-cdk/issues/2304
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.StaticContext), fullyQualifiedName: "jsii-calc.StaticContext")]
    public class StaticContext : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StaticContext(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StaticContext(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "canAccessStaticContext", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}")]
        public static bool CanAccessStaticContext()
        {
            return InvokeStaticMethod<bool>(typeof(Amazon.JSII.Tests.CalculatorNamespace.StaticContext), new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "staticVariable", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public static bool StaticVariable
        {
            get => GetStaticProperty<bool>(typeof(Amazon.JSII.Tests.CalculatorNamespace.StaticContext));
            set => SetStaticProperty(typeof(Amazon.JSII.Tests.CalculatorNamespace.StaticContext), value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Statics.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Statics), fullyQualifiedName: "jsii-calc.Statics", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
    public class Statics : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Statics(string @value): base(new DeputyProps(new object[]{@value}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Statics(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Statics(DeputyProps props): base(props)
        {
        }

        /// <summary>Jsdocs for static method.</summary>
        /// <param name="name">The name of the person to say hello to.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "staticMethod", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"The name of the person to say hello to.\\"},\\"name\\":\\"name\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public static string StaticMethod(string name)
        {
            return InvokeStaticMethod<string>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Statics), new System.Type[]{typeof(string)}, new object[]{name});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "justMethod", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public virtual string JustMethod()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <summary>Constants may also use all-caps.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "BAR", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public static double BAR
        {
            get;
        }
        = GetStaticProperty<double>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Statics));

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "ConstObj", typeJson: "{\\"fqn\\":\\"jsii-calc.DoubleTrouble\\"}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.DoubleTrouble ConstObj
        {
            get;
        }
        = GetStaticProperty<Amazon.JSII.Tests.CalculatorNamespace.DoubleTrouble>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Statics));

        /// <summary>Jsdocs for static property.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "Foo", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public static string Foo
        {
            get;
        }
        = GetStaticProperty<string>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Statics));

        /// <summary>Constants can also use camelCase.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "zooBar", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"map\\"}}")]
        public static System.Collections.Generic.IDictionary<string, string> ZooBar
        {
            get;
        }
        = GetStaticProperty<System.Collections.Generic.IDictionary<string, string>>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Statics));

        /// <summary>Jsdocs for static getter.</summary>
        /// <remarks>
        /// Jsdocs for static setter.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "instance", typeJson: "{\\"fqn\\":\\"jsii-calc.Statics\\"}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.Statics Instance
        {
            get => GetStaticProperty<Amazon.JSII.Tests.CalculatorNamespace.Statics>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Statics));
            set => SetStaticProperty(typeof(Amazon.JSII.Tests.CalculatorNamespace.Statics), value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "nonConstStatic", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public static double NonConstStatic
        {
            get => GetStaticProperty<double>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Statics));
            set => SetStaticProperty(typeof(Amazon.JSII.Tests.CalculatorNamespace.Statics), value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string Value
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StringEnum.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiEnum(nativeType: typeof(StringEnum), fullyQualifiedName: "jsii-calc.StringEnum")]
    public enum StringEnum
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "A")]
        A,
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "B")]
        B,
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "C")]
        C
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StripInternal.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.StripInternal), fullyQualifiedName: "jsii-calc.StripInternal")]
    public class StripInternal : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public StripInternal(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StripInternal(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StripInternal(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "youSeeMe", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string YouSeeMe
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StructA.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <summary>We can serialize and deserialize structs without silently ignoring optional fields.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.StructA")]
    public class StructA : Amazon.JSII.Tests.CalculatorNamespace.IStructA
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "requiredString", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string RequiredString
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalNumber", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true, isOverride: true)]
        public double? OptionalNumber
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalString", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? OptionalString
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StructAProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>We can serialize and deserialize structs without silently ignoring optional fields.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IStructA), fullyQualifiedName: "jsii-calc.StructA")]
    internal sealed class StructAProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IStructA
    {
        private StructAProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "requiredString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string RequiredString
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalNumber", typeJson: "{\\"primitive\\":\\"number\\"}", isOptional: true)]
        public double? OptionalNumber
        {
            get => GetInstanceProperty<double?>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalString", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? OptionalString
        {
            get => GetInstanceProperty<string?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StructB.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <summary>This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.StructB")]
    public class StructB : Amazon.JSII.Tests.CalculatorNamespace.IStructB
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "requiredString", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string RequiredString
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalBoolean", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true, isOverride: true)]
        public bool? OptionalBoolean
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalStructA", typeJson: "{\\"fqn\\":\\"jsii-calc.StructA\\"}", isOptional: true, isOverride: true)]
        public Amazon.JSII.Tests.CalculatorNamespace.IStructA? OptionalStructA
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StructBProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IStructB), fullyQualifiedName: "jsii-calc.StructB")]
    internal sealed class StructBProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IStructB
    {
        private StructBProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "requiredString", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string RequiredString
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalBoolean", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true)]
        public bool? OptionalBoolean
        {
            get => GetInstanceProperty<bool?>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optionalStructA", typeJson: "{\\"fqn\\":\\"jsii-calc.StructA\\"}", isOptional: true)]
        public Amazon.JSII.Tests.CalculatorNamespace.IStructA? OptionalStructA
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.IStructA?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StructParameterType.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <summary>Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.</summary>
    /// <remarks>
    /// See: https://github.com/aws/aws-cdk/issues/4302
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.StructParameterType")]
    public class StructParameterType : Amazon.JSII.Tests.CalculatorNamespace.IStructParameterType
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "scope", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string Scope
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "props", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true, isOverride: true)]
        public bool? Props
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StructParameterTypeProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.</summary>
    /// <remarks>
    /// See: https://github.com/aws/aws-cdk/issues/4302
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IStructParameterType), fullyQualifiedName: "jsii-calc.StructParameterType")]
    internal sealed class StructParameterTypeProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IStructParameterType
    {
        private StructParameterTypeProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "scope", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Scope
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "props", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOptional: true)]
        public bool? Props
        {
            get => GetInstanceProperty<bool?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StructPassing.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Just because we can.</summary>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.StructPassing), fullyQualifiedName: "jsii-calc.StructPassing")]
    public class StructPassing : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public StructPassing(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StructPassing(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StructPassing(DeputyProps props): base(props)
        {
        }

        [JsiiMethod(name: "howManyVarArgsDidIPass", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"_positional\\",\\"type\\":{\\"primitive\\":\\"number\\"}},{\\"name\\":\\"inputs\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.TopLevelStruct\\"},\\"variadic\\":true}]")]
        public static double HowManyVarArgsDidIPass(double positional, params Amazon.JSII.Tests.CalculatorNamespace.ITopLevelStruct[] inputs)
        {
            return InvokeStaticMethod<double>(typeof(Amazon.JSII.Tests.CalculatorNamespace.StructPassing), new System.Type[]{typeof(double), typeof(Amazon.JSII.Tests.CalculatorNamespace.ITopLevelStruct[])}, new object[]{positional, inputs});
        }

        [JsiiMethod(name: "roundTrip", returnsJson: "{\\"type\\":{\\"fqn\\":\\"jsii-calc.TopLevelStruct\\"}}", parametersJson: "[{\\"name\\":\\"_positional\\",\\"type\\":{\\"primitive\\":\\"number\\"}},{\\"name\\":\\"input\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.TopLevelStruct\\"}}]")]
        public static Amazon.JSII.Tests.CalculatorNamespace.ITopLevelStruct RoundTrip(double positional, Amazon.JSII.Tests.CalculatorNamespace.ITopLevelStruct input)
        {
            return InvokeStaticMethod<Amazon.JSII.Tests.CalculatorNamespace.ITopLevelStruct>(typeof(Amazon.JSII.Tests.CalculatorNamespace.StructPassing), new System.Type[]{typeof(double), typeof(Amazon.JSII.Tests.CalculatorNamespace.ITopLevelStruct)}, new object[]{positional, input});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StructUnionConsumer.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.StructUnionConsumer), fullyQualifiedName: "jsii-calc.StructUnionConsumer")]
    public class StructUnionConsumer : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StructUnionConsumer(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StructUnionConsumer(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "isStructA", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"struct\\",\\"type\\":{\\"union\\":{\\"types\\":[{\\"fqn\\":\\"jsii-calc.StructA\\"},{\\"fqn\\":\\"jsii-calc.StructB\\"}]}}}]")]
        public static bool IsStructA(object @struct)
        {
            return InvokeStaticMethod<bool>(typeof(Amazon.JSII.Tests.CalculatorNamespace.StructUnionConsumer), new System.Type[]{typeof(object)}, new object[]{@struct});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "isStructB", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"struct\\",\\"type\\":{\\"union\\":{\\"types\\":[{\\"fqn\\":\\"jsii-calc.StructA\\"},{\\"fqn\\":\\"jsii-calc.StructB\\"}]}}}]")]
        public static bool IsStructB(object @struct)
        {
            return InvokeStaticMethod<bool>(typeof(Amazon.JSII.Tests.CalculatorNamespace.StructUnionConsumer), new System.Type[]{typeof(object)}, new object[]{@struct});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StructWithJavaReservedWords.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.StructWithJavaReservedWords")]
    public class StructWithJavaReservedWords : Amazon.JSII.Tests.CalculatorNamespace.IStructWithJavaReservedWords
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "default", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string Default
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "assert", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? Assert
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "result", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? Result
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "that", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? That
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/StructWithJavaReservedWordsProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IStructWithJavaReservedWords), fullyQualifiedName: "jsii-calc.StructWithJavaReservedWords")]
    internal sealed class StructWithJavaReservedWordsProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IStructWithJavaReservedWords
    {
        private StructWithJavaReservedWordsProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "default", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Default
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "assert", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? Assert
        {
            get => GetInstanceProperty<string?>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "result", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? Result
        {
            get => GetInstanceProperty<string?>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "that", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? That
        {
            get => GetInstanceProperty<string?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/BackReferences/IMyClassReference.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.BackReferences
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IMyClassReference), fullyQualifiedName: "jsii-calc.submodule.back_references.MyClassReference")]
    public interface IMyClassReference
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "reference", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.MyClass\\"}")]
        Amazon.JSII.Tests.CalculatorNamespace.Submodule.MyClass Reference
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/BackReferences/MyClassReference.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.BackReferences
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.submodule.back_references.MyClassReference")]
    public class MyClassReference : Amazon.JSII.Tests.CalculatorNamespace.Submodule.BackReferences.IMyClassReference
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "reference", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.MyClass\\"}", isOverride: true)]
        public Amazon.JSII.Tests.CalculatorNamespace.Submodule.MyClass Reference
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/BackReferences/MyClassReferenceProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.BackReferences
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IMyClassReference), fullyQualifiedName: "jsii-calc.submodule.back_references.MyClassReference")]
    internal sealed class MyClassReferenceProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.Submodule.BackReferences.IMyClassReference
    {
        private MyClassReferenceProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "reference", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.MyClass\\"}")]
        public Amazon.JSII.Tests.CalculatorNamespace.Submodule.MyClass Reference
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.Submodule.MyClass>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/Awesomeness.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiEnum(nativeType: typeof(Awesomeness), fullyQualifiedName: "jsii-calc.submodule.child.Awesomeness")]
    public enum Awesomeness
    {
        /// <summary>It was awesome!</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "AWESOME")]
        AWESOME
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/Goodness.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiEnum(nativeType: typeof(Goodness), fullyQualifiedName: "jsii-calc.submodule.child.Goodness")]
    public enum Goodness
    {
        /// <summary>It's pretty good.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "PRETTY_GOOD")]
        PRETTY_GOOD,
        /// <summary>It's really good.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "REALLY_GOOD")]
        REALLY_GOOD,
        /// <summary>It's amazingly good.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "AMAZINGLY_GOOD")]
        AMAZINGLY_GOOD
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/IKwargsProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IKwargsProps), fullyQualifiedName: "jsii-calc.submodule.child.KwargsProps")]
    public interface IKwargsProps : Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.ISomeStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "extra", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Extra
        {
            get
            {
                return null;
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/ISomeStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(ISomeStruct), fullyQualifiedName: "jsii-calc.submodule.child.SomeStruct")]
    public interface ISomeStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "prop", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.SomeEnum\\"}")]
        Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.SomeEnum Prop
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/IStructure.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(IStructure), fullyQualifiedName: "jsii-calc.submodule.child.Structure")]
    public interface IStructure
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bool", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        bool Bool
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/InnerClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.InnerClass), fullyQualifiedName: "jsii-calc.submodule.child.InnerClass")]
    public class InnerClass : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public InnerClass(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected InnerClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected InnerClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "staticProp", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.SomeStruct\\"}")]
        public static Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.ISomeStruct StaticProp
        {
            get;
        }
        = GetStaticProperty<Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.ISomeStruct>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.InnerClass));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/KwargsProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.submodule.child.KwargsProps")]
    public class KwargsProps : Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.IKwargsProps
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "extra", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? Extra
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "prop", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.SomeEnum\\"}", isOverride: true)]
        public Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.SomeEnum Prop
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/KwargsPropsProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IKwargsProps), fullyQualifiedName: "jsii-calc.submodule.child.KwargsProps")]
    internal sealed class KwargsPropsProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.IKwargsProps
    {
        private KwargsPropsProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "extra", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? Extra
        {
            get => GetInstanceProperty<string?>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "prop", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.SomeEnum\\"}")]
        public Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.SomeEnum Prop
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.SomeEnum>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/OuterClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{
    /// <summary>Checks that classes can self-reference during initialization.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>See</strong>: : https://github.com/aws/jsii/pull/1706
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.OuterClass), fullyQualifiedName: "jsii-calc.submodule.child.OuterClass")]
    public class OuterClass : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public OuterClass(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OuterClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OuterClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "innerClass", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.InnerClass\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.InnerClass InnerClass
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.InnerClass>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/SomeEnum.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiEnum(nativeType: typeof(SomeEnum), fullyQualifiedName: "jsii-calc.submodule.child.SomeEnum")]
    public enum SomeEnum
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiEnumMember(name: "SOME")]
        SOME
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/SomeStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.submodule.child.SomeStruct")]
    public class SomeStruct : Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.ISomeStruct
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "prop", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.SomeEnum\\"}", isOverride: true)]
        public Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.SomeEnum Prop
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/SomeStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(ISomeStruct), fullyQualifiedName: "jsii-calc.submodule.child.SomeStruct")]
    internal sealed class SomeStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.ISomeStruct
    {
        private SomeStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "prop", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.SomeEnum\\"}")]
        public Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.SomeEnum Prop
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.SomeEnum>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/Structure.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.submodule.child.Structure")]
    public class Structure : Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.IStructure
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bool", typeJson: "{\\"primitive\\":\\"boolean\\"}", isOverride: true)]
        public bool Bool
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Child/StructureProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IStructure), fullyQualifiedName: "jsii-calc.submodule.child.Structure")]
    internal sealed class StructureProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.IStructure
    {
        private StructureProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bool", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public bool Bool
        {
            get => GetInstanceProperty<bool>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/Isolated/Kwargs.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.Isolated
{
    /// <summary>Ensures imports are correctly registered for kwargs lifted properties from super-structs.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Submodule.Isolated.Kwargs), fullyQualifiedName: "jsii-calc.submodule.isolated.Kwargs")]
    public class Kwargs : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Kwargs(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Kwargs(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "method", returnsJson: "{\\"type\\":{\\"primitive\\":\\"boolean\\"}}", parametersJson: "[{\\"name\\":\\"props\\",\\"optional\\":true,\\"type\\":{\\"fqn\\":\\"jsii-calc.submodule.child.KwargsProps\\"}}]")]
        public static bool Method(Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.IKwargsProps? props = null)
        {
            return InvokeStaticMethod<bool>(typeof(Amazon.JSII.Tests.CalculatorNamespace.Submodule.Isolated.Kwargs), new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.IKwargsProps)}, new object?[]{props});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/MyClass.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Submodule.MyClass), fullyQualifiedName: "jsii-calc.submodule.MyClass", parametersJson: "[{\\"name\\":\\"props\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.submodule.child.SomeStruct\\"}}]")]
    public class MyClass : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.Submodule.NestedSubmodule.DeeplyNested.INamespaced
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public MyClass(Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.ISomeStruct props): base(new DeputyProps(new object[]{props}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected MyClass(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected MyClass(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "awesomeness", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.Awesomeness\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.Awesomeness Awesomeness
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.Awesomeness>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "definedAt", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string DefinedAt
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "goodness", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.Goodness\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.Goodness Goodness
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.Goodness>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "props", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.SomeStruct\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.ISomeStruct Props
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.ISomeStruct>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "allTypes", typeJson: "{\\"fqn\\":\\"jsii-calc.AllTypes\\"}", isOptional: true)]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.AllTypes? AllTypes
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.AllTypes?>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/NestedSubmodule/DeeplyNested/INamespaced.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.NestedSubmodule.DeeplyNested
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiInterface(nativeType: typeof(INamespaced), fullyQualifiedName: "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced")]
    public interface INamespaced
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "definedAt", typeJson: "{\\"primitive\\":\\"string\\"}")]
        string DefinedAt
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/NestedSubmodule/DeeplyNested/INamespacedProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.NestedSubmodule.DeeplyNested
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(INamespaced), fullyQualifiedName: "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced")]
    internal sealed class INamespacedProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.Submodule.NestedSubmodule.DeeplyNested.INamespaced
    {
        private INamespacedProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "definedAt", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string DefinedAt
        {
            get => GetInstanceProperty<string>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/NestedSubmodule/Namespaced.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.NestedSubmodule
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Submodule.NestedSubmodule.Namespaced), fullyQualifiedName: "jsii-calc.submodule.nested_submodule.Namespaced")]
    public abstract class Namespaced : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.Submodule.NestedSubmodule.DeeplyNested.INamespaced
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Namespaced(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Namespaced(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "definedAt", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string DefinedAt
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "goodness", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.Goodness\\"}")]
        public abstract Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.Goodness Goodness
        {
            get;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Submodule/NestedSubmodule/NamespacedProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace.Submodule.NestedSubmodule
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Submodule.NestedSubmodule.Namespaced), fullyQualifiedName: "jsii-calc.submodule.nested_submodule.Namespaced")]
    internal sealed class NamespacedProxy : Amazon.JSII.Tests.CalculatorNamespace.Submodule.NestedSubmodule.Namespaced
    {
        private NamespacedProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "goodness", typeJson: "{\\"fqn\\":\\"jsii-calc.submodule.child.Goodness\\"}")]
        public override Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.Goodness Goodness
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.Submodule.Child.Goodness>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Sum.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>An operation that sums multiple values.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Sum), fullyQualifiedName: "jsii-calc.Sum")]
    public class Sum : Amazon.JSII.Tests.CalculatorNamespace.Composition.CompositeOperation
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Sum(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Sum(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Sum(DeputyProps props): base(props)
        {
        }

        /// <summary>The expression that this operation consists of.</summary>
        /// <remarks>
        /// Must be implemented by derived classes.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "expression", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}")]
        public override Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ Expression
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>();
        }

        /// <summary>The parts to sum.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "parts", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"},\\"kind\\":\\"array\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_[] Parts
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_[]>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SupportsNiceJavaBuilder.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.SupportsNiceJavaBuilder), fullyQualifiedName: "jsii-calc.SupportsNiceJavaBuilder", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"some identifier.\\"},\\"name\\":\\"id\\",\\"type\\":{\\"primitive\\":\\"number\\"}},{\\"docs\\":{\\"summary\\":\\"the default value of \`bar\`.\\"},\\"name\\":\\"defaultBar\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"number\\"}},{\\"docs\\":{\\"summary\\":\\"some props once can provide.\\"},\\"name\\":\\"props\\",\\"optional\\":true,\\"type\\":{\\"fqn\\":\\"jsii-calc.SupportsNiceJavaBuilderProps\\"}},{\\"docs\\":{\\"summary\\":\\"a variadic continuation.\\"},\\"name\\":\\"rest\\",\\"type\\":{\\"primitive\\":\\"string\\"},\\"variadic\\":true}]")]
    public class SupportsNiceJavaBuilder : Amazon.JSII.Tests.CalculatorNamespace.SupportsNiceJavaBuilderWithRequiredProps
    {
        /// <param name="id">some identifier.</param>
        /// <param name="defaultBar">the default value of \`bar\`.</param>
        /// <param name="props">some props once can provide.</param>
        /// <param name="rest">a variadic continuation.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public SupportsNiceJavaBuilder(double id, double? defaultBar = null, Amazon.JSII.Tests.CalculatorNamespace.ISupportsNiceJavaBuilderProps? props = null, params string[] rest): base(new DeputyProps(new object?[]{id, defaultBar, props, rest}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SupportsNiceJavaBuilder(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SupportsNiceJavaBuilder(DeputyProps props): base(props)
        {
        }

        /// <summary>some identifier.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "id", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public override double Id
        {
            get => GetInstanceProperty<double>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "rest", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"string\\"},\\"kind\\":\\"array\\"}}")]
        public virtual string[] Rest
        {
            get => GetInstanceProperty<string[]>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SupportsNiceJavaBuilderProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.SupportsNiceJavaBuilderProps")]
    public class SupportsNiceJavaBuilderProps : Amazon.JSII.Tests.CalculatorNamespace.ISupportsNiceJavaBuilderProps
    {
        /// <summary>Some number, like 42.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"number\\"}", isOverride: true)]
        public double Bar
        {
            get;
            set;
        }

        /// <summary>An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.</summary>
        /// <remarks>
        /// But here we are, doing it like we didn't care.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "id", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? Id
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SupportsNiceJavaBuilderPropsProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(ISupportsNiceJavaBuilderProps), fullyQualifiedName: "jsii-calc.SupportsNiceJavaBuilderProps")]
    internal sealed class SupportsNiceJavaBuilderPropsProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.ISupportsNiceJavaBuilderProps
    {
        private SupportsNiceJavaBuilderPropsProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Some number, like 42.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public double Bar
        {
            get => GetInstanceProperty<double>();
        }

        /// <summary>An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.</summary>
        /// <remarks>
        /// But here we are, doing it like we didn't care.
        /// 
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "id", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? Id
        {
            get => GetInstanceProperty<string?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SupportsNiceJavaBuilderWithRequiredProps.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>We can generate fancy builders in Java for classes which take a mix of positional &amp; struct parameters.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.SupportsNiceJavaBuilderWithRequiredProps), fullyQualifiedName: "jsii-calc.SupportsNiceJavaBuilderWithRequiredProps", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"some identifier of your choice.\\"},\\"name\\":\\"id\\",\\"type\\":{\\"primitive\\":\\"number\\"}},{\\"docs\\":{\\"summary\\":\\"some properties.\\"},\\"name\\":\\"props\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.SupportsNiceJavaBuilderProps\\"}}]")]
    public class SupportsNiceJavaBuilderWithRequiredProps : DeputyBase
    {
        /// <param name="id">some identifier of your choice.</param>
        /// <param name="props">some properties.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public SupportsNiceJavaBuilderWithRequiredProps(double id, Amazon.JSII.Tests.CalculatorNamespace.ISupportsNiceJavaBuilderProps props): base(new DeputyProps(new object[]{id, props}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SupportsNiceJavaBuilderWithRequiredProps(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SupportsNiceJavaBuilderWithRequiredProps(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bar", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public virtual double Bar
        {
            get => GetInstanceProperty<double>();
        }

        /// <summary>some identifier of your choice.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "id", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public virtual double Id
        {
            get => GetInstanceProperty<double>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "propId", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public virtual string? PropId
        {
            get => GetInstanceProperty<string?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/SyncVirtualMethods.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.SyncVirtualMethods), fullyQualifiedName: "jsii-calc.SyncVirtualMethods")]
    public class SyncVirtualMethods : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public SyncVirtualMethods(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SyncVirtualMethods(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SyncVirtualMethods(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "callerIsAsync", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", isAsync: true)]
        public virtual double CallerIsAsync()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "callerIsMethod", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}")]
        public virtual double CallerIsMethod()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "modifyOtherProperty", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public virtual void ModifyOtherProperty(string @value)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(string)}, new object[]{@value});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "modifyValueOfTheProperty", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public virtual void ModifyValueOfTheProperty(string @value)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(string)}, new object[]{@value});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "readA", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}")]
        public virtual double ReadA()
        {
            return InvokeInstanceMethod<double>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "retrieveOtherProperty", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public virtual string RetrieveOtherProperty()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "retrieveReadOnlyProperty", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public virtual string RetrieveReadOnlyProperty()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "retrieveValueOfTheProperty", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public virtual string RetrieveValueOfTheProperty()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "virtualMethod", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"n\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public virtual double VirtualMethod(double n)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(double)}, new object[]{n});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "writeA", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public virtual void WriteA(double @value)
        {
            InvokeInstanceVoidMethod(new System.Type[]{typeof(double)}, new object[]{@value});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "readonlyProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string ReadonlyProperty
        {
            get => GetInstanceProperty<string>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "a", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public virtual double A
        {
            get => GetInstanceProperty<double>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "callerIsProperty", typeJson: "{\\"primitive\\":\\"number\\"}")]
        public virtual double CallerIsProperty
        {
            get => GetInstanceProperty<double>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "otherProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string OtherProperty
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "theProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string TheProperty
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "valueOfOtherProperty", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public virtual string ValueOfOtherProperty
        {
            get => GetInstanceProperty<string>();
            set => SetInstanceProperty(value);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/Thrower.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.Thrower), fullyQualifiedName: "jsii-calc.Thrower")]
    public class Thrower : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public Thrower(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Thrower(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected Thrower(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "throwError")]
        public virtual void ThrowError()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/TopLevelStruct.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.TopLevelStruct")]
    public class TopLevelStruct : Amazon.JSII.Tests.CalculatorNamespace.ITopLevelStruct
    {
        /// <summary>This is a required field.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "required", typeJson: "{\\"primitive\\":\\"string\\"}", isOverride: true)]
        public string Required
        {
            get;
            set;
        }

        /// <summary>A union to really stress test our serialization.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "secondLevel", typeJson: "{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"number\\"},{\\"fqn\\":\\"jsii-calc.SecondLevelStruct\\"}]}}", isOverride: true)]
        public object SecondLevel
        {
            get;
            set;
        }

        /// <summary>You don't have to pass this.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optional", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true, isOverride: true)]
        public string? Optional
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/TopLevelStructProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(ITopLevelStruct), fullyQualifiedName: "jsii-calc.TopLevelStruct")]
    internal sealed class TopLevelStructProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.ITopLevelStruct
    {
        private TopLevelStructProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>This is a required field.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "required", typeJson: "{\\"primitive\\":\\"string\\"}")]
        public string Required
        {
            get => GetInstanceProperty<string>();
        }

        /// <summary>A union to really stress test our serialization.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "secondLevel", typeJson: "{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"number\\"},{\\"fqn\\":\\"jsii-calc.SecondLevelStruct\\"}]}}")]
        public object SecondLevel
        {
            get => GetInstanceProperty<object>();
        }

        /// <summary>You don't have to pass this.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "optional", typeJson: "{\\"primitive\\":\\"string\\"}", isOptional: true)]
        public string? Optional
        {
            get => GetInstanceProperty<string?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/UmaskCheck.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Checks the current file permissions are cool (no funky UMASK down-scoping happened).</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// 
    /// <strong>See</strong>: https://github.com/aws/jsii/issues/1765
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.UmaskCheck), fullyQualifiedName: "jsii-calc.UmaskCheck")]
    public class UmaskCheck : DeputyBase
    {
        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UmaskCheck(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UmaskCheck(DeputyProps props): base(props)
        {
        }

        /// <summary>This should return 0o644 (-rw-r--r--).</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "mode", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}")]
        public static double Mode()
        {
            return InvokeStaticMethod<double>(typeof(Amazon.JSII.Tests.CalculatorNamespace.UmaskCheck), new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/UnaryOperation.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>An operation on a single operand.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.UnaryOperation), fullyQualifiedName: "jsii-calc.UnaryOperation", parametersJson: "[{\\"name\\":\\"operand\\",\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}}]")]
    public abstract class UnaryOperation : Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Operation
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        protected UnaryOperation(Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ operand): base(new DeputyProps(new object[]{operand}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UnaryOperation(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UnaryOperation(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "operand", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.Value\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_ Operand
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.LibNamespace.Value_>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/UnaryOperationProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>An operation on a single operand.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.UnaryOperation), fullyQualifiedName: "jsii-calc.UnaryOperation")]
    internal sealed class UnaryOperationProxy : Amazon.JSII.Tests.CalculatorNamespace.UnaryOperation
    {
        private UnaryOperationProxy(ByRefValue reference): base(reference)
        {
        }

        /// <summary>The value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiProperty(name: "value", typeJson: "{\\"primitive\\":\\"number\\"}")]
        [System.Obsolete()]
        public override double Value
        {
            get => GetInstanceProperty<double>();
        }

        /// <summary>String representation of the value.</summary>
        /// <remarks>
        /// <strong>Stability</strong>: Deprecated
        /// </remarks>
        [JsiiMethod(name: "toString", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", isOverride: true)]
        [System.Obsolete()]
        public override string ToString()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/UnionProperties.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    #pragma warning disable CS8618

    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiByValue(fqn: "jsii-calc.UnionProperties")]
    public class UnionProperties : Amazon.JSII.Tests.CalculatorNamespace.IUnionProperties
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bar", typeJson: "{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"string\\"},{\\"primitive\\":\\"number\\"},{\\"fqn\\":\\"jsii-calc.AllTypes\\"}]}}", isOverride: true)]
        public object Bar
        {
            get;
            set;
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "foo", typeJson: "{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"string\\"},{\\"primitive\\":\\"number\\"}]}}", isOptional: true, isOverride: true)]
        public object? Foo
        {
            get;
            set;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/UnionPropertiesProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(IUnionProperties), fullyQualifiedName: "jsii-calc.UnionProperties")]
    internal sealed class UnionPropertiesProxy : DeputyBase, Amazon.JSII.Tests.CalculatorNamespace.IUnionProperties
    {
        private UnionPropertiesProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "bar", typeJson: "{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"string\\"},{\\"primitive\\":\\"number\\"},{\\"fqn\\":\\"jsii-calc.AllTypes\\"}]}}")]
        public object Bar
        {
            get => GetInstanceProperty<object>();
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiOptional]
        [JsiiProperty(name: "foo", typeJson: "{\\"union\\":{\\"types\\":[{\\"primitive\\":\\"string\\"},{\\"primitive\\":\\"number\\"}]}}", isOptional: true)]
        public object? Foo
        {
            get => GetInstanceProperty<object?>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/UpcasingReflectable.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Ensures submodule-imported types from dependencies can be used correctly.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.UpcasingReflectable), fullyQualifiedName: "jsii-calc.UpcasingReflectable", parametersJson: "[{\\"name\\":\\"delegate\\",\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"any\\"},\\"kind\\":\\"map\\"}}}]")]
    public class UpcasingReflectable : DeputyBase, Amazon.JSII.Tests.CustomSubmoduleName.IReflectable
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public UpcasingReflectable(System.Collections.Generic.IDictionary<string, object> @delegate): base(new DeputyProps(new object[]{@delegate}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UpcasingReflectable(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UpcasingReflectable(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "reflector", typeJson: "{\\"fqn\\":\\"@scope/jsii-calc-lib.submodule.Reflector\\"}")]
        public static Amazon.JSII.Tests.CustomSubmoduleName.Reflector Reflector
        {
            get;
        }
        = GetStaticProperty<Amazon.JSII.Tests.CustomSubmoduleName.Reflector>(typeof(Amazon.JSII.Tests.CalculatorNamespace.UpcasingReflectable));

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "entries", typeJson: "{\\"collection\\":{\\"elementtype\\":{\\"fqn\\":\\"@scope/jsii-calc-lib.submodule.ReflectableEntry\\"},\\"kind\\":\\"array\\"}}")]
        public virtual Amazon.JSII.Tests.CustomSubmoduleName.IReflectableEntry[] Entries
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CustomSubmoduleName.IReflectableEntry[]>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/UseBundledDependency.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.UseBundledDependency), fullyQualifiedName: "jsii-calc.UseBundledDependency")]
    public class UseBundledDependency : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public UseBundledDependency(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UseBundledDependency(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UseBundledDependency(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "value", returnsJson: "{\\"type\\":{\\"primitive\\":\\"any\\"}}")]
        public virtual object Value()
        {
            return InvokeInstanceMethod<object>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/UseCalcBase.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Depend on a type from jsii-calc-base as a test for awslabs/jsii#128.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.UseCalcBase), fullyQualifiedName: "jsii-calc.UseCalcBase")]
    public class UseCalcBase : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public UseCalcBase(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UseCalcBase(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UseCalcBase(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "hello", returnsJson: "{\\"type\\":{\\"fqn\\":\\"@scope/jsii-calc-base.Base\\"}}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.Base Hello()
        {
            return InvokeInstanceMethod<Amazon.JSII.Tests.CalculatorNamespace.BaseNamespace.Base>(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/UsesInterfaceWithProperties.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.UsesInterfaceWithProperties), fullyQualifiedName: "jsii-calc.UsesInterfaceWithProperties", parametersJson: "[{\\"name\\":\\"obj\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IInterfaceWithProperties\\"}}]")]
    public class UsesInterfaceWithProperties : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public UsesInterfaceWithProperties(Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithProperties obj): base(new DeputyProps(new object[]{obj}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UsesInterfaceWithProperties(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UsesInterfaceWithProperties(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "justRead", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}")]
        public virtual string JustRead()
        {
            return InvokeInstanceMethod<string>(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "readStringAndNumber", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"ext\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.IInterfaceWithPropertiesExtension\\"}}]")]
        public virtual string ReadStringAndNumber(Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithPropertiesExtension ext)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithPropertiesExtension)}, new object[]{ext});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "writeAndRead", returnsJson: "{\\"type\\":{\\"primitive\\":\\"string\\"}}", parametersJson: "[{\\"name\\":\\"value\\",\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
        public virtual string WriteAndRead(string @value)
        {
            return InvokeInstanceMethod<string>(new System.Type[]{typeof(string)}, new object[]{@value});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "obj", typeJson: "{\\"fqn\\":\\"jsii-calc.IInterfaceWithProperties\\"}")]
        public virtual Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithProperties Obj
        {
            get => GetInstanceProperty<Amazon.JSII.Tests.CalculatorNamespace.IInterfaceWithProperties>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/VariadicInvoker.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.VariadicInvoker), fullyQualifiedName: "jsii-calc.VariadicInvoker", parametersJson: "[{\\"name\\":\\"method\\",\\"type\\":{\\"fqn\\":\\"jsii-calc.VariadicMethod\\"}}]")]
    public class VariadicInvoker : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public VariadicInvoker(Amazon.JSII.Tests.CalculatorNamespace.VariadicMethod method): base(new DeputyProps(new object[]{method}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VariadicInvoker(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VariadicInvoker(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "asArray", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"number\\"},\\"kind\\":\\"array\\"}}}", parametersJson: "[{\\"name\\":\\"values\\",\\"type\\":{\\"primitive\\":\\"number\\"},\\"variadic\\":true}]")]
        public virtual double[] AsArray(params double[] values)
        {
            return InvokeInstanceMethod<double[]>(new System.Type[]{typeof(double[])}, new object[]{values});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/VariadicMethod.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.VariadicMethod), fullyQualifiedName: "jsii-calc.VariadicMethod", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"a prefix that will be use for all values returned by \`#asArray\`.\\"},\\"name\\":\\"prefix\\",\\"type\\":{\\"primitive\\":\\"number\\"},\\"variadic\\":true}]")]
    public class VariadicMethod : DeputyBase
    {
        /// <param name="prefix">a prefix that will be use for all values returned by \`#asArray\`.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public VariadicMethod(params double[] prefix): base(new DeputyProps(new object[]{prefix}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VariadicMethod(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VariadicMethod(DeputyProps props): base(props)
        {
        }

        /// <param name="first">the first element of the array to be returned (after the \`prefix\` provided at construction time).</param>
        /// <param name="others">other elements to be included in the array.</param>
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "asArray", returnsJson: "{\\"type\\":{\\"collection\\":{\\"elementtype\\":{\\"primitive\\":\\"number\\"},\\"kind\\":\\"array\\"}}}", parametersJson: "[{\\"docs\\":{\\"summary\\":\\"the first element of the array to be returned (after the \`prefix\` provided at construction time).\\"},\\"name\\":\\"first\\",\\"type\\":{\\"primitive\\":\\"number\\"}},{\\"docs\\":{\\"summary\\":\\"other elements to be included in the array.\\"},\\"name\\":\\"others\\",\\"type\\":{\\"primitive\\":\\"number\\"},\\"variadic\\":true}]")]
        public virtual double[] AsArray(double first, params double[] others)
        {
            return InvokeInstanceMethod<double[]>(new System.Type[]{typeof(double), typeof(double[])}, new object[]{first, others});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/VirtualMethodPlayground.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.VirtualMethodPlayground), fullyQualifiedName: "jsii-calc.VirtualMethodPlayground")]
    public class VirtualMethodPlayground : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public VirtualMethodPlayground(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VirtualMethodPlayground(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VirtualMethodPlayground(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "overrideMeAsync", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"index\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]", isAsync: true)]
        public virtual double OverrideMeAsync(double index)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(double)}, new object[]{index});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "overrideMeSync", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"index\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public virtual double OverrideMeSync(double index)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(double)}, new object[]{index});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "parallelSumAsync", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"count\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]", isAsync: true)]
        public virtual double ParallelSumAsync(double count)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(double)}, new object[]{count});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "serialSumAsync", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"count\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]", isAsync: true)]
        public virtual double SerialSumAsync(double count)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(double)}, new object[]{count});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "sumSync", returnsJson: "{\\"type\\":{\\"primitive\\":\\"number\\"}}", parametersJson: "[{\\"name\\":\\"count\\",\\"type\\":{\\"primitive\\":\\"number\\"}}]")]
        public virtual double SumSync(double count)
        {
            return InvokeInstanceMethod<double>(new System.Type[]{typeof(double)}, new object[]{count});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/VoidCallback.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>This test is used to validate the runtimes can return correctly from a void callback.</summary>
    /// <remarks>
    /// <list type="bullet">
    /// <description>Implement <c>overrideMe</c> (method does not have to do anything).</description>
    /// <description>Invoke <c>callMe</c></description>
    /// <description>Verify that <c>methodWasCalled</c> is <c>true</c>.</description>
    /// </list>
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.VoidCallback), fullyQualifiedName: "jsii-calc.VoidCallback")]
    public abstract class VoidCallback : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        protected VoidCallback(): base(new DeputyProps(System.Array.Empty<object>()))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VoidCallback(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VoidCallback(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "callMe")]
        public virtual void CallMe()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "overrideMe")]
        protected abstract void OverrideMe();


        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "methodWasCalled", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public virtual bool MethodWasCalled
        {
            get => GetInstanceProperty<bool>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/VoidCallbackProxy.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>This test is used to validate the runtimes can return correctly from a void callback.</summary>
    /// <remarks>
    /// <list type="bullet">
    /// <description>Implement <c>overrideMe</c> (method does not have to do anything).</description>
    /// <description>Invoke <c>callMe</c></description>
    /// <description>Verify that <c>methodWasCalled</c> is <c>true</c>.</description>
    /// </list>
    /// 
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiTypeProxy(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.VoidCallback), fullyQualifiedName: "jsii-calc.VoidCallback")]
    internal sealed class VoidCallbackProxy : Amazon.JSII.Tests.CalculatorNamespace.VoidCallback
    {
        private VoidCallbackProxy(ByRefValue reference): base(reference)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiMethod(name: "overrideMe")]
        protected override void OverrideMe()
        {
            InvokeInstanceVoidMethod(new System.Type[]{}, new object[]{});
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/Amazon/JSII/Tests/CalculatorNamespace/WithPrivatePropertyInConstructor.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace Amazon.JSII.Tests.CalculatorNamespace
{
    /// <summary>Verifies that private property declarations in constructor arguments are hidden.</summary>
    /// <remarks>
    /// <strong>Stability</strong>: Experimental
    /// </remarks>
    [JsiiClass(nativeType: typeof(Amazon.JSII.Tests.CalculatorNamespace.WithPrivatePropertyInConstructor), fullyQualifiedName: "jsii-calc.WithPrivatePropertyInConstructor", parametersJson: "[{\\"name\\":\\"privateField\\",\\"optional\\":true,\\"type\\":{\\"primitive\\":\\"string\\"}}]")]
    public class WithPrivatePropertyInConstructor : DeputyBase
    {
        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        public WithPrivatePropertyInConstructor(string? privateField = null): base(new DeputyProps(new object?[]{privateField}))
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from a Javascript-owned object reference</summary>
        /// <param name="reference">The Javascript-owned object reference</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected WithPrivatePropertyInConstructor(ByRefValue reference): base(reference)
        {
        }

        /// <summary>Used by jsii to construct an instance of this class from DeputyProps</summary>
        /// <param name="props">The deputy props</param>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected WithPrivatePropertyInConstructor(DeputyProps props): base(props)
        {
        }

        /// <remarks>
        /// <strong>Stability</strong>: Experimental
        /// </remarks>
        [JsiiProperty(name: "success", typeJson: "{\\"primitive\\":\\"boolean\\"}")]
        public virtual bool Success
        {
            get => GetInstanceProperty<bool>();
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/AssemblyInfo.cs 1`] = `
using Amazon.JSII.Runtime.Deputy;

[assembly: JsiiAssembly("jsii-calc", "0.0.0", "jsii-calc-0.0.0.tgz")]

`;

exports[`Generated code for "jsii-calc": <outDir>/dotnet/Amazon.JSII.Tests.CalculatorPackageId/jsii-calc-0.0.0.tgz 1`] = `dotnet/Amazon.JSII.Tests.CalculatorPackageId/jsii-calc-0.0.0.tgz is a tarball`;

exports[`Generated code for "jsii-calc": <outDir>/golang/_jsii/bundled-runtime.go 1`] = `
// Embedded data for the tarball containing the runtime of jsii-calc@0.0.0
const tarball = []byte {
    0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xec, 0xbd, 0xeb, 0x7a, 0xdb,
    0x96, 0x28, 0xd8, 0xbf, 0xfd, 0x14, 0xb5, 0x95, 0x6f, 0x4e, 0xec, 0x3e, 0xb2, 0xcc, 0xbb,
    0xf4, 0xd7, 0x67, 0x5a, 0x96, 0x9d, 0x44, 0xe9, 0xe8, 0x32, 0x96, 0x62, 0xcf, 0x3e, 0x47,
    0x18, 0x24, 0x8a, 0x24, 0x22, 0x10, 0x60, 0xa3, 0x00, 0xd1, 0xcc, 0xf9, 0xf2, 0x30, 0xf3,
    0xf3, 0x64, 0x53, 0xab, 0x0a, 0x00, 0x71, 0xaf, 0x02, 0x71, 0x25, 0x25, 0xef, 0x8b, 0x65,
    0x2c, 0xac, 0x5a, 0xf7, 0x5a, 0xb5, 0x2e, 0x2b, 0x65, 0xfa, 0xa8, 0xcc, 0xf1, 0x3b, 0xc3,
    0xf1, 0x1f, 0x4b, 0x53, 0x75, 0x74, 0x4c, 0xde, 0xfd, 0xc7, 0x4c, 0xfb, 0x66, 0x3b, 0x16,
    0xe9, 0x4f, 0xa2, 0x69, 0x6f, 0xa7, 0x8a, 0x3e, 0x7d, 0x3b, 0x71, 0x0c, 0x55, 0xc7, 0xea,
    0x93, 0xb9, 0x66, 0x6b, 0x73, 0xc3, 0xb4, 0xf0, 0xbf, 0xc8, 0xfe, 0xe9, 0x74, 0x3a, 0xa3,
    0x00, 0x25, 0x7d, 0x0e, 0x7f, 0xba, 0xc3, 0x1e, 0xfa, 0x97, 0xfe, 0x70, 0xd4, 0xe9, 0x76,
    0xa3, 0x0e, 0x7d, 0xae, 0xd3, 0xeb, 0x76, 0x07, 0x43, 0xfa, 0xb7, 0xf4, 0x1b, 0x0a, 0xfc,
    0x88, 0xad, 0x58, 0x14, 0x94, 0xa2, 0xeb, 0xf0, 0xbd, 0x20, 0xff, 0xef, 0x3d, 0xf9, 0x63,
    0xa9, 0x69, 0xcc, 0xb4, 0xf9, 0xc9, 0x9f, 0xc4, 0x34, 0x5e, 0xa9, 0x1a, 0xb1, 0x5f, 0x9d,
    0xd1, 0x5f, 0xfd, 0xeb, 0x89, 0x3d, 0xff, 0xeb, 0x15, 0xfd, 0xeb, 0x4f, 0x42, 0xff, 0x4f,
    0xb1, 0xe1, 0x2f, 0x9b, 0x4c, 0x1c, 0x4d, 0x57, 0x35, 0x63, 0x66, 0xbe, 0x0a, 0x71, 0xcc,
    0x13, 0x63, 0x33, 0xfd, 0xc3, 0x74, 0xec, 0x95, 0x63, 0xbf, 0x7b, 0x35, 0x35, 0x9f, 0xb0,
    0x5c, 0xf5, 0xea, 0xd5, 0x3f, 0x34, 0x43, 0xc5, 0xdf, 0x60, 0x91, 0xa6, 0x77, 0xfa, 0xf2,
    0xe9, 0xcf, 0xca, 0x95, 0x7f, 0x46, 0xf4, 0x8a, 0xde, 0x91, 0x21, 0xff, 0xdd, 0xde, 0xb0,
    0x1d, 0x0d, 0x23, 0xf2, 0xdf, 0xed, 0xf4, 0xfa, 0xdd, 0x17, 0xf9, 0xaf, 0xe3, 0xcf, 0xff,
    0x85, 0xd0, 0x91, 0xe2, 0xd8, 0x0b, 0xd3, 0x3a, 0xfa, 0x01, 0xc1, 0xbf, 0xe8, 0xbf, 0x0d,
    0x89, 0xe9, 0xbf, 0x8e, 0xce, 0x97, 0xca, 0x5f, 0xa6, 0x81, 0xbe, 0xe0, 0x09, 0xba, 0xc3,
    0x93, 0x36, 0xc5, 0xe4, 0xe8, 0x98, 0x3f, 0x62, 0x5a, 0x73, 0xc5, 0xd0, 0xfe, 0x52, 0x6c,
    0x34, 0xe8, 0xa3, 0xb6, 0xe5, 0x60, 0xf7, 0x37, 0x96, 0x49, 0x15, 0x02, 0xfd, 0xe8, 0x7f,
    0x7f, 0x6e, 0x57, 0x67, 0xff, 0xfc, 0xdd, 0x7d, 0xc8, 0xb1, 0x74, 0x78, 0xc1, 0xc2, 0xb6,
    0xe4, 0x87, 0x77, 0xef, 0x94, 0x35, 0x39, 0x51, 0xd8, 0xcb, 0x4e, 0xa6, 0xe6, 0x12, 0x1e,
    0x1b, 0x1e, 0x3c, 0x72, 0x8d, 0xce, 0x16, 0xb2, 0x0c, 0xcb, 0x04, 0xeb, 0xfd, 0x3f, 0x9d,
    0xee, 0xf8, 0xa4, 0xb3, 0x5d, 0x80, 0x2a, 0x37, 0xdb, 0xd2, 0x26, 0x8e, 0x6d, 0x5a, 0x5b,
    0xfe, 0xb7, 0x07, 0x99, 0xb7, 0xcf, 0x8f, 0xba, 0xa2, 0xa2, 0xf7, 0xd8, 0x78, 0x7b, 0x49,
    0x05, 0xeb, 0xee, 0x1e, 0x13, 0xf6, 0x42, 0x3f, 0x5a, 0x2a, 0x9a, 0x61, 0xd3, 0xff, 0x61,
    0x47, 0xfe, 0x9e, 0xe2, 0xbb, 0xa2, 0x96, 0x72, 0xe1, 0x4c, 0x60, 0x47, 0xef, 0x30, 0x7d,
    0x84, 0x7f, 0xe1, 0xef, 0xe3, 0x64, 0x20, 0x3e, 0x69, 0x53, 0x13, 0xfd, 0xec, 0x68, 0x7f,
    0xb0, 0x45, 0x2a, 0x00, 0xc1, 0xd2, 0xbe, 0x75, 0x2c, 0xcb, 0x12, 0x00, 0x61, 0xc2, 0xe2,
    0x4a, 0xb1, 0xa6, 0x8a, 0xaa, 0x61, 0xeb, 0xed, 0x95, 0xa3, 0xeb, 0xf4, 0x3d, 0xe5, 0x83,
    0xdf, 0xe4, 0x2e, 0xcf, 0x61, 0x7a, 0xe5, 0x7e, 0xf3, 0x48, 0xc5, 0x2b, 0x4c, 0xcd, 0x86,
    0xd5, 0xd8, 0xbb, 0x3c, 0xda, 0x53, 0x53, 0xb5, 0xc2, 0x41, 0xc2, 0x2b, 0x04, 0xbb, 0x54,
    0xff, 0xf1, 0x38, 0x33, 0xf1, 0xb1, 0xb7, 0xe6, 0x4c, 0xf6, 0x71, 0x5d, 0x9b, 0x04, 0x9e,
    0x39, 0xc9, 0x87, 0x69, 0x73, 0xa1, 0x9b, 0x84, 0xb2, 0xa0, 0x18, 0x30, 0x1f, 0xbb, 0x54,
    0xcc, 0xb1, 0x4d, 0x02, 0x1f, 0xc1, 0x82, 0xa6, 0x6d, 0x60, 0x3b, 0xf4, 0x99, 0x4b, 0x08,
    0x95, 0x72, 0x40, 0xfe, 0x4e, 0x7e, 0xb9, 0xbb, 0xbc, 0x3c, 0xb9, 0xc7, 0xc4, 0x26, 0x27,
    0x74, 0x79, 0x47, 0x57, 0x28, 0x3b, 0x5f, 0x7b, 0x0f, 0x9e, 0xbc, 0xa7, 0x6f, 0xf3, 0xff,
    0x53, 0x8a, 0xad, 0xe6, 0x6a, 0xf7, 0x4b, 0x55, 0xb4, 0xda, 0xad, 0xf7, 0x20, 0x5b, 0xcd,
    0xd7, 0x91, 0xbf, 0xd8, 0xdf, 0xdb, 0x75, 0x8f, 0xe6, 0x26, 0x40, 0x1d, 0xfc, 0xe4, 0x4f,
    0x49, 0x89, 0xee, 0x64, 0xa9, 0x3c, 0x61, 0x23, 0xf2, 0x21, 0x68, 0x03, 0xcb, 0xd6, 0x66,
    0xd4, 0xe6, 0x30, 0x4d, 0x7d, 0x08, 0x38, 0xd2, 0x8e, 0xc3, 0x0f, 0xcf, 0x2d, 0xd3, 0x59,
    0x27, 0x89, 0x39, 0xb3, 0xd7, 0x8a, 0x85, 0x3d, 0x3d, 0x01, 0xd8, 0x3e, 0xb1, 0x61, 0x1b,
    0x81, 0xef, 0xfc, 0x9d, 0xb4, 0xfd, 0xec, 0xaf, 0x9f, 0x6c, 0x61, 0x38, 0x61, 0x30, 0x24,
    0xf9, 0x4f, 0x12, 0xa3, 0xd4, 0x6a, 0x09, 0x0b, 0x27, 0x13, 0x3f, 0x71, 0x8d, 0xd5, 0x86,
    0xc2, 0x28, 0x4a, 0x8e, 0xc0, 0xe7, 0xba, 0x76, 0xc5, 0x8f, 0xad, 0x75, 0x12, 0x59, 0x2b,
    0x25, 0xee, 0x70, 0x85, 0x9f, 0xfd, 0x03, 0x9e, 0xfd, 0x23, 0xf2, 0xde, 0x57, 0xc1, 0xbf,
    0x96, 0x94, 0x8d, 0x1a, 0x39, 0xf6, 0x66, 0x56, 0x3e, 0xdf, 0xf2, 0x35, 0x1b, 0xe3, 0x5e,
    0x91, 0x2d, 0xe0, 0x62, 0x73, 0x56, 0x16, 0x2f, 0xfb, 0xbb, 0x2a, 0x91, 0xa7, 0x13, 0x31,
    0xe0, 0xed, 0x3f, 0xcc, 0xd9, 0x6e, 0x3c, 0xce, 0x15, 0xba, 0xcf, 0xda, 0xc4, 0x99, 0xb8,
    0x96, 0x30, 0x77, 0x27, 0x7d, 0xef, 0xc4, 0x7f, 0x38, 0xba, 0x43, 0xdd, 0x9c, 0x32, 0xdf,
    0xd2, 0xb8, 0x4a, 0xfa, 0x3d, 0x7d, 0x62, 0xa6, 0xe9, 0xd8, 0x33, 0xab, 0x74, 0xa9, 0x77,
    0x20, 0x64, 0x93, 0x28, 0x77, 0xe8, 0xd4, 0x72, 0xd2, 0x67, 0xba, 0xdd, 0x5e, 0x2a, 0x07,
    0x49, 0x23, 0xc7, 0x73, 0x92, 0x44, 0x72, 0x8a, 0x0a, 0xa4, 0x92, 0xba, 0xbd, 0xe6, 0xf2,
    0xdb, 0x1d, 0xa3, 0x55, 0x68, 0x89, 0xbf, 0x23, 0x50, 0x26, 0xc8, 0x08, 0xfb, 0x3c, 0x37,
    0x4e, 0xd9, 0x9b, 0xff, 0xf0, 0x11, 0xfb, 0x87, 0x21, 0x7c, 0x77, 0x22, 0x8f, 0xb1, 0xdf,
    0x73, 0x0c, 0x10, 0x4f, 0xe6, 0x55, 0xaf, 0x92, 0x7e, 0xf6, 0x19, 0xcb, 0xf7, 0x63, 0xaa,
    0x87, 0xbf, 0x6a, 0x93, 0xf2, 0x14, 0x21, 0x5d, 0x6c, 0xab, 0x01, 0x43, 0x8b, 0xd1, 0x43,
    0xa1, 0x2c, 0x7b, 0xe7, 0xcc, 0xa8, 0x17, 0x0d, 0x0b, 0xbe, 0x55, 0xf1, 0xd3, 0xca, 0xc2,
    0x1a, 0x5e, 0xd7, 0xa9, 0x2b, 0x41, 0x20, 0x77, 0x52, 0x91, 0x91, 0x2f, 0xc5, 0xf6, 0x73,
    0xe1, 0xe3, 0xe7, 0xdb, 0x4f, 0x1f, 0x3f, 0x5f, 0x7e, 0xfc, 0x52, 0xa2, 0x3a, 0x05, 0x70,
    0xea, 0xd1, 0xd4, 0x25, 0xf2, 0xab, 0xcf, 0x28, 0xf2, 0xb2, 0x65, 0x20, 0x55, 0x59, 0x06,
    0x5a, 0x32, 0xb5, 0xb4, 0x95, 0x7b, 0x8e, 0x3b, 0x3a, 0x47, 0x44, 0x5b, 0xae, 0x74, 0x8c,
    0x02, 0x60, 0xff, 0x08, 0x42, 0x3e, 0x36, 0xa2, 0xe7, 0x40, 0xc6, 0x78, 0x47, 0xfc, 0x5b,
    0x34, 0xe0, 0x99, 0xd3, 0x23, 0xf4, 0x44, 0xd3, 0x35, 0x7b, 0x03, 0x2b, 0xe0, 0x6f, 0x2b,
    0x69, 0x4b, 0x4c, 0xcf, 0x04, 0xfa, 0xd6, 0x7d, 0x5e, 0x98, 0x4b, 0xbc, 0x72, 0xd1, 0x9e,
    0x1a, 0xa0, 0x07, 0x40, 0x86, 0x2e, 0xbe, 0x3a, 0xfc, 0xf4, 0x99, 0x13, 0x17, 0x9e, 0xdf,
    0xeb, 0x47, 0x8f, 0x78, 0xb3, 0x36, 0x2d, 0x75, 0x7b, 0x02, 0x39, 0xa2, 0xdf, 0xf4, 0x5c,
    0x7f, 0x01, 0x10, 0x58, 0x4a, 0xc5, 0x23, 0xff, 0x40, 0xa1, 0xd3, 0xa3, 0xab, 0xc1, 0xbd,
    0x73, 0x4a, 0xff, 0x05, 0x7e, 0xdb, 0xf3, 0x56, 0x5c, 0x62, 0x5b, 0x51, 0x15, 0x7b, 0xcb,
    0x6c, 0x99, 0x1f, 0x26, 0x26, 0x3d, 0xe8, 0x28, 0x91, 0xa3, 0x2d, 0xfb, 0x8d, 0xe1, 0x2c,
    0x09, 0x0d, 0x34, 0x76, 0xbf, 0x7f, 0x1a, 0xfc, 0x85, 0x39, 0xf9, 0x13, 0x4f, 0x83, 0xea,
    0xe2, 0xc5, 0xd2, 0x8c, 0x39, 0xbc, 0x75, 0x83, 0xc9, 0x3f, 0x8e, 0x22, 0x98, 0xf7, 0x8c,
    0x4f, 0x5b, 0x0e, 0x90, 0x85, 0x15, 0x75, 0x19, 0x38, 0x5d, 0x2c, 0x15, 0xeb, 0x51, 0x35,
    0x0c, 0x13, 0xdf, 0x21, 0x78, 0x18, 0x6d, 0xc5, 0xfe, 0xc1, 0x78, 0x30, 0xee, 0x17, 0x1a,
    0x94, 0xd6, 0x96, 0x62, 0x6d, 0x10, 0xfd, 0xd1, 0x21, 0x58, 0x45, 0xb6, 0x89, 0x54, 0xbc,
    0x0d, 0x0a, 0x82, 0x62, 0x63, 0xa4, 0x18, 0xf4, 0x23, 0x8a, 0x12, 0x64, 0x2f, 0x30, 0x9a,
    0x85, 0x9d, 0xa1, 0x91, 0x39, 0x63, 0x34, 0x85, 0x45, 0xbe, 0xfb, 0x0e, 0xfd, 0x6c, 0xae,
    0x6b, 0xf4, 0xeb, 0xc8, 0x72, 0x0c, 0x83, 0x42, 0x8e, 0x88, 0xb3, 0x44, 0xe7, 0xb7, 0x97,
    0xc0, 0x13, 0x3f, 0x6a, 0x16, 0xb1, 0x8f, 0xd1, 0x94, 0xc2, 0x07, 0x0b, 0xa2, 0xad, 0x84,
    0x5f, 0x7f, 0xfd, 0xfa, 0xd5, 0x26, 0x0f, 0xc6, 0x14, 0x5e, 0x19, 0xf8, 0x1d, 0xfa, 0x77,
    0xe0, 0x35, 0xfb, 0x20, 0xa0, 0xad, 0x5e, 0xbf, 0xf9, 0x37, 0xf6, 0x0d, 0x0e, 0x3e, 0x36,
    0xf7, 0x3a, 0x22, 0x94, 0x47, 0x10, 0x65, 0x61, 0x8b, 0x59, 0x56, 0xc2, 0x96, 0x75, 0x17,
    0xee, 0xb9, 0xff, 0xdf, 0xd7, 0x94, 0x67, 0xde, 0x4e, 0x03, 0xfb, 0x0f, 0x08, 0xaa, 0xa2,
    0xaf, 0xbb, 0x9d, 0xc0, 0xd2, 0x74, 0x53, 0x17, 0xa6, 0x8a, 0xd1, 0x9d, 0x02, 0x2c, 0x4d,
    0x60, 0xbe, 0xfb, 0x57, 0xc4, 0xd0, 0x46, 0xff, 0x6b, 0x9b, 0x14, 0x31, 0x74, 0x3f, 0x4b,
    0xae, 0x4d, 0x11, 0x65, 0x46, 0x60, 0x5d, 0x44, 0x0f, 0xc1, 0x0b, 0x6c, 0xe1, 0x63, 0xf4,
    0x35, 0x22, 0x68, 0x63, 0x3a, 0x68, 0xad, 0x68, 0xf6, 0x3f, 0xd0, 0xbf, 0xbe, 0xf3, 0xf6,
    0x33, 0x4d, 0xba, 0xb9, 0xef, 0x27, 0x8a, 0xf5, 0xbd, 0xf7, 0xc6, 0x2d, 0xbb, 0x5b, 0x78,
    0x12, 0x8d, 0x02, 0xb5, 0xd9, 0x12, 0x52, 0xd5, 0x2c, 0xca, 0x1f, 0xfc, 0x23, 0x4f, 0x0b,
    0xe2, 0x18, 0x3e, 0xe7, 0x6e, 0x56, 0x8c, 0x2d, 0xa8, 0x74, 0x78, 0x1f, 0xa5, 0x9f, 0xa2,
    0xb9, 0x81, 0xa8, 0xfc, 0xf6, 0xed, 0x84, 0x72, 0xf8, 0x52, 0xf1, 0x78, 0xeb, 0x5d, 0xe7,
    0xeb, 0x0b, 0x50, 0x82, 0xf7, 0x23, 0xef, 0xf9, 0x64, 0x7b, 0x3d, 0x21, 0x8f, 0xe7, 0xe4,
    0x5d, 0xd2, 0xb2, 0xef, 0x58, 0xfc, 0xd8, 0xf5, 0x85, 0xd4, 0xb0, 0x37, 0xe4, 0x79, 0x42,
    0x41, 0xa2, 0x5f, 0xe7, 0xaf, 0x73, 0xf2, 0x81, 0xea, 0x97, 0x27, 0xac, 0x5e, 0xe8, 0x0a,
    0x3f, 0x2b, 0xe4, 0xda, 0xbc, 0xb5, 0x80, 0x6b, 0x6c, 0x2d, 0xe4, 0xd2, 0xe5, 0x00, 0x16,
    0xa3, 0xd8, 0x5c, 0xe9, 0x9a, 0x62, 0x50, 0x73, 0x9c, 0x08, 0x55, 0xbf, 0x37, 0x14, 0x80,
    0x69, 0xd8, 0xd8, 0xa2, 0x06, 0x0f, 0x5f, 0x1a, 0xbe, 0x35, 0xbf, 0x34, 0xa6, 0xba, 0x43,
    0x2c, 0x83, 0xb5, 0x4a, 0xf0, 0xba, 0xbd, 0xce, 0x68, 0x07, 0xf8, 0x6e, 0x0c, 0x7d, 0xe3,
    0x5e, 0x21, 0x74, 0xdd, 0xf1, 0x58, 0x00, 0xdd, 0x2d, 0xb3, 0x84, 0x77, 0x58, 0x9f, 0x55,
    0x46, 0x67, 0xdc, 0x11, 0x80, 0x01, 0x4b, 0x80, 0xe4, 0x6a, 0x21, 0xab, 0x9c, 0x17, 0x8e,
    0x4e, 0x4a, 0x86, 0xa3, 0x2f, 0x62, 0xf1, 0x82, 0xd2, 0x97, 0x72, 0xde, 0xf0, 0x25, 0x4c,
    0xed, 0xf4, 0x28, 0x39, 0x7d, 0xfc, 0xc3, 0xc2, 0x33, 0xaa, 0x0a, 0x8d, 0x69, 0x11, 0xfe,
    0x97, 0xcc, 0x82, 0x4b, 0x24, 0x61, 0x5b, 0xb8, 0xa6, 0x0b, 0xaa, 0x46, 0x2a, 0x86, 0xa6,
    0x0d, 0x8d, 0x46, 0x4c, 0x4a, 0x6d, 0x5c, 0x35, 0x40, 0x3d, 0x69, 0x80, 0x0c, 0x6a, 0xea,
    0xfa, 0x47, 0x09, 0x5c, 0xb4, 0x05, 0x2c, 0xba, 0x66, 0x32, 0x8c, 0xd2, 0x8c, 0x1d, 0x83,
    0x44, 0xc5, 0x78, 0xa5, 0x6f, 0xae, 0xd9, 0xc7, 0xf5, 0x01, 0x1c, 0xd1, 0x9a, 0xbe, 0x0d,
    0x9e, 0xf8, 0xe2, 0xa7, 0xbd, 0x23, 0x8d, 0x3a, 0x02, 0xbf, 0x85, 0x4d, 0x33, 0x51, 0x1f,
    0xce, 0xe8, 0x11, 0x87, 0x3e, 0xe9, 0x1e, 0x2a, 0xd6, 0x78, 0x42, 0xdc, 0xbb, 0x13, 0x66,
    0xb5, 0x25, 0x33, 0xfb, 0xe7, 0x5f, 0xee, 0x7e, 0x35, 0xe7, 0x66, 0xb7, 0x77, 0xf6, 0x8d,
    0xef, 0x64, 0x45, 0xdd, 0x44, 0xff, 0xb0, 0x99, 0xff, 0x04, 0xb9, 0xfd, 0x6e, 0xfe, 0x03,
    0xe8, 0x42, 0x20, 0x7c, 0xe2, 0x8b, 0x9e, 0xf6, 0x12, 0x4e, 0x7a, 0xa9, 0xa7, 0xbc, 0x20,
    0x73, 0x05, 0xc0, 0xfe, 0x8e, 0xee, 0x45, 0xfa, 0xa4, 0x76, 0x14, 0xe1, 0xb9, 0x20, 0xe4,
    0xc9, 0x6c, 0xeb, 0x6d, 0x85, 0x9e, 0x8d, 0x1d, 0xc3, 0x8e, 0xa6, 0x60, 0xb0, 0xb5, 0x99,
    0xad, 0xc8, 0x6d, 0x07, 0xe0, 0x11, 0xfd, 0xf0, 0x03, 0xba, 0xf0, 0x1f, 0x80, 0x7f, 0x5d,
    0xf4, 0xc1, 0x59, 0x2e, 0x37, 0xf1, 0x1b, 0x90, 0xe0, 0x59, 0x2e, 0xea, 0xeb, 0x85, 0x4e,
    0xfe, 0xb9, 0x2d, 0x7a, 0x4e, 0x00, 0x87, 0x30, 0xc0, 0x87, 0x5b, 0x59, 0x3a, 0x9f, 0x80,
    0x3f, 0xb5, 0x19, 0x28, 0x41, 0xe0, 0x15, 0xf7, 0x17, 0xa1, 0xd3, 0x0b, 0x7c, 0x4e, 0x7d,
    0xe5, 0x44, 0xdf, 0xa4, 0xc0, 0xe2, 0x5d, 0x90, 0xa4, 0xbc, 0xe1, 0x7d, 0x30, 0x60, 0x17,
    0x01, 0xb2, 0x4f, 0x32, 0x4f, 0x81, 0x61, 0xca, 0xce, 0xfe, 0xcb, 0xc8, 0x78, 0xd1, 0xf6,
    0x9a, 0x41, 0x2d, 0xb1, 0xa2, 0x6b, 0x7f, 0x61, 0x2b, 0xfc, 0xae, 0xd8, 0xdb, 0x65, 0xde,
    0x14, 0xd8, 0xd1, 0x3c, 0xe7, 0x27, 0x42, 0xe6, 0x80, 0xdb, 0xb4, 0xf5, 0x9b, 0xe0, 0x14,
    0x4b, 0x62, 0xf5, 0xfd, 0x26, 0x0c, 0x71, 0x8c, 0xec, 0x8f, 0x54, 0x8f, 0x33, 0x81, 0x08,
    0xa8, 0x6c, 0xa7, 0x6f, 0xd8, 0x89, 0xed, 0x88, 0x1e, 0x68, 0x17, 0xa6, 0x1a, 0xde, 0x4e,
    0x4f, 0x29, 0xdc, 0x91, 0x86, 0x57, 0x39, 0xcc, 0x46, 0xa3, 0x2c, 0xf9, 0xe3, 0xa3, 0x69,
    0x8d, 0x6c, 0x78, 0x94, 0xfa, 0x4a, 0x6f, 0x31, 0x6f, 0x7f, 0x57, 0x0c, 0x11, 0xd1, 0x78,
    0x45, 0x9f, 0xb2, 0xa3, 0x52, 0x1d, 0xc5, 0x51, 0x68, 0x3d, 0xf6, 0xf7, 0x71, 0xf4, 0xb7,
    0x31, 0x2d, 0xfa, 0x2d, 0x78, 0x07, 0xc5, 0x0e, 0x65, 0xdb, 0x27, 0xae, 0xb8, 0x78, 0x08,
    0xf2, 0xd4, 0xdf, 0xaf, 0xd2, 0xfe, 0xf5, 0x7b, 0x08, 0x5c, 0x0b, 0xd3, 0x43, 0xaf, 0x91,
    0x91, 0x94, 0xb7, 0x8b, 0xdf, 0x9d, 0x12, 0xf0, 0x3c, 0x4e, 0x66, 0x95, 0xf6, 0xb3, 0x43,
    0xd0, 0xdc, 0x27, 0x9f, 0x69, 0x9c, 0x67, 0x70, 0x44, 0x31, 0x14, 0xbb, 0xc1, 0x20, 0x19,
    0xc7, 0x54, 0x84, 0x9f, 0x65, 0x91, 0xac, 0xfb, 0x56, 0xc1, 0x43, 0x6d, 0x8a, 0x28, 0x97,
    0x1f, 0x6d, 0xb9, 0x74, 0xe8, 0xb7, 0x18, 0x61, 0x62, 0x4a, 0xa1, 0x32, 0xe2, 0x9d, 0x09,
    0x07, 0x48, 0xf8, 0xd1, 0x32, 0x97, 0xdb, 0x33, 0x6a, 0xe8, 0x31, 0xc8, 0x33, 0xb3, 0x34,
    0xa1, 0x28, 0xaf, 0xca, 0x0e, 0xdf, 0xb0, 0x24, 0x11, 0x5b, 0x24, 0x4d, 0x09, 0xc4, 0x4d,
    0x7a, 0xe3, 0x76, 0xb4, 0xb8, 0xb5, 0xae, 0xd0, 0x00, 0x87, 0x2d, 0x7d, 0xf5, 0x46, 0xb8,
    0x63, 0x39, 0x18, 0xc5, 0xde, 0x9c, 0x28, 0x83, 0xe1, 0xed, 0xcb, 0xc8, 0x61, 0x2d, 0x26,
    0x11, 0x19, 0x1d, 0x9c, 0x4a, 0xdb, 0x5b, 0x37, 0x0a, 0xb7, 0x69, 0x4e, 0xb2, 0x3e, 0x31,
    0x1e, 0x62, 0xd3, 0x06, 0xa5, 0xc8, 0x87, 0xe6, 0xf0, 0x24, 0xe9, 0xb4, 0x9f, 0xdf, 0xed,
    0xbd, 0x2f, 0x71, 0x3a, 0x10, 0xb2, 0xfa, 0x9c, 0x72, 0xec, 0x15, 0xf6, 0xa8, 0x5c, 0xd0,
    0x10, 0x1c, 0x82, 0x0e, 0xd9, 0x6d, 0x3b, 0x15, 0x5b, 0x7e, 0x8e, 0xea, 0x14, 0xbb, 0x5f,
    0xd7, 0x79, 0x4e, 0x75, 0x51, 0xb4, 0xef, 0xe0, 0xd6, 0xc5, 0x75, 0xc1, 0xe1, 0xbb, 0x77,
    0x62, 0xdf, 0x9c, 0xd3, 0xd1, 0xc3, 0x14, 0x38, 0x7a, 0x79, 0x8c, 0x88, 0x84, 0x13, 0x53,
    0xa6, 0xdc, 0x39, 0x9a, 0x5d, 0xb7, 0xa7, 0x16, 0xd0, 0xb6, 0xc4, 0x59, 0x2e, 0x15, 0x7e,
    0xf8, 0xd1, 0x20, 0xec, 0xc2, 0xd6, 0x03, 0x00, 0x2d, 0x31, 0x9c, 0x3b, 0x08, 0xd2, 0x3c,
    0xe5, 0x57, 0xa6, 0x68, 0x6a, 0x5a, 0x70, 0xc9, 0xa8, 0x6f, 0x90, 0x85, 0xe7, 0x1a, 0xa1,
    0x8e, 0x7c, 0x1f, 0x19, 0xee, 0x34, 0x9f, 0x14, 0x4b, 0x33, 0x1d, 0x82, 0x74, 0xc5, 0x98,
    0x10, 0x88, 0x3c, 0xc9, 0x61, 0xd5, 0x38, 0x3e, 0xf6, 0xce, 0x9a, 0x09, 0x2e, 0x63, 0x06,
    0x6e, 0xec, 0xc5, 0x7b, 0x1b, 0x43, 0x49, 0xd9, 0x6b, 0x78, 0xbf, 0xfd, 0xd4, 0x37, 0x7a,
    0xc1, 0x4d, 0x7c, 0x59, 0xe1, 0x13, 0x8a, 0xa8, 0x86, 0xa2, 0x27, 0x54, 0xc5, 0xda, 0x54,
    0xd8, 0x6d, 0x42, 0x8c, 0x4a, 0xfb, 0x16, 0x5a, 0x89, 0x10, 0x33, 0xa0, 0x1c, 0xee, 0xb0,
    0xd0, 0x57, 0x82, 0xb1, 0xfa, 0x15, 0xf2, 0x37, 0xbe, 0xda, 0x0b, 0x8d, 0x9c, 0xb8, 0xe6,
    0xf3, 0xf5, 0x18, 0x52, 0x3e, 0x78, 0x82, 0x05, 0x3c, 0xe5, 0x13, 0xf6, 0x2b, 0x82, 0x54,
    0xe8, 0xd3, 0x2c, 0x51, 0xc4, 0x45, 0x0d, 0xcb, 0x15, 0xa1, 0x5a, 0xc7, 0xd1, 0xed, 0x93,
    0x99, 0x74, 0x2c, 0x64, 0xd2, 0xb5, 0x69, 0x3d, 0x5e, 0xda, 0xe7, 0xba, 0xbe, 0x3b, 0x8f,
    0x12, 0x21, 0x8a, 0x5f, 0x85, 0xa2, 0x8d, 0x91, 0xfb, 0xeb, 0x49, 0x8c, 0x13, 0x63, 0x8c,
    0x73, 0x3d, 0x25, 0xc7, 0xa1, 0x07, 0x0d, 0x85, 0xae, 0x4f, 0xc4, 0x60, 0xb4, 0xe6, 0x24,
    0x15, 0xcf, 0x8a, 0x1d, 0x9e, 0x55, 0xa2, 0x7b, 0x93, 0xa9, 0xa8, 0xaa, 0x3e, 0x40, 0xab,
    0xcb, 0xd6, 0xdc, 0x57, 0x44, 0xef, 0x35, 0x83, 0xca, 0xc9, 0x8d, 0x97, 0xb5, 0x55, 0xa6,
    0x73, 0x4f, 0xf5, 0xcf, 0xc3, 0xd1, 0x7f, 0x7f, 0x38, 0x42, 0x13, 0xf6, 0x92, 0x6d, 0x6e,
    0x94, 0xd7, 0xa2, 0xaa, 0xa5, 0xfb, 0x2a, 0x21, 0xc2, 0x04, 0x20, 0xbd, 0x60, 0x49, 0x71,
    0x45, 0x16, 0x41, 0x47, 0x40, 0x63, 0x04, 0xd3, 0x3e, 0x05, 0x0c, 0x98, 0x83, 0xfd, 0x7c,
    0x1b, 0x27, 0xbe, 0x28, 0x55, 0x19, 0x46, 0xd8, 0x29, 0x45, 0x11, 0x06, 0xf7, 0xf8, 0x2b,
    0xd9, 0x6f, 0x17, 0x60, 0x1f, 0x08, 0xf5, 0x26, 0x39, 0x2d, 0x0c, 0x35, 0xa2, 0x12, 0xa3,
    0xdb, 0xfe, 0x26, 0x16, 0x31, 0xa9, 0x11, 0x1c, 0xd5, 0x12, 0x93, 0xd2, 0x3e, 0x2b, 0xba,
    0x95, 0xc1, 0x7d, 0x5c, 0x68, 0x87, 0x9f, 0xb4, 0xf9, 0x62, 0xf7, 0x2d, 0x5a, 0xf5, 0x6c,
    0xff, 0xf9, 0xf7, 0x66, 0xdc, 0xe5, 0xd1, 0x0e, 0xde, 0x72, 0x89, 0xbe, 0x0e, 0xd3, 0x74,
    0x2b, 0x59, 0x51, 0xc7, 0xc4, 0x3b, 0xf6, 0x40, 0x1e, 0x2b, 0xf8, 0x2a, 0x4f, 0x80, 0xba,
    0x5d, 0x95, 0x91, 0xf8, 0x46, 0xd2, 0x36, 0x39, 0xdc, 0x19, 0x97, 0x17, 0x89, 0xbc, 0x10,
    0xaa, 0xec, 0x8b, 0x2d, 0x30, 0xf0, 0x41, 0xdd, 0x5a, 0x45, 0x24, 0x23, 0x9d, 0x03, 0xee,
    0x08, 0x5d, 0x76, 0xb8, 0x43, 0x86, 0x0b, 0xc4, 0xb6, 0x9f, 0x41, 0x9d, 0x97, 0x05, 0x3e,
    0xbf, 0x24, 0xe1, 0x10, 0xc4, 0xaf, 0x25, 0x73, 0x38, 0x04, 0xba, 0x7e, 0x1f, 0xca, 0x38,
    0x25, 0xc0, 0x61, 0x61, 0x48, 0x5b, 0x27, 0x1e, 0xc1, 0x08, 0xb6, 0xc1, 0x06, 0xd1, 0x23,
    0xae, 0x03, 0xf5, 0x34, 0x95, 0x9a, 0xcb, 0x07, 0xc3, 0x5e, 0x28, 0xf6, 0x56, 0x72, 0xe1,
    0x48, 0xc8, 0x76, 0xa5, 0x19, 0xf8, 0x01, 0x7c, 0x22, 0x04, 0xfb, 0xe5, 0x09, 0xec, 0x0b,
    0x5c, 0x23, 0x93, 0xfe, 0xd2, 0x5a, 0x6b, 0x04, 0x9f, 0x84, 0xdc, 0x86, 0xdc, 0xbe, 0x05,
    0x13, 0x53, 0x94, 0x48, 0x73, 0x73, 0x74, 0x91, 0xe7, 0x9c, 0xa1, 0x99, 0x69, 0x21, 0x48,
    0x67, 0x99, 0x37, 0x88, 0x38, 0xab, 0x95, 0x69, 0x01, 0x24, 0x93, 0x0d, 0xcb, 0xbf, 0x97,
    0x3e, 0x3c, 0x2c, 0xee, 0x5d, 0xb8, 0x44, 0x10, 0xfc, 0x1f, 0x1d, 0x5e, 0xe8, 0xbf, 0xd7,
    0x0b, 0xaf, 0x62, 0x6c, 0x2e, 0x8d, 0xdd, 0x0f, 0x9a, 0xde, 0x32, 0x9a, 0xb1, 0xda, 0xf9,
    0x48, 0x41, 0xc8, 0x71, 0x24, 0x4c, 0x72, 0x07, 0xf7, 0x8a, 0x28, 0x3d, 0xf1, 0x75, 0x0c,
    0xc8, 0x8d, 0x53, 0xf4, 0x1a, 0x26, 0x1b, 0xc7, 0x07, 0x75, 0xf1, 0xd2, 0xeb, 0x75, 0x84,
    0xc5, 0xd4, 0x76, 0x94, 0x15, 0xfa, 0x8b, 0x5b, 0x3c, 0xf6, 0xeb, 0x74, 0x7e, 0x8f, 0xa9,
    0xee, 0x37, 0x7d, 0xa4, 0x30, 0xd5, 0x16, 0x0d, 0x91, 0x86, 0x21, 0xb7, 0xd3, 0x14, 0x33,
    0x87, 0x7e, 0x07, 0xd4, 0xeb, 0x8a, 0x7d, 0x63, 0xe0, 0x37, 0xef, 0xd2, 0xa7, 0x02, 0x67,
    0x3f, 0x05, 0xb5, 0x7b, 0x26, 0x16, 0x54, 0xaa, 0xaa, 0xce, 0x2d, 0x4b, 0xd9, 0xe4, 0xb9,
    0x9b, 0x9a, 0xba, 0x4e, 0x9d, 0x2a, 0x2d, 0xb9, 0x9a, 0x1a, 0xf3, 0xab, 0xa4, 0x02, 0xe6,
    0x26, 0xea, 0x9e, 0x4b, 0xa2, 0x00, 0xa4, 0x07, 0xac, 0x59, 0xbb, 0x67, 0x5d, 0x19, 0x82,
    0x29, 0xab, 0xbd, 0x20, 0xd7, 0x52, 0x59, 0x1d, 0x32, 0xb1, 0x4e, 0xc5, 0x97, 0x0b, 0x14,
    0x3b, 0xe7, 0x33, 0x45, 0x50, 0xbd, 0xff, 0xf8, 0x1a, 0x0d, 0xc5, 0xf8, 0x6a, 0x52, 0x15,
    0xdc, 0x97, 0x3c, 0x5b, 0x6d, 0x34, 0x12, 0xa7, 0xd7, 0xb8, 0xf5, 0xed, 0x3b, 0xf3, 0xb8,
    0x1f, 0x7f, 0x48, 0x68, 0xeb, 0x76, 0xc5, 0x47, 0x0e, 0x08, 0x5c, 0xec, 0x8c, 0x34, 0xf8,
    0x41, 0x61, 0xac, 0xd7, 0x91, 0x3b, 0x50, 0x14, 0xcb, 0xea, 0x71, 0xfd, 0xe6, 0xa8, 0x07,
    0xf7, 0xd8, 0xeb, 0xf6, 0xc5, 0x99, 0x18, 0xd0, 0x96, 0x75, 0x67, 0x7e, 0x83, 0x2f, 0x1f,
    0xc6, 0x86, 0x62, 0x7e, 0x5b, 0xd6, 0xea, 0x63, 0x65, 0x5d, 0xe5, 0x5c, 0x27, 0x14, 0x87,
    0x5f, 0xaf, 0x6b, 0x2c, 0x76, 0xba, 0xf8, 0x49, 0x6e, 0x67, 0x76, 0x3f, 0xc0, 0x83, 0xe0,
    0x44, 0xae, 0x16, 0x73, 0x7e, 0xaa, 0x49, 0xbe, 0xdf, 0x4f, 0xa4, 0x75, 0xc7, 0xe2, 0x78,
    0x63, 0xd0, 0xd7, 0xd6, 0x7d, 0x7e, 0x66, 0x2f, 0x4d, 0xfc, 0x15, 0xda, 0x96, 0xf9, 0xfe,
    0x84, 0x5f, 0xc6, 0x63, 0x6c, 0xfe, 0xd7, 0x84, 0xe5, 0x68, 0x89, 0x78, 0x90, 0x58, 0x38,
    0x25, 0xb5, 0xff, 0x9a, 0x84, 0x4f, 0x7f, 0x8f, 0x7d, 0x16, 0x7d, 0xea, 0xf9, 0xfa, 0xea,
    0xb1, 0x58, 0xc4, 0x19, 0xdf, 0xd4, 0x1b, 0x3b, 0xa8, 0x9c, 0x55, 0x93, 0xcf, 0x6c, 0x09,
    0xc8, 0xbb, 0x70, 0x5d, 0x32, 0x90, 0x6c, 0xdd, 0xdd, 0xf7, 0x94, 0x2c, 0x04, 0x87, 0xed,
    0x74, 0xc7, 0xe2, 0xe0, 0x19, 0xe3, 0xc7, 0x3c, 0xfc, 0x9f, 0xc6, 0xc0, 0x19, 0xcc, 0x9b,
    0xeb, 0x52, 0x4c, 0x9b, 0xc0, 0x57, 0xe2, 0xc5, 0xd2, 0x18, 0x55, 0x76, 0xb1, 0xd8, 0x41,
    0xca, 0xd1, 0x6d, 0x6d, 0xa5, 0xc7, 0xe2, 0x7c, 0xb9, 0x97, 0xcc, 0xc5, 0xef, 0x51, 0x2e,
    0xfd, 0x80, 0x19, 0xf5, 0x4c, 0x7c, 0x9f, 0xe1, 0x18, 0x8f, 0x86, 0xb9, 0xae, 0xdd, 0xb5,
    0x09, 0xcd, 0xa7, 0x13, 0x4d, 0x5c, 0xc2, 0xea, 0x12, 0xed, 0x25, 0x3c, 0xdf, 0x0e, 0x82,
    0xc3, 0xcd, 0x2e, 0xc1, 0x5e, 0x42, 0xf4, 0xbe, 0x09, 0x15, 0x33, 0xb9, 0xc9, 0x9a, 0xbc,
    0x3a, 0xc4, 0xd1, 0x12, 0x6e, 0x5a, 0xbd, 0x5f, 0x1f, 0x49, 0xe7, 0xa0, 0x4b, 0xde, 0x94,
    0x4f, 0x3d, 0x63, 0x2b, 0x14, 0x49, 0x3f, 0x2b, 0x54, 0xc3, 0x1d, 0x04, 0xc2, 0x7f, 0xcc,
    0x3d, 0x1c, 0xfa, 0xb4, 0xe4, 0x16, 0x93, 0x49, 0xa9, 0x55, 0xac, 0xce, 0xef, 0xa8, 0xfa,
    0x00, 0x0f, 0xd0, 0xab, 0x7f, 0xfe, 0xf1, 0xf1, 0xfa, 0xb7, 0xab, 0x3f, 0x3e, 0x9f, 0xff,
    0xdb, 0xc7, 0xc4, 0xec, 0xf5, 0x6a, 0xdf, 0xff, 0xcf, 0x9b, 0xdf, 0x3e, 0x35, 0x0b, 0xc1,
    0xcf, 0x97, 0x77, 0x7f, 0xd0, 0xff, 0xfe, 0xf4, 0xe9, 0xe3, 0xf9, 0x7d, 0x3c, 0xdf, 0x2e,
    0xb1, 0x63, 0xcb, 0xf8, 0x89, 0xac, 0x6d, 0xae, 0xb1, 0xca, 0x33, 0x6b, 0x58, 0xdf, 0xb6,
    0x19, 0x3c, 0x0a, 0x8a, 0xff, 0xf0, 0xa1, 0x24, 0x29, 0x76, 0x87, 0xb1, 0x17, 0xef, 0x7b,
    0xe2, 0xa8, 0x27, 0x0e, 0x14, 0xcc, 0xb1, 0xfd, 0x5e, 0x09, 0x97, 0x5b, 0xee, 0x94, 0xb8,
    0xc7, 0xaa, 0x5b, 0x6d, 0xf1, 0xda, 0xb1, 0x2c, 0x1c, 0xbd, 0x9d, 0xe1, 0x48, 0x3e, 0x5e,
    0x99, 0x31, 0x19, 0xa1, 0x63, 0x20, 0xfb, 0x98, 0xd2, 0xe9, 0xff, 0xfe, 0xf6, 0xed, 0xf5,
    0x48, 0x77, 0x36, 0x4c, 0x1b, 0x92, 0x8d, 0x41, 0x24, 0xd1, 0x6b, 0x82, 0x31, 0x32, 0xf0,
    0x81, 0x4d, 0x90, 0x37, 0xc7, 0x68, 0xe2, 0xd8, 0xc8, 0x7d, 0x58, 0x39, 0x46, 0x27, 0x27,
    0xec, 0x2b, 0xe6, 0xa3, 0xb2, 0x29, 0xb7, 0xce, 0x41, 0x86, 0xff, 0x24, 0x4a, 0x32, 0x29,
    0x3f, 0x9a, 0x66, 0x71, 0xfe, 0x83, 0xd2, 0xd4, 0x5b, 0xf8, 0xde, 0xa1, 0x97, 0x50, 0xee,
    0xb7, 0x39, 0xea, 0x8b, 0x2f, 0xca, 0x49, 0x59, 0xaa, 0xe8, 0x5b, 0x3b, 0x34, 0xd1, 0xa6,
    0x45, 0x24, 0x0b, 0xc6, 0x5f, 0x3b, 0x83, 0x91, 0x90, 0xb1, 0x91, 0x00, 0x47, 0x43, 0x0a,
    0x30, 0xc5, 0xf1, 0xfa, 0x9b, 0x9c, 0x46, 0x24, 0xbe, 0x46, 0x9c, 0x34, 0xad, 0x14, 0xfb,
    0x0b, 0x69, 0x52, 0x92, 0x52, 0x7c, 0x26, 0x92, 0x90, 0xcc, 0x81, 0x59, 0xce, 0x77, 0xd4,
    0x4d, 0x73, 0xc1, 0x97, 0x13, 0x6d, 0xee, 0x98, 0x0e, 0xb9, 0x0d, 0x22, 0xbf, 0x21, 0x1f,
    0x01, 0x96, 0xea, 0x9c, 0xf0, 0xa0, 0x83, 0x9c, 0xb7, 0xf2, 0x38, 0x55, 0x08, 0xfc, 0x1c,
    0x51, 0xe0, 0x92, 0x7a, 0x97, 0xda, 0x63, 0x5f, 0x4e, 0x20, 0xe8, 0x9c, 0xb3, 0x84, 0x36,
    0x87, 0x8e, 0x75, 0x3d, 0xc3, 0xe4, 0x1e, 0x8b, 0xdf, 0x0f, 0xd9, 0xf8, 0x79, 0x4b, 0x78,
    0xb1, 0x0f, 0x67, 0x6a, 0xfb, 0xe4, 0x84, 0x03, 0x61, 0x93, 0x55, 0xbc, 0x82, 0x03, 0x12,
    0x5a, 0x2f, 0xf6, 0x66, 0x5f, 0xa4, 0xb2, 0x98, 0xf3, 0xe0, 0x6b, 0x16, 0x46, 0x12, 0xe1,
    0x38, 0xab, 0xe4, 0x08, 0x91, 0x65, 0xb1, 0x49, 0x8d, 0xae, 0x61, 0x33, 0xb8, 0x95, 0x70,
    0x63, 0x6a, 0x40, 0x16, 0xb7, 0x51, 0x15, 0x90, 0x23, 0xf0, 0x68, 0x98, 0xc6, 0x66, 0x49,
    0xde, 0x6f, 0x06, 0xc7, 0x76, 0x7f, 0x6b, 0x99, 0x4f, 0x9a, 0xda, 0x64, 0x3f, 0x49, 0x01,
    0x35, 0xc6, 0x6d, 0x24, 0x1a, 0xa5, 0x8b, 0xa0, 0x8d, 0xd9, 0xf0, 0x7a, 0x54, 0x5d, 0xaf,
    0x57, 0x75, 0xfb, 0x1e, 0x0c, 0xea, 0xc9, 0x94, 0x56, 0xad, 0x38, 0xe2, 0xcf, 0x49, 0x42,
    0xe3, 0xb4, 0xce, 0xc9, 0xb2, 0x1c, 0xc7, 0x16, 0x29, 0xa1, 0x0d, 0x63, 0xe8, 0x2d, 0x07,
    0x64, 0xee, 0xc9, 0xd4, 0x5e, 0xfa, 0x04, 0xcb, 0xd9, 0xee, 0xba, 0x6e, 0xa2, 0xf9, 0xef,
    0x37, 0xfe, 0x1b, 0xaf, 0x72, 0x4d, 0xd6, 0x4c, 0xf0, 0xe3, 0x65, 0x94, 0x47, 0x82, 0xe6,
    0x1b, 0x63, 0xfa, 0x59, 0xb3, 0x6c, 0x47, 0xd1, 0xaf, 0x7c, 0xa1, 0x6e, 0x48, 0x5b, 0x27,
    0x72, 0x68, 0x91, 0xf5, 0x7e, 0xe2, 0x25, 0x95, 0xa8, 0x5b, 0x22, 0x20, 0x26, 0xc9, 0xcd,
    0xb9, 0xd0, 0xf6, 0x25, 0xe2, 0x5c, 0xd0, 0x58, 0xef, 0xaa, 0x68, 0x7b, 0xda, 0x5d, 0x67,
    0xa4, 0xe8, 0xc2, 0xd2, 0xf0, 0x9d, 0x1e, 0xb0, 0xf9, 0xc5, 0xe1, 0x63, 0x1e, 0x75, 0x82,
    0x7c, 0xbd, 0x74, 0x85, 0xef, 0x4d, 0xf3, 0xe1, 0xa8, 0xf6, 0x28, 0x4c, 0x7f, 0x28, 0xbe,
    0xe1, 0x74, 0xea, 0xed, 0x35, 0xa1, 0x42, 0x5d, 0x55, 0xf8, 0xf4, 0x4a, 0x85, 0xa2, 0x5f,
    0x1d, 0xea, 0xc6, 0x43, 0xfb, 0x92, 0xa5, 0x46, 0xf0, 0xc3, 0x11, 0x22, 0x1a, 0x55, 0x41,
    0xe6, 0x63, 0xb4, 0x5e, 0x68, 0xd3, 0xc5, 0x83, 0xb1, 0xc4, 0x0a, 0x6b, 0xe8, 0xa8, 0x70,
    0xc1, 0x58, 0x37, 0xfa, 0x5d, 0x0b, 0xb3, 0x58, 0xdb, 0xdc, 0x84, 0x9e, 0x4a, 0xb6, 0x89,
    0x18, 0x29, 0x4f, 0x8a, 0xa6, 0xc3, 0xa9, 0x00, 0xd1, 0xf3, 0x01, 0x56, 0x35, 0xc5, 0xc6,
    0xe6, 0x66, 0x1a, 0xfa, 0xe6, 0xc1, 0x50, 0x66, 0xd0, 0x52, 0x56, 0x31, 0xe8, 0x5b, 0xfd,
    0x13, 0xfa, 0xc6, 0xe9, 0x66, 0xaa, 0x87, 0x1a, 0xb2, 0x30, 0x78, 0x77, 0xeb, 0xef, 0x43,
    0xc5, 0x35, 0x8a, 0xcb, 0x5f, 0x36, 0x6b, 0x03, 0xc7, 0xe9, 0x47, 0x5f, 0xc5, 0x70, 0xe6,
    0x41, 0x55, 0x9e, 0xc6, 0x1b, 0xde, 0xba, 0x5b, 0xe5, 0x2d, 0x66, 0x58, 0xcb, 0x4b, 0xcd,
    0x32, 0x1f, 0x61, 0x52, 0xe9, 0x13, 0x57, 0xc9, 0xee, 0x77, 0xea, 0xe7, 0xce, 0x91, 0x2c,
    0x7e, 0x60, 0x84, 0xbc, 0xe5, 0x74, 0x6c, 0x17, 0xa7, 0xb6, 0x5d, 0x53, 0x9f, 0x8a, 0x53,
    0x55, 0xd3, 0xb0, 0x6f, 0x7c, 0x4d, 0xd5, 0x2e, 0xf4, 0xee, 0xad, 0x85, 0x1c, 0x88, 0x4b,
    0xcc, 0x14, 0x9c, 0xef, 0x12, 0x03, 0x5f, 0x3a, 0xba, 0x1d, 0x01, 0x25, 0x9d, 0x48, 0x32,
    0xaa, 0xeb, 0x4e, 0xf0, 0x39, 0xb3, 0x88, 0xf8, 0xa4, 0x1a, 0x72, 0x20, 0x1a, 0x92, 0xcc,
    0x93, 0x49, 0x82, 0x5b, 0x9f, 0x76, 0x1a, 0x71, 0xe6, 0x0c, 0xc9, 0x54, 0x8b, 0xc7, 0x87,
    0xd5, 0x7a, 0x14, 0x89, 0x02, 0x72, 0x68, 0xe7, 0x90, 0xee, 0xb0, 0x3f, 0x8e, 0xbd, 0x79,
    0xa3, 0x3a, 0xdd, 0xe1, 0x40, 0xa2, 0xbe, 0x95, 0x6d, 0xf2, 0xc6, 0x08, 0x9c, 0xb7, 0xf7,
    0x68, 0xd3, 0xed, 0x8a, 0x55, 0x03, 0xdf, 0xee, 0xfd, 0xda, 0x94, 0xca, 0xc4, 0x8b, 0xb2,
    0x8a, 0x9c, 0xc2, 0x6c, 0x88, 0x5f, 0xe8, 0xbf, 0xc6, 0xa7, 0xa3, 0xc6, 0x44, 0x34, 0x08,
    0xa1, 0x49, 0x67, 0x6f, 0x70, 0x7a, 0x1a, 0x7b, 0xb3, 0xb7, 0x40, 0x70, 0xe3, 0x69, 0xf4,
    0x48, 0x7e, 0x63, 0x84, 0xc1, 0x81, 0x96, 0xf2, 0xed, 0x88, 0xac, 0x07, 0x6f, 0x36, 0xea,
    0x9f, 0x0f, 0x7a, 0x35, 0x74, 0xfc, 0xad, 0x59, 0xf3, 0xd0, 0x4d, 0x89, 0x23, 0x3b, 0x82,
    0xbd, 0x29, 0xe4, 0xc9, 0x52, 0x4f, 0x61, 0xce, 0xaa, 0xf5, 0x26, 0xb5, 0x32, 0x3c, 0x4a,
    0xf9, 0x71, 0xa2, 0x78, 0x2c, 0xdc, 0x5f, 0xc6, 0xc3, 0x70, 0x9a, 0xfa, 0x88, 0xf4, 0xa4,
    0x6a, 0x92, 0xdd, 0x46, 0xf8, 0x78, 0x7d, 0xef, 0x25, 0xdb, 0x34, 0x97, 0xd0, 0xfc, 0xfe,
    0xd7, 0xe2, 0x9a, 0x40, 0xb8, 0xc5, 0xef, 0x7c, 0xcf, 0xa7, 0x76, 0xd8, 0x6b, 0xd3, 0xeb,
    0x2e, 0x35, 0xc1, 0x27, 0xb5, 0x49, 0xff, 0x4b, 0x5f, 0xfc, 0xa3, 0x97, 0xbe, 0xf8, 0x87,
    0x17, 0x3f, 0xcd, 0xc0, 0x26, 0xbe, 0xe7, 0xf2, 0x47, 0x4b, 0xc3, 0x86, 0xaa, 0x27, 0x8c,
    0xaf, 0x67, 0x1c, 0x55, 0x0d, 0xfd, 0x95, 0xd3, 0xa3, 0xaf, 0x77, 0xca, 0x06, 0x2d, 0xa8,
    0x32, 0xff, 0x51, 0xaa, 0x29, 0x91, 0x68, 0xa0, 0x2e, 0x11, 0xc2, 0x67, 0x80, 0x65, 0x58,
    0x01, 0x3d, 0x4b, 0x0c, 0x2b, 0x94, 0xd1, 0x43, 0x3f, 0x55, 0x27, 0xd7, 0xdb, 0x4f, 0x5f,
    0x7d, 0x55, 0x9b, 0x37, 0x24, 0x33, 0x59, 0x47, 0x5c, 0x79, 0x10, 0x55, 0xa4, 0xd9, 0x39,
    0x72, 0x1a, 0xa6, 0xfc, 0xa8, 0x78, 0x3a, 0x19, 0x64, 0x74, 0xec, 0x3e, 0xd0, 0x21, 0xaa,
    0x4b, 0xa6, 0x83, 0xc8, 0xf1, 0x73, 0xa8, 0x36, 0xc0, 0xaa, 0x9f, 0x4b, 0x70, 0x33, 0xf9,
    0x33, 0x5f, 0xaf, 0xa8, 0xff, 0x57, 0xdc, 0x9f, 0xbb, 0xc3, 0x18, 0x2d, 0x6c, 0x7b, 0x45,
    0x78, 0xf7, 0x6e, 0x4e, 0x7d, 0x38, 0x67, 0x72, 0x42, 0x3d, 0xec, 0x77, 0xca, 0x9a, 0xc0,
    0xde, 0x4e, 0xd5, 0xc7, 0x77, 0x1a, 0x21, 0x0e, 0x26, 0xef, 0x4e, 0xc7, 0xa7, 0xa7, 0x52,
    0x5d, 0xf2, 0x66, 0x0f, 0x2e, 0x96, 0x70, 0x3a, 0x8a, 0xc7, 0x12, 0xf6, 0xfe, 0x00, 0x7a,
    0xd1, 0xa3, 0x73, 0xba, 0xc0, 0xd3, 0xc7, 0x32, 0xcd, 0x56, 0x62, 0x09, 0x48, 0xce, 0x5b,
    0xdc, 0xf3, 0xd9, 0xb6, 0x20, 0x1f, 0x7d, 0x65, 0x0d, 0xe1, 0xbf, 0x96, 0x71, 0x4d, 0xec,
    0x09, 0x21, 0x3b, 0x70, 0x61, 0x0c, 0xea, 0x73, 0xa1, 0x3c, 0x61, 0xa4, 0xd9, 0xee, 0x14,
    0xfa, 0xd3, 0xf7, 0x04, 0xf9, 0xee, 0x7e, 0xed, 0x97, 0xbf, 0xbd, 0x53, 0x89, 0x74, 0x62,
    0x75, 0x7c, 0x69, 0xbf, 0x57, 0xa2, 0xd4, 0x2e, 0x7d, 0x94, 0xe1, 0x76, 0xd6, 0x0a, 0x4b,
    0x20, 0x0b, 0xd3, 0xd1, 0x55, 0xb8, 0xf6, 0xe7, 0xc8, 0xc2, 0x51, 0x9f, 0x3e, 0xe6, 0xd5,
    0x80, 0xce, 0xdd, 0xdc, 0xbf, 0xc0, 0x30, 0x8b, 0x12, 0x65, 0x40, 0x76, 0xc2, 0x43, 0xba,
    0x96, 0xac, 0x76, 0x53, 0x2c, 0xd2, 0x85, 0x6f, 0x56, 0x43, 0x56, 0x28, 0xef, 0x94, 0x3d,
    0x35, 0x93, 0x68, 0xec, 0xe8, 0x7c, 0xe1, 0xfe, 0x8c, 0xa5, 0xe2, 0x0e, 0xf8, 0x9b, 0x02,
    0xc2, 0xf4, 0x89, 0x69, 0xf0, 0xa4, 0x1d, 0x17, 0x22, 0xf4, 0xef, 0xc8, 0xc0, 0x6b, 0x14,
    0xf3, 0xf5, 0x9b, 0x7f, 0x7b, 0x30, 0x02, 0xde, 0x80, 0xa2, 0xaa, 0xaf, 0x87, 0x91, 0xcf,
    0x8e, 0xfe, 0xba, 0xcf, 0x3e, 0xa3, 0x4b, 0x52, 0x9d, 0x72, 0xa2, 0x9b, 0xf3, 0xd7, 0x81,
    0x53, 0x21, 0xb6, 0x30, 0x21, 0x00, 0x2d, 0x63, 0x93, 0x37, 0xff, 0x16, 0x54, 0xec, 0x81,
    0x96, 0x9f, 0xb1, 0x85, 0xa9, 0x7c, 0x2e, 0xcc, 0x35, 0xda, 0x98, 0x0e, 0x72, 0x08, 0x88,
    0x0f, 0x0f, 0xc6, 0x83, 0xf1, 0xf5, 0xeb, 0x57, 0x9b, 0xf0, 0x17, 0x34, 0x05, 0x33, 0x03,
    0x60, 0xb9, 0xe4, 0x59, 0x25, 0x16, 0x5e, 0x61, 0xc5, 0x55, 0x38, 0x2e, 0x5a, 0x91, 0x32,
    0x34, 0x83, 0x67, 0xc8, 0x68, 0x06, 0x44, 0x6a, 0xfe, 0xc3, 0xfb, 0x8d, 0xad, 0xcc, 0x0b,
    0x28, 0x3a, 0x0f, 0xee, 0x9a, 0xe7, 0xb6, 0x2c, 0xe9, 0xbb, 0x6c, 0xfa, 0x3f, 0x08, 0xa8,
    0x29, 0x1b, 0x82, 0xfa, 0xe3, 0xe2, 0x0c, 0x8a, 0x8f, 0x95, 0xcc, 0xd1, 0x5f, 0xa9, 0x2a,
    0xf3, 0xf8, 0x11, 0x23, 0xa9, 0x00, 0x51, 0x80, 0x4d, 0xeb, 0x8f, 0x0d, 0x6d, 0x5f, 0x8e,
    0x26, 0x4c, 0xb5, 0x45, 0x87, 0x7a, 0x81, 0xde, 0x40, 0x15, 0x85, 0x87, 0x2e, 0x3d, 0x2c,
    0xf0, 0xdd, 0xf6, 0x70, 0x27, 0x19, 0x3e, 0x49, 0xac, 0x4a, 0xca, 0xe8, 0xd5, 0x22, 0x0e,
    0x24, 0x51, 0xfd, 0x96, 0xbd, 0x45, 0x42, 0x2f, 0x56, 0x55, 0xaf, 0x24, 0x88, 0x8a, 0xf4,
    0xca, 0x95, 0x6a, 0x0c, 0x8b, 0x9c, 0xab, 0x2a, 0x30, 0x2a, 0xcf, 0x26, 0x80, 0x4c, 0x39,
    0xa4, 0x21, 0x09, 0xac, 0x7d, 0xec, 0x60, 0x5f, 0x22, 0x9f, 0x5c, 0x51, 0x9b, 0x18, 0xe2,
    0x37, 0x5d, 0x18, 0xdc, 0x7e, 0x79, 0x54, 0x16, 0xe3, 0xf4, 0x84, 0x59, 0x6f, 0x1e, 0xc1,
    0xa0, 0xad, 0xb8, 0x9b, 0x13, 0x35, 0x67, 0x2f, 0xb4, 0x4d, 0xa7, 0xed, 0x35, 0x94, 0x8c,
    0x11, 0xb6, 0x7e, 0x62, 0x0e, 0xc4, 0xa9, 0x89, 0x06, 0x9e, 0x27, 0x9a, 0xbc, 0xaa, 0x82,
    0x8a, 0x46, 0xd2, 0x99, 0x7e, 0x65, 0xae, 0x9b, 0xe0, 0x79, 0x89, 0x5c, 0x7b, 0x0a, 0xd9,
    0xcf, 0x67, 0x90, 0x95, 0x1f, 0x8c, 0x90, 0x8d, 0x17, 0x2e, 0x3d, 0xdd, 0x51, 0x9a, 0xac,
    0xea, 0x76, 0xbc, 0xe5, 0x6b, 0x6d, 0x86, 0x54, 0x3c, 0xa3, 0x78, 0x57, 0xdf, 0xd4, 0x4f,
    0x91, 0xd8, 0x6e, 0x51, 0xcf, 0x50, 0xfd, 0x0d, 0x60, 0x4e, 0x68, 0x53, 0xd7, 0x7c, 0x3e,
    0x92, 0xaf, 0x5c, 0x6f, 0xcc, 0xde, 0x27, 0x34, 0x1f, 0x93, 0xea, 0x1d, 0x5b, 0x5a, 0x15,
    0xee, 0x0f, 0xc4, 0x01, 0xae, 0x2d, 0xec, 0x52, 0x79, 0x16, 0x92, 0x87, 0x60, 0xb6, 0xc4,
    0x85, 0xff, 0xcf, 0x11, 0x3d, 0x8d, 0x82, 0xb8, 0xc2, 0xd8, 0xd9, 0x84, 0xa3, 0x5b, 0x1c,
    0x4d, 0x90, 0xb4, 0x2b, 0x16, 0xdd, 0x2d, 0xec, 0xbf, 0x9a, 0x52, 0x59, 0x1f, 0x15, 0xce,
    0x48, 0xec, 0x52, 0x1f, 0x0f, 0x68, 0x35, 0xd6, 0x08, 0x37, 0x8b, 0x1d, 0x96, 0xca, 0x0a,
    0x81, 0x3e, 0x1d, 0xc8, 0xfd, 0x00, 0x24, 0xc7, 0x99, 0x04, 0x1e, 0x9a, 0x99, 0xd6, 0x12,
    0xec, 0xb6, 0xa8, 0xdf, 0x11, 0x47, 0x3e, 0xb7, 0xbb, 0xb8, 0x52, 0x56, 0x35, 0xb0, 0x4b,
    0xd7, 0xa5, 0x96, 0xe0, 0xe8, 0xd8, 0x65, 0x36, 0x42, 0x8c, 0xf3, 0xd8, 0x52, 0x19, 0xdc,
    0xbe, 0x24, 0xcd, 0xbe, 0x35, 0x37, 0x05, 0x4e, 0x67, 0xde, 0xfb, 0xe6, 0x5d, 0x6e, 0x89,
    0x54, 0x00, 0xe1, 0x5e, 0x9b, 0x0c, 0x40, 0xf3, 0x52, 0xf9, 0xa6, 0x2d, 0x9d, 0xa5, 0x17,
    0xe4, 0x01, 0x40, 0xcd, 0xe0, 0x21, 0xca, 0x00, 0xa6, 0x6a, 0x27, 0x40, 0x57, 0x2c, 0xfa,
    0xf6, 0x52, 0xba, 0x10, 0xd7, 0x3e, 0x02, 0x28, 0x9d, 0x24, 0x1f, 0xdd, 0xd0, 0x2f, 0xa8,
    0xad, 0xbb, 0xcd, 0xae, 0x5a, 0x94, 0xe9, 0x14, 0xaf, 0x20, 0x97, 0xcf, 0x75, 0xc6, 0xc1,
    0x87, 0x9e, 0xb1, 0xf5, 0x93, 0x66, 0x28, 0xd3, 0x5d, 0x3b, 0x75, 0xd8, 0x42, 0x7e, 0xfa,
    0x35, 0x88, 0x21, 0x5e, 0xe3, 0xa2, 0xaa, 0x09, 0xfa, 0x32, 0xae, 0x64, 0xe5, 0x56, 0x2b,
    0x78, 0xc2, 0x76, 0xc9, 0x5b, 0x38, 0x48, 0x8b, 0x55, 0xba, 0xd4, 0xc0, 0x84, 0x57, 0xc1,
    0xb3, 0xae, 0x99, 0x78, 0x24, 0x37, 0x47, 0xee, 0xbc, 0x62, 0x2b, 0x2e, 0xe1, 0x42, 0x09,
    0xc5, 0x33, 0x1e, 0x6e, 0xfd, 0x33, 0x11, 0xa2, 0xee, 0x49, 0x20, 0xca, 0x9f, 0xef, 0x42,
    0x36, 0x14, 0x00, 0xf7, 0xcd, 0x9d, 0x16, 0x6b, 0x91, 0x51, 0x76, 0xc8, 0x39, 0x21, 0x13,
    0x7e, 0x04, 0x8c, 0x40, 0x27, 0x73, 0x0e, 0xcc, 0x7f, 0x85, 0x4e, 0x0f, 0xeb, 0x0a, 0x14,
    0xd2, 0x37, 0x77, 0xa2, 0x62, 0x1d, 0xb8, 0x4c, 0xbb, 0xbe, 0xb9, 0xff, 0xf8, 0x03, 0x3a,
    0x36, 0x5e, 0xa0, 0x7a, 0x6d, 0xd2, 0xdf, 0xa0, 0x05, 0xb6, 0xf0, 0x31, 0xbf, 0x07, 0x87,
    0x7f, 0x49, 0x55, 0xda, 0x18, 0xb9, 0xf7, 0x43, 0xe1, 0x50, 0x83, 0x94, 0xd1, 0x69, 0xc0,
    0xed, 0x0d, 0xc5, 0x51, 0x38, 0x77, 0x43, 0xed, 0xb0, 0x4a, 0x85, 0xb8, 0xc4, 0x30, 0x8d,
    0x27, 0xbd, 0x72, 0x7c, 0x8c, 0x30, 0x8d, 0xe9, 0x8f, 0x06, 0x22, 0xf4, 0x87, 0x2c, 0x1f,
    0x11, 0x6a, 0x8b, 0x83, 0x0f, 0xee, 0xbe, 0x6a, 0xa6, 0xb6, 0x48, 0x8f, 0x2f, 0x34, 0x5d,
    0x3d, 0xe2, 0xc6, 0x67, 0xbd, 0x9a, 0xd5, 0xb8, 0x84, 0x56, 0x0e, 0x83, 0x17, 0xb8, 0x2a,
    0x95, 0x30, 0xdd, 0x2a, 0x70, 0x1e, 0xd8, 0x7e, 0xd5, 0xc3, 0x43, 0x05, 0x7a, 0x5d, 0x94,
    0x36, 0xec, 0xc4, 0x0b, 0x9a, 0x7c, 0xc5, 0x9e, 0xb2, 0xc1, 0x6a, 0xf4, 0xfa, 0x9e, 0x74,
    0x1b, 0x76, 0xc4, 0x45, 0x3e, 0x93, 0x68, 0xaf, 0xe7, 0xaa, 0x05, 0x05, 0x6e, 0x9b, 0xef,
    0x67, 0xed, 0x27, 0x82, 0xd1, 0x7f, 0x61, 0xd6, 0x37, 0x8b, 0x4a, 0xee, 0xb6, 0x7f, 0x56,
    0x45, 0x84, 0xb2, 0xf0, 0x05, 0x44, 0xa8, 0x05, 0x75, 0x86, 0xd7, 0xc0, 0x3b, 0x51, 0x10,
    0x45, 0xb5, 0xda, 0x02, 0xef, 0xb3, 0x4e, 0x7a, 0x87, 0xd2, 0xdc, 0xd8, 0x3d, 0x80, 0x5a,
    0x8a, 0x10, 0x71, 0xb5, 0xb4, 0x22, 0x57, 0xb0, 0x78, 0x6e, 0x98, 0xd4, 0x90, 0x5b, 0xb7,
    0x44, 0xd7, 0xa6, 0x29, 0xcd, 0xe6, 0x9e, 0xe9, 0xec, 0xd8, 0xb3, 0x8e, 0xf8, 0xee, 0x7d,
    0x87, 0xe5, 0x44, 0x69, 0x7a, 0xc1, 0x31, 0xe0, 0x58, 0x22, 0xf9, 0xf9, 0x05, 0xc7, 0x05,
    0x2c, 0x2e, 0xd6, 0x50, 0xcb, 0xc5, 0xd4, 0x4e, 0x26, 0xfb, 0xd6, 0xd2, 0x9e, 0x14, 0x1b,
    0xd5, 0x62, 0xc7, 0xc0, 0x7b, 0x31, 0xd8, 0xa9, 0x06, 0x3b, 0xa1, 0xcf, 0x6e, 0xb6, 0xc1,
    0x47, 0xee, 0x41, 0xd8, 0xeb, 0xae, 0x38, 0xa3, 0xe5, 0xc5, 0x5e, 0x17, 0xc7, 0xb2, 0x38,
    0xfd, 0x62, 0xaf, 0x8b, 0xe2, 0x58, 0xec, 0x79, 0xbe, 0xd8, 0xeb, 0xa2, 0x38, 0x16, 0xfb,
    0x25, 0x63, 0x4a, 0xc6, 0x5e, 0x7f, 0xd1, 0xec, 0xc5, 0x85, 0x7f, 0x69, 0xde, 0x5c, 0x43,
    0x44, 0x60, 0xaa, 0xb3, 0xc5, 0x41, 0xf3, 0x56, 0xfe, 0xc4, 0x94, 0x6e, 0xf7, 0x2c, 0xf1,
    0x79, 0x27, 0xa6, 0x2c, 0x23, 0x39, 0x13, 0x69, 0x3c, 0x81, 0x84, 0x89, 0x0f, 0x12, 0x69,
    0x3b, 0x4f, 0x42, 0x4f, 0xcf, 0x50, 0xc8, 0x4a, 0x9c, 0xcc, 0xea, 0x59, 0xe1, 0x5b, 0x4f,
    0x33, 0xb1, 0x47, 0x18, 0x48, 0x4c, 0xf2, 0xc8, 0xc0, 0x81, 0xff, 0x73, 0x53, 0x63, 0x62,
    0xfe, 0x49, 0xed, 0x80, 0x6a, 0x6f, 0xbb, 0x12, 0x93, 0x34, 0xa7, 0xac, 0x3a, 0xe9, 0xfc,
    0x8d, 0x84, 0xfb, 0x8d, 0xe6, 0xcf, 0x3f, 0xdd, 0x47, 0xbe, 0x0b, 0xed, 0x98, 0x40, 0x27,
    0xaf, 0xf3, 0xe8, 0xbe, 0xdb, 0x59, 0x4a, 0x7c, 0xb1, 0x9d, 0x75, 0x89, 0x1f, 0x4b, 0x49,
    0x4b, 0xda, 0xef, 0xae, 0x75, 0xd3, 0x28, 0xef, 0xf9, 0x0d, 0xc9, 0xa7, 0xbc, 0x54, 0x23,
    0x00, 0x67, 0x3a, 0x6a, 0xb9, 0xc5, 0x9e, 0x30, 0xc7, 0xda, 0x79, 0xcc, 0x36, 0x85, 0xd1,
    0xe1, 0xc9, 0x15, 0xcc, 0x75, 0x94, 0x99, 0x00, 0x18, 0xe5, 0x9b, 0xe6, 0x92, 0x61, 0xeb,
    0xa4, 0xf8, 0x52, 0x8b, 0x13, 0x2c, 0xa6, 0x06, 0xf6, 0x89, 0x8e, 0x35, 0x67, 0x85, 0xd6,
    0x45, 0x89, 0x2a, 0xc8, 0xb8, 0x24, 0xb6, 0x8f, 0x4e, 0x87, 0x2f, 0x6f, 0x12, 0xf1, 0xe8,
    0x79, 0xa6, 0x85, 0x74, 0x92, 0x95, 0x27, 0xcf, 0x46, 0xbe, 0x0a, 0x2c, 0x97, 0x74, 0x9c,
    0x10, 0x26, 0x5b, 0xfe, 0x43, 0xf5, 0xd4, 0x21, 0xb6, 0xb9, 0x8c, 0x1e, 0x4a, 0xf9, 0xa7,
    0x36, 0xdd, 0xdd, 0xc4, 0xb1, 0xd9, 0x4e, 0x17, 0x0a, 0x39, 0x8f, 0x24, 0x2c, 0x07, 0xcf,
    0x81, 0x3e, 0x11, 0x33, 0xc7, 0x60, 0xd8, 0x45, 0x8a, 0xe1, 0x66, 0xb4, 0xbe, 0x7e, 0x83,
    0xf7, 0x83, 0xf1, 0x77, 0x4a, 0x13, 0x07, 0xc8, 0x12, 0x02, 0xc0, 0xd8, 0x40, 0x91, 0x39,
    0x4e, 0x27, 0x88, 0x7e, 0xb6, 0xf9, 0xde, 0x82, 0xe9, 0x1b, 0x13, 0xba, 0xda, 0x82, 0xa5,
    0x29, 0x73, 0x12, 0xee, 0x88, 0x80, 0x39, 0x60, 0x6e, 0x57, 0x24, 0x65, 0x4d, 0x4e, 0x94,
    0xf2, 0x97, 0x69, 0xb0, 0xce, 0x48, 0xa9, 0xbd, 0x13, 0x08, 0xcf, 0x7f, 0x08, 0xfe, 0x3a,
    0x3e, 0x84, 0x9d, 0x89, 0x10, 0xdd, 0x30, 0x03, 0x4b, 0x2a, 0xdd, 0x30, 0x44, 0x8f, 0x1a,
    0xfc, 0x35, 0x85, 0xe6, 0xfd, 0x26, 0x34, 0x29, 0xa1, 0x79, 0x7f, 0xeb, 0x22, 0x7e, 0xfd,
    0x79, 0x52, 0x3e, 0x61, 0x82, 0xad, 0x27, 0xac, 0x7e, 0x31, 0xad, 0x06, 0xa7, 0x6d, 0x65,
    0xb4, 0xaf, 0x71, 0xa1, 0xce, 0xb0, 0x9c, 0xb8, 0x90, 0x66, 0x44, 0x87, 0x64, 0x94, 0xdd,
    0xb0, 0xa9, 0x78, 0x44, 0x67, 0x18, 0x67, 0xe4, 0xbd, 0x8f, 0x47, 0x74, 0x46, 0x62, 0x57,
    0x5b, 0xae, 0x4c, 0x2b, 0x12, 0x8a, 0xd8, 0xa5, 0xfa, 0x19, 0x44, 0xd4, 0xda, 0x7d, 0x84,
    0xd4, 0x20, 0xf1, 0xc0, 0xbf, 0x7e, 0x0f, 0x01, 0xdc, 0x7c, 0xd3, 0x4d, 0x19, 0xa5, 0x71,
    0x13, 0x8e, 0x3b, 0x43, 0xf1, 0x21, 0x36, 0xaa, 0x42, 0x6a, 0xbb, 0x6c, 0xb8, 0xe2, 0xe8,
    0x5d, 0xb5, 0x7e, 0xd5, 0x28, 0x77, 0x2b, 0xba, 0x5f, 0x8a, 0xd2, 0xb8, 0xad, 0xc9, 0x84,
    0xe0, 0xdc, 0x86, 0xde, 0x38, 0xa3, 0x04, 0x22, 0x1f, 0x4a, 0x0e, 0x20, 0xf8, 0x43, 0xd1,
    0xbe, 0xd0, 0x5f, 0x06, 0xb1, 0x91, 0xa3, 0xbe, 0x30, 0x70, 0x45, 0x9a, 0x84, 0xd0, 0x82,
    0xe5, 0x26, 0x5a, 0x5c, 0x40, 0x33, 0x35, 0xc8, 0x6d, 0x36, 0xad, 0x73, 0x43, 0x3d, 0x77,
    0x11, 0x01, 0x22, 0x19, 0xb7, 0x41, 0xda, 0x54, 0x21, 0x60, 0xc9, 0xae, 0x3a, 0x83, 0x8e,
    0xc7, 0x69, 0x7e, 0x56, 0x08, 0xf2, 0x93, 0x5e, 0x02, 0xad, 0xb2, 0x90, 0xe2, 0x81, 0xaa,
    0x30, 0xe9, 0x0f, 0xba, 0xad, 0x39, 0x04, 0xba, 0x9c, 0x41, 0x99, 0x1d, 0xdb, 0x1a, 0x9a,
    0xf7, 0x96, 0xcb, 0xe1, 0x97, 0x46, 0x4d, 0x40, 0xba, 0x85, 0x69, 0x39, 0xfe, 0xd5, 0x36,
    0x83, 0xbf, 0x46, 0xcc, 0x2e, 0xd5, 0x23, 0xc7, 0xdb, 0x5e, 0x51, 0x87, 0xe3, 0x35, 0xd1,
    0x89, 0xbd, 0x26, 0x1e, 0xc8, 0x2f, 0xee, 0x35, 0x41, 0x43, 0x92, 0x1b, 0x43, 0xdf, 0xdc,
    0xb1, 0xa1, 0x20, 0xec, 0xb9, 0x32, 0xbd, 0xa7, 0x63, 0x79, 0x90, 0xbe, 0x58, 0x54, 0x3b,
    0x01, 0x53, 0x79, 0x1e, 0x5d, 0x09, 0x82, 0x98, 0xee, 0x00, 0x96, 0x73, 0x79, 0x91, 0x5f,
    0x1c, 0xba, 0xc7, 0xd8, 0xed, 0xf7, 0xe5, 0x9a, 0xf6, 0xa4, 0xc8, 0x48, 0x6a, 0x36, 0x50,
    0x9e, 0x2c, 0xd5, 0xf3, 0xdc, 0xcf, 0x80, 0x29, 0xc5, 0xb9, 0xb8, 0x62, 0x31, 0x4b, 0x09,
    0x8b, 0x74, 0x91, 0x67, 0x62, 0x1a, 0x33, 0x66, 0xc1, 0xef, 0xcd, 0x5f, 0x60, 0x16, 0x71,
    0x48, 0x4f, 0x6e, 0xd7, 0x23, 0x1c, 0x49, 0xcc, 0xee, 0xaf, 0x3e, 0xe8, 0x9c, 0x75, 0x42,
    0x49, 0x4e, 0xbf, 0x85, 0x85, 0x18, 0xe9, 0xde, 0xa1, 0x83, 0x9a, 0x09, 0x7e, 0xc7, 0x0c,
    0xd6, 0xba, 0xdb, 0x80, 0x16, 0x6a, 0x0b, 0xe5, 0x89, 0x75, 0x60, 0xa5, 0xf8, 0xd7, 0x4d,
    0xc5, 0xea, 0xb6, 0x17, 0x00, 0xc1, 0x36, 0x58, 0x1e, 0x29, 0x0f, 0x25, 0x8e, 0xa2, 0x9a,
    0x2d, 0xa3, 0xc1, 0xe1, 0xb9, 0x0d, 0x74, 0x53, 0x62, 0xb1, 0x5a, 0x2a, 0x8f, 0xf8, 0x92,
    0x7f, 0x58, 0xaa, 0x60, 0x06, 0x80, 0x0c, 0x59, 0x8b, 0x19, 0xb4, 0xfd, 0x54, 0x6f, 0x94,
    0x32, 0x2d, 0x42, 0x1e, 0x31, 0x2f, 0xc6, 0xac, 0x8f, 0x1a, 0xfc, 0x7d, 0x95, 0x39, 0x19,
    0x42, 0x7d, 0x00, 0x47, 0x64, 0x4a, 0x55, 0xf1, 0x2d, 0x5f, 0x9b, 0xbb, 0x8b, 0xc8, 0x8d,
    0x4a, 0xd9, 0x61, 0xc6, 0xf2, 0xc2, 0xbe, 0x53, 0x48, 0xae, 0xf3, 0x54, 0xc6, 0x8e, 0x03,
    0xa4, 0xef, 0x3d, 0x1b, 0xcc, 0xc0, 0x12, 0x3b, 0xe2, 0x63, 0xfb, 0x27, 0x01, 0x33, 0x79,
    0x1e, 0x68, 0xf5, 0xe2, 0x96, 0x56, 0x07, 0x86, 0xba, 0xa6, 0xbc, 0x35, 0xf5, 0x77, 0xbf,
    0xfc, 0x26, 0xf9, 0x1b, 0x29, 0xd0, 0x8b, 0xba, 0x75, 0x25, 0x2d, 0x57, 0x49, 0xbb, 0x97,
    0xb5, 0x95, 0xc3, 0x89, 0xaa, 0xa7, 0x61, 0x40, 0x1a, 0xa0, 0x31, 0x57, 0xa6, 0xfa, 0xba,
    0xd1, 0x30, 0x23, 0x9a, 0x29, 0x84, 0xf3, 0x59, 0x77, 0x00, 0x18, 0x0d, 0xc5, 0x91, 0xcf,
    0xb5, 0xfe, 0xa2, 0xd6, 0x5f, 0xd4, 0x7a, 0xc2, 0x6f, 0x73, 0xa9, 0x75, 0x2f, 0xe4, 0x74,
    0xea, 0x9b, 0xc0, 0x51, 0xf3, 0xc6, 0xc9, 0xa5, 0xd6, 0xcb, 0x56, 0xdf, 0xc9, 0x00, 0xed,
    0x86, 0x45, 0xf7, 0x6c, 0xd0, 0x4b, 0x7c, 0x55, 0xde, 0x0c, 0x0b, 0xb8, 0x6d, 0x70, 0x96,
    0x8a, 0x2a, 0x4c, 0xe9, 0x83, 0xc7, 0xad, 0x62, 0x01, 0xde, 0xf4, 0x8d, 0x3f, 0x1f, 0x04,
    0x80, 0xdc, 0x0b, 0x6f, 0x61, 0x09, 0x76, 0x6a, 0x28, 0x09, 0x83, 0x22, 0x31, 0xa3, 0x81,
    0x1a, 0xc7, 0x88, 0x59, 0xbe, 0xc1, 0x54, 0xa2, 0x20, 0x10, 0x07, 0x77, 0x8b, 0x3b, 0x3c,
    0xbc, 0xf9, 0x79, 0xdd, 0x51, 0x47, 0xec, 0x91, 0x2c, 0x34, 0x55, 0xc5, 0x46, 0x4a, 0x99,
    0xf1, 0xd8, 0xc1, 0x65, 0xb4, 0x1c, 0x3b, 0x5d, 0x64, 0x0f, 0x37, 0x8e, 0x43, 0x09, 0x21,
    0xe5, 0x11, 0x21, 0x04, 0x29, 0x48, 0x89, 0x12, 0xaa, 0x6a, 0x72, 0x12, 0x33, 0xb6, 0x35,
    0x99, 0x97, 0xfa, 0xaa, 0xed, 0x72, 0x1e, 0x3f, 0x48, 0xd4, 0x55, 0x70, 0x7e, 0xb8, 0x73,
    0x2f, 0x2c, 0x91, 0x8c, 0xa8, 0xc3, 0x62, 0x89, 0xe1, 0x99, 0x4c, 0x37, 0xc6, 0x47, 0x7c,
    0x32, 0x83, 0xec, 0xd7, 0xc5, 0xb5, 0x34, 0x27, 0x62, 0xc2, 0x09, 0xe3, 0xd9, 0x60, 0x7f,
    0x16, 0x48, 0x7e, 0xe1, 0xf1, 0x62, 0x27, 0x51, 0x95, 0x64, 0x10, 0x27, 0x5d, 0x86, 0xc8,
    0xab, 0x9a, 0x0e, 0xbd, 0xe7, 0x49, 0x88, 0x91, 0xc4, 0x70, 0x80, 0x10, 0x21, 0x5e, 0x6c,
    0xd1, 0x2b, 0xaf, 0xed, 0xe1, 0xea, 0x55, 0x60, 0xbd, 0xc8, 0x01, 0x8c, 0x9e, 0x7a, 0x6f,
    0xab, 0x0d, 0x8d, 0xc0, 0x92, 0x80, 0xd9, 0xd3, 0x80, 0x47, 0x6f, 0x34, 0x1a, 0x24, 0xbe,
    0x6f, 0xc0, 0x43, 0xa5, 0x5c, 0x3a, 0x8f, 0xe6, 0xd2, 0xe5, 0xd2, 0x3e, 0x3c, 0xa0, 0xce,
    0x57, 0x69, 0xc6, 0xfc, 0x83, 0xb7, 0x60, 0x3a, 0xdb, 0xf9, 0x3f, 0x37, 0x55, 0x6d, 0x32,
    0xc5, 0x6f, 0x0c, 0xf6, 0xfd, 0xe4, 0x4c, 0x37, 0x25, 0x36, 0x44, 0xd0, 0x38, 0x1e, 0x06,
    0x4f, 0x36, 0x65, 0x1b, 0x21, 0xce, 0x05, 0xef, 0x0b, 0x56, 0x71, 0x24, 0x49, 0x68, 0xb6,
    0xb1, 0x2e, 0x14, 0xe3, 0x13, 0x65, 0xbb, 0xf7, 0x58, 0xd7, 0x0b, 0x69, 0x96, 0x40, 0xdd,
    0xc5, 0x02, 0x4f, 0x1f, 0xdd, 0x04, 0x66, 0x98, 0xf8, 0xf1, 0xcb, 0xdd, 0xe5, 0x25, 0xf2,
    0x83, 0xc1, 0x9c, 0xe6, 0x4b, 0x0f, 0x08, 0xc8, 0xb8, 0xf2, 0x21, 0xbe, 0x05, 0x11, 0x3c,
    0x8e, 0xea, 0x1b, 0xd6, 0x47, 0x1d, 0x92, 0x9b, 0x1f, 0x0c, 0x68, 0xb0, 0xee, 0x4e, 0xb3,
    0x0d, 0xd6, 0x6e, 0x5d, 0xb1, 0xe6, 0x8e, 0x3b, 0xe9, 0x9e, 0x4d, 0x9f, 0xe6, 0x85, 0x95,
    0x80, 0x5c, 0x3d, 0x39, 0x29, 0x34, 0x63, 0xfa, 0x1e, 0xf3, 0xe1, 0xda, 0x3a, 0xe4, 0x2b,
    0x14, 0xd8, 0x8d, 0xe9, 0xef, 0x20, 0x9a, 0x9b, 0xbd, 0x4d, 0xcd, 0x96, 0xcd, 0x5f, 0x8a,
    0xfe, 0xd0, 0x62, 0x6b, 0xbd, 0xbe, 0xdf, 0x93, 0xb7, 0xb0, 0x86, 0x08, 0x30, 0x96, 0x37,
    0x6f, 0xbd, 0xc0, 0xd0, 0xf6, 0x8f, 0x71, 0xc1, 0x84, 0xe2, 0x0f, 0xad, 0x15, 0x82, 0x2c,
    0x98, 0x97, 0x32, 0xc3, 0x81, 0xf2, 0x8e, 0xc6, 0x87, 0x36, 0x6c, 0x73, 0xee, 0x35, 0xb2,
    0x37, 0x56, 0xbd, 0x24, 0x7b, 0xc3, 0x9d, 0xcb, 0x8d, 0x74, 0x5e, 0x8d, 0x50, 0xee, 0xd0,
    0x19, 0xa5, 0xd5, 0x97, 0xee, 0xd6, 0x70, 0xb9, 0x05, 0xff, 0xfd, 0x26, 0x5c, 0x43, 0x11,
    0xd6, 0x4e, 0x69, 0xe0, 0x14, 0x1b, 0xb1, 0x98, 0x7f, 0xba, 0xf6, 0x4b, 0x34, 0x83, 0x20,
    0x9f, 0xf8, 0x3a, 0xd2, 0x0e, 0x58, 0x99, 0x55, 0x74, 0x13, 0xd3, 0xd4, 0xb1, 0x52, 0x6b,
    0x59, 0x8c, 0xb3, 0x5b, 0xc3, 0xd8, 0xdb, 0xea, 0x11, 0xd0, 0x12, 0x0d, 0xb0, 0x75, 0x5f,
    0x19, 0x49, 0x60, 0x6b, 0x2f, 0x43, 0x3d, 0x1e, 0x2f, 0x79, 0xe1, 0xea, 0x94, 0x97, 0x3d,
    0xae, 0x66, 0x87, 0xc3, 0xc6, 0x98, 0x5a, 0xa2, 0xc3, 0x56, 0x12, 0x53, 0x07, 0x02, 0x75,
    0x3c, 0xfd, 0x3c, 0x78, 0xfa, 0x92, 0x33, 0xb4, 0x4f, 0x61, 0x60, 0x68, 0x05, 0x1c, 0xd0,
    0x45, 0x9d, 0xab, 0x95, 0x29, 0xbb, 0x13, 0x1b, 0x2b, 0x2a, 0x9b, 0xaa, 0x67, 0x6c, 0x99,
    0x01, 0xc6, 0x96, 0x48, 0x6e, 0xe5, 0x54, 0xf8, 0xb2, 0xc0, 0xc6, 0x3d, 0xa5, 0xb1, 0x7a,
    0x5a, 0xc4, 0xd0, 0x17, 0x2e, 0x5e, 0x5f, 0x18, 0xfb, 0xc5, 0xb9, 0x46, 0x41, 0xbe, 0x1e,
    0xf9, 0x5a, 0x7b, 0x71, 0xab, 0x0b, 0xf2, 0xf4, 0x9e, 0xa8, 0xe4, 0x3d, 0x72, 0x9e, 0xcf,
    0x15, 0x24, 0xda, 0x8b, 0xdb, 0x1c, 0x01, 0xe2, 0x85, 0x6b, 0x9b, 0x75, 0x8e, 0x4f, 0xc5,
    0x4b, 0xda, 0x8b, 0x5b, 0x1c, 0x06, 0xe2, 0x30, 0x79, 0x76, 0xcf, 0x9c, 0x5f, 0x89, 0xfb,
    0xf5, 0x8b, 0xdb, 0x1b, 0x06, 0x66, 0x67, 0xc6, 0x7d, 0x15, 0x79, 0x7d, 0xf4, 0xea, 0x23,
    0x55, 0x67, 0xcf, 0xa4, 0xdf, 0x7c, 0x90, 0x9b, 0x19, 0xcb, 0x2c, 0xb6, 0x94, 0xbf, 0x36,
    0x9d, 0xbb, 0x0d, 0x65, 0xa9, 0x60, 0xc7, 0xc8, 0x46, 0xae, 0x57, 0xd3, 0xc0, 0x3a, 0xb4,
    0x82, 0xee, 0xd9, 0x21, 0x36, 0x5f, 0x39, 0xeb, 0x89, 0xab, 0xa8, 0xdd, 0x7b, 0x24, 0x99,
    0x45, 0xbb, 0xa8, 0x06, 0x7a, 0x6a, 0x2a, 0xa6, 0x17, 0x52, 0x00, 0x6b, 0x44, 0x37, 0xe4,
    0x6d, 0xb7, 0xa7, 0x69, 0x37, 0x67, 0x3d, 0xb1, 0xb7, 0xee, 0x72, 0x8c, 0x78, 0x46, 0x50,
    0xfc, 0x92, 0x35, 0x6b, 0xcd, 0xdf, 0x57, 0x2d, 0xdc, 0xa2, 0x18, 0x72, 0xad, 0xa2, 0x85,
    0x24, 0x45, 0x07, 0xa7, 0x18, 0x94, 0x0f, 0x8a, 0xad, 0x7c, 0xc2, 0x86, 0x8a, 0xad, 0x90,
    0xae, 0xbe, 0x53, 0xd8, 0x67, 0xfa, 0xc0, 0x0c, 0xfa, 0x6d, 0xf0, 0x22, 0x4c, 0x04, 0x48,
    0x0b, 0xc5, 0x50, 0xd9, 0xbd, 0xb5, 0xbd, 0xb0, 0x4c, 0x67, 0xbe, 0x40, 0xea, 0x86, 0x6e,
    0x7a, 0xf6, 0x7e, 0xdf, 0x13, 0x99, 0x5b, 0xea, 0xd0, 0x9e, 0x0e, 0xce, 0xf6, 0x8c, 0xcf,
    0x95, 0x3a, 0x7b, 0x6f, 0x7b, 0xc6, 0x67, 0xe2, 0xbb, 0x60, 0x8b, 0x91, 0xb4, 0xb8, 0xd2,
    0x2a, 0xe9, 0xb8, 0xd6, 0xc8, 0xa8, 0x67, 0x65, 0xbf, 0x17, 0x6a, 0x95, 0xc4, 0xfa, 0xcb,
    0xcd, 0x8f, 0x9a, 0x45, 0xec, 0xa4, 0x06, 0x14, 0x2f, 0x66, 0xa8, 0x3c, 0xe6, 0x11, 0xdf,
    0x72, 0xe6, 0x39, 0xb7, 0x26, 0x9a, 0x6d, 0x81, 0x06, 0xaa, 0x88, 0x8b, 0xd2, 0xb9, 0x44,
    0x56, 0x2c, 0x55, 0x54, 0x2c, 0xb0, 0x19, 0x09, 0x18, 0xf0, 0xbf, 0x99, 0x31, 0x3b, 0x26,
    0x8a, 0x2f, 0xac, 0x59, 0x1a, 0x6b, 0x4a, 0x24, 0xea, 0x73, 0xd6, 0x8c, 0x4d, 0x24, 0xd9,
    0x29, 0xe3, 0xc3, 0xe3, 0x5e, 0x78, 0x72, 0xfb, 0x8b, 0xda, 0x3a, 0x52, 0x87, 0x1c, 0x90,
    0xc7, 0x0b, 0xcf, 0x14, 0x47, 0xb7, 0xb1, 0x1a, 0xec, 0x49, 0xe8, 0x66, 0x05, 0x36, 0x76,
    0xcf, 0x04, 0xaa, 0x3a, 0x4f, 0x2a, 0xe8, 0xe5, 0x94, 0x9e, 0x2e, 0xdd, 0x2f, 0x69, 0x30,
    0x62, 0xcd, 0xbb, 0x51, 0x31, 0xcf, 0x74, 0x1a, 0xe4, 0xf8, 0xcd, 0x70, 0x96, 0x93, 0xcc,
    0xf0, 0x63, 0x29, 0xd0, 0x7a, 0x15, 0x80, 0x26, 0x14, 0x05, 0x39, 0xd0, 0xfa, 0x15, 0x80,
    0xb6, 0x3b, 0xcb, 0xbc, 0xdf, 0x8d, 0x97, 0x67, 0xfb, 0xca, 0x41, 0x4a, 0xc6, 0x0e, 0xbd,
    0x68, 0xbf, 0x2b, 0xbe, 0x9f, 0x8e, 0x49, 0x9c, 0x4c, 0x07, 0xcb, 0xb8, 0x3c, 0xd5, 0xe8,
    0x34, 0x81, 0x48, 0x89, 0xa8, 0x5d, 0x4c, 0x08, 0x65, 0x10, 0x19, 0x15, 0xb1, 0x43, 0x47,
    0xcc, 0xd0, 0xb1, 0x88, 0x9a, 0xdd, 0xa1, 0x09, 0x52, 0x69, 0xdd, 0x56, 0x3f, 0xe0, 0x25,
    0x1f, 0x94, 0x4a, 0xf4, 0xf0, 0x5c, 0xc8, 0x63, 0x08, 0x5c, 0x92, 0x41, 0xdd, 0x00, 0xfa,
    0x56, 0x1e, 0x31, 0xc4, 0x90, 0x5e, 0xbf, 0x41, 0x6f, 0xff, 0x07, 0x3a, 0x37, 0x10, 0x4f,
    0xf9, 0x84, 0x67, 0x68, 0xad, 0xd1, 0x07, 0x26, 0xac, 0x91, 0xfb, 0x93, 0x46, 0xe8, 0xe6,
    0x8a, 0x66, 0x26, 0xbf, 0x4e, 0x7b, 0x82, 0x49, 0x54, 0xe8, 0xb5, 0x66, 0x7f, 0xcf, 0x9f,
    0xf0, 0x5b, 0x87, 0x60, 0xf5, 0x1f, 0x6f, 0x1e, 0x8c, 0xde, 0x09, 0x0a, 0x2f, 0x7d, 0x6f,
    0x7c, 0x75, 0x18, 0x34, 0xb5, 0x5d, 0x7e, 0x66, 0x99, 0x4b, 0xfa, 0x55, 0xba, 0x22, 0xe6,
    0x32, 0x30, 0x7d, 0x81, 0x6d, 0xc2, 0x72, 0xaa, 0xb9, 0x36, 0xe8, 0x5e, 0x08, 0xff, 0x00,
    0x78, 0xab, 0x50, 0xdf, 0xd9, 0x3d, 0x5c, 0x53, 0x24, 0xb0, 0x18, 0x52, 0x91, 0xd2, 0x89,
    0x54, 0x74, 0x29, 0x8c, 0xf8, 0x43, 0x8b, 0x2f, 0xf5, 0x86, 0x75, 0x8c, 0x07, 0xce, 0xb8,
    0xb5, 0xbf, 0x27, 0x48, 0x55, 0xe0, 0x4a, 0xcf, 0x74, 0x58, 0x37, 0xde, 0xb9, 0x89, 0x14,
    0x32, 0xda, 0x3f, 0x6a, 0xbf, 0x1f, 0x1d, 0x76, 0xc5, 0xf1, 0x6d, 0x8f, 0xa1, 0xcb, 0x2e,
    0xba, 0x58, 0x68, 0xba, 0xea, 0xb3, 0x76, 0x3b, 0xca, 0x7a, 0xf7, 0x84, 0x6a, 0x12, 0xaa,
    0xa0, 0x86, 0x4a, 0x6f, 0x4e, 0x10, 0x56, 0x4a, 0x55, 0x75, 0x9d, 0x8d, 0xa8, 0xa1, 0x54,
    0xb1, 0xb2, 0x30, 0xc5, 0x32, 0xf5, 0x36, 0x99, 0xd2, 0x28, 0x62, 0x26, 0x54, 0x7f, 0x2d,
    0x0c, 0xa9, 0x09, 0xc0, 0xb6, 0xbd, 0x41, 0x13, 0x13, 0x8c, 0x18, 0x9a, 0x46, 0x92, 0x03,
    0x6c, 0x14, 0xf8, 0xae, 0x8c, 0x86, 0x0d, 0x03, 0xbd, 0x9b, 0x8a, 0x0d, 0x83, 0x6b, 0xb3,
    0x82, 0x5b, 0x8f, 0x1b, 0x12, 0x33, 0x1e, 0x8e, 0xfe, 0x74, 0x88, 0xfd, 0x70, 0x84, 0xcc,
    0x84, 0xb1, 0xbe, 0x59, 0xc0, 0x17, 0x3b, 0xb3, 0xfa, 0x8b, 0xa7, 0x1d, 0x59, 0xc7, 0xc3,
    0xf7, 0xe4, 0x3d, 0xb1, 0x42, 0x27, 0x79, 0x33, 0x6d, 0xc2, 0x45, 0x7d, 0x47, 0x40, 0xd7,
    0xbb, 0xe6, 0x8e, 0x79, 0x03, 0x27, 0x68, 0xff, 0xe7, 0x8a, 0x4e, 0x83, 0x29, 0xf4, 0xf4,
    0x79, 0x36, 0x8e, 0xbd, 0x76, 0x47, 0x7b, 0x1a, 0x66, 0x69, 0xcd, 0x66, 0xb9, 0x4b, 0x0a,
    0x28, 0x2a, 0xd2, 0x54, 0x1c, 0x0d, 0x47, 0x8b, 0x99, 0xb8, 0xb8, 0x42, 0x4e, 0x65, 0xe5,
    0xf6, 0xbb, 0x32, 0xbd, 0x19, 0x18, 0x3e, 0xe2, 0xbe, 0x4f, 0x92, 0xda, 0x4b, 0xd1, 0x0d,
    0x1f, 0x98, 0x13, 0x14, 0x05, 0xfd, 0xaf, 0x61, 0xda, 0xd4, 0x80, 0xad, 0x95, 0x0d, 0xe8,
    0xb5, 0xf2, 0x97, 0x69, 0x3e, 0x1c, 0x1d, 0x73, 0xaf, 0x56, 0x51, 0x37, 0x9e, 0x4b, 0xaa,
    0x65, 0xb5, 0x32, 0x21, 0x85, 0x4b, 0x2d, 0x8c, 0xfd, 0x92, 0x4f, 0x3d, 0x12, 0xa4, 0x19,
    0x4d, 0xa3, 0x00, 0x1d, 0x92, 0xdc, 0x04, 0xb6, 0xd6, 0x31, 0x1e, 0x61, 0x3a, 0x91, 0x85,
    0xe8, 0xaa, 0xf1, 0xbd, 0x0d, 0xa3, 0x19, 0x20, 0x95, 0x0f, 0x1b, 0xc8, 0xc3, 0x5f, 0x2b,
    0xc0, 0x9f, 0xbb, 0x96, 0x8e, 0x6c, 0x17, 0xfe, 0xb2, 0x1a, 0xee, 0xca, 0xc7, 0x45, 0x3c,
    0x13, 0x7a, 0x11, 0x1f, 0xe9, 0x32, 0x25, 0x3a, 0x11, 0x1b, 0xd3, 0xb1, 0xd0, 0xf6, 0x23,
    0xb0, 0x7b, 0x1f, 0x01, 0xb9, 0x91, 0xa0, 0xd6, 0xf8, 0xa6, 0x4b, 0xf7, 0x2b, 0xd8, 0x36,
    0x46, 0x00, 0x87, 0x3e, 0x2d, 0xd5, 0x06, 0x74, 0x3b, 0x49, 0x33, 0x4e, 0x81, 0x22, 0x05,
    0x15, 0x47, 0x10, 0x3a, 0xf7, 0x54, 0x16, 0x1b, 0xd5, 0x5c, 0x58, 0x00, 0xbc, 0x9d, 0xdd,
    0xde, 0x5f, 0xde, 0x5c, 0xff, 0x71, 0x9e, 0xe8, 0xf7, 0xec, 0x0a, 0xeb, 0x7b, 0x80, 0x15,
    0xce, 0x2c, 0xd7, 0x31, 0x55, 0xa5, 0x66, 0xd9, 0x00, 0xbf, 0xcf, 0x67, 0x4a, 0x18, 0x3b,
    0x79, 0xbf, 0xc2, 0x76, 0xec, 0x31, 0xc3, 0x0e, 0x8e, 0x29, 0x5a, 0x5b, 0xca, 0x0a, 0xec,
    0x89, 0xfa, 0x6f, 0xa5, 0xc8, 0x40, 0x65, 0x4d, 0xdb, 0x05, 0xa2, 0x70, 0x9a, 0x15, 0x1a,
    0x03, 0xae, 0x9a, 0x4e, 0xed, 0x61, 0xb4, 0xaf, 0xb1, 0xae, 0x1f, 0xa3, 0x0d, 0x56, 0x16,
    0x68, 0xca, 0x4f, 0xc5, 0xe1, 0xf4, 0x6a, 0x4d, 0xb9, 0xd0, 0x84, 0x58, 0x74, 0x15, 0xee,
    0xfd, 0xac, 0x90, 0x6b, 0x73, 0x3b, 0xa4, 0xea, 0xe4, 0xbd, 0x42, 0x70, 0x1e, 0xb1, 0x2a,
    0xca, 0x53, 0x00, 0xd8, 0xa1, 0x05, 0xf8, 0xfa, 0xbd, 0x78, 0x7b, 0x13, 0xef, 0xfb, 0xe1,
    0xc3, 0xa7, 0x64, 0xc5, 0xdb, 0x76, 0x1d, 0x65, 0xe0, 0xa9, 0xa1, 0x5b, 0xab, 0xaa, 0x2e,
    0xc4, 0x95, 0xee, 0xb0, 0xcd, 0xd6, 0x48, 0x8f, 0xfb, 0xbb, 0x1c, 0x02, 0x34, 0xe1, 0xf2,
    0x93, 0x10, 0xd4, 0x27, 0x7c, 0xde, 0xbe, 0x0e, 0x4e, 0xfe, 0xfa, 0xf1, 0xda, 0x81, 0xad,
    0x8c, 0xec, 0x59, 0x5a, 0x04, 0xb3, 0x19, 0xa7, 0x91, 0x49, 0x32, 0xc9, 0x77, 0x2c, 0xe7,
    0x87, 0xe0, 0xd0, 0x7a, 0xa1, 0x4d, 0x17, 0xd4, 0xf9, 0x07, 0x00, 0x09, 0xbf, 0xf8, 0x51,
    0xf6, 0xbe, 0xfb, 0x84, 0xdc, 0x65, 0x4c, 0x70, 0x7f, 0x01, 0x56, 0x49, 0x1e, 0xe7, 0x2b,
    0xa3, 0xf9, 0x7b, 0x8c, 0x29, 0x2a, 0x1f, 0x66, 0x33, 0xcc, 0x68, 0xc1, 0x9f, 0xb2, 0xcf,
    0x3c, 0xc0, 0x66, 0x38, 0x10, 0x2b, 0x6a, 0x97, 0xa1, 0x3e, 0xe1, 0xff, 0x72, 0x34, 0x2b,
    0xa2, 0xa9, 0xe6, 0x0e, 0xfc, 0x70, 0xb1, 0x2d, 0x2e, 0x15, 0x84, 0x62, 0xb8, 0xdc, 0x28,
    0xa8, 0xa0, 0xab, 0x17, 0xcb, 0xe9, 0x97, 0x5a, 0xe7, 0x06, 0xc2, 0xdf, 0x14, 0x28, 0xdc,
    0xa5, 0x9a, 0xf4, 0x7c, 0x6d, 0x20, 0x1f, 0x76, 0x7f, 0xfe, 0x67, 0x46, 0xd9, 0x66, 0x23,
    0x12, 0x5f, 0x59, 0x1a, 0x30, 0xd3, 0xc9, 0x23, 0x81, 0x04, 0xbd, 0xe2, 0x5a, 0xd7, 0x74,
    0xa6, 0xee, 0x2d, 0xf6, 0x57, 0x1b, 0x29, 0x77, 0xef, 0x06, 0x71, 0xbd, 0x98, 0x59, 0xcb,
    0x34, 0x14, 0x87, 0x02, 0x5d, 0xcd, 0x75, 0xe3, 0x05, 0xfd, 0x0a, 0x86, 0x02, 0x33, 0x33,
    0x85, 0x59, 0xbe, 0x99, 0x25, 0x0e, 0x9f, 0x21, 0xeb, 0x23, 0x56, 0xda, 0x70, 0x1c, 0x7d,
    0x6a, 0xaa, 0x6f, 0xbe, 0x84, 0xef, 0xc3, 0xd5, 0xaf, 0xe2, 0x03, 0xbc, 0x47, 0xf6, 0x73,
    0xdc, 0xd0, 0x70, 0x24, 0x65, 0xfb, 0x39, 0x13, 0x41, 0x5c, 0x48, 0xe2, 0x13, 0x81, 0xf5,
    0x6e, 0x56, 0x2c, 0x85, 0x57, 0xb5, 0x59, 0x82, 0x98, 0xd0, 0x30, 0x7c, 0xb7, 0x09, 0x67,
    0x34, 0x65, 0x69, 0x1a, 0xea, 0xa5, 0x41, 0xf5, 0x95, 0xc6, 0x26, 0xfa, 0xc2, 0x91, 0xf1,
    0xfc, 0x84, 0xf5, 0x96, 0x4e, 0xb0, 0x14, 0x43, 0x5c, 0xbf, 0xf7, 0xdf, 0xeb, 0x64, 0xc4,
    0x72, 0x00, 0xfc, 0x9c, 0x8f, 0x04, 0x14, 0x87, 0xe2, 0x33, 0xc1, 0xc4, 0xc3, 0x5c, 0x33,
    0xd0, 0x18, 0x25, 0xd9, 0xe1, 0xf3, 0x4a, 0x53, 0xf7, 0x4b, 0x60, 0x92, 0xa0, 0x16, 0x1e,
    0xf3, 0x48, 0xa0, 0x87, 0xc7, 0x26, 0x24, 0x31, 0x2b, 0x42, 0x93, 0x0f, 0x13, 0xcf, 0x5b,
    0xfb, 0xe2, 0xe2, 0xb7, 0x59, 0x10, 0x7b, 0x2d, 0x91, 0xc8, 0x3b, 0x3c, 0xa5, 0x1f, 0xec,
    0x48, 0x26, 0x82, 0x7d, 0x38, 0x32, 0x19, 0xbf, 0x40, 0x4f, 0x97, 0xc9, 0x6c, 0x54, 0x3c,
    0xa1, 0x94, 0xe8, 0xe4, 0x1b, 0x42, 0x5f, 0x4b, 0xa4, 0xf2, 0xde, 0x5c, 0xed, 0x97, 0x3c,
    0x00, 0x2e, 0x24, 0x89, 0x59, 0x46, 0x66, 0x17, 0x6d, 0xd6, 0xa4, 0x24, 0x0f, 0xf2, 0x58,
    0x34, 0x24, 0x3e, 0x6f, 0x19, 0x1e, 0x88, 0x03, 0x48, 0xb6, 0x8b, 0xb8, 0x86, 0xa4, 0xd7,
    0x8b, 0xa4, 0x4b, 0x5c, 0xf8, 0x87, 0xdc, 0x3b, 0xd3, 0xb1, 0x0a, 0x0e, 0x81, 0x0a, 0xd4,
    0xb1, 0x20, 0x1f, 0x61, 0x4b, 0x42, 0x7c, 0x76, 0x7b, 0x96, 0x66, 0xa1, 0x3f, 0x35, 0x08,
    0x7a, 0x8b, 0x78, 0x55, 0x92, 0x9b, 0xd1, 0x39, 0x87, 0x00, 0xee, 0xc6, 0x74, 0x20, 0x65,
    0x01, 0xbf, 0xff, 0xe1, 0x75, 0x91, 0xba, 0x21, 0xbf, 0x97, 0x0d, 0x1b, 0xae, 0x62, 0x38,
    0xfe, 0xce, 0x31, 0x54, 0x3c, 0xd3, 0xa0, 0x3a, 0x0a, 0xc6, 0xc0, 0xb0, 0xb4, 0x51, 0x28,
    0x70, 0xab, 0xa5, 0xbc, 0x48, 0x41, 0x10, 0x68, 0xa9, 0xeb, 0xae, 0x4c, 0xbc, 0xc6, 0x84,
    0xe2, 0x42, 0xa1, 0x4c, 0x37, 0x59, 0x0a, 0x50, 0x19, 0x29, 0x66, 0x49, 0xfb, 0xf2, 0x22,
    0x60, 0x90, 0xd7, 0xd7, 0xca, 0xe2, 0x98, 0xa7, 0x52, 0x29, 0x88, 0x12, 0x54, 0x87, 0xec,
    0x95, 0x02, 0xa3, 0x58, 0x04, 0x2d, 0x35, 0x02, 0x45, 0x20, 0xff, 0x78, 0x93, 0x99, 0xec,
    0x19, 0x6f, 0xbe, 0x33, 0x97, 0x18, 0xfd, 0x4a, 0x57, 0x04, 0x46, 0xe4, 0x82, 0x43, 0x8e,
    0x52, 0xd9, 0x4c, 0xf0, 0xff, 0xd9, 0x2e, 0xd5, 0x31, 0x94, 0xf0, 0xc9, 0x19, 0xdc, 0xb0,
    0xf9, 0xf0, 0x56, 0xa8, 0x7a, 0xe5, 0x60, 0x02, 0x5f, 0x29, 0xe1, 0xcf, 0xbd, 0xe1, 0xc8,
    0x65, 0x15, 0x60, 0x48, 0xc8, 0x59, 0xe7, 0x59, 0xc0, 0xad, 0xe5, 0x4d, 0x71, 0x1f, 0x5d,
    0x77, 0xac, 0x57, 0x4a, 0x5b, 0x59, 0x33, 0xa9, 0x34, 0xa5, 0x8c, 0xcb, 0x11, 0x91, 0xf9,
    0xaf, 0x4d, 0xfb, 0xc6, 0x6d, 0x99, 0xe6, 0x76, 0xc8, 0x2e, 0x56, 0xfb, 0x55, 0xc8, 0x33,
    0x84, 0x26, 0xe0, 0x0e, 0x1f, 0x44, 0x5a, 0x4f, 0xb7, 0x37, 0x8e, 0x27, 0xb6, 0xee, 0x7d,
    0x36, 0x99, 0x19, 0x5d, 0xd3, 0x05, 0xd4, 0x7d, 0xba, 0x84, 0xf5, 0xdc, 0x4d, 0x7e, 0x2b,
    0x7a, 0x7e, 0x97, 0x86, 0x46, 0x06, 0x5e, 0xc7, 0x57, 0x62, 0x4f, 0x14, 0x33, 0x0e, 0xa9,
    0xf6, 0xfb, 0x96, 0x8f, 0x52, 0xb4, 0x7f, 0xeb, 0x49, 0xd6, 0x11, 0x6b, 0x51, 0xb7, 0xcb,
    0x15, 0x63, 0xcf, 0x04, 0x52, 0xbd, 0xb4, 0xf5, 0x12, 0xe1, 0x58, 0x7c, 0x51, 0xb8, 0x12,
    0x44, 0x0b, 0x1a, 0x55, 0x25, 0xaa, 0xe6, 0x2c, 0xab, 0xf2, 0x09, 0x4f, 0xcd, 0xb9, 0x41,
    0xf5, 0xb9, 0xb1, 0x39, 0x27, 0x37, 0x5b, 0xbb, 0x5b, 0x85, 0x6d, 0x49, 0x3e, 0x6d, 0xc1,
    0xdf, 0xf5, 0xce, 0x06, 0x3f, 0x50, 0xcf, 0x89, 0xd5, 0xbc, 0x58, 0x1e, 0x4c, 0xe8, 0x01,
    0xb2, 0x1f, 0x8e, 0x10, 0x94, 0x45, 0x1a, 0xdb, 0x53, 0x96, 0x37, 0x6d, 0x53, 0xea, 0x88,
    0xb1, 0xcb, 0x83, 0xb3, 0x59, 0xfd, 0xe1, 0xe1, 0x0d, 0xc3, 0xa5, 0x9b, 0x92, 0x70, 0x23,
    0xc1, 0x69, 0x61, 0xfb, 0xf4, 0x87, 0xe5, 0xa6, 0x16, 0x46, 0x73, 0x32, 0xd8, 0x53, 0x92,
    0x2a, 0xa1, 0x65, 0x5e, 0xc4, 0x40, 0x1d, 0x4b, 0x42, 0x93, 0x96, 0x21, 0xc2, 0x9e, 0xda,
    0xc3, 0x69, 0xc5, 0xd0, 0x26, 0xd6, 0xa7, 0x97, 0x07, 0x70, 0x01, 0x17, 0x20, 0x5b, 0x71,
    0x68, 0x89, 0x54, 0xf5, 0x39, 0x75, 0xf8, 0x00, 0x90, 0xe2, 0xad, 0x18, 0xa2, 0x51, 0x30,
    0x20, 0x3e, 0x63, 0x58, 0x61, 0x11, 0x08, 0xf8, 0xf9, 0xfe, 0x8e, 0xbe, 0x10, 0x51, 0x81,
    0x8a, 0x0f, 0x5d, 0xda, 0x70, 0xe4, 0x83, 0x0e, 0x08, 0xb6, 0xa2, 0x19, 0x0f, 0xc6, 0xd2,
    0x6d, 0x0d, 0x32, 0x1b, 0x41, 0x6a, 0x40, 0x5b, 0xaa, 0xc8, 0xff, 0x08, 0x04, 0x61, 0x6e,
    0xab, 0x05, 0x39, 0x79, 0xa0, 0x8f, 0x5e, 0xc5, 0x3f, 0xa7, 0x1a, 0x15, 0x23, 0x82, 0xe1,
    0x28, 0xdb, 0x9c, 0x6c, 0x40, 0xdd, 0xe2, 0xe5, 0xca, 0xde, 0xb0, 0xf5, 0xd2, 0xe7, 0x17,
    0x68, 0x81, 0x6e, 0x50, 0xb1, 0xff, 0x8c, 0x2d, 0xfc, 0x3d, 0xdf, 0x09, 0xbb, 0x16, 0x64,
    0x25, 0xef, 0x47, 0x4a, 0x91, 0x87, 0xf1, 0xbd, 0x6f, 0xca, 0x5b, 0xf5, 0xe1, 0x4f, 0x51,
    0xa5, 0xb5, 0x81, 0x8e, 0x72, 0x13, 0x6b, 0xbc, 0x44, 0x45, 0xc8, 0xa0, 0xcc, 0xe4, 0x40,
    0x62, 0x66, 0x69, 0xd8, 0x50, 0xf5, 0x0d, 0x54, 0x97, 0x62, 0x16, 0x4f, 0x85, 0x6b, 0x02,
    0xe5, 0xd1, 0x4c, 0x3e, 0xdf, 0x9a, 0x6e, 0x59, 0xe3, 0x45, 0xbc, 0x14, 0x47, 0xc4, 0x34,
    0xe3, 0x54, 0xb6, 0xde, 0xce, 0xd1, 0xb9, 0x1b, 0x87, 0xe0, 0xf1, 0x52, 0x4c, 0xfd, 0x8f,
    0x49, 0x29, 0xfd, 0x68, 0x98, 0x6b, 0x82, 0xe0, 0x5f, 0x68, 0x1d, 0x9c, 0x2c, 0x2d, 0xc5,
    0x51, 0x66, 0xfa, 0x09, 0x40, 0x45, 0xc9, 0x90, 0x95, 0x68, 0x91, 0xd2, 0xa8, 0x14, 0xa4,
    0x44, 0x87, 0x36, 0x86, 0xd8, 0xdd, 0xcd, 0x51, 0x22, 0x5d, 0xa3, 0x18, 0x81, 0x4e, 0x5b,
    0x03, 0x6e, 0xf7, 0x02, 0xf6, 0x52, 0x0a, 0xb8, 0x38, 0x3e, 0x11, 0x02, 0x13, 0x27, 0x9c,
    0x0a, 0x77, 0xcf, 0xde, 0xca, 0xed, 0x4f, 0xee, 0x3b, 0xe4, 0xf5, 0x75, 0x89, 0x4e, 0xb5,
    0x2f, 0x91, 0xea, 0x7b, 0x2a, 0xdd, 0x51, 0x7d, 0xfd, 0xff, 0xfd, 0xbf, 0x3f, 0x9b, 0xba,
    0x6a, 0x0f, 0x25, 0x19, 0x8e, 0xed, 0x8b, 0x39, 0x76, 0x41, 0xe1, 0x92, 0xaa, 0xb2, 0x8e,
    0xe1, 0x54, 0xeb, 0x68, 0xd8, 0x17, 0xe0, 0xdd, 0x51, 0xeb, 0x74, 0x3e, 0xa1, 0x6a, 0xe7,
    0x62, 0x69, 0x0a, 0x15, 0xdc, 0xf3, 0x99, 0x1d, 0x48, 0x83, 0x6e, 0x2e, 0x86, 0x25, 0x05,
    0xbe, 0xd9, 0x18, 0xe1, 0x01, 0x61, 0x90, 0x70, 0xc7, 0xb3, 0xf7, 0x07, 0x84, 0x81, 0x04,
    0x6f, 0x3d, 0x69, 0xd5, 0x23, 0x75, 0xf1, 0xd3, 0x82, 0x99, 0x94, 0xcd, 0xcf, 0x9e, 0xa8,
    0xd5, 0x95, 0x74, 0xcf, 0xd9, 0xc5, 0x68, 0x14, 0x87, 0x85, 0x41, 0x89, 0x2d, 0xf7, 0xe4,
    0x37, 0xd2, 0xf9, 0x2c, 0x0a, 0x78, 0x99, 0x5a, 0x3e, 0x57, 0x57, 0xab, 0x54, 0x08, 0xb3,
    0x9e, 0x94, 0xb6, 0x48, 0x55, 0x85, 0xc1, 0xea, 0x9a, 0xe6, 0x34, 0x5e, 0x10, 0x8a, 0x1a,
    0x9b, 0x38, 0x3d, 0xe6, 0xf2, 0x47, 0xd7, 0x1f, 0xfd, 0x44, 0x8f, 0x2d, 0xe6, 0xf2, 0x27,
    0x60, 0x7a, 0x0e, 0x31, 0x7d, 0xb3, 0x1d, 0xcf, 0x6a, 0xa9, 0x54, 0x49, 0x0e, 0xce, 0x92,
    0xbb, 0xd4, 0xd6, 0x30, 0x13, 0xdc, 0x84, 0x05, 0x75, 0x97, 0xcd, 0xda, 0x3b, 0x2d, 0x0e,
    0xe2, 0xce, 0x5e, 0x0c, 0xb2, 0xc8, 0x65, 0x9d, 0x37, 0xcb, 0x07, 0x7e, 0x9f, 0x58, 0x52,
    0x13, 0x78, 0xbf, 0xa3, 0xd2, 0xe9, 0x34, 0xf3, 0xe6, 0x55, 0x7b, 0x05, 0xcf, 0x16, 0x63,
    0xf7, 0x54, 0x54, 0xfb, 0x1c, 0xc8, 0xc1, 0x99, 0xb8, 0xb6, 0xd3, 0xc0, 0xdf, 0xa2, 0xe9,
    0x41, 0x32, 0x06, 0x84, 0x93, 0x0b, 0x25, 0xef, 0xf6, 0xb7, 0x15, 0xcd, 0x66, 0x7c, 0xf4,
    0x0d, 0x1d, 0xab, 0x60, 0x8c, 0x2b, 0x62, 0x68, 0x0b, 0xf4, 0x41, 0x23, 0x2b, 0x6c, 0x90,
    0x86, 0x63, 0x89, 0x15, 0x71, 0x18, 0x8a, 0x9a, 0x55, 0x5b, 0x0d, 0x9a, 0xad, 0x66, 0x66,
    0x4a, 0xf4, 0xbc, 0x63, 0x1c, 0x0c, 0xf3, 0xe0, 0xe6, 0xd8, 0xfa, 0x55, 0x7b, 0xc4, 0xa1,
    0x61, 0xec, 0xd1, 0xe2, 0x6d, 0x62, 0xcf, 0x75, 0x1d, 0xa6, 0xb3, 0x91, 0x6d, 0xef, 0x29,
    0xa8, 0x54, 0x00, 0xab, 0xed, 0xee, 0x5b, 0xb7, 0xd6, 0x11, 0x2b, 0x1d, 0x4e, 0x08, 0x1e,
    0xae, 0x8a, 0x0e, 0x7c, 0xf5, 0x12, 0xa8, 0x90, 0xaa, 0x6b, 0xc2, 0x02, 0x9c, 0xa6, 0x6b,
    0x85, 0xe0, 0xdf, 0xbc, 0xa4, 0xc1, 0x9f, 0x15, 0xb2, 0x60, 0x17, 0x86, 0xcd, 0x65, 0x6d,
    0x02, 0x74, 0x70, 0x67, 0xdc, 0xd1, 0xa0, 0xb4, 0x4b, 0xb0, 0x40, 0x24, 0xf5, 0x37, 0xb7,
    0xfd, 0x74, 0x81, 0xa7, 0x8f, 0x3c, 0xd0, 0xe9, 0xe7, 0x84, 0xbe, 0x83, 0x14, 0x51, 0xb4,
    0x38, 0xe5, 0x3d, 0xf3, 0xc9, 0x83, 0x01, 0x01, 0xf5, 0x09, 0x86, 0xd0, 0x2a, 0xb6, 0x58,
    0x7b, 0x98, 0xbb, 0x8c, 0x08, 0xf5, 0x82, 0xe0, 0x33, 0xfe, 0x14, 0x6f, 0x92, 0x62, 0x28,
    0xfd, 0xc0, 0xd4, 0x54, 0x31, 0xac, 0xff, 0xcb, 0x5d, 0x29, 0x83, 0xab, 0x3d, 0x8f, 0xe4,
    0x30, 0xf5, 0x57, 0xa4, 0xcd, 0xd0, 0xd7, 0x47, 0xbc, 0xf9, 0xca, 0x32, 0x69, 0xdd, 0x44,
    0xcd, 0x40, 0x5f, 0xe9, 0x39, 0x95, 0x7c, 0xad, 0xdd, 0x41, 0xa1, 0x24, 0x12, 0xdf, 0xb7,
    0x26, 0x26, 0xff, 0x89, 0x37, 0x1f, 0xbf, 0xc5, 0x12, 0x17, 0x77, 0x3c, 0xaa, 0xe7, 0x3a,
    0x4a, 0xcb, 0xcf, 0x8d, 0xdb, 0xd1, 0x32, 0xb2, 0xc4, 0x6e, 0x67, 0x74, 0x4a, 0xa2, 0xfa,
    0x63, 0x4a, 0x74, 0xe1, 0xc4, 0x63, 0xb3, 0x6b, 0xb4, 0x7b, 0xe9, 0x42, 0xf1, 0x05, 0x23,
    0x72, 0x6a, 0xa3, 0x07, 0x96, 0xaa, 0xdc, 0x7d, 0x38, 0x72, 0x43, 0xe7, 0x5c, 0x48, 0x1b,
    0x84, 0x91, 0x4c, 0xe2, 0x09, 0x85, 0xf4, 0x92, 0x5c, 0x3b, 0x91, 0x2b, 0x94, 0xfc, 0x34,
    0xcc, 0x87, 0x93, 0x98, 0x0e, 0x27, 0x31, 0x1b, 0x2e, 0x16, 0x12, 0x42, 0x99, 0x73, 0xe1,
    0x19, 0xb4, 0x9d, 0x3c, 0xd3, 0x6b, 0x9e, 0x67, 0x86, 0x72, 0x3c, 0xd3, 0xbb, 0x24, 0xbe,
    0x7a, 0x61, 0x1c, 0x79, 0xf7, 0x2e, 0xcd, 0x51, 0xca, 0xe9, 0xe9, 0x79, 0x86, 0xa1, 0x6d,
    0x6d, 0x22, 0x78, 0x63, 0xde, 0x5a, 0xe5, 0x25, 0x64, 0xdd, 0x51, 0x3f, 0x3e, 0xa2, 0x46,
    0x8e, 0x18, 0xb8, 0xcf, 0xb9, 0x82, 0x8c, 0x62, 0x50, 0xb6, 0xdd, 0x4c, 0x64, 0x02, 0x5b,
    0x13, 0xaf, 0x52, 0x74, 0xf3, 0xe1, 0x12, 0x61, 0x20, 0x8e, 0x9f, 0x72, 0x7c, 0xb7, 0x67,
    0xd8, 0xc7, 0x00, 0x36, 0x8b, 0xe7, 0x31, 0x15, 0xd2, 0x4b, 0x31, 0x48, 0xaa, 0x3b, 0x99,
    0x75, 0x50, 0xd9, 0xc3, 0x5e, 0x7a, 0xbd, 0xc4, 0xf7, 0xbc, 0x0c, 0x7b, 0x49, 0x84, 0xb1,
    0xc3, 0x5e, 0xba, 0xf1, 0x26, 0x3e, 0x6d, 0x8e, 0x98, 0x4a, 0x74, 0x16, 0xef, 0x89, 0xbd,
    0xf9, 0xf1, 0x2d, 0x19, 0x42, 0xbb, 0xcf, 0x13, 0x4f, 0x65, 0xc6, 0xe0, 0xc8, 0xcc, 0xa8,
    0xcd, 0xac, 0x95, 0xd6, 0x30, 0x9f, 0xc4, 0xec, 0xa0, 0x96, 0x0e, 0x4d, 0x09, 0xb2, 0x7a,
    0xb1, 0x29, 0x65, 0x19, 0xca, 0xda, 0x07, 0x9f, 0xf4, 0x93, 0x62, 0xab, 0x3b, 0xcd, 0x3d,
    0x81, 0x25, 0xcb, 0x1a, 0x63, 0x52, 0xfc, 0xd5, 0x52, 0x03, 0x49, 0x62, 0x84, 0x92, 0xe0,
    0x96, 0x76, 0x43, 0x49, 0x00, 0xb1, 0xfc, 0x73, 0xa2, 0x80, 0xf5, 0x06, 0x31, 0x30, 0x93,
    0xfd, 0x5c, 0x1a, 0x8b, 0x48, 0x28, 0x5b, 0x89, 0x0b, 0xb9, 0x26, 0x47, 0x88, 0x50, 0xaa,
    0x96, 0x8d, 0x55, 0xe8, 0x4a, 0xd5, 0xf8, 0xd1, 0x23, 0x02, 0x49, 0x2b, 0x8f, 0x1e, 0xe9,
    0x50, 0xdf, 0x29, 0x19, 0x76, 0x47, 0x89, 0xaf, 0xca, 0x7b, 0xfa, 0x20, 0xce, 0x74, 0x8a,
    0x8c, 0xb1, 0x4a, 0xba, 0x0c, 0xf0, 0x7f, 0xae, 0xc8, 0xa7, 0x17, 0x06, 0x9c, 0xb6, 0x83,
    0x13, 0x95, 0x49, 0x1a, 0x33, 0xec, 0xb3, 0x4b, 0x2b, 0x15, 0xc1, 0x08, 0xb2, 0x4f, 0x9a,
    0x48, 0x62, 0x8d, 0xe2, 0x8d, 0xe1, 0x85, 0xba, 0x02, 0xea, 0x53, 0x08, 0xe4, 0x70, 0x58,
    0xfd, 0xbb, 0xf4, 0x4d, 0x4d, 0xfb, 0x0c, 0x65, 0x0a, 0xa0, 0x0d, 0x84, 0x55, 0x4f, 0x87,
    0xa3, 0xb9, 0xc4, 0x70, 0x1e, 0xaa, 0xe1, 0x94, 0x12, 0x84, 0x53, 0x89, 0x3b, 0x16, 0xca,
    0xcb, 0x92, 0xa5, 0xe0, 0xd9, 0x45, 0x4c, 0xc7, 0x72, 0x57, 0x59, 0x35, 0xfb, 0x25, 0x5c,
    0x8a, 0xfb, 0x24, 0x53, 0x87, 0xd8, 0xe6, 0x32, 0x02, 0x2a, 0x25, 0x07, 0x5f, 0x1f, 0x96,
    0x44, 0x27, 0x3b, 0x07, 0x45, 0x95, 0xd0, 0x76, 0x07, 0xbb, 0xf9, 0x32, 0x89, 0xb0, 0x67,
    0x9f, 0x70, 0xf1, 0xd6, 0x68, 0x20, 0xb6, 0x1b, 0x28, 0x0b, 0x79, 0x89, 0xc4, 0x0a, 0x61,
    0x7d, 0x24, 0xb6, 0x57, 0x5a, 0xf2, 0x6a, 0x0a, 0x6f, 0x0b, 0xb8, 0x3b, 0x76, 0x43, 0xdd,
    0xa8, 0x5a, 0xb7, 0x2f, 0x76, 0xdb, 0xf2, 0xc4, 0x74, 0x13, 0xb5, 0xc7, 0xee, 0xce, 0x6f,
    0xe8, 0x6e, 0x20, 0x2e, 0x2c, 0xd1, 0xb2, 0xbe, 0x45, 0x81, 0xe1, 0x83, 0x13, 0x85, 0x9e,
    0x22, 0xbc, 0xbd, 0x11, 0x66, 0x8e, 0xf1, 0xc2, 0xd1, 0xe5, 0xa6, 0xfd, 0x8e, 0xfa, 0xc7,
    0x27, 0x8c, 0xda, 0xdb, 0x31, 0x2c, 0xdd, 0xa0, 0x40, 0x94, 0x15, 0xde, 0x6e, 0xcf, 0x16,
    0xc3, 0xe4, 0x01, 0xae, 0x11, 0x88, 0x46, 0x85, 0xe1, 0xf1, 0xa6, 0x85, 0xa6, 0xa9, 0xb0,
    0xb7, 0x1b, 0xbf, 0xd2, 0x89, 0x92, 0xa6, 0x9e, 0xa0, 0xfa, 0xf3, 0xf2, 0x13, 0xba, 0xe2,
    0x7e, 0x8d, 0x86, 0xe7, 0x7f, 0xa2, 0x6b, 0x5c, 0x61, 0x4e, 0xf9, 0xe6, 0x42, 0xf3, 0x61,
    0xaa, 0x0b, 0xcb, 0xc7, 0x20, 0xa9, 0x25, 0x10, 0x3d, 0x1c, 0xd6, 0x90, 0x5e, 0x12, 0x95,
    0xc0, 0x40, 0xcc, 0xe9, 0x14, 0xaf, 0x6c, 0x82, 0x14, 0x6f, 0x86, 0x2f, 0xf4, 0x66, 0xa2,
    0x85, 0x42, 0xe3, 0x69, 0x59, 0x33, 0x29, 0xcb, 0xab, 0x70, 0x8d, 0x3e, 0x1a, 0x98, 0xb5,
    0x7b, 0x2a, 0xf4, 0xf0, 0x54, 0xdc, 0x19, 0x8e, 0x0f, 0x24, 0x56, 0xef, 0x4d, 0x06, 0x68,
    0x42, 0x12, 0x35, 0x32, 0xd2, 0xd9, 0x7f, 0x20, 0x47, 0x2d, 0x49, 0x78, 0xfa, 0x6f, 0xe4,
    0x95, 0x55, 0x6c, 0x64, 0x0d, 0x7d, 0x4c, 0x9c, 0x99, 0x1c, 0x87, 0xa0, 0x89, 0x9a, 0x6a,
    0xf9, 0xe4, 0x46, 0x4d, 0xdd, 0xa9, 0xd2, 0x11, 0xf6, 0x24, 0x0d, 0x31, 0xdf, 0x48, 0xee,
    0xe7, 0x02, 0x7b, 0x9d, 0x3a, 0xa4, 0xf5, 0x59, 0x72, 0xa1, 0xc4, 0xf0, 0xd9, 0x76, 0xb0,
    0xb4, 0x20, 0x65, 0x67, 0xba, 0x87, 0x23, 0x8f, 0xfd, 0x42, 0xc2, 0xe2, 0xb2, 0xdf, 0xbf,
    0xcf, 0x7e, 0xe2, 0x54, 0x2a, 0x60, 0x3f, 0x06, 0x6a, 0x42, 0xd0, 0x70, 0x27, 0xb6, 0x9b,
    0x74, 0x28, 0xfb, 0xf5, 0x6e, 0x83, 0x66, 0x33, 0x74, 0x4e, 0x85, 0xfc, 0x57, 0x7a, 0xeb,
    0x14, 0x0f, 0xe5, 0xd0, 0xef, 0x8a, 0x87, 0xa7, 0xe2, 0xab, 0x1b, 0x2e, 0x1a, 0xbf, 0x6a,
    0xc9, 0xa2, 0x23, 0x8f, 0x33, 0x27, 0x53, 0x27, 0xb2, 0x0b, 0xc7, 0xf0, 0x17, 0xcd, 0x5e,
    0x50, 0x97, 0xd8, 0x6b, 0xba, 0x43, 0x76, 0x74, 0x6e, 0xdd, 0xa6, 0x74, 0xf5, 0x5e, 0x1f,
    0x4f, 0x8c, 0xa1, 0x3e, 0x7e, 0x04, 0xf3, 0x0e, 0x9c, 0x30, 0xe4, 0xc1, 0x6b, 0x6e, 0x4c,
    0x40, 0x1b, 0x98, 0x36, 0xb3, 0xa2, 0xa0, 0x41, 0xcd, 0x99, 0x82, 0xb8, 0x6f, 0x28, 0xd3,
    0xf3, 0xa7, 0x48, 0x67, 0xbf, 0xf2, 0x8e, 0x93, 0xa2, 0x3e, 0x96, 0x7e, 0x25, 0x4a, 0xfc,
    0x19, 0x03, 0xaa, 0x9a, 0x73, 0xa4, 0x8a, 0x67, 0x8a, 0xa3, 0xc3, 0x17, 0x8e, 0xd6, 0xa6,
    0x47, 0xad, 0xe4, 0x8e, 0x13, 0xc8, 0x31, 0x82, 0x6d, 0x78, 0xed, 0x4b, 0xdd, 0xce, 0x89,
    0x0d, 0x22, 0x97, 0x69, 0xf3, 0x27, 0x33, 0x2b, 0x1e, 0xfe, 0x2e, 0x33, 0xe0, 0x59, 0xe8,
    0xe9, 0xb6, 0x1f, 0x3d, 0x77, 0xe6, 0x6c, 0x6b, 0xcd, 0x35, 0x65, 0x89, 0x43, 0x72, 0x70,
    0x4d, 0x7f, 0x50, 0xd0, 0x7e, 0x54, 0x32, 0x48, 0xd9, 0xa0, 0xbe, 0x78, 0x6e, 0xda, 0x04,
    0x94, 0x9c, 0x1e, 0x7d, 0x4b, 0x70, 0x81, 0x92, 0x5a, 0x59, 0xb1, 0x27, 0x76, 0xf3, 0x82,
    0xbd, 0xb1, 0x1a, 0xf1, 0x80, 0xca, 0x98, 0x3a, 0x10, 0x17, 0x9e, 0x14, 0x79, 0xbf, 0x3c,
    0x4c, 0x63, 0xb3, 0x34, 0x1d, 0x72, 0x49, 0x89, 0xcb, 0x4a, 0x86, 0x19, 0x57, 0xdc, 0x5a,
    0x93, 0xa6, 0x56, 0x26, 0xfe, 0xc9, 0x66, 0xf7, 0x0b, 0x66, 0xc6, 0x95, 0xa3, 0x0f, 0xfa,
    0x2b, 0x1e, 0x70, 0xc8, 0xb7, 0x91, 0x48, 0x0b, 0xc1, 0xe9, 0x1e, 0x00, 0x0c, 0xe4, 0xf5,
    0x42, 0x6b, 0xea, 0x8e, 0x40, 0x4f, 0x65, 0xdd, 0x24, 0xd0, 0xd7, 0x83, 0xb7, 0x27, 0xf6,
    0xac, 0x62, 0x2a, 0xd1, 0x96, 0x22, 0x3d, 0x0d, 0x4e, 0x88, 0x9e, 0xf2, 0x8d, 0xb9, 0x70,
    0x5c, 0xaf, 0x13, 0x2f, 0xcd, 0x15, 0xaa, 0x8d, 0x5a, 0xf2, 0x95, 0x2a, 0x1a, 0x5a, 0xd5,
    0x8a, 0xcf, 0x55, 0x2b, 0x4e, 0x90, 0x73, 0x12, 0xbe, 0x22, 0x67, 0xcf, 0x14, 0x3f, 0x10,
    0x89, 0x5f, 0xe4, 0x44, 0xbc, 0xd7, 0x74, 0xe8, 0x88, 0x2f, 0x72, 0x7d, 0x3a, 0xc4, 0xd3,
    0xd9, 0x73, 0x25, 0xd0, 0xc2, 0x17, 0x49, 0x7d, 0xe3, 0xd3, 0xe5, 0x4a, 0x2e, 0x4c, 0x91,
    0x2f, 0x85, 0x72, 0x2e, 0x54, 0x9f, 0x61, 0x60, 0x9a, 0x72, 0x9a, 0xd2, 0xe0, 0x69, 0x42,
    0xf5, 0x76, 0x18, 0xd6, 0xb5, 0xd7, 0xe2, 0x21, 0x91, 0xe7, 0x40, 0x8d, 0xd4, 0xa4, 0xa0,
    0x94, 0xee, 0x2b, 0x08, 0x79, 0xe6, 0x39, 0xa7, 0x1d, 0x53, 0xaa, 0x8a, 0x83, 0x2a, 0x4f,
    0xc1, 0x53, 0x15, 0xe7, 0xa5, 0x00, 0xcd, 0xa0, 0xad, 0xe9, 0xad, 0x33, 0xd1, 0xb5, 0xe9,
    0xb9, 0xf7, 0xa5, 0xeb, 0x9d, 0x24, 0x78, 0xea, 0xd7, 0x3b, 0xdd, 0xd3, 0xd3, 0xf4, 0xce,
    0x42, 0x30, 0x5b, 0xc3, 0xea, 0x55, 0x25, 0xd1, 0x9f, 0x8a, 0x75, 0x94, 0x52, 0xeb, 0x9d,
    0xe5, 0x7b, 0x98, 0x43, 0xd2, 0x18, 0xdf, 0xbe, 0x0f, 0x4e, 0x41, 0xa9, 0xd1, 0x3a, 0x0e,
    0xcf, 0xcc, 0x3a, 0x0e, 0x64, 0xaa, 0xf3, 0x43, 0x5c, 0x94, 0x61, 0xb1, 0x18, 0xd5, 0xb2,
    0xea, 0x13, 0x5d, 0xa9, 0xe6, 0xc3, 0xeb, 0xbd, 0xf2, 0x88, 0xf9, 0xfd, 0x94, 0x39, 0xf9,
    0x9a, 0x93, 0xf9, 0xa1, 0x0c, 0x77, 0x56, 0x9e, 0xcf, 0x54, 0x52, 0x07, 0xcf, 0xc0, 0x2e,
    0x60, 0xcf, 0xce, 0x0e, 0x59, 0x10, 0x7b, 0xcd, 0x9e, 0x1d, 0xf1, 0xd5, 0xf1, 0xc6, 0x74,
    0x7b, 0xea, 0xac, 0x15, 0x8f, 0x58, 0x4d, 0xe2, 0xb3, 0x97, 0xd2, 0x3d, 0xbe, 0x74, 0xbd,
    0x79, 0xb0, 0xd8, 0xbc, 0xb5, 0x20, 0xc7, 0xa5, 0x89, 0xd6, 0x85, 0x69, 0x4c, 0xa9, 0xc3,
    0xdb, 0x29, 0x62, 0x88, 0xbe, 0x8f, 0xc8, 0x85, 0x75, 0x12, 0x36, 0xd2, 0x88, 0x11, 0xd8,
    0x2d, 0xee, 0x5e, 0x4b, 0x59, 0x57, 0x9c, 0x1d, 0xd4, 0x22, 0x29, 0xab, 0x40, 0xc8, 0x12,
    0x2f, 0x4d, 0xd8, 0x3e, 0xe0, 0x95, 0x85, 0xd9, 0x54, 0xb5, 0x72, 0xfc, 0x7b, 0xd5, 0x5f,
    0xbe, 0xe2, 0x10, 0xac, 0x63, 0x12, 0x08, 0xac, 0x86, 0x64, 0x2e, 0xc8, 0x31, 0x81, 0xef,
    0x48, 0x56, 0x12, 0xd4, 0xe5, 0x8b, 0x96, 0x20, 0x81, 0xf6, 0x6c, 0x87, 0x8b, 0x95, 0x5d,
    0x35, 0x83, 0x08, 0x25, 0xd8, 0x7a, 0xd2, 0xa6, 0x54, 0x3f, 0x19, 0x26, 0x5a, 0x39, 0xd6,
    0x24, 0xf1, 0xd9, 0x79, 0xd9, 0x68, 0x0d, 0x01, 0x2c, 0x46, 0x4a, 0x1e, 0xc4, 0x84, 0x90,
    0x66, 0x65, 0x52, 0x36, 0xbd, 0xab, 0xba, 0x4c, 0x0e, 0xe2, 0x7d, 0x6a, 0x3a, 0xba, 0x0a,
    0x5f, 0xf9, 0xb5, 0x52, 0x4b, 0x71, 0x2e, 0x31, 0x2f, 0xb7, 0xa5, 0x25, 0x30, 0x97, 0xc1,
    0x2e, 0x2d, 0x88, 0x34, 0x24, 0x83, 0x53, 0xbb, 0x8a, 0x89, 0xa7, 0x54, 0xec, 0xab, 0xe5,
    0xaa, 0x66, 0x2c, 0x53, 0x65, 0x08, 0x28, 0xb8, 0xc7, 0x31, 0x18, 0xa9, 0x22, 0x83, 0x7d,
    0x04, 0xac, 0x43, 0x85, 0x3b, 0xc5, 0xbe, 0x15, 0xba, 0x20, 0x19, 0xa0, 0x26, 0xc2, 0x8e,
    0xf4, 0x24, 0x2b, 0x31, 0x9c, 0xad, 0xe1, 0xf9, 0x46, 0x3a, 0x7b, 0x9c, 0x4a, 0xb4, 0x20,
    0x2d, 0x7c, 0x1f, 0x1f, 0x97, 0x98, 0xc2, 0xf2, 0x99, 0xcd, 0xd1, 0x85, 0xad, 0xd1, 0x77,
    0xb2, 0xe8, 0xb1, 0x9a, 0x62, 0x59, 0xca, 0x46, 0xea, 0x46, 0xe6, 0xb8, 0x41, 0x3a, 0x57,
    0xa4, 0x45, 0xec, 0xe8, 0xac, 0xb8, 0x14, 0xd4, 0x1b, 0x65, 0xf6, 0xca, 0xe6, 0xca, 0x51,
    0x4d, 0x15, 0x26, 0x26, 0x6c, 0xa3, 0x76, 0xc7, 0xa7, 0xdb, 0xad, 0x25, 0xfd, 0xe4, 0xf0,
    0xe0, 0x7b, 0xa9, 0x2f, 0xdc, 0xc9, 0x87, 0xaa, 0xb9, 0x4b, 0xd4, 0xe1, 0xd1, 0x63, 0x7f,
    0xde, 0x7a, 0x09, 0x8a, 0x5a, 0xcd, 0xf1, 0xd7, 0x8f, 0x4f, 0x18, 0x12, 0xee, 0xbc, 0x77,
    0x96, 0x1d, 0x8b, 0x09, 0x4b, 0xda, 0xf3, 0xd3, 0xf2, 0x90, 0xbd, 0xd0, 0x48, 0xce, 0xcb,
    0xc0, 0x7e, 0xfc, 0xa7, 0xd2, 0x86, 0xd4, 0xca, 0xa5, 0x6c, 0xfe, 0x5e, 0xbe, 0x5e, 0x84,
    0x39, 0x3a, 0x8c, 0xda, 0x4c, 0xeb, 0x86, 0x53, 0x87, 0x5e, 0xdc, 0x75, 0x7e, 0xed, 0x4c,
    0xf0, 0x1a, 0xeb, 0x7a, 0xb9, 0x45, 0x79, 0x29, 0x28, 0x09, 0xa2, 0x45, 0x42, 0xef, 0x79,
    0x35, 0x94, 0x19, 0x53, 0x9a, 0x1f, 0xb6, 0x85, 0xf8, 0xe8, 0x1c, 0xcd, 0x4d, 0x53, 0x9d,
    0x30, 0x9a, 0x40, 0x98, 0x95, 0x82, 0x52, 0xca, 0x0c, 0x39, 0xa0, 0xa4, 0xbb, 0x70, 0xed,
    0xec, 0x8a, 0x6f, 0xc8, 0x5c, 0xd0, 0x5a, 0x97, 0xe1, 0x14, 0xd0, 0x2f, 0x02, 0x95, 0x1a,
    0x78, 0xdd, 0xd8, 0xd9, 0x36, 0x0d, 0x20, 0xa1, 0x82, 0xcc, 0x31, 0x28, 0xb8, 0xbd, 0xca,
    0x1f, 0xbf, 0x7f, 0x8e, 0x52, 0x33, 0x79, 0x36, 0x79, 0x02, 0x69, 0x7d, 0x1f, 0xc9, 0xcf,
    0xc3, 0xea, 0xfb, 0xcd, 0xb9, 0x2b, 0xde, 0x55, 0xf6, 0x39, 0x4e, 0x36, 0xa3, 0xca, 0x9a,
    0x54, 0xb9, 0x30, 0xac, 0x7f, 0xd7, 0xeb, 0x75, 0x90, 0x07, 0x8a, 0x97, 0xf9, 0x0e, 0x82,
    0x65, 0x37, 0x65, 0x76, 0xd6, 0x40, 0x2c, 0xa4, 0x37, 0x88, 0x9b, 0x42, 0x9f, 0x7a, 0xb9,
    0x7e, 0xd6, 0x71, 0x91, 0xde, 0x40, 0x1c, 0x76, 0x05, 0x04, 0xfd, 0x68, 0xf1, 0x51, 0xca,
    0xe9, 0xd6, 0x55, 0x1f, 0xab, 0xfd, 0xd7, 0xde, 0x2f, 0x14, 0xfb, 0x6e, 0x01, 0x57, 0x31,
    0xa6, 0xfd, 0x1e, 0x9f, 0x7f, 0x50, 0x6c, 0xe5, 0x3e, 0xfc, 0xf2, 0x9a, 0xfc, 0x53, 0xa8,
    0x98, 0x2f, 0x22, 0x5e, 0x28, 0x4c, 0x82, 0x45, 0xd0, 0xb7, 0x05, 0x6d, 0x39, 0xea, 0x18,
    0x36, 0x1b, 0xbe, 0xaa, 0x91, 0xff, 0x72, 0x14, 0x5d, 0x9b, 0x69, 0x58, 0xe5, 0xe5, 0x24,
    0x4a, 0xac, 0x82, 0xbc, 0x02, 0x53, 0xfa, 0xc1, 0x54, 0x71, 0x08, 0x66, 0x5f, 0x30, 0x16,
    0x0c, 0x9b, 0xf8, 0x85, 0x27, 0xdb, 0x77, 0xb0, 0x09, 0xb4, 0x1a, 0x5c, 0x00, 0xda, 0x81,
    0xe7, 0x13, 0xe4, 0x54, 0x3c, 0xe6, 0x51, 0xfb, 0xfe, 0x6a, 0x50, 0x9a, 0x7b, 0xe5, 0xfa,
    0x15, 0xea, 0x72, 0x91, 0x3e, 0xe8, 0x27, 0x0c, 0x39, 0x8f, 0xeb, 0x03, 0xf1, 0xd6, 0x9f,
    0x36, 0xe8, 0x0f, 0xc4, 0xfe, 0x17, 0x4b, 0x6e, 0xfd, 0xbc, 0x53, 0x36, 0x72, 0x39, 0x6a,
    0x18, 0xce, 0x6b, 0x60, 0xdd, 0x9c, 0xeb, 0x94, 0x0c, 0x4e, 0x13, 0x97, 0x02, 0x9d, 0xc3,
    0x26, 0x94, 0x8b, 0xff, 0x4a, 0x94, 0x6a, 0x3d, 0x69, 0x44, 0x0b, 0xf5, 0x15, 0xc9, 0x70,
    0x93, 0x29, 0x29, 0xc5, 0x86, 0x57, 0x3e, 0x9e, 0xdb, 0xc0, 0x85, 0x1e, 0x34, 0x4d, 0x68,
    0xfe, 0x0e, 0x5d, 0x7a, 0xf7, 0x99, 0x09, 0xfb, 0x7d, 0x99, 0x51, 0xe6, 0xee, 0x6d, 0x52,
    0x2e, 0x8c, 0x51, 0xf2, 0x79, 0x5b, 0x25, 0x89, 0x3e, 0xc7, 0xbb, 0x95, 0xc7, 0x94, 0x67,
    0xbc, 0xc6, 0x24, 0x9c, 0x72, 0xe7, 0x5e, 0x33, 0x8f, 0xe6, 0xce, 0x7c, 0xdd, 0xd3, 0x21,
    0x21, 0x04, 0x8f, 0xf4, 0x1b, 0x65, 0x1e, 0xf4, 0x1a, 0x9a, 0xba, 0x4d, 0x1c, 0x4d, 0x57,
    0x45, 0xde, 0x20, 0xd5, 0x64, 0x8e, 0xa4, 0x85, 0x09, 0x1b, 0x75, 0xed, 0x85, 0x9b, 0x03,
    0x48, 0x34, 0xc3, 0xed, 0x3e, 0x22, 0x97, 0xf3, 0x2a, 0x85, 0x93, 0x26, 0x4e, 0x8b, 0x7e,
    0xfe, 0x99, 0xe8, 0xa7, 0x5e, 0x4f, 0x9c, 0x03, 0xb2, 0xc0, 0xba, 0x6e, 0x16, 0x4f, 0x81,
    0xcc, 0xd2, 0x8d, 0x80, 0x91, 0x26, 0x7d, 0xfc, 0x1d, 0x12, 0x37, 0xdf, 0xa1, 0x7f, 0x47,
    0x77, 0xb2, 0x00, 0xe9, 0xc5, 0x01, 0xc9, 0xec, 0x91, 0x2f, 0x0f, 0x68, 0x52, 0xcf, 0xa8,
    0x99, 0xba, 0x52, 0xe2, 0x22, 0xa5, 0x7f, 0x6e, 0x83, 0x06, 0xa2, 0x0d, 0xce, 0x48, 0x00,
    0xfa, 0xe5, 0x7d, 0x78, 0x96, 0x11, 0xda, 0x13, 0x82, 0xf9, 0x9c, 0x8d, 0xed, 0xf0, 0x4c,
    0xbd, 0xe1, 0x4d, 0xf2, 0x64, 0x8c, 0xbd, 0x1e, 0x1e, 0x5e, 0x15, 0x46, 0xe5, 0x46, 0xc6,
    0xb1, 0x34, 0x1b, 0x57, 0x81, 0xd2, 0x5c, 0x7e, 0xcc, 0x56, 0x1e, 0x58, 0x3e, 0x19, 0x09,
    0x37, 0xb5, 0x43, 0xa1, 0x6c, 0x21, 0xdb, 0x39, 0x60, 0x15, 0x10, 0xfb, 0x98, 0x76, 0xae,
    0x4b, 0x8d, 0xe3, 0xed, 0xeb, 0x45, 0x5a, 0x2a, 0x61, 0xef, 0xad, 0x51, 0x57, 0x15, 0xc9,
    0x58, 0x1c, 0xa1, 0x9e, 0x99, 0x66, 0x6e, 0x99, 0x29, 0x94, 0x1c, 0xf1, 0xcb, 0xdd, 0xe5,
    0xa0, 0x7b, 0xea, 0xf6, 0x52, 0x6d, 0x4e, 0x42, 0x22, 0x70, 0xe4, 0x91, 0x07, 0xf7, 0xab,
    0x4c, 0x1d, 0xa6, 0x1e, 0xde, 0xcc, 0xe0, 0xff, 0x2b, 0x94, 0x07, 0x6c, 0x29, 0xc4, 0xa1,
    0x8d, 0x94, 0x39, 0xaf, 0x87, 0x53, 0xa7, 0x96, 0xbc, 0xd1, 0xd0, 0x66, 0xc5, 0xde, 0xf9,
    0x09, 0x30, 0xe7, 0x9e, 0xd9, 0x45, 0x09, 0x04, 0x88, 0x73, 0x38, 0x27, 0xca, 0x5f, 0x52,
    0x93, 0x34, 0x19, 0x68, 0x8d, 0x5e, 0x2c, 0xd9, 0x8d, 0x93, 0x40, 0xae, 0x54, 0x2f, 0xab,
    0x67, 0x0b, 0xa4, 0xea, 0x9c, 0xa6, 0xf5, 0x67, 0x0c, 0xa0, 0xba, 0x95, 0x5f, 0x42, 0x2a,
    0xe1, 0x2a, 0xbf, 0xbe, 0xf8, 0x88, 0x01, 0x06, 0x3d, 0x87, 0xec, 0xa7, 0xd3, 0xef, 0xf9,
    0x81, 0xbe, 0x58, 0xc3, 0x2e, 0x14, 0xf2, 0xc9, 0x34, 0xed, 0xdc, 0x3a, 0xa0, 0xd0, 0x4c,
    0xcb, 0x5f, 0xe8, 0x8f, 0x83, 0xb3, 0xd3, 0x8f, 0xdf, 0x9a, 0xbe, 0xc2, 0x8b, 0x02, 0x52,
    0xd0, 0x0f, 0x33, 0x32, 0x58, 0xa2, 0xb0, 0x49, 0x22, 0xb3, 0xd7, 0x1a, 0x6c, 0xf6, 0xea,
    0xe7, 0x40, 0x1a, 0x9d, 0xbd, 0x6c, 0x7c, 0x8e, 0x47, 0x0d, 0xa3, 0x91, 0x02, 0x50, 0x37,
    0x46, 0x22, 0xec, 0x51, 0x98, 0xd2, 0x90, 0x76, 0xc5, 0x35, 0xdb, 0x0d, 0x6b, 0x98, 0xe1,
    0x7d, 0x6f, 0x0c, 0x83, 0x89, 0xd0, 0x34, 0x71, 0xe7, 0x70, 0x96, 0x51, 0xad, 0x97, 0x0d,
    0x6b, 0xac, 0x56, 0x55, 0xb7, 0x13, 0x63, 0x89, 0x2b, 0xfc, 0xfa, 0x6f, 0xf4, 0xae, 0x61,
    0x65, 0xd6, 0x70, 0x15, 0xe2, 0xe3, 0x44, 0x68, 0xf2, 0x9c, 0xf0, 0x53, 0x1a, 0xd1, 0xc5,
    0xa9, 0x1a, 0x73, 0x55, 0xce, 0xd2, 0x47, 0xd3, 0x0b, 0xf6, 0x7b, 0xe8, 0x22, 0x71, 0x2a,
    0xbe, 0x61, 0x52, 0xae, 0x38, 0xec, 0x57, 0x4c, 0x41, 0x12, 0x8b, 0xe2, 0x60, 0xfb, 0xb4,
    0xa5, 0xc2, 0x55, 0x7c, 0x20, 0x8a, 0xbb, 0xa9, 0x48, 0xa5, 0x04, 0xe4, 0x2d, 0x90, 0x14,
    0xa5, 0x3c, 0x62, 0x04, 0x76, 0x9f, 0xa7, 0x8e, 0x12, 0xd6, 0xc0, 0x84, 0xb0, 0xb9, 0x23,
    0xa4, 0xf4, 0x0d, 0xf4, 0xb4, 0xd2, 0xb1, 0x8a, 0x4c, 0xc3, 0xed, 0x79, 0x45, 0x58, 0x83,
    0x6d, 0xd6, 0xa9, 0xdc, 0xdd, 0x7f, 0xc2, 0x46, 0xeb, 0x57, 0x31, 0xbd, 0x61, 0x42, 0x5e,
    0xbe, 0x1e, 0xa5, 0xa5, 0xfa, 0x5d, 0x0d, 0x25, 0x42, 0x69, 0x6b, 0x85, 0xdc, 0xe1, 0xc8,
    0xaf, 0x58, 0xc9, 0x4c, 0xc2, 0x11, 0x70, 0x87, 0x9a, 0x99, 0x2c, 0x96, 0x39, 0x70, 0x85,
    0xe9, 0x26, 0x97, 0x79, 0x5f, 0x7f, 0x94, 0x2e, 0x9c, 0x88, 0x50, 0xab, 0xb6, 0xba, 0x58,
    0xe9, 0x23, 0xe1, 0xaa, 0xca, 0xcf, 0x46, 0xa2, 0x67, 0x16, 0x47, 0xb7, 0x79, 0x32, 0xfc,
    0x13, 0x9e, 0x0b, 0x35, 0x9a, 0x9a, 0x2a, 0x46, 0x73, 0x5e, 0x9f, 0x03, 0x65, 0xa2, 0xa6,
    0x51, 0x96, 0xd2, 0x37, 0x72, 0x2a, 0x2b, 0xbc, 0xd3, 0x06, 0xd4, 0xd5, 0x69, 0x3f, 0x69,
    0xf5, 0x01, 0xab, 0xab, 0xd3, 0xbe, 0xb8, 0x56, 0xd3, 0x4f, 0xd9, 0x91, 0x53, 0x58, 0x99,
    0x3e, 0x35, 0x56, 0x00, 0x46, 0xb8, 0x29, 0x4d, 0xbc, 0xdc, 0x0e, 0x2d, 0x81, 0x46, 0xe8,
    0xde, 0x20, 0x26, 0x42, 0xd3, 0xc0, 0xd1, 0x60, 0x98, 0x50, 0xda, 0xec, 0x63, 0x36, 0x1b,
    0xd6, 0x58, 0x8a, 0x26, 0x92, 0x63, 0x87, 0x12, 0x7d, 0xb3, 0x88, 0x33, 0xa5, 0x4e, 0x9c,
    0x57, 0x9b, 0x12, 0xe3, 0xbc, 0xad, 0xe9, 0x1b, 0xdf, 0x82, 0x86, 0xf1, 0xc3, 0xe1, 0xf3,
    0xa7, 0x43, 0x37, 0x2c, 0x6e, 0x02, 0xdf, 0xc6, 0x2a, 0xee, 0xc4, 0x60, 0x89, 0x98, 0xb9,
    0x8c, 0xbb, 0xc7, 0x20, 0x69, 0x82, 0xbd, 0x47, 0xcf, 0xeb, 0xd0, 0x45, 0x37, 0x2c, 0xd6,
    0x53, 0x4d, 0x31, 0xdb, 0xce, 0xdf, 0xe9, 0x17, 0x21, 0xc9, 0x65, 0xfd, 0x75, 0x9e, 0x05,
    0xf2, 0x9d, 0x7a, 0x8b, 0xc1, 0x82, 0x78, 0xc6, 0x96, 0x5c, 0x30, 0x22, 0xbb, 0x2b, 0x41,
    0x3d, 0x06, 0x7a, 0xb5, 0xe8, 0xfd, 0x50, 0x53, 0x90, 0x10, 0xb6, 0x4a, 0xe9, 0x08, 0xe2,
    0xc6, 0x56, 0x78, 0x40, 0x39, 0xfa, 0x86, 0x32, 0x85, 0x4f, 0xa2, 0x47, 0x88, 0xc4, 0xf4,
    0x03, 0x7f, 0x2b, 0x35, 0xda, 0x51, 0xc6, 0xc0, 0xe8, 0x14, 0x96, 0x4c, 0x95, 0x3f, 0x06,
    0xdc, 0xbc, 0x8d, 0x4f, 0xab, 0xba, 0x8e, 0x4c, 0x96, 0x3b, 0x9f, 0xda, 0x88, 0x38, 0x13,
    0x7e, 0x09, 0xa6, 0xdf, 0x2a, 0xe8, 0xd1, 0x30, 0xd7, 0x06, 0xef, 0xc7, 0x84, 0xd6, 0x0b,
    0xba, 0xd8, 0xf6, 0x63, 0xda, 0x61, 0xf6, 0x44, 0x78, 0x7f, 0x0d, 0x9c, 0xbc, 0x07, 0xa7,
    0x84, 0xc3, 0x2d, 0xad, 0x92, 0xa1, 0x7b, 0xce, 0x27, 0x0d, 0x8a, 0x30, 0x71, 0xa0, 0xb1,
    0x44, 0x5c, 0x97, 0x59, 0xdd, 0x49, 0xf7, 0x8d, 0x39, 0x61, 0x61, 0x30, 0xea, 0xe7, 0xe6,
    0xc2, 0xf8, 0xed, 0x43, 0x76, 0xc0, 0x46, 0x12, 0x29, 0x8e, 0xe6, 0xc4, 0x56, 0x34, 0x23,
    0x12, 0xf6, 0xc4, 0xae, 0x03, 0x22, 0x93, 0x3b, 0x19, 0x7d, 0x30, 0xa9, 0x4f, 0xa5, 0x84,
    0xcd, 0x19, 0x50, 0xb9, 0xed, 0x43, 0x32, 0x0f, 0x3d, 0x67, 0x9d, 0x33, 0x1a, 0x88, 0x83,
    0x5c, 0x7d, 0xc0, 0xfd, 0x81, 0x8c, 0xe6, 0xc9, 0xa2, 0xe4, 0x75, 0x11, 0x45, 0x74, 0xc7,
    0x53, 0x41, 0xb4, 0x83, 0xd8, 0x41, 0xde, 0xca, 0x52, 0x42, 0x51, 0x10, 0xca, 0x57, 0x43,
    0xb6, 0xad, 0x83, 0xfa, 0xb3, 0x58, 0xc3, 0xd8, 0x09, 0xbd, 0x5b, 0xbc, 0xbf, 0x3c, 0x7b,
    0xee, 0x73, 0x28, 0xd1, 0xd6, 0x53, 0xbe, 0xcd, 0x6a, 0x2a, 0xd9, 0x6a, 0x90, 0xfc, 0x46,
    0x37, 0x10, 0xdf, 0xd1, 0xb7, 0xb6, 0x2b, 0xea, 0x1d, 0x7d, 0xe3, 0xd4, 0xe6, 0xaa, 0x9a,
    0xc6, 0x3f, 0x60, 0x1d, 0xcf, 0xa1, 0xd1, 0x74, 0x9d, 0x0e, 0xfa, 0x67, 0xfa, 0xc0, 0x4c,
    0xee, 0x35, 0x99, 0x82, 0x1e, 0x8e, 0x56, 0x8e, 0x85, 0x1f, 0x8e, 0xa2, 0x63, 0xcb, 0xc1,
    0x0f, 0xf6, 0x8e, 0x5a, 0x9b, 0xd6, 0x63, 0xde, 0x1b, 0xb2, 0xb4, 0xfd, 0x36, 0xe0, 0xb0,
    0x46, 0xcf, 0xab, 0x86, 0x9f, 0x6e, 0x58, 0x5c, 0x25, 0xc4, 0x5d, 0x19, 0x4e, 0xa5, 0x72,
    0x9c, 0x2d, 0xf1, 0xf9, 0xaa, 0xef, 0x0b, 0xba, 0x35, 0x69, 0x1c, 0x94, 0x26, 0x61, 0x1e,
    0xb7, 0x28, 0x13, 0x2f, 0x1d, 0x24, 0xff, 0x4b, 0x9a, 0x41, 0xf5, 0x8b, 0xa2, 0x6b, 0x7f,
    0x4e, 0x21, 0xc9, 0x4c, 0x26, 0xc3, 0x62, 0x7f, 0xc7, 0xc0, 0xf2, 0x04, 0x6d, 0x1a, 0xee,
    0x58, 0xfa, 0x88, 0x89, 0x8c, 0x9a, 0x54, 0x09, 0x3c, 0xc8, 0xd8, 0xac, 0x96, 0xcb, 0x1d,
    0x81, 0xd8, 0xeb, 0x5c, 0x49, 0xfa, 0x9b, 0xe5, 0x65, 0x65, 0x84, 0x74, 0x7b, 0xf3, 0xb2,
    0xc1, 0x38, 0x34, 0xfe, 0xef, 0xf5, 0x7a, 0x19, 0x79, 0xf0, 0x29, 0x7b, 0xaf, 0x95, 0xe7,
    0x99, 0x4f, 0x3e, 0x4c, 0x85, 0xa7, 0x58, 0xba, 0x76, 0x21, 0x5f, 0xcc, 0x8f, 0x3e, 0xb6,
    0x35, 0xa0, 0x00, 0xae, 0x1a, 0x65, 0x26, 0x6f, 0x5b, 0x84, 0x70, 0xf7, 0xbb, 0xa4, 0x1c,
    0x8a, 0xad, 0x4f, 0x77, 0x87, 0x13, 0x64, 0xeb, 0xcd, 0x89, 0x44, 0x53, 0x73, 0xaf, 0x5f,
    0xf8, 0x9c, 0xf3, 0x84, 0x2d, 0x4b, 0x53, 0x19, 0xf1, 0xa4, 0x49, 0x96, 0xe9, 0x8b, 0x09,
    0x73, 0x37, 0x41, 0xbb, 0x73, 0x6f, 0x09, 0x72, 0x08, 0xdc, 0x84, 0x17, 0xfd, 0xee, 0x22,
    0xb5, 0xca, 0xaa, 0xbf, 0xb5, 0x43, 0xb3, 0x73, 0xdd, 0xd3, 0x84, 0x86, 0x8d, 0x92, 0x6c,
    0x23, 0x45, 0xc8, 0x2e, 0xed, 0x19, 0xe2, 0x96, 0x0e, 0xd2, 0xe1, 0x51, 0x76, 0x24, 0x43,
    0x62, 0x63, 0xe2, 0x5a, 0xaf, 0x72, 0x47, 0xe2, 0x8e, 0x91, 0x8d, 0x8c, 0x08, 0x03, 0xd8,
    0x91, 0x7a, 0xa7, 0xce, 0x07, 0x6e, 0xaf, 0xef, 0x88, 0xdf, 0x57, 0x81, 0xa4, 0x84, 0x21,
    0x3a, 0x13, 0xb1, 0x58, 0x3a, 0x68, 0xf7, 0x13, 0xf8, 0x2e, 0x84, 0xef, 0x1a, 0x6d, 0x0a,
    0x19, 0x21, 0x53, 0x16, 0x52, 0x76, 0xfa, 0x9c, 0xaf, 0x5c, 0x28, 0xce, 0xa4, 0x66, 0xb0,
    0x96, 0x1b, 0xd5, 0x0f, 0xfa, 0xb8, 0x2b, 0xcb, 0x4b, 0x8d, 0x31, 0xc1, 0xf6, 0x1a, 0x63,
    0xef, 0x18, 0x8d, 0xb8, 0x9b, 0xc1, 0xd3, 0x9f, 0x22, 0x03, 0x20, 0x4a, 0x96, 0xa0, 0x30,
    0xed, 0xf2, 0xf6, 0x93, 0xd3, 0xbf, 0xea, 0x77, 0xf4, 0x87, 0x09, 0x46, 0x6a, 0xef, 0x1d,
    0xa1, 0x84, 0xd5, 0x89, 0x27, 0x05, 0xa6, 0x79, 0xf9, 0xa9, 0x79, 0x9d, 0xec, 0x5b, 0x2d,
    0x25, 0x0c, 0xf3, 0x79, 0xaa, 0xec, 0xba, 0xf0, 0x5f, 0xf8, 0xe3, 0x52, 0x8b, 0x75, 0x28,
    0xf0, 0x52, 0xb1, 0x1e, 0x19, 0xb2, 0xee, 0x30, 0xfe, 0x01, 0x2d, 0x6c, 0x7b, 0x45, 0x7e,
    0xf7, 0x6e, 0x4e, 0x3d, 0x54, 0x67, 0x72, 0x42, 0x09, 0xf5, 0x4e, 0x59, 0xf3, 0x1e, 0xc8,
    0x34, 0x42, 0x1c, 0x4c, 0xde, 0x75, 0xbb, 0x81, 0x7e, 0x0a, 0x99, 0x1c, 0x23, 0x73, 0xdf,
    0x9d, 0xfb, 0xca, 0xf2, 0xa2, 0xb6, 0x42, 0x87, 0x4c, 0x0b, 0x11, 0x16, 0xec, 0xe6, 0xe5,
    0xfe, 0x45, 0x0b, 0x5a, 0x28, 0x86, 0xaa, 0x63, 0x55, 0xea, 0xc2, 0x25, 0x09, 0x5f, 0x35,
    0xc0, 0x46, 0xe3, 0x78, 0x0c, 0x6c, 0xdf, 0x85, 0xb3, 0x77, 0xda, 0x11, 0xc7, 0xb0, 0x74,
    0xd8, 0x37, 0xb3, 0xcb, 0xad, 0x1a, 0x2d, 0x26, 0x72, 0x99, 0x13, 0x82, 0x91, 0x78, 0x46,
    0x22, 0x7f, 0xbc, 0x87, 0x19, 0x76, 0xb1, 0x47, 0xff, 0x3e, 0x8e, 0x2f, 0x9f, 0x31, 0x2c,
    0x2c, 0xed, 0x11, 0xd9, 0x0f, 0x6d, 0x9a, 0x40, 0xb0, 0x73, 0xea, 0xba, 0x1f, 0xaf, 0x12,
    0xd9, 0x2b, 0x26, 0x18, 0x8d, 0x65, 0x99, 0x80, 0xdf, 0x5a, 0xb5, 0x91, 0x03, 0x38, 0x64,
    0x2f, 0x3c, 0xb0, 0xab, 0x22, 0xe8, 0x8a, 0x79, 0x60, 0xa9, 0xac, 0x0e, 0x4f, 0x0f, 0xd0,
    0xbd, 0x70, 0x00, 0xd7, 0x02, 0xe2, 0xda, 0x24, 0xc6, 0x01, 0x07, 0xa6, 0x04, 0xca, 0x67,
    0x0c, 0xe7, 0x30, 0xc1, 0x8d, 0x11, 0xb9, 0x88, 0x97, 0xc6, 0x35, 0xfd, 0x3a, 0x59, 0xb1,
    0xa7, 0xba, 0x43, 0x7d, 0xe2, 0x0b, 0x3e, 0xfd, 0xf7, 0xe4, 0x47, 0x7a, 0xe0, 0x6c, 0x2c,
    0x28, 0x09, 0xdf, 0xc1, 0x45, 0x12, 0x7b, 0x9d, 0xf4, 0x6e, 0x3d, 0xa1, 0x0d, 0x1b, 0x1e,
    0x42, 0xa4, 0x4f, 0x47, 0xd7, 0x61, 0x05, 0x1b, 0x7b, 0x1d, 0x71, 0x3e, 0x1b, 0x34, 0xf3,
    0x9f, 0xfa, 0x8a, 0xe5, 0xb0, 0x15, 0x0a, 0x42, 0x4a, 0xf0, 0xf3, 0xcf, 0x6c, 0x34, 0x48,
    0x82, 0x93, 0xd2, 0x90, 0x37, 0x10, 0x6b, 0xec, 0x75, 0xd3, 0x33, 0x67, 0x22, 0x40, 0x55,
    0x2f, 0x07, 0x1b, 0x99, 0xec, 0x75, 0x25, 0xc6, 0x7c, 0xd7, 0x5d, 0x80, 0x92, 0x40, 0x3d,
    0x8d, 0xe1, 0x7f, 0xbe, 0x47, 0xa2, 0x94, 0x04, 0x77, 0x13, 0x82, 0xd4, 0x29, 0x4f, 0x90,
    0x5b, 0x7a, 0x11, 0x23, 0x17, 0xbf, 0x2d, 0x16, 0x23, 0x02, 0xfd, 0xca, 0xea, 0xad, 0x33,
    0x82, 0xd1, 0x54, 0x31, 0xbc, 0xb9, 0xd8, 0xec, 0xa4, 0x1c, 0x8d, 0xec, 0xdd, 0x61, 0x8c,
    0xaa, 0x48, 0xff, 0xf7, 0x76, 0xaa, 0x3e, 0x7e, 0xd7, 0xeb, 0x8f, 0x7a, 0xb9, 0xa2, 0x79,
    0xb6, 0x6a, 0x0e, 0xe4, 0x75, 0xc6, 0x87, 0x97, 0x4e, 0x43, 0x37, 0x25, 0xbe, 0x9f, 0x5a,
    0x6c, 0xa7, 0x1d, 0xdf, 0x77, 0x19, 0x71, 0x36, 0x35, 0x1d, 0xc3, 0x8e, 0x00, 0x94, 0x7e,
    0x13, 0x0b, 0x06, 0x83, 0xfc, 0x55, 0xda, 0xbf, 0x7e, 0x0f, 0xc1, 0xdb, 0xe0, 0x79, 0x33,
    0xbd, 0x1b, 0xdb, 0x45, 0xcd, 0x21, 0x28, 0x4f, 0xab, 0xa4, 0x9f, 0x3f, 0x5d, 0xc1, 0x4b,
    0x3b, 0xc4, 0x5c, 0x9a, 0xd6, 0x6a, 0xa1, 0x91, 0x65, 0x48, 0xe5, 0x24, 0xab, 0xfe, 0x42,
    0x15, 0x17, 0x16, 0x56, 0x6c, 0x1c, 0x29, 0xaa, 0x86, 0x01, 0xe2, 0xc7, 0x08, 0x66, 0x32,
    0xd2, 0x96, 0xcd, 0x6f, 0x18, 0xbe, 0xc2, 0xc7, 0x27, 0xcb, 0x0d, 0xc1, 0xfa, 0xec, 0xf5,
    0xaf, 0x88, 0x42, 0xe2, 0x28, 0xba, 0xbe, 0x71, 0x55, 0x14, 0x79, 0x30, 0xd8, 0x13, 0x5f,
    0x47, 0x34, 0x68, 0xd5, 0xa8, 0xc1, 0x48, 0x72, 0xb8, 0x71, 0x30, 0xf8, 0x05, 0x84, 0x19,
    0xfb, 0xdf, 0xbd, 0x0b, 0x1b, 0x46, 0x0f, 0x47, 0x84, 0xa2, 0x94, 0xea, 0x42, 0xba, 0x06,
    0x4b, 0x28, 0x32, 0xd9, 0xe2, 0x0c, 0x06, 0x91, 0xaf, 0x2c, 0x4c, 0x21, 0x7f, 0xc2, 0x6a,
    0x20, 0x12, 0x6a, 0x32, 0x40, 0x86, 0x43, 0x3b, 0x45, 0xf7, 0x4e, 0x07, 0x3b, 0x74, 0x78,
    0xbb, 0x12, 0x3e, 0x95, 0x28, 0xcc, 0xe4, 0x0c, 0x5c, 0x76, 0x51, 0x4a, 0x90, 0x57, 0xd2,
    0x87, 0x8c, 0x8a, 0x88, 0x2e, 0x14, 0x57, 0x0f, 0x3b, 0x4f, 0x79, 0x8a, 0x27, 0x1e, 0x08,
    0x55, 0x94, 0xeb, 0xde, 0xa7, 0xcf, 0x85, 0x2a, 0x59, 0xa8, 0x82, 0x0c, 0x9f, 0xcd, 0x6a,
    0x23, 0x2c, 0xb6, 0x59, 0x5c, 0x89, 0xaf, 0x49, 0xb5, 0xdf, 0x11, 0x8e, 0xca, 0xec, 0xa1,
    0xc1, 0x71, 0x3b, 0x5e, 0x94, 0xff, 0x1e, 0x23, 0x4a, 0x29, 0xea, 0x25, 0xbb, 0x69, 0x7f,
    0xb1, 0x42, 0x9b, 0x55, 0x8b, 0x78, 0x68, 0x89, 0x44, 0xa1, 0x81, 0xd4, 0x5c, 0xac, 0x76,
    0x52, 0x26, 0x5e, 0x28, 0x35, 0xfb, 0xaa, 0xc8, 0xe8, 0xab, 0xb6, 0x9e, 0x61, 0xc5, 0xf8,
    0xc8, 0xa7, 0x4f, 0x6e, 0x9c, 0x4b, 0x3f, 0xb5, 0xa9, 0x67, 0xcc, 0x54, 0x79, 0xdd, 0x51,
    0xb6, 0x8d, 0xbe, 0x12, 0x1a, 0xa4, 0x3d, 0xf1, 0xbf, 0xb2, 0x15, 0xe4, 0x0e, 0xdd, 0xb7,
    0xad, 0x3a, 0x64, 0x2e, 0x2e, 0xe1, 0xe8, 0xcb, 0xbd, 0xf5, 0xb2, 0x7d, 0x2f, 0xc1, 0xc8,
    0x17, 0xac, 0x54, 0x10, 0xf7, 0xe6, 0x16, 0x59, 0x42, 0x05, 0xc9, 0x85, 0xd0, 0xe4, 0x55,
    0xb1, 0x09, 0x66, 0xfb, 0xab, 0xcb, 0xc5, 0x19, 0x93, 0x8d, 0x0c, 0x29, 0xfb, 0xe5, 0x2e,
    0x99, 0xe7, 0x47, 0xd3, 0x6a, 0xbe, 0x88, 0x25, 0x0b, 0xa6, 0x7d, 0xd3, 0xda, 0xc2, 0xd1,
    0xdd, 0xf8, 0xd5, 0x73, 0x9b, 0x35, 0xb7, 0xd4, 0x20, 0xe3, 0xae, 0xd8, 0xef, 0x9b, 0x53,
    0xbd, 0xc2, 0x3f, 0x5a, 0x1a, 0x36, 0x54, 0x7d, 0x53, 0x8e, 0xfe, 0x4e, 0x8e, 0xe2, 0xf9,
    0x48, 0x57, 0xde, 0x6d, 0x56, 0xd1, 0x52, 0x08, 0xef, 0x89, 0x1b, 0xd6, 0x85, 0x11, 0x1e,
    0x14, 0xca, 0x1e, 0x2e, 0x21, 0x6a, 0xe1, 0xbd, 0x81, 0x37, 0x81, 0x8c, 0xb4, 0x7f, 0x8c,
    0x5c, 0x2e, 0x84, 0x91, 0xa5, 0x11, 0xe4, 0x14, 0xdb, 0xbd, 0x79, 0xad, 0xb8, 0x0a, 0xb3,
    0x4a, 0xcd, 0x87, 0xe7, 0xd0, 0x14, 0x5a, 0x6f, 0x70, 0x78, 0x0a, 0xad, 0x27, 0xd1, 0xc8,
    0x8b, 0x4e, 0x74, 0xc0, 0x1d, 0x7b, 0xa4, 0x0c, 0x7f, 0x34, 0x91, 0x79, 0x02, 0x05, 0x09,
    0x70, 0xc5, 0x24, 0xcb, 0x67, 0xcb, 0x7c, 0x52, 0x95, 0xb7, 0x5e, 0xa9, 0x16, 0xd1, 0xaa,
    0x2c, 0xa9, 0x1e, 0xf9, 0x1a, 0xa6, 0x57, 0xfa, 0xc9, 0x21, 0xe2, 0x00, 0x52, 0xd1, 0x7a,
    0xb9, 0xc8, 0xc8, 0x79, 0xb9, 0x45, 0xaf, 0xfb, 0xe9, 0x1d, 0xf4, 0x86, 0x62, 0xed, 0x05,
    0x7a, 0x5f, 0x6b, 0x22, 0xc4, 0x2f, 0xca, 0x93, 0xf2, 0xc9, 0xbd, 0x51, 0xfb, 0x62, 0x5a,
    0x83, 0xea, 0x23, 0x06, 0xc9, 0xa1, 0xe9, 0x8c, 0xd3, 0xc1, 0xe1, 0x15, 0x21, 0x9e, 0x0e,
    0x27, 0x6a, 0xff, 0x7a, 0x7b, 0xdf, 0x45, 0xf8, 0x54, 0xa2, 0x11, 0x27, 0xbf, 0x58, 0x3f,
    0xad, 0x4a, 0x8c, 0x07, 0x8d, 0x46, 0x3c, 0xf6, 0x76, 0xaf, 0x12, 0x17, 0x24, 0x16, 0x56,
    0xf7, 0x7f, 0xa7, 0x12, 0x9d, 0xe6, 0x26, 0x9b, 0x60, 0xdd, 0xfc, 0xde, 0x6e, 0x54, 0xa2,
    0x3a, 0x14, 0x4a, 0xde, 0xd7, 0x8d, 0x9e, 0x8a, 0x55, 0x12, 0x7d, 0xef, 0x74, 0x71, 0x00,
    0x15, 0x6b, 0xa4, 0xe9, 0xa2, 0xe5, 0x97, 0xb5, 0x72, 0x1b, 0x95, 0x98, 0x29, 0x1c, 0x3e,
    0xee, 0xeb, 0x4e, 0xcf, 0xc4, 0xea, 0x88, 0xa5, 0x76, 0x1d, 0xc0, 0x4e, 0x25, 0xf4, 0x91,
    0xd8, 0x9a, 0xe1, 0x1c, 0x80, 0x4e, 0x1a, 0x8b, 0x75, 0x92, 0x8a, 0x67, 0x8a, 0xa3, 0x1f,
    0x61, 0xc7, 0x62, 0x61, 0x55, 0xcd, 0x03, 0xd8, 0xa6, 0x58, 0xf9, 0xaa, 0x90, 0xa7, 0xbb,
    0xdc, 0x7b, 0x26, 0x51, 0xae, 0x80, 0xf5, 0x03, 0x70, 0x1d, 0xce, 0x3a, 0x62, 0x9d, 0x84,
    0x67, 0xb9, 0xff, 0x1b, 0xed, 0x8a, 0xf5, 0x11, 0xfe, 0x66, 0x63, 0x43, 0xdd, 0x7f, 0x93,
    0xd6, 0x95, 0x18, 0x9a, 0xa4, 0x1c, 0x04, 0xfb, 0x4a, 0x5c, 0x6f, 0xce, 0xb4, 0x70, 0xa7,
    0x3d, 0xdd, 0x69, 0x4f, 0x22, 0xfb, 0x03, 0x76, 0x1a, 0xbc, 0x5d, 0xdd, 0xdb, 0xbd, 0x8a,
    0xd2, 0x4c, 0x37, 0x95, 0xfd, 0xf7, 0x1c, 0xce, 0xfa, 0x62, 0xad, 0x34, 0x33, 0xf7, 0xff,
    0x73, 0xd6, 0x97, 0xb8, 0x15, 0x37, 0xed, 0xfd, 0xf7, 0x91, 0xce, 0xfa, 0x62, 0x85, 0xa4,
    0xf6, 0x7f, 0x9b, 0x12, 0xa5, 0x18, 0xdb, 0x41, 0x8d, 0x07, 0xb0, 0x5d, 0xb1, 0x42, 0xa2,
    0x35, 0x0f, 0x20, 0xe6, 0x7b, 0x26, 0x11, 0xde, 0xf6, 0x0a, 0xb3, 0xcc, 0x03, 0x60, 0x64,
    0x10, 0xb7, 0x66, 0x1c, 0x02, 0x59, 0x25, 0xf4, 0x52, 0x38, 0x8f, 0x67, 0x9f, 0x77, 0x2b,
    0xe2, 0xd6, 0xcd, 0xe0, 0xdd, 0xf2, 0xde, 0x6e, 0x54, 0xac, 0x98, 0x8c, 0x40, 0x16, 0xc9,
    0x6f, 0x55, 0x22, 0xc8, 0x6d, 0xe0, 0xf5, 0x01, 0xec, 0x53, 0xac, 0x91, 0x0c, 0x47, 0x3f,
    0x13, 0x8d, 0x44, 0x88, 0x7b, 0xa5, 0x4c, 0x1f, 0x95, 0xf9, 0x01, 0x30, 0xaf, 0x44, 0x90,
    0xeb, 0x0d, 0xbf, 0xff, 0x7b, 0x95, 0xe9, 0x83, 0xef, 0x15, 0x45, 0xed, 0xfd, 0x6e, 0x25,
    0xdc, 0x2b, 0x56, 0x67, 0x71, 0x00, 0x5b, 0x15, 0x6b, 0x26, 0x9e, 0x5f, 0x79, 0x00, 0x5b,
    0xeb, 0x26, 0xb2, 0x38, 0x04, 0x7f, 0x7f, 0x2c, 0x11, 0xe9, 0x76, 0x6b, 0xa8, 0xf6, 0x7f,
    0x62, 0xc5, 0x04, 0x39, 0x87, 0x53, 0x7b, 0xb6, 0xda, 0xff, 0xcd, 0x4a, 0xc4, 0xbb, 0x89,
    0xc2, 0xfb, 0x1f, 0x5b, 0x1a, 0x4b, 0x44, 0xbb, 0xc9, 0x5a, 0x3b, 0x84, 0xf4, 0x87, 0xb1,
    0xb8, 0x9b, 0x6c, 0x8c, 0xe9, 0xc2, 0x32, 0x0d, 0xed, 0xaf, 0x03, 0xb0, 0xae, 0x63, 0x89,
    0x37, 0xb4, 0xa5, 0x39, 0x80, 0x8d, 0x8a, 0x75, 0x93, 0x4d, 0xc9, 0xba, 0xff, 0xe7, 0x9b,
    0x44, 0xc8, 0x9b, 0xed, 0xf4, 0x00, 0x88, 0x2a, 0x11, 0xf5, 0xb6, 0x2d, 0xc5, 0x20, 0x1a,
    0x80, 0x10, 0xd3, 0x58, 0x22, 0xf4, 0x0d, 0xe5, 0xbd, 0xfb, 0xbf, 0x51, 0x89, 0xe0, 0xb7,
    0xed, 0xff, 0x35, 0xdc, 0x58, 0x22, 0xea, 0xfd, 0x64, 0x6a, 0x07, 0x60, 0x65, 0x24, 0x62,
    0x4f, 0xa6, 0x4e, 0xdf, 0x1c, 0x4a, 0x6d, 0x71, 0x7f, 0xfa, 0xdd, 0x7b, 0x7e, 0x5b, 0xfb,
    0x5e, 0xc5, 0x70, 0x00, 0x05, 0x3f, 0x63, 0x89, 0x90, 0xf9, 0x7a, 0xa1, 0x45, 0x07, 0x8b,
    0xdd, 0xea, 0x84, 0xfe, 0x34, 0x38, 0xdb, 0xa1, 0x6d, 0x56, 0xc9, 0x05, 0x2c, 0x61, 0x30,
    0x07, 0x5b, 0x31, 0x88, 0xcb, 0x05, 0xee, 0xe3, 0x37, 0x3e, 0x53, 0x33, 0x38, 0xdd, 0x29,
    0xb1, 0xa3, 0x18, 0x9f, 0xd7, 0xd0, 0x43, 0x25, 0xab, 0xb2, 0x2e, 0x8c, 0xe2, 0x2c, 0x7e,
    0x8f, 0x5a, 0xc1, 0x0f, 0x5b, 0x30, 0x5a, 0xc8, 0x0f, 0xe3, 0x51, 0x23, 0x04, 0x1e, 0x09,
    0xbc, 0xc5, 0x59, 0x06, 0x81, 0xcf, 0xe7, 0xe0, 0x38, 0x55, 0x43, 0xdb, 0x00, 0xc8, 0x81,
    0x95, 0x3f, 0x9b, 0xc4, 0x46, 0x96, 0x63, 0xd8, 0xf4, 0x31, 0xf4, 0x84, 0x2d, 0x42, 0xd1,
    0xc8, 0xc2, 0x74, 0x74, 0x15, 0x4d, 0x30, 0x22, 0xd8, 0x46, 0x4f, 0x9a, 0x82, 0xa0, 0xc1,
    0x1f, 0xe7, 0x3f, 0x7d, 0xbc, 0xbe, 0x97, 0x69, 0x45, 0xb9, 0xdd, 0x4a, 0x8d, 0xfc, 0x51,
    0xcc, 0xbd, 0x5e, 0xbc, 0x1b, 0x52, 0x90, 0xce, 0x91, 0x6d, 0x57, 0x61, 0x1e, 0x23, 0x56,
    0x40, 0xcc, 0x4f, 0xbc, 0x18, 0x9c, 0x75, 0x0f, 0x65, 0xa3, 0xe4, 0x79, 0x7b, 0x54, 0x1c,
    0x1f, 0xc2, 0xc6, 0x93, 0x46, 0x4f, 0xd3, 0xb0, 0x16, 0x7d, 0xc6, 0xd2, 0xa0, 0x4f, 0xcd,
    0xba, 0xc9, 0x6d, 0xa2, 0xb7, 0xf6, 0xb0, 0x2f, 0xf6, 0x47, 0xff, 0x8c, 0xe1, 0x9a, 0xfd,
    0x6b, 0x22, 0x44, 0xa8, 0x73, 0x52, 0xbd, 0xa6, 0xdc, 0x34, 0x7e, 0x34, 0xad, 0xa5, 0x62,
    0x45, 0xbb, 0x72, 0x63, 0x06, 0x4c, 0xca, 0xb8, 0x3e, 0xb7, 0xb1, 0xb6, 0x37, 0xb1, 0x6f,
    0x19, 0x15, 0x9a, 0xd8, 0x07, 0x4d, 0x7f, 0x11, 0x68, 0xbc, 0xd0, 0x40, 0x3e, 0xc7, 0x78,
    0xe2, 0xa9, 0x69, 0x29, 0x36, 0x56, 0x91, 0xc9, 0x3b, 0xd5, 0xae, 0x95, 0x0d, 0xd2, 0x0c,
    0xcd, 0x10, 0x44, 0x45, 0xbd, 0xb2, 0xdb, 0x1b, 0x9e, 0x1e, 0x5e, 0xa9, 0x6a, 0x6f, 0xd4,
    0x28, 0xdf, 0x34, 0x36, 0xe7, 0xac, 0x71, 0x74, 0xe8, 0xb7, 0xc5, 0xa6, 0x5f, 0xd2, 0x35,
    0x42, 0x0f, 0x1c, 0x40, 0xcb, 0x32, 0x39, 0x84, 0x77, 0x25, 0x8a, 0x83, 0x8d, 0xcd, 0x7b,
    0x47, 0xfa, 0x23, 0x4b, 0x4b, 0x7e, 0xc1, 0x7b, 0x68, 0xd1, 0x1d, 0xf1, 0x2e, 0xb6, 0x0a,
    0xbc, 0xdf, 0x43, 0x60, 0xe6, 0x05, 0xed, 0xa1, 0x45, 0x77, 0x6b, 0xf0, 0x30, 0x96, 0x42,
    0x87, 0xd8, 0x14, 0xf8, 0x17, 0x7c, 0xef, 0xc6, 0xe6, 0x12, 0x83, 0xb0, 0x28, 0x72, 0x3e,
    0x57, 0xf6, 0xe6, 0x8e, 0x3b, 0x25, 0x2f, 0x68, 0x0f, 0x2d, 0xba, 0x63, 0x1f, 0x13, 0x29,
    0xff, 0xe8, 0x18, 0x7c, 0x28, 0xc4, 0x0b, 0xce, 0x43, 0x8b, 0xee, 0xe8, 0xba, 0x88, 0x03,
    0x14, 0x39, 0x3f, 0x2b, 0x64, 0xf1, 0x82, 0xef, 0x52, 0x78, 0x5c, 0xca, 0x55, 0xbc, 0x86,
    0xbc, 0x17, 0x7c, 0x87, 0x16, 0xdd, 0xd1, 0x74, 0x4a, 0x79, 0x8a, 0xd7, 0xbc, 0xd3, 0xd1,
    0xc6, 0x43, 0x8b, 0xee, 0xa8, 0x51, 0xa4, 0xb4, 0xf8, 0x27, 0x5c, 0x74, 0xa2, 0xc6, 0x0b,
    0xb9, 0xaf, 0x22, 0xa5, 0xc0, 0x5f, 0xdc, 0x94, 0x12, 0x55, 0xb8, 0x14, 0xc6, 0x7f, 0x33,
    0x3c, 0xa3, 0x5f, 0x51, 0x5f, 0x90, 0x5e, 0x0a, 0x9b, 0x4b, 0xd9, 0xcd, 0xff, 0x89, 0x2d,
    0x05, 0xdf, 0x65, 0x30, 0xf9, 0xa9, 0x5c, 0x5e, 0xa3, 0x31, 0xd7, 0x66, 0xd1, 0xe1, 0x14,
    0xcc, 0xa5, 0x63, 0x91, 0xf2, 0x08, 0x2c, 0x28, 0x33, 0x94, 0xcc, 0x7e, 0x2f, 0x39, 0xb7,
    0x46, 0xc5, 0x30, 0x1d, 0xc3, 0xff, 0xfa, 0x5d, 0x8e, 0x7d, 0x32, 0x41, 0x2b, 0x69, 0x26,
    0x0c, 0x7f, 0xbd, 0x8a, 0x40, 0x1d, 0xb8, 0x09, 0x09, 0x86, 0x79, 0x5f, 0x05, 0x16, 0x0c,
    0x82, 0x7f, 0x35, 0x15, 0xf5, 0xbd, 0xa2, 0x03, 0x33, 0xa8, 0x3f, 0x2a, 0xd6, 0x5c, 0xb1,
    0x1d, 0xb6, 0x9e, 0xb4, 0x29, 0xbe, 0xb5, 0xcc, 0x55, 0xae, 0x9e, 0x8d, 0x25, 0x4c, 0x7b,
    0x8e, 0x81, 0xc3, 0xcb, 0xbe, 0xeb, 0x8d, 0xcf, 0x7e, 0x80, 0x3b, 0xb1, 0x35, 0x72, 0x1b,
    0xf0, 0xcb, 0x15, 0x82, 0x34, 0x03, 0x91, 0xd5, 0x42, 0x33, 0xbe, 0x21, 0xfa, 0x26, 0x87,
    0x04, 0x84, 0xe1, 0xc3, 0xe8, 0x2c, 0x4c, 0x56, 0x78, 0x6a, 0x23, 0x03, 0xaf, 0x81, 0xb1,
    0x4c, 0x78, 0x5c, 0x84, 0x92, 0x58, 0xc0, 0xbc, 0xfa, 0x41, 0xb2, 0x83, 0xfe, 0x38, 0x06,
    0xb7, 0x80, 0x34, 0xb8, 0xd5, 0x8c, 0x8a, 0xf5, 0xda, 0xed, 0x50, 0x48, 0xce, 0x3a, 0x51,
    0x12, 0x9c, 0x1a, 0x68, 0x5a, 0x40, 0x0c, 0xd3, 0x50, 0x09, 0xb2, 0x4d, 0x98, 0xab, 0x67,
    0x74, 0x77, 0x16, 0x82, 0x02, 0x57, 0xb4, 0x54, 0x56, 0x2b, 0x2a, 0x0a, 0x27, 0xd1, 0x05,
    0xb9, 0x80, 0xbb, 0xe7, 0x63, 0xfb, 0x82, 0xcb, 0xbb, 0x37, 0x70, 0xf4, 0x25, 0xba, 0xc6,
    0x83, 0x74, 0x8a, 0x36, 0x34, 0xe1, 0x78, 0xb3, 0x10, 0x95, 0x11, 0x65, 0xba, 0xc0, 0x2a,
    0xb6, 0x31, 0x1d, 0x0b, 0xb9, 0x98, 0x44, 0x84, 0xa3, 0xb2, 0x65, 0x97, 0x73, 0x03, 0xb9,
    0x56, 0x1c, 0x05, 0xb7, 0x50, 0x51, 0x20, 0x7d, 0x41, 0x57, 0xb4, 0x2b, 0x6c, 0x8a, 0xb9,
    0xc4, 0x58, 0xbd, 0xe1, 0x28, 0x83, 0xb3, 0x3e, 0x2b, 0xba, 0xa6, 0xba, 0xda, 0xe0, 0x18,
    0x17, 0xda, 0x74, 0x41, 0x75, 0x04, 0x15, 0xc9, 0x25, 0x48, 0x3c, 0x27, 0xa7, 0xa5, 0x18,
    0x76, 0x11, 0xfb, 0x14, 0x78, 0x18, 0xcd, 0x4c, 0x8b, 0xf1, 0xc5, 0x12, 0x2f, 0x4d, 0x6b,
    0x7c, 0xbb, 0xf5, 0xc3, 0x83, 0x41, 0x5f, 0x89, 0x5e, 0x9f, 0xf4, 0x86, 0xe8, 0xe9, 0xe2,
    0xb7, 0x37, 0xe8, 0x2d, 0x3a, 0x7f, 0x52, 0x34, 0x36, 0x2b, 0xd4, 0x7b, 0x9a, 0xaf, 0xf1,
    0xea, 0x9c, 0x0c, 0x7f, 0x7a, 0x7f, 0x8c, 0xba, 0xf0, 0x7f, 0xbd, 0x9f, 0xde, 0x3f, 0x18,
    0x6e, 0x8f, 0x7e, 0x55, 0xe2, 0x9b, 0xde, 0x57, 0x8e, 0x51, 0x1f, 0xfe, 0x6f, 0x00, 0x5f,
    0x76, 0x7a, 0x03, 0xf4, 0xba, 0x2b, 0xfe, 0x72, 0xe8, 0x7b, 0xc7, 0x88, 0xc1, 0x30, 0x82,
    0x3b, 0x85, 0xff, 0x3b, 0x83, 0xb5, 0x7a, 0x9d, 0xc1, 0x19, 0x7a, 0xdd, 0x13, 0xaf, 0xf5,
    0xdb, 0x6b, 0x8c, 0x0d, 0x58, 0x89, 0x69, 0xcd, 0x2e, 0x5d, 0x08, 0xf4, 0x6a, 0x97, 0xfd,
    0xb5, 0x78, 0xc1, 0xfd, 0x83, 0x31, 0xe8, 0x8c, 0x29, 0x56, 0x06, 0xf2, 0x0b, 0x9e, 0xb9,
    0xf6, 0x3b, 0xc9, 0x0b, 0x3e, 0x18, 0xf7, 0x0b, 0x8d, 0xf8, 0x1a, 0x9d, 0xfe, 0x08, 0xb9,
    0xee, 0xe8, 0x4d, 0x87, 0xfa, 0xcf, 0x96, 0xbe, 0xa1, 0x6a, 0xc1, 0x93, 0xc6, 0x7b, 0x85,
    0x7e, 0x00, 0x9f, 0x5a, 0x63, 0x22, 0xec, 0xcf, 0xe6, 0x2c, 0x4d, 0x6d, 0x70, 0xce, 0x06,
    0x99, 0xae, 0x1c, 0x0a, 0x80, 0x66, 0x13, 0xe4, 0x10, 0xaa, 0x16, 0x26, 0x1b, 0x06, 0x92,
    0x01, 0x68, 0x9b, 0x2a, 0x18, 0xf6, 0xc5, 0xaa, 0x60, 0xe5, 0x94, 0xaa, 0x00, 0x76, 0xe9,
    0x5d, 0x48, 0x01, 0x50, 0x91, 0xca, 0x50, 0x00, 0x8c, 0x87, 0x66, 0x1a, 0xd6, 0x55, 0xe0,
    0x0b, 0xff, 0x97, 0xa3, 0x59, 0x94, 0x66, 0xc0, 0x78, 0x54, 0xf8, 0xd1, 0xd2, 0x21, 0x36,
    0x11, 0x99, 0x86, 0x9f, 0x8b, 0x31, 0x33, 0x75, 0xdd, 0x5c, 0x03, 0x6b, 0xed, 0xa0, 0x37,
    0x0c, 0x4f, 0x71, 0x00, 0x97, 0x04, 0xb5, 0xc6, 0x83, 0x11, 0xd1, 0x06, 0x21, 0x21, 0x81,
    0x7d, 0xf1, 0x0d, 0xe9, 0x17, 0xf8, 0x66, 0x5c, 0x1b, 0xa4, 0x7e, 0x39, 0xa4, 0x61, 0xe0,
    0x42, 0x65, 0x90, 0xba, 0x54, 0x48, 0xdf, 0xc0, 0x52, 0x72, 0xba, 0x20, 0x7d, 0x5f, 0x41,
    0x13, 0x5c, 0x2f, 0x5b, 0x15, 0xa4, 0xae, 0x17, 0x52, 0x39, 0xed, 0x53, 0x18, 0xca, 0x12,
    0x69, 0xa3, 0xd7, 0x14, 0x82, 0x2b, 0xed, 0xfd, 0x1b, 0xe0, 0x14, 0x57, 0x15, 0xb6, 0x5d,
    0x9c, 0x8a, 0xe7, 0x53, 0xf2, 0x9d, 0xd0, 0x7d, 0xed, 0xb7, 0xf2, 0xb0, 0xa3, 0xb7, 0xd0,
    0xd2, 0xfb, 0xc3, 0x56, 0x37, 0xac, 0x17, 0x98, 0xd2, 0x95, 0xeb, 0x80, 0xf3, 0x80, 0x53,
    0xbe, 0x38, 0x7a, 0xef, 0x39, 0x95, 0x6b, 0x4d, 0xd7, 0x21, 0x7f, 0x8f, 0x9d, 0x0f, 0x0c,
    0xbf, 0xa5, 0x67, 0x04, 0xe6, 0xe4, 0xb6, 0x8b, 0x13, 0xce, 0xc4, 0xa3, 0xf8, 0x78, 0xad,
    0xe0, 0xa4, 0x61, 0x95, 0xca, 0x12, 0xd9, 0x03, 0xce, 0xaa, 0xe0, 0x89, 0x59, 0x2c, 0x23,
    0x3c, 0xa6, 0x08, 0x9d, 0x1f, 0xdc, 0xa3, 0x98, 0xcf, 0x0b, 0xf4, 0x10, 0xad, 0xcd, 0x0d,
    0x4e, 0x88, 0x23, 0x15, 0x5d, 0xde, 0x22, 0x45, 0x55, 0xe9, 0xd9, 0x88, 0xb4, 0x8d, 0x31,
    0x6e, 0x4e, 0xf8, 0x1e, 0x40, 0xcd, 0x92, 0x1a, 0x39, 0xc2, 0x0b, 0x79, 0xa4, 0xc4, 0x34,
    0x58, 0x3a, 0xd9, 0x35, 0x05, 0x51, 0xbd, 0xf5, 0xa6, 0xa7, 0x36, 0x95, 0xaa, 0x9d, 0x04,
    0xff, 0xf4, 0xbe, 0xe4, 0xe3, 0xd2, 0x8d, 0x38, 0x3a, 0x0c, 0xf9, 0x4a, 0x0e, 0x4f, 0xf4,
    0xf1, 0xb4, 0xeb, 0x56, 0xa7, 0xf4, 0xa5, 0xec, 0x27, 0xbc, 0xa7, 0x5d, 0x47, 0xf3, 0x16,
    0x37, 0xcb, 0x8f, 0xe9, 0x4e, 0x0f, 0xfc, 0x65, 0xf2, 0xdc, 0x3e, 0x0f, 0xe1, 0x94, 0x21,
    0xa0, 0xd3, 0x15, 0x12, 0x0e, 0xd3, 0x5d, 0xe4, 0x2f, 0x24, 0x2a, 0x32, 0x0c, 0xe7, 0x8a,
    0x1d, 0x6d, 0xa5, 0xe7, 0xd1, 0x43, 0x13, 0x3e, 0x53, 0x39, 0xb0, 0xc8, 0x7b, 0xcd, 0xa0,
    0xe7, 0x66, 0x05, 0x03, 0xf7, 0x82, 0xe9, 0x2f, 0x25, 0x84, 0x58, 0xc1, 0x97, 0x7d, 0x38,
    0xd7, 0x87, 0x23, 0x34, 0x61, 0x2f, 0x41, 0xa6, 0xf7, 0x16, 0x99, 0x88, 0xa9, 0xbf, 0xbb,
    0x35, 0x5b, 0x38, 0xfe, 0xbd, 0x05, 0xf7, 0xc2, 0xc2, 0xd4, 0xb8, 0x12, 0x6a, 0x44, 0x23,
    0x09, 0x98, 0xd0, 0xbf, 0x83, 0x8a, 0x2a, 0x9b, 0xd5, 0x72, 0x30, 0x9a, 0xcf, 0x66, 0xe3,
    0x17, 0xa5, 0x5e, 0x7d, 0x44, 0x5d, 0x91, 0x24, 0x09, 0x0b, 0xef, 0xf1, 0x57, 0x3c, 0xb3,
    0x2e, 0xe0, 0xc8, 0x44, 0x34, 0x15, 0x73, 0x82, 0x18, 0xea, 0x49, 0x44, 0x35, 0x44, 0x84,
    0xdf, 0xc4, 0x22, 0x26, 0x1f, 0xbb, 0xcc, 0xd6, 0xfc, 0xcc, 0x6e, 0x65, 0xd2, 0x95, 0xd1,
    0xa1, 0x1d, 0x7e, 0xd2, 0xe6, 0x8b, 0xdd, 0xb7, 0x68, 0xd5, 0xb3, 0x45, 0xff, 0xe7, 0xdf,
    0x72, 0x20, 0x51, 0x0c, 0xe5, 0x0e, 0xcb, 0xd4, 0x42, 0x0e, 0x73, 0xf0, 0x01, 0x3e, 0x45,
    0x67, 0x9f, 0xc4, 0x66, 0x69, 0x96, 0x5c, 0x3b, 0x25, 0xb2, 0xe3, 0x7e, 0x8f, 0xb0, 0x0a,
    0x78, 0xba, 0x27, 0x7d, 0xa7, 0x6c, 0xd0, 0x4c, 0xb1, 0xf0, 0x1a, 0xeb, 0x7a, 0x86, 0x27,
    0x8d, 0xd5, 0x90, 0x48, 0x3c, 0xf4, 0x60, 0x8b, 0xf8, 0xb9, 0x4f, 0xd8, 0xb2, 0x28, 0xf3,
    0xb0, 0x46, 0x4c, 0x26, 0x7c, 0x9d, 0xde, 0x41, 0x49, 0xd7, 0xce, 0xd9, 0xf4, 0x9a, 0x9b,
    0x3a, 0xd9, 0x64, 0xdd, 0x8e, 0x54, 0x44, 0x2e, 0x99, 0xc6, 0xbf, 0x0c, 0xb4, 0x17, 0x6a,
    0xab, 0xd2, 0x14, 0xc3, 0x64, 0x87, 0x54, 0x8b, 0xe9, 0x1d, 0x37, 0xe0, 0x5d, 0x3b, 0xfd,
    0xd2, 0xd9, 0x0d, 0xfc, 0x2d, 0x7a, 0x6b, 0x95, 0x42, 0xbc, 0x64, 0x15, 0x5a, 0x22, 0x1d,
    0x8e, 0x5f, 0x83, 0x52, 0xc7, 0x78, 0x0a, 0x59, 0x78, 0x65, 0x61, 0xe2, 0xdd, 0x75, 0x7b,
    0x6d, 0x16, 0x34, 0xad, 0x5f, 0x18, 0x25, 0x5a, 0xaf, 0x98, 0x49, 0xe9, 0x67, 0x21, 0x82,
    0x1a, 0xe7, 0xb8, 0xaf, 0xcb, 0xbe, 0xd8, 0x82, 0x23, 0x56, 0xcc, 0xe3, 0xad, 0xb7, 0xc8,
    0x5e, 0x82, 0xda, 0x0d, 0x1c, 0xbe, 0x24, 0x72, 0x86, 0xe2, 0x89, 0x3e, 0x12, 0x7c, 0xf0,
    0xfe, 0xa5, 0x8a, 0x0f, 0x6c, 0xd7, 0x18, 0xc2, 0x77, 0x85, 0x8e, 0x6b, 0xbf, 0x55, 0x7a,
    0x33, 0x00, 0x40, 0x26, 0xfb, 0xde, 0x1b, 0xd0, 0xeb, 0x87, 0xa3, 0xb7, 0x0c, 0xbd, 0x0f,
    0x6f, 0x64, 0x8e, 0x6d, 0xee, 0x1e, 0xab, 0x0b, 0x47, 0x55, 0x7a, 0x02, 0xeb, 0x06, 0x0e,
    0xbb, 0x1c, 0xc1, 0xbc, 0xb7, 0xb9, 0xa7, 0x8e, 0xbd, 0x3a, 0x4b, 0x34, 0x73, 0x3e, 0xe8,
    0xe2, 0x59, 0x48, 0xcf, 0xe5, 0x80, 0xd0, 0x95, 0x99, 0x1e, 0xf2, 0x72, 0x42, 0x68, 0xcd,
    0xa1, 0x2b, 0xd1, 0xe3, 0xef, 0xe5, 0x88, 0x10, 0x23, 0xd7, 0x82, 0xb2, 0xaf, 0xf9, 0x8f,
    0x89, 0x25, 0xd1, 0x81, 0x92, 0x41, 0x96, 0xd7, 0x6f, 0xf0, 0xa8, 0xd6, 0x54, 0x88, 0xfe,
    0x1e, 0x07, 0xba, 0x12, 0x9d, 0x53, 0x0f, 0xee, 0x3c, 0x10, 0x75, 0xa5, 0x5e, 0x4e, 0x03,
    0x13, 0x24, 0x3a, 0xe0, 0xed, 0xcb, 0x71, 0x80, 0xd8, 0x58, 0xbd, 0x00, 0xef, 0xea, 0xd2,
    0x53, 0x93, 0xe3, 0x6c, 0x50, 0xee, 0x95, 0x72, 0x12, 0x2c, 0xe5, 0x3a, 0x82, 0x06, 0x7b,
    0x5b, 0xb6, 0x46, 0xca, 0x95, 0x6f, 0xf5, 0x8e, 0x60, 0x89, 0x6a, 0x2b, 0x7d, 0x3f, 0xc1,
    0x89, 0xd5, 0xd6, 0x52, 0x79, 0xc4, 0x31, 0x94, 0xb3, 0x27, 0x72, 0x6b, 0xa0, 0xac, 0x63,
    0x71, 0x26, 0x4b, 0xb6, 0x33, 0x46, 0x6a, 0xaa, 0x9b, 0x18, 0xad, 0x83, 0x74, 0xaf, 0xaa,
    0x24, 0x89, 0xb5, 0x32, 0x25, 0xe2, 0x8e, 0xa5, 0xd3, 0xe5, 0x11, 0x85, 0x12, 0xaa, 0x44,
    0x45, 0xc4, 0x05, 0x2e, 0x26, 0x1b, 0x95, 0xd7, 0x6b, 0xf4, 0x06, 0x83, 0xf4, 0x7a, 0x8d,
    0xd8, 0xaa, 0x29, 0xce, 0xd8, 0xc5, 0x98, 0x7c, 0x59, 0x60, 0x03, 0x51, 0x70, 0x9e, 0xa8,
    0x56, 0x8f, 0x79, 0xf6, 0xec, 0x04, 0xa3, 0xff, 0x81, 0x3a, 0xed, 0xca, 0x4f, 0xea, 0xc9,
    0x3e, 0x73, 0x9d, 0x0f, 0x59, 0x10, 0xf5, 0x9a, 0x0b, 0x53, 0xc5, 0x77, 0x54, 0x7c, 0x54,
    0x52, 0x7f, 0xd5, 0x26, 0x16, 0x47, 0x6d, 0x15, 0xe6, 0x22, 0x25, 0x40, 0x44, 0x79, 0x0c,
    0xb4, 0x6f, 0x36, 0x34, 0x0e, 0xb3, 0x4d, 0xe8, 0x29, 0xa8, 0xcd, 0x20, 0x17, 0x55, 0xb1,
    0xbc, 0x10, 0x71, 0xfd, 0x42, 0xd0, 0x54, 0x31, 0x58, 0x6a, 0x34, 0xb8, 0x8b, 0x06, 0x05,
    0x11, 0x17, 0x6a, 0xa4, 0x73, 0xb0, 0xa5, 0xe2, 0x48, 0x09, 0xbb, 0xad, 0x2e, 0xa8, 0x14,
    0xa7, 0x9e, 0x9e, 0x83, 0xdb, 0x00, 0x40, 0x61, 0x9b, 0xb7, 0x35, 0x16, 0x47, 0x0f, 0x47,
    0xa5, 0xa7, 0x2a, 0xbd, 0xce, 0x78, 0xd0, 0x1f, 0xf7, 0xbb, 0x78, 0x7c, 0xd6, 0x1f, 0xcc,
    0xdd, 0xde, 0x74, 0x86, 0x87, 0x93, 0xc9, 0xe0, 0x74, 0x32, 0x51, 0xc7, 0x0a, 0x1e, 0xf4,
    0x67, 0x63, 0xa5, 0xdf, 0x39, 0xed, 0x8d, 0xc6, 0xa3, 0xde, 0x64, 0x78, 0x3a, 0x9a, 0x0d,
    0x7f, 0x3c, 0xee, 0xe3, 0x61, 0xe7, 0xe1, 0xa8, 0x8c, 0x34, 0xc6, 0xdf, 0x08, 0x65, 0x06,
    0x80, 0x93, 0x3f, 0x09, 0x7a, 0x38, 0x9a, 0x5a, 0x9b, 0x95, 0x6d, 0x3e, 0x1c, 0xb9, 0x7c,
    0x0a, 0xb6, 0x5c, 0x87, 0x8f, 0xb2, 0xc8, 0x42, 0x81, 0xec, 0x75, 0x7a, 0xc8, 0x50, 0x10,
    0x9d, 0xcb, 0x3d, 0x63, 0xc8, 0xe4, 0x26, 0x76, 0x87, 0xe2, 0xf4, 0x2c, 0xbe, 0x89, 0x3b,
    0x6d, 0xbb, 0xce, 0x7f, 0x0a, 0x8c, 0x53, 0x90, 0xd7, 0xe2, 0x21, 0x7e, 0xf9, 0x19, 0xce,
    0xc7, 0x50, 0xd8, 0x68, 0x3a, 0xd6, 0x14, 0xff, 0xa3, 0x1c, 0xfa, 0x7f, 0xc2, 0x8a, 0x0a,
    0x34, 0x40, 0x2e, 0xdd, 0x5f, 0x1c, 0x01, 0x6d, 0xd0, 0x6b, 0xef, 0x9f, 0x27, 0xf6, 0x37,
    0x0d, 0x52, 0xbc, 0x59, 0x10, 0xa6, 0x43, 0xf4, 0x4d, 0x03, 0xa4, 0xef, 0x8b, 0x13, 0xbc,
    0x04, 0x36, 0xf4, 0x63, 0xac, 0x5d, 0x74, 0xd3, 0x84, 0xdf, 0x81, 0xbe, 0xe8, 0xee, 0x9f,
    0x17, 0x25, 0x51, 0xf9, 0x8e, 0x52, 0xce, 0xef, 0x2f, 0x4b, 0xe5, 0x77, 0x8b, 0xa6, 0x06,
    0x38, 0x90, 0x18, 0x52, 0xec, 0xc3, 0x07, 0x90, 0xb7, 0xee, 0xcc, 0x9f, 0x65, 0xf6, 0x9a,
    0x39, 0x3b, 0x75, 0x2c, 0x0b, 0xfa, 0xca, 0x9a, 0xe4, 0x64, 0x45, 0xf5, 0xf5, 0xcc, 0xb4,
    0xaf, 0xdf, 0xa0, 0x99, 0x65, 0x2e, 0xd9, 0xaf, 0x1f, 0x8e, 0x4c, 0x42, 0x15, 0x3b, 0x33,
    0xee, 0x29, 0xa3, 0x55, 0x6e, 0x1d, 0x65, 0x0c, 0x71, 0x3d, 0x82, 0x49, 0x6e, 0xdd, 0xad,
    0x76, 0xeb, 0x8a, 0xf4, 0x90, 0x85, 0xa6, 0x4c, 0x77, 0xac, 0x2d, 0xf3, 0x7b, 0x7c, 0xcf,
    0x10, 0xd5, 0x73, 0xb2, 0x6d, 0xf3, 0x51, 0xa7, 0x87, 0xc7, 0x6b, 0xe2, 0xcf, 0x7a, 0xc7,
    0x6d, 0x38, 0xfb, 0x1d, 0x35, 0x89, 0x3f, 0x20, 0x98, 0xe1, 0x18, 0xe8, 0x1c, 0x6d, 0x73,
    0xa9, 0xce, 0xa6, 0x74, 0x77, 0x3c, 0x40, 0x1f, 0x8e, 0xa4, 0xbc, 0xba, 0xec, 0xcd, 0xb6,
    0xd6, 0x30, 0x95, 0xc1, 0x7c, 0xf6, 0xea, 0x8f, 0x8a, 0x65, 0x6e, 0x7a, 0xaf, 0xfb, 0x83,
    0xa1, 0x2b, 0x7b, 0x6d, 0xb8, 0x7b, 0xdf, 0x87, 0xd4, 0x6b, 0x4b, 0xb7, 0xc0, 0x22, 0x02,
    0x09, 0x6d, 0x29, 0xb2, 0x7b, 0x9e, 0xf8, 0x3f, 0xc7, 0x2f, 0x31, 0xeb, 0xf1, 0xc4, 0xfb,
    0x5d, 0xde, 0xdb, 0x1c, 0x7d, 0x92, 0xd2, 0x7a, 0xfd, 0x53, 0xb1, 0x43, 0x3b, 0xa7, 0xf4,
    0xc2, 0x29, 0x6d, 0x85, 0xf6, 0xbd, 0xe9, 0xca, 0x8e, 0xbe, 0x53, 0x8b, 0x28, 0x78, 0x96,
    0x82, 0x97, 0x06, 0xe4, 0x3d, 0x9f, 0x1b, 0x37, 0x93, 0x3f, 0xf1, 0xd4, 0x2e, 0x4e, 0x4f,
    0x58, 0x39, 0x76, 0x9c, 0x9e, 0xe9, 0xf4, 0xca, 0xa9, 0xf4, 0x3f, 0x28, 0xb6, 0xf2, 0x9c,
    0x3a, 0x90, 0xe8, 0x32, 0xcd, 0x43, 0x2b, 0x5e, 0x9d, 0xcd, 0x65, 0xc0, 0x42, 0xca, 0xb8,
    0x92, 0x36, 0xf6, 0x00, 0x06, 0xfc, 0x50, 0xb5, 0x2d, 0x71, 0x64, 0x5f, 0x40, 0xbd, 0xfd,
    0xbe, 0x37, 0x53, 0xb4, 0x5c, 0x95, 0xb5, 0xc7, 0x85, 0x9c, 0x3f, 0x26, 0x1a, 0xad, 0x0b,
    0x8b, 0x41, 0xae, 0x3f, 0x38, 0xde, 0x1d, 0xf4, 0xe2, 0x13, 0x00, 0xe4, 0x04, 0x22, 0x0c,
    0xdd, 0x21, 0xf3, 0x54, 0xee, 0x6d, 0xa4, 0x38, 0xb7, 0x27, 0x96, 0x26, 0x05, 0xc6, 0x0d,
    0xd1, 0xec, 0xc5, 0xfd, 0xc2, 0xc2, 0xf8, 0xa3, 0xce, 0x5b, 0x2d, 0x9c, 0x1b, 0xaa, 0x8f,
    0x73, 0x72, 0x87, 0xa7, 0xa6, 0xa1, 0x9e, 0x5b, 0x73, 0xd6, 0x39, 0x4b, 0xe6, 0x34, 0x35,
    0x75, 0x1d, 0xf3, 0xfe, 0xcb, 0x09, 0x8e, 0x24, 0xe6, 0x6f, 0x29, 0xe0, 0x22, 0xc4, 0xcc,
    0xc7, 0x99, 0x6c, 0x3b, 0x85, 0xc2, 0x6e, 0x87, 0xcb, 0x0c, 0x32, 0x73, 0x3e, 0x35, 0xe2,
    0x56, 0x35, 0xca, 0x35, 0x42, 0xcc, 0x3c, 0x9a, 0x35, 0x9c, 0xba, 0x5f, 0xeb, 0x4d, 0x09,
    0x13, 0x51, 0xa0, 0x19, 0x0c, 0x74, 0xfa, 0x81, 0x40, 0xb7, 0x0d, 0x77, 0x27, 0xec, 0xa6,
    0x41, 0x16, 0x9e, 0x61, 0x0b, 0x53, 0xe4, 0xb3, 0x8b, 0x12, 0x18, 0xc5, 0x44, 0xe1, 0xa3,
    0x69, 0xe8, 0xff, 0x62, 0x32, 0xa7, 0x8d, 0xf0, 0x47, 0x35, 0x4a, 0x25, 0xc6, 0xf8, 0x68,
    0xc8, 0x29, 0x77, 0xc8, 0x4e, 0xae, 0x5a, 0xd8, 0xb3, 0x53, 0xf5, 0x30, 0x30, 0x04, 0xbb,
    0xa1, 0x7a, 0x9e, 0x58, 0xbe, 0x91, 0x71, 0x6e, 0x8d, 0x21, 0x34, 0xbb, 0xa0, 0xce, 0x85,
    0x91, 0x4b, 0x1b, 0x3a, 0xce, 0x0e, 0x3b, 0x87, 0x37, 0x0f, 0x67, 0x28, 0x31, 0x25, 0x84,
    0x23, 0xfa, 0x53, 0x4a, 0xbd, 0xce, 0x2e, 0x87, 0x1f, 0xca, 0x3b, 0x85, 0x8e, 0x3e, 0x32,
    0x93, 0x79, 0xdc, 0x29, 0x31, 0x3c, 0x9d, 0xd0, 0xfe, 0xa2, 0xea, 0x1c, 0xc3, 0xba, 0x59,
    0x62, 0xc2, 0x06, 0x94, 0x80, 0xdd, 0x53, 0xf8, 0x48, 0xb7, 0x13, 0xee, 0x2c, 0x59, 0x5f,
    0x97, 0x67, 0xb9, 0x12, 0x1c, 0xd5, 0x14, 0xc5, 0x7d, 0x00, 0x47, 0xb5, 0xa0, 0x36, 0x4f,
    0x64, 0x24, 0x0b, 0x6e, 0xb2, 0x9b, 0xb0, 0x83, 0xac, 0xc9, 0x7b, 0x0f, 0x3c, 0x78, 0xf2,
    0xcf, 0xc8, 0xa5, 0x71, 0xe1, 0xfb, 0xa6, 0xb9, 0x3a, 0xd7, 0x16, 0xf6, 0x22, 0x3e, 0x07,
    0x2b, 0xb8, 0x5f, 0xb0, 0x75, 0x1d, 0x88, 0xe7, 0x3b, 0xac, 0x00, 0x0c, 0x95, 0x3a, 0x08,
    0xd8, 0x7d, 0xeb, 0x46, 0x4b, 0x39, 0x0a, 0x69, 0xbb, 0xac, 0xce, 0x61, 0x68, 0xc6, 0x1c,
    0x46, 0x8d, 0x16, 0xa1, 0x07, 0x2f, 0xd2, 0xe8, 0xc7, 0x2c, 0xc9, 0x41, 0xd7, 0xdd, 0x6e,
    0xb5, 0x5f, 0x92, 0xf6, 0x46, 0x62, 0x25, 0x49, 0xa1, 0xfc, 0xd1, 0x32, 0x97, 0x09, 0xa3,
    0x76, 0x8e, 0x08, 0x47, 0xc1, 0xc9, 0xb4, 0xa3, 0x99, 0xc7, 0x41, 0xf6, 0x84, 0xe8, 0x48,
    0xd1, 0x93, 0xaf, 0xac, 0x2a, 0x01, 0x23, 0xfe, 0x52, 0x19, 0xe7, 0x45, 0xf6, 0xa5, 0x46,
    0x7a, 0x9b, 0x6a, 0x88, 0x33, 0x99, 0x1c, 0x9a, 0x29, 0x2a, 0xd0, 0x8f, 0xb9, 0x7e, 0x6e,
    0x15, 0x5f, 0xfc, 0xba, 0xdc, 0x7e, 0xa5, 0xac, 0x5e, 0x78, 0x1d, 0x05, 0x78, 0x9d, 0xd2,
    0x0f, 0x39, 0x3d, 0xd5, 0xbb, 0x4a, 0xb3, 0x76, 0x99, 0x2e, 0x00, 0x44, 0xba, 0xbc, 0x38,
    0x2d, 0xcf, 0x5f, 0xad, 0x2a, 0x96, 0x20, 0x6b, 0xaf, 0x13, 0x41, 0xaa, 0xd9, 0xa0, 0x0e,
    0x87, 0x77, 0x5d, 0x4a, 0x37, 0x25, 0xd5, 0x9e, 0x0d, 0x10, 0x5e, 0x4e, 0xa2, 0x7e, 0xc0,
    0x8d, 0x93, 0xb6, 0xaa, 0x74, 0xfc, 0x0c, 0x26, 0x4a, 0x93, 0x04, 0xbd, 0x58, 0x1a, 0x8a,
    0x85, 0x64, 0x53, 0x08, 0xbb, 0x1f, 0xf1, 0xac, 0x50, 0x9e, 0x19, 0x8c, 0xd7, 0x28, 0xcc,
    0x51, 0x66, 0x08, 0x7c, 0x2f, 0xd9, 0x43, 0xa6, 0x80, 0xf1, 0x25, 0xa4, 0x9c, 0x5d, 0xbd,
    0xa1, 0xf6, 0xa5, 0xc8, 0xa1, 0x37, 0x7c, 0x02, 0xab, 0x29, 0x71, 0x9e, 0x6a, 0x4a, 0x66,
    0x11, 0x1f, 0x45, 0xfe, 0x07, 0xd3, 0x44, 0x6b, 0x73, 0xc5, 0xcf, 0x27, 0xf6, 0xa2, 0xec,
    0xdd, 0xb4, 0xad, 0x87, 0xb6, 0x2f, 0x96, 0x57, 0xd5, 0x3c, 0xbf, 0x5f, 0x84, 0xae, 0xe7,
    0x24, 0x43, 0x57, 0x53, 0x45, 0xc0, 0x8d, 0x62, 0x7b, 0x77, 0x1a, 0x97, 0xc6, 0x93, 0xf9,
    0xa4, 0x25, 0x48, 0x81, 0x67, 0x4f, 0x43, 0xbd, 0xdd, 0x5e, 0x60, 0x60, 0x64, 0x91, 0x58,
    0x4a, 0x7d, 0xa5, 0x79, 0x74, 0x60, 0x6d, 0x2e, 0x45, 0x7c, 0xe9, 0x85, 0xda, 0x41, 0x43,
    0x68, 0xe6, 0xcd, 0x2f, 0x3d, 0x64, 0x67, 0x55, 0x4a, 0xf9, 0x3f, 0x37, 0x95, 0xc8, 0xd4,
    0xed, 0x57, 0x19, 0x9d, 0xd4, 0x5d, 0x54, 0xaf, 0x2f, 0x11, 0xfb, 0x65, 0x22, 0x10, 0xa4,
    0x22, 0xf7, 0xee, 0xd7, 0xbe, 0x25, 0xa6, 0x1e, 0x6e, 0xf7, 0x6d, 0x3a, 0x76, 0xc2, 0xd6,
    0xd5, 0x5d, 0x8a, 0x0e, 0x11, 0xa8, 0xc0, 0x0b, 0xaf, 0xdf, 0xbd, 0x69, 0xf9, 0x37, 0xbc,
    0xab, 0xc1, 0x24, 0x98, 0xf6, 0x54, 0x15, 0xf6, 0x03, 0xf5, 0xcd, 0x45, 0x34, 0xa1, 0x62,
    0x77, 0xcb, 0x23, 0x15, 0x1e, 0xb5, 0x8e, 0xa5, 0x5e, 0x1e, 0x9b, 0xad, 0x51, 0x5b, 0x12,
    0x7d, 0x79, 0xbf, 0x82, 0x04, 0x56, 0x15, 0xcc, 0x4a, 0x7b, 0x15, 0x7f, 0x3f, 0xa1, 0x8f,
    0x54, 0xd2, 0x33, 0xc5, 0x64, 0xaf, 0x7b, 0x38, 0x4b, 0x28, 0xd3, 0x7e, 0x57, 0x5c, 0xe2,
    0x13, 0x9a, 0xaa, 0x26, 0x57, 0xed, 0x37, 0x22, 0xc5, 0xc6, 0x38, 0xa6, 0x00, 0xaa, 0x1a,
    0xb1, 0xdf, 0x88, 0x14, 0xd7, 0x1a, 0xc7, 0x94, 0x59, 0xd1, 0x84, 0x9a, 0xa8, 0x1a, 0xcb,
    0x27, 0xe6, 0xbe, 0xb8, 0xa5, 0xe5, 0xf9, 0x11, 0xf0, 0x62, 0xda, 0xb7, 0xfa, 0x1c, 0xc4,
    0x3f, 0x19, 0x35, 0x5d, 0x05, 0x37, 0x5d, 0xa2, 0xdf, 0x26, 0xfe, 0xa7, 0x08, 0x93, 0xe8,
    0x0c, 0x23, 0xb8, 0x5a, 0x93, 0xaf, 0x1b, 0x26, 0x23, 0xd8, 0x53, 0x6a, 0x45, 0x9b, 0x0f,
    0x44, 0xc0, 0xd9, 0x53, 0xd7, 0x97, 0xf2, 0x43, 0x2f, 0xf1, 0x55, 0xf9, 0xbb, 0x2f, 0x26,
    0x9b, 0xfb, 0xd4, 0x6e, 0xbe, 0xa0, 0x48, 0xdf, 0xb4, 0xd7, 0x33, 0xec, 0x9e, 0x0d, 0xcf,
    0x6f, 0x4e, 0xd6, 0x4b, 0x71, 0x0e, 0x3a, 0x74, 0xaf, 0x90, 0x22, 0x47, 0x62, 0x52, 0x95,
    0x7f, 0x5f, 0x94, 0x84, 0x42, 0x0a, 0xf6, 0x68, 0x55, 0x03, 0xa9, 0xf6, 0x1b, 0xb7, 0x23,
    0x72, 0x6c, 0xd0, 0xef, 0x09, 0xbd, 0xb7, 0x9a, 0x54, 0xf2, 0xbc, 0x57, 0x18, 0x20, 0xeb,
    0x32, 0x6d, 0x3c, 0xb5, 0xb1, 0x7a, 0x85, 0x99, 0x93, 0x5f, 0x48, 0xd1, 0x63, 0x06, 0xd9,
    0xb6, 0x57, 0xe4, 0x87, 0x77, 0xef, 0xe6, 0x9a, 0xbd, 0x70, 0x26, 0x27, 0x14, 0x91, 0xef,
    0x35, 0x61, 0x37, 0xb6, 0xef, 0x34, 0x42, 0x1c, 0x4c, 0xde, 0x8d, 0x3b, 0x41, 0x9f, 0xaf,
    0x85, 0x48, 0xdf, 0xcb, 0xbe, 0x5d, 0x86, 0x08, 0x2f, 0x25, 0xbb, 0xfd, 0xc3, 0xcb, 0x7a,
    0x75, 0x25, 0x2e, 0x25, 0xbd, 0xe6, 0x76, 0x57, 0x11, 0x19, 0x5a, 0x79, 0x14, 0x4f, 0x12,
    0x76, 0xb6, 0xad, 0x68, 0x13, 0xe2, 0xc5, 0xa7, 0x33, 0xb2, 0xd6, 0xec, 0xe9, 0x82, 0xbe,
    0x93, 0xbd, 0x0f, 0x36, 0x53, 0xf1, 0x11, 0x5b, 0x42, 0x96, 0xde, 0x02, 0xc9, 0x32, 0xbe,
    0x69, 0x5b, 0x03, 0x0d, 0x19, 0x85, 0x77, 0xe8, 0x4e, 0x0d, 0x25, 0xa5, 0x38, 0xd9, 0xd6,
    0x1a, 0xd0, 0x0d, 0xe5, 0xc6, 0x88, 0x76, 0xb3, 0xcd, 0x54, 0x1d, 0x6d, 0x8f, 0xe5, 0x54,
    0x55, 0x79, 0x55, 0x0c, 0x58, 0xfd, 0x62, 0xc5, 0x26, 0xc2, 0x55, 0x8a, 0x56, 0x39, 0xb7,
    0xbb, 0x99, 0x7a, 0x6e, 0x7d, 0x78, 0x63, 0x47, 0xd7, 0x44, 0x68, 0x0e, 0xcd, 0x27, 0x19,
    0x0e, 0xcf, 0x25, 0x19, 0x0d, 0x24, 0x0a, 0x03, 0x31, 0x29, 0xa1, 0xf5, 0x80, 0x39, 0xf9,
    0x60, 0xf5, 0x0d, 0x67, 0xae, 0xeb, 0x84, 0x2b, 0xad, 0xbd, 0xca, 0x5c, 0x4c, 0x94, 0x95,
    0x31, 0xbf, 0x55, 0xa0, 0x53, 0x13, 0x3f, 0xcf, 0x8f, 0xcf, 0x7a, 0x79, 0x04, 0xbc, 0x84,
    0x6d, 0xf0, 0xd8, 0xb2, 0xcd, 0x15, 0x92, 0x39, 0xf3, 0x9c, 0xf5, 0x64, 0xb2, 0xb8, 0xa2,
    0xab, 0x3f, 0xcc, 0xdb, 0x1b, 0x8c, 0xd3, 0xc3, 0x29, 0xa9, 0xe0, 0x3d, 0xe7, 0x38, 0x2f,
    0x98, 0xd8, 0xb3, 0x9c, 0x99, 0x66, 0xee, 0x88, 0x4a, 0x11, 0x6b, 0x48, 0x29, 0x05, 0x06,
    0xdf, 0x5c, 0xfa, 0x96, 0x46, 0x85, 0xba, 0xdd, 0xc4, 0x98, 0x6e, 0x32, 0x61, 0xea, 0x35,
    0x42, 0x80, 0x0f, 0xcd, 0x76, 0x76, 0xcf, 0xfa, 0x3b, 0xa4, 0x32, 0xd5, 0x22, 0x44, 0x55,
    0xcb, 0xfa, 0xe2, 0x76, 0xe1, 0x53, 0x4e, 0xee, 0x34, 0x6e, 0x68, 0xde, 0xe8, 0x06, 0x92,
    0x6e, 0x41, 0x40, 0x08, 0x80, 0x75, 0xe3, 0xd8, 0x02, 0xf3, 0x7b, 0x2c, 0x07, 0x9d, 0x9a,
    0x15, 0x91, 0x20, 0x81, 0x63, 0x57, 0x20, 0xf0, 0x53, 0x21, 0x0c, 0x9d, 0xeb, 0xfa, 0x3d,
    0x9a, 0x7c, 0xa4, 0xbe, 0x41, 0x33, 0x4e, 0x49, 0x19, 0x07, 0x6d, 0xa1, 0x3e, 0x4a, 0x53,
    0xa6, 0xbe, 0x59, 0x9a, 0xd6, 0x8a, 0x3e, 0xba, 0x6c, 0xec, 0xf4, 0x11, 0x02, 0xe2, 0xd0,
    0xe7, 0x60, 0x7c, 0x78, 0x87, 0x8e, 0xc1, 0x58, 0x7c, 0xe8, 0x20, 0xca, 0xe6, 0xe7, 0xf8,
    0x9f, 0x5d, 0x74, 0xe0, 0x2c, 0x69, 0xc2, 0x0f, 0x7b, 0x42, 0x28, 0xe6, 0x82, 0x91, 0x41,
    0x2b, 0xee, 0x41, 0x89, 0x49, 0x15, 0xed, 0x75, 0xae, 0x3b, 0x92, 0xf8, 0x78, 0x43, 0x60,
    0x93, 0x68, 0x6c, 0xea, 0xfa, 0x85, 0xfb, 0x33, 0xae, 0x6c, 0xdc, 0xe1, 0x0a, 0xe0, 0xcd,
    0x95, 0x9e, 0x6f, 0xb1, 0x6c, 0x8d, 0x11, 0xa2, 0x75, 0xe2, 0x48, 0xfa, 0xdb, 0x14, 0x50,
    0xde, 0xc9, 0x0b, 0x07, 0x22, 0xf6, 0x02, 0x2d, 0xa1, 0x76, 0xb9, 0x92, 0x97, 0x98, 0xd8,
    0x94, 0x00, 0x4e, 0xf0, 0x26, 0x4c, 0x31, 0xaa, 0x48, 0xce, 0x6b, 0x67, 0x1c, 0x74, 0x2c,
    0x12, 0xcd, 0xcd, 0xa4, 0x67, 0xa3, 0x35, 0x59, 0x1c, 0x80, 0xed, 0x11, 0xba, 0x4f, 0x40,
    0xa0, 0xa5, 0x3b, 0xef, 0x55, 0x72, 0xaf, 0x14, 0x2f, 0x75, 0x6c, 0xd5, 0xff, 0xb9, 0xaa,
    0x05, 0xc1, 0x40, 0xc8, 0x5e, 0xaf, 0x1b, 0x7b, 0xf1, 0x56, 0x09, 0xad, 0xab, 0x8e, 0xe3,
    0x30, 0x9c, 0x8b, 0x4f, 0xab, 0x3d, 0x69, 0x4b, 0x0c, 0xc7, 0xea, 0x49, 0x34, 0x70, 0x8b,
    0x4c, 0x76, 0x7f, 0x0d, 0x39, 0x1e, 0xda, 0xbd, 0x4b, 0x3d, 0xc5, 0xee, 0x23, 0xeb, 0x52,
    0xe5, 0xce, 0x84, 0xf1, 0xbb, 0x5e, 0x61, 0x15, 0x4d, 0x36, 0x48, 0xa5, 0xa4, 0x79, 0xc2,
    0x9d, 0x1f, 0xb4, 0x4b, 0x88, 0x12, 0x68, 0x47, 0x4a, 0xd2, 0x47, 0x2d, 0x4c, 0x58, 0xd3,
    0xaf, 0x82, 0x8d, 0x04, 0xc6, 0xde, 0xc2, 0x31, 0x4b, 0x23, 0x36, 0xfd, 0x68, 0xd6, 0x32,
    0x4b, 0x4c, 0x2a, 0xd8, 0xee, 0x2d, 0x92, 0x53, 0x91, 0x3c, 0x86, 0x52, 0xd2, 0xe8, 0xb2,
    0x1a, 0xe4, 0x95, 0x5d, 0x29, 0x2d, 0xab, 0x79, 0x9b, 0x27, 0xad, 0x84, 0xf4, 0x46, 0x8d,
    0xc9, 0x04, 0xf1, 0xdc, 0xbf, 0x34, 0x07, 0xcf, 0xad, 0x18, 0xbe, 0xa6, 0xd0, 0xa8, 0x7e,
    0x72, 0x35, 0x87, 0xb8, 0x64, 0xb7, 0xed, 0x13, 0xa6, 0x4a, 0x5f, 0x75, 0x58, 0xe9, 0x3e,
    0x98, 0x27, 0x11, 0x5a, 0xee, 0x76, 0xbb, 0x7d, 0xf4, 0x65, 0x81, 0x2d, 0x0c, 0x4d, 0x28,
    0x41, 0x08, 0xd1, 0x6f, 0xba, 0xd6, 0x63, 0x83, 0x00, 0xb7, 0x2a, 0x7a, 0xf0, 0xcc, 0xc9,
    0xe1, 0x08, 0xad, 0x59, 0xb3, 0x7b, 0x2a, 0x44, 0x94, 0x51, 0xa0, 0x79, 0x85, 0x06, 0x52,
    0xb4, 0x09, 0x1f, 0x5b, 0xa3, 0x9b, 0x8a, 0x8a, 0x6e, 0x37, 0x74, 0x21, 0x50, 0x14, 0x2a,
    0x72, 0x1c, 0x13, 0x51, 0xb7, 0x77, 0x47, 0x4f, 0x81, 0xf1, 0xee, 0x8f, 0x7b, 0xb1, 0x17,
    0xc6, 0x3b, 0x1b, 0x03, 0x7b, 0x7d, 0x29, 0x2f, 0x21, 0xdd, 0xfd, 0xb1, 0x38, 0x9f, 0x64,
    0xc5, 0x0a, 0xfb, 0x6d, 0xdb, 0xaf, 0xdb, 0x1b, 0x41, 0xa6, 0x38, 0x52, 0xba, 0xc1, 0xf6,
    0x61, 0xd2, 0x23, 0xca, 0x8d, 0x91, 0x7f, 0xae, 0x67, 0x76, 0xb2, 0xa6, 0x48, 0x4d, 0x3a,
    0x5d, 0x9b, 0xf2, 0xa1, 0x8a, 0x8d, 0x45, 0xb8, 0x02, 0x30, 0xec, 0x9d, 0x96, 0x11, 0xdd,
    0x0c, 0x2b, 0x6a, 0x7c, 0xd0, 0x68, 0xf4, 0x7f, 0x38, 0x14, 0xf3, 0x34, 0x1f, 0x58, 0x1d,
    0xc4, 0xb8, 0xb2, 0x0d, 0x90, 0x3f, 0x8d, 0x4b, 0x99, 0x01, 0xfb, 0x84, 0x09, 0xb6, 0xa8,
    0xfd, 0xc5, 0xb4, 0xd4, 0x06, 0xb9, 0x35, 0x01, 0x96, 0x43, 0xe3, 0xda, 0xf1, 0x30, 0x5e,
    0xb4, 0xef, 0x4c, 0x3b, 0x1e, 0x8a, 0x2b, 0x78, 0x14, 0x43, 0x4d, 0x8c, 0x56, 0xed, 0xd5,
    0x47, 0x12, 0x35, 0x8f, 0xfb, 0x9f, 0x03, 0x3a, 0x1e, 0x89, 0xa3, 0xec, 0xa0, 0x17, 0x2c,
    0xff, 0xb7, 0x7a, 0x2a, 0xae, 0x4d, 0xe0, 0x23, 0x15, 0xf7, 0x7f, 0xa7, 0x62, 0xbb, 0xa2,
    0x15, 0xed, 0x10, 0x68, 0x2a, 0xd6, 0x46, 0x13, 0x0b, 0x2b, 0x8f, 0xfb, 0xbf, 0xd3, 0x33,
    0x3e, 0x9a, 0x86, 0x87, 0x7a, 0xef, 0xed, 0x4e, 0xc5, 0x2a, 0x69, 0x6a, 0x1a, 0xb6, 0x66,
    0x83, 0x1a, 0xfb, 0xba, 0xd9, 0xb1, 0x58, 0x29, 0xa9, 0x78, 0x76, 0x00, 0xfb, 0x14, 0xab,
    0x15, 0xef, 0x7f, 0x03, 0x9f, 0xf1, 0x58, 0xac, 0x90, 0xb0, 0xae, 0xed, 0x3f, 0x41, 0xbb,
    0x8e, 0x58, 0x21, 0x61, 0x9d, 0xec, 0xbf, 0x88, 0xd2, 0x9d, 0x8a, 0x15, 0x12, 0xfe, 0x36,
    0xab, 0xfd, 0xb7, 0xa7, 0xdd, 0x4e, 0x57, 0xa6, 0x80, 0xd3, 0x80, 0x2c, 0xa0, 0x43, 0xd8,
    0x58, 0x29, 0xcd, 0x82, 0x0d, 0xe5, 0xf7, 0x77, 0xa3, 0x12, 0x6d, 0x17, 0x2c, 0x73, 0x79,
    0x3b, 0xed, 0x89, 0xb5, 0xd2, 0x5c, 0x37, 0x27, 0x87, 0xd0, 0x2b, 0xae, 0x23, 0x31, 0xaf,
    0x20, 0x2c, 0x4d, 0x5f, 0xac, 0x93, 0xe0, 0xba, 0xe6, 0x00, 0xce, 0xa8, 0x74, 0xaf, 0x62,
    0xa4, 0x19, 0x87, 0xb0, 0x4f, 0x89, 0x3e, 0x87, 0xfb, 0x7f, 0x96, 0xe9, 0x76, 0x06, 0x62,
    0xa4, 0x2b, 0xcb, 0x89, 0xaa, 0x1c, 0xc2, 0x5e, 0xc5, 0xfa, 0xc8, 0x30, 0x0d, 0x78, 0xfb,
    0x68, 0xdf, 0xa1, 0x58, 0x2b, 0x19, 0xe6, 0x21, 0xa8, 0x24, 0x89, 0x5b, 0x8a, 0x83, 0x70,
    0x24, 0x22, 0xdb, 0xab, 0x43, 0x08, 0xb0, 0x74, 0x3b, 0x12, 0xb1, 0x6d, 0x4b, 0xd1, 0x0e,
    0xec, 0x26, 0x11, 0xdf, 0xe6, 0xa9, 0xd6, 0x07, 0xb0, 0x57, 0x89, 0x00, 0xb7, 0x6d, 0x1d,
    0xb9, 0x4d, 0x22, 0xbe, 0xbd, 0x5e, 0xd0, 0x95, 0x0f, 0x61, 0xab, 0x62, 0xa5, 0xb4, 0xd6,
    0xc5, 0x01, 0xec, 0x54, 0x22, 0xc0, 0xbd, 0x61, 0xad, 0x01, 0xb7, 0x5b, 0x75, 0x7f, 0x4a,
    0x0c, 0x4f, 0xb8, 0x5d, 0x7e, 0x15, 0x58, 0x37, 0x76, 0x11, 0x7d, 0x87, 0xf5, 0xd9, 0x09,
    0x3c, 0x87, 0xbe, 0xda, 0xf0, 0xaf, 0xc0, 0xb6, 0x9a, 0xb8, 0x19, 0x4f, 0x00, 0xc8, 0xff,
    0x9e, 0x35, 0xf9, 0xeb, 0x8c, 0xcb, 0x69, 0xf2, 0x47, 0x82, 0x48, 0x70, 0x7f, 0x57, 0x72,
    0x4c, 0x53, 0x0d, 0xfb, 0x3a, 0xe3, 0x78, 0x0a, 0xfc, 0xbe, 0x67, 0x0a, 0xd0, 0x4d, 0x89,
    0x34, 0xdf, 0x64, 0xf1, 0xfa, 0xad, 0x04, 0xde, 0x48, 0xe7, 0x8e, 0x28, 0x7f, 0x24, 0x75,
    0x40, 0x7b, 0x54, 0xa9, 0x95, 0xa2, 0x26, 0xe0, 0xd7, 0x64, 0x05, 0x8d, 0x11, 0x7c, 0x8d,
    0x7e, 0x60, 0xaf, 0x13, 0x30, 0xe5, 0x38, 0x50, 0x6c, 0x53, 0x62, 0x9c, 0x53, 0x79, 0x1f,
    0x14, 0xfd, 0xfe, 0x9f, 0x6b, 0xc5, 0x9a, 0xb7, 0xce, 0xea, 0x70, 0xa8, 0xf6, 0xd5, 0xf4,
    0x3b, 0xe5, 0xcc, 0x56, 0x00, 0x49, 0x89, 0x71, 0x99, 0x74, 0xe3, 0xd8, 0x00, 0x6e, 0x79,
    0x10, 0x5f, 0x56, 0x5b, 0x6d, 0x92, 0xd2, 0xc7, 0x0b, 0x64, 0x71, 0xc8, 0x8b, 0xd6, 0x09,
    0x5d, 0x6a, 0x20, 0x21, 0xc6, 0x50, 0xb2, 0x43, 0x8f, 0xa5, 0x98, 0x69, 0x27, 0x6d, 0x14,
    0x84, 0xd4, 0x16, 0x1f, 0x38, 0x01, 0xaa, 0x98, 0x24, 0x54, 0xdf, 0xe9, 0x9d, 0x1e, 0xc4,
    0x3b, 0x68, 0xfb, 0xdc, 0x99, 0xa4, 0x2b, 0x31, 0x59, 0xfd, 0xc5, 0x79, 0x2b, 0xc1, 0x79,
    0xe2, 0xef, 0x34, 0x5d, 0x2a, 0x96, 0xe5, 0x88, 0x6a, 0xc8, 0x21, 0xc7, 0xb5, 0x8c, 0x6e,
    0x87, 0xb4, 0x11, 0xd9, 0x8e, 0xd7, 0x16, 0x78, 0x0b, 0xa4, 0x41, 0x57, 0x8a, 0x95, 0x3b,
    0xf6, 0x5f, 0x14, 0xa3, 0xe2, 0x93, 0x5f, 0xed, 0x7e, 0xf7, 0x27, 0x3c, 0xc3, 0x16, 0xa6,
    0x43, 0x17, 0x1e, 0xe8, 0x68, 0x7b, 0x07, 0xa5, 0x92, 0xea, 0xad, 0x32, 0x7d, 0x54, 0xe6,
    0x8f, 0x88, 0x14, 0xae, 0x69, 0xbc, 0xc3, 0x18, 0x29, 0x6b, 0xa2, 0x53, 0x06, 0x60, 0x75,
    0xdf, 0x75, 0xfb, 0x67, 0x32, 0x25, 0x85, 0x82, 0x2d, 0x54, 0xe7, 0xa5, 0x37, 0xe4, 0x83,
    0xcf, 0x0e, 0xb0, 0xea, 0xa7, 0x2b, 0x91, 0xdf, 0x0a, 0xf5, 0xa6, 0x3f, 0x46, 0xfb, 0xe3,
    0xda, 0xaa, 0x42, 0xf3, 0x2d, 0x12, 0x2b, 0x86, 0xc3, 0xfc, 0xe5, 0x6e, 0x5f, 0xc6, 0xcc,
    0x69, 0xf0, 0xb9, 0x2b, 0x91, 0x86, 0x4b, 0x94, 0x27, 0x1c, 0xa3, 0xc9, 0xce, 0x13, 0xe3,
    0x6a, 0x34, 0x24, 0xa6, 0x54, 0xa6, 0x33, 0x24, 0xe1, 0xa0, 0xc8, 0x2a, 0x9d, 0x5a, 0xcf,
    0x95, 0xc9, 0xa6, 0x4c, 0x46, 0x60, 0x84, 0x07, 0xf2, 0x0f, 0xae, 0x28, 0x42, 0xd0, 0x3c,
    0x8f, 0xe9, 0x8b, 0x5b, 0x4b, 0x7b, 0x52, 0x6c, 0x7c, 0xe9, 0x75, 0xd9, 0x60, 0x78, 0xbb,
    0xf9, 0x6e, 0x67, 0x21, 0xcb, 0xb7, 0xd5, 0x49, 0x47, 0x8a, 0x81, 0x34, 0x83, 0x92, 0x92,
    0x18, 0x5a, 0x2f, 0xd0, 0x7f, 0x3a, 0xc6, 0x5b, 0x4a, 0x4d, 0xd3, 0xb2, 0xbd, 0x6e, 0x1e,
    0xf1, 0x06, 0xfe, 0x66, 0x63, 0x43, 0x25, 0xe8, 0xeb, 0x47, 0xf7, 0x97, 0xef, 0x15, 0x82,
    0x48, 0xe1, 0xeb, 0x31, 0x52, 0x31, 0x7d, 0xd2, 0xa2, 0x5f, 0x50, 0xe8, 0x03, 0x97, 0x2e,
    0xfa, 0xc6, 0x87, 0x1e, 0xab, 0x5f, 0x4f, 0x42, 0x56, 0x55, 0x7a, 0xc6, 0x46, 0xbf, 0xd7,
    0x7d, 0x31, 0xa7, 0xcd, 0xfe, 0x19, 0xeb, 0x2b, 0x82, 0xb0, 0x41, 0x1c, 0x8b, 0x8f, 0x33,
    0xe5, 0xee, 0xf2, 0x12, 0x3d, 0x62, 0xcb, 0xc0, 0x3a, 0xfa, 0x6f, 0xc8, 0x72, 0x0c, 0x68,
    0x81, 0xa6, 0x26, 0x6f, 0x29, 0x02, 0x3f, 0x59, 0x16, 0x9e, 0xda, 0xfa, 0x06, 0xad, 0x17,
    0x88, 0xe2, 0x23, 0x84, 0x2a, 0x17, 0x3b, 0x1a, 0x41, 0x1c, 0x9f, 0xf4, 0xf7, 0x70, 0xa9,
    0x7f, 0xe1, 0xa3, 0x03, 0x18, 0x89, 0xa3, 0x8f, 0x3e, 0x45, 0xd7, 0x0a, 0x2c, 0xe4, 0xd2,
    0x98, 0x7e, 0xac, 0x32, 0xc8, 0xfc, 0xb5, 0x35, 0x63, 0x41, 0xb7, 0x65, 0x13, 0x04, 0xc9,
    0xa1, 0x6f, 0x49, 0x0f, 0x51, 0x97, 0x65, 0xa2, 0x83, 0xf3, 0x3d, 0x86, 0x09, 0x27, 0xfe,
    0x4a, 0xcc, 0x89, 0x94, 0x83, 0x8f, 0x79, 0x0d, 0x25, 0xc2, 0x05, 0xab, 0x24, 0x74, 0xed,
    0x03, 0x4b, 0xd4, 0x0b, 0x3b, 0x2a, 0x49, 0xd3, 0xb4, 0x2b, 0x9c, 0x6f, 0x18, 0x68, 0x77,
    0xad, 0x32, 0x41, 0x78, 0xa7, 0x0b, 0x4c, 0x77, 0x6e, 0xcc, 0xb9, 0x88, 0x83, 0xbc, 0xbe,
    0x3a, 0x16, 0x74, 0x91, 0x7e, 0x13, 0x16, 0x77, 0x72, 0x8c, 0x26, 0x8e, 0xdb, 0xa7, 0x48,
    0xec, 0xc9, 0x87, 0xa3, 0xa5, 0x69, 0xe1, 0x07, 0x43, 0x53, 0x35, 0x73, 0x49, 0x57, 0x99,
    0xe7, 0x12, 0x65, 0xc3, 0xfa, 0xa2, 0xf0, 0x53, 0x28, 0xb4, 0x30, 0x3a, 0x29, 0xa2, 0xe7,
    0x30, 0x59, 0xf7, 0x14, 0xdb, 0x04, 0x70, 0xa7, 0x8f, 0x5c, 0xf3, 0xac, 0xa9, 0x52, 0xa3,
    0x04, 0x92, 0xa0, 0xa8, 0x6a, 0x32, 0x30, 0x01, 0x4d, 0xc2, 0x5b, 0xbf, 0x82, 0x1a, 0x32,
    0x87, 0x8f, 0x10, 0x0c, 0x26, 0xd0, 0xc6, 0x89, 0xac, 0xf0, 0x54, 0x9b, 0x6d, 0x60, 0xa3,
    0x0d, 0xda, 0x9c, 0xd9, 0x87, 0xb7, 0xc0, 0x30, 0x48, 0xd5, 0x58, 0x3b, 0x17, 0xfa, 0x46,
    0x15, 0xb4, 0x25, 0x51, 0xfd, 0xd1, 0x81, 0xde, 0x60, 0x90, 0xde, 0xe0, 0x24, 0x09, 0xb2,
    0x0f, 0xfe, 0x11, 0x81, 0x0c, 0x50, 0xf2, 0x8a, 0x32, 0x86, 0x61, 0xb2, 0x16, 0x5b, 0x78,
    0xb2, 0xeb, 0xec, 0x7d, 0x24, 0xd5, 0x23, 0x5c, 0x22, 0x5d, 0x94, 0x9f, 0xf7, 0xa1, 0x75,
    0x2d, 0x0d, 0x52, 0x0e, 0x35, 0x20, 0x43, 0x71, 0x2d, 0x6e, 0x34, 0xc5, 0xe5, 0x39, 0x61,
    0xe2, 0xee, 0x0e, 0xee, 0x56, 0x86, 0xaf, 0x83, 0x8b, 0x17, 0x54, 0xd4, 0x9f, 0xa9, 0x77,
    0x42, 0xb7, 0x98, 0x8a, 0x62, 0x36, 0x79, 0x34, 0xd2, 0x16, 0x96, 0x7a, 0xdd, 0x93, 0xde,
    0x78, 0x78, 0x2d, 0x7f, 0xe9, 0xa6, 0xc4, 0x2a, 0xe1, 0x89, 0x63, 0x3c, 0x3a, 0x66, 0x67,
    0x6b, 0x87, 0xa4, 0x61, 0xa1, 0x32, 0x07, 0xf1, 0x44, 0xd3, 0x14, 0x79, 0x5a, 0xf6, 0x02,
    0x80, 0x1b, 0x34, 0x75, 0x25, 0x2b, 0x2e, 0x0c, 0x19, 0x26, 0x67, 0xcb, 0x7a, 0x69, 0x12,
    0x8f, 0x24, 0xd0, 0x79, 0xfc, 0x02, 0x8c, 0x38, 0xa8, 0xc3, 0xc6, 0x24, 0x26, 0x01, 0x96,
    0x3b, 0x32, 0xf4, 0xce, 0xe2, 0x63, 0x42, 0xf6, 0x5e, 0x24, 0x25, 0xba, 0x70, 0xf3, 0x3d,
    0x1d, 0xc9, 0x07, 0x3c, 0x53, 0x1c, 0x9d, 0x2a, 0xfa, 0x73, 0x6b, 0xee, 0x00, 0xc0, 0x25,
    0x27, 0xa0, 0xfe, 0x64, 0x37, 0x2e, 0xa3, 0x99, 0x21, 0xcf, 0x4c, 0x19, 0xce, 0x7f, 0x79,
    0x2c, 0x0d, 0x68, 0xaf, 0x32, 0x40, 0x93, 0x6e, 0x1a, 0x0b, 0x00, 0xda, 0xaf, 0x0c, 0x50,
    0x99, 0x0b, 0x41, 0x5d, 0x28, 0x74, 0xc9, 0x5a, 0x2e, 0x1f, 0x7d, 0x89, 0x9b, 0xae, 0xad,
    0x78, 0xb3, 0x97, 0xcf, 0x8d, 0x8d, 0x27, 0x21, 0xa5, 0x08, 0x48, 0x65, 0xd4, 0x54, 0x8c,
    0x0d, 0xec, 0x4b, 0x27, 0x66, 0xfa, 0xd9, 0xe6, 0x37, 0x02, 0x87, 0x64, 0x13, 0x3d, 0xd1,
    0x67, 0x1b, 0xfe, 0x97, 0xc6, 0x09, 0x0c, 0x11, 0xb5, 0x6d, 0x07, 0x58, 0xb7, 0xfb, 0xa7,
    0x29, 0xa4, 0x8c, 0x43, 0x50, 0x55, 0x1a, 0x54, 0x9c, 0x83, 0x98, 0xc0, 0x21, 0x55, 0x2b,
    0xd6, 0x28, 0xc8, 0x17, 0x05, 0x18, 0xfe, 0x34, 0xc1, 0xe5, 0x4b, 0xf0, 0x9d, 0x52, 0x5c,
    0x3b, 0x3c, 0x35, 0x0d, 0xf5, 0x57, 0xfc, 0x84, 0xf5, 0x0a, 0x83, 0x5a, 0x45, 0x1c, 0xc1,
    0x84, 0x0d, 0xc4, 0x74, 0xb6, 0x8d, 0x1f, 0x12, 0x32, 0x3e, 0xd2, 0x01, 0x6c, 0x4f, 0x68,
    0xd2, 0xfe, 0x9e, 0x20, 0xdd, 0x34, 0xe6, 0x2c, 0xe6, 0x6f, 0xe1, 0xff, 0x72, 0x34, 0x0b,
    0x2d, 0x0b, 0xf0, 0xc8, 0x74, 0x9d, 0x50, 0x31, 0xa6, 0x1b, 0xfe, 0xe4, 0x6e, 0x60, 0x2f,
    0x3d, 0x12, 0x54, 0xe2, 0x81, 0xdc, 0x8d, 0xe9, 0x7c, 0xaf, 0xeb, 0x48, 0xd1, 0x97, 0x26,
    0x91, 0x41, 0x39, 0xcc, 0xe2, 0xb1, 0x54, 0xcd, 0x6e, 0x1b, 0xe5, 0x7a, 0xe2, 0xce, 0xc5,
    0x72, 0x9e, 0xbd, 0x8a, 0x53, 0x2e, 0x7f, 0xd0, 0xa8, 0xb4, 0x4c, 0x9f, 0x3b, 0xfa, 0x4d,
    0x5f, 0xba, 0xb7, 0x60, 0xf7, 0x6b, 0x93, 0x0d, 0xdf, 0x2a, 0x74, 0xf6, 0x0d, 0xc4, 0xf1,
    0xbd, 0xdf, 0x54, 0xd7, 0xc0, 0x3a, 0xb3, 0x78, 0x38, 0xbf, 0x6e, 0xa3, 0x27, 0x58, 0x1b,
    0x1e, 0x52, 0xb5, 0x19, 0xbb, 0x2f, 0xb7, 0x21, 0x32, 0x4e, 0x69, 0xaf, 0x6f, 0xde, 0xc2,
    0x55, 0xb4, 0xb6, 0x94, 0x15, 0xc5, 0x18, 0x61, 0xc1, 0x7a, 0x08, 0xe6, 0x13, 0x8a, 0xc9,
    0xc3, 0x64, 0xb3, 0x3d, 0x4f, 0xd0, 0x6f, 0x06, 0xfd, 0xdc, 0x76, 0x0c, 0x76, 0xad, 0x71,
    0xa3, 0xfe, 0x6b, 0x8d, 0xf2, 0x0b, 0xeb, 0x5f, 0x87, 0xf8, 0x63, 0x88, 0x0a, 0x8a, 0x02,
    0xc8, 0x39, 0x4a, 0x9b, 0x41, 0x4c, 0x5e, 0xd5, 0x54, 0xe3, 0x7b, 0x1b, 0xa9, 0xe6, 0x83,
    0xef, 0x0a, 0x6c, 0xb7, 0x9b, 0x39, 0xff, 0xa6, 0x77, 0x33, 0xc9, 0x6e, 0x10, 0x59, 0x34,
    0x40, 0x83, 0x73, 0x76, 0x85, 0xf9, 0xf9, 0x0a, 0xfa, 0xa2, 0x5f, 0xfc, 0xfa, 0xa9, 0xd8,
    0x01, 0x26, 0x36, 0xbf, 0x21, 0x50, 0x10, 0x61, 0xb8, 0xdf, 0x5e, 0x41, 0x02, 0x82, 0x26,
    0x7b, 0xaf, 0xe9, 0x18, 0x2a, 0x65, 0x7b, 0x7b, 0x6d, 0x06, 0x10, 0xf5, 0xe3, 0xff, 0x75,
    0x75, 0x17, 0x99, 0x42, 0xd7, 0x43, 0x8b, 0x23, 0x74, 0x47, 0xbd, 0xb8, 0x79, 0xda, 0xf7,
    0x02, 0xdd, 0x94, 0x38, 0x04, 0xed, 0x5b, 0xfe, 0xb0, 0xc3, 0x9a, 0x3f, 0x4b, 0x37, 0x7e,
    0x68, 0x4c, 0xb0, 0xbd, 0xc6, 0xd8, 0xb8, 0x08, 0xf7, 0x48, 0x64, 0xb0, 0xe4, 0x32, 0x1d,
    0xc7, 0xb3, 0xc4, 0xb8, 0x10, 0x1f, 0xcf, 0xbd, 0xd2, 0xf1, 0xcc, 0xdb, 0x50, 0x6f, 0xaf,
    0x65, 0x30, 0x9d, 0xea, 0xf9, 0xa6, 0x08, 0x7c, 0xa6, 0xda, 0xb7, 0x01, 0xa3, 0xc5, 0xa6,
    0x07, 0x94, 0xbd, 0x44, 0x5e, 0x49, 0xaf, 0xdf, 0x2d, 0xa2, 0x3c, 0x3f, 0xb3, 0xa3, 0x2b,
    0x73, 0x63, 0x88, 0xb7, 0x07, 0x84, 0xe9, 0xd1, 0x8b, 0xd0, 0x73, 0x2b, 0x46, 0x0b, 0xea,
    0xe9, 0x90, 0xb3, 0xe1, 0x25, 0x94, 0xc8, 0xeb, 0x4a, 0x17, 0x19, 0x35, 0xeb, 0xaf, 0x6d,
    0xe1, 0x03, 0xd2, 0x5f, 0xe3, 0x91, 0x4c, 0xc7, 0xa2, 0x44, 0xb4, 0xb3, 0x67, 0x6a, 0xc9,
    0x6c, 0x4d, 0x65, 0x44, 0xc2, 0x34, 0x85, 0x5d, 0xc5, 0xdf, 0x45, 0xa6, 0x84, 0xd0, 0xb3,
    0xaa, 0x75, 0xe6, 0x71, 0x9f, 0x07, 0xe4, 0x15, 0x74, 0xea, 0x3c, 0x30, 0x1e, 0x4c, 0x52,
    0x19, 0xcc, 0x31, 0xf9, 0xc4, 0xa1, 0x4f, 0xcb, 0x16, 0xcf, 0xd3, 0xa4, 0xac, 0x6a, 0xe0,
    0x5a, 0xa6, 0xaa, 0x7d, 0xa4, 0xcf, 0xe3, 0x7f, 0xa4, 0xcb, 0xaf, 0x4f, 0xfd, 0xcb, 0xeb,
    0x7e, 0xfd, 0x78, 0x7f, 0x73, 0xfd, 0xc7, 0xe5, 0xf5, 0xbd, 0x4c, 0xd3, 0x87, 0x18, 0x5a,
    0x2c, 0x73, 0xc7, 0xcf, 0x18, 0x2f, 0xa6, 0x22, 0x8c, 0x8f, 0xba, 0xad, 0xc5, 0x20, 0x5e,
    0xba, 0xff, 0xd6, 0x62, 0x28, 0x8e, 0xfa, 0x06, 0xac, 0x45, 0x04, 0xf3, 0xec, 0xb1, 0xfa,
    0x86, 0x54, 0x8c, 0x75, 0x2f, 0x0c, 0xc6, 0x5d, 0x60, 0x27, 0x42, 0x05, 0xd0, 0xa8, 0xd9,
    0x38, 0xdf, 0x41, 0x4c, 0x9b, 0x30, 0x1c, 0x89, 0xf3, 0x4c, 0x6a, 0x33, 0x1c, 0xdd, 0x7e,
    0x34, 0x23, 0x50, 0x16, 0xb7, 0x1b, 0x77, 0xf7, 0x9f, 0xe8, 0xcf, 0xb9, 0x4c, 0x47, 0x00,
    0x69, 0xcc, 0xb3, 0xc4, 0xba, 0xbe, 0x69, 0x6b, 0x74, 0x3d, 0x08, 0x5c, 0x05, 0x81, 0x75,
    0x30, 0xb8, 0x41, 0x56, 0x25, 0x65, 0x22, 0x68, 0x07, 0x5b, 0x26, 0x29, 0x31, 0xd2, 0x6c,
    0x71, 0x77, 0x5c, 0xeb, 0x7c, 0xb8, 0xc3, 0x45, 0xf4, 0x50, 0x88, 0xe8, 0xe6, 0x66, 0xc7,
    0x99, 0xfc, 0x6e, 0xef, 0x17, 0xfa, 0xc9, 0xf8, 0x74, 0x54, 0x91, 0x25, 0x92, 0xd0, 0x1d,
    0x38, 0x0e, 0x2d, 0xac, 0xda, 0x1b, 0x9c, 0x1e, 0x9e, 0xa3, 0xd9, 0x1b, 0x9c, 0x89, 0xc3,
    0xdc, 0x33, 0xa3, 0xec, 0x6d, 0x6c, 0x96, 0xa6, 0x13, 0x49, 0x29, 0x28, 0xe6, 0xb6, 0xc5,
    0x44, 0x52, 0x87, 0xa8, 0xa7, 0x65, 0x3a, 0xee, 0x67, 0x98, 0x95, 0xe2, 0x5d, 0x5c, 0x31,
    0x51, 0xcb, 0x8b, 0x85, 0x4a, 0x0f, 0xb4, 0xf2, 0x65, 0x3d, 0x61, 0x2d, 0x46, 0x83, 0x74,
    0x28, 0xa2, 0x13, 0xd2, 0x54, 0x18, 0x53, 0xe8, 0x25, 0x8f, 0xbf, 0x24, 0xdc, 0x4a, 0x48,
    0xae, 0xc0, 0xdb, 0x4b, 0x50, 0x5a, 0xe1, 0xf7, 0x86, 0x30, 0x98, 0xbb, 0x45, 0x95, 0xbf,
    0x5a, 0x87, 0xaa, 0xe1, 0x38, 0xf1, 0x3d, 0x79, 0xfb, 0x53, 0x59, 0x58, 0x51, 0x4d, 0x83,
    0x57, 0xd1, 0x73, 0xa4, 0xac, 0x24, 0x0b, 0x7b, 0x99, 0x1c, 0x8b, 0xc1, 0x70, 0x2d, 0xfb,
    0x0f, 0x3c, 0x46, 0xa0, 0xd8, 0xad, 0x4a, 0x5d, 0x18, 0xd1, 0xac, 0xb5, 0x6b, 0x56, 0x0a,
    0x7d, 0x6a, 0x56, 0xd3, 0xae, 0x20, 0xca, 0x91, 0xc5, 0x55, 0x5c, 0x2a, 0x5f, 0x6e, 0xf7,
    0x92, 0x6e, 0xde, 0x28, 0xa3, 0x47, 0x92, 0x44, 0xb4, 0xa4, 0xa2, 0x48, 0x11, 0x76, 0x4a,
    0x38, 0x25, 0x50, 0x37, 0x14, 0xbb, 0x9b, 0x9e, 0xc0, 0xc6, 0xa6, 0x62, 0xb3, 0xa7, 0x9a,
    0xff, 0xdc, 0x08, 0xab, 0x0d, 0xc5, 0x37, 0xc3, 0x2e, 0x09, 0x93, 0xd1, 0x55, 0x30, 0xd5,
    0xae, 0x55, 0x72, 0x38, 0xef, 0x0c, 0xac, 0x72, 0x23, 0x48, 0x39, 0x0d, 0x5f, 0xf9, 0x81,
    0x81, 0x96, 0x1b, 0x25, 0xb9, 0xd1, 0xc5, 0xa3, 0x40, 0x22, 0xd6, 0xf3, 0x20, 0xbc, 0xb9,
    0xbf, 0xbc, 0xb9, 0xfe, 0xe3, 0xbc, 0x94, 0x96, 0xd7, 0x39, 0x5f, 0xfa, 0x5e, 0x5e, 0xd9,
    0xc6, 0x90, 0xd8, 0x13, 0x75, 0xc5, 0x90, 0x72, 0xf2, 0x53, 0x65, 0xd1, 0x23, 0x01, 0x5b,
    0xe2, 0x2d, 0x90, 0xc3, 0x18, 0x6d, 0x20, 0x76, 0xd4, 0x3e, 0xdb, 0x32, 0x10, 0x67, 0xe6,
    0x6b, 0x5b, 0xc4, 0x0a, 0x91, 0x9e, 0x30, 0x2e, 0x4c, 0xca, 0x2c, 0xdf, 0x2a, 0xce, 0xc2,
    0xed, 0xb3, 0xe8, 0xdf, 0x6f, 0xa7, 0xea, 0xe3, 0xf6, 0x86, 0xad, 0x33, 0x28, 0x94, 0xca,
    0x56, 0xbf, 0x3b, 0x5e, 0x7d, 0x81, 0x5b, 0x6d, 0xc8, 0xd2, 0xe5, 0xdc, 0xa5, 0xe0, 0x73,
    0x7b, 0xf4, 0x15, 0xb2, 0xed, 0xbe, 0xf2, 0xde, 0x1a, 0x50, 0xcb, 0xaf, 0x19, 0x90, 0xff,
    0xf6, 0x8f, 0xa6, 0x1c, 0x01, 0x52, 0x71, 0xfd, 0x10, 0xc6, 0x6a, 0xbe, 0x7c, 0x3b, 0x1b,
    0xab, 0xdb, 0xf7, 0x3d, 0x26, 0x42, 0x37, 0x25, 0x76, 0xc0, 0xa6, 0x8a, 0x71, 0x3e, 0x9d,
    0x42, 0x92, 0xd1, 0xcf, 0x9e, 0xad, 0xfa, 0x46, 0xab, 0xd8, 0xd1, 0x3c, 0x99, 0x6d, 0x0e,
    0x0b, 0xd3, 0xb8, 0x23, 0x56, 0x72, 0x1c, 0x5d, 0x9f, 0x15, 0x4b, 0x63, 0xea, 0x37, 0x1d,
    0xf5, 0xc6, 0x72, 0xd9, 0x9b, 0x4b, 0x0c, 0x82, 0xe4, 0x8d, 0xe1, 0xba, 0xef, 0xaf, 0x2e,
    0x5b, 0x20, 0x18, 0x22, 0xee, 0xd7, 0x3d, 0x1a, 0x97, 0xd3, 0xae, 0x3b, 0xe9, 0x1a, 0xfc,
    0x46, 0x45, 0x8c, 0xce, 0x6a, 0x08, 0x62, 0x47, 0x30, 0x17, 0xb0, 0x8f, 0xbf, 0x10, 0x58,
    0xa5, 0xb0, 0xbb, 0x96, 0x8e, 0xbf, 0xbc, 0xf6, 0xb2, 0xba, 0x91, 0x44, 0x61, 0x32, 0x87,
    0xaa, 0x60, 0x97, 0xe2, 0x44, 0xe4, 0x45, 0xf1, 0x72, 0x4f, 0xdd, 0x03, 0x78, 0x2d, 0x94,
    0x82, 0xab, 0x00, 0x89, 0xfe, 0xa6, 0x01, 0x9e, 0x02, 0x51, 0x36, 0x68, 0x81, 0x75, 0xdd,
    0xff, 0x38, 0x39, 0x8a, 0x2c, 0x12, 0xa9, 0x58, 0x0b, 0xc0, 0xce, 0xfe, 0x8e, 0xfd, 0x76,
    0x12, 0x39, 0x72, 0xc5, 0x11, 0x0f, 0xeb, 0x52, 0xe0, 0x54, 0xa2, 0xf1, 0xfb, 0x9f, 0x0e,
    0x93, 0x38, 0xb2, 0xf9, 0x46, 0xd4, 0x31, 0xdb, 0x21, 0xe3, 0x4a, 0x50, 0x3f, 0x97, 0x54,
    0x45, 0x75, 0x61, 0xf2, 0xfa, 0x1a, 0x82, 0x96, 0x54, 0x94, 0x14, 0x9d, 0x70, 0xef, 0x5b,
    0x75, 0x6a, 0xf3, 0x56, 0x59, 0x05, 0xbd, 0x0d, 0x94, 0x4e, 0x9d, 0x76, 0xc5, 0x79, 0x5f,
    0xcf, 0x3f, 0x95, 0xe8, 0xaf, 0x64, 0x46, 0xaf, 0x52, 0xe4, 0xa8, 0x34, 0xaa, 0xb5, 0x0a,
    0x03, 0x71, 0xe1, 0x03, 0xe3, 0xa5, 0x9b, 0xc9, 0x9f, 0xc5, 0xf0, 0x1f, 0x73, 0xbb, 0x3e,
    0x0e, 0xdd, 0xea, 0xbd, 0xc5, 0xfe, 0x6a, 0x88, 0x14, 0x79, 0x6c, 0xb6, 0x97, 0x55, 0xd2,
    0xd9, 0xe9, 0x88, 0xe3, 0xc0, 0xb1, 0x06, 0xbc, 0x85, 0x64, 0x67, 0x97, 0x20, 0x7a, 0xad,
    0x0f, 0xaa, 0xe7, 0x7c, 0x8d, 0x37, 0xa5, 0x38, 0xd0, 0x2f, 0x14, 0x82, 0x5b, 0x46, 0xb6,
    0x98, 0x6c, 0x7f, 0x99, 0xe6, 0x7b, 0xc5, 0x2a, 0x46, 0xb9, 0xa9, 0xa9, 0xeb, 0x98, 0xf5,
    0x4c, 0x32, 0x87, 0x98, 0xb7, 0x81, 0x2c, 0xe6, 0x20, 0xc5, 0xfc, 0x2d, 0xcf, 0xa5, 0x5f,
    0xab, 0xf2, 0x6b, 0xc6, 0x82, 0x35, 0xa5, 0x31, 0x11, 0x25, 0xd8, 0xb6, 0xa1, 0x9a, 0x20,
    0x25, 0xa5, 0xc8, 0xff, 0xdc, 0x5d, 0xbc, 0x6e, 0xff, 0x48, 0x66, 0x60, 0xbd, 0x5b, 0xec,
    0xb2, 0x86, 0xf6, 0x9c, 0x9b, 0x12, 0xc8, 0xd6, 0x1e, 0x77, 0x73, 0x20, 0x33, 0x81, 0xda,
    0xda, 0x84, 0xef, 0xbf, 0x61, 0xb7, 0x63, 0x9f, 0xbd, 0x8b, 0x91, 0x44, 0x87, 0xf8, 0x78,
    0xa1, 0xfa, 0x68, 0x7b, 0xc5, 0x09, 0xec, 0xaf, 0x22, 0xfb, 0x4d, 0x92, 0xac, 0x66, 0xb2,
    0xfb, 0xd5, 0xdc, 0x42, 0xca, 0x31, 0xa0, 0x07, 0x68, 0x39, 0x97, 0x90, 0xf9, 0xde, 0xf9,
    0x81, 0x77, 0x5e, 0xc8, 0xdd, 0x7b, 0x0a, 0x73, 0xe7, 0xe9, 0x13, 0x2b, 0x56, 0x1b, 0xcc,
    0xeb, 0x9b, 0xe3, 0xd8, 0x2d, 0x14, 0xd5, 0x85, 0x4a, 0x63, 0x90, 0xd4, 0xd4, 0x3d, 0xe0,
    0xbd, 0x71, 0x79, 0xca, 0xd6, 0x0f, 0xe1, 0xd2, 0x60, 0x24, 0x31, 0x29, 0x7b, 0x63, 0x3a,
    0x18, 0x5f, 0xd5, 0xae, 0xa3, 0x9d, 0xa9, 0x7d, 0x9e, 0x87, 0xdd, 0x4b, 0xa8, 0x15, 0x09,
    0x46, 0xc0, 0x15, 0xfc, 0xc2, 0x1b, 0x72, 0x10, 0xfa, 0x1c, 0xe3, 0x74, 0xd6, 0x3e, 0x48,
    0xdb, 0x7f, 0xf3, 0x9e, 0xa8, 0x84, 0xdd, 0x67, 0x9a, 0x0e, 0x14, 0x19, 0x52, 0x52, 0xc0,
    0x03, 0x6d, 0x6e, 0x98, 0x80, 0x03, 0xe4, 0x25, 0xdb, 0xa0, 0x19, 0x0c, 0xe3, 0x96, 0xeb,
    0xe1, 0x62, 0x20, 0x26, 0x08, 0xd5, 0x77, 0x7a, 0xea, 0xf9, 0x3e, 0x52, 0xa2, 0x30, 0x84,
    0x3a, 0xd8, 0x62, 0x14, 0x99, 0x84, 0xe6, 0x9e, 0x44, 0xf8, 0xc4, 0x6b, 0x34, 0x95, 0x54,
    0xf8, 0x52, 0x93, 0x92, 0x17, 0xdf, 0xe2, 0x4b, 0x4e, 0x4f, 0xd6, 0x12, 0x12, 0x6a, 0x2b,
    0x7a, 0x7b, 0x7e, 0xb4, 0x10, 0x47, 0x6d, 0x3d, 0x7c, 0x27, 0xf1, 0x7e, 0x93, 0xbd, 0xae,
    0x12, 0x7b, 0xdf, 0x0a, 0xeb, 0xc2, 0x93, 0x67, 0xa8, 0x4e, 0x37, 0x38, 0x3a, 0xa8, 0xd9,
    0x9f, 0xb0, 0xa5, 0x2b, 0x2b, 0x6e, 0x50, 0x90, 0xab, 0x71, 0xd1, 0xeb, 0x35, 0x9b, 0x2e,
    0x49, 0x4a, 0x28, 0xac, 0x53, 0x20, 0xf7, 0x86, 0xaa, 0xe1, 0x27, 0x4d, 0xc5, 0xea, 0x1b,
    0x3e, 0xb3, 0xa1, 0xb7, 0xd4, 0x82, 0x42, 0xcc, 0xae, 0xd5, 0xdc, 0x71, 0x3b, 0x5c, 0x51,
    0x2f, 0xab, 0x1a, 0x51, 0x96, 0x13, 0x6d, 0xee, 0x28, 0x36, 0x2b, 0x8b, 0x37, 0x03, 0xc1,
    0xa1, 0x41, 0x7a, 0xdf, 0x8c, 0x41, 0x4a, 0x1f, 0xab, 0x1c, 0x03, 0xeb, 0x79, 0x1b, 0xa4,
    0x4c, 0x85, 0xcd, 0x8b, 0x41, 0x2a, 0x0f, 0xdf, 0x62, 0x07, 0xc0, 0x53, 0x74, 0xef, 0xdd,
    0x99, 0x32, 0xb5, 0x60, 0x76, 0xe2, 0xcd, 0xf3, 0xa3, 0x46, 0x2e, 0x93, 0x14, 0x72, 0x64,
    0x43, 0x25, 0x0c, 0xed, 0xf0, 0xd6, 0x2d, 0x60, 0x98, 0x6e, 0xbd, 0x44, 0x8b, 0xfb, 0xf0,
    0x2b, 0x99, 0xb0, 0x44, 0xcf, 0x76, 0x3f, 0xa0, 0x94, 0x36, 0x2c, 0x91, 0x3c, 0xd1, 0x41,
    0xd3, 0x0b, 0x59, 0xb1, 0x22, 0xad, 0x58, 0x8e, 0xa1, 0x9f, 0xa2, 0xae, 0x18, 0xd4, 0x0c,
    0xbd, 0xee, 0x2c, 0xaa, 0x49, 0x8d, 0xd5, 0x66, 0x6d, 0x5a, 0x2a, 0xd2, 0xb5, 0x19, 0x9b,
    0xf4, 0x1a, 0x9f, 0xcc, 0x7f, 0x70, 0xc7, 0x34, 0xbd, 0x39, 0x46, 0x0b, 0xe5, 0x09, 0x3e,
    0xbc, 0x09, 0x4a, 0x3c, 0x7a, 0xb5, 0x9d, 0x0a, 0x05, 0xed, 0x21, 0x79, 0x4e, 0x09, 0x0c,
    0x42, 0x2b, 0x93, 0x68, 0xee, 0xc9, 0xcb, 0xcf, 0x5e, 0xa1, 0xc6, 0x93, 0x38, 0xba, 0xed,
    0x73, 0x74, 0xdb, 0xbe, 0xd0, 0xbf, 0x55, 0x8c, 0x26, 0x18, 0x96, 0xc7, 0x54, 0xc0, 0xec,
    0x6b, 0x58, 0xa1, 0x55, 0x0c, 0x53, 0xac, 0x01, 0x0b, 0xb9, 0x3d, 0xc8, 0xa7, 0x59, 0xc8,
    0x10, 0x9f, 0xb5, 0xb5, 0x1c, 0x9d, 0x8e, 0x53, 0xe1, 0xf1, 0xf3, 0xa1, 0x60, 0xa4, 0xe4,
    0x91, 0x2c, 0x84, 0x66, 0x89, 0xb2, 0x5f, 0xe0, 0x43, 0x52, 0xa3, 0x69, 0x94, 0x54, 0xc4,
    0x94, 0x3c, 0x00, 0x26, 0x12, 0x45, 0x0c, 0x2b, 0xc8, 0x5f, 0x1c, 0x02, 0x93, 0xc7, 0xa6,
    0xdc, 0x5c, 0xf3, 0xc1, 0x71, 0x79, 0x74, 0x10, 0x07, 0xf6, 0xd0, 0x62, 0xb3, 0xbd, 0xce,
    0x55, 0xe9, 0xf6, 0x2e, 0x31, 0x52, 0x99, 0xb3, 0xaa, 0x4e, 0xd1, 0x12, 0x03, 0x73, 0x17,
    0xfa, 0x4a, 0x31, 0x36, 0x9f, 0x15, 0xeb, 0xdc, 0x9a, 0x93, 0x0f, 0x9a, 0x7a, 0x79, 0x1b,
    0x31, 0x7b, 0x76, 0x97, 0x66, 0x57, 0x7f, 0x6c, 0x4d, 0xe2, 0xce, 0x99, 0x92, 0x65, 0xce,
    0xd0, 0x8c, 0x95, 0x13, 0xc3, 0x54, 0x26, 0x28, 0x31, 0xf6, 0xbf, 0x37, 0x57, 0xc1, 0xce,
    0x51, 0xb0, 0x62, 0x4b, 0x3f, 0x41, 0xfe, 0xbb, 0x1a, 0x4f, 0xa0, 0x8c, 0x6e, 0xa2, 0xcc,
    0x4f, 0x61, 0x11, 0x76, 0xe8, 0x5d, 0xe9, 0x97, 0xcc, 0x69, 0xb0, 0x17, 0xba, 0xd4, 0x6a,
    0x0c, 0x4e, 0x25, 0xca, 0xb2, 0x4c, 0xc7, 0x50, 0xef, 0x2d, 0x6d, 0x75, 0xa0, 0x9c, 0x5f,
    0xe3, 0x57, 0xc5, 0xd8, 0xb9, 0xe0, 0x28, 0xb3, 0x76, 0x27, 0x68, 0xe5, 0x32, 0xed, 0xf6,
    0x86, 0xc6, 0x53, 0x38, 0x9c, 0x25, 0x6e, 0x6e, 0xe0, 0x61, 0x12, 0x2c, 0x35, 0x9b, 0xce,
    0xf0, 0xf0, 0x9a, 0xa2, 0xd3, 0x4d, 0x89, 0x2b, 0xd5, 0x34, 0x92, 0x78, 0xbe, 0xaf, 0x67,
    0xa1, 0x63, 0x24, 0xe7, 0xdb, 0xf9, 0x5f, 0x8b, 0xbf, 0x3d, 0x0d, 0x0a, 0xff, 0x6b, 0x32,
    0x86, 0xed, 0x9f, 0x98, 0xd1, 0xdb, 0x6d, 0xf5, 0xf7, 0x29, 0xab, 0x27, 0x7c, 0xfa, 0x7b,
    0xb3, 0xe8, 0x53, 0x6d, 0x69, 0x89, 0x29, 0xa3, 0x84, 0x8a, 0x58, 0xd3, 0x26, 0x25, 0xe3,
    0x22, 0x57, 0x90, 0x44, 0x23, 0xe6, 0x1c, 0x89, 0x2f, 0x92, 0x91, 0x67, 0xf5, 0x67, 0x2b,
    0x02, 0xf3, 0x1c, 0xb6, 0x76, 0x99, 0x46, 0x1a, 0x26, 0xb7, 0xfd, 0xa2, 0x3c, 0x29, 0x9f,
    0x93, 0xe2, 0x09, 0xab, 0x5f, 0x4c, 0x4b, 0xcd, 0x55, 0x04, 0x5a, 0x4f, 0x73, 0xd0, 0x0c,
    0x1b, 0x88, 0xf3, 0x75, 0x06, 0xf1, 0x29, 0x01, 0x61, 0x0a, 0x08, 0x40, 0x7d, 0xd6, 0xf1,
    0x8e, 0xc4, 0x44, 0x6f, 0x95, 0x8f, 0x63, 0x7d, 0x89, 0xf8, 0x15, 0x43, 0xb4, 0x38, 0xaf,
    0xc4, 0xdb, 0x2a, 0x3c, 0x34, 0xfd, 0x85, 0x06, 0xa9, 0x34, 0x90, 0xb8, 0x9a, 0xe4, 0x57,
    0x2f, 0x34, 0xa8, 0x8e, 0x06, 0xe2, 0x0b, 0x49, 0xb8, 0xf9, 0x6a, 0x4f, 0x66, 0x4c, 0xae,
    0xf8, 0x89, 0x42, 0x70, 0xd8, 0x5c, 0x02, 0x56, 0xdc, 0x30, 0xcb, 0xc9, 0x85, 0xfb, 0x33,
    0xa1, 0xe4, 0x61, 0xd8, 0xdd, 0xed, 0xa4, 0x9d, 0x1c, 0x2b, 0x3f, 0x37, 0x90, 0xe9, 0xad,
    0xce, 0x76, 0x80, 0x81, 0x0e, 0x4b, 0xca, 0xcf, 0xda, 0x4a, 0xc7, 0x88, 0xd5, 0x15, 0xc8,
    0x5a, 0x06, 0xf3, 0xed, 0x5b, 0xd5, 0xfb, 0x21, 0xb5, 0x4d, 0x73, 0x80, 0xc1, 0x62, 0xa4,
    0x3b, 0x3c, 0x2f, 0x68, 0x5f, 0xde, 0x1d, 0x67, 0x64, 0x4e, 0x07, 0x31, 0xbb, 0x7b, 0xbe,
    0xe0, 0xb6, 0xfa, 0x8a, 0xdf, 0x90, 0x20, 0x8d, 0x0a, 0x1f, 0xab, 0x5d, 0xc3, 0x2a, 0x9a,
    0x90, 0x4a, 0x31, 0xff, 0x04, 0x23, 0x3c, 0x60, 0xa7, 0x40, 0xf5, 0x88, 0x3c, 0xee, 0x52,
    0x06, 0xdd, 0x09, 0xe8, 0xa3, 0x54, 0x45, 0x12, 0x9f, 0xc5, 0xd8, 0xa8, 0xc0, 0x2d, 0xdb,
    0x59, 0xa3, 0x46, 0x6c, 0xfa, 0xd1, 0xac, 0xc6, 0xf2, 0x42, 0x89, 0xe6, 0xdd, 0xbd, 0x8e,
    0x62, 0x73, 0xbb, 0xb7, 0x88, 0xf6, 0x79, 0xc2, 0x96, 0xa5, 0xa9, 0x8c, 0x4c, 0xf9, 0x25,
    0x2d, 0x91, 0x99, 0x2a, 0xf1, 0x1f, 0xec, 0x46, 0xf5, 0x9d, 0xbf, 0xf2, 0x5b, 0xba, 0xa9,
    0xcf, 0xac, 0x0a, 0x28, 0x97, 0xd1, 0x28, 0xaf, 0x74, 0x14, 0x28, 0x4d, 0xcf, 0xbf, 0x94,
    0xd0, 0x7a, 0xc2, 0x59, 0x96, 0x5b, 0xe3, 0x27, 0x45, 0x2e, 0xb1, 0xa9, 0x66, 0x00, 0xca,
    0xb9, 0x60, 0xc9, 0x67, 0x2e, 0x2a, 0xc5, 0xc0, 0x65, 0x4b, 0x78, 0x7a, 0x47, 0xb1, 0x2c,
    0xab, 0xd3, 0x75, 0x0e, 0xab, 0xb4, 0x5a, 0x99, 0x74, 0xfb, 0xd7, 0xda, 0x14, 0xc3, 0xd9,
    0xbd, 0xa3, 0xe9, 0x6a, 0xae, 0xc8, 0x6e, 0xdc, 0x52, 0xa5, 0xac, 0x09, 0xc7, 0xa7, 0xe0,
    0x5d, 0xb2, 0x9b, 0xcd, 0x92, 0xb1, 0x3a, 0xc9, 0x7b, 0x6a, 0xa7, 0x25, 0x12, 0x76, 0x21,
    0x75, 0xcf, 0xba, 0x89, 0xaf, 0x92, 0x6d, 0x43, 0x94, 0xd2, 0x31, 0x26, 0x28, 0xa7, 0xc4,
    0x52, 0xcd, 0xaf, 0x42, 0xa6, 0xec, 0x4c, 0x8b, 0x94, 0xe2, 0xc6, 0xf8, 0x70, 0x1b, 0xf0,
    0xa3, 0x52, 0x57, 0xfe, 0x8d, 0x5d, 0xfe, 0xbd, 0x40, 0xe6, 0x91, 0x7b, 0xd4, 0xe4, 0xae,
    0x34, 0xc1, 0xf9, 0x3a, 0x51, 0xac, 0xaf, 0x92, 0xdb, 0x72, 0xbf, 0x1c, 0xad, 0x10, 0xcf,
    0x1f, 0x5b, 0xb2, 0x79, 0x46, 0x48, 0x96, 0xf1, 0x81, 0x4c, 0x6f, 0xde, 0xad, 0x9b, 0xc0,
    0xb9, 0xfb, 0x78, 0xba, 0xc8, 0xce, 0x1b, 0x97, 0x95, 0x4c, 0xae, 0x0d, 0xaa, 0x42, 0x89,
    0xbc, 0xab, 0x5d, 0xd6, 0x06, 0x51, 0x33, 0x1c, 0x26, 0xa0, 0x92, 0xe8, 0xa0, 0x86, 0x3c,
    0x87, 0x2d, 0xd0, 0x03, 0x27, 0xb2, 0x50, 0xfa, 0x7d, 0x79, 0xa0, 0xb1, 0x57, 0x40, 0xe2,
    0x9f, 0xaf, 0x3b, 0x6b, 0xa4, 0x7b, 0x9a, 0xd1, 0x1a, 0x55, 0xa4, 0x7b, 0xab, 0xa8, 0xed,
    0xf7, 0x3f, 0xb2, 0xf4, 0x5a, 0xf3, 0x67, 0xd8, 0xee, 0x99, 0xc4, 0x54, 0x36, 0x55, 0xca,
    0xcc, 0x6d, 0x73, 0xd9, 0x62, 0x2f, 0x85, 0xf5, 0x09, 0x44, 0x39, 0x15, 0x13, 0x25, 0xa6,
    0x5a, 0xd8, 0x23, 0xa4, 0x6a, 0x17, 0x91, 0xb3, 0x53, 0xeb, 0x2e, 0x15, 0xb2, 0x80, 0x6d,
    0x56, 0xa1, 0x3b, 0xce, 0xad, 0x2b, 0x23, 0xb0, 0xd6, 0x7d, 0xad, 0x90, 0xae, 0x4c, 0x61,
    0x0a, 0xe2, 0xfa, 0xe0, 0x18, 0xe9, 0xda, 0x23, 0x46, 0x83, 0x5e, 0xcb, 0x34, 0xaa, 0xcc,
    0x6f, 0x12, 0xed, 0xfc, 0xd3, 0x9a, 0xf2, 0xc4, 0x40, 0x34, 0xe6, 0xbd, 0x63, 0x23, 0x56,
    0xb6, 0xc6, 0x30, 0x49, 0xf5, 0x18, 0xa9, 0x26, 0x2b, 0x47, 0xb3, 0x39, 0xe2, 0xe9, 0xa7,
    0xa6, 0x1a, 0xdf, 0xdb, 0xd4, 0xc1, 0xb3, 0x70, 0x29, 0x41, 0x99, 0x73, 0x03, 0x7d, 0xd5,
    0xaf, 0xbc, 0x8e, 0x9a, 0xbf, 0x5b, 0xa3, 0xc7, 0x76, 0xb0, 0x36, 0x94, 0x86, 0xe8, 0xfc,
    0x12, 0x2a, 0xb3, 0xb5, 0xb9, 0x71, 0xec, 0xe7, 0xd1, 0xf2, 0x1c, 0x7f, 0x83, 0x5f, 0x56,
    0x16, 0xf3, 0xb3, 0x53, 0x98, 0xfa, 0x2b, 0x52, 0x74, 0x68, 0x04, 0xbe, 0x41, 0x0b, 0x5e,
    0xe0, 0xd7, 0x0c, 0x00, 0x59, 0x54, 0xf6, 0xea, 0x96, 0xf1, 0x52, 0x57, 0xa2, 0xa5, 0x67,
    0x3a, 0x37, 0x19, 0x5f, 0x96, 0xf4, 0x00, 0xaa, 0x49, 0xda, 0x4a, 0x0e, 0x25, 0xbb, 0x05,
    0x73, 0x6c, 0x40, 0x34, 0x0b, 0xa3, 0x19, 0xc5, 0xf9, 0x06, 0x4d, 0x38, 0x68, 0xac, 0x4e,
    0x40, 0x65, 0xbd, 0xa0, 0xdc, 0x00, 0x23, 0x5a, 0x2f, 0xb4, 0xe9, 0x02, 0xd9, 0x0a, 0xe5,
    0x05, 0x2d, 0xb5, 0x6f, 0xc0, 0x55, 0x81, 0x62, 0x93, 0xff, 0xe6, 0xd5, 0xa7, 0x6c, 0x4f,
    0x72, 0x91, 0xe8, 0xbc, 0x31, 0x89, 0x7d, 0x0b, 0x12, 0x8c, 0xfa, 0x89, 0xaf, 0xaa, 0x2e,
    0x00, 0x84, 0xd9, 0x98, 0x0e, 0xa5, 0xdc, 0xc2, 0xa4, 0x58, 0xdd, 0xeb, 0x98, 0x81, 0x7f,
    0xe6, 0x96, 0xb6, 0xc8, 0x51, 0xb9, 0xea, 0xc3, 0xb0, 0xff, 0x73, 0x43, 0x1d, 0x9f, 0x7b,
    0x3f, 0x49, 0x50, 0xda, 0xa5, 0xc9, 0x10, 0xb3, 0x5a, 0x7b, 0xbd, 0x34, 0x62, 0x46, 0x24,
    0x09, 0xd5, 0xe5, 0x92, 0x54, 0x76, 0xb0, 0xce, 0xd2, 0x05, 0x2d, 0x20, 0x81, 0xc4, 0xf0,
    0xa8, 0x25, 0x6f, 0x09, 0x05, 0xda, 0x85, 0xc7, 0xa1, 0xd8, 0x23, 0x02, 0x79, 0xbe, 0x6c,
    0x57, 0xb4, 0x31, 0xa6, 0x9f, 0x35, 0xcb, 0x76, 0x14, 0xfd, 0xca, 0xcf, 0xce, 0xae, 0xc2,
    0x91, 0x70, 0x41, 0xe2, 0xa0, 0x54, 0xe7, 0x6c, 0x34, 0x63, 0x1b, 0xfa, 0xa7, 0xf1, 0x1c,
    0x61, 0x52, 0xbc, 0x42, 0x28, 0x62, 0xca, 0x38, 0xb9, 0xa6, 0xf2, 0x66, 0x35, 0xe2, 0xd0,
    0x13, 0xdf, 0x04, 0x53, 0xc2, 0xeb, 0xd8, 0xba, 0x24, 0xe7, 0x6c, 0x8f, 0xa1, 0x47, 0x2a,
    0x7a, 0xaa, 0x4f, 0x13, 0x55, 0x84, 0xdd, 0x53, 0xb1, 0xd9, 0xf4, 0xb0, 0x5b, 0x7e, 0x03,
    0x83, 0x47, 0xef, 0xa0, 0x27, 0x66, 0xde, 0xa5, 0xa9, 0x6a, 0xb3, 0xcd, 0x0d, 0x3d, 0xe5,
    0xc9, 0xb3, 0xbb, 0x76, 0xc9, 0x6c, 0x4f, 0x9a, 0x85, 0x92, 0x4e, 0x15, 0xb1, 0x29, 0x60,
    0xa7, 0xd2, 0xe9, 0xf7, 0xbd, 0xa7, 0x93, 0x44, 0x40, 0x8b, 0xd3, 0x89, 0x65, 0x10, 0xdc,
    0xee, 0x17, 0x29, 0x53, 0x29, 0x5f, 0x88, 0x15, 0xf8, 0x4a, 0x45, 0xc4, 0x92, 0xe8, 0xdb,
    0x41, 0xb0, 0xf3, 0x17, 0x55, 0x95, 0x07, 0xab, 0x7d, 0x99, 0x19, 0x83, 0x94, 0xd7, 0xf0,
    0xce, 0x50, 0x56, 0xb5, 0x4d, 0x34, 0xd9, 0x53, 0x2c, 0x77, 0xe5, 0xb1, 0xfc, 0x89, 0xf2,
    0x4d, 0xea, 0x44, 0xc7, 0x17, 0x44, 0x0b, 0x34, 0xba, 0xcc, 0x38, 0x66, 0x8e, 0x68, 0x91,
    0x7f, 0x41, 0x75, 0xb6, 0x0f, 0x39, 0x16, 0xf3, 0xf4, 0x53, 0xf0, 0x44, 0x56, 0xdc, 0x62,
    0x3b, 0x5b, 0x4b, 0xa9, 0x02, 0xf8, 0xa0, 0xb5, 0x7c, 0xb1, 0x21, 0x79, 0x2c, 0xb3, 0x38,
    0xb1, 0xb6, 0x34, 0x1b, 0x97, 0x50, 0xd5, 0x5c, 0xcc, 0x69, 0xca, 0xcd, 0x06, 0xaf, 0xa2,
    0x26, 0x14, 0x10, 0x66, 0x44, 0x1e, 0x0e, 0x3d, 0xfe, 0x3a, 0xe8, 0xca, 0xd4, 0xea, 0x54,
    0xa1, 0x78, 0x5f, 0x25, 0x46, 0xdc, 0x59, 0x4a, 0xd9, 0xaf, 0x90, 0x69, 0x55, 0x61, 0x20,
    0x83, 0x79, 0x81, 0x8a, 0x9d, 0x19, 0xec, 0x00, 0xf1, 0x36, 0xe8, 0x8a, 0x23, 0x10, 0x66,
    0x3b, 0xff, 0x3c, 0xa5, 0xb2, 0x3f, 0x16, 0x23, 0xcd, 0x4e, 0xf3, 0x16, 0x9f, 0x27, 0xca,
    0x3d, 0x71, 0x20, 0xf1, 0x89, 0xfb, 0xd9, 0x19, 0xa7, 0xc7, 0x8a, 0xaf, 0x29, 0xee, 0x17,
    0xb9, 0x6e, 0xb0, 0xa1, 0x8e, 0xf7, 0xfe, 0x43, 0xbb, 0x90, 0x18, 0x0d, 0xe3, 0xe9, 0x77,
    0xde, 0xa5, 0x67, 0x24, 0x55, 0xf9, 0x4a, 0xe9, 0xf9, 0xd1, 0xb2, 0x4c, 0x2b, 0x4e, 0x82,
    0x7f, 0xe8, 0x51, 0x3f, 0x8d, 0x39, 0xc3, 0x4d, 0xa8, 0xda, 0x96, 0xf2, 0x19, 0x01, 0x2f,
    0x60, 0x95, 0x27, 0x79, 0x76, 0xc7, 0x19, 0x85, 0x9a, 0x69, 0xd0, 0xb5, 0x27, 0xad, 0x93,
    0xc9, 0x87, 0xa4, 0x3c, 0xaf, 0x7d, 0x39, 0xcf, 0x01, 0x6c, 0xd9, 0x25, 0x7e, 0x47, 0x22,
    0xee, 0x6d, 0x60, 0xef, 0x5a, 0x4c, 0xa4, 0x53, 0xe7, 0x1c, 0xb1, 0xce, 0x3e, 0x50, 0x3f,
    0x8f, 0x29, 0x30, 0xc3, 0x80, 0xbe, 0x15, 0x13, 0xc2, 0x27, 0x11, 0x40, 0xca, 0x85, 0x37,
    0x27, 0x5e, 0xd5, 0xd2, 0x02, 0xa2, 0x49, 0x9c, 0xbe, 0x08, 0x9e, 0x9a, 0x86, 0xca, 0x84,
    0x86, 0x6e, 0x69, 0x8d, 0x8e, 0x32, 0x9a, 0x1c, 0xc5, 0xcf, 0xdc, 0x72, 0xa7, 0xee, 0x58,
    0x57, 0xea, 0x62, 0xf1, 0xcb, 0xfe, 0xed, 0xa6, 0x92, 0x7b, 0x08, 0x46, 0xcf, 0xf4, 0xd1,
    0x46, 0xf9, 0xc2, 0x2f, 0xf5, 0xf0, 0xe2, 0x3f, 0x4d, 0x07, 0xd1, 0x83, 0xf2, 0xf7, 0x36,
    0x0b, 0xc7, 0xc0, 0x92, 0x2b, 0x05, 0x38, 0x91, 0x2a, 0x90, 0xb6, 0xf1, 0x5d, 0x47, 0x1c,
    0xf1, 0xb3, 0x52, 0x42, 0xbf, 0x6d, 0x30, 0x57, 0xe5, 0xb7, 0xa5, 0x42, 0x1e, 0x2f, 0x16,
    0xfa, 0x58, 0xcc, 0x0f, 0xc4, 0x0c, 0x92, 0x94, 0xc6, 0xf3, 0xb0, 0x84, 0xd7, 0x75, 0xbe,
    0x3a, 0x1a, 0x86, 0x12, 0x77, 0x73, 0x66, 0xf7, 0x32, 0x58, 0x09, 0x4f, 0x03, 0x77, 0x2c,
    0x3e, 0x8a, 0x80, 0x5a, 0x88, 0x7e, 0x71, 0xa9, 0xb1, 0xfa, 0x77, 0x02, 0xc9, 0xeb, 0x68,
    0x9a, 0x3a, 0x7a, 0x6d, 0x98, 0x68, 0xe6, 0x18, 0x8f, 0x1b, 0xf4, 0xdb, 0xd5, 0xf9, 0xdd,
    0x52, 0x46, 0x5a, 0x1b, 0x6f, 0xa1, 0x14, 0x1a, 0xf2, 0xda, 0x17, 0xca, 0x6a, 0x85, 0x0d,
    0xbe, 0x91, 0xc9, 0xe5, 0x0d, 0xe0, 0xa9, 0x5e, 0x6f, 0xb2, 0x77, 0x3a, 0xac, 0xaa, 0x5f,
    0xbc, 0xa5, 0x26, 0x0b, 0xd3, 0xd1, 0x55, 0xc4, 0x03, 0xbe, 0xa8, 0x63, 0x8e, 0x06, 0x03,
    0xfa, 0xad, 0xb5, 0x7e, 0x6b, 0xbd, 0x85, 0xff, 0xbe, 0xa9, 0x7d, 0x8c, 0x2e, 0xc5, 0x8a,
    0xd8, 0x96, 0xa6, 0x1a, 0x69, 0xf5, 0xde, 0x58, 0xd7, 0x5f, 0x09, 0x87, 0x38, 0xc0, 0x61,
    0xb2, 0x6a, 0x50, 0x9a, 0x6c, 0x7b, 0x34, 0x04, 0xe5, 0x35, 0x59, 0x15, 0xcb, 0x96, 0xd1,
    0x76, 0x07, 0xa8, 0xbe, 0xcd, 0x0b, 0xfd, 0xaf, 0x82, 0xa0, 0xfd, 0x2b, 0x15, 0x5f, 0xf6,
    0x21, 0x35, 0xa3, 0x21, 0x82, 0x86, 0xea, 0x8e, 0x8f, 0x41, 0x61, 0x2c, 0xbd, 0xd7, 0x4b,
    0x53, 0xac, 0xc0, 0x7e, 0x6b, 0x51, 0x18, 0xe2, 0x72, 0x66, 0x84, 0xcb, 0xf6, 0x83, 0xa8,
    0x0b, 0x5c, 0xd4, 0x9b, 0xa6, 0x93, 0x3e, 0xc8, 0x30, 0x8d, 0x29, 0xf6, 0xfa, 0xaa, 0x41,
    0xd7, 0x48, 0x57, 0xe2, 0x84, 0x92, 0xc4, 0x22, 0x25, 0x37, 0x75, 0x11, 0x79, 0x19, 0xe0,
    0xdf, 0x06, 0x49, 0xd1, 0xae, 0xe3, 0x7c, 0x14, 0xbe, 0x06, 0xce, 0xf3, 0xdd, 0x6e, 0xdc,
    0x6f, 0x99, 0x3b, 0x05, 0xbc, 0xe7, 0xdc, 0xfe, 0x91, 0x62, 0x4c, 0x9c, 0x61, 0x2f, 0x59,
    0x50, 0xc9, 0xf9, 0x2e, 0x39, 0x15, 0x4d, 0xfe, 0x7c, 0x57, 0xed, 0x61, 0xf1, 0x5c, 0xd7,
    0xd9, 0xe6, 0xe2, 0x4b, 0x46, 0x3e, 0x69, 0xcb, 0x19, 0xb1, 0x65, 0xcc, 0x27, 0x4e, 0xf3,
    0x99, 0x66, 0xd1, 0x73, 0xde, 0x1e, 0x33, 0xe6, 0x2e, 0x5c, 0x24, 0x32, 0x23, 0xab, 0xa9,
    0xfe, 0xe2, 0x27, 0x3c, 0x83, 0x16, 0x07, 0x2e, 0xc9, 0xab, 0xb8, 0xbd, 0x48, 0xf6, 0x5e,
    0x1a, 0xc4, 0xb1, 0x30, 0x3d, 0x0e, 0x39, 0x93, 0x25, 0x63, 0xa6, 0xb7, 0xda, 0x12, 0x4a,
    0xb0, 0x8a, 0x18, 0x3d, 0xd0, 0xcc, 0x32, 0x97, 0x48, 0xc5, 0xf4, 0x58, 0xa9, 0x62, 0x63,
    0xb3, 0xd1, 0xa0, 0x12, 0x75, 0x82, 0x91, 0x43, 0xa0, 0x9d, 0x1d, 0x1f, 0x4d, 0xa6, 0x6f,
    0xbc, 0xdc, 0x84, 0xbd, 0xb6, 0xd2, 0xd5, 0xf5, 0x91, 0x41, 0xd2, 0x5c, 0xdd, 0x71, 0xe2,
    0xf2, 0x3a, 0xba, 0x2a, 0xd6, 0xf1, 0x5c, 0xb1, 0xa3, 0x59, 0x2e, 0xa9, 0x9e, 0x6e, 0x66,
    0x0c, 0x24, 0xee, 0x84, 0x11, 0x65, 0x74, 0xc5, 0xd8, 0x48, 0x89, 0x8c, 0xef, 0x33, 0x2c,
    0x95, 0x7c, 0x4a, 0x4d, 0x96, 0x73, 0xed, 0x3b, 0x1f, 0x61, 0x4c, 0x25, 0x7b, 0x69, 0x3e,
    0x4e, 0x2e, 0x83, 0xac, 0xe3, 0x49, 0x56, 0xb9, 0x1e, 0x7b, 0x1a, 0xed, 0xfd, 0x6b, 0xa3,
    0x97, 0x26, 0x8b, 0xbd, 0x65, 0xdc, 0x1a, 0xd6, 0x03, 0x60, 0x9f, 0xcc, 0x4a, 0xba, 0x9c,
    0xf1, 0x25, 0xbe, 0x35, 0xb6, 0x38, 0xbe, 0xcc, 0x88, 0x5b, 0x93, 0x3e, 0x62, 0x28, 0xbf,
    0xbf, 0xe5, 0xa0, 0x4f, 0xfe, 0xcb, 0x72, 0x19, 0xfd, 0x7d, 0xa6, 0x80, 0xc4, 0xdd, 0x01,
    0xda, 0x0a, 0x7a, 0xe1, 0xec, 0x97, 0xa1, 0x16, 0x49, 0x79, 0x04, 0x53, 0x82, 0x58, 0x15,
    0x80, 0x8c, 0xd1, 0x1a, 0x60, 0xfa, 0x48, 0x37, 0x18, 0xd3, 0x75, 0x31, 0x4d, 0x57, 0x7e,
    0x9f, 0xdf, 0x08, 0x7e, 0xef, 0x18, 0xaa, 0x8e, 0xd5, 0x0f, 0x9e, 0x09, 0xdd, 0x54, 0x64,
    0x25, 0xec, 0x6f, 0x12, 0x30, 0xd5, 0x19, 0xe0, 0x18, 0x40, 0xb5, 0x04, 0x97, 0xa9, 0x1b,
    0xbf, 0x45, 0xde, 0xf7, 0x5c, 0x05, 0xba, 0x29, 0x71, 0xbb, 0xfa, 0x78, 0xc2, 0x6c, 0xc1,
    0x70, 0xcc, 0x3d, 0x10, 0xc8, 0x40, 0xdc, 0x22, 0x26, 0x31, 0x5c, 0xba, 0xa4, 0x5c, 0xd0,
    0xdf, 0xf3, 0xf8, 0x6d, 0x7d, 0x0e, 0x30, 0x87, 0x8c, 0x07, 0x6e, 0x01, 0x2b, 0xdc, 0xe1,
    0xaa, 0x14, 0x08, 0x28, 0xf3, 0x51, 0xbd, 0xec, 0xa6, 0x18, 0x5a, 0xac, 0x28, 0x6b, 0xa2,
    0x53, 0x20, 0xd3, 0x3b, 0xdf, 0x75, 0x7b, 0x67, 0x52, 0xbe, 0x6f, 0x60, 0x7b, 0x87, 0x27,
    0xa3, 0xf8, 0x6c, 0xdf, 0xfd, 0x17, 0xb9, 0x91, 0x38, 0x47, 0x70, 0x81, 0x75, 0xdd, 0x2c,
    0x72, 0x69, 0xb6, 0x0c, 0x18, 0xef, 0x84, 0xf1, 0x4b, 0x51, 0x19, 0xf4, 0x19, 0x2f, 0x5d,
    0xc8, 0xa5, 0xe7, 0x90, 0x43, 0x8f, 0x91, 0xdd, 0xc2, 0x9a, 0x65, 0xdb, 0xaa, 0x54, 0x98,
    0x79, 0x66, 0x14, 0xf7, 0x16, 0x1a, 0x8e, 0x4f, 0x13, 0xdf, 0x94, 0xfb, 0x7a, 0x64, 0xf2,
    0xce, 0xab, 0x91, 0x2d, 0x5a, 0x2f, 0xd3, 0x70, 0x2a, 0xc1, 0x63, 0x0d, 0x35, 0xca, 0x19,
    0x77, 0x68, 0x86, 0xd0, 0x72, 0xe5, 0x32, 0x94, 0xc8, 0x3f, 0xfe, 0xd3, 0x21, 0x36, 0x54,
    0xbe, 0x94, 0xaa, 0xe5, 0x40, 0xec, 0xa8, 0x23, 0xf6, 0x93, 0xa0, 0x4c, 0xe5, 0x8e, 0x21,
    0xdc, 0x50, 0xaf, 0x79, 0xac, 0x2f, 0xf4, 0xe0, 0x2e, 0xd5, 0x4a, 0xf8, 0x5b, 0xb1, 0x49,
    0x69, 0x82, 0xf9, 0xf1, 0x9b, 0x8d, 0x0d, 0x36, 0x02, 0x21, 0xb2, 0x48, 0x3d, 0x15, 0x6d,
    0x80, 0x61, 0xc4, 0x41, 0x6f, 0x5e, 0xd1, 0x66, 0xa8, 0x71, 0x69, 0xdc, 0x83, 0x66, 0x00,
    0x30, 0x43, 0x96, 0x3b, 0x22, 0xb6, 0xeb, 0x7b, 0x7d, 0xc3, 0x2d, 0xa5, 0xfe, 0xc5, 0x51,
    0xa8, 0x95, 0xcf, 0x8e, 0x7a, 0xe5, 0xb3, 0xf0, 0xf2, 0xf1, 0x8b, 0xcf, 0x6e, 0xa7, 0xf4,
    0xe3, 0xc9, 0x7c, 0x6c, 0xb0, 0xb0, 0x22, 0x0a, 0xc7, 0x9e, 0xba, 0x80, 0xa3, 0x82, 0x23,
    0xfc, 0x34, 0xb0, 0x78, 0x99, 0x75, 0x1e, 0x2f, 0xd0, 0xc3, 0xa6, 0x5b, 0xad, 0xdd, 0x5e,
    0x6f, 0x74, 0x16, 0x4f, 0x8f, 0xd9, 0x77, 0xdf, 0x6f, 0x74, 0x26, 0xb6, 0x38, 0x0a, 0x39,
    0x11, 0xc8, 0x72, 0x8c, 0x4d, 0x14, 0x12, 0x79, 0x6b, 0x93, 0x52, 0x45, 0x1d, 0x5b, 0x2e,
    0x00, 0x43, 0xa9, 0xd6, 0xa8, 0xec, 0xfb, 0xaf, 0x1c, 0x19, 0x08, 0x59, 0xa1, 0xe1, 0xcc,
    0xb0, 0xd0, 0x8e, 0xd3, 0xf0, 0x94, 0x6e, 0x2f, 0xa3, 0x8a, 0x4f, 0xa0, 0xa7, 0x5d, 0x89,
    0x5a, 0x4d, 0x47, 0xda, 0x40, 0xec, 0x9b, 0x96, 0x1e, 0x15, 0x3b, 0xa8, 0x4b, 0x0d, 0x53,
    0x59, 0x78, 0xa6, 0x7d, 0xe3, 0x43, 0xdb, 0xd6, 0x9a, 0xae, 0xbb, 0x57, 0xea, 0x3c, 0xc0,
    0xff, 0xc9, 0x25, 0xd7, 0xcd, 0x4f, 0xe6, 0x33, 0xe4, 0xbe, 0x7e, 0xe7, 0xea, 0x05, 0xd9,
    0x3c, 0xfc, 0x1d, 0xb2, 0x66, 0x42, 0x9c, 0x18, 0x1c, 0x59, 0x68, 0x2f, 0xc7, 0xae, 0x8c,
    0x07, 0x58, 0xca, 0x78, 0x2a, 0xee, 0x85, 0x53, 0xd8, 0xa4, 0xa4, 0x70, 0x75, 0x98, 0xaf,
    0x86, 0x61, 0xa6, 0x59, 0xc4, 0x46, 0xae, 0x2e, 0x86, 0x8e, 0xb6, 0xf0, 0x21, 0x53, 0x9b,
    0xea, 0x42, 0xd9, 0xdc, 0xe7, 0xe9, 0xd7, 0xca, 0x0c, 0x5a, 0xd7, 0xc3, 0xef, 0xbf, 0x72,
    0xfd, 0xea, 0x4d, 0x59, 0x52, 0x11, 0x95, 0x0b, 0xbf, 0x29, 0x3e, 0xab, 0xdc, 0xa2, 0xc8,
    0x73, 0x22, 0xb6, 0x45, 0x7e, 0xaa, 0x12, 0x80, 0x51, 0x6d, 0xff, 0x90, 0xe3, 0x12, 0x30,
    0x6a, 0xf3, 0x3d, 0x6c, 0x11, 0x17, 0x43, 0x9a, 0x31, 0xd5, 0x1d, 0x40, 0x82, 0x66, 0x6c,
    0x97, 0x63, 0xef, 0x6c, 0xd1, 0x17, 0xb3, 0x9f, 0x6b, 0x7b, 0xad, 0x34, 0xfb, 0x41, 0x0f,
    0xc1, 0xea, 0x07, 0x9b, 0xd1, 0xdc, 0xea, 0xca, 0x66, 0x6e, 0x99, 0x8e, 0xd1, 0xa0, 0xf9,
    0x81, 0xe7, 0xd0, 0x2e, 0xbc, 0x06, 0xbb, 0x94, 0xc3, 0xef, 0x6b, 0x7f, 0xde, 0xc1, 0xa9,
    0x0d, 0xa0, 0x9b, 0x2a, 0x72, 0x85, 0x13, 0x3a, 0xf4, 0xee, 0x72, 0x6e, 0xa1, 0x54, 0xc4,
    0xc7, 0xa5, 0x64, 0xe5, 0x5d, 0x9e, 0x7e, 0x7a, 0x66, 0x3d, 0xc0, 0xce, 0xc4, 0x1d, 0x8d,
    0xfc, 0x70, 0xf7, 0xc2, 0x0e, 0x05, 0xd9, 0x61, 0x6f, 0xf5, 0xc6, 0x50, 0x7c, 0x15, 0x03,
    0x40, 0x6d, 0xbb, 0x7e, 0xe7, 0x2c, 0x4b, 0x52, 0x1c, 0x53, 0x6a, 0x70, 0x2a, 0xf6, 0xfa,
    0x38, 0xa5, 0x74, 0x4e, 0x11, 0x77, 0x62, 0xe1, 0xdd, 0x19, 0x5e, 0xf8, 0xe4, 0x39, 0x18,
    0x91, 0x58, 0x71, 0xd0, 0x03, 0x54, 0x39, 0x96, 0xe5, 0x59, 0xf0, 0xc1, 0xab, 0xc8, 0xdb,
    0xc7, 0x8c, 0x14, 0x87, 0x9d, 0x3d, 0x97, 0x70, 0xde, 0x30, 0x35, 0xf5, 0x82, 0x2a, 0xec,
    0x12, 0xe9, 0xad, 0xb0, 0x5b, 0xad, 0x76, 0xfc, 0xf0, 0x11, 0x98, 0xdc, 0xf7, 0x16, 0x5d,
    0x56, 0xe1, 0x31, 0x84, 0xaf, 0x5b, 0x7f, 0xe2, 0x2b, 0x7a, 0xcd, 0x3d, 0x6d, 0xa4, 0x9a,
    0x20, 0xc3, 0xdc, 0x36, 0xd1, 0x50, 0x4d, 0xa4, 0x18, 0x1b, 0x7b, 0xa1, 0x19, 0xf3, 0x37,
    0x0f, 0x06, 0x5d, 0x80, 0xc5, 0x4c, 0xd1, 0x57, 0x68, 0x1b, 0x48, 0xbf, 0x09, 0x1f, 0x7d,
    0x5c, 0x3d, 0xdb, 0xf0, 0xa8, 0xdb, 0x57, 0xbe, 0xd0, 0x17, 0x85, 0xc0, 0x9e, 0xb0, 0xfa,
    0xba, 0xf7, 0x7c, 0x85, 0x0d, 0x7c, 0x0d, 0x4e, 0x02, 0xcc, 0x9d, 0x51, 0xc8, 0xda, 0x0b,
    0x64, 0x41, 0xfa, 0x37, 0xab, 0x92, 0xa1, 0xc0, 0x3d, 0xd1, 0x53, 0x8f, 0x0a, 0xa3, 0xdb,
    0x38, 0x6f, 0x51, 0x9e, 0xa3, 0x6b, 0xf0, 0x52, 0x1a, 0xb7, 0x03, 0x81, 0x5f, 0x49, 0xc3,
    0x10, 0x15, 0xf4, 0x44, 0x91, 0x8d, 0xa6, 0x2e, 0xb6, 0x65, 0x52, 0x0c, 0x43, 0xd4, 0x39,
    0x23, 0x57, 0x77, 0xdc, 0x3b, 0xbc, 0xb8, 0x1d, 0xdd, 0x94, 0xf8, 0x6c, 0xc5, 0xb9, 0x37,
    0xf6, 0x1d, 0xb6, 0xfe, 0x75, 0xd4, 0x25, 0x56, 0x85, 0x87, 0x7e, 0x9e, 0x33, 0x45, 0x44,
    0x5b, 0xa6, 0x4d, 0x05, 0x07, 0xab, 0x39, 0xa2, 0x2b, 0x89, 0x92, 0x72, 0xe8, 0x59, 0x07,
    0xdb, 0xc4, 0x37, 0x8f, 0x11, 0x9d, 0x98, 0xbb, 0x03, 0xd8, 0xc4, 0x34, 0x75, 0xac, 0x84,
    0x95, 0xe4, 0xb3, 0x0d, 0x78, 0xc6, 0x82, 0xf6, 0x44, 0xf5, 0xa4, 0xd7, 0x3e, 0xf2, 0xd2,
    0xd8, 0x4e, 0x46, 0xad, 0x28, 0xb0, 0x95, 0xac, 0xc6, 0x99, 0xa9, 0x80, 0x7a, 0x47, 0x66,
    0x56, 0x1c, 0x2c, 0x6f, 0xb8, 0xe1, 0x06, 0xa9, 0x98, 0xea, 0x3b, 0xde, 0x9a, 0x81, 0x0d,
    0x0c, 0x0e, 0x70, 0x55, 0xac, 0xb9, 0xc3, 0xc3, 0xb9, 0xd0, 0xb6, 0x67, 0xa1, 0xa9, 0x2a,
    0x64, 0x34, 0xb8, 0x70, 0xff, 0x7b, 0x7a, 0xa1, 0x46, 0xe5, 0xbb, 0x9c, 0xd4, 0x57, 0x97,
    0x3f, 0x42, 0x5f, 0xbd, 0x28, 0x97, 0x67, 0x54, 0x22, 0xcb, 0xba, 0x54, 0xf2, 0x09, 0x4e,
    0xe5, 0x43, 0x50, 0x44, 0xa6, 0xd7, 0x1f, 0xca, 0x73, 0xcf, 0xe1, 0x6b, 0xba, 0xbe, 0x38,
    0x96, 0x38, 0xd3, 0x29, 0x26, 0xa4, 0x5e, 0x0d, 0x07, 0xd0, 0xbb, 0x43, 0x78, 0x4f, 0x2e,
    0x9f, 0xf1, 0x9e, 0xf7, 0x3f, 0x72, 0x01, 0x0d, 0x74, 0x41, 0xe2, 0xbb, 0x84, 0x06, 0x98,
    0x95, 0x35, 0x10, 0x5d, 0x06, 0x9a, 0x2d, 0xb2, 0x0e, 0x49, 0x33, 0xc4, 0xaf, 0xbc, 0xfc,
    0xa5, 0x06, 0x0f, 0x0b, 0x10, 0x97, 0xa6, 0x18, 0xcb, 0x96, 0x4f, 0x51, 0x3b, 0x9f, 0x7e,
    0x85, 0x30, 0x11, 0x9e, 0x0f, 0x4e, 0x96, 0x67, 0xfa, 0x8b, 0x9e, 0x28, 0x00, 0xdb, 0xf0,
    0xed, 0x62, 0x1c, 0x0e, 0x1d, 0x2c, 0xa1, 0xa0, 0xdc, 0xae, 0x66, 0x32, 0xcd, 0x7c, 0x24,
    0x86, 0xda, 0x26, 0x07, 0x3c, 0x6f, 0xf9, 0x69, 0x9c, 0xfc, 0xec, 0x8b, 0xcd, 0x27, 0xb9,
    0x31, 0x28, 0x3c, 0x43, 0x56, 0xd0, 0x76, 0x87, 0x45, 0x1f, 0x7c, 0xae, 0xae, 0xba, 0x03,
    0xe0, 0x68, 0x7d, 0xe5, 0xd0, 0xb3, 0x29, 0xdc, 0x32, 0x7b, 0x07, 0x6c, 0x9e, 0x5e, 0xa2,
    0x16, 0x7b, 0x82, 0x9e, 0x0e, 0x7c, 0x82, 0xf8, 0x49, 0x8c, 0xd1, 0x76, 0x6a, 0xb5, 0x87,
    0xc2, 0xcf, 0x5c, 0x29, 0xe8, 0x73, 0x19, 0x52, 0x16, 0x06, 0xd1, 0x08, 0xf5, 0x95, 0xcc,
    0x8d, 0xdd, 0x2f, 0xa5, 0x58, 0x57, 0x1c, 0x96, 0xdc, 0xee, 0xad, 0xca, 0x56, 0x54, 0x25,
    0xf1, 0xb2, 0xc9, 0x24, 0xd2, 0x0f, 0x4d, 0x50, 0x60, 0x28, 0x56, 0x1e, 0x09, 0x55, 0xaf,
    0xcd, 0xf1, 0x39, 0xfe, 0xa5, 0x96, 0x4c, 0x8f, 0x48, 0xa7, 0xd1, 0x39, 0x22, 0x98, 0xa5,
    0x50, 0x8d, 0x61, 0xcf, 0xb4, 0x6f, 0x98, 0x25, 0x8b, 0xb8, 0x99, 0x22, 0x70, 0x02, 0x51,
    0x4c, 0x62, 0x52, 0xa9, 0xa2, 0x32, 0x7c, 0xe2, 0xe9, 0xd4, 0xd7, 0x25, 0x37, 0xb2, 0x94,
    0x9a, 0x58, 0x6e, 0x5c, 0x48, 0xa1, 0x07, 0x98, 0xb7, 0x9b, 0x1a, 0xda, 0x06, 0xc8, 0x54,
    0xc4, 0x42, 0xc1, 0xf9, 0x7b, 0x02, 0xd4, 0xc8, 0x0a, 0x2c, 0x69, 0xaa, 0xbd, 0x9c, 0x30,
    0xd7, 0x39, 0x04, 0x38, 0xc1, 0xdd, 0xcc, 0x0b, 0x23, 0xe4, 0xd2, 0xdb, 0x01, 0x02, 0x23,
    0x6f, 0xf4, 0x06, 0x7c, 0x3c, 0x89, 0x79, 0x9d, 0x1c, 0xc9, 0x77, 0x00, 0xdf, 0x4e, 0x65,
    0xd9, 0xfe, 0xbf, 0xff, 0x11, 0xfd, 0xf9, 0x2e, 0xf0, 0xa6, 0x0a, 0xce, 0x68, 0x69, 0xaf,
    0x33, 0x34, 0xc5, 0xde, 0x08, 0xf2, 0x1f, 0xa4, 0xbd, 0xe9, 0xd8, 0x2b, 0x87, 0x37, 0x28,
    0x80, 0xba, 0xf0, 0x11, 0x2b, 0x6d, 0xdf, 0xb1, 0x03, 0x16, 0xa6, 0x66, 0xb2, 0xb2, 0xf3,
    0xd9, 0x20, 0xb6, 0x8f, 0x25, 0x06, 0xab, 0x5c, 0xcb, 0xf9, 0xea, 0xda, 0xb4, 0x96, 0x8a,
    0x38, 0x2f, 0x07, 0xfc, 0xda, 0x0c, 0x89, 0xf3, 0x76, 0x77, 0x7d, 0xf3, 0xe9, 0xea, 0xfc,
    0x71, 0x14, 0xbf, 0x3c, 0x60, 0x3f, 0xf8, 0x26, 0x60, 0x17, 0x78, 0x3f, 0x7c, 0xbc, 0xb8,
    0x74, 0x7e, 0xff, 0xf1, 0x43, 0xfc, 0xe6, 0x27, 0xfd, 0xbc, 0x93, 0xc6, 0x1a, 0x69, 0x67,
    0xa4, 0x93, 0x7c, 0x8a, 0x50, 0x6e, 0xbb, 0xfa, 0x5c, 0x6d, 0x2e, 0xd8, 0x11, 0xbe, 0xa9,
    0xc7, 0x38, 0x24, 0xad, 0x8c, 0xca, 0xfa, 0x60, 0xbe, 0x5b, 0x6e, 0xde, 0xb2, 0x23, 0x5d,
    0x74, 0xb6, 0x9c, 0x9a, 0x34, 0x38, 0xb6, 0xc6, 0x2c, 0x84, 0x74, 0x49, 0xda, 0x16, 0xab,
    0x85, 0xa6, 0xab, 0x27, 0x77, 0xe6, 0x12, 0x27, 0x4d, 0x7c, 0x28, 0xda, 0x60, 0x2e, 0xe9,
    0x06, 0x26, 0x54, 0x4c, 0xfe, 0xd8, 0x7e, 0xa0, 0x62, 0xbc, 0xd2, 0x37, 0xd7, 0xec, 0xe3,
    0xcb, 0x6b, 0x8f, 0x7b, 0xfd, 0x4a, 0xb9, 0xdf, 0x63, 0x4a, 0xaf, 0x9c, 0x96, 0x73, 0x29,
    0xf2, 0xcb, 0x46, 0x63, 0xbb, 0xf4, 0x56, 0x89, 0x71, 0x62, 0x48, 0xe2, 0xfc, 0xf5, 0x0f,
    0x02, 0x2c, 0xe6, 0xec, 0x2d, 0xca, 0xc4, 0x99, 0x24, 0xca, 0x1a, 0x13, 0xca, 0x6b, 0x86,
    0x28, 0x58, 0xc8, 0xb8, 0xe7, 0x81, 0xf5, 0x2a, 0xf5, 0x0a, 0xdb, 0x88, 0x6e, 0xf1, 0x6d,
    0x4a, 0x7d, 0x7c, 0x03, 0xab, 0xe7, 0x76, 0xc6, 0x91, 0xbd, 0x98, 0x8c, 0xe6, 0x3d, 0xd5,
    0x3a, 0xab, 0xaf, 0x41, 0x5a, 0x89, 0x8f, 0x66, 0x73, 0xd3, 0x54, 0x4b, 0x93, 0x8b, 0x9f,
    0xc5, 0x9e, 0x1d, 0xa2, 0x25, 0xfa, 0x2f, 0xc6, 0x6d, 0xe7, 0xae, 0x68, 0x4e, 0xb6, 0x9b,
    0xce, 0x09, 0xcc, 0x83, 0x4b, 0xf1, 0xb5, 0x9e, 0xe2, 0x35, 0x01, 0x0f, 0xeb, 0x97, 0xdc,
    0xaa, 0xa5, 0xba, 0x8b, 0xcb, 0x1f, 0x2a, 0xb7, 0x74, 0x82, 0xa4, 0x93, 0x3f, 0x2c, 0x3c,
    0x16, 0x36, 0xa8, 0x7b, 0xe2, 0x79, 0x91, 0x9f, 0xbc, 0x4f, 0xf2, 0x38, 0xb6, 0xb5, 0x4c,
    0xc8, 0x01, 0x7a, 0xcc, 0x2f, 0x2a, 0x3c, 0x64, 0x60, 0xcb, 0x1c, 0xec, 0xbd, 0xe4, 0xad,
    0xbe, 0xa5, 0x9e, 0x29, 0x85, 0xfd, 0x1d, 0x2b, 0x0a, 0x48, 0xf6, 0x94, 0xfa, 0xb1, 0x5d,
    0x3c, 0xa5, 0x04, 0x90, 0x93, 0x5d, 0xa6, 0xe8, 0x9e, 0xab, 0xbe, 0xa6, 0x69, 0x93, 0x6a,
    0xc1, 0x78, 0x10, 0xeb, 0xe2, 0x60, 0xbd, 0x15, 0x43, 0x3b, 0xfb, 0x75, 0x6e, 0x5d, 0xe7,
    0xbb, 0x05, 0x45, 0x31, 0xee, 0xb1, 0x35, 0x7f, 0xa8, 0x8c, 0xc3, 0x54, 0x6a, 0x84, 0x65,
    0x5d, 0xf6, 0xa2, 0x2c, 0x21, 0xea, 0xc6, 0xcf, 0x1b, 0x35, 0xc6, 0x5a, 0x2e, 0x6d, 0xb4,
    0xb6, 0x9b, 0x1c, 0x11, 0xff, 0x10, 0x47, 0x2c, 0xce, 0xbf, 0x7c, 0xbc, 0xbb, 0xb9, 0xfa,
    0x13, 0xaf, 0x48, 0xc4, 0x6e, 0x8a, 0xfc, 0x33, 0x34, 0x89, 0xa3, 0x12, 0x11, 0x27, 0xa7,
    0x7c, 0xf4, 0x53, 0xd4, 0x85, 0xab, 0x9b, 0x89, 0x1a, 0xe6, 0xa1, 0xef, 0x09, 0xdc, 0x91,
    0xf6, 0x06, 0x81, 0x33, 0x2b, 0x11, 0xf7, 0xba, 0xfd, 0xf4, 0xf1, 0xfe, 0xfe, 0x9f, 0x7f,
    0x74, 0x73, 0xf3, 0xa1, 0xce, 0x60, 0x1d, 0x83, 0xd4, 0x1d, 0x4c, 0x2a, 0x09, 0xe9, 0xa7,
    0xe7, 0xbf, 0xfe, 0xda, 0x10, 0xa4, 0xca, 0x52, 0xf9, 0x0b, 0x86, 0x9c, 0x49, 0x03, 0x7b,
    0x75, 0xfe, 0x3f, 0x2f, 0xaf, 0x7f, 0x8a, 0xc3, 0x9b, 0x2a, 0xa3, 0x71, 0xce, 0x2d, 0x43,
    0x2f, 0x0d, 0x03, 0x5b, 0x6d, 0x89, 0x1f, 0xc6, 0x40, 0xaa, 0x2e, 0x90, 0x18, 0x03, 0xab,
    0xc0, 0x95, 0x50, 0x0f, 0xf4, 0xd3, 0x47, 0x3b, 0x27, 0x21, 0x20, 0x93, 0xd6, 0xb9, 0x5c,
    0xfd, 0x1d, 0xaa, 0x90, 0x8e, 0xd4, 0x10, 0x62, 0x25, 0x8a, 0xa5, 0xd8, 0x24, 0x05, 0xc8,
    0x0d, 0xbb, 0x5d, 0x3b, 0x4e, 0x58, 0x28, 0x70, 0xf8, 0xcc, 0xe9, 0x99, 0xfd, 0xe7, 0x5a,
    0xe6, 0xe4, 0x96, 0x1d, 0x8e, 0xdb, 0x7b, 0x2a, 0x8a, 0xc3, 0xba, 0x53, 0x14, 0x3a, 0x0d,
    0xf1, 0x60, 0x73, 0x89, 0x87, 0x2a, 0xa1, 0xdc, 0x0e, 0xe2, 0x55, 0x37, 0xde, 0x4a, 0x89,
    0x2e, 0x4f, 0x70, 0xf7, 0xfb, 0xec, 0x24, 0x25, 0xbb, 0x12, 0xf7, 0xe6, 0xf8, 0x1b, 0x45,
    0xd1, 0x58, 0x46, 0x69, 0xa3, 0x95, 0xa3, 0xdc, 0x7a, 0xe3, 0xd8, 0xa5, 0x98, 0x53, 0x3e,
    0xf9, 0x07, 0x94, 0x35, 0x6c, 0x79, 0xe5, 0xe8, 0xfa, 0xbb, 0xee, 0x69, 0x67, 0x54, 0xa4,
    0xcf, 0x1f, 0xb5, 0x0c, 0xdd, 0x85, 0x78, 0x9e, 0x23, 0x2b, 0xc2, 0x23, 0x58, 0x9f, 0xbd,
    0x4f, 0xa7, 0x48, 0x75, 0xd8, 0x8d, 0xa9, 0x6f, 0x86, 0xa5, 0xef, 0xd0, 0x33, 0x10, 0xd4,
    0x5b, 0xc2, 0x0c, 0x86, 0xdd, 0x4e, 0x28, 0x6e, 0x91, 0x43, 0xd1, 0x8b, 0x67, 0x02, 0x78,
    0x25, 0x21, 0xbd, 0x3c, 0xbd, 0x74, 0x20, 0xba, 0xa7, 0x27, 0x6e, 0x19, 0xa6, 0xc5, 0x1d,
    0xf6, 0xfb, 0x1d, 0xbd, 0x83, 0x80, 0x9f, 0x57, 0x8a, 0xf2, 0x01, 0x53, 0xf9, 0x11, 0x4e,
    0x6d, 0xf1, 0xe4, 0x7d, 0x80, 0x9a, 0x3a, 0x6c, 0xf7, 0x93, 0x4a, 0x64, 0x4b, 0x3e, 0x6d,
    0xb9, 0x46, 0x36, 0x08, 0x13, 0xc7, 0x56, 0x19, 0x07, 0xbc, 0x80, 0xff, 0xd4, 0x76, 0x8f,
    0x00, 0x6a, 0xa3, 0x2e, 0x5e, 0x3f, 0x5d, 0x93, 0x26, 0x81, 0xf8, 0xe2, 0xe1, 0xe5, 0x39,
    0x89, 0xb5, 0xec, 0x2a, 0x76, 0x2e, 0x2b, 0x70, 0xfa, 0x62, 0x02, 0x55, 0x8e, 0x76, 0x65,
    0x77, 0xac, 0x36, 0xdf, 0x47, 0x45, 0x21, 0x6d, 0x54, 0x8c, 0xd2, 0x0f, 0x4a, 0x09, 0x00,
    0x08, 0x51, 0x1e, 0x57, 0x45, 0x28, 0x43, 0x50, 0x93, 0x59, 0x6f, 0x21, 0xe7, 0x96, 0x66,
    0x31, 0x75, 0x48, 0xb3, 0x74, 0x23, 0x00, 0x15, 0x79, 0x23, 0xc9, 0xc7, 0x19, 0x6f, 0x7a,
    0x9f, 0xd9, 0xcb, 0xcb, 0xcd, 0xb7, 0x8d, 0x44, 0x2c, 0x3c, 0xd7, 0x08, 0x15, 0x00, 0x28,
    0x34, 0x2d, 0xf4, 0xc8, 0xe0, 0x43, 0xba, 0x36, 0x83, 0xa4, 0xd0, 0x2d, 0x6f, 0xf1, 0x2a,
    0xe2, 0xd0, 0x7f, 0xbe, 0xe5, 0xb5, 0xc2, 0x52, 0x15, 0x99, 0xe9, 0x18, 0xa8, 0xea, 0x4c,
    0xbf, 0x27, 0x51, 0xfe, 0xf6, 0x6b, 0xea, 0x9f, 0x68, 0x57, 0xc1, 0x9d, 0x89, 0x23, 0x7c,
    0xf3, 0x00, 0x76, 0xea, 0x86, 0x94, 0x94, 0xc3, 0x99, 0x1d, 0x71, 0x60, 0xbf, 0xcf, 0x31,
    0x26, 0x2b, 0x6c, 0x16, 0xf9, 0x7a, 0x3d, 0x6d, 0x94, 0x12, 0xb4, 0x40, 0x24, 0xcb, 0x34,
    0x66, 0x2a, 0xe1, 0xe5, 0x46, 0x45, 0x22, 0x45, 0xf1, 0x7b, 0x4c, 0x20, 0x76, 0x73, 0x63,
    0x70, 0x81, 0xd4, 0xb7, 0xe2, 0xe5, 0xe3, 0x55, 0x59, 0xea, 0x2c, 0xa8, 0x77, 0x8a, 0x96,
    0x27, 0x67, 0x37, 0x06, 0x49, 0xb2, 0x77, 0xd0, 0x8b, 0xa1, 0xcb, 0x2f, 0x0d, 0x48, 0x40,
    0x0a, 0x9b, 0x44, 0xdf, 0x75, 0x68, 0x91, 0x8b, 0x6c, 0x5c, 0x86, 0xf0, 0x29, 0x6e, 0x65,
    0x18, 0xa9, 0xa6, 0xfb, 0xed, 0xdf, 0xe5, 0x20, 0xa8, 0x38, 0x7b, 0xa8, 0xce, 0x7c, 0x54,
    0xf7, 0x4f, 0x9e, 0x5b, 0x9a, 0x0f, 0x53, 0xe5, 0xe7, 0xec, 0x2a, 0x4e, 0x52, 0x72, 0x0a,
    0xe3, 0xbe, 0xb8, 0x80, 0xc2, 0x0c, 0xed, 0xf8, 0x39, 0x1d, 0xb4, 0xe4, 0x05, 0x51, 0xec,
    0xa6, 0x28, 0xd6, 0x72, 0xef, 0x9e, 0x5e, 0xb9, 0x6f, 0x3f, 0xa2, 0xea, 0x9a, 0xf0, 0x3a,
    0xa3, 0xce, 0x09, 0xfd, 0x0f, 0x7b, 0x29, 0xdd, 0xa9, 0x31, 0xc7, 0x16, 0x5d, 0xdc, 0x00,
    0x1c, 0xf5, 0xfe, 0xfb, 0x67, 0x72, 0xa1, 0xcd, 0x3a, 0x9d, 0xd1, 0xad, 0x32, 0xfe, 0xf3,
    0x3d, 0xfc, 0x66, 0x3d, 0x5d, 0x0e, 0x57, 0x44, 0xb9, 0xef, 0x2d, 0x17, 0xbd, 0x6f, 0xc3,
    0xdf, 0xd6, 0xbf, 0xf5, 0xbb, 0xef, 0x37, 0xd7, 0xc3, 0x8f, 0xff, 0x7e, 0xf4, 0xea, 0xef,
    0xff, 0xf2, 0xf2, 0xa7, 0x2d, 0x7f, 0xa8, 0xd0, 0x3e, 0x2a, 0x73, 0xfc, 0xee, 0xd7, 0xcb,
    0x8f, 0xd7, 0x77, 0x1f, 0x2b, 0x79, 0x47, 0x87, 0x32, 0xc6, 0x60, 0x80, 0x92, 0x3e, 0xef,
    0x7a, 0xa3, 0xee, 0x69, 0x0f, 0xfd, 0x4b, 0x7f, 0x38, 0xea, 0x74, 0xbb, 0xa3, 0x51, 0x87,
    0xd7, 0xe9, 0x76, 0x7a, 0xa7, 0x43, 0xfa, 0x77, 0x25, 0xd0, 0x44, 0xfe, 0x38, 0x54, 0x4f,
    0x14, 0x94, 0xa2, 0xeb, 0xb0, 0xcd, 0x74, 0x90, 0xff, 0xf7, 0x9e, 0xfc, 0x89, 0x1d, 0x1a,
    0x7f, 0xce, 0x29, 0x8b, 0x2c, 0x30, 0xfa, 0x55, 0x9b, 0x62, 0x83, 0xe0, 0xac, 0xe7, 0x3f,
    0x5d, 0x81, 0x7a, 0x27, 0x9d, 0x63, 0xf4, 0x8b, 0x62, 0x38, 0x8a, 0xb5, 0x41, 0xbd, 0x4e,
    0x90, 0xfa, 0x25, 0xb8, 0x71, 0xfe, 0xe1, 0xdd, 0xbb, 0xf5, 0x7a, 0x7d, 0xa2, 0xb0, 0xd7,
    0x98, 0xd6, 0xfc, 0x9d, 0xce, 0x5f, 0x45, 0xde, 0xbd, 0x82, 0x2f, 0xde, 0x7f, 0xfc, 0x74,
    0x87, 0xce, 0xaf, 0x3f, 0xa0, 0x8b, 0x9b, 0xeb, 0x0f, 0x97, 0xf7, 0x97, 0x37, 0xd7, 0x77,
    0xc7, 0x9b, 0x4f, 0xe8, 0xb7, 0xbb, 0x8f, 0xc7, 0xe8, 0xd3, 0xc7, 0xdb, 0x4f, 0x37, 0x1f,
    0xbb, 0x80, 0x8f, 0x8f, 0xd9, 0x53, 0x1f, 0x2e, 0xef, 0xee, 0x3f, 0x5d, 0xbe, 0xff, 0x0d,
    0x61, 0x0b, 0x74, 0x4f, 0xd0, 0x07, 0xd0, 0x99, 0x1a, 0x6f, 0x77, 0xf5, 0xca, 0x33, 0x3b,
    0x8e, 0x8e, 0x10, 0x59, 0xc0, 0xc8, 0xa7, 0x25, 0x3d, 0x87, 0xb2, 0x56, 0x4d, 0xd4, 0xd4,
    0x09, 0x52, 0x0c, 0x15, 0x9a, 0xe3, 0xa8, 0xfc, 0x5b, 0x2c, 0x84, 0xe3, 0x10, 0x7c, 0xcc,
    0x3b, 0x51, 0x1d, 0xce, 0xba, 0x1f, 0x78, 0x0a, 0x18, 0x9e, 0x55, 0x35, 0x50, 0xaf, 0x13,
    0x75, 0xd5, 0x51, 0x08, 0x72, 0xd5, 0x34, 0xb4, 0xf6, 0xb9, 0xe3, 0xbd, 0x12, 0x08, 0xea,
    0xf5, 0x2d, 0xd3, 0x99, 0x2f, 0xd0, 0x98, 0xf7, 0x85, 0xd2, 0xe8, 0x73, 0xe6, 0x94, 0x75,
    0x8c, 0xc2, 0x65, 0x5a, 0x31, 0xc0, 0xa6, 0xe6, 0x6a, 0x63, 0x69, 0xf3, 0x85, 0x8d, 0xcc,
    0x01, 0x3d, 0xbc, 0x2c, 0x44, 0xbf, 0x48, 0x2d, 0x1c, 0x52, 0x1c, 0x7b, 0x61, 0x5a, 0xda,
    0xec, 0x7d, 0xee, 0x3a, 0x49, 0xdf, 0x60, 0x37, 0xef, 0xf4, 0xa5, 0x73, 0x4b, 0xa1, 0x5f,
    0xe6, 0xec, 0x21, 0x17, 0x0f, 0x01, 0x00, 0xf0, 0x5c, 0xd1, 0xd1, 0x47, 0xb6, 0x74, 0x0c,
    0xc7, 0x08, 0x74, 0xb5, 0xa2, 0x06, 0x99, 0xd5, 0x36, 0xbb, 0x50, 0x50, 0x34, 0xd0, 0x67,
    0x65, 0xdc, 0xd1, 0x3a, 0xf0, 0x2b, 0xbf, 0x8f, 0x23, 0x45, 0xa8, 0x6d, 0x99, 0xfa, 0xb1,
    0x2a, 0x63, 0xff, 0xd0, 0x19, 0xd0, 0xc7, 0x88, 0x75, 0x6e, 0x84, 0xf5, 0x55, 0xfa, 0xb5,
    0xb9, 0x5c, 0x9a, 0x86, 0xbb, 0x92, 0xfb, 0x20, 0x5a, 0x6b, 0xf6, 0x82, 0xaf, 0xc3, 0x5f,
    0x82, 0x7e, 0x34, 0xf9, 0xfc, 0xa2, 0x95, 0x63, 0x41, 0xcb, 0x33, 0xb2, 0xc5, 0xaa, 0x4f,
    0xdf, 0xcb, 0x70, 0x57, 0x39, 0x62, 0x5b, 0x21, 0xe8, 0xb5, 0xf6, 0x86, 0x7f, 0xd5, 0x5c,
    0xeb, 0x98, 0x92, 0x0f, 0xc2, 0x76, 0x00, 0x04, 0x75, 0xb9, 0xd8, 0xcf, 0xc7, 0xd0, 0xd6,
    0xaa, 0xc0, 0x54, 0x30, 0xfa, 0x9c, 0xbb, 0x0a, 0xff, 0x15, 0xc3, 0x80, 0x85, 0x96, 0x8a,
    0x55, 0xa7, 0x37, 0x67, 0x89, 0x38, 0xd3, 0x85, 0x0b, 0xd8, 0x31, 0x5a, 0x2f, 0x30, 0xdb,
    0xa5, 0x3e, 0x7b, 0x2f, 0xeb, 0xd0, 0x66, 0x05, 0x31, 0xb3, 0xd6, 0x80, 0x9b, 0xe8, 0x2a,
    0x35, 0x0a, 0x09, 0x23, 0x0f, 0x59, 0x68, 0x2b, 0x58, 0x69, 0xa6, 0xcd, 0x28, 0x36, 0xa9,
    0x32, 0x85, 0xa5, 0x5f, 0x0f, 0x3b, 0xff, 0xc7, 0x1b, 0xf6, 0x3a, 0xd3, 0xc2, 0x2e, 0xe2,
    0x85, 0x1c, 0x9b, 0x6a, 0x2f, 0x0a, 0x2f, 0xa5, 0x01, 0x25, 0x93, 0x85, 0x89, 0xb7, 0x22,
    0x72, 0x82, 0x0d, 0x8a, 0x84, 0xa9, 0x46, 0x49, 0x19, 0x5a, 0x3d, 0x00, 0xe7, 0x96, 0xe4,
    0x34, 0x9d, 0x23, 0xf4, 0x9a, 0x7e, 0x17, 0x7e, 0xb2, 0x8e, 0xde, 0x04, 0xa9, 0x4e, 0xff,
    0x38, 0x79, 0xd2, 0x54, 0x07, 0xd6, 0xb2, 0x50, 0x90, 0x3f, 0xdc, 0x05, 0xf0, 0x37, 0x0a,
    0x46, 0x00, 0x10, 0x0a, 0xf7, 0x52, 0x63, 0x85, 0xee, 0x2e, 0x9f, 0x71, 0x21, 0x60, 0x64,
    0xb1, 0xda, 0x1d, 0x7d, 0x1b, 0xf5, 0x1a, 0x41, 0xbc, 0x96, 0x51, 0x4e, 0x5b, 0xb1, 0x8c,
    0x37, 0x7e, 0xba, 0x64, 0x12, 0xb8, 0x54, 0x1e, 0xe1, 0x15, 0xd4, 0x89, 0xd2, 0xe8, 0xd6,
    0xff, 0x3a, 0x8f, 0xc0, 0xbc, 0x03, 0x0b, 0xfc, 0x9a, 0x0a, 0x21, 0x6b, 0x4d, 0xad, 0x83,
    0xc3, 0x1b, 0x40, 0x13, 0x73, 0x66, 0xaf, 0x81, 0xbd, 0x08, 0x7b, 0x21, 0x25, 0x8a, 0x4a,
    0xef, 0xc9, 0x1e, 0x5b, 0xc8, 0x5d, 0x86, 0x3f, 0x70, 0xec, 0xc9, 0xff, 0x4c, 0x9b, 0x3b,
    0xab, 0x2c, 0x70, 0xef, 0x02, 0xea, 0xe3, 0x66, 0xf2, 0x27, 0x65, 0x85, 0x38, 0xe8, 0x8a,
    0xe1, 0x9f, 0x51, 0x72, 0x38, 0x3a, 0x93, 0x0f, 0x16, 0xe2, 0x5d, 0xe2, 0xe9, 0x42, 0x31,
    0xd4, 0x9e, 0x80, 0x50, 0xae, 0x30, 0x08, 0x3c, 0xa9, 0x78, 0x0c, 0xc5, 0x3e, 0xd1, 0xfd,
    0x71, 0x0a, 0xe2, 0xe8, 0x61, 0xcb, 0x1d, 0x87, 0x37, 0xe8, 0xae, 0x11, 0xd9, 0x26, 0x54,
    0x6b, 0x20, 0x50, 0x26, 0x03, 0xce, 0xdd, 0xe6, 0x9c, 0x72, 0x02, 0xef, 0x45, 0x10, 0xda,
    0x50, 0x7b, 0xd1, 0x9d, 0xba, 0x9e, 0x1e, 0xeb, 0x66, 0xc3, 0x65, 0x77, 0x89, 0x55, 0x4d,
    0xe0, 0x58, 0x06, 0xb6, 0xfd, 0xc5, 0xb4, 0x1e, 0x63, 0x4a, 0x61, 0x4d, 0x3f, 0x64, 0x10,
    0x3d, 0x04, 0x9c, 0xb6, 0x15, 0x01, 0xcd, 0xf0, 0xb6, 0xe1, 0x0b, 0x00, 0x47, 0x9d, 0xbb,
    0xa5, 0xa2, 0x52, 0x45, 0xf2, 0xa4, 0x68, 0x3a, 0x78, 0xde, 0xae, 0xfc, 0x07, 0xf4, 0xd2,
    0x68, 0x53, 0x60, 0xc0, 0xa9, 0xe2, 0xb2, 0x92, 0xe2, 0xeb, 0x05, 0x4f, 0xbb, 0x51, 0x34,
    0x87, 0x7d, 0xf5, 0x16, 0x1c, 0xe0, 0x05, 0x6a, 0xc5, 0xb6, 0xc1, 0xb6, 0x30, 0x0c, 0x79,
    0xba, 0x4b, 0xbc, 0x66, 0xed, 0x11, 0x15, 0x68, 0xc5, 0x06, 0x5f, 0xf4, 0xc7, 0x9f, 0xb9,
    0xbf, 0xce, 0x57, 0x2b, 0x4c, 0xdf, 0xfc, 0x8d, 0x0a, 0x93, 0x6e, 0xae, 0xdf, 0x6c, 0xb1,
    0x01, 0xb3, 0x56, 0x9f, 0xd4, 0xb1, 0x46, 0x80, 0x10, 0x72, 0x14, 0xe5, 0x00, 0x78, 0x47,
    0x0e, 0xdc, 0xdd, 0xbb, 0x2b, 0x71, 0x1c, 0x78, 0x80, 0x43, 0xff, 0x48, 0x4a, 0x3c, 0x83,
    0xa2, 0xd7, 0x11, 0x0e, 0xb8, 0x87, 0xeb, 0x2a, 0x78, 0x15, 0x23, 0x17, 0xc8, 0xc2, 0x7a,
    0x4d, 0x17, 0x01, 0x65, 0x40, 0x89, 0x65, 0x9b, 0x30, 0xa6, 0x81, 0x32, 0xde, 0x93, 0xc6,
    0x09, 0x5c, 0x4c, 0x51, 0xe3, 0xca, 0x09, 0xc2, 0x14, 0xc3, 0x6e, 0xb7, 0x1f, 0xae, 0x28,
    0x32, 0x07, 0xa5, 0xc9, 0x5d, 0xcc, 0x6f, 0x62, 0xc8, 0xb0, 0xaf, 0xd0, 0x97, 0x99, 0x3a,
    0x0a, 0xfa, 0x35, 0x6d, 0xae, 0x19, 0xf4, 0x2d, 0x71, 0x9a, 0xc7, 0xf5, 0xb1, 0xa7, 0xa7,
    0x21, 0xf1, 0x3f, 0x46, 0x51, 0xf4, 0xb9, 0xd8, 0x03, 0x6e, 0xf6, 0x1a, 0x29, 0xad, 0xd9,
    0x0c, 0x31, 0xd0, 0x3c, 0x4f, 0xf3, 0xe5, 0x13, 0x43, 0x68, 0x1d, 0x38, 0x05, 0xf0, 0xc2,
    0xb1, 0xc4, 0x16, 0xd6, 0x37, 0x54, 0x0e, 0x8c, 0x47, 0x86, 0xb8, 0x09, 0xe5, 0x16, 0xe0,
    0x38, 0x31, 0xbd, 0xf1, 0x88, 0xbe, 0x0d, 0x6f, 0x52, 0x70, 0x8e, 0x03, 0x36, 0xd2, 0x47,
    0x0c, 0x28, 0xc0, 0x0e, 0x36, 0x67, 0x5b, 0xaa, 0x5f, 0x80, 0x2a, 0x77, 0x6d, 0x7c, 0x22,
    0xa3, 0x32, 0xe0, 0x8b, 0x6c, 0xe0, 0x7d, 0x3e, 0x02, 0x5d, 0x81, 0xf3, 0x6c, 0xa9, 0x0f,
    0x2c, 0x16, 0xa2, 0x09, 0xe3, 0x61, 0xd5, 0xf5, 0x44, 0xbc, 0x95, 0x4c, 0x8e, 0x1b, 0xf6,
    0xfa, 0xfb, 0x34, 0xe0, 0x8f, 0x03, 0x42, 0x61, 0x83, 0xd6, 0x87, 0x9b, 0x04, 0xdd, 0x53,
    0x70, 0x20, 0xd5, 0x6c, 0x57, 0x79, 0x78, 0x7e, 0x07, 0xe3, 0x2e, 0x06, 0x39, 0x03, 0xcf,
    0x05, 0xf6, 0x22, 0xa6, 0xc7, 0x63, 0x6e, 0x85, 0x47, 0x65, 0x66, 0xee, 0x32, 0xad, 0x45,
    0x51, 0x01, 0xad, 0xcc, 0x5e, 0x0f, 0xfc, 0x3e, 0xc1, 0x14, 0x99, 0x33, 0x8a, 0x8a, 0x74,
    0x45, 0xce, 0xda, 0xf3, 0xf0, 0x03, 0xdb, 0x93, 0x77, 0xd0, 0xe5, 0xf6, 0xde, 0x57, 0xcb,
    0x4b, 0x18, 0xba, 0x57, 0x59, 0x26, 0x55, 0xc6, 0xc7, 0x40, 0x85, 0x89, 0xa2, 0x33, 0x3e,
    0x49, 0xf3, 0x14, 0x47, 0xcc, 0xf9, 0x70, 0x0c, 0x17, 0xfb, 0x08, 0xa4, 0x20, 0x88, 0x74,
    0x45, 0x14, 0xe0, 0xc9, 0x26, 0xa1, 0x8e, 0x9f, 0x4f, 0x60, 0x83, 0xb3, 0x4c, 0x91, 0xaf,
    0x82, 0xef, 0xa0, 0xff, 0xdd, 0xc2, 0x44, 0x35, 0xa2, 0xa6, 0xc3, 0x97, 0x75, 0x68, 0xcc,
    0x1c, 0x34, 0x59, 0xbe, 0x2b, 0x44, 0x36, 0xc4, 0xc6, 0x4b, 0x12, 0x54, 0xe1, 0xd4, 0xe6,
    0x18, 0x4c, 0xc8, 0x94, 0xd9, 0x48, 0xf7, 0x09, 0x4e, 0x7e, 0xb0, 0x7c, 0xdc, 0x5b, 0xf1,
    0xad, 0x20, 0xd2, 0x8f, 0x03, 0x6a, 0x24, 0xc4, 0x05, 0x01, 0x6c, 0x03, 0xde, 0xa8, 0x8f,
    0x75, 0x08, 0xb3, 0xf2, 0xec, 0x8d, 0x4b, 0xa6, 0x2f, 0x5d, 0x37, 0xf2, 0x0b, 0xd3, 0x78,
    0xd3, 0x84, 0xbf, 0x79, 0x48, 0x08, 0xef, 0xd5, 0xe3, 0x47, 0x28, 0x0d, 0x58, 0x69, 0x53,
    0x74, 0x08, 0x15, 0x5e, 0x68, 0x8f, 0x09, 0xaa, 0xcf, 0xda, 0x7a, 0x47, 0x9e, 0xcb, 0x85,
    0x36, 0x37, 0x98, 0xee, 0xa7, 0xac, 0x08, 0x34, 0x62, 0x88, 0x4d, 0xe4, 0x44, 0x50, 0x56,
    0x3f, 0x7b, 0xef, 0xde, 0xd5, 0x36, 0x92, 0x34, 0x8c, 0xff, 0x3f, 0x9f, 0x42, 0x61, 0xf7,
    0x64, 0x86, 0x10, 0xdb, 0x84, 0x10, 0x92, 0x87, 0xdd, 0xc1, 0x60, 0x83, 0x09, 0x98, 0xe0,
    0x30, 0xef, 0x9c, 0x44, 0xb6, 0x84, 0xad, 0x20, 0x4b, 0x1e, 0xcb, 0x06, 0xcc, 0x3c, 0xf9,
    0x6f, 0x5d, 0xba, 0xa5, 0x6e, 0xa9, 0x65, 0x3b, 0xb3, 0x33, 0xbb, 0xbf, 0x0b, 0x9c, 0xc9,
    0xa4, 0xbe, 0x54, 0x57, 0x57, 0xd7, 0xad, 0xab, 0xbb, 0xd6, 0xea, 0x80, 0x6f, 0xdb, 0x52,
    0xea, 0xd6, 0x5a, 0x76, 0x09, 0xa7, 0xf4, 0xeb, 0x78, 0xd8, 0x72, 0x05, 0x2e, 0x55, 0x79,
    0x04, 0x22, 0x7f, 0x1c, 0xa5, 0x3a, 0xb5, 0x86, 0x00, 0x4c, 0xcf, 0x75, 0x31, 0xc7, 0x44,
    0x25, 0x4e, 0x0e, 0x40, 0xab, 0xfd, 0x24, 0x8b, 0x30, 0x72, 0x7f, 0x9b, 0x01, 0xfd, 0xf8,
    0x6d, 0x3f, 0x04, 0x7c, 0xb3, 0xb8, 0x46, 0x85, 0x57, 0x59, 0x7e, 0xcc, 0x88, 0x4a, 0x5b,
    0x31, 0xaa, 0x55, 0xd8, 0xed, 0x61, 0x3c, 0x7c, 0xa9, 0x59, 0x59, 0xcd, 0x19, 0x0b, 0x57,
    0xab, 0x46, 0x63, 0x46, 0x59, 0x66, 0x2a, 0x57, 0x76, 0x41, 0x4a, 0x5a, 0x0a, 0x82, 0x2c,
    0x21, 0x00, 0x33, 0x69, 0x71, 0xa4, 0x17, 0x80, 0x72, 0x08, 0xa3, 0x04, 0x0d, 0x6f, 0xec,
    0xe6, 0x12, 0x49, 0x7e, 0xc0, 0xfa, 0x7c, 0xe7, 0xc1, 0x43, 0x5d, 0x23, 0x08, 0x83, 0x57,
    0xf3, 0x11, 0x8c, 0x18, 0x1f, 0x5f, 0x81, 0xd6, 0x33, 0x19, 0xa0, 0xe1, 0x14, 0xce, 0x6d,
    0x3a, 0x7f, 0x75, 0x3b, 0x71, 0xe1, 0xc9, 0x03, 0xc5, 0xee, 0x3e, 0xec, 0x23, 0x23, 0xcf,
    0x73, 0x61, 0xff, 0x61, 0x87, 0xd2, 0xda, 0x82, 0x1a, 0xb0, 0xc6, 0xf0, 0x20, 0x6c, 0x96,
    0x25, 0xec, 0x7c, 0x3c, 0xeb, 0x41, 0x5d, 0xc0, 0x22, 0x10, 0xea, 0xd8, 0xb7, 0x81, 0xd0,
    0x37, 0x00, 0x33, 0x8b, 0xda, 0x88, 0xde, 0x08, 0xc5, 0x42, 0xb5, 0xdb, 0x54, 0x35, 0x3f,
    0xc5, 0xa4, 0x2c, 0x67, 0x7a, 0x34, 0x88, 0x73, 0xe2, 0x2d, 0x3c, 0x41, 0xdb, 0xca, 0x04,
    0xb2, 0x91, 0xe9, 0xfe, 0x7f, 0x60, 0x76, 0x36, 0xa0, 0x9a, 0x3b, 0x9e, 0xe2, 0x02, 0xc3,
    0x58, 0xa9, 0x22, 0x01, 0x80, 0x11, 0x1b, 0x44, 0x2f, 0xad, 0x31, 0x8f, 0x55, 0x99, 0x3d,
    0xd7, 0xa1, 0x31, 0xca, 0x10, 0x83, 0x5a, 0x9e, 0x04, 0x88, 0xec, 0xe8, 0xf0, 0xf6, 0x16,
    0xbc, 0x10, 0x83, 0xbf, 0x81, 0xfd, 0xf2, 0xff, 0x39, 0x92, 0x82, 0x27, 0x26, 0xe6, 0x03,
    0x51, 0x16, 0x5a, 0x21, 0xb1, 0x19, 0x39, 0x32, 0x44, 0x01, 0xcf, 0x91, 0xec, 0xd5, 0x1e,
    0x7d, 0x34, 0x37, 0xc3, 0xc0, 0x9f, 0x33, 0x96, 0x91, 0x77, 0x09, 0xd0, 0xfa, 0xbe, 0xed,
    0x22, 0x51, 0x56, 0x19, 0x1c, 0x60, 0x91, 0x1a, 0x51, 0xb1, 0x1b, 0xf3, 0xcd, 0xc0, 0xc5,
    0xca, 0xed, 0x89, 0x47, 0xab, 0xf3, 0x16, 0x5d, 0xa8, 0xd2, 0xa2, 0x71, 0x3d, 0x29, 0xfb,
    0x85, 0xbf, 0x11, 0xbd, 0x04, 0x33, 0x38, 0x0c, 0x5c, 0x21, 0x11, 0x81, 0xfd, 0x81, 0x46,
    0xde, 0x06, 0xed, 0x4d, 0xd2, 0x15, 0xe4, 0x80, 0xd8, 0xc2, 0x15, 0xd2, 0x16, 0xc0, 0x67,
    0x4f, 0x07, 0x4e, 0x74, 0x81, 0xe7, 0x73, 0x63, 0x59, 0xb7, 0x65, 0xd5, 0x6e, 0x71, 0xfe,
    0x5b, 0x28, 0x02, 0x4e, 0x85, 0x34, 0x1d, 0x4f, 0xca, 0xd4, 0x1b, 0x30, 0x08, 0xf6, 0xc0,
    0xcf, 0xc4, 0xe4, 0x84, 0xe1, 0xbe, 0x91, 0x08, 0xac, 0x58, 0xb7, 0x9e, 0x84, 0x51, 0xf4,
    0x10, 0x86, 0xc3, 0xa0, 0x44, 0x4d, 0x60, 0xe2, 0xd1, 0x33, 0xdd, 0x71, 0xe9, 0xdb, 0x0f,
    0xcc, 0x9b, 0xe2, 0x50, 0x7d, 0x77, 0xc0, 0x42, 0x80, 0xae, 0x17, 0x66, 0xe0, 0x13, 0x9d,
    0xc5, 0x15, 0x17, 0x31, 0x38, 0x4e, 0xe3, 0x40, 0x80, 0x47, 0xc2, 0xd4, 0x4e, 0xda, 0xe9,
    0x93, 0x33, 0x97, 0xc3, 0x92, 0xf3, 0x31, 0x22, 0x4d, 0x15, 0x9a, 0x61, 0x55, 0x4c, 0xa7,
    0xa9, 0x32, 0x49, 0x63, 0x54, 0xac, 0x14, 0x69, 0x68, 0x24, 0x6b, 0x4c, 0x88, 0x3c, 0xa9,
    0xb1, 0x74, 0xc0, 0x25, 0x8a, 0xb3, 0x27, 0x69, 0xc5, 0x8e, 0xa4, 0xc2, 0x46, 0x09, 0x85,
    0xf1, 0xc5, 0xd8, 0x85, 0xd6, 0xd0, 0x4e, 0x74, 0x98, 0x15, 0xbc, 0xd9, 0xb2, 0x1a, 0xae,
    0x19, 0xda, 0xa2, 0xae, 0x47, 0xf6, 0x3c, 0xe1, 0x6c, 0x69, 0x2e, 0x04, 0x7c, 0xd0, 0x93,
    0x8d, 0xc6, 0x8f, 0x16, 0x68, 0x79, 0x34, 0x25, 0xa8, 0x36, 0x42, 0x67, 0x33, 0x60, 0x72,
    0x47, 0xa8, 0xd1, 0xc0, 0xef, 0x30, 0x96, 0xc8, 0xba, 0xd9, 0xcc, 0x22, 0x3c, 0x87, 0x93,
    0x26, 0xa6, 0x10, 0x21, 0x24, 0x21, 0xad, 0x91, 0xeb, 0xf2, 0x2c, 0xdf, 0x86, 0x3e, 0xd8,
    0x2c, 0xdf, 0x25, 0xef, 0x7a, 0x2f, 0xe5, 0xec, 0x86, 0xfd, 0x92, 0x47, 0x8a, 0x97, 0x5d,
    0x10, 0x5e, 0x04, 0x8f, 0xed, 0x0d, 0x98, 0x56, 0x0f, 0x86, 0x18, 0x4c, 0x23, 0x4d, 0xf5,
    0xad, 0x43, 0xfc, 0xc9, 0x0c, 0xd4, 0x26, 0xf9, 0x90, 0xb6, 0x24, 0x3e, 0x90, 0x18, 0x95,
    0xf6, 0x94, 0x3e, 0xd9, 0x71, 0x93, 0xa8, 0xd2, 0x68, 0x47, 0xa1, 0xfd, 0xce, 0x4e, 0x9d,
    0x92, 0x10, 0x98, 0x0f, 0x5e, 0x80, 0x74, 0xc2, 0xd6, 0x63, 0xa4, 0x74, 0x4f, 0x71, 0x26,
    0xa4, 0xb1, 0x4d, 0x34, 0xdd, 0x07, 0x84, 0x0c, 0x97, 0xdb, 0xd1, 0x7b, 0xee, 0x2b, 0x3d,
    0xdc, 0x29, 0x2c, 0xb0, 0x4d, 0xa9, 0x37, 0x2b, 0x26, 0x3c, 0x59, 0x07, 0x00, 0x51, 0x7a,
    0x4a, 0xc7, 0x71, 0x87, 0x09, 0x41, 0x6c, 0x52, 0x42, 0xfa, 0x58, 0x3a, 0x6e, 0x0a, 0xea,
    0x44, 0xb6, 0xe8, 0xd0, 0xb5, 0xe2, 0x9b, 0x8a, 0x32, 0x41, 0x24, 0x3a, 0x4d, 0x96, 0x9b,
    0x1b, 0xbb, 0x20, 0x0c, 0xf0, 0xa4, 0x59, 0x2a, 0xfe, 0x24, 0x9a, 0x1b, 0x73, 0x4f, 0xd9,
    0x01, 0xe7, 0x84, 0xa4, 0xd0, 0xe2, 0x86, 0x9d, 0x8d, 0x43, 0x0c, 0xc5, 0x8a, 0x9b, 0x4c,
    0xc1, 0xc5, 0x23, 0xc9, 0x8a, 0x6a, 0x1d, 0x69, 0xce, 0x4b, 0x64, 0x5a, 0xf1, 0xfc, 0x0b,
    0x0f, 0xa7, 0x7a, 0xad, 0x7e, 0xd1, 0xaa, 0x1d, 0x56, 0xd6, 0x60, 0xf1, 0x3d, 0x4e, 0x09,
    0xb8, 0xec, 0x44, 0x1f, 0xa8, 0x72, 0x2b, 0xfd, 0xa8, 0xab, 0x4b, 0x61, 0x01, 0x86, 0x95,
    0xc1, 0x2c, 0xcd, 0x97, 0xd2, 0x94, 0x34, 0x3d, 0x6d, 0x3c, 0x0b, 0xee, 0x90, 0x8d, 0x99,
    0x9d, 0x6b, 0x44, 0x2b, 0x32, 0x25, 0x1b, 0xfd, 0xbc, 0x4a, 0x33, 0x82, 0xa9, 0x11, 0x67,
    0x81, 0xd0, 0x10, 0x36, 0x57, 0xc1, 0xab, 0xd2, 0x8c, 0x19, 0xc3, 0x46, 0xbc, 0x12, 0xb1,
    0x1b, 0xbe, 0x6b, 0x47, 0x68, 0x4e, 0xa9, 0x5e, 0x7a, 0x51, 0x25, 0x59, 0xad, 0xa0, 0x18,
    0xa7, 0xef, 0x25, 0x98, 0xb6, 0x84, 0x31, 0xc1, 0x75, 0x82, 0x21, 0x8d, 0xaa, 0xa2, 0x85,
    0x7c, 0x50, 0x99, 0xb9, 0x46, 0x64, 0xea, 0xba, 0xd6, 0x1d, 0x50, 0x96, 0x77, 0xab, 0x64,
    0x07, 0x91, 0x39, 0x48, 0x24, 0x60, 0xb6, 0xfd, 0x70, 0xb2, 0x99, 0xc5, 0xb2, 0x2d, 0x75,
    0xc5, 0xcb, 0x25, 0x6c, 0x03, 0x03, 0x96, 0x6e, 0x53, 0x2b, 0x85, 0x14, 0x08, 0xb0, 0x00,
    0xb2, 0xa0, 0xc1, 0x89, 0x83, 0xb7, 0xad, 0x80, 0x48, 0x94, 0x73, 0x13, 0xd0, 0xa5, 0xa3,
    0xfa, 0x41, 0xb1, 0x70, 0x6d, 0x30, 0x42, 0x5b, 0x43, 0xb6, 0xc2, 0x90, 0x7f, 0x65, 0xd1,
    0xcc, 0x37, 0x29, 0x0f, 0x6c, 0x4a, 0xc7, 0x4e, 0x3e, 0xb0, 0x21, 0x12, 0xe3, 0x15, 0x35,
    0x1d, 0x1c, 0xb1, 0xb6, 0x88, 0x63, 0xcd, 0x35, 0xdf, 0x7c, 0x2c, 0x36, 0x6c, 0xc7, 0xc1,
    0x27, 0x68, 0xef, 0xa8, 0x14, 0xa9, 0xb4, 0x22, 0x41, 0x17, 0x18, 0x5a, 0x65, 0x25, 0x6c,
    0xf6, 0x23, 0x98, 0x08, 0x75, 0x4c, 0x64, 0x4f, 0xa1, 0x7b, 0x03, 0x53, 0x28, 0x39, 0xb3,
    0x54, 0x5b, 0x35, 0x8a, 0x91, 0x8c, 0x85, 0xed, 0x3f, 0x39, 0x9d, 0x69, 0x9e, 0x46, 0x08,
    0x4e, 0x0c, 0x40, 0x83, 0x71, 0x31, 0x91, 0xb7, 0x0a, 0x73, 0x23, 0x88, 0x74, 0x4e, 0x69,
    0x63, 0xc4, 0xe4, 0xed, 0x5b, 0x18, 0x51, 0x94, 0x58, 0x15, 0xa4, 0xb6, 0x92, 0xb3, 0x9e,
    0x80, 0x94, 0xe3, 0x4b, 0x99, 0x0a, 0x6c, 0x44, 0x8c, 0x43, 0x05, 0x19, 0x5d, 0x72, 0xde,
    0x1d, 0x52, 0x54, 0xb4, 0x5c, 0x83, 0x06, 0x9f, 0xb8, 0xf6, 0x0c, 0x5b, 0x46, 0xdc, 0x8c,
    0x57, 0x14, 0xde, 0x1a, 0xa0, 0xd9, 0x4c, 0x96, 0xcd, 0x2d, 0x19, 0x8b, 0xf3, 0x1c, 0x53,
    0xf5, 0xce, 0xc5, 0x4b, 0x89, 0xda, 0xc3, 0xae, 0x15, 0x6f, 0x5e, 0x02, 0x40, 0x66, 0xb7,
    0x93, 0xc2, 0xb1, 0xd6, 0xcd, 0xa9, 0x7e, 0x04, 0x1d, 0x69, 0x6e, 0x99, 0xd8, 0x52, 0x49,
    0x02, 0xda, 0x84, 0xec, 0x90, 0xb1, 0x23, 0x76, 0x02, 0xd8, 0x56, 0x4d, 0xb4, 0xc0, 0x68,
    0x6a, 0x07, 0x20, 0x45, 0x23, 0x9a, 0x34, 0xf7, 0x11, 0x3a, 0xea, 0x7b, 0x68, 0xfe, 0x52,
    0xca, 0x06, 0x49, 0xec, 0xdf, 0x98, 0xa7, 0xb5, 0x48, 0xc5, 0x99, 0xa5, 0xb8, 0xb1, 0x72,
    0x57, 0x89, 0xa6, 0x8f, 0x3d, 0xa6, 0x1d, 0x39, 0xac, 0xea, 0xf5, 0x54, 0xef, 0xf3, 0xf7,
    0x66, 0x42, 0xcd, 0x22, 0x30, 0x15, 0x82, 0xe1, 0x26, 0x58, 0x75, 0x75, 0xe4, 0xee, 0x23,
    0xaf, 0x87, 0x53, 0xac, 0x14, 0xef, 0xde, 0x90, 0x7c, 0xe9, 0x85, 0x6c, 0x94, 0x51, 0x12,
    0x32, 0xef, 0x50, 0x8c, 0x10, 0x68, 0x14, 0x1f, 0x1e, 0xb9, 0x8e, 0xcb, 0x1b, 0x41, 0xb8,
    0x94, 0x29, 0x11, 0x1d, 0xb1, 0x76, 0xc1, 0x0e, 0x52, 0xc0, 0x62, 0x6c, 0x12, 0x0d, 0xc0,
    0x23, 0xc2, 0x9f, 0x8b, 0x15, 0x42, 0x16, 0x99, 0xfb, 0xe8, 0xf6, 0x15, 0x16, 0x4f, 0x8c,
    0x46, 0xc8, 0xc4, 0x1d, 0xd8, 0x13, 0xde, 0x57, 0x4a, 0xdb, 0x1e, 0x62, 0x2f, 0xe0, 0x2d,
    0x42, 0xa9, 0x80, 0x44, 0xc8, 0x16, 0x15, 0x3d, 0x3a, 0x4e, 0x0e, 0x4a, 0x2a, 0xb7, 0xb2,
    0x84, 0x88, 0x17, 0x1b, 0x6a, 0xac, 0xbe, 0xc8, 0x6d, 0x0c, 0x8c, 0x1f, 0x52, 0x34, 0x1a,
    0x7a, 0xb9, 0x93, 0x7b, 0xf4, 0xe9, 0x8b, 0x47, 0x80, 0x49, 0xd0, 0x30, 0x17, 0x96, 0x44,
    0x21, 0x96, 0x94, 0x92, 0x98, 0xa9, 0x13, 0xf7, 0xb7, 0x99, 0x27, 0xa3, 0xef, 0x41, 0xa0,
    0x30, 0x27, 0x28, 0xd2, 0x69, 0x4a, 0x41, 0xf0, 0x87, 0x18, 0xc6, 0x4f, 0xd0, 0x00, 0x96,
    0xef, 0xe8, 0xc3, 0x00, 0xc5, 0x54, 0xc4, 0x46, 0x07, 0x7a, 0x6a, 0x33, 0xfe, 0x59, 0xb9,
    0xe4, 0xbc, 0x09, 0x69, 0x60, 0x10, 0x01, 0x8c, 0xa9, 0xdd, 0x2d, 0xeb, 0xc8, 0x8b, 0xc8,
    0xc2, 0x4d, 0xdb, 0x5b, 0xab, 0x8b, 0x77, 0xd8, 0x07, 0xb8, 0x7f, 0x29, 0x16, 0x41, 0x0c,
    0x6f, 0xce, 0x06, 0x2c, 0x59, 0xde, 0x68, 0x62, 0x25, 0x6c, 0x80, 0x66, 0xd1, 0xe1, 0x54,
    0xd2, 0x0b, 0xb6, 0x99, 0x4c, 0x98, 0x58, 0xfb, 0x51, 0x02, 0xea, 0x06, 0xc2, 0x8a, 0x4e,
    0xb4, 0x89, 0xaa, 0x96, 0x46, 0xf7, 0xa5, 0x36, 0xb9, 0x2f, 0xd1, 0xaf, 0x05, 0x2c, 0x7f,
    0xa0, 0x69, 0xd5, 0x9a, 0x6b, 0x56, 0xf9, 0xa0, 0x59, 0x6b, 0x4a, 0xe4, 0x76, 0x6b, 0xad,
    0x8b, 0x76, 0xcb, 0xea, 0x1e, 0x34, 0x1a, 0x07, 0xf5, 0x56, 0xad, 0xd2, 0xb4, 0x2e, 0x1a,
    0xb6, 0xfc, 0x45, 0xd5, 0x3a, 0xa8, 0x5f, 0x5b, 0x1f, 0x6b, 0xf5, 0x23, 0x50, 0x77, 0x3c,
    0x01, 0xe6, 0x8b, 0xaf, 0x93, 0x91, 0x78, 0xc4, 0x57, 0x1c, 0xc5, 0x4d, 0x9a, 0xac, 0x20,
    0x93, 0xda, 0x92, 0x4f, 0xcd, 0xc1, 0xc8, 0x25, 0x54, 0x91, 0x41, 0x34, 0xc9, 0xb2, 0x58,
    0x66, 0xab, 0xd6, 0x3a, 0xab, 0x6c, 0x02, 0xd6, 0xeb, 0xaf, 0x6a, 0xf5, 0x6a, 0xa3, 0x56,
    0xae, 0x9c, 0x57, 0xea, 0xad, 0x4d, 0xeb, 0xbc, 0xd2, 0x38, 0x3c, 0x01, 0x28, 0x0f, 0xca,
    0xb3, 0x5a, 0xeb, 0x9a, 0x48, 0xa8, 0x5a, 0x6b, 0xd5, 0x2b, 0x4d, 0x0e, 0x1f, 0x38, 0x10,
    0x7c, 0x3a, 0x68, 0xc0, 0x84, 0xb5, 0xcf, 0x0e, 0x1a, 0xd6, 0xa7, 0x76, 0xe3, 0xd3, 0x45,
    0xc2, 0xd2, 0x96, 0x77, 0x0b, 0x7d, 0x97, 0x8e, 0x72, 0x44, 0x63, 0xcc, 0x93, 0x43, 0xbb,
    0xb4, 0x33, 0xc3, 0x56, 0xa1, 0x4e, 0x2e, 0x30, 0x73, 0x93, 0x70, 0x3c, 0xf1, 0x50, 0x3d,
    0x01, 0xdf, 0x02, 0x75, 0x61, 0x11, 0xa2, 0xbf, 0x84, 0xe3, 0x2a, 0xfe, 0x52, 0xf6, 0x36,
    0x11, 0xe8, 0x44, 0x38, 0x5c, 0xc9, 0xae, 0xbd, 0x88, 0x38, 0x7b, 0x14, 0xf6, 0xbd, 0xd8,
    0x66, 0xa6, 0x2e, 0xf6, 0x59, 0xc9, 0x1b, 0xab, 0x6e, 0xb4, 0x66, 0x8d, 0x59, 0xa6, 0xbd,
    0x5b, 0xf0, 0x2c, 0x51, 0x8a, 0x95, 0xce, 0x3c, 0x11, 0x15, 0xb7, 0x65, 0xd5, 0x50, 0xf2,
    0xa0, 0xfe, 0x04, 0x53, 0x82, 0x83, 0xdb, 0x80, 0x57, 0x3e, 0x39, 0x3b, 0x01, 0x46, 0xb0,
    0x15, 0x57, 0x8b, 0xdc, 0xc9, 0x02, 0x02, 0x9a, 0xaa, 0x2e, 0x83, 0xc0, 0x1d, 0xf8, 0xde,
    0x4f, 0xee, 0xbf, 0xdc, 0x8c, 0x77, 0xbb, 0x37, 0x35, 0x57, 0x6e, 0xec, 0xf9, 0x59, 0x4a,
    0x1b, 0xac, 0x28, 0xa0, 0x4f, 0xdf, 0xf7, 0x7a, 0xa4, 0xd0, 0x11, 0x70, 0x03, 0xf4, 0x47,
    0xfb, 0x16, 0xb2, 0xcb, 0x29, 0x46, 0x20, 0x44, 0xb4, 0x3b, 0x6e, 0x5e, 0x1f, 0xcc, 0x3d,
    0xf1, 0x81, 0x4e, 0x19, 0x39, 0x65, 0xbe, 0x47, 0x1d, 0x0b, 0x8f, 0x00, 0x4d, 0xad, 0x3d,
    0x07, 0xba, 0x0f, 0x1f, 0x6b, 0xcb, 0x90, 0x80, 0x24, 0x38, 0x20, 0x1a, 0xbb, 0xb8, 0xb7,
    0xec, 0x3e, 0xc3, 0x82, 0xc2, 0xf0, 0xc2, 0x4d, 0x41, 0xa9, 0xc2, 0xa7, 0x8b, 0x1b, 0x72,
    0x51, 0xc9, 0xa1, 0xd1, 0xe7, 0x06, 0x70, 0xa3, 0xbb, 0x7a, 0xc2, 0x7b, 0xe6, 0x28, 0xc5,
    0x59, 0x8d, 0xbb, 0xc6, 0x69, 0x43, 0x97, 0xb0, 0x39, 0x8b, 0x79, 0xcc, 0x8c, 0xdf, 0x78,
    0x98, 0x4c, 0x85, 0xaf, 0xaa, 0x1e, 0x83, 0x8d, 0x85, 0x7b, 0xe2, 0x12, 0x2a, 0x1c, 0xb6,
    0x32, 0xc1, 0x62, 0x90, 0xef, 0x83, 0xe7, 0xab, 0xbe, 0xc3, 0x3b, 0x10, 0xca, 0xe1, 0x78,
    0xa3, 0x97, 0x10, 0x75, 0x02, 0x3c, 0xde, 0x6f, 0xdd, 0xda, 0x9e, 0x3f, 0x9b, 0xb0, 0x34,
    0xfd, 0xdb, 0x59, 0x90, 0x28, 0x37, 0x24, 0x04, 0x0d, 0x91, 0x20, 0xb8, 0x0b, 0x80, 0xc4,
    0xe2, 0x83, 0x3b, 0x76, 0x23, 0x20, 0x1c, 0xa4, 0x43, 0x54, 0xd0, 0xd3, 0x8e, 0x38, 0xd1,
    0xec, 0x4c, 0xb7, 0x9d, 0x7b, 0x8f, 0x36, 0x49, 0x6f, 0x45, 0xf8, 0x06, 0xac, 0x00, 0x81,
    0x19, 0xdc, 0x20, 0x9a, 0xe7, 0x15, 0xb0, 0xb7, 0x65, 0x1d, 0xf4, 0x51, 0x26, 0x20, 0x16,
    0xe7, 0xc5, 0x9e, 0x0f, 0x12, 0x41, 0xad, 0x2c, 0x8a, 0xee, 0x10, 0x55, 0x77, 0x7d, 0xb9,
    0x37, 0x0b, 0x17, 0x6e, 0xb7, 0x49, 0x2d, 0xb4, 0x3f, 0x0c, 0x43, 0xf6, 0x82, 0x92, 0xa7,
    0xdb, 0x6c, 0x27, 0x9f, 0x2b, 0xe8, 0x6d, 0xb7, 0x2e, 0xf1, 0x13, 0x60, 0x75, 0x04, 0x21,
    0x55, 0xe4, 0x41, 0x8c, 0xd9, 0x0d, 0x2a, 0xb8, 0xdf, 0x9c, 0xe8, 0xce, 0x1d, 0x05, 0x18,
    0x92, 0x38, 0xc4, 0x18, 0xad, 0xbe, 0x84, 0xdd, 0x0a, 0x7b, 0xbe, 0xf0, 0x42, 0x91, 0xde,
    0x1a, 0xd9, 0x0e, 0x6a, 0xbe, 0x91, 0x4c, 0xf2, 0x85, 0xeb, 0x45, 0xd8, 0x57, 0x9e, 0xe4,
    0xb1, 0x81, 0x71, 0x12, 0x3e, 0xa0, 0x25, 0xc4, 0xa6, 0x64, 0x8c, 0x30, 0xc2, 0xa7, 0xd2,
    0x32, 0x3e, 0x8a, 0x68, 0x09, 0x7c, 0x65, 0x37, 0x24, 0xd6, 0xb9, 0xc5, 0xb6, 0x08, 0x39,
    0xc5, 0x6b, 0x64, 0xa4, 0x09, 0x1b, 0x25, 0x78, 0x49, 0xd3, 0x49, 0x76, 0x51, 0x12, 0x8e,
    0x78, 0x8a, 0x14, 0x32, 0x10, 0x3e, 0x61, 0xb4, 0x99, 0xbc, 0x5b, 0xe6, 0xcf, 0xb8, 0xe0,
    0xbd, 0x13, 0x6e, 0x6e, 0x63, 0xdc, 0x38, 0xee, 0x2d, 0x98, 0x2b, 0x5c, 0x03, 0x34, 0x63,
    0xe0, 0x3a, 0xb7, 0x27, 0x23, 0xe2, 0x44, 0x52, 0xb9, 0x8e, 0xb1, 0x98, 0x2c, 0xe7, 0xd9,
    0x92, 0xec, 0x96, 0x09, 0xcf, 0x31, 0x46, 0x8e, 0x4f, 0x70, 0xf9, 0x08, 0x27, 0xea, 0x66,
    0x6f, 0xdc, 0x9b, 0x0b, 0x65, 0x23, 0x19, 0xd0, 0x1c, 0x31, 0x90, 0xe0, 0x34, 0x56, 0xe6,
    0x14, 0x6a, 0x54, 0xd4, 0xc6, 0x18, 0x16, 0x26, 0xe0, 0x4a, 0xfd, 0x08, 0xe5, 0xaa, 0x29,
    0x8e, 0xbe, 0x1f, 0x7c, 0xfa, 0x04, 0x45, 0x6a, 0x57, 0xef, 0x71, 0x0a, 0xc9, 0x5b, 0x00,
    0x75, 0x2e, 0xc2, 0x17, 0xd4, 0xd0, 0x3d, 0xfc, 0x46, 0xa0, 0x3c, 0xc4, 0x7b, 0x49, 0xf0,
    0x5a, 0xb1, 0xc2, 0xa6, 0x08, 0xa3, 0xd0, 0xbd, 0x09, 0x52, 0xad, 0x0e, 0x61, 0xd5, 0x4c,
    0x78, 0x88, 0x4a, 0x58, 0x73, 0x9b, 0x89, 0x25, 0x7f, 0x8b, 0xf9, 0x62, 0x23, 0x0b, 0x04,
    0x4f, 0x69, 0x29, 0x01, 0x43, 0x3d, 0xdc, 0xa5, 0x74, 0x81, 0x32, 0xd7, 0x7e, 0xf9, 0x75,
    0x66, 0x7c, 0xe4, 0x99, 0x10, 0xd2, 0x6e, 0x2e, 0x89, 0x89, 0xb8, 0xaa, 0xb0, 0xfa, 0x14,
    0x7a, 0xcb, 0xda, 0x38, 0x0a, 0x83, 0xf5, 0x38, 0x5e, 0x40, 0x59, 0xa3, 0xb2, 0xf1, 0x17,
    0x2d, 0xb2, 0xd6, 0xc9, 0x4c, 0x8d, 0x40, 0xbd, 0x00, 0x4a, 0x00, 0x15, 0x3f, 0x86, 0x43,
    0x07, 0x8a, 0xd8, 0x56, 0xf6, 0x66, 0x71, 0xad, 0x44, 0x73, 0xe0, 0xe7, 0x8f, 0xf1, 0x46,
    0x19, 0xf5, 0x0c, 0x00, 0xf0, 0x09, 0xa8, 0xe8, 0x47, 0xb8, 0x41, 0xc5, 0xa5, 0x85, 0x9f,
    0x72, 0x71, 0x2a, 0xcb, 0x74, 0x03, 0x54, 0x86, 0x1a, 0x2b, 0x9b, 0x5d, 0xa4, 0x66, 0x8e,
    0x30, 0x96, 0x5b, 0xab, 0x98, 0x0d, 0x50, 0x86, 0xac, 0xd0, 0x0e, 0xa9, 0x84, 0x24, 0xc2,
    0x6b, 0x14, 0x67, 0x8d, 0x87, 0x46, 0x81, 0xab, 0xad, 0xa1, 0xac, 0xd0, 0x77, 0x3e, 0x45,
    0x0b, 0x82, 0x09, 0x84, 0xe7, 0xc5, 0xfb, 0xf1, 0x02, 0x73, 0x72, 0xdf, 0x35, 0x76, 0xcf,
    0x4e, 0x0e, 0x7b, 0xd2, 0x1f, 0xe2, 0x8e, 0x35, 0x13, 0x43, 0xb2, 0x99, 0x58, 0x2a, 0x14,
    0x59, 0x07, 0x23, 0xfb, 0x09, 0xf0, 0xdc, 0xc7, 0x20, 0x8b, 0x5a, 0xd0, 0xdf, 0x92, 0xbb,
    0xf6, 0x2d, 0x0c, 0x0e, 0xb1, 0x05, 0x5a, 0xff, 0x01, 0x08, 0xd7, 0x06, 0xf3, 0x98, 0x86,
    0x1a, 0xbb, 0x74, 0x7c, 0x0b, 0x0a, 0x72, 0x14, 0x83, 0x4a, 0xa7, 0xad, 0x4d, 0x35, 0x5a,
    0xda, 0xc0, 0x02, 0x71, 0x40, 0xe6, 0xcb, 0x0f, 0xd8, 0x84, 0x34, 0x56, 0x90, 0x4b, 0xb0,
    0x13, 0xbe, 0x75, 0xa9, 0xe3, 0x7b, 0x81, 0x95, 0xa4, 0xa3, 0x4d, 0xc8, 0x2d, 0xd6, 0x7f,
    0xc4, 0x25, 0x10, 0xf6, 0xc8, 0x95, 0x66, 0x6b, 0xfe, 0x3c, 0x49, 0xe5, 0xf6, 0x54, 0xae,
    0x65, 0xf1, 0xa8, 0x22, 0x48, 0xfa, 0x15, 0x80, 0x4c, 0x55, 0x56, 0x51, 0xdf, 0xf3, 0x14,
    0x11, 0x90, 0x86, 0xcd, 0x28, 0xfe, 0xb6, 0x6c, 0xf8, 0x13, 0xee, 0x28, 0xa8, 0x05, 0xf2,
    0xf3, 0x7f, 0x53, 0x37, 0x97, 0x5a, 0x39, 0xa1, 0xad, 0xe9, 0xba, 0x1a, 0x08, 0x72, 0x05,
    0xce, 0x03, 0x04, 0x05, 0x43, 0x0b, 0x06, 0x33, 0xa0, 0x46, 0xd0, 0x17, 0x40, 0x66, 0x04,
    0xb0, 0x3f, 0xe1, 0x4a, 0x49, 0x94, 0xf9, 0x28, 0x3b, 0xae, 0xad, 0xff, 0x76, 0xe4, 0xf3,
    0x0f, 0xfe, 0xc8, 0xf8, 0xff, 0x20, 0x74, 0xdc, 0xcf, 0x7c, 0x38, 0x25, 0x7a, 0xfd, 0xf3,
    0xf7, 0x88, 0x37, 0x26, 0x44, 0x4a, 0xe2, 0xc6, 0x1e, 0xcc, 0xa0, 0xef, 0x3a, 0x7f, 0xe4,
    0xc0, 0x77, 0xc7, 0xff, 0x03, 0xff, 0xd9, 0x7d, 0xf3, 0x1c, 0xff, 0xff, 0x9f, 0xf8, 0x51,
    0xac, 0x39, 0x3f, 0xcf, 0xf1, 0xff, 0xcf, 0xf1, 0xff, 0xcf, 0xf1, 0xff, 0xd2, 0xb4, 0x78,
    0xff, 0x7f, 0x8e, 0xff, 0x67, 0xd0, 0x9f, 0xe3, 0xff, 0x9f, 0xe3, 0xff, 0x9f, 0xe3, 0xff,
    0xe3, 0xff, 0x9f, 0xe3, 0xff, 0x13, 0x97, 0xe4, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73,
    0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc,
    0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff,
    0xfc, 0x3f, 0xcf, 0xd6, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc,
    0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff,
    0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xff, 0x73, 0xfc, 0xbf, 0xe0,
    0xcf, 0xf1, 0xff, 0xcf, 0xf1, 0xff, 0xcf, 0xf1, 0xff, 0xf4, 0xf3, 0x1c, 0xff, 0xff, 0x1c,
    0xff, 0x1c, 0xff, 0xff, 0xfc, 0xf3, 0xd7, 0xfd, 0x7c, 0x77, 0xfc, 0x3f, 0x9b, 0xb7, 0xdf,
    0xc7, 0xc2, 0xf8, 0xff, 0x42, 0xa1, 0x58, 0xdc, 0xc9, 0xc4, 0xff, 0x17, 0xde, 0x16, 0x9e,
    0xff, 0xff, 0x13, 0x3f, 0x38, 0xc1, 0x3f, 0xfc, 0x59, 0x9c, 0xff, 0xbf, 0x3d, 0x98, 0xe7,
    0xef, 0xfe, 0x91, 0xeb, 0xff, 0x0f, 0x2c, 0xeb, 0x95, 0x7f, 0xbe, 0x7b, 0xfd, 0x17, 0x0b,
    0xb7, 0xc5, 0xe7, 0xf5, 0xff, 0x9f, 0xf8, 0x79, 0x5e, 0xff, 0xff, 0xff, 0xfe, 0x91, 0xeb,
    0xf3, 0x55, 0xa1, 0x9c, 0x9f, 0x81, 0x0d, 0x17, 0x4e, 0xb6, 0xbe, 0x46, 0x7f, 0x62, 0x1f,
    0xd7, 0xff, 0x6e, 0x09, 0x56, 0x7d, 0x7a, 0xfd, 0x97, 0x76, 0xb6, 0x9f, 0xd7, 0xff, 0x7f,
    0x67, 0x0d, 0x4d, 0x2b, 0xb4, 0x2e, 0xfa, 0xd3, 0xb5, 0x0f, 0x3f, 0x70, 0x04, 0xd0, 0x16,
    0x5d, 0xfb, 0xc4, 0x69, 0xd9, 0xe6, 0x1b, 0x60, 0x25, 0x60, 0x7e, 0xe3, 0x4d, 0x6b, 0xed,
    0x67, 0x37, 0x12, 0xd9, 0xcf, 0x36, 0xad, 0xdf, 0xad, 0x7b, 0xdb, 0x9f, 0xb9, 0x9c, 0x2a,
    0xfa, 0x06, 0x56, 0x9b, 0x28, 0xb8, 0x75, 0x20, 0x92, 0xb5, 0x35, 0x67, 0xde, 0xd4, 0xb5,
    0x2d, 0xf9, 0xfe, 0x9c, 0x12, 0xe5, 0x62, 0x02, 0x39, 0x47, 0x36, 0xae, 0x7c, 0x95, 0xaf,
    0xbe, 0x1f, 0xc6, 0xe4, 0xa9, 0x56, 0xc2, 0xe3, 0x5b, 0xca, 0x73, 0x73, 0x36, 0x52, 0x9e,
    0x3e, 0x0c, 0x23, 0x72, 0xac, 0x28, 0x6f, 0xeb, 0xee, 0xc0, 0xd6, 0xe0, 0x6a, 0x07, 0xf6,
    0x7e, 0x31, 0x76, 0xc5, 0x41, 0x1f, 0x05, 0x60, 0x3c, 0xc0, 0x83, 0xce, 0x91, 0xe4, 0xd5,
    0xe3, 0x28, 0x4f, 0x65, 0x2f, 0x5d, 0xf5, 0x3e, 0xf4, 0x1c, 0xab, 0xf0, 0xe1, 0x07, 0xda,
    0xb6, 0x90, 0xbd, 0x7e, 0xc6, 0x75, 0xf5, 0x19, 0x16, 0xd8, 0xe7, 0x22, 0x7c, 0x17, 0xc6,
    0xc6, 0xda, 0xcf, 0x11, 0x18, 0xa3, 0xae, 0xa2, 0x61, 0x43, 0x09, 0x34, 0x7d, 0x5f, 0xff,
    0xe3, 0x0f, 0xd6, 0x8f, 0xc0, 0x55, 0x45, 0x50, 0x39, 0xed, 0xc0, 0x87, 0x71, 0x0f, 0x6c,
    0x3e, 0x84, 0xfc, 0x2a, 0x70, 0x70, 0x4b, 0xf1, 0xc7, 0xd7, 0x3f, 0xb0, 0xa3, 0x21, 0x0d,
    0xfb, 0x38, 0x75, 0xa1, 0x48, 0x1a, 0x8c, 0xad, 0xa4, 0x04, 0xe7, 0x8b, 0xa3, 0x3e, 0xf1,
    0x47, 0xeb, 0x70, 0xe2, 0x22, 0x87, 0x07, 0x5b, 0x39, 0xd5, 0x98, 0x2c, 0xf0, 0x33, 0xa5,
    0xb6, 0xfc, 0x61, 0x64, 0x9d, 0xb9, 0xb7, 0xd3, 0x57, 0x43, 0x8a, 0x93, 0xc5, 0xbd, 0x72,
    0x51, 0xaa, 0xe0, 0x04, 0x0a, 0x92, 0xa4, 0xc8, 0x2d, 0xf9, 0xfa, 0x07, 0xf6, 0xba, 0x04,
    0xff, 0x3a, 0x9c, 0x6c, 0x40, 0xe3, 0x9b, 0x58, 0xf1, 0xa5, 0x92, 0xcf, 0x8e, 0xb6, 0x40,
    0xd8, 0x37, 0x20, 0x7c, 0x3d, 0x5e, 0xb4, 0x85, 0x60, 0xec, 0x23, 0x30, 0xa9, 0xf7, 0x13,
    0x3f, 0x91, 0xef, 0x39, 0xbd, 0xdd, 0xd0, 0xf5, 0xfd, 0x70, 0x43, 0x6d, 0x94, 0xb3, 0x17,
    0xeb, 0x27, 0xf8, 0x05, 0xa4, 0x9d, 0x65, 0x63, 0x18, 0x77, 0x8f, 0x46, 0x9e, 0x20, 0x1d,
    0xc2, 0xf6, 0xf4, 0xff, 0xac, 0x47, 0xec, 0x96, 0x42, 0x77, 0xce, 0xbf, 0xd6, 0x65, 0xc3,
    0x7e, 0xc8, 0x27, 0x86, 0xd4, 0x9b, 0x78, 0x72, 0xd1, 0x2d, 0xb5, 0xf6, 0xd3, 0x5a, 0xb6,
    0x65, 0x2e, 0x91, 0xd0, 0xe4, 0xfc, 0xa5, 0x5b, 0xe6, 0x01, 0x0c, 0xdc, 0x29, 0x2f, 0x41,
    0x90, 0x24, 0x76, 0xb6, 0xa8, 0x84, 0xf5, 0x53, 0x8c, 0x16, 0x7e, 0xa1, 0xa2, 0x65, 0x1a,
    0x29, 0x33, 0xa0, 0xa9, 0x99, 0x2f, 0x1b, 0x7f, 0xff, 0x3d, 0x6e, 0x2a, 0x29, 0xf8, 0x0d,
    0x14, 0x1f, 0x26, 0xfa, 0x87, 0x97, 0x5f, 0xb2, 0x88, 0xe1, 0x35, 0x03, 0xff, 0xd7, 0x11,
    0xe3, 0x62, 0x04, 0xc4, 0x8b, 0xef, 0xcf, 0xc3, 0xc2, 0x8f, 0x7f, 0x36, 0x16, 0x7e, 0x5c,
    0x05, 0x02, 0x31, 0x0c, 0x9d, 0xde, 0xdc, 0x08, 0xe0, 0xfa, 0x31, 0x7f, 0xe3, 0x38, 0x1a,
    0xe4, 0x17, 0xeb, 0x6a, 0xf5, 0x5b, 0x7b, 0xe2, 0x3e, 0x00, 0x81, 0x1a, 0xeb, 0x57, 0xc5,
    0xe1, 0xac, 0x85, 0x5f, 0xa1, 0x5e, 0x3b, 0x00, 0xf4, 0x99, 0x6a, 0xbe, 0xdb, 0xcb, 0x4e,
    0xc2, 0xef, 0xe4, 0x9f, 0xf1, 0x94, 0x1d, 0xa8, 0x5c, 0x08, 0xbd, 0x50, 0x16, 0x6e, 0x5d,
    0xf1, 0x62, 0x56, 0xa7, 0xae, 0xfd, 0xc7, 0xd8, 0x90, 0xca, 0x02, 0x44, 0xab, 0xcb, 0x39,
    0x28, 0x08, 0x20, 0x8b, 0xbf, 0xb2, 0xc3, 0xca, 0xf0, 0xf7, 0x76, 0xfe, 0xb2, 0x0c, 0x5c,
    0xc9, 0x9b, 0x0c, 0x76, 0x63, 0xed, 0x15, 0x51, 0xcb, 0xda, 0x4b, 0x65, 0x88, 0x42, 0x88,
    0xa1, 0xb5, 0xbf, 0x9b, 0x34, 0x5f, 0x15, 0x25, 0x39, 0x4a, 0x04, 0x7e, 0x1f, 0x49, 0xbe,
    0x94, 0x27, 0x6b, 0x2b, 0xd4, 0xf7, 0x65, 0x35, 0xa6, 0x57, 0xb3, 0xee, 0x82, 0xf0, 0x81,
    0x5e, 0xdf, 0xa6, 0x83, 0xd8, 0x3c, 0x2a, 0x3a, 0xc6, 0xc3, 0xef, 0x6f, 0x27, 0x1e, 0x8c,
    0x9f, 0xaf, 0xaf, 0x4a, 0xcf, 0xe8, 0x3b, 0x44, 0x3a, 0xe4, 0x8a, 0x2b, 0xd3, 0xf1, 0x17,
    0x9a, 0xb8, 0xe9, 0x6f, 0x9b, 0x56, 0x38, 0x8c, 0xab, 0xbc, 0x30, 0x70, 0x95, 0x58, 0x8c,
    0x1f, 0xf1, 0x2c, 0xb6, 0xa7, 0xb8, 0x7b, 0xe2, 0x89, 0x9d, 0x4d, 0xa1, 0x02, 0xe0, 0xa9,
    0xa6, 0x68, 0x37, 0x99, 0x59, 0x21, 0x3b, 0xef, 0xed, 0xb8, 0x18, 0x93, 0xc3, 0x86, 0xdc,
    0xb4, 0x36, 0x94, 0xf7, 0x2f, 0xb3, 0xc2, 0x52, 0x2a, 0x3a, 0x0a, 0xb1, 0x70, 0x05, 0x71,
    0xd3, 0xa2, 0xe3, 0xa5, 0xe4, 0x63, 0x15, 0x2e, 0x7f, 0xde, 0xd8, 0xd2, 0x20, 0xa0, 0xa6,
    0x0c, 0x24, 0xd2, 0x3a, 0x14, 0x7d, 0xba, 0xdf, 0xbf, 0x82, 0xd2, 0xab, 0xe8, 0x65, 0x2a,
    0x2c, 0x2f, 0xa1, 0xad, 0xad, 0x2d, 0x7b, 0x32, 0xa0, 0x40, 0xcc, 0x48, 0x59, 0x4e, 0xda,
    0xe4, 0x0f, 0xaf, 0x0a, 0x85, 0xba, 0x40, 0x5b, 0x9c, 0xfb, 0xee, 0x56, 0xaa, 0xd4, 0x6b,
    0x99, 0xa6, 0x92, 0xd3, 0xcd, 0x36, 0xb1, 0x34, 0x4c, 0x52, 0x76, 0x50, 0x5b, 0x87, 0x09,
    0x9b, 0x49, 0xd9, 0xad, 0xfa, 0x45, 0xe3, 0xfc, 0xe0, 0x6c, 0x29, 0x58, 0x07, 0x56, 0xe4,
    0x86, 0x38, 0x9e, 0x13, 0xf7, 0x1e, 0x39, 0xb4, 0x5b, 0x86, 0xf0, 0x72, 0x64, 0xa8, 0xdb,
    0xe7, 0x0c, 0x14, 0xf0, 0x57, 0x00, 0x5c, 0xd4, 0x03, 0xb0, 0x3e, 0xc9, 0xa6, 0xf7, 0xad,
    0xd6, 0xff, 0xe7, 0x7f, 0x7e, 0xf9, 0xe5, 0xf7, 0xdf, 0xd7, 0x7f, 0xfd, 0x0e, 0xc8, 0xc2,
    0xfa, 0x97, 0x81, 0x16, 0xb7, 0x8d, 0xb0, 0x7d, 0xfb, 0xf6, 0xeb, 0xaf, 0xff, 0xfc, 0xa7,
    0x5b, 0x92, 0xda, 0xd7, 0xcc, 0x85, 0xf0, 0x47, 0x15, 0x92, 0x09, 0x99, 0xaa, 0x7c, 0x48,
    0xc9, 0xc8, 0x8f, 0xf0, 0x27, 0x02, 0xad, 0xb4, 0x3f, 0xc4, 0x6d, 0x1c, 0x7d, 0xde, 0xd3,
    0xf0, 0xa7, 0x6f, 0x83, 0xc5, 0xf1, 0xbd, 0xd4, 0xf0, 0x3e, 0xd3, 0xcc, 0x02, 0xf8, 0x13,
    0x3f, 0xfc, 0xbb, 0xbd, 0x1f, 0x55, 0x0e, 0x2f, 0x1a, 0x07, 0xad, 0xca, 0xd1, 0x42, 0x00,
    0x72, 0xc8, 0x66, 0xeb, 0x6b, 0xe8, 0x05, 0x1b, 0xeb, 0xeb, 0x2f, 0xad, 0x9f, 0x8c, 0xd5,
    0xa7, 0xb9, 0xc0, 0x2f, 0xab, 0x64, 0xa0, 0x85, 0xb8, 0x43, 0xc3, 0xc8, 0xc1, 0xa8, 0xb3,
    0x03, 0x9a, 0x07, 0x82, 0xf7, 0x92, 0x3c, 0x80, 0xec, 0x7b, 0xb0, 0x2a, 0x93, 0x09, 0xf0,
    0x2f, 0xed, 0x00, 0x65, 0x43, 0x60, 0xf1, 0x64, 0xf2, 0x9a, 0x7f, 0x2f, 0x95, 0x1d, 0x65,
    0xbf, 0x7d, 0x49, 0x75, 0x95, 0x4e, 0x29, 0xfd, 0x4d, 0x48, 0xf6, 0x18, 0xbd, 0x5b, 0x06,
    0x66, 0x62, 0x0f, 0xdc, 0xac, 0xc2, 0x8a, 0xb3, 0x45, 0x54, 0xf2, 0xd2, 0xd6, 0xe1, 0x8f,
    0xb3, 0x1d, 0x58, 0x83, 0x2a, 0x42, 0xc3, 0xd9, 0x74, 0x3c, 0xa3, 0x03, 0x2e, 0x26, 0x12,
    0xaa, 0x27, 0x2b, 0xcf, 0x87, 0xc5, 0x63, 0xa6, 0x8d, 0x64, 0xd8, 0x06, 0x18, 0xf5, 0xa2,
    0x65, 0x00, 0xb0, 0x5a, 0x75, 0x0a, 0x2c, 0x97, 0xf8, 0x55, 0x84, 0x44, 0x6a, 0xd9, 0x9b,
    0xfc, 0x25, 0xe7, 0xf5, 0x1a, 0x2f, 0x97, 0xb5, 0x5f, 0x01, 0xa5, 0x05, 0xfc, 0x9f, 0x7c,
    0x61, 0x5a, 0xd6, 0x51, 0xcc, 0x82, 0xfe, 0x6c, 0x18, 0xe2, 0x45, 0x43, 0x60, 0x14, 0x09,
    0xe4, 0x9d, 0xc2, 0x58, 0x5e, 0xe6, 0xe0, 0xeb, 0x7b, 0xc4, 0x85, 0xf5, 0xbf, 0xff, 0x6b,
    0x8d, 0xbc, 0xd2, 0xfb, 0xd6, 0xef, 0xdf, 0xe4, 0xea, 0x50, 0xfa, 0xd7, 0x68, 0x71, 0x09,
    0x62, 0x87, 0x4b, 0xe9, 0x99, 0x7b, 0x81, 0x1e, 0xcc, 0x2e, 0x08, 0xf5, 0x2d, 0xb6, 0x67,
    0x58, 0x70, 0x23, 0x26, 0xfd, 0x5b, 0xc4, 0xd4, 0x8f, 0xa2, 0x44, 0xab, 0x21, 0xae, 0xad,
    0x03, 0xd0, 0x17, 0x22, 0x15, 0x87, 0x25, 0x00, 0x0b, 0xcd, 0xe6, 0xb5, 0xd5, 0xba, 0x38,
    0x78, 0x6f, 0x45, 0x21, 0x05, 0x2c, 0x04, 0xe1, 0x9c, 0x63, 0xc7, 0x30, 0xf4, 0xc2, 0xaa,
    0xd1, 0x30, 0x9c, 0xa0, 0x07, 0x02, 0xad, 0x0d, 0x62, 0x18, 0xb4, 0x27, 0xcf, 0xdb, 0xf1,
    0x6f, 0x7d, 0x2b, 0x9b, 0xe9, 0xd3, 0xd1, 0x39, 0x04, 0x72, 0x3c, 0x09, 0xa7, 0x21, 0xde,
    0x02, 0xd6, 0x33, 0xaa, 0x24, 0xd6, 0xbd, 0x67, 0x5b, 0x6b, 0x14, 0x72, 0xb2, 0x46, 0xe7,
    0x5d, 0xdb, 0x79, 0x6f, 0x7d, 0xb5, 0xef, 0xed, 0x2d, 0xdc, 0x55, 0xde, 0x3a, 0xa0, 0x10,
    0x68, 0x8d, 0x18, 0xd1, 0x7b, 0xcb, 0x99, 0xd1, 0x86, 0xfa, 0x94, 0x0f, 0xc0, 0x67, 0xcc,
    0x85, 0xf6, 0x41, 0x8a, 0x27, 0xa0, 0x22, 0x83, 0x81, 0x0f, 0x11, 0xdf, 0x3d, 0x30, 0x32,
    0x78, 0xe2, 0x70, 0x5c, 0x0c, 0x24, 0xeb, 0xaf, 0x9a, 0xde, 0x0b, 0xcc, 0x20, 0x59, 0x25,
    0xdf, 0xc8, 0x27, 0x30, 0x64, 0x08, 0xea, 0x20, 0x17, 0x4d, 0xeb, 0x69, 0xf5, 0xd9, 0xa8,
    0xb0, 0x15, 0x14, 0xe0, 0x90, 0x0b, 0x6d, 0xb0, 0x97, 0x28, 0x39, 0x57, 0x23, 0xbb, 0x4e,
    0x0c, 0xa5, 0x69, 0x30, 0xa3, 0x37, 0xf0, 0x71, 0x93, 0xaa, 0xbd, 0x34, 0xc9, 0x69, 0x21,
    0xb0, 0x54, 0x56, 0x6d, 0x66, 0x0f, 0x19, 0xfc, 0x5f, 0x33, 0x7b, 0xe8, 0x1a, 0x24, 0xb3,
    0xce, 0x2e, 0xb6, 0xef, 0x23, 0x24, 0x93, 0x3f, 0xe9, 0x53, 0xa6, 0x0b, 0x2e, 0x21, 0xfc,
    0x78, 0xf7, 0x09, 0x81, 0x42, 0x7f, 0xc4, 0xe1, 0x7d, 0x0f, 0x32, 0x9e, 0x25, 0x2e, 0x08,
    0xd8, 0x52, 0x23, 0x9c, 0x52, 0x49, 0x6f, 0xc4, 0x3a, 0x96, 0x58, 0x0c, 0xf3, 0x5c, 0xc7,
    0xb6, 0xbd, 0x89, 0x2d, 0x2c, 0xb7, 0x2b, 0x09, 0x8c, 0x7d, 0x82, 0x26, 0xf5, 0x05, 0x01,
    0xc7, 0x46, 0xfe, 0x54, 0xda, 0x28, 0xa6, 0x69, 0x03, 0xab, 0x79, 0xc8, 0xc7, 0x3f, 0xc0,
    0xff, 0x89, 0xbb, 0x16, 0xea, 0x99, 0xf5, 0xd3, 0x4f, 0xde, 0x02, 0x2a, 0x91, 0xe6, 0xbb,
    0x95, 0x78, 0x44, 0xdf, 0x4f, 0x2f, 0xd2, 0xc3, 0x4a, 0xbf, 0x13, 0x6e, 0x64, 0x25, 0xbb,
    0xe2, 0x94, 0x32, 0x5e, 0xd2, 0x82, 0x61, 0x36, 0x74, 0x58, 0x13, 0xa3, 0xe7, 0x02, 0xa1,
    0xca, 0x70, 0xd0, 0xf0, 0x21, 0xa2, 0x38, 0x37, 0x0c, 0x89, 0xd6, 0x4c, 0x30, 0x6c, 0xf0,
    0x9d, 0x20, 0x8b, 0x18, 0x02, 0x6e, 0xd1, 0x7c, 0xa4, 0xb8, 0x7c, 0x54, 0x56, 0xe8, 0xe3,
    0x2f, 0x5f, 0xf0, 0xb4, 0xd5, 0x8f, 0x3c, 0x97, 0x6a, 0xd7, 0x3c, 0x5a, 0x7c, 0xa1, 0xf8,
    0x69, 0x2e, 0x7f, 0x54, 0x8a, 0x6d, 0x41, 0xb7, 0x1b, 0x3b, 0x99, 0xb7, 0x40, 0x2e, 0x1b,
    0xe2, 0x2d, 0x34, 0x1c, 0x82, 0xc2, 0xe7, 0x87, 0x83, 0x0d, 0xa5, 0x44, 0x5a, 0x2b, 0xe6,
    0x00, 0x8e, 0x00, 0xac, 0xc6, 0xdc, 0x70, 0xe2, 0x8e, 0x5d, 0x3a, 0xfc, 0x4c, 0xec, 0x90,
    0x13, 0xa2, 0x10, 0x41, 0xb6, 0xa4, 0xe9, 0x74, 0xae, 0xf5, 0xb3, 0xfc, 0x32, 0xb5, 0x07,
    0xd4, 0xf2, 0x9d, 0x78, 0xfc, 0x7f, 0xc4, 0xf0, 0xe4, 0xba, 0x57, 0xfc, 0xed, 0xff, 0xfe,
    0x57, 0x1a, 0xe3, 0xbb, 0xa9, 0xd2, 0xcb, 0x1f, 0x83, 0xf0, 0x22, 0xab, 0x86, 0xd7, 0xb8,
    0xbe, 0xf7, 0xc4, 0x0d, 0x8e, 0x79, 0x17, 0xc0, 0x73, 0xd3, 0x76, 0xb2, 0xb2, 0xa4, 0xa9,
    0xf7, 0x88, 0x81, 0x03, 0xa0, 0xd4, 0xb1, 0x08, 0xa0, 0x57, 0x44, 0x2a, 0x05, 0xe9, 0x61,
    0x29, 0xcc, 0x67, 0x42, 0x9e, 0xf2, 0xe2, 0x08, 0x11, 0x19, 0x65, 0xa9, 0x50, 0xc4, 0x0c,
    0x29, 0x7e, 0x0e, 0x2d, 0xa3, 0xdc, 0x5e, 0xd0, 0x39, 0x4c, 0x41, 0xb6, 0x9b, 0x95, 0x1a,
    0x83, 0x9a, 0x42, 0x06, 0x4c, 0x26, 0xf6, 0x5c, 0x1d, 0x22, 0x63, 0x6f, 0x5f, 0xfc, 0x7e,
    0x0f, 0xc5, 0x66, 0xd0, 0xc1, 0x3f, 0xfe, 0xa1, 0xbc, 0xe1, 0x9d, 0x09, 0xeb, 0x5f, 0xe2,
    0x7b, 0x0d, 0x4c, 0xa6, 0x3c, 0x8f, 0xd1, 0xdf, 0xa1, 0x55, 0x2b, 0x5a, 0xdb, 0xd2, 0x5e,
    0xcb, 0xf4, 0xf2, 0x3d, 0x6e, 0x78, 0x68, 0x40, 0x2f, 0x67, 0x77, 0x6a, 0x03, 0x69, 0xd6,
    0xb2, 0x1f, 0x75, 0x10, 0xe0, 0x85, 0x37, 0x9a, 0x8d, 0x3a, 0x69, 0x07, 0x99, 0xea, 0x8a,
    0x1c, 0xa4, 0x33, 0x21, 0x14, 0xc4, 0x01, 0x2f, 0x8d, 0x0d, 0xe9, 0x24, 0x84, 0x4b, 0x86,
    0x5e, 0x21, 0x1d, 0xea, 0x1d, 0xbe, 0xc4, 0x24, 0xbd, 0xb1, 0x0e, 0x4f, 0xeb, 0x9b, 0xb1,
    0x8d, 0x07, 0xb7, 0xb9, 0x68, 0x6c, 0xdc, 0x6e, 0xac, 0x66, 0xa6, 0x41, 0x15, 0xbc, 0xd9,
    0xa7, 0x75, 0x74, 0x5e, 0x89, 0x31, 0x84, 0x62, 0x14, 0x3a, 0xc0, 0xb8, 0x9a, 0x57, 0x01,
    0xca, 0x09, 0x80, 0x63, 0x19, 0xf0, 0xa7, 0x40, 0xdd, 0xb0, 0xbd, 0x28, 0x1f, 0x62, 0x12,
    0x3a, 0xc0, 0xf0, 0x6a, 0x25, 0x80, 0xa1, 0x9c, 0x00, 0x98, 0x44, 0xcc, 0x9f, 0x03, 0x2d,
    0x04, 0x0d, 0xe0, 0xea, 0x30, 0x06, 0xae, 0xee, 0xcc, 0x30, 0x80, 0x07, 0x45, 0x04, 0x78,
    0x66, 0x02, 0x5f, 0x3e, 0xaa, 0x48, 0x9e, 0x72, 0xe7, 0x0a, 0x8b, 0xd5, 0x7a, 0x5e, 0xa0,
    0xa8, 0x6e, 0x0d, 0x55, 0x26, 0xe7, 0xf5, 0xe2, 0x0e, 0xc5, 0x4c, 0xc8, 0xd3, 0x21, 0x81,
    0x3b, 0xf1, 0x76, 0x8f, 0x5b, 0x79, 0x1b, 0xe9, 0x4b, 0x1d, 0x06, 0x3c, 0xe6, 0xde, 0xc6,
    0x9d, 0x8c, 0x7b, 0x08, 0xea, 0x6c, 0xbc, 0x20, 0x08, 0xa8, 0x35, 0xb9, 0x1d, 0x9b, 0xe3,
    0x2a, 0x2c, 0xd0, 0x2a, 0xb2, 0x8d, 0x64, 0x1d, 0xdd, 0x1a, 0xc6, 0xc3, 0xf1, 0xa6, 0x95,
    0x1b, 0x84, 0x47, 0xe7, 0x0d, 0xc0, 0xdb, 0x78, 0x42, 0x79, 0xec, 0xff, 0xd4, 0x59, 0x47,
    0xd0, 0x8c, 0x83, 0x23, 0x91, 0x5a, 0x7f, 0xff, 0x5d, 0x69, 0xe7, 0x1b, 0x99, 0x33, 0x2e,
    0x62, 0x0b, 0xa6, 0x23, 0x70, 0x2b, 0x5c, 0x1f, 0xb2, 0x7d, 0xcd, 0xef, 0x91, 0x8c, 0x19,
    0x36, 0xbc, 0xb6, 0x0b, 0x38, 0x57, 0x56, 0x32, 0xfc, 0x12, 0x8e, 0x15, 0x07, 0x1d, 0x61,
    0xcb, 0xa6, 0x41, 0x15, 0xf5, 0x8d, 0x7c, 0x3e, 0xa6, 0xd1, 0x4c, 0xc3, 0xb8, 0x0b, 0x0a,
    0x8d, 0x40, 0xc1, 0xfb, 0xad, 0xf1, 0x2c, 0x1a, 0x6e, 0xdc, 0x9b, 0xb8, 0xad, 0x26, 0x60,
    0x94, 0x13, 0x3c, 0x5d, 0x9b, 0xbc, 0x44, 0x4d, 0xd4, 0x76, 0xe7, 0x93, 0x07, 0x6d, 0x3f,
    0x9e, 0x41, 0x26, 0xfd, 0x16, 0x63, 0xad, 0xa3, 0xf7, 0xaf, 0x5f, 0x0f, 0xbc, 0xe9, 0x70,
    0x43, 0xcb, 0xf7, 0xb5, 0xfd, 0xc0, 0x11, 0xa7, 0xaf, 0xe9, 0x2e, 0xb3, 0xe8, 0x75, 0xb1,
    0xdc, 0xc6, 0xba, 0x5d, 0xba, 0xe7, 0xc7, 0xb6, 0x46, 0x14, 0x3f, 0x20, 0xce, 0x82, 0x32,
    0xa3, 0xd4, 0x76, 0x30, 0x44, 0x9e, 0x9f, 0xd7, 0xac, 0x07, 0x8a, 0xf3, 0x17, 0xa7, 0xa8,
    0xf1, 0xc2, 0x2b, 0x85, 0x22, 0x3e, 0xba, 0x87, 0x97, 0xaf, 0xfd, 0x08, 0xf2, 0xd7, 0x76,
    0x4f, 0x73, 0x68, 0x29, 0x20, 0x93, 0x52, 0x33, 0x75, 0x8c, 0x21, 0x08, 0xd9, 0xcd, 0xa9,
    0xcb, 0x18, 0x27, 0xe1, 0x0a, 0x6b, 0x72, 0x2f, 0x79, 0x7d, 0x14, 0x83, 0xf9, 0x62, 0x2d,
    0xcb, 0xb9, 0x3b, 0x3d, 0x08, 0xc2, 0xa9, 0x3b, 0xb9, 0x08, 0x50, 0xca, 0x61, 0x04, 0x85,
    0xf3, 0xce, 0x09, 0x88, 0x30, 0xbe, 0xff, 0x20, 0x77, 0x4d, 0x0d, 0x31, 0x16, 0x2b, 0x0c,
    0xf5, 0x39, 0x54, 0xa3, 0xb8, 0xbd, 0xbd, 0xab, 0xae, 0x4c, 0x39, 0x82, 0x85, 0xbb, 0xe6,
    0x47, 0x19, 0xea, 0xc6, 0xcb, 0x17, 0x86, 0xad, 0x71, 0x73, 0xe4, 0x87, 0xe1, 0x6d, 0x4c,
    0x95, 0x20, 0xc2, 0x08, 0x64, 0xcb, 0x96, 0x5b, 0x2c, 0x23, 0x17, 0xf9, 0x7e, 0x44, 0x81,
    0x6e, 0x7c, 0x87, 0x04, 0xea, 0xa4, 0x13, 0x3c, 0x91, 0x47, 0xc7, 0x34, 0x07, 0x78, 0xca,
    0x94, 0xba, 0x7b, 0x77, 0x32, 0xe1, 0xf3, 0xad, 0x01, 0xd0, 0xeb, 0xc4, 0x0b, 0x67, 0x51,
    0xb3, 0xae, 0xb9, 0x48, 0xf4, 0x48, 0x95, 0x8c, 0xfe, 0xda, 0xc4, 0x33, 0x2a, 0x5f, 0x22,
    0x07, 0x5f, 0x50, 0xa5, 0xf8, 0xa2, 0xcd, 0xf5, 0x17, 0x71, 0xdd, 0x08, 0xfa, 0x3a, 0xb0,
    0x38, 0x72, 0x79, 0x40, 0x5f, 0x38, 0x48, 0x23, 0x55, 0x5a, 0x9c, 0x1d, 0x4e, 0x24, 0x03,
    0x68, 0x5a, 0x0f, 0xc6, 0xce, 0x80, 0xd4, 0xbf, 0xb0, 0x53, 0xee, 0x8b, 0xce, 0xb0, 0xf1,
    0x4e, 0x6d, 0x7a, 0xe0, 0xfb, 0x1b, 0x58, 0x6c, 0x11, 0x15, 0xe2, 0xf7, 0x0f, 0x46, 0x56,
    0xc0, 0xb9, 0xa1, 0x55, 0x7a, 0x99, 0x9d, 0xb5, 0x74, 0x1c, 0x8f, 0xf6, 0x0c, 0x33, 0xf5,
    0x6f, 0xe2, 0x72, 0x42, 0xe0, 0x41, 0x63, 0x80, 0xb6, 0xdd, 0x38, 0xdb, 0x77, 0xec, 0xa9,
    0x5e, 0x9c, 0x82, 0xc0, 0x09, 0x82, 0x05, 0x1d, 0x06, 0x1f, 0xd0, 0xf4, 0x7c, 0xfb, 0x66,
    0x9d, 0x9f, 0x96, 0x6e, 0xae, 0x4e, 0x9f, 0xec, 0xee, 0xde, 0xac, 0xf6, 0x35, 0x7c, 0x3a,
    0x3c, 0x1d, 0xd9, 0xdd, 0x47, 0x1f, 0xfe, 0xf6, 0xae, 0x4b, 0xd5, 0xe8, 0x7a, 0xbb, 0x13,
    0x5f, 0x35, 0xee, 0xfb, 0xde, 0xce, 0x6f, 0xfd, 0x79, 0x2d, 0xaa, 0x05, 0xf5, 0x7b, 0xe7,
    0xf4, 0xeb, 0x4d, 0xe7, 0xf4, 0xbe, 0xb7, 0x7d, 0xe9, 0x5d, 0x78, 0x35, 0x0f, 0xea, 0x3c,
    0xb6, 0x3b, 0xf3, 0xeb, 0x52, 0xe7, 0xa9, 0xf6, 0x75, 0xdc, 0xab, 0x8d, 0xea, 0xc3, 0xde,
    0xbd, 0xd8, 0x3b, 0xae, 0x16, 0x7a, 0xdb, 0xb5, 0x99, 0x73, 0x72, 0xee, 0x5d, 0x35, 0x1f,
    0xde, 0xa8, 0x3a, 0xbd, 0xb9, 0x3a, 0xf7, 0x2e, 0xfc, 0xa9, 0x03, 0x75, 0xa6, 0xd7, 0x57,
    0x07, 0xbb, 0xbb, 0x13, 0x40, 0xbb, 0x6f, 0x6b, 0x5f, 0xa3, 0xdd, 0x8b, 0x42, 0xb5, 0x7c,
    0xae, 0x44, 0x4e, 0xa1, 0x51, 0xbe, 0x6c, 0x9d, 0x56, 0xf1, 0xd9, 0x69, 0x9f, 0x3f, 0x35,
    0xd1, 0x6e, 0xa3, 0x50, 0xad, 0x36, 0x9e, 0xa6, 0xf0, 0xbd, 0x5e, 0x3b, 0xab, 0x14, 0xcb,
    0x57, 0xf5, 0xc3, 0xb3, 0xe3, 0x4e, 0xf9, 0xb2, 0xeb, 0x1c, 0x9e, 0x55, 0xeb, 0xe5, 0xcb,
    0x25, 0x72, 0xdb, 0xa7, 0xf0, 0xfb, 0x7c, 0xb7, 0xd9, 0xae, 0x1e, 0xf5, 0xef, 0x2e, 0x77,
    0x9e, 0xa2, 0xdd, 0x56, 0xa1, 0x7a, 0x0a, 0xf5, 0x4e, 0xa9, 0x5e, 0xd5, 0x87, 0xf2, 0xc5,
    0xb3, 0x8a, 0x03, 0xe5, 0xda, 0x51, 0xa3, 0x5d, 0x2d, 0xdb, 0x85, 0x5a, 0x04, 0x6d, 0x97,
    0xad, 0x69, 0x03, 0xca, 0x94, 0x1a, 0xcd, 0xc7, 0xb3, 0xcb, 0x76, 0xf5, 0xec, 0xac, 0x02,
    0xb7, 0xdb, 0xd1, 0x25, 0xc2, 0xf4, 0x84, 0xdf, 0x1a, 0x3b, 0x97, 0xde, 0x23, 0xfc, 0xae,
    0x50, 0xfd, 0xf6, 0x80, 0xea, 0x35, 0xe6, 0x8f, 0x47, 0xf0, 0xee, 0xd3, 0x45, 0x11, 0xca,
    0xa7, 0x00, 0x0b, 0x8e, 0xa1, 0x4f, 0xdf, 0x9a, 0x87, 0x8f, 0x27, 0x5c, 0x1e, 0xe0, 0x6b,
    0x43, 0xb8, 0xaa, 0xee, 0x5d, 0xdc, 0x26, 0xc0, 0xd4, 0xa9, 0x9f, 0x55, 0x70, 0x4c, 0xd1,
    0x1b, 0x60, 0xee, 0x78, 0x8f, 0x9f, 0xb0, 0xad, 0xb3, 0xe3, 0xbd, 0x0a, 0xfc, 0xbe, 0x6f,
    0x52, 0xdb, 0x47, 0x17, 0x05, 0x80, 0xfb, 0xc9, 0xaf, 0x70, 0x3b, 0xe7, 0xbb, 0x50, 0xff,
    0xf1, 0x15, 0xea, 0x75, 0x4f, 0x2b, 0x67, 0x47, 0xe5, 0xa3, 0xcb, 0x2e, 0x96, 0x01, 0x58,
    0x30, 0xe6, 0x82, 0x03, 0xbf, 0xfb, 0xbb, 0x58, 0x0f, 0xfa, 0xaf, 0xc3, 0xef, 0x21, 0xc3,
    0x17, 0xb5, 0xa1, 0x4c, 0xbb, 0xf9, 0xe8, 0xc3, 0x3b, 0x9f, 0xda, 0xdc, 0x6e, 0x00, 0x2e,
    0x77, 0xa7, 0x1f, 0x35, 0x11, 0x5e, 0x1a, 0x67, 0xfd, 0xee, 0xac, 0xb2, 0x87, 0xf0, 0x46,
    0x6f, 0xb9, 0xd9, 0x64, 0x18, 0xb8, 0x8d, 0x3e, 0xc3, 0x3e, 0x97, 0x38, 0xe2, 0x77, 0xcb,
    0x31, 0xdc, 0x38, 0x2f, 0xee, 0xdd, 0xb9, 0x3e, 0x7e, 0xc4, 0x57, 0xa7, 0x42, 0xe3, 0xbf,
    0xe3, 0x47, 0x98, 0x00, 0xde, 0x05, 0xed, 0xe2, 0x3c, 0x34, 0xe4, 0x1c, 0xb5, 0xa0, 0x5c,
    0xf9, 0x08, 0xed, 0x55, 0x4f, 0x45, 0x5f, 0xea, 0xdc, 0x1c, 0x89, 0x3e, 0x68, 0xbe, 0x61,
    0x95, 0x39, 0x61, 0x98, 0xea, 0x85, 0x4b, 0x09, 0x13, 0x94, 0xaf, 0x1f, 0x23, 0x2e, 0xdb,
    0x97, 0x91, 0x5d, 0x38, 0x2d, 0xb7, 0x11, 0xdf, 0x30, 0x6f, 0x8d, 0x23, 0x03, 0x0d, 0x76,
    0x11, 0xc0, 0x5d, 0x6e, 0xcf, 0x1f, 0x5b, 0x04, 0x0f, 0xd1, 0x63, 0x9b, 0xe6, 0xf9, 0xbc,
    0x4e, 0xf0, 0x77, 0x04, 0x0e, 0x88, 0x3e, 0x4a, 0x97, 0x11, 0xd0, 0x63, 0xb9, 0x35, 0x5f,
    0x2b, 0xd3, 0x83, 0x7c, 0xb7, 0xb4, 0x5c, 0x82, 0xcb, 0xfa, 0xdb, 0xcb, 0x79, 0x42, 0x2f,
    0x76, 0x81, 0x61, 0x63, 0xba, 0xf6, 0x52, 0x73, 0xba, 0x2a, 0xae, 0x90, 0x7e, 0xea, 0x72,
    0x04, 0xee, 0x55, 0xfc, 0x71, 0x1f, 0xcd, 0xc7, 0x2a, 0xe2, 0x48, 0x9b, 0x23, 0x82, 0xe9,
    0x5b, 0xa5, 0x61, 0x84, 0x89, 0xc6, 0xcf, 0x74, 0x66, 0x4b, 0x98, 0x1c, 0xc0, 0xf3, 0xe5,
    0xac, 0x63, 0x65, 0x4e, 0x7a, 0x95, 0x15, 0xe8, 0xe4, 0xa4, 0x7e, 0x08, 0xbf, 0x9f, 0x60,
    0x26, 0xeb, 0xa4, 0x34, 0x3c, 0x52, 0xda, 0xa9, 0x4a, 0xba, 0x20, 0xfc, 0x17, 0x63, 0xfc,
    0x78, 0x93, 0xfe, 0xba, 0x71, 0x1b, 0xf0, 0xae, 0x70, 0x8d, 0x73, 0x3e, 0xbf, 0x04, 0x1a,
    0x57, 0x4e, 0xcb, 0xfd, 0xf6, 0xe9, 0xa2, 0xf5, 0x85, 0xfd, 0x7f, 0xc5, 0x35, 0x65, 0xe4,
    0x95, 0xcb, 0xa8, 0x0b, 0x38, 0xea, 0x01, 0xae, 0xb0, 0xef, 0x6b, 0x1a, 0xfb, 0xf9, 0x7d,
    0x36, 0x8c, 0x7c, 0xe6, 0x86, 0xd7, 0x01, 0xf2, 0xa9, 0x03, 0x09, 0x33, 0xf3, 0x19, 0xc4,
    0x77, 0x9c, 0xe5, 0x05, 0x6d, 0x78, 0x77, 0xe2, 0x40, 0x19, 0x7f, 0x09, 0x2f, 0x28, 0x12,
    0x05, 0x2f, 0x40, 0xb8, 0xbf, 0x32, 0x2f, 0x18, 0x2e, 0xe4, 0x05, 0x62, 0xee, 0xb5, 0xb5,
    0xaf, 0x4f, 0xad, 0x5c, 0x66, 0xdd, 0xdb, 0x7f, 0x78, 0xdd, 0x6b, 0xed, 0x6a, 0xeb, 0x5e,
    0x68, 0x32, 0xf7, 0xdb, 0x37, 0xe9, 0xb9, 0x4f, 0xd6, 0x5e, 0xf1, 0x5a, 0xe0, 0xf1, 0xe1,
    0xb6, 0x75, 0xa1, 0xd1, 0x57, 0xfd, 0xcd, 0x2a, 0x74, 0x7a, 0x83, 0x74, 0xda, 0xd5, 0xe9,
    0xbc, 0x5d, 0x5b, 0x61, 0x5c, 0xf9, 0xf8, 0x12, 0x63, 0x08, 0x2e, 0xef, 0xaa, 0xe5, 0x9b,
    0xda, 0xd6, 0xf9, 0x53, 0xb2, 0x9e, 0x63, 0x9a, 0x7c, 0x40, 0x9a, 0xc4, 0xf5, 0xd2, 0x2b,
    0xd2, 0x24, 0xd2, 0xfb, 0x18, 0x68, 0xe8, 0x0a, 0x7e, 0x5f, 0x21, 0xac, 0xe7, 0x95, 0xcb,
    0x4b, 0xa4, 0x91, 0x56, 0xb5, 0x02, 0xe3, 0xbc, 0x52, 0xbf, 0xb3, 0x6c, 0xa9, 0x1e, 0x5e,
    0x4d, 0x01, 0xd6, 0xce, 0x09, 0x3d, 0x17, 0x06, 0xc4, 0x53, 0xfb, 0x00, 0x8f, 0x4d, 0x63,
    0x66, 0x64, 0x2c, 0xae, 0xfb, 0x73, 0xec, 0xbb, 0x88, 0xe5, 0xdb, 0xbb, 0x17, 0xa5, 0x0e,
    0xd0, 0x45, 0x18, 0xc4, 0x78, 0x3a, 0x92, 0x57, 0x1c, 0x4f, 0x71, 0x9d, 0x4e, 0xe4, 0x3a,
    0xaf, 0x5b, 0xa6, 0xc9, 0x82, 0x1c, 0x3b, 0xd0, 0x7e, 0xa7, 0x80, 0x32, 0xff, 0xa6, 0x4d,
    0x16, 0x9e, 0xeb, 0xa7, 0x67, 0x27, 0x1d, 0xd9, 0x86, 0x89, 0xff, 0x88, 0x76, 0x78, 0x5e,
    0x86, 0xaa, 0x73, 0x77, 0x9e, 0x86, 0x69, 0x1b, 0x61, 0xea, 0xb5, 0x6b, 0x46, 0x7e, 0xa7,
    0x37, 0xd2, 0xcb, 0x79, 0xa5, 0xf6, 0xa8, 0x3e, 0xbb, 0x95, 0xd3, 0xf4, 0xfa, 0xb8, 0xc9,
    0x95, 0xd5, 0x0e, 0xe9, 0x17, 0xa6, 0xb5, 0x80, 0x74, 0x71, 0x96, 0xcc, 0x73, 0xe3, 0xb2,
    0x8d, 0x69, 0xa6, 0xcb, 0x34, 0x23, 0x68, 0x5c, 0xe3, 0xb9, 0x62, 0x2e, 0x89, 0xee, 0x77,
    0x0e, 0xb7, 0x87, 0x87, 0x52, 0x06, 0xf0, 0x1c, 0x4d, 0x25, 0x5d, 0x46, 0x7d, 0xe2, 0xa7,
    0xf8, 0x99, 0xe4, 0x63, 0x6b, 0x7a, 0x0f, 0xe3, 0x3f, 0xea, 0xdd, 0x99, 0x65, 0x50, 0x07,
    0x55, 0xd3, 0x28, 0x03, 0x18, 0x07, 0x25, 0x07, 0xf0, 0x5f, 0x7f, 0x88, 0xc7, 0xb3, 0x6c,
    0x89, 0x5e, 0xce, 0x77, 0x7b, 0x04, 0x6b, 0xa3, 0xa2, 0xac, 0xe3, 0xa3, 0xd6, 0xa1, 0xde,
    0x1a, 0x7e, 0x7d, 0x9d, 0x68, 0xfc, 0x11, 0xe7, 0xf0, 0xc8, 0xae, 0x9c, 0x2f, 0xc2, 0xb7,
    0x23, 0x76, 0x49, 0xb6, 0x00, 0x7d, 0xa7, 0xf0, 0x39, 0x95, 0xb4, 0x20, 0x9e, 0x75, 0x79,
    0x8c, 0x9b, 0xde, 0x95, 0x1e, 0x63, 0xda, 0x22, 0xdc, 0x17, 0x42, 0x1e, 0x57, 0x21, 0xad,
    0x28, 0x32, 0x79, 0xfe, 0xb8, 0x83, 0x7d, 0xb8, 0xd0, 0x87, 0x0e, 0xab, 0x23, 0xc6, 0xaa,
    0x4b, 0xd2, 0x59, 0xa9, 0x8a, 0x3c, 0xac, 0x4a, 0xfc, 0x0a, 0xd6, 0xa0, 0x18, 0xf3, 0x19,
    0x24, 0x3e, 0xd0, 0x60, 0xfd, 0xf1, 0xd2, 0x03, 0xfe, 0x75, 0xc7, 0x7a, 0x2b, 0xc8, 0xa5,
    0x53, 0xa8, 0x97, 0x44, 0xfd, 0x32, 0xf3, 0xae, 0xcb, 0xa8, 0x03, 0xf5, 0xec, 0x76, 0x2d,
    0x2b, 0xeb, 0x1e, 0xe3, 0x23, 0x58, 0xe3, 0x57, 0xb4, 0xc6, 0x45, 0xfb, 0x08, 0x57, 0xb7,
    0xf8, 0x04, 0xed, 0xd5, 0xbb, 0x47, 0xc8, 0xeb, 0x76, 0x2a, 0x04, 0x5f, 0xe7, 0x2e, 0xa6,
    0x5a, 0xdf, 0x28, 0x53, 0x0f, 0x71, 0xbe, 0x2b, 0x13, 0xe0, 0x23, 0x37, 0x24, 0xbf, 0xbc,
    0x62, 0x83, 0xc7, 0xce, 0x7d, 0x17, 0xb1, 0xef, 0x37, 0xd0, 0x67, 0x1d, 0xfb, 0x3c, 0xe2,
    0x80, 0xb7, 0xa3, 0x1b, 0x94, 0xb5, 0x2d, 0xc6, 0x1f, 0xf3, 0xc5, 0xee, 0x61, 0x32, 0xb7,
    0xbf, 0xaf, 0xd0, 0x2b, 0xf4, 0x7d, 0xd5, 0x38, 0x3c, 0x3b, 0xf1, 0x8f, 0x04, 0x2d, 0x21,
    0x15, 0xe0, 0xf7, 0x0e, 0xe2, 0x02, 0xf9, 0x11, 0xd4, 0xaf, 0x83, 0x2c, 0x21, 0xde, 0xdb,
    0xda, 0xe9, 0x1e, 0x03, 0x5f, 0x4e, 0x68, 0x12, 0x79, 0x44, 0xa4, 0xe2, 0x0a, 0xd7, 0x6c,
    0x52, 0x8b, 0x2e, 0x2a, 0xa7, 0xb1, 0x9e, 0xde, 0x01, 0xf8, 0xc8, 0xe6, 0x90, 0xb8, 0x46,
    0x00, 0x78, 0x24, 0xf2, 0x61, 0xc4, 0xa1, 0xe0, 0x5f, 0xd7, 0x67, 0xc7, 0xc5, 0x43, 0x5e,
    0x30, 0xbf, 0x9d, 0x41, 0xd4, 0x23, 0x1e, 0xd8, 0x07, 0x58, 0x2a, 0x0f, 0x8d, 0x23, 0xc0,
    0xea, 0xba, 0x77, 0xcc, 0x93, 0x55, 0xba, 0xc7, 0x79, 0x6b, 0x5d, 0x81, 0x2e, 0x7f, 0x3c,
    0x5c, 0x4d, 0x1a, 0x2d, 0x92, 0x49, 0x51, 0xa3, 0xf9, 0x30, 0x6f, 0x00, 0xfc, 0xe7, 0x77,
    0x2c, 0x6b, 0x40, 0x06, 0x20, 0xfe, 0x72, 0x6d, 0x94, 0xce, 0x69, 0x57, 0x9f, 0xe3, 0x3b,
    0xd7, 0x4d, 0x1e, 0xc7, 0x4d, 0xaa, 0x3c, 0xf4, 0x51, 0xd0, 0x74, 0x27, 0xa4, 0x1d, 0xa1,
    0x76, 0xe0, 0x5d, 0x87, 0xe9, 0x66, 0xe7, 0x30, 0x25, 0x97, 0xb1, 0xad, 0x8e, 0x7c, 0x47,
    0x27, 0x79, 0xf7, 0x5c, 0xe3, 0xc3, 0x8a, 0x4e, 0x53, 0x0f, 0x13, 0x3e, 0xc8, 0xbc, 0x5e,
    0x43, 0xb5, 0xb5, 0xa9, 0x8e, 0x8d, 0x78, 0x62, 0xbd, 0x50, 0x53, 0xfb, 0x3e, 0x91, 0xe5,
    0x7d, 0x58, 0xbc, 0xe3, 0xb5, 0xab, 0xad, 0x67, 0x01, 0x07, 0xe8, 0xe8, 0xe7, 0x45, 0xa0,
    0x84, 0xa7, 0x62, 0xe2, 0xdb, 0xac, 0x3f, 0x66, 0x6d, 0x81, 0xde, 0x1d, 0xcd, 0xcd, 0x21,
    0xc1, 0x4b, 0xd2, 0xff, 0x3b, 0x15, 0xc0, 0xf3, 0x09, 0xcb, 0xcb, 0x6a, 0x2c, 0x2f, 0xaf,
    0x5e, 0xea, 0x52, 0x56, 0x0a, 0x1a, 0x62, 0xf8, 0x24, 0x6d, 0x7e, 0xa5, 0xb9, 0x2d, 0xa1,
    0xc1, 0x32, 0xd7, 0x8f, 0x65, 0xae, 0xd4, 0x13, 0xc5, 0x1c, 0x54, 0x15, 0x5a, 0xe6, 0xb9,
    0x1e, 0x56, 0x63, 0xfb, 0x40, 0xe5, 0xcd, 0xf0, 0xad, 0x71, 0xe2, 0xb3, 0x8c, 0x16, 0x78,
    0x7a, 0x2a, 0x0e, 0xde, 0x91, 0xbc, 0xb6, 0x79, 0xfd, 0x20, 0xce, 0xb0, 0xcd, 0x9a, 0xaa,
    0xb7, 0x88, 0x1e, 0xda, 0x8f, 0xaa, 0x3e, 0xf5, 0x1d, 0xf4, 0xf0, 0xf5, 0x3b, 0xe9, 0x21,
    0x23, 0x0b, 0x6c, 0x0b, 0x9d, 0x0f, 0xaf, 0x6a, 0x6b, 0x66, 0x75, 0x43, 0x95, 0x96, 0x40,
    0x30, 0xd2, 0x92, 0xae, 0x47, 0xe4, 0xd3, 0x92, 0xde, 0xbf, 0x90, 0xe9, 0x20, 0xd3, 0x9c,
    0xcb, 0x76, 0xd0, 0xaf, 0x34, 0x5d, 0x56, 0xd1, 0x31, 0xef, 0xb2, 0xf6, 0xfb, 0xf8, 0x10,
    0x23, 0xff, 0x1d, 0x5f, 0xde, 0x91, 0x9d, 0x59, 0xbc, 0x14, 0x7e, 0x0b, 0xe3, 0x3f, 0xe0,
    0x20, 0x77, 0xd2, 0x34, 0xd7, 0x21, 0x9e, 0xb2, 0x94, 0xe6, 0xce, 0x8b, 0x44, 0x73, 0x85,
    0x72, 0xa3, 0xd0, 0x97, 0xfc, 0x13, 0xed, 0x8c, 0xa9, 0xe0, 0xb3, 0x72, 0x6d, 0xbc, 0xc9,
    0x4d, 0xba, 0x75, 0x9d, 0xbf, 0x94, 0x2a, 0x82, 0x87, 0x55, 0x88, 0xe6, 0x2e, 0x80, 0xbf,
    0xe8, 0xb2, 0xe5, 0x57, 0x16, 0xd5, 0x49, 0x6c, 0xdc, 0x84, 0xae, 0xdb, 0x8a, 0xde, 0xd5,
    0x9c, 0xfe, 0x06, 0x38, 0xd2, 0xfd, 0x0d, 0x05, 0xe2, 0x69, 0x43, 0x78, 0x77, 0x2e, 0xeb,
    0x23, 0x0d, 0x6b, 0xe5, 0xee, 0xb2, 0xb0, 0x5c, 0x95, 0x0f, 0x25, 0xff, 0xe9, 0xb2, 0xec,
    0x34, 0xa0, 0xc9, 0xed, 0x1b, 0xe6, 0x95, 0x0a, 0xcd, 0x9a, 0x6c, 0xee, 0x85, 0xe5, 0x32,
    0xfe, 0x5b, 0x0e, 0x1d, 0x69, 0x34, 0x98, 0x5a, 0x3b, 0xd9, 0xf6, 0xb9, 0xad, 0x79, 0x5a,
    0x11, 0xb4, 0xbb, 0x6c, 0x2c, 0xc2, 0x2f, 0xa6, 0xd8, 0x3d, 0x20, 0x73, 0x91, 0x26, 0x5a,
    0xd7, 0x38, 0x25, 0x3d, 0x3b, 0xbb, 0xa6, 0x86, 0xcc, 0x7b, 0x1a, 0x69, 0x1d, 0x4a, 0x83,
    0xcc, 0x89, 0xb0, 0xab, 0xf3, 0xf9, 0xb3, 0xae, 0x6f, 0x31, 0x7d, 0x09, 0x5c, 0xe0, 0x3a,
    0xfa, 0x44, 0x1a, 0xd7, 0x26, 0xbc, 0x0a, 0x19, 0xa9, 0xf1, 0x2b, 0xa6, 0xef, 0xb6, 0xa0,
    0xdd, 0xd7, 0x43, 0x30, 0x5e, 0xb3, 0x3f, 0x04, 0x75, 0x0a, 0x0d, 0x87, 0x82, 0x1e, 0x74,
    0x8c, 0xba, 0xfe, 0x75, 0x3b, 0xc1, 0x34, 0x97, 0xda, 0xd8, 0x53, 0x73, 0xa9, 0xda, 0x00,
    0x31, 0x11, 0xbc, 0x8e, 0xee, 0x1b, 0xac, 0xe8, 0x36, 0x59, 0x1a, 0x9f, 0xc8, 0x3f, 0x58,
    0x72, 0x2a, 0x69, 0x1d, 0xd3, 0x27, 0x1d, 0xce, 0xc4, 0x17, 0x45, 0x39, 0x0d, 0x1e, 0x9d,
    0x19, 0x78, 0x1f, 0xeb, 0xf6, 0xf5, 0xd4, 0x5c, 0x67, 0xe7, 0x44, 0xf1, 0x3f, 0x5d, 0x6e,
    0x55, 0xff, 0x4a, 0x35, 0x87, 0xce, 0x08, 0xfe, 0xf6, 0xf7, 0xce, 0x85, 0x6a, 0x2f, 0x9a,
    0x22, 0x9f, 0x5e, 0x0e, 0x17, 0xd0, 0x0b, 0xdb, 0x25, 0x57, 0xc2, 0x9e, 0x20, 0xd8, 0x7a,
    0x35, 0xa3, 0xbd, 0x94, 0xd5, 0x1b, 0x76, 0x54, 0xbf, 0xc0, 0xa7, 0xcc, 0x78, 0x8f, 0x51,
    0x3e, 0x8f, 0xdb, 0x34, 0xe1, 0x5c, 0x8c, 0x67, 0xc8, 0x7a, 0xa3, 0x2a, 0xb3, 0x6a, 0xaa,
    0x48, 0x93, 0x3b, 0x1d, 0xe2, 0xd9, 0x1d, 0xa3, 0x3e, 0x73, 0x76, 0x5c, 0x25, 0x3e, 0x9b,
    0x93, 0x49, 0xf9, 0xd8, 0x3e, 0xa5, 0xe8, 0xa6, 0xca, 0x7a, 0x9e, 0xa0, 0x1b, 0x78, 0xd7,
    0xb5, 0x43, 0x7e, 0x09, 0x93, 0xde, 0xa6, 0xd9, 0xad, 0x3a, 0x8d, 0xe4, 0xfb, 0x34, 0x55,
    0xa1, 0xb0, 0x35, 0x2a, 0x29, 0x1d, 0x31, 0x81, 0xbb, 0x54, 0x8b, 0xae, 0x13, 0x3d, 0xeb,
    0xa7, 0xc7, 0x87, 0xf9, 0x25, 0xe9, 0xca, 0xe9, 0xb5, 0x90, 0xb6, 0x65, 0xeb, 0xb3, 0x44,
    0xa0, 0x5f, 0x65, 0x80, 0x73, 0x52, 0x6d, 0x1c, 0xea, 0x63, 0x32, 0xc1, 0x2a, 0xfa, 0xce,
    0xa5, 0x8a, 0xbc, 0x62, 0x5b, 0x31, 0x97, 0xd7, 0xd1, 0x7c, 0x76, 0xe2, 0xbe, 0x34, 0x9d,
    0x59, 0xa7, 0x9d, 0x78, 0x5e, 0xd0, 0xd6, 0x7a, 0x4c, 0xf3, 0xaa, 0x05, 0x70, 0x68, 0xf2,
    0xd1, 0x7b, 0xef, 0x13, 0xbd, 0xd7, 0x04, 0x5b, 0xee, 0xba, 0x26, 0xdc, 0xd8, 0x69, 0x9c,
    0x74, 0xb5, 0x4a, 0x1b, 0xe4, 0xf3, 0x30, 0xf2, 0x19, 0xc6, 0x73, 0x86, 0x36, 0xfb, 0x95,
    0x47, 0x12, 0xeb, 0xe1, 0xce, 0x9d, 0x03, 0x7a, 0xb8, 0x73, 0x74, 0x79, 0xd5, 0x39, 0x49,
    0x70, 0xd6, 0x8b, 0x9a, 0x69, 0xbb, 0xeb, 0xa4, 0x8a, 0x3c, 0xeb, 0x91, 0x75, 0x1f, 0xb0,
    0x59, 0x76, 0xa2, 0x3e, 0x3d, 0x64, 0x3a, 0x75, 0xc8, 0x86, 0x4b, 0xf9, 0x4a, 0x08, 0xd6,
    0xb4, 0xcd, 0xc8, 0xc6, 0x63, 0xf8, 0xba, 0xba, 0xec, 0x26, 0xf8, 0xce, 0x0a, 0xe7, 0x0a,
    0x68, 0x7b, 0xc3, 0xd8, 0x2a, 0x97, 0xd0, 0x5e, 0x03, 0xf4, 0x2b, 0xd2, 0xe5, 0x50, 0x17,
    0x58, 0xd8, 0x7e, 0x9c, 0x0a, 0x58, 0x42, 0x86, 0x65, 0x8a, 0xb0, 0x74, 0x2e, 0x73, 0xf6,
    0x88, 0xa7, 0xcc, 0xf7, 0x54, 0x9e, 0x72, 0x0e, 0xeb, 0x84, 0xd6, 0x18, 0xd3, 0x59, 0xcc,
    0x62, 0x3f, 0x83, 0xc2, 0xe7, 0x66, 0xaa, 0xef, 0xb0, 0xc1, 0xbe, 0xc3, 0x0b, 0x80, 0x67,
    0xa8, 0x54, 0xeb, 0x8c, 0xbb, 0xa2, 0xd1, 0x86, 0x41, 0x1b, 0x9b, 0xe8, 0x8b, 0x6c, 0x50,
    0xb7, 0xcb, 0xa7, 0x94, 0xce, 0xd8, 0xa4, 0xbd, 0x8e, 0x96, 0xca, 0x07, 0x63, 0xbe, 0xe0,
    0xd2, 0x4b, 0x34, 0x9a, 0x64, 0x3d, 0xc6, 0x33, 0xe8, 0xca, 0xc2, 0xd6, 0x30, 0xf2, 0x73,
    0xaf, 0x2e, 0xf6, 0x5d, 0xa7, 0x74, 0xeb, 0x0e, 0xfa, 0xc3, 0xeb, 0x47, 0x97, 0x1d, 0xff,
    0xe6, 0x3d, 0x78, 0xfd, 0xd2, 0x5e, 0xb1, 0x3f, 0xaa, 0xfb, 0xfd, 0x42, 0xfd, 0xbe, 0x17,
    0xfc, 0x5e, 0x70, 0xe9, 0x5d, 0xf8, 0x91, 0x67, 0x77, 0x8b, 0x0f, 0xbd, 0xed, 0xd3, 0x42,
    0x24, 0x1a, 0xb4, 0xb6, 0xcb, 0x7e, 0x7f, 0x54, 0x2d, 0xe0, 0x5e, 0xe8, 0xd9, 0x61, 0xb9,
    0xdd, 0x7d, 0x2c, 0xde, 0x34, 0x1f, 0x06, 0xad, 0xa0, 0x33, 0xbd, 0x1e, 0x75, 0xe6, 0xf0,
    0xb4, 0x11, 0x9c, 0x8e, 0x6f, 0xba, 0x3b, 0x77, 0xbd, 0x93, 0xbb, 0xc1, 0x6d, 0xb3, 0x3c,
    0x8f, 0xf6, 0xa6, 0xb5, 0x43, 0xe7, 0xa0, 0x5f, 0xaa, 0xdf, 0xf7, 0x8f, 0xdb, 0xf7, 0x76,
    0x1f, 0xdb, 0xcd, 0xe2, 0x57, 0xa8, 0xfb, 0xf5, 0xac, 0xfb, 0x38, 0xbe, 0xf6, 0xfa, 0xbb,
    0xc7, 0x3b, 0xfd, 0x9e, 0xf7, 0xee, 0xb7, 0xda, 0x71, 0xe7, 0xa9, 0x77, 0xec, 0xcf, 0x9c,
    0xe2, 0x9d, 0x7d, 0x55, 0x1f, 0x5e, 0x8f, 0x1e, 0xfd, 0xab, 0xe3, 0x37, 0x83, 0x5a, 0xa5,
    0x70, 0xaf, 0xa0, 0xef, 0x52, 0x7d, 0x6e, 0x5f, 0x95, 0x0b, 0x67, 0x5d, 0x59, 0x6e, 0xcf,
    0x4f, 0xca, 0x91, 0xdd, 0xad, 0x8f, 0xa1, 0xce, 0xb4, 0x57, 0x6a, 0x14, 0x7b, 0xc7, 0x6d,
    0x65, 0xaf, 0xd8, 0x1b, 0x35, 0x86, 0xfd, 0xe0, 0x6e, 0xea, 0x9c, 0xf8, 0x0f, 0x37, 0x57,
    0xd1, 0x92, 0x76, 0x66, 0xbd, 0x79, 0x71, 0x76, 0xdd, 0x2d, 0xfa, 0xfd, 0xed, 0xf2, 0xf0,
    0xd4, 0x5e, 0x56, 0x7e, 0x7a, 0xd3, 0x2d, 0x7a, 0x37, 0x57, 0xb5, 0x29, 0xe0, 0xe6, 0xee,
    0xea, 0x74, 0xdc, 0x1b, 0xf5, 0xb1, 0xce, 0x6f, 0x67, 0xc5, 0xc7, 0x19, 0xfc, 0xbe, 0xff,
    0x8d, 0x61, 0x4c, 0x07, 0xbf, 0xd5, 0x2a, 0x9d, 0xd2, 0x4d, 0xf7, 0xcd, 0xe0, 0x46, 0xe2,
    0xd8, 0xf7, 0xfb, 0x5e, 0xf9, 0x6b, 0xef, 0xb8, 0xfa, 0xd4, 0xc7, 0xfd, 0xe0, 0xe3, 0xfa,
    0xe7, 0x95, 0xc7, 0xbd, 0xab, 0x72, 0x04, 0x6d, 0x22, 0xde, 0x07, 0xce, 0xf1, 0x70, 0xdc,
    0xc3, 0x3b, 0x98, 0x87, 0xfe, 0xe8, 0x06, 0xe1, 0xc1, 0x36, 0x07, 0x1f, 0xbd, 0xbd, 0x7e,
    0xd4, 0x79, 0xd3, 0x3f, 0xde, 0x9b, 0x3b, 0x87, 0xda, 0xf7, 0x41, 0xb3, 0x7d, 0x33, 0xb7,
    0x9d, 0xd9, 0xcd, 0xf1, 0xe3, 0x18, 0xe0, 0x1a, 0xdc, 0x5c, 0x0d, 0x0b, 0xd8, 0x1f, 0xb4,
    0xcd, 0x89, 0x0b, 0xf0, 0xd5, 0x0e, 0x0f, 0x24, 0x7c, 0x83, 0xda, 0x61, 0x38, 0x68, 0x97,
    0x3b, 0xb5, 0x63, 0xe7, 0x1e, 0xf0, 0xe7, 0xb9, 0x5d, 0xee, 0x0b, 0xca, 0x00, 0xec, 0xe5,
    0xcd, 0x55, 0x03, 0xe8, 0x62, 0xe7, 0xa9, 0x56, 0xa9, 0x0c, 0x6e, 0x4a, 0x7b, 0xf7, 0x37,
    0xa7, 0x3b, 0x37, 0xcd, 0xb2, 0xd7, 0x83, 0xb9, 0xea, 0x97, 0xfc, 0xd9, 0xcd, 0x7c, 0x47,
    0x73, 0x4f, 0xf5, 0x92, 0x76, 0xc2, 0x8f, 0xad, 0x70, 0xd0, 0xdf, 0x6e, 0xcc, 0x71, 0x0f,
    0x82, 0xf1, 0x02, 0xe5, 0xde, 0xfd, 0xf6, 0xd1, 0x27, 0x18, 0x60, 0x3c, 0xe5, 0xd6, 0xf5,
    0xdd, 0xe0, 0x66, 0x54, 0x85, 0x7e, 0x1c, 0xbf, 0x77, 0xfc, 0x10, 0xf7, 0x7d, 0x46, 0x70,
    0x47, 0xd7, 0x57, 0xa7, 0xbe, 0x53, 0xea, 0x44, 0xbd, 0xc3, 0xc1, 0xf8, 0xc2, 0x2b, 0x3f,
    0x27, 0x84, 0x6b, 0xa4, 0x99, 0x3d, 0x49, 0x37, 0xdc, 0x5e, 0x38, 0x68, 0x94, 0x60, 0xfc,
    0xa7, 0x43, 0x07, 0x60, 0xab, 0x9d, 0x9c, 0x0e, 0x81, 0x06, 0xee, 0x7b, 0xcd, 0xf2, 0xcc,
    0xb9, 0x3a, 0x7d, 0x3a, 0xe3, 0x72, 0x00, 0xe7, 0x0e, 0xd2, 0xcd, 0x7d, 0x1f, 0x70, 0x0d,
    0x15, 0xe0, 0xdb, 0xe8, 0xba, 0x5b, 0xf7, 0x6b, 0x15, 0xbf, 0x79, 0x8d, 0x78, 0x2a, 0x15,
    0x44, 0x9d, 0x13, 0xc0, 0x1b, 0xd1, 0x7c, 0x6f, 0xbb, 0x66, 0xc6, 0xdd, 0xa8, 0x53, 0x70,
    0x4e, 0x67, 0x80, 0x67, 0xe8, 0x6f, 0xaf, 0x60, 0x1f, 0x77, 0xe6, 0xd9, 0xbe, 0x6b, 0xb9,
    0x85, 0xb6, 0x61, 0xce, 0x60, 0x8d, 0x1c, 0xef, 0x14, 0x7b, 0xdd, 0x53, 0xa0, 0x8d, 0x34,
    0x11, 0xd6, 0x4b, 0xc2, 0x65, 0x4f, 0xac, 0x33, 0xc4, 0xe5, 0x6d, 0x07, 0xf1, 0x99, 0x3b,
    0xe3, 0xfe, 0xc8, 0xf7, 0x01, 0x86, 0xc8, 0xed, 0x08, 0x58, 0xda, 0x80, 0x5f, 0xa8, 0x4b,
    0x0a, 0x84, 0x87, 0x32, 0xd4, 0x6d, 0x60, 0x99, 0xa7, 0x25, 0xe3, 0x8e, 0x04, 0xec, 0x2a,
    0xed, 0xd4, 0x4e, 0xa6, 0x19, 0xfc, 0x03, 0x2e, 0x1e, 0xfa, 0xa3, 0xce, 0x13, 0xd4, 0x2d,
    0x3e, 0x3c, 0x80, 0xed, 0x98, 0xfa, 0x1c, 0xf7, 0x4a, 0x6f, 0x06, 0x4e, 0xc9, 0x2f, 0xd8,
    0xe5, 0x82, 0x53, 0x7a, 0x37, 0xe8, 0x31, 0x2f, 0x99, 0xdd, 0x9c, 0x9c, 0x9b, 0x68, 0x7b,
    0x1d, 0xd4, 0x0b, 0xf0, 0xfd, 0x2b, 0xfc, 0xcd, 0x6b, 0x65, 0x5e, 0x3e, 0x84, 0x31, 0xc2,
    0xf6, 0x3f, 0xa9, 0x6d, 0x2a, 0x74, 0xae, 0xbd, 0x27, 0xbe, 0x75, 0xdc, 0x99, 0x0a, 0x58,
    0xae, 0x81, 0xcb, 0xed, 0x53, 0x1f, 0xea, 0xfa, 0x08, 0x77, 0xad, 0x82, 0x34, 0x56, 0x9d,
    0xed, 0xbd, 0x07, 0xa6, 0x27, 0xff, 0xbe, 0x97, 0xd0, 0xec, 0x41, 0xff, 0xb8, 0x3a, 0xbf,
    0x16, 0x06, 0xbd, 0xe3, 0x21, 0xe0, 0xee, 0xd1, 0xbf, 0x09, 0x2e, 0xa7, 0xf6, 0x31, 0x8c,
    0xb0, 0xfc, 0x64, 0x77, 0x1b, 0x7e, 0xed, 0x98, 0xeb, 0x01, 0x6e, 0x93, 0xf6, 0x4f, 0xca,
    0x18, 0xcf, 0x14, 0x68, 0x23, 0x84, 0x3e, 0x9a, 0x76, 0xd7, 0x09, 0x81, 0x67, 0x85, 0x88,
    0xda, 0x49, 0x7d, 0x7c, 0x73, 0xdc, 0x4e, 0x70, 0x52, 0x95, 0x7d, 0xed, 0x51, 0xfd, 0xfe,
    0x07, 0xd6, 0x9b, 0xff, 0x15, 0x78, 0x05, 0xf0, 0x66, 0xc0, 0x4b, 0xd0, 0xf9, 0xea, 0x00,
    0x3e, 0x9e, 0x94, 0x8b, 0xc0, 0x23, 0xc7, 0xd7, 0x73, 0xa0, 0xa9, 0x6e, 0x15, 0xe6, 0x6f,
    0x72, 0x9b, 0xc0, 0x0f, 0x4f, 0xce, 0xdf, 0xd6, 0xaa, 0x37, 0xc3, 0xde, 0x49, 0xc7, 0x07,
    0xfc, 0xe0, 0x74, 0x4f, 0x81, 0x47, 0x9e, 0x03, 0xad, 0x75, 0x86, 0x40, 0x6b, 0x33, 0xc4,
    0x7f, 0x34, 0x7c, 0x82, 0xf5, 0x24, 0x78, 0x78, 0x8c, 0x93, 0x01, 0xc0, 0x52, 0x44, 0x3c,
    0x3c, 0xbc, 0xdb, 0xa5, 0x79, 0x3f, 0x29, 0xf6, 0x79, 0xec, 0x49, 0x3b, 0x40, 0xe3, 0x51,
    0xf8, 0x5d, 0xf8, 0xb1, 0x59, 0xde, 0x95, 0xb4, 0xd1, 0x17, 0xeb, 0x00, 0x78, 0x7d, 0xed,
    0xfb, 0x18, 0xf5, 0xe6, 0x0f, 0x83, 0x66, 0x13, 0x68, 0x00, 0xfe, 0xd5, 0x8e, 0x05, 0x3e,
    0x1a, 0x3d, 0xcc, 0x6a, 0x55, 0x27, 0x84, 0xbf, 0xfb, 0x57, 0x87, 0x0e, 0xac, 0x57, 0xff,
    0x01, 0xbe, 0x45, 0x31, 0x30, 0xad, 0x77, 0xc4, 0x2f, 0xa0, 0xcf, 0x3d, 0xd3, 0x3a, 0xef,
    0x0f, 0xfd, 0x5a, 0xf5, 0xc1, 0xfb, 0x58, 0x7c, 0xf0, 0xf2, 0xda, 0x36, 0xd0, 0x94, 0xa4,
    0xf2, 0xcd, 0xf1, 0xa5, 0x4a, 0x37, 0x46, 0xba, 0x62, 0x7c, 0x24, 0x63, 0xbe, 0x29, 0x75,
    0x06, 0x32, 0x4e, 0x01, 0x37, 0x0a, 0xbe, 0x80, 0x3f, 0x9d, 0x74, 0xe6, 0x40, 0xeb, 0xb0,
    0xfd, 0xa7, 0xb3, 0xd1, 0x23, 0xcc, 0xef, 0x4e, 0x89, 0xf1, 0x7a, 0x30, 0xa9, 0x9d, 0x34,
    0xfb, 0xea, 0x7c, 0x86, 0xf8, 0x3e, 0x0b, 0xb8, 0xbe, 0x32, 0x36, 0x7d, 0x7e, 0x4f, 0x1a,
    0x6d, 0xc1, 0x2f, 0x73, 0xfa, 0x18, 0x7c, 0x3c, 0x6c, 0xec, 0xb2, 0x7c, 0xd8, 0xc1, 0x79,
    0x01, 0x1d, 0xb4, 0x04, 0x4f, 0x0c, 0x3f, 0x5e, 0x15, 0x06, 0x1f, 0xe7, 0x07, 0x77, 0xee,
    0xda, 0xa7, 0xda, 0xa6, 0xbf, 0xf7, 0xb1, 0x7b, 0x90, 0xcc, 0x6b, 0xc0, 0x73, 0x7b, 0x36,
    0x7f, 0x63, 0x7c, 0x95, 0xdb, 0x36, 0xd0, 0xe1, 0xd5, 0x61, 0xed, 0x37, 0xf8, 0x37, 0xb8,
    0xf9, 0x33, 0xe0, 0xbf, 0x3b, 0x92, 0x9e, 0x69, 0x1d, 0x30, 0x7f, 0x22, 0xfe, 0x0c, 0x38,
    0xdd, 0xe0, 0xb8, 0x1e, 0x5d, 0x5f, 0xd5, 0x61, 0x2d, 0x14, 0x8b, 0xbd, 0x93, 0xc6, 0xb8,
    0xfc, 0xe1, 0xb8, 0xf3, 0x06, 0xf8, 0x30, 0xae, 0xef, 0xc1, 0xa5, 0x68, 0x47, 0xd5, 0x1f,
    0xb7, 0xf9, 0x53, 0x28, 0xeb, 0xf7, 0x80, 0xa7, 0x38, 0x50, 0x2e, 0x25, 0xc3, 0xa2, 0xd5,
    0xf1, 0xbf, 0x3d, 0x47, 0xbf, 0xfd, 0xc7, 0xe7, 0xc8, 0xfb, 0x8e, 0x39, 0xf2, 0xd3, 0x63,
    0x32, 0x78, 0x30, 0x06, 0x1e, 0x2c, 0xf8, 0x8b, 0x94, 0x29, 0x6f, 0x06, 0xa7, 0x85, 0x58,
    0xa2, 0xce, 0x81, 0x32, 0xa8, 0xee, 0x74, 0x1f, 0x0b, 0xa0, 0xbf, 0x00, 0x6f, 0xa8, 0x04,
    0xe3, 0x3a, 0xbe, 0x01, 0xfe, 0xd4, 0xd9, 0xc6, 0xb5, 0x6b, 0x1e, 0xd7, 0x41, 0xd0, 0x48,
    0x34, 0xe8, 0x28, 0xef, 0x06, 0x6e, 0x77, 0xaf, 0x88, 0xf8, 0xe8, 0xcd, 0x17, 0xb5, 0x2b,
    0x97, 0x89, 0x57, 0x1c, 0x0d, 0x76, 0x16, 0xad, 0xf3, 0x4b, 0xd0, 0x9b, 0x7a, 0x0a, 0xcd,
    0x1d, 0xc2, 0x3f, 0x90, 0x99, 0xa8, 0x77, 0x94, 0x1e, 0x15, 0x3e, 0x7b, 0xb9, 0xaa, 0x0c,
    0x64, 0xf8, 0xba, 0xa7, 0xca, 0x41, 0xed, 0xbd, 0x98, 0x83, 0x98, 0xc7, 0x7e, 0x05, 0xfe,
    0xfa, 0x47, 0xf1, 0x7a, 0x1b, 0xe3, 0xfd, 0x86, 0x46, 0xbe, 0x1a, 0xf3, 0xf0, 0x23, 0xe0,
    0xa3, 0x6a, 0xe4, 0x74, 0xdb, 0xea, 0x3c, 0x3d, 0x39, 0xa8, 0x4f, 0x7a, 0xa0, 0xcb, 0x2c,
    0x6f, 0x80, 0xb7, 0x9b, 0x52, 0x3c, 0x6e, 0x05, 0xae, 0x83, 0x10, 0xd6, 0xe6, 0xd4, 0xa1,
    0x3b, 0xfd, 0x9a, 0xe7, 0x2f, 0x58, 0x8f, 0xdc, 0x06, 0xe8, 0x6b, 0xc9, 0x18, 0xab, 0x9d,
    0x5a, 0x5c, 0xb2, 0x0e, 0xff, 0xc0, 0x3a, 0x3b, 0x98, 0x9e, 0x2b, 0xeb, 0x2a, 0xc6, 0xc9,
    0x58, 0x73, 0x2d, 0xc6, 0x07, 0xeb, 0x30, 0x1a, 0x8e, 0x0b, 0xbd, 0x22, 0xce, 0x19, 0xea,
    0x66, 0xfa, 0xbe, 0x3e, 0x2c, 0xc4, 0x6b, 0x47, 0x69, 0x57, 0xab, 0x77, 0xbb, 0x60, 0xfd,
    0x91, 0x5d, 0xa7, 0xb5, 0xe3, 0x29, 0xb4, 0xdb, 0x97, 0xb2, 0x0b, 0xed, 0x14, 0xd0, 0xcb,
    0x07, 0xad, 0x51, 0x27, 0x40, 0xfd, 0x00, 0xe4, 0xa9, 0xe7, 0x5c, 0x5d, 0xca, 0xef, 0xa3,
    0xcf, 0x6a, 0xf6, 0xff, 0xf8, 0x9a, 0x2d, 0xd6, 0x7d, 0x98, 0xa3, 0x9d, 0xde, 0x76, 0x3b,
    0x13, 0x4e, 0x9f, 0x72, 0x71, 0xa4, 0xe9, 0xc4, 0x66, 0x1c, 0xc5, 0xfc, 0x27, 0xe8, 0x95,
    0xee, 0xae, 0x03, 0xdf, 0x47, 0xbe, 0x02, 0xb0, 0xdf, 0xdb, 0x9a, 0x4e, 0x5d, 0x1d, 0x2c,
    0x43, 0x94, 0x85, 0xc7, 0xa0, 0xb3, 0x75, 0xd1, 0x4e, 0xb9, 0xb9, 0x27, 0xbb, 0xa5, 0x84,
    0x60, 0x1d, 0x79, 0xd9, 0xa0, 0x77, 0xd5, 0x89, 0x80, 0x26, 0x41, 0xcf, 0x6a, 0x6b, 0xeb,
    0x3f, 0x37, 0xc9, 0x88, 0x9d, 0x21, 0xd0, 0xd7, 0x13, 0xe8, 0x4e, 0x5f, 0x61, 0xac, 0x71,
    0xda, 0x5a, 0xd3, 0x6d, 0x83, 0xb2, 0xb2, 0x7e, 0x35, 0x3d, 0xf2, 0xba, 0xb4, 0x07, 0xf4,
    0xf7, 0x84, 0xf3, 0x22, 0x78, 0xdc, 0x90, 0xd7, 0x31, 0xe2, 0xa0, 0xfe, 0x24, 0xd6, 0xcc,
    0xfe, 0xb1, 0x3e, 0xae, 0xae, 0x9f, 0xe0, 0x3c, 0x6d, 0x63, 0xc4, 0x3a, 0xf4, 0x75, 0xf7,
    0xd7, 0xf7, 0xf0, 0x7a, 0x1b, 0xfe, 0x2e, 0x3d, 0x0e, 0xfb, 0xdb, 0x20, 0xbb, 0x44, 0x5f,
    0xcc, 0xbd, 0xbe, 0x66, 0x12, 0xf9, 0xa6, 0xbd, 0x8f, 0xe7, 0x43, 0xd5, 0x2f, 0x0f, 0x62,
    0xaa, 0xf3, 0xfa, 0x3b, 0xb4, 0x8f, 0x76, 0x00, 0x7f, 0x12, 0xa6, 0x44, 0xef, 0x3f, 0x54,
    0x8e, 0xa0, 0x6d, 0xa0, 0x71, 0x17, 0x63, 0x8f, 0x8f, 0x0a, 0xb9, 0x70, 0x9d, 0xdd, 0x81,
    0x78, 0x05, 0xe3, 0x41, 0x5d, 0x1b, 0x9e, 0x65, 0x5f, 0x6d, 0xd1, 0x4f, 0xeb, 0x6e, 0xaf,
    0x6a, 0x57, 0xcf, 0x13, 0x7b, 0xec, 0x60, 0x20, 0xe5, 0xbf, 0xe8, 0x7f, 0x70, 0xd9, 0x2c,
    0xdd, 0x00, 0x8d, 0xf7, 0x4a, 0xd7, 0x00, 0xc3, 0xa9, 0x7f, 0x33, 0xf2, 0xdf, 0x80, 0x0d,
    0x3c, 0x1f, 0xda, 0xfa, 0x0a, 0xeb, 0xfe, 0x0e, 0xe6, 0x70, 0x0c, 0x38, 0x07, 0xdd, 0xae,
    0xc3, 0x7c, 0xe0, 0xdc, 0xf8, 0x37, 0x87, 0x07, 0xba, 0xac, 0x6b, 0xee, 0x28, 0xe3, 0xdf,
    0x74, 0x9a, 0xac, 0x8b, 0xe3, 0xce, 0x57, 0xa0, 0x0d, 0xa1, 0x5f, 0xa3, 0x0e, 0x7b, 0x33,
    0xd1, 0x76, 0x83, 0xf1, 0x75, 0xe7, 0xfd, 0x77, 0x9f, 0xaa, 0xd3, 0x9e, 0xbb, 0x1d, 0x05,
    0xc8, 0x2f, 0x04, 0x5d, 0xa8, 0x34, 0xc2, 0xf6, 0x14, 0xca, 0x03, 0xe0, 0x47, 0x38, 0xdf,
    0x8f, 0xdb, 0x8d, 0x91, 0x7d, 0x35, 0x44, 0x3d, 0xbe, 0xd0, 0x43, 0x1b, 0x7a, 0x54, 0x07,
    0x89, 0x3a, 0xb9, 0x4f, 0xb2, 0x23, 0xe9, 0xb3, 0x73, 0x57, 0x4b, 0xf1, 0x8d, 0x33, 0xa5,
    0xb3, 0x98, 0xa7, 0xc5, 0xeb, 0xee, 0xee, 0xa6, 0x5b, 0xbf, 0x97, 0x78, 0x6e, 0x03, 0xee,
    0x63, 0x15, 0x5e, 0x67, 0xef, 0xb6, 0x53, 0x74, 0x3e, 0x7d, 0x7d, 0xa3, 0xc3, 0x9b, 0xd4,
    0x10, 0xa7, 0xcc, 0xb7, 0xdb, 0x1a, 0xff, 0x51, 0xd7, 0xae, 0x58, 0xb7, 0x1a, 0x2d, 0xeb,
    0xc9, 0x81, 0xc2, 0x63, 0x0c, 0xf8, 0xa8, 0x36, 0x42, 0xe6, 0xf7, 0xca, 0x5a, 0x00, 0x3e,
    0x7d, 0x15, 0xfb, 0x15, 0xd2, 0x6b, 0x69, 0x06, 0xb4, 0xf2, 0x84, 0x7c, 0x1f, 0xe6, 0x5b,
    0xc3, 0x41, 0xeb, 0xaa, 0xf3, 0x04, 0x6b, 0xcf, 0xa3, 0xb9, 0x8e, 0xfd, 0x13, 0x38, 0xcf,
    0x0f, 0xf4, 0x6d, 0xf2, 0x7b, 0x38, 0x23, 0xc0, 0xa3, 0x90, 0x37, 0x40, 0x23, 0x46, 0x3a,
    0xd7, 0x95, 0x2a, 0x2b, 0x91, 0x37, 0xa0, 0xbd, 0x08, 0xfd, 0xdf, 0xf7, 0xbe, 0xc6, 0xf2,
    0x57, 0xea, 0x10, 0x2a, 0xad, 0xe8, 0x74, 0xa5, 0xe1, 0xee, 0x09, 0xed, 0xca, 0xeb, 0xd2,
    0xf0, 0x51, 0xea, 0x71, 0x3a, 0xcd, 0x2b, 0x3c, 0x92, 0xff, 0x5d, 0x97, 0xaa, 0x4f, 0x30,
    0xa3, 0x84, 0x07, 0x75, 0x54, 0xdd, 0x7f, 0xa6, 0xac, 0x2d, 0x78, 0xde, 0x11, 0xfd, 0x3a,
    0xdb, 0x8f, 0x6e, 0x9a, 0x3b, 0x17, 0xad, 0xe2, 0x69, 0xfd, 0xb2, 0xfd, 0xf0, 0x36, 0x81,
    0x40, 0x97, 0x23, 0x02, 0x0e, 0x6d, 0x7c, 0x9e, 0x4e, 0x6b, 0xf1, 0x5c, 0xf2, 0x18, 0xbe,
    0xfe, 0xc0, 0x6e, 0x4f, 0xd6, 0xee, 0x8d, 0xa6, 0xa3, 0xec, 0x1c, 0x69, 0xfc, 0xd2, 0xd7,
    0xc1, 0xd9, 0x5d, 0xa3, 0x7a, 0x59, 0xd8, 0x6b, 0x5e, 0x76, 0x1a, 0xd5, 0xc6, 0xd1, 0x58,
    0xab, 0x4a, 0x5b, 0x1f, 0xab, 0x6a, 0x9f, 0xfc, 0x4f, 0xd0, 0x9b, 0x4e, 0xdb, 0xc9, 0x9a,
    0xd9, 0xa3, 0x3d, 0x58, 0xe7, 0x83, 0xe0, 0x74, 0x7e, 0x37, 0xf8, 0x58, 0xcc, 0xad, 0x9f,
    0x57, 0x9d, 0xc7, 0x2d, 0xa8, 0x97, 0xbb, 0xa6, 0xce, 0x46, 0xe3, 0x7b, 0xbb, 0xfb, 0x26,
    0x9d, 0xf7, 0xc7, 0x69, 0x3c, 0x7f, 0x6c, 0xe9, 0xf3, 0x09, 0x6b, 0x1a, 0x64, 0x1a, 0xc8,
    0xec, 0xd8, 0x0b, 0xf6, 0xc9, 0xe9, 0xbd, 0x33, 0x2f, 0xc3, 0x5c, 0xf4, 0x07, 0x8d, 0xab,
    0x39, 0xd8, 0x0d, 0xe1, 0x35, 0xe8, 0x40, 0x76, 0x69, 0xe7, 0xde, 0x01, 0xfa, 0x97, 0xb4,
    0x3c, 0x16, 0x71, 0x79, 0xa1, 0xea, 0xe6, 0x3a, 0x1d, 0x0d, 0xae, 0x81, 0x07, 0x82, 0x3d,
    0x03, 0xfa, 0x85, 0x36, 0x7f, 0x28, 0xa3, 0xe3, 0x75, 0xa9, 0xca, 0xec, 0xe3, 0x58, 0x17,
    0x7d, 0x8b, 0xf9, 0x32, 0x25, 0x5f, 0x76, 0x08, 0xda, 0x2b, 0xdf, 0xdf, 0x78, 0x69, 0x1e,
    0x06, 0xbb, 0xb9, 0xf1, 0x80, 0x3a, 0xc9, 0xcd, 0x68, 0x6f, 0xbe, 0x80, 0x86, 0x4c, 0xbc,
    0x96, 0x7d, 0xa0, 0x73, 0x14, 0x7b, 0xda, 0x9a, 0xc8, 0xd2, 0x99, 0xbe, 0x8e, 0x80, 0xef,
    0xe5, 0x0b, 0xe0, 0xa5, 0xd3, 0xeb, 0xee, 0x43, 0x82, 0x47, 0x1c, 0x33, 0xd0, 0x4f, 0x1f,
    0x84, 0xd2, 0x1b, 0xa5, 0x2f, 0xf8, 0x57, 0xd9, 0xf9, 0xd4, 0xbe, 0x2b, 0x62, 0x1c, 0x82,
    0xbf, 0x58, 0xfe, 0xd4, 0x2a, 0xaa, 0x1c, 0x89, 0xfd, 0x7c, 0x3a, 0x8f, 0xf0, 0x14, 0xbe,
    0xff, 0x1a, 0x95, 0xce, 0x11, 0xac, 0xc5, 0x72, 0xa7, 0xd2, 0xa9, 0x9c, 0x55, 0xb3, 0x73,
    0xe6, 0x41, 0xf1, 0xc5, 0x56, 0x53, 0xba, 0x34, 0xda, 0x83, 0xd5, 0x02, 0xfa, 0x3c, 0x7a,
    0xb7, 0xaa, 0x3e, 0x23, 0xf4, 0x6b, 0xa3, 0xcf, 0x50, 0xea, 0x06, 0xed, 0xed, 0xce, 0x54,
    0x03, 0xae, 0x35, 0xbe, 0xa1, 0xf1, 0x11, 0xe3, 0x3c, 0x2b, 0x72, 0x57, 0xf2, 0xed, 0x07,
    0xcd, 0x0a, 0x42, 0x76, 0x3d, 0x39, 0xdd, 0x42, 0x5a, 0x57, 0x49, 0x6c, 0x8e, 0xe3, 0xea,
    0x51, 0xfc, 0x3c, 0xdd, 0x62, 0x61, 0xf0, 0xa9, 0x59, 0xee, 0x29, 0xb2, 0xe7, 0xfe, 0x6c,
    0x6e, 0xb7, 0x0a, 0x8d, 0x4f, 0xe8, 0x37, 0x85, 0x79, 0x05, 0x19, 0x58, 0x9d, 0xf5, 0x46,
    0x3b, 0x3c, 0x4f, 0xa7, 0xc5, 0x9b, 0x39, 0xc9, 0xf0, 0x0b, 0xe0, 0x3d, 0x21, 0xcc, 0x23,
    0xe5, 0x8c, 0xd9, 0xb6, 0x1b, 0xce, 0x51, 0x07, 0x16, 0xf2, 0xc2, 0x77, 0x8f, 0xeb, 0x7e,
    0x44, 0xfa, 0xd5, 0x6e, 0x04, 0xec, 0xef, 0x90, 0x8f, 0x82, 0x0e, 0x29, 0x71, 0x58, 0x86,
    0x8d, 0x7b, 0xf2, 0xb7, 0x37, 0x1d, 0xf4, 0x6b, 0x93, 0x8d, 0xee, 0x8c, 0xfc, 0x21, 0xfa,
    0xf0, 0x2c, 0x53, 0xef, 0xc4, 0x07, 0x7b, 0x05, 0xfd, 0xd6, 0xf5, 0x02, 0xfa, 0xab, 0x00,
    0xdf, 0xae, 0xaf, 0x6e, 0x86, 0x60, 0x8f, 0x83, 0x0d, 0xd7, 0x9f, 0x5d, 0x92, 0x0c, 0x39,
    0x1c, 0x89, 0xb5, 0xfa, 0x16, 0xf4, 0x8b, 0x22, 0xd8, 0x26, 0xe3, 0x6b, 0xb6, 0x63, 0x40,
    0x6c, 0xf8, 0x8b, 0xed, 0xb2, 0xc1, 0x32, 0x7b, 0x2b, 0x65, 0x9f, 0x3a, 0xbe, 0x73, 0xa8,
    0x4b, 0xcd, 0xa6, 0x01, 0xbb, 0x08, 0xed, 0x47, 0xe0, 0xeb, 0xf3, 0xc4, 0x5f, 0x76, 0xb0,
    0xf6, 0x19, 0xf0, 0x15, 0xe1, 0x97, 0xa8, 0x85, 0xe7, 0xd2, 0x5f, 0x86, 0xfc, 0x08, 0xd7,
    0xe1, 0x90, 0xe1, 0x3a, 0xe4, 0x39, 0x65, 0xfd, 0x44, 0xf0, 0x15, 0x9e, 0x3b, 0x5d, 0x2e,
    0xd7, 0x8b, 0xfd, 0xa0, 0x86, 0x73, 0x48, 0xbc, 0xea, 0xb2, 0xdb, 0xb8, 0xfb, 0xc8, 0xef,
    0x1a, 0xfa, 0x0e, 0x83, 0xcb, 0xb1, 0x26, 0xff, 0xd3, 0x3a, 0xff, 0x76, 0x67, 0xde, 0xff,
    0xcd, 0xa7, 0x7d, 0x41, 0x5f, 0xbd, 0x6d, 0x07, 0xf7, 0x1f, 0x56, 0xf5, 0x95, 0x5d, 0x8a,
    0x89, 0xfd, 0x78, 0xac, 0xeb, 0x97, 0xaa, 0xbe, 0xa9, 0xf3, 0x1b, 0xa3, 0x4e, 0x7f, 0x84,
    0x9f, 0xfc, 0xf3, 0xa0, 0x8b, 0x01, 0xbf, 0xdf, 0x46, 0xfb, 0x52, 0xb5, 0x1d, 0xce, 0x0c,
    0xd6, 0xeb, 0x11, 0xc9, 0x6b, 0xd2, 0x9f, 0xc5, 0xdf, 0xc0, 0x07, 0x91, 0xee, 0xda, 0xb0,
    0xb0, 0x8d, 0x53, 0x83, 0x9f, 0xb5, 0x8c, 0x7c, 0x9f, 0xea, 0x48, 0xbf, 0xb9, 0x98, 0x83,
    0xda, 0x21, 0xe8, 0xb7, 0xa8, 0x1d, 0x27, 0xfe, 0xaa, 0xbc, 0x75, 0x46, 0xfa, 0x11, 0xf0,
    0xa7, 0x4b, 0xf4, 0x1c, 0x26, 0x3a, 0xf9, 0xa9, 0x7f, 0xdd, 0x6d, 0xdc, 0xf7, 0x46, 0xe8,
    0x3a, 0x1d, 0xf6, 0x4b, 0xed, 0xe5, 0x3e, 0x57, 0x80, 0xf5, 0x8f, 0xfa, 0x5c, 0xc9, 0xe6,
    0x79, 0x2b, 0xed, 0x09, 0x08, 0x9d, 0x29, 0x8f, 0x5e, 0x35, 0x9f, 0xa6, 0xa4, 0x2d, 0xb9,
    0xf7, 0xf1, 0xa8, 0x92, 0xd0, 0x14, 0xd9, 0x77, 0x07, 0x61, 0xef, 0x18, 0xfb, 0xb9, 0x83,
    0x07, 0x0f, 0x17, 0xc0, 0x1f, 0x6a, 0x47, 0x0f, 0x52, 0x56, 0x03, 0xed, 0xf4, 0x67, 0x42,
    0xdd, 0xad, 0x1d, 0x46, 0x13, 0x5b, 0x1d, 0x03, 0xea, 0x55, 0x48, 0x83, 0x5e, 0xbc, 0x36,
    0xbf, 0xd3, 0x90, 0xe0, 0x39, 0x3b, 0x94, 0xfe, 0x37, 0xc2, 0xd7, 0xbf, 0x49, 0xcf, 0xc8,
    0x80, 0x6e, 0x82, 0xc6, 0x18, 0x6d, 0x13, 0x21, 0xfb, 0xb4, 0x73, 0x95, 0xcb, 0xf6, 0xcc,
    0xd5, 0xf3, 0x9b, 0x3e, 0xb5, 0xf7, 0xb4, 0x80, 0x37, 0x83, 0x3c, 0x42, 0x9a, 0xaf, 0x46,
    0xf7, 0x21, 0xd7, 0xf4, 0x0d, 0xfb, 0x09, 0xbe, 0xc2, 0x78, 0x87, 0xe8, 0x97, 0x8f, 0x69,
    0xa1, 0x65, 0xd0, 0x19, 0x1b, 0x55, 0x98, 0x8f, 0x72, 0x2f, 0xb8, 0x4b, 0xe8, 0xf1, 0xc4,
    0xdd, 0x67, 0x0a, 0x6b, 0x01, 0xec, 0x95, 0x51, 0x3b, 0x02, 0x1b, 0xa5, 0x70, 0xba, 0x8d,
    0x01, 0x99, 0x1b, 0xdb, 0x4e, 0xca, 0x1e, 0x05, 0xd8, 0x5a, 0x37, 0xa3, 0x2a, 0xd0, 0xec,
    0xe0, 0x3c, 0xbd, 0x47, 0xa0, 0xd0, 0x19, 0xf0, 0x77, 0x94, 0xdf, 0xc3, 0x9e, 0xa0, 0xc7,
    0x4f, 0xfa, 0xde, 0x91, 0x61, 0x5d, 0xf2, 0x3a, 0xe9, 0x56, 0xdf, 0xd8, 0xdd, 0x22, 0xea,
    0xc2, 0x37, 0xca, 0x6b, 0x4c, 0x3f, 0xe7, 0x8a, 0x63, 0x25, 0xbd, 0x09, 0x60, 0x4f, 0xf6,
    0x95, 0xfd, 0x2d, 0xd0, 0xe9, 0x6e, 0x86, 0x38, 0xf7, 0x40, 0x07, 0xb0, 0x3e, 0x3a, 0xfa,
    0x96, 0xb6, 0x6e, 0x8a, 0x43, 0xf7, 0xd8, 0x9f, 0x02, 0x0f, 0xe5, 0x35, 0xd1, 0x7a, 0xf7,
    0xde, 0x07, 0xc3, 0xb9, 0xcf, 0xfa, 0xa7, 0xcb, 0xb4, 0x5f, 0x9a, 0xcc, 0xf1, 0xc0, 0x29,
    0xc7, 0xa8, 0xfb, 0x03, 0xec, 0x38, 0xb7, 0x43, 0x18, 0x3b, 0xf1, 0x16, 0xa2, 0x9f, 0x51,
    0x06, 0x73, 0x2e, 0xc7, 0x82, 0x7e, 0xc2, 0x01, 0xfa, 0x73, 0x80, 0xa7, 0x41, 0x99, 0xea,
    0xcd, 0x31, 0xea, 0xe2, 0x2a, 0x2f, 0xdc, 0x11, 0xf2, 0x5e, 0xea, 0x0b, 0x34, 0x2f, 0x01,
    0xc1, 0x10, 0xe5, 0x21, 0xfb, 0x3b, 0x3b, 0xc8, 0x7f, 0xc6, 0x42, 0xd7, 0x94, 0x70, 0x0d,
    0x8f, 0xcb, 0x85, 0x7e, 0x91, 0xfd, 0x26, 0xcc, 0x33, 0x2e, 0x53, 0x78, 0x8b, 0xd7, 0x05,
    0x7d, 0xdf, 0x69, 0xe3, 0x08, 0x85, 0x4e, 0xfb, 0x5b, 0x6a, 0x7c, 0xa0, 0x37, 0x82, 0x1c,
    0x92, 0x6b, 0x25, 0x4c, 0xb5, 0xb9, 0x03, 0xb8, 0x7b, 0x08, 0xcf, 0xe7, 0xcc, 0x37, 0x3e,
    0x2c, 0x0b, 0x7b, 0x25, 0xb0, 0x09, 0x46, 0x8f, 0xf7, 0x37, 0xf3, 0xa1, 0x4e, 0x97, 0x23,
    0x7f, 0xc8, 0xb5, 0x9c, 0xb4, 0x7d, 0x5c, 0x1e, 0x50, 0x3b, 0xc2, 0xff, 0xd3, 0x6c, 0x96,
    0x6d, 0xc0, 0x17, 0xce, 0x19, 0xe0, 0x68, 0xe8, 0x88, 0xf5, 0x8b, 0x7c, 0xe8, 0x9a, 0xf6,
    0x80, 0x36, 0xba, 0x0e, 0xe0, 0xfc, 0x4d, 0x84, 0xfa, 0x04, 0xad, 0x2f, 0x8f, 0x7c, 0x31,
    0xa0, 0xb7, 0x0d, 0xc9, 0x66, 0x04, 0x1a, 0xba, 0xee, 0xf6, 0x67, 0x6a, 0xbb, 0x97, 0x71,
    0x8e, 0x8a, 0x43, 0x29, 0x2f, 0x35, 0x98, 0xd1, 0xb6, 0x06, 0x1a, 0xda, 0x66, 0xbc, 0x9c,
    0xb4, 0x35, 0x1b, 0xcb, 0xf5, 0x0c, 0x5e, 0x60, 0x2d, 0x5c, 0x86, 0xf5, 0x66, 0x82, 0x17,
    0x0f, 0x40, 0xe3, 0x87, 0x83, 0x27, 0x05, 0xe7, 0xb8, 0xaf, 0x76, 0x8f, 0xfe, 0x91, 0xde,
    0x5e, 0xf0, 0x31, 0x35, 0x07, 0x29, 0x3b, 0x4e, 0xd0, 0x93, 0x6c, 0xdb, 0x28, 0x37, 0x8f,
    0x31, 0xfc, 0x59, 0x3a, 0x62, 0xa5, 0x8e, 0xfb, 0x7c, 0x05, 0xe4, 0x77, 0xd7, 0xcd, 0x74,
    0x7b, 0x9e, 0x3d, 0xea, 0x7c, 0x75, 0x0e, 0x77, 0x4c, 0xb2, 0x90, 0x79, 0x5b, 0xc5, 0x9f,
    0xbf, 0x50, 0x6f, 0xec, 0xc6, 0xfd, 0x68, 0x7c, 0x34, 0x57, 0xdf, 0xcc, 0xca, 0xc1, 0xd3,
    0xfe, 0xc9, 0xf9, 0x6b, 0xe0, 0x69, 0x1a, 0x1c, 0x6d, 0x7e, 0x9f, 0xab, 0x83, 0x25, 0xbe,
    0x2a, 0x87, 0x32, 0x09, 0x70, 0xbb, 0xf7, 0xd0, 0x9f, 0x1f, 0xbc, 0xfe, 0x34, 0x2f, 0xef,
    0xaa, 0xbe, 0x13, 0xb1, 0xdf, 0x89, 0xbe, 0x1b, 0x01, 0x77, 0xa2, 0x7f, 0x89, 0x31, 0x9d,
    0x32, 0xdf, 0x5e, 0x2f, 0xf8, 0xf6, 0xb6, 0x76, 0x74, 0x10, 0xeb, 0x69, 0x42, 0xae, 0x91,
    0x8a, 0xe9, 0xac, 0x22, 0xf7, 0xe1, 0x87, 0x31, 0xbf, 0xef, 0x68, 0xeb, 0x04, 0xe5, 0x95,
    0x3f, 0x03, 0xbf, 0x94, 0xf2, 0x37, 0x19, 0xc7, 0xce, 0xf4, 0xfa, 0x0a, 0xea, 0x5e, 0x75,
    0x89, 0x3f, 0x43, 0x95, 0xe9, 0xfa, 0xbe, 0x33, 0xfb, 0xfa, 0x51, 0xcf, 0x3b, 0xe5, 0xd8,
    0xae, 0x93, 0x3f, 0x0f, 0x24, 0x17, 0xb3, 0xbe, 0x12, 0x9d, 0x4e, 0x2a, 0xc8, 0x0f, 0x1f,
    0x4f, 0x2c, 0xad, 0xef, 0xf1, 0x1e, 0x2b, 0xeb, 0x50, 0x43, 0xd4, 0xf7, 0x75, 0xdf, 0x6d,
    0x75, 0xb8, 0x11, 0xda, 0x75, 0x37, 0xdd, 0xcb, 0x7c, 0xfb, 0x23, 0xbb, 0xe7, 0xc1, 0xf5,
    0xc5, 0x61, 0xff, 0x28, 0x1c, 0xb8, 0xf3, 0x72, 0xaf, 0xb7, 0x0d, 0xf8, 0x8e, 0x7d, 0x97,
    0xcd, 0x56, 0xb9, 0xa5, 0x39, 0x9c, 0xee, 0xe5, 0xc8, 0x23, 0xe0, 0xf3, 0xc8, 0xbf, 0xf2,
    0x4c, 0xc5, 0x48, 0x98, 0xf7, 0xc1, 0x35, 0xbe, 0xde, 0x82, 0x75, 0x9d, 0xcc, 0x71, 0x15,
    0x43, 0x75, 0xe7, 0x93, 0x94, 0x8f, 0x1a, 0x6d, 0xae, 0x24, 0x17, 0x01, 0xa6, 0xc7, 0x7b,
    0x64, 0x35, 0xf0, 0x3e, 0x69, 0x27, 0x99, 0x75, 0x80, 0xcc, 0x1e, 0x3e, 0xc8, 0xbc, 0xd5,
    0x72, 0xf9, 0xe6, 0xb8, 0x41, 0xf2, 0x2c, 0xd1, 0x19, 0x40, 0x6f, 0x15, 0x3a, 0x07, 0xd2,
    0xc6, 0x37, 0x48, 0x7d, 0x24, 0xbf, 0x4f, 0x90, 0x75, 0x87, 0x43, 0xb1, 0xf7, 0x92, 0xf4,
    0xfa, 0xd1, 0xc4, 0x5a, 0x80, 0x39, 0x6d, 0xa8, 0x3a, 0x63, 0x78, 0x5a, 0xc2, 0xba, 0xfd,
    0xc8, 0x2e, 0xdc, 0x3b, 0x0f, 0xd5, 0x75, 0x03, 0x3a, 0x9d, 0xae, 0x53, 0xca, 0x7d, 0xa1,
    0x5d, 0xc6, 0xe6, 0xd2, 0x69, 0x34, 0xd6, 0xbd, 0xc7, 0xec, 0x5b, 0x36, 0xae, 0x83, 0xc1,
    0xe8, 0x4b, 0xd7, 0x86, 0x38, 0x9a, 0x34, 0x3d, 0xa2, 0xed, 0x2e, 0xfb, 0x06, 0x9e, 0x24,
    0xab, 0x7c, 0x48, 0xe8, 0x9e, 0x30, 0x1e, 0x6d, 0x9f, 0x6f, 0x10, 0x60, 0xdd, 0xd3, 0xf9,
    0xa0, 0x8d, 0xc4, 0x26, 0x90, 0xfe, 0x44, 0xd6, 0x6b, 0x1f, 0xd2, 0xfc, 0x41, 0xca, 0x81,
    0xc7, 0xf4, 0x7e, 0x96, 0x3e, 0x87, 0xcd, 0xeb, 0xae, 0xff, 0xb4, 0xc2, 0x18, 0x85, 0x6d,
    0x4b, 0xdb, 0xa8, 0x7f, 0x87, 0xa2, 0x4e, 0xa2, 0x27, 0x79, 0xaa, 0x1d, 0x21, 0xe0, 0x05,
    0x41, 0x95, 0x25, 0x1f, 0x0f, 0x1d, 0xac, 0x1b, 0xc8, 0xb9, 0x12, 0x76, 0xd7, 0x9f, 0x34,
    0x62, 0x8f, 0x31, 0x7f, 0x7c, 0xf9, 0x73, 0x36, 0xea, 0xa4, 0xf6, 0xd0, 0x73, 0xe1, 0x9f,
    0x74, 0x13, 0xf8, 0xe5, 0x5e, 0x9c, 0x3e, 0x3f, 0x4b, 0xe0, 0xac, 0x8a, 0xbd, 0xc9, 0x40,
    0xa9, 0xeb, 0x42, 0x79, 0x30, 0x1a, 0xed, 0x2e, 0xd3, 0xde, 0xa1, 0x0a, 0xcb, 0xd7, 0x85,
    0x50, 0x75, 0x8f, 0xab, 0xb4, 0xdf, 0xca, 0x7b, 0x54, 0x15, 0x96, 0x85, 0xb0, 0xe6, 0x1c,
    0xa5, 0x00, 0xdb, 0x90, 0xf6, 0xae, 0x4b, 0xe4, 0x73, 0xa1, 0xb5, 0xef, 0x80, 0x3e, 0x4f,
    0xbb, 0x74, 0x3d, 0x10, 0xf1, 0x8c, 0xb9, 0xf0, 0x72, 0xd9, 0x9d, 0x4b, 0x94, 0x45, 0xe8,
    0x71, 0x51, 0xa7, 0xae, 0xe0, 0x1a, 0x2e, 0xbf, 0xd3, 0xe2, 0x33, 0x4e, 0x1e, 0x24, 0x1d,
    0x65, 0x88, 0x86, 0xaf, 0x4e, 0x68, 0xb0, 0x79, 0x8a, 0x20, 0x1f, 0xd1, 0xce, 0x7f, 0x88,
    0x6a, 0x1e, 0x84, 0x76, 0xf7, 0x9a, 0xfc, 0xb1, 0xa0, 0x87, 0xfb, 0x37, 0x87, 0x77, 0x8b,
    0x07, 0xfa, 0x61, 0x61, 0x7e, 0x3b, 0x86, 0x3d, 0x11, 0x6c, 0xe7, 0xe3, 0x61, 0x95, 0xd7,
    0xc0, 0xe5, 0xda, 0x09, 0x9e, 0x74, 0xdf, 0x49, 0xb2, 0xef, 0xfc, 0x60, 0xdc, 0x23, 0x49,
    0x7f, 0x64, 0xdb, 0x8b, 0xed, 0xda, 0xb4, 0xfd, 0x0d, 0xb2, 0xab, 0x84, 0xb4, 0x46, 0x3c,
    0xe3, 0x1b, 0xc3, 0x7b, 0x94, 0x73, 0xd2, 0xef, 0x79, 0x26, 0xed, 0x8c, 0x96, 0x71, 0xdf,
    0x7c, 0x03, 0xb6, 0xb5, 0x58, 0x6f, 0xa8, 0x1f, 0x48, 0x7d, 0x64, 0x74, 0xea, 0x49, 0x99,
    0xc7, 0xa3, 0xfc, 0x64, 0xd0, 0x2f, 0x52, 0xe3, 0x6d, 0x84, 0x80, 0xf3, 0x6d, 0xc1, 0x93,
    0xb0, 0xde, 0x30, 0x1e, 0x41, 0xdf, 0xe3, 0xd0, 0x60, 0x45, 0x9f, 0xb6, 0x90, 0x11, 0x62,
    0xe9, 0xb6, 0xc9, 0x7e, 0xbd, 0x9b, 0x2e, 0xf9, 0x5b, 0x63, 0x9d, 0x25, 0x9e, 0xe7, 0x64,
    0x39, 0x81, 0xf7, 0xaa, 0x38, 0x38, 0x53, 0xf6, 0x10, 0x12, 0x3f, 0x7c, 0xb2, 0xe6, 0xe0,
    0x88, 0xf6, 0x0e, 0x01, 0xcf, 0xce, 0x21, 0xca, 0x78, 0x6d, 0xaf, 0x3e, 0xd1, 0x11, 0xaa,
    0xfb, 0x7e, 0xb5, 0x90, 0x9e, 0xef, 0xc8, 0xbe, 0xaa, 0x17, 0x52, 0xfb, 0x3b, 0xf4, 0x6e,
    0xec, 0x4e, 0xed, 0x2b, 0xe8, 0xb2, 0x1f, 0x74, 0xa1, 0x6e, 0x69, 0xef, 0xe1, 0x8a, 0xfc,
    0x8f, 0x63, 0xb0, 0xcd, 0xe2, 0xf6, 0x63, 0xdf, 0x3d, 0xbf, 0x9f, 0x81, 0xcc, 0x7c, 0xb2,
    0x87, 0x8a, 0x8e, 0xbf, 0x93, 0x92, 0x1f, 0xea, 0x5e, 0x72, 0xfd, 0xbc, 0x57, 0xea, 0x1b,
    0x98, 0xf5, 0xcb, 0x0c, 0x8d, 0x65, 0xed, 0xdb, 0xe6, 0xcd, 0x15, 0xe8, 0xae, 0xa5, 0x06,
    0x32, 0x39, 0xbe, 0x11, 0xfd, 0x1a, 0xc7, 0xc3, 0x82, 0x73, 0x52, 0x7e, 0xba, 0xf0, 0xde,
    0xdf, 0xa0, 0xdf, 0x0d, 0xe4, 0xfa, 0xd9, 0x08, 0x74, 0xe3, 0xe6, 0xde, 0x10, 0x74, 0x10,
    0x53, 0xbd, 0x07, 0xf0, 0xd7, 0x61, 0x8e, 0xce, 0xef, 0xcf, 0x5b, 0x95, 0xc7, 0x73, 0x61,
    0x75, 0x4a, 0x64, 0xc3, 0xa2, 0x7c, 0x99, 0xde, 0x5c, 0x35, 0xc2, 0x5e, 0x09, 0xe6, 0x06,
    0x66, 0x95, 0xe7, 0x90, 0x3e, 0xd8, 0xbd, 0x1c, 0x5c, 0x1d, 0x9e, 0x26, 0x6b, 0xb9, 0xf3,
    0xa1, 0x7f, 0x02, 0xf4, 0x99, 0x3b, 0xb2, 0xff, 0xc0, 0xb6, 0x12, 0xf6, 0xdd, 0x98, 0xfc,
    0xc0, 0x0b, 0x31, 0x3e, 0x1b, 0xf5, 0x11, 0x01, 0x7b, 0xd4, 0x03, 0x5d, 0xa1, 0x56, 0x2d,
    0xc0, 0xb8, 0x91, 0x2f, 0x90, 0xaf, 0x76, 0xa1, 0xff, 0x3c, 0x86, 0xc1, 0xbf, 0xc0, 0xfd,
    0x9b, 0xc4, 0xa7, 0xb3, 0x23, 0xe9, 0xdd, 0xe8, 0x6f, 0x4b, 0x6c, 0x96, 0x1d, 0x25, 0x26,
    0x75, 0xf0, 0x7e, 0xed, 0x6e, 0xe8, 0xa3, 0x6e, 0x86, 0xb1, 0xe8, 0xa7, 0xa5, 0x82, 0x3a,
    0xe1, 0xd5, 0x61, 0x2d, 0x1d, 0xd3, 0xa3, 0xea, 0x8b, 0x3b, 0x80, 0x9f, 0x32, 0xc6, 0xf0,
    0xf8, 0x3f, 0xf5, 0x46, 0x28, 0x63, 0x4f, 0xef, 0xd1, 0x96, 0x46, 0x7f, 0x07, 0xb4, 0x8d,
    0x97, 0xbe, 0x8c, 0xbd, 0x35, 0xc4, 0xbe, 0xf9, 0x38, 0xee, 0x9b, 0x0a, 0xc5, 0x39, 0xdc,
    0xbc, 0x25, 0x13, 0x3f, 0xa3, 0xc0, 0xb4, 0x3c, 0x86, 0xb2, 0xf3, 0xd8, 0x4f, 0x8d, 0x03,
    0x2c, 0x88, 0xb7, 0xd2, 0xfc, 0x2b, 0x9d, 0x08, 0xed, 0x4a, 0xa4, 0xbd, 0xf3, 0xd6, 0xf9,
    0xfd, 0x49, 0xf8, 0x54, 0x72, 0xfc, 0x61, 0xed, 0x52, 0x11, 0x71, 0xb7, 0xd3, 0x16, 0x76,
    0x3c, 0x07, 0xaa, 0x0f, 0x33, 0x81, 0x23, 0xd1, 0xed, 0x9f, 0xb2, 0xe5, 0xdc, 0x6e, 0xa7,
    0xd9, 0xdd, 0xb9, 0x07, 0xd9, 0x31, 0x6f, 0x95, 0x76, 0x50, 0x27, 0xf3, 0x7a, 0xa5, 0xbd,
    0xf0, 0x3d, 0x4b, 0xe2, 0x97, 0xb5, 0x38, 0x79, 0xb0, 0x2f, 0x3b, 0x73, 0xb2, 0x6d, 0x95,
    0x62, 0xc0, 0x25, 0xe9, 0x23, 0x14, 0x0f, 0x9f, 0xec, 0x41, 0xcb, 0x58, 0x0e, 0xb4, 0x4b,
    0xcf, 0xf3, 0xd5, 0x21, 0x99, 0x76, 0x0a, 0xba, 0x08, 0xf0, 0x1d, 0x8e, 0xf9, 0xc0, 0x7b,
    0xe6, 0x18, 0x8f, 0xdb, 0xe7, 0x7d, 0x0e, 0xe0, 0xe3, 0x40, 0x27, 0xdb, 0xe8, 0x7b, 0xc6,
    0x06, 0xa7, 0x78, 0xdd, 0x05, 0x7d, 0xcb, 0x18, 0xab, 0x52, 0xf5, 0x90, 0xaf, 0x5f, 0x23,
    0xe2, 0xf9, 0x4d, 0xde, 0xb5, 0xb7, 0x3b, 0x63, 0xe7, 0xb8, 0x1d, 0xcf, 0x6b, 0x1f, 0x69,
    0x8b, 0x7b, 0x1a, 0x7a, 0x0c, 0xc9, 0x42, 0x5c, 0xe1, 0xbe, 0xe4, 0x31, 0xc2, 0x8d, 0xfb,
    0x4a, 0x7f, 0x27, 0xb0, 0xae, 0xbb, 0x9d, 0xba, 0x58, 0xab, 0x21, 0xbe, 0x57, 0x68, 0x3c,
    0x03, 0x6f, 0x90, 0xdb, 0x75, 0x1f, 0xf7, 0xf2, 0xaf, 0x4f, 0x88, 0xb7, 0x0f, 0xd8, 0xcf,
    0xe5, 0x5e, 0xb2, 0x6e, 0xae, 0x0f, 0xc9, 0xaf, 0xeb, 0xf7, 0xd8, 0x37, 0x12, 0x01, 0x8e,
    0xfd, 0xd2, 0xde, 0xf4, 0xa6, 0x2d, 0xe8, 0xf8, 0xf8, 0x40, 0xc6, 0x6b, 0xc7, 0xfe, 0xdf,
    0x37, 0x74, 0x71, 0x4f, 0x7f, 0xe7, 0x2e, 0x96, 0xab, 0x52, 0xa7, 0x8a, 0xf9, 0x84, 0xc9,
    0x81, 0xf0, 0x5c, 0x22, 0x1f, 0x8a, 0x65, 0xe6, 0xf5, 0x61, 0xae, 0xae, 0xbb, 0x0d, 0xf3,
    0x69, 0xe2, 0x7a, 0x3c, 0x7e, 0x08, 0xfb, 0xa5, 0x8e, 0x7f, 0xa3, 0xc8, 0x5a, 0x83, 0xdd,
    0xea, 0x20, 0x7b, 0xa2, 0xaf, 0x5c, 0x1d, 0x4d, 0x1b, 0xe7, 0xe1, 0x30, 0x83, 0x1b, 0x55,
    0x27, 0xf9, 0xe0, 0x17, 0xf7, 0xfe, 0xdb, 0x59, 0x4f, 0x9f, 0x7f, 0xe4, 0x8f, 0x96, 0xff,
    0x1c, 0x8d, 0x7d, 0xcf, 0x0e, 0xfa, 0xee, 0x7f, 0x2e, 0xff, 0xef, 0xce, 0x9b, 0xb7, 0x3b,
    0x8a, 0xd9, 0xfc, 0xbf, 0x98, 0x13, 0xfc, 0x39, 0xff, 0xef, 0x5f, 0xff, 0xf3, 0x97, 0xe4,
    0x2d, 0xcf, 0x26, 0x13, 0xcf, 0x75, 0x0e, 0x82, 0x30, 0x98, 0x8f, 0xc2, 0x59, 0xc4, 0xcd,
    0x09, 0x77, 0x47, 0x76, 0x74, 0x77, 0x38, 0x74, 0xfb, 0x77, 0xca, 0xcb, 0x5a, 0x14, 0x8e,
    0xc9, 0x78, 0xe8, 0x45, 0x6a, 0x0a, 0xdf, 0x5a, 0x30, 0x75, 0x27, 0xb7, 0x76, 0xdf, 0x3d,
    0x7d, 0xdf, 0xed, 0xf3, 0x9d, 0xaf, 0x4a, 0x3a, 0xde, 0x51, 0xcf, 0x1b, 0xcc, 0xa0, 0x8f,
    0x78, 0x7b, 0xaa, 0x3b, 0xc5, 0x1b, 0x62, 0x95, 0x94, 0xc1, 0x50, 0x78, 0x36, 0x72, 0x3f,
    0x26, 0x6e, 0xdc, 0x8e, 0xfe, 0xf9, 0x76, 0x86, 0xb9, 0x01, 0x5b, 0xe1, 0x29, 0xac, 0x83,
    0x4b, 0xd1, 0x73, 0x0a, 0x8f, 0x55, 0x4c, 0xd2, 0x34, 0x9d, 0x6a, 0x19, 0x86, 0x79, 0x30,
    0x6f, 0x3a, 0x94, 0x08, 0x82, 0xdf, 0xf7, 0x9e, 0xa3, 0x15, 0x3a, 0xf2, 0x22, 0x7b, 0x3c,
    0xbd, 0x60, 0x0a, 0xad, 0x27, 0x90, 0x37, 0xe9, 0xb6, 0x54, 0xb5, 0x9c, 0x3b, 0xa2, 0x5b,
    0xed, 0xa9, 0xbb, 0xf7, 0xae, 0xa4, 0xe6, 0x31, 0x0e, 0x47, 0x6e, 0x6b, 0x3e, 0x76, 0x4f,
    0xcf, 0xdb, 0xdb, 0x7d, 0xab, 0xa6, 0x1c, 0xb6, 0x23, 0xc3, 0xdb, 0x46, 0x18, 0x4e, 0x9b,
    0xbb, 0x6f, 0xc7, 0xf6, 0x3d, 0x27, 0x95, 0x25, 0xb9, 0x8c, 0x09, 0x42, 0x33, 0x68, 0x99,
    0xda, 0x41, 0x03, 0xe0, 0x4b, 0x7d, 0xe5, 0x66, 0xe8, 0x5e, 0x70, 0x59, 0x50, 0x9d, 0x0f,
    0xfa, 0x5d, 0x75, 0x26, 0xe4, 0x6c, 0xeb, 0x25, 0x0c, 0xc8, 0x69, 0xce, 0xc6, 0xf4, 0x47,
    0xeb, 0xbb, 0xa7, 0xf6, 0xbd, 0x5d, 0x9e, 0x79, 0xfe, 0x4a, 0x25, 0x10, 0xe9, 0x0d, 0xce,
    0x4c, 0x17, 0x06, 0xab, 0x53, 0x7d, 0xc1, 0x77, 0xfe, 0xda, 0x3d, 0x1f, 0x09, 0x77, 0x0a,
    0x76, 0x9d, 0x73, 0xba, 0x32, 0x58, 0x1d, 0x38, 0x5e, 0xfa, 0x8b, 0xad, 0x98, 0x89, 0x29,
    0x91, 0xe8, 0xdc, 0xbe, 0xd3, 0x01, 0x22, 0x9c, 0x7c, 0x82, 0xda, 0x98, 0xbd, 0xc4, 0xd0,
    0x42, 0xd9, 0x70, 0x23, 0x77, 0x72, 0xef, 0x3a, 0xdd, 0x70, 0xe2, 0xa8, 0xcd, 0x1e, 0xd9,
    0xf8, 0x16, 0xc0, 0x00, 0xf4, 0x36, 0x29, 0x7d, 0xea, 0x34, 0x0c, 0xa0, 0xdb, 0x4a, 0xa0,
    0xad, 0x56, 0x3f, 0x99, 0x5e, 0x73, 0x46, 0xab, 0xbc, 0x4a, 0xfc, 0x55, 0xf9, 0xc2, 0xc4,
    0xdd, 0x03, 0x95, 0x49, 0x9a, 0xad, 0xd1, 0xdc, 0x8a, 0xeb, 0xa0, 0x95, 0xa2, 0x9d, 0xd0,
    0x0e, 0x6d, 0xdf, 0xef, 0xd9, 0xda, 0xda, 0x6c, 0xe2, 0x64, 0xf6, 0xa1, 0xca, 0xd4, 0x7d,
    0x9a, 0xc6, 0x7f, 0x14, 0xf6, 0xb5, 0xd9, 0xa0, 0x84, 0x50, 0xb6, 0xcf, 0x78, 0x33, 0x90,
    0xd2, 0x3b, 0x62, 0xd5, 0x8d, 0x5a, 0xb0, 0xee, 0x2f, 0x66, 0x6a, 0xdb, 0xb0, 0xa2, 0x31,
    0x84, 0x3f, 0x8f, 0x93, 0x82, 0xb8, 0x0e, 0x96, 0xca, 0x69, 0x0d, 0x5f, 0x45, 0x17, 0xb7,
    0x62, 0x62, 0x3f, 0xcd, 0x71, 0xf5, 0x34, 0xe7, 0xd1, 0xd4, 0x1d, 0xa5, 0xe1, 0x6d, 0x0d,
    0x69, 0x4c, 0xa4, 0xf0, 0xe4, 0x0a, 0xdc, 0x18, 0x59, 0x84, 0xb1, 0x02, 0x95, 0x84, 0xe1,
    0x6a, 0x24, 0x05, 0x17, 0x34, 0x1b, 0x17, 0x5a, 0xad, 0xa5, 0xf8, 0x2b, 0xa2, 0x5a, 0x56,
    0xce, 0x7a, 0x7c, 0x89, 0xf5, 0xca, 0x35, 0xd2, 0xa4, 0x0e, 0xaf, 0x52, 0x34, 0x24, 0x5f,
    0xa6, 0x1a, 0x46, 0x92, 0x1a, 0x1b, 0x9a, 0xa9, 0x4c, 0x80, 0x1b, 0xb5, 0x03, 0x91, 0x5e,
    0xc4, 0x8e, 0x86, 0x74, 0x3b, 0x7e, 0x94, 0x21, 0xcb, 0x1a, 0x4c, 0x37, 0x6a, 0x16, 0xad,
    0x10, 0x27, 0x26, 0xcd, 0xa4, 0x05, 0x29, 0xe8, 0x8b, 0xb1, 0xe7, 0x4e, 0x1f, 0x5c, 0x37,
    0xc3, 0xf2, 0x69, 0xd6, 0xf3, 0x81, 0x16, 0x53, 0x6f, 0x0f, 0x66, 0x03, 0xe2, 0x39, 0xb0,
    0xd3, 0x9f, 0x90, 0x5b, 0x1e, 0x0c, 0x5c, 0x6d, 0x29, 0x55, 0xe8, 0xb7, 0xeb, 0x20, 0x37,
    0x97, 0x17, 0x89, 0x15, 0xe4, 0xf4, 0x69, 0xec, 0xec, 0xe2, 0xd6, 0x34, 0x53, 0x47, 0xb0,
    0x30, 0x1f, 0x8e, 0x6f, 0x7b, 0xc1, 0x41, 0x2f, 0x9c, 0x01, 0x13, 0x9e, 0x78, 0xb6, 0xe3,
    0x0f, 0x6e, 0xf1, 0x8e, 0x77, 0xb1, 0x18, 0xd4, 0x14, 0xf4, 0x33, 0xdf, 0x6f, 0x0e, 0xf1,
    0xfa, 0xb2, 0xdb, 0xa2, 0x24, 0x39, 0xce, 0x41, 0x14, 0xe3, 0x51, 0x6b, 0xb9, 0x1e, 0x4e,
    0x6e, 0x3f, 0x1c, 0x04, 0x40, 0xff, 0x07, 0xc1, 0xfc, 0x20, 0x32, 0x34, 0x17, 0x2f, 0x43,
    0xb3, 0x82, 0xd2, 0x83, 0xc0, 0x39, 0x98, 0x4d, 0xc3, 0x11, 0xae, 0xdf, 0x4f, 0x71, 0x3a,
    0x74, 0x0f, 0x82, 0x7b, 0xca, 0x95, 0x10, 0x99, 0xda, 0x3e, 0x9f, 0x11, 0x76, 0x59, 0xfe,
    0x79, 0x30, 0x30, 0xdb, 0x57, 0x2e, 0x73, 0x4f, 0x5f, 0x1a, 0x4e, 0xf5, 0x18, 0x95, 0xda,
    0xd5, 0xbe, 0xe7, 0xbd, 0x2f, 0x73, 0xf2, 0xad, 0x34, 0x3b, 0x39, 0x10, 0x59, 0x6b, 0x6b,
    0x7d, 0xa8, 0x33, 0xe8, 0x78, 0x56, 0x6a, 0x01, 0xde, 0x27, 0x1f, 0x8d, 0xe9, 0x4f, 0xca,
    0x1a, 0x51, 0x8b, 0xae, 0x3e, 0xc3, 0xb7, 0xc0, 0x8c, 0x81, 0x1c, 0x91, 0xfc, 0xab, 0x93,
    0xd4, 0xec, 0xc3, 0x38, 0x9c, 0x4f, 0xac, 0x0c, 0xab, 0x8a, 0x0a, 0x50, 0x87, 0xed, 0xf7,
    0xe0, 0xd4, 0x43, 0xc7, 0x05, 0x8e, 0x18, 0x38, 0xf6, 0xc4, 0x39, 0xf3, 0x7a, 0x13, 0x4c,
    0xae, 0xd5, 0x29, 0xcf, 0x02, 0xc7, 0x77, 0x9d, 0x23, 0x77, 0x8c, 0x6c, 0x3f, 0xe8, 0xab,
    0x39, 0xf5, 0x40, 0xd3, 0xf5, 0x6f, 0x33, 0x2f, 0xf3, 0x04, 0xc8, 0x22, 0xe1, 0xc2, 0x9c,
    0x7d, 0x23, 0x69, 0x2f, 0x8b, 0x24, 0xf9, 0x85, 0xaf, 0x7f, 0x57, 0x3e, 0xb4, 0x30, 0x3b,
    0xae, 0xe5, 0x08, 0x82, 0x10, 0x6b, 0x21, 0xa3, 0xc1, 0x1d, 0x60, 0x3a, 0x2f, 0x94, 0xb0,
    0x06, 0xff, 0x48, 0xc7, 0x80, 0xce, 0x80, 0x8c, 0x84, 0x77, 0xec, 0xdd, 0xbb, 0xe7, 0x2e,
    0x08, 0xed, 0xfd, 0xc4, 0x75, 0x51, 0x6d, 0x12, 0x2b, 0x5a, 0x03, 0xeb, 0xb4, 0xa9, 0x91,
    0xe8, 0x67, 0xa6, 0xe5, 0xc8, 0x29, 0x62, 0x8e, 0xdd, 0x00, 0x13, 0x5b, 0x68, 0xe2, 0xed,
    0xe8, 0xcf, 0x0d, 0x4a, 0xe6, 0x51, 0x08, 0x3c, 0x05, 0x16, 0x22, 0xfd, 0x52, 0x11, 0xe6,
    0xa6, 0x33, 0xdb, 0xe7, 0x51, 0x7e, 0xf2, 0xed, 0xf9, 0x00, 0x8a, 0x04, 0x2a, 0xe6, 0x9a,
    0xa0, 0xaf, 0x95, 0xd2, 0x48, 0x3a, 0x5a, 0xf4, 0xf5, 0xc8, 0x85, 0xc5, 0xe6, 0x3a, 0x44,
    0xc0, 0x39, 0xeb, 0xa1, 0x79, 0x79, 0x72, 0xda, 0x56, 0x28, 0xa7, 0xac, 0x69, 0xb1, 0x0c,
    0x2b, 0x64, 0x71, 0xa9, 0xc6, 0x2c, 0xc0, 0x5c, 0x79, 0xc8, 0x81, 0x49, 0xfb, 0xd6, 0xd5,
    0x46, 0x2d, 0xac, 0x8d, 0x08, 0xb5, 0x03, 0x93, 0x82, 0x94, 0x42, 0x7f, 0x2b, 0xac, 0x03,
    0xdd, 0x67, 0x19, 0xae, 0xb9, 0x98, 0x4e, 0x3e, 0x69, 0x31, 0x80, 0x4b, 0x11, 0xd4, 0x66,
    0x31, 0x51, 0x5a, 0xf5, 0xca, 0xea, 0x3a, 0xb2, 0xbe, 0x78, 0xcd, 0xa9, 0xad, 0x3e, 0xfc,
    0x59, 0xac, 0x52, 0x19, 0x83, 0xe0, 0xfb, 0x84, 0x95, 0xc6, 0x8d, 0xb5, 0x9f, 0x23, 0x5c,
    0x94, 0x64, 0xe4, 0x15, 0x96, 0x78, 0x05, 0x25, 0xd6, 0x5e, 0xca, 0x8a, 0xb7, 0x91, 0x5a,
    0x36, 0x4a, 0xbe, 0x8c, 0xed, 0xe9, 0x50, 0xfd, 0x86, 0xcf, 0xc9, 0xd7, 0x50, 0xab, 0x17,
    0xf5, 0xfa, 0x93, 0xf9, 0x78, 0x1a, 0xaa, 0x5f, 0xf9, 0x4d, 0x52, 0x62, 0x36, 0xf5, 0x7c,
    0x46, 0x7c, 0xb3, 0x46, 0x79, 0x3f, 0x2d, 0x37, 0xf2, 0xc1, 0x84, 0x78, 0xe5, 0x80, 0x35,
    0xc3, 0x24, 0x71, 0xd6, 0xcf, 0x98, 0x49, 0x33, 0xea, 0x83, 0x30, 0x9e, 0xbe, 0xe2, 0x8f,
    0x01, 0x25, 0x20, 0x0e, 0xbd, 0xe9, 0xab, 0x11, 0x19, 0x66, 0xaf, 0x7a, 0x48, 0xa1, 0xc0,
    0x5e, 0x51, 0xd1, 0x4d, 0x73, 0xa5, 0x20, 0x7c, 0x15, 0x48, 0x36, 0x99, 0x53, 0x84, 0xf3,
    0xbc, 0x02, 0x76, 0xe3, 0xe2, 0x04, 0x6c, 0xfe, 0xf0, 0xe3, 0xeb, 0x1f, 0x5e, 0xbf, 0x4e,
    0xf4, 0x2a, 0x00, 0x7d, 0x10, 0x90, 0x18, 0xb8, 0x39, 0xbd, 0x88, 0x51, 0xbd, 0xc2, 0x34,
    0x68, 0x43, 0x9a, 0x4b, 0xdd, 0xdb, 0x13, 0x59, 0x32, 0x12, 0x78, 0xe9, 0x31, 0x0b, 0x55,
    0xb3, 0xfe, 0xf3, 0xad, 0xf7, 0x38, 0xc5, 0xa4, 0x20, 0xca, 0xfc, 0x89, 0x62, 0xeb, 0x31,
    0x31, 0xa7, 0x51, 0xd5, 0xa3, 0x55, 0xcc, 0xa8, 0xc5, 0x04, 0x17, 0x23, 0x2f, 0xf2, 0x6e,
    0x1b, 0xb7, 0xd1, 0x96, 0xfc, 0x0c, 0xe5, 0x31, 0xed, 0xbb, 0x4a, 0x47, 0x5a, 0xde, 0x77,
    0x83, 0xcc, 0xb3, 0xa1, 0xbe, 0xfb, 0x45, 0x7b, 0x58, 0x3b, 0xbf, 0xfe, 0x5c, 0xa9, 0xb7,
    0x3f, 0x77, 0x0e, 0xce, 0xda, 0x15, 0x25, 0xfb, 0xae, 0xfe, 0xfe, 0xc3, 0xb2, 0x66, 0xae,
    0xda, 0x8d, 0x74, 0x43, 0xc5, 0x02, 0x37, 0x95, 0xfe, 0xb6, 0xb4, 0xb1, 0xd6, 0x49, 0xad,
    0x19, 0xfe, 0x3b, 0x6e, 0x54, 0x0e, 0x5a, 0xa2, 0x29, 0x4e, 0xc6, 0xab, 0x7f, 0xa1, 0x34,
    0xa9, 0x05, 0x65, 0x5c, 0x67, 0x6a, 0xa2, 0xda, 0x54, 0x79, 0xce, 0x54, 0x8b, 0x18, 0x4d,
    0xab, 0x86, 0xcf, 0xe4, 0xb5, 0xc4, 0x66, 0xf2, 0xe6, 0x97, 0xb5, 0x03, 0x02, 0x6f, 0xed,
    0xe6, 0xc9, 0x51, 0xbf, 0x95, 0xf9, 0x5b, 0xf9, 0x5f, 0x86, 0x6f, 0x87, 0xfc, 0xed, 0x70,
    0x07, 0x61, 0x36, 0x8b, 0x92, 0x97, 0xea, 0x00, 0xb4, 0xb2, 0x0c, 0x3e, 0x6b, 0xd3, 0x3a,
    0x62, 0x58, 0x23, 0x12, 0xb2, 0xd6, 0x04, 0x44, 0x3e, 0xe8, 0x0a, 0x54, 0xf3, 0xcc, 0xbb,
    0xed, 0x41, 0x4b, 0x8c, 0x03, 0xeb, 0xe3, 0xc4, 0x1e, 0xda, 0x2f, 0xac, 0x9a, 0xe5, 0x7b,
    0xb3, 0x69, 0x79, 0xd3, 0xf5, 0xc8, 0x0a, 0xc2, 0xa9, 0xa8, 0xfa, 0xe2, 0x85, 0xf5, 0x63,
    0x53, 0x3b, 0xb3, 0xce, 0x0e, 0xda, 0xc7, 0x27, 0xad, 0x4a, 0xe3, 0xc7, 0x74, 0x8a, 0x96,
    0xac, 0xad, 0xb2, 0x9a, 0x87, 0x47, 0x83, 0x00, 0x65, 0xde, 0xc0, 0x9d, 0xfc, 0x45, 0x20,
    0x53, 0xbb, 0x95, 0xa2, 0x3a, 0x15, 0xa4, 0x54, 0x3e, 0x21, 0x2d, 0x73, 0x4c, 0x9a, 0x99,
    0xcf, 0x4a, 0xe2, 0x59, 0x2f, 0xb2, 0x18, 0xeb, 0x9e, 0xd0, 0xd5, 0x92, 0xcc, 0x4e, 0x98,
    0x8a, 0xb2, 0x08, 0x93, 0x9c, 0x88, 0xd8, 0x23, 0x00, 0x0c, 0xa1, 0x37, 0x27, 0x06, 0xbf,
    0x39, 0x60, 0x23, 0x77, 0x4a, 0x2e, 0x1f, 0xca, 0xc2, 0x79, 0xcf, 0x9e, 0x0f, 0x4c, 0xa6,
    0xb9, 0x87, 0x31, 0xcb, 0x0e, 0x67, 0xef, 0x8a, 0x30, 0x97, 0x6a, 0x24, 0x13, 0xa4, 0x01,
    0xe4, 0x1f, 0xa0, 0xb6, 0x29, 0x2f, 0x0f, 0xa7, 0x07, 0x0b, 0xe1, 0xe3, 0xe4, 0xc1, 0x8b,
    0x9c, 0x50, 0xb1, 0xa8, 0x5a, 0x9c, 0x45, 0x09, 0xf0, 0xde, 0x0b, 0x43, 0xdf, 0xb5, 0x83,
    0x1a, 0x59, 0x78, 0x29, 0x93, 0x19, 0xde, 0xda, 0xbe, 0x9a, 0x4c, 0x16, 0xaa, 0x70, 0x96,
    0xbd, 0x06, 0xbf, 0x93, 0x75, 0xd6, 0x6f, 0xbd, 0x49, 0x24, 0x72, 0xd7, 0xad, 0x6b, 0x75,
    0x49, 0xa0, 0x5e, 0x97, 0xdf, 0xc9, 0xba, 0x05, 0xad, 0x3c, 0xa3, 0x46, 0x2d, 0x8d, 0x6f,
    0x59, 0x4c, 0x37, 0x76, 0x84, 0xe9, 0xed, 0x5e, 0x6a, 0x95, 0x30, 0x7b, 0x8f, 0xfa, 0xfc,
    0xec, 0xbf, 0x67, 0x07, 0x2c, 0x84, 0xf4, 0x5e, 0xb1, 0x49, 0xd9, 0xab, 0x96, 0x29, 0xf3,
    0x26, 0xe6, 0x4c, 0x67, 0x82, 0x1c, 0xe7, 0x14, 0xb5, 0x31, 0x35, 0x5a, 0x2a, 0x6f, 0x1f,
    0x92, 0xc5, 0x7f, 0xf9, 0x35, 0x95, 0x72, 0xcb, 0x06, 0xdb, 0x09, 0x0b, 0x28, 0x26, 0x8b,
    0xcc, 0xb9, 0x3d, 0x56, 0x4a, 0xa8, 0x9d, 0x8a, 0x44, 0x76, 0x77, 0x41, 0xf8, 0x10, 0x2c,
    0x49, 0x94, 0xcb, 0x6f, 0x0d, 0x86, 0x40, 0x49, 0xf1, 0xa2, 0x74, 0x3d, 0x25, 0x51, 0x1e,
    0x7f, 0x18, 0xae, 0x67, 0xda, 0x86, 0x32, 0x2b, 0x40, 0x00, 0xa5, 0x96, 0x8c, 0xc6, 0x0d,
    0x52, 0x4d, 0xf8, 0xa8, 0x2d, 0x7b, 0x4d, 0x42, 0xa4, 0xd3, 0x1c, 0x0b, 0x3a, 0xff, 0xb4,
    0x35, 0x98, 0x4e, 0xfa, 0x1a, 0x23, 0x33, 0x34, 0x60, 0xce, 0xf6, 0x07, 0xc0, 0xc0, 0x7a,
    0xf5, 0x8b, 0xf9, 0x4b, 0xd7, 0x45, 0xb5, 0xf5, 0x65, 0xb9, 0xfd, 0xd6, 0x91, 0xdb, 0xd9,
    0x5c, 0xdc, 0x94, 0x13, 0x2f, 0xb3, 0x36, 0x33, 0x39, 0x09, 0x71, 0xa4, 0xbc, 0x14, 0x97,
    0x54, 0x59, 0xb1, 0xe9, 0xa1, 0xa6, 0x5a, 0x58, 0x71, 0xa4, 0x5c, 0x6b, 0xd5, 0x81, 0xca,
    0xb9, 0xe3, 0xd4, 0x39, 0x8a, 0x71, 0xa4, 0xcc, 0x38, 0x96, 0x8e, 0x54, 0xe1, 0x2f, 0xe9,
    0xa6, 0x5a, 0x58, 0x71, 0xa4, 0x5c, 0x6b, 0xd5, 0x91, 0xca, 0xd2, 0xb9, 0x23, 0xd5, 0xf9,
    0x71, 0xa4, 0x8e, 0xe2, 0x05, 0xcd, 0x1d, 0x67, 0xcc, 0x19, 0xd3, 0xa3, 0xd4, 0x6a, 0x67,
    0x08, 0x8b, 0x5a, 0xa6, 0x35, 0x04, 0x81, 0xdd, 0xbf, 0xc3, 0x44, 0x74, 0xb7, 0x60, 0x28,
    0x76, 0xc3, 0xd7, 0x6f, 0xdf, 0x6c, 0xbf, 0x2b, 0xed, 0xbe, 0xde, 0xdd, 0xde, 0xdd, 0xdb,
    0xd5, 0x10, 0x23, 0x36, 0x5e, 0x40, 0xf8, 0x4d, 0x43, 0x44, 0xd2, 0xd6, 0x34, 0x64, 0x4d,
    0x0b, 0xb3, 0xcb, 0xc9, 0x8e, 0x08, 0x63, 0xbf, 0x70, 0xfe, 0x64, 0x62, 0xd6, 0xbf, 0x2e,
    0xdc, 0x17, 0x46, 0x1c, 0x82, 0xfd, 0x5e, 0x66, 0xba, 0xfc, 0x46, 0x72, 0x6f, 0xff, 0xef,
    0xab, 0xd3, 0x91, 0x93, 0xd0, 0x32, 0x23, 0x27, 0x32, 0x38, 0xfd, 0xb7, 0x84, 0x02, 0x4e,
    0xca, 0x83, 0xa5, 0x13, 0x12, 0x0b, 0x8d, 0x3f, 0xad, 0xeb, 0x28, 0xdd, 0xf5, 0x8a, 0x14,
    0xe8, 0x5f, 0x91, 0x62, 0x03, 0x4b, 0x16, 0xcf, 0x45, 0xae, 0x2a, 0x0e, 0x8d, 0x04, 0x3b,
    0x78, 0x78, 0x2e, 0x7a, 0xa4, 0x9c, 0x4c, 0x93, 0xab, 0x5a, 0xf7, 0xaf, 0x18, 0x1f, 0x76,
    0x60, 0x6c, 0x8a, 0xf8, 0x36, 0x0e, 0xcd, 0x56, 0x85, 0x58, 0xee, 0xe0, 0x12, 0xb9, 0x9e,
    0x9e, 0x5e, 0xdf, 0x38, 0xc0, 0x17, 0x24, 0x28, 0xb7, 0xbc, 0x88, 0x73, 0xa9, 0x8a, 0xb4,
    0x2b, 0x4e, 0x1e, 0xb5, 0xbf, 0x60, 0x7c, 0x9a, 0xc6, 0x61, 0x1c, 0x21, 0x4a, 0xd8, 0xa5,
    0x8c, 0xc5, 0x70, 0x7a, 0x7c, 0x5a, 0x6d, 0x73, 0x2e, 0x65, 0x55, 0x84, 0x2b, 0x10, 0x50,
    0x0f, 0xde, 0xb4, 0x3f, 0xb4, 0xb2, 0x15, 0xf1, 0xa7, 0x8f, 0x2e, 0x4d, 0x4d, 0xe6, 0x6b,
    0xea, 0xfb, 0x25, 0x85, 0x53, 0x76, 0xc1, 0xb2, 0xe2, 0x9a, 0x3e, 0xa1, 0x17, 0x4e, 0x90,
    0xa7, 0xb9, 0x75, 0xd8, 0xf1, 0x95, 0x2d, 0x9c, 0x61, 0x71, 0xb5, 0x80, 0x34, 0x7f, 0xc2,
    0xc2, 0xe4, 0xb2, 0xfc, 0xcc, 0x3c, 0x2b, 0xd9, 0xdc, 0xc7, 0xc6, 0xa9, 0xe1, 0xf4, 0xc0,
    0xb7, 0x1b, 0x5a, 0xd2, 0x67, 0xfc, 0x2c, 0x92, 0x69, 0x66, 0xb0, 0x2c, 0x9a, 0xc9, 0x26,
    0x0e, 0xe6, 0x17, 0xb3, 0xa9, 0xd6, 0xa3, 0x74, 0x5d, 0xc8, 0xbc, 0xbf, 0x39, 0x39, 0xaf,
    0x94, 0x94, 0x31, 0x99, 0xf7, 0xea, 0xa1, 0x8d, 0x4d, 0x6b, 0x7d, 0x6a, 0x63, 0xce, 0x6a,
    0xc2, 0xc5, 0x66, 0xfd, 0xda, 0x3c, 0x9c, 0xad, 0x4f, 0x5c, 0x30, 0x0b, 0xd7, 0x36, 0x13,
    0x28, 0xed, 0x0a, 0xb0, 0xe1, 0x57, 0x0a, 0xe8, 0x5a, 0xb0, 0xe1, 0x05, 0xe3, 0xf4, 0xfa,
    0x57, 0x5b, 0xd0, 0x1d, 0xf1, 0x0e, 0xa5, 0xed, 0xa5, 0x72, 0xa9, 0x1e, 0xb2, 0x7d, 0x16,
    0x23, 0x57, 0x30, 0x49, 0x36, 0xda, 0x6a, 0xd6, 0xc0, 0xbe, 0x77, 0x2d, 0x68, 0x6a, 0xd3,
    0x84, 0x53, 0x9c, 0xd0, 0xd3, 0xe6, 0x45, 0x5d, 0x28, 0x31, 0xe8, 0xc6, 0x41, 0x28, 0x8c,
    0xab, 0x64, 0x2e, 0x4d, 0xfc, 0x8b, 0xf2, 0x4f, 0xcc, 0x57, 0x8a, 0x0e, 0x2c, 0xf6, 0x68,
    0xac, 0xd9, 0xf2, 0xd9, 0x4b, 0x69, 0xdd, 0x4e, 0xc2, 0x91, 0x85, 0xae, 0xf6, 0x26, 0x49,
    0xeb, 0x61, 0xe8, 0xc1, 0xea, 0x81, 0xa9, 0x01, 0x4b, 0x74, 0x14, 0x61, 0xfe, 0x57, 0x5b,
    0xab, 0x1b, 0xee, 0xed, 0x2d, 0x3a, 0x47, 0xef, 0x5d, 0x7f, 0x6e, 0x4d, 0x71, 0xfb, 0x06,
    0x38, 0x68, 0x9b, 0xb2, 0x8d, 0x53, 0x11, 0x3b, 0xc2, 0x1e, 0x3c, 0xe9, 0x9c, 0x7e, 0xb9,
    0x75, 0x5d, 0xeb, 0xc1, 0x0e, 0x78, 0xd0, 0x01, 0xfb, 0x43, 0x31, 0xfd, 0x30, 0xb6, 0xdb,
    0x23, 0x94, 0x13, 0x14, 0x5b, 0x0f, 0x13, 0x7b, 0xac, 0x64, 0x87, 0x45, 0x07, 0x2d, 0x83,
    0xcd, 0x7b, 0x01, 0xea, 0x40, 0xa2, 0x2e, 0x76, 0xb3, 0x85, 0x63, 0xe2, 0x0e, 0xf3, 0x7c,
    0x3c, 0x0d, 0x3c, 0xa9, 0xe2, 0x9b, 0x89, 0xd8, 0xf5, 0xd9, 0x42, 0x23, 0xfc, 0xe0, 0xbd,
    0xf0, 0xbb, 0xbe, 0x99, 0xf9, 0x56, 0x7e, 0x6f, 0x15, 0x0b, 0x25, 0x85, 0x7e, 0xb2, 0xb9,
    0xf3, 0x7d, 0xc0, 0x39, 0x5f, 0x3e, 0x2c, 0x1e, 0x08, 0xfb, 0x98, 0x57, 0x4c, 0xc5, 0x7c,
    0x96, 0xd3, 0x41, 0xda, 0x6e, 0x22, 0xc8, 0x13, 0xb3, 0x78, 0x05, 0x68, 0xa5, 0x63, 0x7b,
    0xe7, 0xd8, 0x9b, 0xd1, 0x71, 0x27, 0x40, 0x9d, 0x4c, 0xc4, 0x82, 0xb4, 0x26, 0x72, 0x9f,
    0x02, 0x9e, 0x18, 0xe0, 0x3c, 0x8f, 0x71, 0x2b, 0xca, 0x81, 0x99, 0x8c, 0x3c, 0x07, 0x09,
    0xf6, 0xb2, 0xab, 0x2e, 0x87, 0x3c, 0x47, 0x7c, 0x26, 0x3f, 0xb1, 0x9a, 0x68, 0x3e, 0x9a,
    0xd0, 0xbf, 0x61, 0xb3, 0x23, 0x64, 0x26, 0xad, 0x6e, 0x91, 0x39, 0x38, 0xe2, 0x7d, 0x2e,
    0x08, 0x46, 0x2a, 0xe6, 0x30, 0x6f, 0x79, 0x44, 0xae, 0x30, 0xc5, 0x67, 0x80, 0x1e, 0x98,
    0x66, 0x4d, 0x50, 0xc3, 0x92, 0x6a, 0x42, 0x94, 0x5e, 0xdb, 0x58, 0xf1, 0x27, 0x92, 0x3e,
    0x29, 0x09, 0x94, 0x49, 0x06, 0x1f, 0xa1, 0x5b, 0x30, 0xf9, 0xb2, 0xea, 0x50, 0x98, 0xf2,
    0xef, 0x80, 0x3e, 0x26, 0xb0, 0x71, 0xff, 0xc0, 0x88, 0xee, 0xdc, 0x39, 0xf6, 0x21, 0xb8,
    0x3c, 0x45, 0xb2, 0x91, 0xfc, 0xe1, 0xc1, 0xd7, 0x5f, 0xa0, 0xe4, 0xaf, 0xdf, 0x33, 0xcc,
    0xc6, 0xf2, 0xb7, 0x57, 0x72, 0xbe, 0xc8, 0x15, 0x61, 0xda, 0xb5, 0xc9, 0x90, 0x42, 0x1b,
    0x0a, 0x18, 0xc8, 0x3d, 0x53, 0x21, 0xfd, 0x12, 0x29, 0x98, 0x71, 0x9c, 0x6c, 0x18, 0xe1,
    0x22, 0x89, 0xba, 0x2d, 0x76, 0x87, 0x22, 0x3d, 0xc3, 0x34, 0x7f, 0xc5, 0x3d, 0xbb, 0xf4,
    0x6b, 0xb4, 0x01, 0x55, 0x8a, 0x9b, 0x58, 0xb1, 0x44, 0xff, 0xdf, 0x56, 0x11, 0x95, 0x48,
    0x4c, 0xf5, 0xfc, 0x39, 0xbc, 0xe5, 0xdf, 0xc5, 0x24, 0x72, 0x84, 0x02, 0x34, 0xb6, 0xfa,
    0x47, 0xb6, 0x2d, 0x95, 0x2c, 0x12, 0x20, 0xe2, 0xdd, 0x2f, 0x1d, 0x0a, 0xc0, 0x59, 0x49,
    0xad, 0xf9, 0xaf, 0xfe, 0x03, 0x60, 0xc5, 0xb8, 0x41, 0x9f, 0x12, 0x03, 0x86, 0x55, 0xff,
    0x9e, 0x0d, 0x19, 0xb8, 0xcd, 0x1b, 0x76, 0x86, 0xb7, 0x92, 0x56, 0x16, 0xed, 0x03, 0x66,
    0xe7, 0xa2, 0x19, 0x15, 0x0a, 0x2e, 0x21, 0x1b, 0x7f, 0xa5, 0x5d, 0x65, 0x50, 0x89, 0xbf,
    0xb2, 0x5f, 0xb6, 0xf9, 0xcb, 0xb6, 0x61, 0x11, 0x2c, 0xdc, 0xa7, 0x5c, 0xf0, 0x55, 0x0e,
    0xe1, 0x7e, 0xa8, 0x79, 0x84, 0x2b, 0x53, 0xcb, 0x5f, 0x33, 0xe4, 0x25, 0x3b, 0xb8, 0x8b,
    0xf3, 0x96, 0xca, 0x82, 0x8d, 0x62, 0x6d, 0x8f, 0x65, 0x41, 0x39, 0x39, 0x4a, 0xc6, 0x21,
    0x33, 0xa4, 0xb4, 0x4f, 0x83, 0x38, 0x8d, 0x87, 0x87, 0x82, 0x13, 0x25, 0xea, 0x7a, 0x9a,
    0xf1, 0xff, 0x17, 0xf4, 0xbb, 0x25, 0x22, 0x27, 0xf0, 0xd7, 0x07, 0x05, 0x02, 0x51, 0xc5,
    0x73, 0xdd, 0x0d, 0x1c, 0x0d, 0xa2, 0xe5, 0x6d, 0xca, 0xca, 0xfb, 0xb2, 0x14, 0x6d, 0xfe,
    0xba, 0x9d, 0x9e, 0x5f, 0x4a, 0xdd, 0x1e, 0x5a, 0xdc, 0x9a, 0xba, 0x5f, 0x64, 0xda, 0xe4,
    0x91, 0xd8, 0xf8, 0xc5, 0x42, 0x07, 0xce, 0xb9, 0xd1, 0xc0, 0xd8, 0xd8, 0xb0, 0x1f, 0x6c,
    0xca, 0x38, 0x0e, 0x45, 0xc0, 0x05, 0x14, 0x2d, 0x16, 0x80, 0x2a, 0x7f, 0xca, 0x4e, 0x83,
    0x06, 0x71, 0xa0, 0x0e, 0xb5, 0xa8, 0x97, 0x31, 0xb7, 0xd6, 0x0a, 0x43, 0x20, 0x72, 0x8d,
    0x31, 0x5c, 0x4a, 0x87, 0x23, 0xa0, 0x3f, 0x03, 0x7c, 0x9f, 0x68, 0xe3, 0xd4, 0xdd, 0x02,
    0x34, 0xf4, 0xef, 0x01, 0xae, 0x12, 0xc8, 0x19, 0x2a, 0xbb, 0xa8, 0x35, 0xea, 0x70, 0x79,
    0x05, 0xad, 0x11, 0x45, 0x90, 0x9d, 0xce, 0x70, 0xdf, 0x1c, 0x90, 0x16, 0x59, 0x6b, 0x5a,
    0x6b, 0x9a, 0xa0, 0x52, 0x91, 0x5b, 0xca, 0x35, 0xdf, 0x52, 0x60, 0xe5, 0x74, 0x49, 0xfb,
    0x42, 0x2e, 0x72, 0xcf, 0xa8, 0x85, 0xac, 0x71, 0xe3, 0x6b, 0xa2, 0x2b, 0xf1, 0xdd, 0x0b,
    0x6f, 0x02, 0x02, 0xda, 0x9f, 0x6f, 0x0a, 0x0b, 0x81, 0xf6, 0x9e, 0xa0, 0x42, 0x20, 0x9b,
    0x28, 0xf0, 0x06, 0x14, 0x96, 0x7b, 0xa6, 0x0a, 0x51, 0x75, 0x8b, 0xfb, 0x81, 0xff, 0x6c,
    0xcd, 0xe1, 0x50, 0x13, 0xde, 0x9b, 0x86, 0x3e, 0x22, 0x0f, 0x4a, 0xe2, 0x32, 0x16, 0xad,
    0xb6, 0x46, 0xae, 0x4d, 0x4a, 0x91, 0xcd, 0x38, 0xc1, 0xb0, 0x4c, 0xa8, 0x0f, 0x36, 0x16,
    0x28, 0x06, 0x21, 0xca, 0x03, 0x61, 0x40, 0xdc, 0xdb, 0x9e, 0x4f, 0x56, 0x84, 0x37, 0x1a,
    0x8e, 0x07, 0xcc, 0x6d, 0xd3, 0xea, 0xcd, 0x40, 0x15, 0x0d, 0xfc, 0xb9, 0x6c, 0xcd, 0xc6,
    0x34, 0x34, 0x4c, 0xd6, 0xe2, 0x42, 0xd1, 0x9a, 0xd5, 0x9f, 0xf7, 0x7d, 0x77, 0x2b, 0x17,
    0x1c, 0x1c, 0x23, 0xe6, 0xcf, 0x84, 0x69, 0x64, 0xa6, 0xf2, 0xf3, 0x46, 0x78, 0xb7, 0x69,
    0x85, 0x2f, 0xad, 0xfd, 0x7f, 0xa6, 0xd5, 0x28, 0x77, 0x5a, 0x93, 0x9d, 0x6e, 0x6c, 0x18,
    0xc4, 0x74, 0x2e, 0x57, 0xcc, 0x16, 0x22, 0x55, 0x36, 0xa8, 0x3b, 0x07, 0x54, 0x83, 0xf5,
    0x36, 0xad, 0x99, 0x45, 0x92, 0x01, 0xf7, 0x5d, 0x96, 0x45, 0x9b, 0x03, 0x75, 0x0c, 0x6f,
    0xa2, 0x37, 0x84, 0xfd, 0x2c, 0x36, 0x4d, 0xc0, 0x7a, 0xc3, 0xd0, 0x83, 0x57, 0x0f, 0x13,
    0x21, 0xe2, 0x4d, 0x4e, 0x5d, 0x8a, 0x4c, 0x87, 0xb1, 0x1d, 0x8f, 0xdc, 0xd6, 0xe3, 0xb0,
    0xd3, 0xd6, 0x1f, 0x35, 0x85, 0x13, 0x9b, 0xd3, 0x12, 0x7e, 0xc7, 0xcf, 0x6a, 0x73, 0xf2,
    0x2b, 0x59, 0xe5, 0x95, 0xe8, 0xe0, 0x55, 0xba, 0x03, 0x6a, 0x42, 0xb8, 0x3b, 0x2e, 0x70,
    0x54, 0x6d, 0x46, 0x07, 0x24, 0xde, 0xad, 0x7d, 0x00, 0xad, 0x08, 0xb7, 0x22, 0x86, 0x80,
    0x0b, 0x43, 0x4b, 0xac, 0x8d, 0x91, 0x7d, 0x47, 0x1b, 0xb7, 0x40, 0xac, 0xa8, 0x77, 0xbb,
    0x36, 0x46, 0x52, 0x32, 0x2d, 0x7f, 0x05, 0x72, 0x5d, 0x8f, 0xd4, 0x96, 0x00, 0x71, 0xf7,
    0x5f, 0x59, 0x5d, 0x1d, 0xb8, 0xd3, 0x03, 0x24, 0xec, 0x35, 0x7b, 0x0d, 0x17, 0x0c, 0xb9,
    0x22, 0xd0, 0x93, 0x88, 0xde, 0xe5, 0xd6, 0xae, 0xef, 0x06, 0x03, 0xe8, 0x15, 0xbe, 0xff,
    0x2a, 0xbe, 0xdc, 0x4a, 0x89, 0x64, 0xd5, 0xd0, 0xa3, 0x99, 0x01, 0xaa, 0x72, 0x27, 0xb5,
    0xb8, 0x6b, 0xf2, 0x38, 0xc6, 0xbd, 0x3a, 0xab, 0xc8, 0x8a, 0xd3, 0x1e, 0x3d, 0xd9, 0xce,
    0xaf, 0xde, 0xc2, 0x96, 0x22, 0x53, 0x4b, 0x8f, 0x19, 0x65, 0x44, 0x6f, 0xe3, 0xd1, 0xc0,
    0x65, 0x23, 0x44, 0xac, 0xab, 0x30, 0x5e, 0x33, 0x6c, 0x5a, 0xcb, 0xfa, 0xd7, 0xc0, 0xb4,
    0x81, 0x99, 0x94, 0x34, 0xdd, 0x38, 0x74, 0xc0, 0xec, 0xe8, 0x30, 0xd1, 0xb4, 0x86, 0x0b,
    0x48, 0x0c, 0xa4, 0x9e, 0x71, 0x91, 0x41, 0x2f, 0x13, 0xcf, 0xbd, 0x77, 0x0d, 0xed, 0xe5,
    0x5b, 0x69, 0xd1, 0xd4, 0x52, 0x03, 0xa8, 0xff, 0x42, 0x59, 0x11, 0xb9, 0xed, 0xa4, 0x97,
    0x6a, 0xbf, 0x21, 0x26, 0x78, 0xe4, 0xc4, 0x1c, 0x8d, 0x20, 0x15, 0xb0, 0x64, 0x47, 0x23,
    0x17, 0x8d, 0xa9, 0xa7, 0x75, 0x2a, 0x11, 0x37, 0xb6, 0x9e, 0xa6, 0x0c, 0xbd, 0x01, 0x33,
    0x73, 0x16, 0x68, 0x06, 0x97, 0x3c, 0x33, 0x17, 0x2b, 0xb4, 0x18, 0x2e, 0x6b, 0x4a, 0x22,
    0x62, 0xd9, 0xf8, 0xb2, 0xcd, 0xe9, 0xcd, 0xd8, 0xce, 0x41, 0xbe, 0xb7, 0x5f, 0x2d, 0x4a,
    0xf2, 0x20, 0x07, 0x5e, 0x3b, 0x0d, 0x63, 0xc2, 0xd0, 0x8d, 0x61, 0x99, 0xd9, 0x97, 0x92,
    0xe7, 0xc5, 0x79, 0xaa, 0x7a, 0x5c, 0x04, 0x1a, 0x21, 0x06, 0xdd, 0x8f, 0x78, 0xa5, 0xf5,
    0xc0, 0x22, 0xa5, 0x09, 0xb7, 0xed, 0x50, 0x30, 0xb2, 0xc7, 0x85, 0x4b, 0xe3, 0x7e, 0xc8,
    0xc6, 0xe7, 0x4d, 0xcb, 0x73, 0x1e, 0x49, 0x00, 0xa6, 0x74, 0x14, 0x6e, 0x19, 0x3f, 0xbe,
    0xc2, 0x6f, 0x43, 0x28, 0x08, 0x11, 0x15, 0x97, 0x0f, 0x40, 0xa4, 0xce, 0xac, 0x0f, 0x52,
    0xee, 0xf7, 0x37, 0x2d, 0x17, 0x95, 0x37, 0xf8, 0x0a, 0x0f, 0xd6, 0x4f, 0xf8, 0xb4, 0x69,
    0x4c, 0x0a, 0xdf, 0xd8, 0x9e, 0x20, 0xaf, 0x58, 0x30, 0x04, 0xf6, 0x8c, 0xd8, 0x74, 0x1a,
    0x81, 0x5d, 0x11, 0xb5, 0xe4, 0x3f, 0x41, 0xcf, 0x8a, 0x47, 0xdc, 0x15, 0x7e, 0xfd, 0x8f,
    0xad, 0x7c, 0xb0, 0x7e, 0xfa, 0xc9, 0x4b, 0xdb, 0x0e, 0xd0, 0xd0, 0xd6, 0x78, 0x16, 0x0d,
    0xcc, 0xc3, 0x7c, 0x69, 0xdc, 0x57, 0x91, 0xae, 0x70, 0xf4, 0x7e, 0xa2, 0x49, 0x45, 0x3a,
    0x8a, 0x54, 0xf8, 0x67, 0xf2, 0x56, 0x63, 0xf9, 0x18, 0x2f, 0x8f, 0x80, 0x62, 0xc2, 0xc9,
    0x60, 0xc4, 0x43, 0x7c, 0x68, 0x2b, 0x6c, 0x36, 0x6a, 0x1a, 0xc7, 0x9f, 0xef, 0x33, 0x5a,
    0xcc, 0xc2, 0x59, 0x94, 0x1a, 0x71, 0x93, 0x07, 0xbc, 0xba, 0x63, 0x2c, 0xad, 0x54, 0x0b,
    0x05, 0x8e, 0xfb, 0xb8, 0x8a, 0xa2, 0x5e, 0x20, 0x2d, 0x14, 0x0b, 0xab, 0x8d, 0xa6, 0xe1,
    0x69, 0x2d, 0xa9, 0x9d, 0x5d, 0x57, 0xf9, 0x01, 0xd1, 0x39, 0x5f, 0x62, 0xb3, 0x5d, 0x8b,
    0xe6, 0x3e, 0x71, 0xb3, 0xd6, 0xc4, 0x06, 0x8a, 0x9a, 0x64, 0x19, 0xa2, 0x0f, 0xda, 0xc8,
    0x1f, 0xc2, 0x89, 0xef, 0xac, 0x67, 0x81, 0x4c, 0x47, 0x73, 0x6b, 0xcf, 0x12, 0x20, 0x2d,
    0x9c, 0xdb, 0x8e, 0xec, 0x39, 0x39, 0xbc, 0x37, 0x6e, 0x81, 0xcb, 0x05, 0x8e, 0x3f, 0x37,
    0xfa, 0x25, 0x1c, 0x6e, 0x5a, 0x7f, 0xff, 0x5d, 0x96, 0xd8, 0x12, 0xd0, 0x7d, 0xfb, 0x92,
    0x23, 0x15, 0x6b, 0xae, 0x3e, 0xea, 0x11, 0x70, 0x36, 0xc6, 0xd2, 0x47, 0xd6, 0x8c, 0xf6,
    0x40, 0x23, 0x17, 0x1b, 0x21, 0x76, 0xe2, 0x3e, 0x96, 0xde, 0xe3, 0x08, 0xd4, 0x4a, 0x10,
    0x48, 0x92, 0xec, 0x61, 0x66, 0xd3, 0x00, 0x5b, 0xf2, 0xe4, 0x31, 0x95, 0x64, 0xd3, 0x41,
    0x29, 0xa7, 0x63, 0xe2, 0xb3, 0xea, 0xea, 0x40, 0x7e, 0xcb, 0x30, 0xda, 0x81, 0x12, 0x49,
    0xff, 0xad, 0xce, 0x11, 0xce, 0x64, 0xcb, 0x1b, 0xb9, 0x51, 0xb1, 0x50, 0xc8, 0x65, 0xec,
    0xcd, 0x2d, 0x31, 0xf1, 0x3f, 0x62, 0x6c, 0xab, 0xda, 0x8c, 0x17, 0x35, 0x41, 0x73, 0x8c,
    0x44, 0x88, 0x96, 0x36, 0x66, 0xed, 0xef, 0x13, 0x50, 0x59, 0xfc, 0x67, 0x4f, 0x01, 0xa4,
    0xe4, 0xec, 0x38, 0x68, 0x87, 0x0a, 0xb8, 0xf7, 0x01, 0x1d, 0x55, 0xa8, 0x8a, 0x49, 0x5f,
    0x7f, 0x42, 0x54, 0xf1, 0xde, 0x62, 0x2b, 0x67, 0xbd, 0x66, 0xd9, 0x23, 0xb9, 0xcb, 0x04,
    0xbb, 0xa4, 0x9d, 0x17, 0xeb, 0x86, 0x0d, 0x94, 0x6c, 0x6f, 0x09, 0x3a, 0xbe, 0xb3, 0xdb,
    0x66, 0x52, 0xdb, 0x39, 0x38, 0x17, 0xb2, 0xca, 0x9b, 0xef, 0xda, 0xd2, 0x49, 0x1d, 0xbe,
    0xf0, 0x55, 0x22, 0x3a, 0x7b, 0xb2, 0x83, 0xe1, 0xef, 0x51, 0x14, 0xa7, 0xfc, 0xba, 0x70,
    0x19, 0x96, 0x9e, 0x75, 0x86, 0x81, 0x0e, 0x2e, 0x18, 0xbb, 0x73, 0xdc, 0x35, 0xc4, 0x68,
    0x89, 0x17, 0xdc, 0xbd, 0x30, 0x2c, 0x49, 0xd3, 0xd1, 0x92, 0xcc, 0xbb, 0x18, 0x5a, 0xed,
    0xca, 0xc2, 0xbd, 0x97, 0x35, 0x9b, 0xfd, 0xeb, 0x6b, 0xbc, 0x89, 0x68, 0x5b, 0xe7, 0xf3,
    0x86, 0x6d, 0x72, 0x65, 0x8b, 0x97, 0xd8, 0x07, 0xcd, 0xc2, 0xe6, 0x40, 0x74, 0x28, 0x23,
    0x76, 0x29, 0xcc, 0xd3, 0x30, 0x62, 0x7a, 0xbf, 0x25, 0xda, 0x5f, 0x61, 0xef, 0x44, 0x44,
    0x49, 0x40, 0x84, 0x1f, 0x4b, 0x03, 0x64, 0x2b, 0x03, 0x88, 0x28, 0x55, 0xc7, 0x68, 0x18,
    0xe4, 0xe1, 0xde, 0xd6, 0x86, 0xc3, 0xef, 0x0c, 0x20, 0x89, 0x2f, 0x5b, 0x81, 0x52, 0x3c,
    0xb2, 0x83, 0x7e, 0xdf, 0x1d, 0x4f, 0x23, 0x0e, 0x52, 0x43, 0x08, 0x30, 0x02, 0x17, 0x83,
    0x75, 0xb8, 0x30, 0x04, 0x77, 0x22, 0x06, 0x91, 0x29, 0xaa, 0x60, 0x52, 0x87, 0x5c, 0xc0,
    0x0a, 0xa9, 0xc4, 0x72, 0x80, 0xd3, 0x96, 0x1c, 0xf7, 0xb3, 0xf2, 0xa6, 0x68, 0x28, 0x9c,
    0xc5, 0xf7, 0xa0, 0xbf, 0xcb, 0xbf, 0xe9, 0xf0, 0x98, 0xda, 0x4e, 0x6a, 0x79, 0xc9, 0x82,
    0xef, 0x39, 0xfa, 0x77, 0xe1, 0x02, 0x4b, 0x9f, 0x88, 0xd2, 0x9e, 0x25, 0x59, 0x2e, 0x3a,
    0x95, 0x65, 0xea, 0x20, 0x26, 0xb2, 0x7a, 0x7e, 0xef, 0x2b, 0x34, 0x0e, 0xff, 0x57, 0x11,
    0x75, 0x16, 0x4d, 0xd1, 0x48, 0xca, 0x57, 0xe7, 0x7b, 0x5f, 0xc9, 0x38, 0x42, 0x2b, 0x8a,
    0xd3, 0xb2, 0x8a, 0x7a, 0xe0, 0x50, 0x13, 0x39, 0xe6, 0x85, 0x68, 0xa0, 0x8b, 0x45, 0xe3,
    0xca, 0xa9, 0xad, 0x34, 0x53, 0x8f, 0x4a, 0x85, 0xb4, 0x19, 0xc1, 0x6f, 0xa1, 0x5f, 0xb1,
    0x80, 0x99, 0x99, 0xb8, 0x06, 0x6e, 0xbd, 0xec, 0xff, 0xfd, 0x77, 0xf8, 0x9a, 0x1a, 0xc2,
    0xab, 0x3f, 0xf4, 0x7c, 0x47, 0x7c, 0xbb, 0x0d, 0xc3, 0x6f, 0xb8, 0x31, 0x18, 0xed, 0xff,
    0xf7, 0xdf, 0xd5, 0x9d, 0x41, 0x6c, 0x76, 0xeb, 0x6b, 0xe8, 0x05, 0x1b, 0xeb, 0x9b, 0xeb,
    0xbf, 0xfd, 0x6a, 0x60, 0x2d, 0x8b, 0xcf, 0xbc, 0x2d, 0xf8, 0xfa, 0x21, 0x89, 0x33, 0x4f,
    0xa8, 0xcb, 0xf0, 0x1c, 0xa0, 0xda, 0xab, 0xc7, 0x47, 0x98, 0x22, 0xe9, 0x13, 0xe1, 0x3a,
    0x46, 0xe4, 0xba, 0xc0, 0xc9, 0x07, 0xb4, 0x2b, 0x1d, 0xbd, 0x64, 0xc7, 0x9f, 0x28, 0x6c,
    0x5a, 0x5b, 0x5b, 0x5b, 0x54, 0x25, 0xbc, 0xb3, 0xe7, 0xfa, 0x12, 0x82, 0x32, 0xd5, 0x30,
    0x40, 0xef, 0x0d, 0x5d, 0xa0, 0x60, 0x40, 0x5e, 0xfc, 0x2d, 0xb5, 0x7c, 0xca, 0xf6, 0x64,
    0xf3, 0xb8, 0xb8, 0x69, 0x7d, 0x1e, 0x97, 0xb2, 0xd5, 0x72, 0xf8, 0x41, 0xc4, 0xfd, 0x3d,
    0x36, 0x82, 0x28, 0x1e, 0x41, 0x6f, 0xd1, 0x20, 0x44, 0xa3, 0x9f, 0x41, 0xeb, 0xff, 0x6c,
    0x1a, 0x29, 0xe3, 0x9a, 0xe0, 0xa6, 0xa2, 0xf0, 0xef, 0x29, 0xbf, 0xb8, 0x16, 0x4c, 0x92,
    0xeb, 0x98, 0x7d, 0x19, 0x6f, 0xc1, 0x19, 0x8f, 0x4e, 0x72, 0x37, 0xa8, 0xdd, 0xa5, 0xd7,
    0xc0, 0x33, 0x52, 0x7b, 0xd8, 0x9b, 0xda, 0x5e, 0x20, 0x68, 0xf9, 0xe5, 0x16, 0x3b, 0x89,
    0xba, 0xeb, 0x27, 0x2a, 0x90, 0x04, 0xd9, 0xaa, 0x1f, 0xb3, 0x20, 0xe7, 0x1d, 0xdf, 0x34,
    0x97, 0x80, 0xcb, 0x53, 0xa0, 0x02, 0x54, 0x7c, 0xe2, 0x60, 0x9d, 0xcc, 0x52, 0x76, 0xc2,
    0xf2, 0x55, 0x77, 0xbf, 0xb6, 0xf2, 0xea, 0xe9, 0x01, 0x40, 0x86, 0xcd, 0xce, 0xe4, 0x14,
    0xf8, 0x2b, 0x36, 0xcf, 0xf5, 0x73, 0xab, 0x99, 0x65, 0xf1, 0x33, 0x9a, 0xb6, 0x23, 0x30,
    0xdd, 0x5b, 0xef, 0x11, 0x04, 0x88, 0xf8, 0x83, 0xb4, 0x68, 0xf2, 0xce, 0x83, 0xea, 0x8c,
    0x9c, 0xc8, 0x23, 0x25, 0x22, 0xa8, 0x80, 0x11, 0xcf, 0x4e, 0x9c, 0x2f, 0x7f, 0xb3, 0x39,
    0xf0, 0x8b, 0x4e, 0x5b, 0x2a, 0x2f, 0x05, 0x0a, 0xe4, 0x96, 0x0d, 0x31, 0x27, 0xd4, 0xe1,
    0xe8, 0x39, 0x87, 0xf8, 0x05, 0x98, 0x7c, 0xa0, 0x83, 0x84, 0x35, 0xff, 0xe9, 0x0a, 0xc5,
    0x9c, 0x4e, 0xa1, 0xa0, 0x42, 0xe1, 0xd5, 0x8f, 0x41, 0xdc, 0x60, 0xd7, 0x3d, 0x7e, 0xff,
    0x9d, 0x7c, 0x41, 0x77, 0x00, 0x5e, 0xad, 0xe1, 0x58, 0xb8, 0x39, 0x20, 0xe1, 0x44, 0x07,
    0x6e, 0x0e, 0x4b, 0x7f, 0x68, 0xdc, 0x2d, 0xb9, 0x63, 0x22, 0xfe, 0x25, 0xbb, 0x8c, 0x44,
    0xe2, 0xf4, 0x0d, 0xee, 0x6e, 0x24, 0x20, 0xa4, 0x77, 0x04, 0xd8, 0x1b, 0x40, 0x20, 0xd3,
    0xe4, 0x06, 0x0d, 0x94, 0xfc, 0x0b, 0x7c, 0x54, 0xd0, 0xb2, 0x69, 0xa5, 0xeb, 0xfc, 0x6a,
    0x2c, 0xd3, 0x47, 0x93, 0xf5, 0x17, 0x69, 0x4a, 0x90, 0x67, 0x9b, 0xb3, 0x02, 0x8f, 0xf7,
    0x32, 0x33, 0x34, 0x92, 0xed, 0x8e, 0x44, 0x7b, 0xc9, 0x0c, 0xc9, 0x91, 0x01, 0x78, 0xd9,
    0x12, 0x76, 0x47, 0xfc, 0x92, 0x8c, 0x00, 0x6c, 0xec, 0xe9, 0xaf, 0x52, 0x6e, 0x45, 0x66,
    0x25, 0xf6, 0x7b, 0xb2, 0x28, 0xc3, 0xca, 0x06, 0xc2, 0xcf, 0x9e, 0xd8, 0x4e, 0xbd, 0x89,
    0x1d, 0xc4, 0x61, 0xef, 0xec, 0xb0, 0x17, 0xf8, 0x08, 0x8d, 0x41, 0xdb, 0xca, 0x7e, 0x5b,
    0xe0, 0xdd, 0x1d, 0xb8, 0x36, 0xc4, 0x21, 0x33, 0x06, 0x3f, 0x45, 0x3e, 0xe4, 0xd3, 0x6f,
    0xec, 0x1a, 0x06, 0xec, 0x31, 0xa9, 0x82, 0x08, 0xc3, 0x4b, 0x73, 0x80, 0x88, 0xc0, 0x76,
    0xf3, 0x03, 0x1e, 0x74, 0xe6, 0xcc, 0x6d, 0xf2, 0x2f, 0xe9, 0x51, 0x86, 0x26, 0x4c, 0x62,
    0x1b, 0xd8, 0xfc, 0xfb, 0xef, 0x58, 0xe0, 0x5b, 0xa2, 0xc0, 0xe3, 0xff, 0x51, 0x3f, 0x59,
    0xba, 0xff, 0xae, 0x51, 0x0e, 0xc8, 0xe8, 0xd8, 0x32, 0x01, 0x8b, 0xca, 0xa1, 0x27, 0x2e,
    0xd0, 0x7a, 0xa3, 0x80, 0x62, 0xea, 0xeb, 0xb3, 0xfc, 0x6e, 0xdc, 0x30, 0x8f, 0xbf, 0x0a,
    0x9a, 0x98, 0xb7, 0x8d, 0x75, 0x11, 0xd4, 0x6a, 0x0e, 0x29, 0x56, 0xc7, 0x12, 0xb7, 0x60,
    0x4f, 0x76, 0x38, 0x51, 0xfe, 0x70, 0x22, 0x75, 0x38, 0x80, 0xa4, 0x0c, 0x99, 0xa8, 0xe0,
    0x77, 0x83, 0x3b, 0x35, 0xbe, 0x64, 0x40, 0xfc, 0x15, 0x3b, 0x30, 0xb2, 0x80, 0x48, 0xa7,
    0x3b, 0x1f, 0x44, 0xf9, 0x2d, 0x10, 0xd0, 0xb8, 0x7b, 0x44, 0x33, 0xbc, 0x1e, 0xd7, 0xa6,
    0x07, 0x1b, 0xf9, 0xd0, 0x08, 0xe8, 0x07, 0xf4, 0xe3, 0x90, 0xf8, 0x34, 0xf0, 0xe8, 0x57,
    0x7b, 0x1c, 0xe9, 0x4d, 0x94, 0x0f, 0x1a, 0x78, 0x86, 0xb5, 0xb4, 0xfd, 0xc6, 0x50, 0x1f,
    0x24, 0x71, 0xfd, 0x3e, 0x90, 0x8f, 0x7f, 0x68, 0xcb, 0x73, 0x7c, 0xb2, 0x81, 0xa7, 0x30,
    0xe1, 0x8f, 0xdb, 0xf7, 0x34, 0x40, 0x61, 0x2d, 0x0b, 0x37, 0xd2, 0xe6, 0x0f, 0xa0, 0x90,
    0x92, 0x01, 0x5f, 0x7d, 0x34, 0xe5, 0x67, 0x3e, 0x84, 0xfb, 0xc1, 0xa2, 0x00, 0x4f, 0xd0,
    0x22, 0xba, 0xb8, 0x83, 0xd4, 0x17, 0x62, 0xd1, 0xc0, 0xe6, 0x22, 0xb4, 0x1c, 0x1d, 0x8a,
    0xe4, 0x65, 0x69, 0x93, 0x23, 0xc6, 0x9a, 0xda, 0x13, 0x24, 0x26, 0xdf, 0x0e, 0x06, 0x33,
    0xe0, 0x46, 0x71, 0x0f, 0xd4, 0xfc, 0x05, 0x29, 0xe2, 0x14, 0x8b, 0xa2, 0xba, 0xa8, 0x40,
    0xd2, 0xd9, 0x40, 0xee, 0x86, 0xd8, 0x73, 0x7c, 0x01, 0x8e, 0xc0, 0x32, 0x3a, 0x12, 0x7e,
    0x4e, 0x9b, 0xb8, 0xc1, 0xd6, 0x83, 0x77, 0xe7, 0x8d, 0x71, 0x7b, 0x75, 0x2b, 0x9c, 0x0c,
    0xe3, 0xd3, 0xeb, 0x33, 0x2f, 0x9a, 0x62, 0xe4, 0x11, 0x06, 0xb5, 0x7e, 0x06, 0x45, 0xf6,
    0xef, 0x8e, 0x90, 0x4e, 0x8f, 0xcc, 0x9d, 0x12, 0x59, 0xa6, 0x92, 0x21, 0x94, 0x87, 0x21,
    0xac, 0x8e, 0xe7, 0x51, 0xe1, 0xa2, 0xe2, 0xfa, 0x0e, 0xc3, 0xea, 0xd4, 0x99, 0x2d, 0x74,
    0xac, 0x90, 0xb0, 0x61, 0x97, 0x95, 0x02, 0x55, 0xfe, 0x6e, 0x59, 0x99, 0xf9, 0xd4, 0xb4,
    0xac, 0x16, 0xc1, 0x60, 0xf5, 0xa5, 0x45, 0xa6, 0xfd, 0xe1, 0xb2, 0x32, 0x43, 0xdb, 0xe4,
    0xd1, 0x8a, 0x20, 0xe2, 0x97, 0x95, 0x41, 0xf4, 0x2f, 0x2f, 0x33, 0xf5, 0x02, 0x63, 0xd0,
    0xa6, 0x8a, 0x31, 0xaf, 0x59, 0x56, 0x4a, 0x90, 0xdc, 0x92, 0x42, 0x4b, 0x0a, 0xb8, 0xfe,
    0x24, 0xba, 0xe9, 0x93, 0xca, 0x86, 0x22, 0x1c, 0x0d, 0xb4, 0xa4, 0x14, 0xd9, 0xd1, 0xcb,
    0x78, 0x81, 0xd1, 0xa4, 0xcf, 0x94, 0x31, 0x7a, 0xf3, 0xb4, 0x52, 0x7e, 0x68, 0x2f, 0xc3,
    0xad, 0xd1, 0x39, 0xa7, 0xd9, 0x4b, 0xe1, 0x74, 0x19, 0x0a, 0xbd, 0xdb, 0x65, 0x05, 0xe2,
    0x9d, 0x96, 0x17, 0x0c, 0x97, 0xae, 0x31, 0xc9, 0xf2, 0xc3, 0xa5, 0xdd, 0x06, 0xcb, 0x9b,
    0x86, 0xed, 0x92, 0x72, 0x7e, 0x18, 0x0c, 0x96, 0x14, 0xe1, 0xe0, 0xf6, 0x65, 0x85, 0xdc,
    0x65, 0x25, 0x66, 0xfe, 0xb2, 0xd9, 0x17, 0x17, 0x5f, 0x2e, 0x2b, 0xc5, 0xf7, 0x21, 0x2d,
    0x25, 0x2e, 0x9c, 0x5b, 0x56, 0x8e, 0x6e, 0xae, 0x5a, 0x52, 0x88, 0xdf, 0x2c, 0x29, 0x44,
    0x16, 0xcb, 0xca, 0x90, 0xa4, 0x58, 0x5a, 0x08, 0xaf, 0x7e, 0xbc, 0x1d, 0x2f, 0x2b, 0x36,
    0xbb, 0xcb, 0x68, 0x9c, 0x8f, 0x1b, 0x2d, 0x2b, 0x34, 0x0f, 0xfa, 0x60, 0xdc, 0xe1, 0x65,
    0xcb, 0xb0, 0x85, 0x12, 0x67, 0x69, 0x11, 0xb0, 0x13, 0x57, 0x29, 0xb3, 0xb4, 0xa1, 0x89,
    0x44, 0x9e, 0xbb, 0x94, 0xd4, 0xf1, 0xaa, 0xcb, 0xa5, 0x45, 0x96, 0xb1, 0x14, 0xbc, 0xad,
    0x69, 0x11, 0x1f, 0x26, 0x6f, 0x21, 0x5f, 0x56, 0xfc, 0xf2, 0x86, 0xeb, 0xa1, 0x32, 0xef,
    0x7d, 0x2f, 0xc3, 0x4d, 0x53, 0xdc, 0x85, 0x1d, 0x2c, 0x83, 0xca, 0x5e, 0x86, 0xc6, 0x95,
    0xbb, 0x9d, 0x13, 0xa9, 0xa2, 0x95, 0xc1, 0x6d, 0xdf, 0x3f, 0x41, 0xfe, 0xaf, 0x28, 0x72,
    0x14, 0xa7, 0x4b, 0x4b, 0x2c, 0x63, 0x3a, 0xae, 0xbf, 0x94, 0xcb, 0xaf, 0x22, 0x49, 0x1f,
    0xa9, 0xfe, 0xe7, 0x48, 0xb7, 0xa5, 0x92, 0x0b, 0xf7, 0x11, 0x96, 0x09, 0x37, 0x3f, 0xec,
    0x95, 0xb6, 0xab, 0x88, 0xb7, 0x55, 0xa4, 0xd6, 0xb2, 0x02, 0xcb, 0x66, 0xdb, 0xb7, 0x47,
    0xc7, 0x5e, 0x26, 0x3f, 0xc2, 0xc0, 0x0f, 0xfb, 0x4b, 0xc7, 0x04, 0x16, 0xc0, 0x92, 0x12,
    0xd1, 0x3b, 0x5e, 0x4e, 0x9f, 0x13, 0xdb, 0x1c, 0x77, 0xf9, 0xdd, 0x42, 0x63, 0x39, 0x67,
    0xfd, 0x7e, 0x59, 0x19, 0x6f, 0xba, 0x8c, 0xc9, 0xcf, 0x3d, 0xd7, 0x5f, 0xc4, 0x4b, 0x94,
    0x72, 0xe3, 0xbd, 0x77, 0x86, 0xb7, 0x78, 0x7a, 0xcf, 0x5a, 0x8b, 0x5c, 0xff, 0x96, 0x02,
    0x41, 0xdc, 0x0e, 0x03, 0x36, 0x83, 0xd8, 0x8d, 0x6c, 0x09, 0xf3, 0x06, 0x8d, 0x2e, 0xae,
    0x65, 0xd5, 0xf0, 0xe6, 0x1b, 0x3a, 0x92, 0x87, 0xb1, 0x85, 0x81, 0xb8, 0x35, 0x51, 0xf8,
    0xe4, 0x71, 0xbd, 0x35, 0x32, 0xe9, 0xa4, 0x36, 0xb4, 0x96, 0xec, 0xb9, 0xd3, 0x89, 0x3d,
    0x2b, 0x23, 0x7f, 0x36, 0xe0, 0x83, 0x5d, 0x1e, 0xf9, 0xcb, 0xc2, 0xd9, 0x04, 0x6c, 0x47,
    0x82, 0xad, 0x23, 0xef, 0x80, 0x96, 0x37, 0xb1, 0x35, 0x44, 0x4c, 0x38, 0x9b, 0x5a, 0xa3,
    0x7f, 0x88, 0xd4, 0x6c, 0xe3, 0x1e, 0x16, 0xfb, 0xd3, 0x1c, 0xf7, 0xde, 0xf5, 0xd1, 0x2c,
    0xab, 0x67, 0x70, 0x03, 0x13, 0x6c, 0xed, 0x57, 0xe4, 0xe3, 0xf6, 0xa6, 0xa0, 0xcf, 0xb8,
    0xb5, 0x3c, 0xb4, 0xc7, 0x63, 0x37, 0x78, 0x41, 0x41, 0xff, 0xc9, 0x35, 0x81, 0x5a, 0x8c,
    0xf2, 0x5a, 0xa2, 0x97, 0xd9, 0x7a, 0x7c, 0x4b, 0x23, 0x5d, 0x2c, 0x98, 0x20, 0x5e, 0x35,
    0x22, 0xa5, 0x96, 0xfc, 0xe1, 0xfb, 0x21, 0xf8, 0x32, 0xc2, 0x88, 0x3a, 0x93, 0x5f, 0x12,
    0x04, 0xfb, 0x83, 0x8c, 0xd5, 0x65, 0xf4, 0x0a, 0x7c, 0x8a, 0xaf, 0x2c, 0xd8, 0xc8, 0x39,
    0x9b, 0x80, 0xbe, 0xa5, 0x43, 0xbb, 0xaf, 0x43, 0xff, 0x21, 0x6f, 0x58, 0x1f, 0x1f, 0xc0,
    0xce, 0x19, 0x1b, 0x7a, 0x1d, 0x32, 0x07, 0xd3, 0xe2, 0xc3, 0x0b, 0x11, 0xb9, 0x66, 0xe1,
    0xf7, 0x41, 0xc6, 0x1d, 0xee, 0x1b, 0xa0, 0xa0, 0x13, 0x07, 0x0b, 0x6e, 0x72, 0xa4, 0x97,
    0x79, 0x02, 0xad, 0xac, 0x7a, 0x7c, 0xc0, 0x78, 0x5b, 0x24, 0x0f, 0xe3, 0x3e, 0xef, 0x64,
    0xb8, 0xf4, 0x2c, 0xbb, 0x9c, 0x72, 0xae, 0x9e, 0x34, 0xbd, 0x4e, 0x42, 0x50, 0x30, 0xe0,
    0xdc, 0xac, 0xa6, 0x1c, 0x20, 0xe3, 0x30, 0xdd, 0xc8, 0xf3, 0x2c, 0xbe, 0x57, 0x8e, 0x5d,
    0xe8, 0x5d, 0xa1, 0x03, 0xac, 0x78, 0x72, 0x35, 0x12, 0x57, 0x60, 0x5a, 0x3e, 0xdf, 0x81,
    0x85, 0x9b, 0x18, 0xae, 0xc8, 0xe4, 0x71, 0x68, 0xfb, 0xd6, 0xb6, 0x83, 0x1e, 0x13, 0xe2,
    0x16, 0x46, 0x2f, 0xd1, 0xf5, 0xd8, 0xb7, 0xe8, 0x64, 0xd8, 0x90, 0x8f, 0x5b, 0x53, 0xdc,
    0xb3, 0xa5, 0xe2, 0x18, 0xce, 0x22, 0x7f, 0x9e, 0xf8, 0xb6, 0xe5, 0xae, 0xf1, 0x1a, 0x45,
    0x6c, 0xc6, 0x8d, 0xbc, 0x30, 0x9d, 0x16, 0xb8, 0x8d, 0x1a, 0xe2, 0xfa, 0x37, 0xc3, 0xe9,
    0xe9, 0x2b, 0xe5, 0x88, 0x33, 0x79, 0x4f, 0xdc, 0x06, 0xde, 0xf4, 0xc7, 0x5b, 0x7f, 0x9f,
    0x3b, 0xde, 0x04, 0xb9, 0xc7, 0x26, 0x06, 0x53, 0x27, 0xc0, 0xad, 0xbf, 0xcc, 0xc6, 0xa3,
    0x63, 0x99, 0x15, 0x91, 0xf1, 0x4a, 0x62, 0x1c, 0x16, 0x22, 0x3c, 0x12, 0x61, 0xcf, 0x09,
    0x2b, 0x8c, 0xd0, 0x6a, 0x5e, 0xd7, 0x0f, 0x53, 0xe3, 0x4c, 0x1a, 0x68, 0xe6, 0x84, 0x03,
    0x04, 0x45, 0xa4, 0xad, 0x92, 0xf8, 0x4e, 0x3c, 0xaa, 0xb2, 0xd2, 0x78, 0xf5, 0xfa, 0xc9,
    0xbf, 0x31, 0x4c, 0x5f, 0x72, 0x86, 0xab, 0xc6, 0x29, 0xf4, 0x67, 0x93, 0x09, 0x6d, 0x7a,
    0x0a, 0x05, 0x5d, 0x17, 0xcf, 0x58, 0x03, 0xb8, 0x14, 0xb5, 0x40, 0x6c, 0x39, 0x8c, 0xd6,
    0xca, 0x98, 0xfc, 0x32, 0xdb, 0x96, 0x50, 0xf1, 0x53, 0x52, 0x2f, 0x33, 0x4c, 0xad, 0xd9,
    0x70, 0x70, 0x53, 0x96, 0xfa, 0xd8, 0xfa, 0x0a, 0xe8, 0x15, 0x17, 0x33, 0x8a, 0xfe, 0x70,
    0xe0, 0xe9, 0xbd, 0x19, 0x34, 0x02, 0x94, 0x3e, 0xb4, 0x4b, 0x3b, 0x6f, 0xe9, 0x4c, 0xaa,
    0x6d, 0xc7, 0x30, 0x3f, 0x6f, 0xed, 0x92, 0x63, 0x97, 0x0a, 0x7b, 0x6f, 0xb6, 0xf7, 0xb6,
    0xee, 0xde, 0xbb, 0xed, 0x37, 0xb7, 0xfd, 0x62, 0xa9, 0x7f, 0xeb, 0xee, 0xf4, 0x7a, 0x6f,
    0x7b, 0x3d, 0x67, 0xcf, 0x76, 0xdf, 0x6c, 0xbf, 0x79, 0xb7, 0x67, 0x6f, 0x17, 0x76, 0x4b,
    0xf7, 0xde, 0x96, 0x7a, 0x3b, 0xbb, 0x6f, 0x6f, 0xdf, 0xb8, 0xdb, 0x7b, 0x7b, 0xdb, 0xee,
    0x41, 0x9f, 0x49, 0x06, 0xa7, 0x49, 0x1d, 0x1b, 0xa8, 0x75, 0x68, 0x47, 0x78, 0x21, 0x25,
    0xda, 0xea, 0xd3, 0x15, 0xc2, 0x78, 0xfd, 0xf2, 0xc6, 0x3a, 0xc3, 0xaa, 0x7a, 0x98, 0xb1,
    0xd6, 0x6c, 0x8c, 0xb7, 0xb8, 0xc0, 0xe7, 0x10, 0xc4, 0x1f, 0xfc, 0x69, 0xb3, 0xc0, 0x89,
    0xeb, 0x59, 0xea, 0xa5, 0x0a, 0x8e, 0x37, 0xc0, 0xcd, 0xca, 0xf5, 0xa1, 0xfb, 0xb8, 0x6e,
    0xb3, 0x30, 0xdf, 0x81, 0x6b, 0x78, 0x1b, 0x33, 0x1a, 0xe6, 0x3d, 0x28, 0x12, 0x6d, 0x0e,
    0xa0, 0xc9, 0x56, 0xae, 0x72, 0xc4, 0x33, 0x60, 0xe4, 0x41, 0xa5, 0x18, 0x38, 0xda, 0xac,
    0x88, 0x7c, 0xbb, 0xc7, 0xf7, 0x3d, 0xfe, 0xad, 0x58, 0x7a, 0xa7, 0x30, 0x18, 0xf5, 0x66,
    0x46, 0x4e, 0x6e, 0xa0, 0x60, 0x4a, 0x28, 0x40, 0xd7, 0xb8, 0x5f, 0x1b, 0xc7, 0x49, 0x0d,
    0x87, 0xdc, 0x0d, 0x81, 0x19, 0xfa, 0x35, 0xc0, 0xca, 0x53, 0x3c, 0xb8, 0xa6, 0xeb, 0xa6,
    0xdd, 0x56, 0xa1, 0x5d, 0x72, 0xe1, 0xb0, 0x90, 0xe4, 0x8b, 0x5c, 0xaf, 0xb7, 0xe4, 0x40,
    0x5f, 0x0c, 0xa1, 0x37, 0xc7, 0xa9, 0x19, 0xb6, 0xe8, 0x46, 0x0e, 0x2d, 0x86, 0xd2, 0x0f,
    0x85, 0x9b, 0xcf, 0x65, 0xc9, 0xc6, 0x35, 0x23, 0xdd, 0xbe, 0x77, 0xb1, 0xb8, 0x79, 0x53,
    0x21, 0xc9, 0x09, 0xbc, 0x5e, 0x7a, 0xb3, 0xf2, 0xe2, 0x02, 0x7c, 0xe0, 0x71, 0x85, 0xcb,
    0x35, 0xa5, 0x68, 0x85, 0xf2, 0xba, 0xb6, 0x84, 0xbb, 0x11, 0xbf, 0x2b, 0x03, 0x5e, 0xa1,
    0xb1, 0x83, 0x51, 0x45, 0x4c, 0x81, 0xec, 0xff, 0xbe, 0xfb, 0xa6, 0x57, 0x29, 0xad, 0x6a,
    0xab, 0xb5, 0xae, 0xaa, 0x11, 0x79, 0x37, 0x64, 0x67, 0x29, 0x0b, 0xac, 0x54, 0x0c, 0xb3,
    0xce, 0xab, 0xfc, 0x00, 0x2d, 0xcb, 0x3f, 0x75, 0xd3, 0x0b, 0x5b, 0xec, 0xb2, 0x92, 0x2b,
    0xcb, 0xa5, 0x28, 0xd9, 0x82, 0x88, 0xd2, 0x5b, 0x3f, 0x09, 0x1f, 0x9c, 0xf9, 0xfa, 0x4b,
    0x83, 0x7f, 0xb0, 0xb5, 0x4d, 0xab, 0xb8, 0xbd, 0xbd, 0x6b, 0xe0, 0x4d, 0xf9, 0xd7, 0x85,
    0x7c, 0x89, 0x63, 0x70, 0x32, 0x77, 0x90, 0xff, 0xae, 0xc6, 0x81, 0x18, 0x6e, 0x28, 0xcf,
    0x33, 0x36, 0x15, 0x9f, 0x73, 0x35, 0x75, 0x80, 0xd0, 0x83, 0xc1, 0x29, 0x3f, 0xe5, 0x6f,
    0xbe, 0xd1, 0xd6, 0x34, 0xca, 0x40, 0xd4, 0x69, 0x71, 0x0d, 0xd5, 0x16, 0x78, 0x60, 0xad,
    0x4c, 0xa9, 0x8e, 0x72, 0xe0, 0xeb, 0x5b, 0xde, 0x00, 0xd3, 0x83, 0x93, 0x03, 0x3b, 0x0c,
    0x10, 0x37, 0x53, 0x77, 0xc1, 0xc0, 0xa4, 0x43, 0x49, 0x1f, 0x51, 0xde, 0xae, 0xaf, 0xd0,
    0xe4, 0xae, 0xaf, 0xae, 0x3d, 0xd0, 0x2d, 0x51, 0xa2, 0x9d, 0x85, 0x27, 0x6a, 0x44, 0x2b,
    0x2c, 0x91, 0x17, 0xca, 0xd0, 0x0c, 0x93, 0xc1, 0x5a, 0x48, 0xbc, 0x36, 0x38, 0x4c, 0xf6,
    0x7f, 0xfb, 0x8a, 0x36, 0xe8, 0xb4, 0x51, 0xeb, 0x1a, 0x05, 0x37, 0xb0, 0x70, 0x0a, 0x96,
    0xe0, 0x4e, 0x45, 0x49, 0x09, 0x06, 0x4e, 0xd7, 0xa2, 0xe1, 0xea, 0x22, 0x2d, 0x8d, 0xa0,
    0x42, 0xa8, 0xbd, 0x92, 0x1f, 0xe2, 0x33, 0x7f, 0x8b, 0xc5, 0x5c, 0xde, 0xd5, 0xfd, 0xc6,
    0x31, 0x3d, 0xac, 0x94, 0x1f, 0x60, 0x05, 0x09, 0x37, 0x52, 0xeb, 0x23, 0x7b, 0x93, 0x57,
    0xc5, 0xbb, 0xe6, 0x26, 0x98, 0x57, 0x4d, 0x4f, 0xb0, 0x52, 0xb9, 0xe4, 0xb4, 0x82, 0x29,
    0xc2, 0x0a, 0x63, 0x18, 0xeb, 0x59, 0x56, 0x70, 0xab, 0x34, 0xf5, 0x4a, 0xdb, 0x34, 0x15,
    0xf2, 0x97, 0xfc, 0xba, 0x56, 0x22, 0xbf, 0xee, 0xe2, 0x4b, 0xac, 0x52, 0xdd, 0x18, 0x5a,
    0xed, 0x32, 0xac, 0x54, 0x61, 0xcd, 0x89, 0x3a, 0xb4, 0x83, 0x81, 0xfb, 0xc9, 0xd4, 0x1a,
    0x7f, 0xc7, 0xa8, 0x48, 0x64, 0x91, 0x25, 0x8b, 0x66, 0xa7, 0x39, 0x2f, 0x4b, 0x85, 0xf1,
    0x12, 0x1f, 0x40, 0xb3, 0x49, 0xa6, 0x6c, 0xb2, 0x7b, 0x96, 0xec, 0x57, 0xc9, 0x58, 0x05,
    0xd1, 0xb4, 0x65, 0x92, 0x0c, 0xf4, 0x29, 0x71, 0xf8, 0x21, 0xa5, 0x86, 0xa2, 0x70, 0x32,
    0x56, 0x9d, 0x79, 0x45, 0xb5, 0xfb, 0xfe, 0xdc, 0x1b, 0x59, 0x3a, 0xd2, 0x83, 0x52, 0x37,
    0x54, 0xd4, 0x6b, 0x06, 0x73, 0x7a, 0x79, 0x6b, 0xdf, 0x32, 0x05, 0xe6, 0x6a, 0xa5, 0xf5,
    0xdb, 0x05, 0x51, 0xb5, 0x22, 0x8a, 0x83, 0x2d, 0x8a, 0xef, 0x01, 0x4c, 0x65, 0x75, 0xdf,
    0x92, 0xa5, 0xfd, 0x2c, 0x58, 0xf7, 0xdf, 0x91, 0xf2, 0xe4, 0xbb, 0xeb, 0xc4, 0x84, 0x44,
    0x7d, 0xe9, 0xdd, 0x9b, 0xf7, 0x96, 0x13, 0xf2, 0x65, 0xda, 0x32, 0x25, 0x0b, 0xc6, 0xfe,
    0xd7, 0xc4, 0x7d, 0x5f, 0x32, 0xda, 0x3b, 0xbe, 0x5d, 0x47, 0xa1, 0x93, 0x45, 0x99, 0x5c,
    0x8b, 0xc2, 0xcf, 0xf6, 0x59, 0x5c, 0x78, 0xef, 0x40, 0x99, 0x4d, 0xeb, 0x73, 0x98, 0xdc,
    0xa3, 0x3c, 0xe5, 0xe1, 0x3f, 0x67, 0xe5, 0xe4, 0x66, 0x90, 0x59, 0xf0, 0x35, 0x3d, 0x78,
    0x3d, 0xe5, 0x21, 0x7a, 0xd5, 0x77, 0xee, 0xfe, 0x56, 0xdc, 0xd9, 0x7d, 0x4f, 0x9b, 0xac,
    0x90, 0xca, 0x94, 0xd3, 0xd8, 0x20, 0x26, 0xd6, 0x66, 0x32, 0x93, 0xcd, 0x9a, 0x76, 0x02,
    0x61, 0xce, 0x9b, 0xec, 0xaa, 0xf8, 0x4c, 0x91, 0x67, 0xc5, 0xcd, 0x18, 0xad, 0x99, 0x75,
    0x5c, 0x07, 0x2f, 0x77, 0x50, 0x73, 0xe7, 0x68, 0xd1, 0x29, 0xf8, 0x83, 0x61, 0x5b, 0xf1,
    0xe0, 0x45, 0x75, 0x31, 0x7c, 0x59, 0x8f, 0x61, 0xea, 0x22, 0xc8, 0x0a, 0x5d, 0x15, 0x8e,
    0x26, 0x02, 0x24, 0x81, 0xf9, 0xaa, 0x00, 0x18, 0xcf, 0xb2, 0x88, 0xa2, 0x54, 0x86, 0x9d,
    0xf0, 0x52, 0x75, 0x85, 0x18, 0x58, 0xf3, 0x95, 0x95, 0xc9, 0x65, 0x9c, 0x2b, 0xc3, 0xf9,
    0xce, 0x18, 0x39, 0x71, 0xd6, 0x39, 0xd7, 0xd9, 0xb2, 0x6a, 0xc9, 0x3d, 0xe7, 0x71, 0x3b,
    0xd2, 0xc2, 0x7c, 0xab, 0x1e, 0x83, 0x92, 0x7f, 0x6d, 0xa2, 0x0e, 0x79, 0x8d, 0x2e, 0x30,
    0x08, 0x58, 0x8c, 0xe2, 0x95, 0x7c, 0xb3, 0x69, 0x7a, 0x1c, 0xf4, 0x92, 0x22, 0x41, 0xe5,
    0x27, 0xb3, 0xf4, 0xd7, 0x8c, 0xce, 0x0b, 0xd8, 0x9f, 0x9f, 0xe9, 0x6f, 0x6d, 0xc1, 0xc0,
    0xf6, 0x9c, 0xfb, 0x6f, 0xc5, 0x91, 0x58, 0x0a, 0xc9, 0xdd, 0xb7, 0x78, 0x44, 0xf4, 0x84,
    0xa4, 0x35, 0x9c, 0xb8, 0x6e, 0x45, 0x88, 0x15, 0xe0, 0x20, 0x71, 0x77, 0x07, 0x51, 0x93,
    0x25, 0xb9, 0xc7, 0x47, 0xc5, 0x0b, 0x47, 0xd7, 0x8a, 0xdb, 0x0b, 0x10, 0x11, 0xdb, 0x4b,
    0x90, 0x90, 0xe1, 0xda, 0xf7, 0xf7, 0xbe, 0xc6, 0xae, 0x9e, 0x7b, 0x74, 0xdd, 0x42, 0x95,
    0xf8, 0xf7, 0x7b, 0x71, 0x11, 0xc3, 0xfe, 0x4b, 0xf1, 0xd7, 0xef, 0x9c, 0xc0, 0x8a, 0x9c,
    0xef, 0x87, 0x1e, 0x3b, 0xe3, 0xf5, 0x15, 0x77, 0xf7, 0x3d, 0x80, 0x8b, 0xfd, 0x74, 0x72,
    0xc7, 0xc9, 0xef, 0x12, 0xb6, 0x93, 0x09, 0xef, 0xcc, 0xe5, 0x2b, 0x7f, 0x64, 0xc0, 0x38,
    0xf1, 0x8d, 0x01, 0x6b, 0x86, 0x56, 0xd7, 0xd2, 0x43, 0xdb, 0x24, 0x42, 0xf5, 0x30, 0x5b,
    0x8e, 0x32, 0x0f, 0x9a, 0x25, 0xd7, 0x5f, 0x2e, 0x4d, 0x2f, 0xb6, 0xb8, 0x40, 0xa2, 0x06,
    0x94, 0xd6, 0x8c, 0x51, 0x91, 0xc8, 0x29, 0x47, 0x16, 0x8b, 0x99, 0x2e, 0x05, 0x3f, 0xc3,
    0x82, 0x81, 0x29, 0x5e, 0xfc, 0xcb, 0xdf, 0x7f, 0x97, 0x05, 0xbf, 0xd1, 0xf0, 0x69, 0xdc,
    0x56, 0x39, 0x72, 0x63, 0x38, 0x71, 0xb3, 0x72, 0xd2, 0xb5, 0xd5, 0x0a, 0xc6, 0xe2, 0x0e,
    0xc9, 0x31, 0x18, 0xb6, 0x01, 0xdd, 0x5c, 0x82, 0xbe, 0xe8, 0xd3, 0x66, 0xad, 0x66, 0xdd,
    0x60, 0xf4, 0xf8, 0xd6, 0x3f, 0xac, 0x09, 0x5f, 0xbe, 0x06, 0x9c, 0x01, 0xe7, 0x95, 0xf5,
    0x09, 0xdf, 0x08, 0x64, 0x3d, 0x0c, 0x5d, 0xba, 0x59, 0x74, 0x16, 0xbc, 0x72, 0x45, 0x82,
    0x78, 0x6b, 0x91, 0xbd, 0xc7, 0x22, 0xdb, 0x85, 0x72, 0xf8, 0x00, 0xb7, 0x0d, 0xb1, 0x5b,
    0x72, 0x5c, 0xf8, 0x3a, 0x91, 0x69, 0x29, 0x58, 0x6b, 0x25, 0xb5, 0x42, 0x69, 0x4b, 0x68,
    0x9b, 0x22, 0x6b, 0x85, 0x9b, 0x34, 0xef, 0x05, 0x43, 0x20, 0x72, 0x50, 0x6f, 0xf9, 0xe4,
    0x52, 0x4b, 0x5c, 0x15, 0x6a, 0xd1, 0xe8, 0x62, 0x7f, 0x35, 0x5d, 0x4f, 0xaa, 0x80, 0xa6,
    0xdd, 0x4f, 0x34, 0x67, 0x69, 0xe2, 0x7f, 0xc9, 0xe4, 0xcc, 0xfb, 0xb2, 0x99, 0xc0, 0x0c,
    0xff, 0x4b, 0x4d, 0xe8, 0x55, 0xfe, 0x3c, 0x4e, 0x9a, 0xe7, 0x3a, 0x5f, 0xe2, 0x9e, 0xf1,
    0x8f, 0x0c, 0x58, 0x1d, 0xc0, 0xa8, 0x67, 0x3d, 0xbe, 0x17, 0xfd, 0x81, 0x5d, 0xa6, 0xaf,
    0x28, 0x9a, 0xb9, 0xd1, 0xeb, 0xed, 0x52, 0x41, 0xf3, 0x9c, 0x12, 0xb8, 0x4b, 0x93, 0xf1,
    0xae, 0x38, 0x45, 0x0c, 0x45, 0xf3, 0xac, 0x72, 0x63, 0xbb, 0xa6, 0xc3, 0x29, 0xab, 0xc2,
    0xbf, 0x2a, 0xc4, 0x71, 0xbe, 0x99, 0x4c, 0x26, 0xc2, 0xac, 0x26, 0x14, 0xcd, 0xfa, 0x7d,
    0x8a, 0x32, 0xfa, 0x8f, 0x78, 0x8f, 0x7b, 0xb7, 0xfc, 0x57, 0x16, 0x6e, 0x53, 0xa2, 0xc3,
    0xbb, 0x38, 0x38, 0xc8, 0x04, 0x73, 0x4c, 0x00, 0xab, 0x40, 0xaa, 0x82, 0xc8, 0x41, 0x63,
    0x32, 0xa5, 0xe0, 0x53, 0x2e, 0xb2, 0x10, 0x6f, 0x79, 0x10, 0x4b, 0x49, 0xee, 0x80, 0x25,
    0x24, 0x86, 0xac, 0xdf, 0x7b, 0x36, 0x2d, 0xbd, 0xcf, 0x07, 0xc7, 0x95, 0x7a, 0x4b, 0x21,
    0x24, 0x9f, 0xa3, 0x61, 0x47, 0x31, 0xd9, 0x61, 0x62, 0x35, 0x4a, 0x9c, 0x54, 0x48, 0x1a,
    0x95, 0x7d, 0xef, 0x4d, 0xc2, 0x80, 0x14, 0xb7, 0x7b, 0xe4, 0x04, 0xbd, 0xf4, 0xf6, 0x92,
    0x0c, 0xe0, 0xab, 0xec, 0xcb, 0x44, 0x40, 0xc0, 0xda, 0x11, 0xe9, 0x5b, 0xd0, 0xe2, 0x56,
    0x41, 0x76, 0x0e, 0xd4, 0x04, 0x94, 0xf1, 0xdf, 0x14, 0xd1, 0xd0, 0x0a, 0x65, 0x66, 0x1b,
    0xef, 0x64, 0x8b, 0x3c, 0x96, 0x84, 0xf9, 0xbe, 0xf0, 0xf5, 0x8e, 0xf0, 0x4e, 0xb4, 0xb8,
    0xde, 0x0b, 0x8c, 0x37, 0x29, 0xf1, 0xda, 0xe3, 0x92, 0x11, 0xd8, 0x4a, 0x11, 0xb6, 0xb8,
    0xa3, 0x9d, 0xda, 0x1e, 0xdd, 0xd7, 0xca, 0x17, 0x94, 0x51, 0x6d, 0x0a, 0x23, 0x97, 0x17,
    0xbc, 0x94, 0x7e, 0xb1, 0x74, 0xd2, 0x4c, 0xd5, 0x10, 0xb9, 0x08, 0xb2, 0xdb, 0xa4, 0x21,
    0xca, 0x0f, 0x07, 0x1b, 0xeb, 0x71, 0x11, 0xd3, 0xde, 0x90, 0x21, 0x17, 0x67, 0xfa, 0x15,
    0xbe, 0x62, 0xe6, 0xb1, 0x53, 0x7b, 0x90, 0x44, 0x64, 0x44, 0x7c, 0xb5, 0x14, 0xed, 0x09,
    0x90, 0x68, 0x40, 0x07, 0x04, 0x89, 0x3a, 0xc1, 0x6b, 0xc4, 0xd6, 0xac, 0xea, 0x65, 0x9d,
    0xa5, 0x6f, 0xf7, 0x5c, 0x10, 0x33, 0x51, 0xc8, 0x3c, 0x4b, 0x50, 0x16, 0x5f, 0x95, 0x26,
    0x56, 0xfe, 0x81, 0x6e, 0x99, 0x92, 0xac, 0xba, 0x3f, 0x0c, 0x43, 0xb1, 0x99, 0xed, 0xe9,
    0x0e, 0xcd, 0x3f, 0x8a, 0xfd, 0xef, 0x84, 0x20, 0x67, 0x11, 0x2a, 0x9d, 0x55, 0xc0, 0xab,
    0x26, 0x07, 0x3b, 0x10, 0x3a, 0xeb, 0xd3, 0xf7, 0xbe, 0x4d, 0x59, 0xb4, 0xe5, 0x15, 0x6e,
    0xca, 0x81, 0x09, 0xd5, 0x99, 0xf8, 0xc0, 0xa7, 0xb1, 0xe3, 0x38, 0xc6, 0x63, 0x36, 0x7e,
    0xb7, 0xa3, 0xa9, 0xc6, 0x7e, 0xf1, 0x6a, 0x69, 0x7c, 0xc4, 0x04, 0xec, 0xd0, 0x02, 0x81,
    0x83, 0x92, 0x17, 0xcc, 0xf5, 0x41, 0x7d, 0x00, 0xd1, 0x95, 0x0c, 0x0a, 0xf9, 0xc1, 0x10,
    0x2e, 0x46, 0xf9, 0xbd, 0xe4, 0x23, 0x6e, 0xe3, 0x89, 0x8b, 0x31, 0x2e, 0x78, 0x23, 0xb4,
    0x73, 0x73, 0x45, 0x4e, 0xfb, 0x66, 0x47, 0x2e, 0x7c, 0x25, 0xa7, 0xea, 0xe2, 0xdd, 0x34,
    0x0c, 0x8f, 0x96, 0x8f, 0x55, 0x79, 0x92, 0x5c, 0x25, 0x95, 0xc9, 0x55, 0xb2, 0x93, 0x6c,
    0x7d, 0xcf, 0x36, 0xdf, 0xf4, 0x81, 0x1f, 0x0c, 0xfe, 0xea, 0x4c, 0x8a, 0x58, 0xfd, 0x45,
    0xab, 0xe9, 0xbd, 0xa7, 0xea, 0x72, 0x9f, 0xbd, 0xb9, 0xd9, 0x83, 0x0e, 0xef, 0x33, 0x3e,
    0x13, 0xcf, 0x71, 0xbe, 0xbf, 0xf6, 0xf7, 0x0c, 0x53, 0xed, 0x27, 0x4e, 0xf6, 0x2b, 0xe1,
    0xbb, 0xff, 0x96, 0x38, 0xe7, 0x93, 0x5c, 0xba, 0xbf, 0xab, 0xcc, 0x0c, 0x6f, 0x63, 0x3b,
    0x89, 0x86, 0x54, 0x25, 0xa1, 0x74, 0x4f, 0xe3, 0x09, 0x94, 0xae, 0x37, 0x61, 0x4a, 0x54,
    0x82, 0x8e, 0xb7, 0xac, 0xe3, 0x08, 0xfb, 0x59, 0xea, 0x0b, 0x5f, 0xb5, 0x2f, 0x26, 0x91,
    0xb9, 0x25, 0xbd, 0x19, 0xaf, 0x81, 0xfc, 0xab, 0x86, 0x66, 0xc4, 0xe3, 0x2f, 0xd9, 0xde,
    0x5d, 0x79, 0x74, 0xbf, 0xfc, 0x9a, 0xed, 0x72, 0x48, 0xb3, 0xbc, 0x14, 0x9f, 0x0a, 0x31,
    0x5b, 0xe8, 0x4c, 0x75, 0x97, 0x3f, 0x46, 0xad, 0xc3, 0x3f, 0x63, 0x88, 0x40, 0xdf, 0x2b,
    0x2b, 0xd7, 0xc2, 0x1f, 0xea, 0x59, 0xf1, 0x20, 0xea, 0x79, 0xa7, 0xd5, 0x47, 0x3d, 0x38,
    0xdc, 0xc6, 0x13, 0x51, 0x22, 0xeb, 0x84, 0x6b, 0x8b, 0x3b, 0x79, 0x62, 0x45, 0x1e, 0x6d,
    0x89, 0x35, 0x7d, 0x00, 0xd9, 0xe0, 0xdd, 0xd2, 0x26, 0xf7, 0x14, 0xe5, 0x53, 0x24, 0xd4,
    0x92, 0x70, 0x7d, 0xdf, 0x73, 0xe5, 0x71, 0x35, 0x6e, 0x68, 0x8a, 0x82, 0xcc, 0x2a, 0x29,
    0x00, 0x8a, 0x10, 0x7a, 0xe2, 0x04, 0x9e, 0x0e, 0x65, 0x04, 0xc0, 0x73, 0x96, 0x14, 0x10,
    0x33, 0x26, 0x60, 0x83, 0x7c, 0x03, 0xd0, 0x96, 0xd5, 0xc6, 0x04, 0x05, 0xd3, 0x59, 0x40,
    0xf7, 0x26, 0x87, 0x29, 0xf2, 0xa9, 0x67, 0x0c, 0x90, 0x96, 0x57, 0xd1, 0xbb, 0xbf, 0xcd,
    0xdf, 0x9b, 0x0a, 0xd7, 0x36, 0x58, 0xba, 0x0f, 0xa0, 0x40, 0x78, 0x4e, 0xb0, 0x3e, 0x05,
    0xc6, 0x19, 0xf3, 0x30, 0x0e, 0x72, 0x6a, 0x3d, 0x30, 0x0a, 0xa9, 0xae, 0x54, 0xd0, 0x08,
    0x7d, 0xbc, 0x6a, 0x3a, 0x92, 0x47, 0x84, 0x4f, 0x3b, 0xe7, 0x16, 0x00, 0x74, 0x78, 0xd6,
    0xc3, 0xbe, 0x72, 0x92, 0x7d, 0xaf, 0xb0, 0x73, 0x92, 0x3a, 0x31, 0x99, 0x5a, 0xb2, 0x0a,
    0xc4, 0x5a, 0x4c, 0x31, 0x77, 0x9f, 0xc2, 0x74, 0x76, 0xd2, 0x5b, 0xc8, 0x25, 0x8c, 0xd5,
    0xf3, 0x8f, 0x79, 0x39, 0xcc, 0xcd, 0x1f, 0x62, 0xd5, 0x3e, 0x2f, 0x3b, 0x7a, 0xae, 0xde,
    0x05, 0xb5, 0xe5, 0x2f, 0x38, 0x3d, 0x5f, 0xee, 0xdc, 0xf9, 0x17, 0xb4, 0xff, 0x14, 0xdf,
    0x17, 0x30, 0x93, 0xa3, 0x2f, 0x5b, 0xf1, 0x5d, 0xef, 0x34, 0x23, 0x4c, 0x9e, 0xb1, 0x03,
    0x35, 0xb9, 0x65, 0x29, 0x3c, 0x48, 0x4b, 0x03, 0x40, 0x9a, 0x50, 0xcf, 0x45, 0x8f, 0x84,
    0x60, 0x39, 0x6c, 0xac, 0x46, 0x20, 0x4c, 0xf0, 0x9d, 0x38, 0x12, 0x4f, 0xb6, 0x63, 0x2a,
    0xc5, 0x69, 0xd3, 0xa8, 0x1d, 0x3b, 0xa1, 0x1b, 0x7d, 0x74, 0xe7, 0x95, 0x47, 0x0f, 0xaf,
    0x00, 0xc0, 0x36, 0x31, 0x06, 0xd7, 0x80, 0x5b, 0xbc, 0x69, 0xdf, 0x23, 0xdf, 0x78, 0xa4,
    0x88, 0x32, 0xfa, 0xae, 0x4c, 0xc9, 0x68, 0xad, 0xa1, 0x6e, 0x57, 0x92, 0x5e, 0x11, 0x06,
    0xd4, 0x39, 0x15, 0xcb, 0x73, 0xe3, 0x18, 0xf7, 0x48, 0xb1, 0x06, 0xde, 0xdc, 0x42, 0x03,
    0x1a, 0x72, 0x5a, 0x94, 0xde, 0x2b, 0x5e, 0x98, 0xc4, 0xb7, 0xb2, 0x1a, 0xc8, 0xc5, 0xd5,
    0x2e, 0xd6, 0xa2, 0xba, 0xf9, 0x68, 0x92, 0x19, 0x5a, 0x9c, 0x4b, 0x23, 0xa4, 0x3c, 0x8c,
    0xe2, 0xed, 0xdc, 0x5c, 0xf2, 0xdb, 0xcf, 0xa5, 0xcc, 0x0f, 0x9c, 0x66, 0x04, 0x96, 0x0a,
    0x4e, 0x04, 0x87, 0x9b, 0x09, 0x72, 0x8b, 0x4f, 0xba, 0x5a, 0x9c, 0x1b, 0x38, 0xbe, 0x97,
    0xa0, 0x4b, 0x86, 0xe9, 0x16, 0x62, 0xb2, 0x42, 0xf1, 0x8a, 0x32, 0x19, 0xc8, 0x27, 0xe3,
    0xd8, 0xbc, 0x89, 0xcf, 0xb1, 0x4f, 0xbc, 0x71, 0x4d, 0x76, 0xb3, 0x02, 0x77, 0x98, 0x87,
    0xd0, 0x69, 0xcf, 0x33, 0x67, 0x4f, 0xb5, 0x59, 0xe1, 0x99, 0x89, 0x2f, 0x59, 0x0e, 0x92,
    0x90, 0x3b, 0x49, 0x2d, 0xf4, 0xb3, 0xfc, 0xa4, 0xbc, 0x7c, 0xad, 0x77, 0xf9, 0x19, 0xfa,
    0xcf, 0x11, 0xf5, 0x7b, 0xe0, 0x63, 0xd8, 0xcb, 0x60, 0x58, 0xb3, 0x47, 0x2c, 0x58, 0x10,
    0xbc, 0xfb, 0xe7, 0xf4, 0xd1, 0xed, 0xeb, 0xa3, 0x8d, 0x45, 0x8b, 0x02, 0x42, 0xcc, 0x3e,
    0xa1, 0x55, 0xac, 0x6b, 0x66, 0x59, 0x07, 0xa3, 0x7a, 0x38, 0x3d, 0x41, 0x6b, 0x03, 0x00,
    0xbb, 0x91, 0x51, 0x4b, 0x56, 0x1b, 0xdd, 0xd7, 0x3b, 0xc9, 0x01, 0x27, 0x8e, 0xc2, 0x82,
    0x99, 0x5c, 0xbe, 0xea, 0x07, 0x09, 0x91, 0xfa, 0xee, 0x17, 0xed, 0x61, 0xed, 0x9c, 0x88,
    0xc8, 0x19, 0x88, 0x4b, 0x9c, 0x16, 0x59, 0xbc, 0xfa, 0xb0, 0x5a, 0xdd, 0x12, 0xd5, 0x2d,
    0x2b, 0x75, 0x4b, 0x6b, 0x49, 0x18, 0x96, 0x28, 0x9d, 0x8e, 0xb7, 0x92, 0xaf, 0x33, 0x81,
    0x49, 0x79, 0x35, 0x82, 0x2a, 0x76, 0x7a, 0xe8, 0x17, 0xf5, 0xa4, 0xa8, 0xf4, 0xde, 0x8b,
    0xe5, 0xe7, 0x65, 0x01, 0xa7, 0x09, 0x42, 0x25, 0x65, 0x7d, 0x66, 0x4d, 0xe7, 0x0f, 0x55,
    0xa3, 0xed, 0x27, 0xcb, 0xaa, 0x2b, 0x53, 0xbe, 0x64, 0x2c, 0xfb, 0xcb, 0x46, 0xbb, 0x22,
    0x32, 0x56, 0xc9, 0x6a, 0x48, 0xfc, 0x4f, 0x8c, 0x31, 0x06, 0x6d, 0xe9, 0x58, 0x65, 0xc9,
    0x98, 0x65, 0x81, 0xb4, 0x93, 0x71, 0x69, 0xfa, 0x21, 0xba, 0xbd, 0x3b, 0xbe, 0x8f, 0x71,
    0x0a, 0xb5, 0x5a, 0xd0, 0xc9, 0xfe, 0x02, 0x08, 0xb2, 0xf3, 0x22, 0x5d, 0x76, 0xdf, 0x07,
    0x07, 0x34, 0x20, 0x98, 0x74, 0x59, 0x02, 0xb3, 0x6b, 0xf9, 0x1a, 0x66, 0x26, 0xe4, 0x0b,
    0xbd, 0xc1, 0x70, 0xba, 0x08, 0xf8, 0x6c, 0xef, 0xfb, 0x0b, 0x40, 0xd3, 0x22, 0x86, 0x5a,
    0x3a, 0x92, 0xa2, 0xad, 0xa1, 0xfb, 0x87, 0xb0, 0x8d, 0x57, 0x00, 0xaf, 0xdb, 0xe9, 0xbb,
    0x7b, 0xf8, 0xb6, 0x97, 0x7e, 0x4b, 0x3c, 0xbb, 0x9f, 0x7e, 0x4b, 0x1b, 0xc6, 0x26, 0x2e,
    0x2a, 0x94, 0xfb, 0xab, 0x8e, 0x67, 0xf1, 0xf0, 0xff, 0xc8, 0x3c, 0xfe, 0xfb, 0xa3, 0x27,
    0x30, 0xd1, 0xe7, 0x8a, 0x40, 0xe6, 0x0d, 0x3e, 0x77, 0xea, 0x45, 0xda, 0x9b, 0x08, 0x2f,
    0xf6, 0xa2, 0xc3, 0x89, 0xfd, 0x34, 0x47, 0x95, 0xb9, 0x39, 0x8f, 0xa6, 0xee, 0x48, 0x19,
    0x14, 0x3a, 0x08, 0xf8, 0x06, 0x69, 0xdd, 0x90, 0x5b, 0x70, 0x7b, 0x96, 0x76, 0x73, 0xb4,
    0xa4, 0x1e, 0x06, 0x99, 0x89, 0xc8, 0x69, 0xe2, 0x77, 0xcb, 0x7e, 0xcf, 0xed, 0x80, 0x8d,
    0x7f, 0xf5, 0x36, 0xad, 0x3e, 0xff, 0xd5, 0x37, 0xc6, 0x9e, 0x2d, 0x1e, 0xcd, 0xfe, 0x92,
    0xca, 0x8c, 0x74, 0x39, 0x6e, 0x50, 0xd4, 0xab, 0xf0, 0x78, 0x20, 0x6f, 0x69, 0xaf, 0x59,
    0xb6, 0x8c, 0xd4, 0x71, 0x28, 0x32, 0x71, 0x47, 0xe1, 0x54, 0xea, 0xeb, 0xe8, 0x20, 0x15,
    0x99, 0x1a, 0x9d, 0xb0, 0x31, 0x15, 0x9a, 0x90, 0xe3, 0x4d, 0xa4, 0xdd, 0x37, 0x0e, 0x23,
    0x5f, 0x2f, 0x93, 0xc4, 0x71, 0x9f, 0xec, 0x09, 0x5e, 0x2e, 0xe2, 0xcf, 0x6b, 0xc9, 0x2d,
    0x04, 0xac, 0x80, 0x5d, 0x0b, 0x81, 0x5d, 0x5a, 0x78, 0x7f, 0x69, 0x7b, 0x1f, 0xb2, 0xae,
    0x4f, 0xe4, 0xe5, 0xc6, 0x42, 0x17, 0x33, 0x53, 0x12, 0x1f, 0x31, 0x97, 0x93, 0xb4, 0x37,
    0xb9, 0x27, 0x5a, 0x16, 0x91, 0xf9, 0x94, 0xf2, 0xa0, 0x20, 0xa4, 0x6c, 0x26, 0xf9, 0x7f,
    0x2f, 0x37, 0x17, 0x64, 0xaa, 0x54, 0x36, 0x59, 0x71, 0x6f, 0x58, 0xf4, 0x46, 0x69, 0x52,
    0x3e, 0x2e, 0xcf, 0xbd, 0x1b, 0xef, 0x7a, 0x5f, 0x7c, 0x24, 0xec, 0x4f, 0xdc, 0xbe, 0x4b,
    0x6b, 0xfe, 0xfe, 0x3b, 0x37, 0xb5, 0x64, 0x1b, 0x37, 0x17, 0x45, 0xfb, 0xb9, 0xd8, 0x93,
    0x25, 0xb0, 0x8d, 0xa7, 0x29, 0xc4, 0x9c, 0xcf, 0x2d, 0x77, 0x34, 0x9e, 0xce, 0xe5, 0xed,
    0xb8, 0x7f, 0xc8, 0x49, 0xc2, 0xdc, 0x88, 0xf7, 0x9b, 0x2d, 0xe1, 0xc7, 0x40, 0x27, 0x75,
    0x55, 0x4c, 0x46, 0x22, 0x27, 0xad, 0xc3, 0x66, 0x41, 0x19, 0x7e, 0xbf, 0x8a, 0x67, 0xf9,
    0xb1, 0x98, 0x50, 0xd8, 0x45, 0x12, 0xb3, 0x04, 0x3d, 0x2b, 0x74, 0x95, 0x9e, 0xe7, 0x50,
    0x98, 0x15, 0x5b, 0x18, 0x0e, 0xe4, 0xc2, 0x22, 0xee, 0xda, 0xda, 0x66, 0xb6, 0x5e, 0x8d,
    0x04, 0x9e, 0x25, 0x5b, 0xd9, 0x5a, 0x13, 0xb7, 0x78, 0x32, 0x55, 0xa6, 0x4b, 0x4d, 0xd5,
    0xc7, 0x3f, 0x52, 0x6f, 0xb8, 0x74, 0x76, 0xd9, 0xe7, 0x8c, 0x67, 0x3f, 0x67, 0xa0, 0xfa,
    0xcf, 0x8c, 0x12, 0xb0, 0xcf, 0x2d, 0xbc, 0x38, 0x49, 0xee, 0x8d, 0xe2, 0xc5, 0x5a, 0x74,
    0x12, 0x5a, 0xe9, 0x03, 0xdc, 0x90, 0xc7, 0x6c, 0x31, 0xee, 0x1c, 0xb3, 0x69, 0xda, 0x78,
    0xaf, 0x3f, 0xa4, 0x9d, 0x2c, 0x7b, 0x90, 0x6c, 0xe4, 0x8a, 0x84, 0x1a, 0xe2, 0x31, 0x56,
    0xed, 0xa0, 0xc2, 0x1f, 0x58, 0x5e, 0xfc, 0x88, 0x74, 0x95, 0xdd, 0x7f, 0x85, 0x09, 0xdb,
    0x47, 0xf6, 0x53, 0x18, 0xd0, 0xfc, 0xd1, 0xf7, 0xfe, 0x2c, 0x9a, 0x86, 0xa3, 0x83, 0x29,
    0x2b, 0x40, 0xad, 0x2e, 0x02, 0x79, 0x40, 0xb8, 0xe2, 0xda, 0xb4, 0x79, 0x63, 0x0a, 0x7c,
    0x0a, 0xfb, 0x91, 0xc6, 0x25, 0xf4, 0x2f, 0xfb, 0x7a, 0x49, 0x1d, 0x1d, 0x5e, 0x14, 0x9b,
    0x94, 0xc4, 0x15, 0xf5, 0x0f, 0xba, 0x81, 0xae, 0xe7, 0xa1, 0xb7, 0x8a, 0x88, 0x31, 0x72,
    0x2f, 0x38, 0x7b, 0x5f, 0x34, 0x76, 0x67, 0xc7, 0xa1, 0x8a, 0x78, 0x06, 0xf7, 0x71, 0x2a,
    0x62, 0xa6, 0x4e, 0x3a, 0x98, 0x23, 0xc2, 0xd7, 0x24, 0x91, 0x96, 0xb6, 0x0b, 0x6f, 0x54,
    0x95, 0x4c, 0xcc, 0x86, 0xad, 0x99, 0xc5, 0x6f, 0x2a, 0x46, 0xd2, 0x0e, 0x0e, 0xc8, 0xde,
    0x6a, 0xe6, 0xba, 0x97, 0x22, 0xb5, 0xd4, 0x81, 0x4c, 0xd7, 0xa3, 0x3b, 0xb7, 0xb4, 0xdb,
    0xb2, 0x45, 0x0d, 0x2d, 0x4f, 0x52, 0x59, 0x83, 0x93, 0xad, 0x4b, 0xfe, 0xb3, 0x23, 0x76,
    0x73, 0xc1, 0xfa, 0xac, 0x97, 0x33, 0x41, 0x93, 0x6d, 0xcc, 0x7c, 0x32, 0x28, 0xd5, 0xd4,
    0xf4, 0x0c, 0x1a, 0xaa, 0xf7, 0x75, 0xd4, 0xcb, 0x6b, 0xb8, 0xc4, 0xa3, 0xa1, 0x55, 0x1e,
    0x4a, 0x46, 0x74, 0x62, 0x2c, 0x8f, 0x96, 0xe2, 0x7d, 0x33, 0x94, 0xa8, 0x62, 0xe8, 0xc9,
    0xa0, 0xb8, 0x28, 0x19, 0x2f, 0xe5, 0x88, 0x53, 0x2c, 0x49, 0x5a, 0x7a, 0x95, 0x68, 0xb3,
    0x97, 0xe4, 0xfa, 0xfc, 0x2f, 0x96, 0xb8, 0x66, 0x90, 0x9c, 0x60, 0x14, 0x0f, 0xca, 0xe1,
    0xb4, 0x2d, 0x68, 0x07, 0x73, 0xf2, 0x37, 0xe0, 0x0d, 0x8c, 0xd4, 0x04, 0xa7, 0x83, 0xfa,
    0x69, 0x8d, 0xbe, 0xf0, 0x4b, 0x35, 0x59, 0xe8, 0x17, 0x91, 0x58, 0xd0, 0x8e, 0x0e, 0x31,
    0x83, 0x43, 0x6e, 0x3f, 0xf6, 0x04, 0xaa, 0xbe, 0xd5, 0x0e, 0x40, 0x78, 0x28, 0x00, 0x5c,
    0x3b, 0xfc, 0x9c, 0x6a, 0x16, 0x10, 0x47, 0x57, 0x27, 0xa9, 0x33, 0x4c, 0xf9, 0xc5, 0xf5,
    0xf9, 0x84, 0x92, 0x2a, 0xa8, 0x69, 0x5b, 0xd9, 0x24, 0x67, 0xe9, 0xac, 0x66, 0x2f, 0x3f,
    0x05, 0x4f, 0x25, 0x66, 0xe5, 0x76, 0x44, 0x75, 0xdc, 0xfb, 0x1a, 0x1a, 0xf4, 0xdc, 0xab,
    0xc9, 0x08, 0xa1, 0xd2, 0x90, 0x89, 0x43, 0xaf, 0x94, 0x9d, 0x72, 0x72, 0x60, 0x9b, 0x82,
    0x99, 0xf7, 0xb2, 0x8d, 0xae, 0xa2, 0x5d, 0x89, 0x17, 0x8e, 0xe3, 0xc7, 0x02, 0x45, 0xfc,
    0xa6, 0x42, 0xf4, 0x5f, 0x45, 0xf1, 0x81, 0x0a, 0x76, 0x93, 0x83, 0x33, 0x5e, 0xac, 0xe7,
    0x62, 0xb2, 0xa4, 0xfa, 0x98, 0x9e, 0x26, 0x11, 0xe1, 0xb1, 0x2c, 0x38, 0x5f, 0x34, 0xb5,
    0x76, 0x9b, 0xc5, 0xe9, 0xd2, 0x41, 0xed, 0x2f, 0x1d, 0x77, 0x0e, 0xee, 0x79, 0x97, 0x64,
    0x61, 0x23, 0xa0, 0x4e, 0x09, 0xa4, 0xda, 0x74, 0xf8, 0x3c, 0x59, 0x74, 0x0b, 0x59, 0xb5,
    0x48, 0x94, 0xb6, 0x8b, 0x99, 0xed, 0x05, 0x68, 0x5c, 0x44, 0xb2, 0x2f, 0x62, 0xd2, 0x5e,
    0x2a, 0xbd, 0x38, 0x43, 0x37, 0xa1, 0x2c, 0x55, 0x83, 0x14, 0xc2, 0x66, 0xad, 0x7e, 0x7c,
    0x69, 0x5d, 0xd4, 0x3f, 0x37, 0x5b, 0x0d, 0xf8, 0x3b, 0x6f, 0x77, 0x20, 0x81, 0x2a, 0xd3,
    0xa1, 0xca, 0x3a, 0x50, 0x70, 0xc3, 0x81, 0x8b, 0xd2, 0xd3, 0x66, 0xe8, 0x56, 0x73, 0xb8,
    0xbe, 0xcb, 0x61, 0x60, 0xc3, 0x78, 0x0a, 0x4e, 0x7a, 0x51, 0x0c, 0x45, 0x7f, 0x59, 0x4b,
    0x81, 0xdc, 0x69, 0x6b, 0xdb, 0x67, 0xc5, 0xd6, 0xf6, 0x0b, 0xf6, 0xa3, 0x19, 0xaa, 0x29,
    0x34, 0xd3, 0x57, 0xd5, 0xab, 0x66, 0xae, 0xcd, 0xce, 0xb5, 0xff, 0x22, 0x91, 0xd4, 0x8c,
    0x41, 0x8d, 0x14, 0x02, 0x45, 0xbf, 0x87, 0x3c, 0xa0, 0x78, 0x8a, 0x36, 0x6a, 0xa6, 0xb8,
    0x0d, 0x12, 0xbd, 0x7a, 0x96, 0x24, 0xd0, 0x1f, 0x36, 0x00, 0x03, 0x26, 0x43, 0x14, 0xa2,
    0x33, 0x45, 0x88, 0x8f, 0x2a, 0x39, 0x54, 0x30, 0xd5, 0xc4, 0x8b, 0x0c, 0x41, 0x88, 0x92,
    0x64, 0x5e, 0xac, 0x69, 0xa3, 0x60, 0x37, 0x2d, 0x50, 0x14, 0xd1, 0x88, 0xfe, 0x49, 0x27,
    0x51, 0xdf, 0x44, 0x27, 0xf2, 0x93, 0x91, 0x48, 0x92, 0x7a, 0x66, 0x0a, 0x61, 0xae, 0xcd,
    0x8e, 0x44, 0x14, 0x9c, 0xf4, 0x6d, 0x82, 0xfe, 0x77, 0xcb, 0x99, 0x07, 0xf6, 0xc8, 0x4b,
    0xe3, 0x68, 0x39, 0x4e, 0xc0, 0xa2, 0xb3, 0x1b, 0x78, 0xbf, 0xc5, 0x24, 0x36, 0x2f, 0x26,
    0xb8, 0x41, 0x07, 0xde, 0xf1, 0x48, 0x99, 0x48, 0xa4, 0xf0, 0x1e, 0x73, 0x5d, 0x58, 0x36,
    0xc3, 0xf7, 0xd6, 0x7a, 0xcf, 0x7e, 0x82, 0x3f, 0xec, 0x17, 0xeb, 0xd6, 0xb7, 0x3c, 0xfe,
    0x2d, 0x61, 0xb2, 0x69, 0x6c, 0x4c, 0xd3, 0xda, 0xf8, 0xd3, 0xc1, 0xa4, 0xe7, 0x4d, 0xf1,
    0x3b, 0x17, 0xf8, 0xa3, 0xcd, 0xe0, 0xa7, 0x91, 0x3d, 0x36, 0xd4, 0x4f, 0x85, 0x3c, 0x43,
    0x4d, 0xde, 0x21, 0xb2, 0x4a, 0x86, 0x20, 0x2c, 0x0d, 0x19, 0xfb, 0x1a, 0x6e, 0x32, 0x47,
    0x56, 0xb9, 0x0c, 0xd4, 0x0b, 0xb2, 0x16, 0x99, 0x47, 0x74, 0xed, 0xc9, 0x00, 0x77, 0xed,
    0x27, 0x9b, 0xee, 0x02, 0xcb, 0xdf, 0x6b, 0x9d, 0x5a, 0x3f, 0x89, 0xfb, 0xc2, 0x72, 0xbc,
    0x66, 0xc0, 0xf6, 0x17, 0x40, 0x9d, 0xdc, 0x4a, 0xcb, 0x11, 0x6f, 0x1c, 0x97, 0xf5, 0x40,
    0xf5, 0x49, 0x14, 0xea, 0x54, 0xda, 0x16, 0xe8, 0xb4, 0x4e, 0x6d, 0xc0, 0xb0, 0xe5, 0x86,
    0x75, 0x22, 0x5e, 0x84, 0x16, 0x4c, 0xe9, 0x8c, 0x5a, 0x13, 0x6f, 0xbc, 0xf1, 0x19, 0x2c,
    0x4f, 0x06, 0x36, 0x67, 0x4e, 0x3e, 0x18, 0xf7, 0xf3, 0xe4, 0x91, 0x9e, 0xf7, 0xe2, 0x08,
    0x7c, 0x36, 0x27, 0x8b, 0x90, 0xa5, 0xe2, 0xf0, 0x69, 0xad, 0x14, 0x1f, 0x44, 0x39, 0xc3,
    0x85, 0x64, 0x41, 0xe5, 0x55, 0xce, 0xd6, 0xa5, 0x0c, 0xb6, 0x08, 0x1f, 0xce, 0x41, 0x3f,
    0x5d, 0xfa, 0x60, 0x32, 0x88, 0x8e, 0x3c, 0xa7, 0x86, 0x63, 0xd5, 0x47, 0xb4, 0xb5, 0xb5,
    0xad, 0x9a, 0x42, 0xb5, 0xf9, 0x83, 0x38, 0xbb, 0x60, 0xdc, 0xf9, 0x52, 0xd0, 0xb7, 0xaf,
    0x33, 0x9e, 0x1d, 0x71, 0xaf, 0x92, 0x68, 0x92, 0x4e, 0x04, 0x44, 0x68, 0xdd, 0x26, 0xf1,
    0xca, 0x8d, 0x0a, 0xd2, 0x68, 0xfb, 0x5b, 0x69, 0xfb, 0x6d, 0x29, 0xbd, 0x55, 0x46, 0x85,
    0xed, 0xe4, 0xa0, 0xbb, 0x39, 0x52, 0x27, 0x27, 0xd1, 0x59, 0x38, 0x9b, 0x8e, 0xc9, 0x99,
    0xbd, 0xb9, 0xce, 0xbc, 0x9f, 0x7e, 0x4a, 0xfb, 0x7e, 0xb8, 0x2d, 0x4e, 0x77, 0xf6, 0xbb,
    0xdc, 0xcd, 0x0f, 0x53, 0x84, 0xb9, 0x12, 0xf5, 0x8c, 0xa5, 0x19, 0xef, 0x25, 0xd5, 0x4e,
    0x2f, 0x75, 0x89, 0x95, 0xda, 0xd0, 0x53, 0x86, 0xbe, 0x9f, 0x46, 0x46, 0x66, 0x7d, 0xab,
    0xe6, 0xb3, 0x2b, 0x9b, 0x18, 0x09, 0x4d, 0x43, 0xf6, 0x4c, 0xae, 0x8d, 0x9b, 0x19, 0xf0,
    0x94, 0xf2, 0x2e, 0x0f, 0xc4, 0xd0, 0x6f, 0x03, 0x9d, 0xf1, 0xf1, 0xc1, 0x03, 0xbc, 0x80,
    0x18, 0xcc, 0xb3, 0x1e, 0x06, 0xee, 0xfa, 0xa6, 0xb5, 0x3e, 0x7d, 0x08, 0xd7, 0x7f, 0xcd,
    0x8f, 0xbc, 0xd0, 0xe8, 0xa9, 0xbd, 0x73, 0xe7, 0xea, 0x66, 0x3e, 0x3e, 0x2b, 0xbb, 0xe2,
    0xcf, 0x09, 0xab, 0xb8, 0xd8, 0x37, 0xa2, 0xe8, 0xc3, 0x0f, 0xa6, 0xb7, 0xc2, 0x7e, 0x3f,
    0x8c, 0x30, 0x48, 0x29, 0x28, 0xe4, 0x3b, 0x6d, 0x7f, 0xfe, 0xdb, 0xc2, 0xd6, 0x0e, 0x04,
    0xd3, 0x08, 0x91, 0x9b, 0xb2, 0x2b, 0x86, 0xcc, 0xef, 0x15, 0xb6, 0x95, 0xa5, 0x21, 0x8e,
    0xda, 0x9c, 0xb5, 0x97, 0x6f, 0x26, 0xe5, 0x5d, 0xd3, 0x55, 0xcc, 0xc6, 0x30, 0x4e, 0x11,
    0x47, 0x32, 0xd1, 0x80, 0x29, 0xdb, 0x4f, 0xe9, 0x9d, 0x03, 0xb5, 0x18, 0x9d, 0xd4, 0xc4,
    0x42, 0x88, 0xaa, 0x13, 0x4a, 0x88, 0x10, 0xc7, 0xd9, 0x73, 0x2f, 0x49, 0xcd, 0x33, 0x16,
    0x8b, 0x45, 0xcf, 0x43, 0x27, 0x15, 0x19, 0xb6, 0x00, 0x0e, 0xdb, 0x9e, 0x00, 0x1b, 0xd3,
    0x51, 0x5b, 0x5f, 0x02, 0x40, 0x3c, 0xf4, 0x9f, 0x72, 0xfa, 0x30, 0xf8, 0x04, 0xf3, 0x71,
    0xbf, 0x60, 0x42, 0xd2, 0x3c, 0x51, 0xa4, 0x35, 0x73, 0xc1, 0x52, 0xc7, 0xab, 0xbb, 0x7a,
    0xcf, 0x77, 0x30, 0xd0, 0x02, 0x6c, 0x56, 0x94, 0x76, 0xc4, 0x94, 0x64, 0x50, 0x38, 0x07,
    0x4f, 0x6d, 0x4a, 0x35, 0x3d, 0xf2, 0x1e, 0x91, 0x85, 0x26, 0x7c, 0xdc, 0xfa, 0x87, 0xf4,
    0xc6, 0x6e, 0xd3, 0x48, 0x15, 0x74, 0x1c, 0x4c, 0x1e, 0xd5, 0xbd, 0xbe, 0x8b, 0x2d, 0x97,
    0x27, 0xa4, 0xd2, 0x86, 0x90, 0x4d, 0x9f, 0xe8, 0xe2, 0xb4, 0x58, 0xaf, 0x64, 0x8c, 0xc5,
    0x00, 0x3c, 0x87, 0xa6, 0x06, 0x6f, 0x13, 0x02, 0xcc, 0x04, 0x53, 0xd4, 0xdd, 0x26, 0x08,
    0x1c, 0xef, 0xc7, 0xeb, 0x0f, 0x43, 0x4f, 0x04, 0x18, 0xaa, 0xf9, 0x39, 0xb0, 0x41, 0xaa,
    0x1c, 0xbc, 0x16, 0x65, 0xb2, 0xd9, 0x36, 0x3c, 0x67, 0xd3, 0xca, 0xdc, 0xea, 0xc6, 0xba,
    0x9a, 0xca, 0x5e, 0xda, 0xb5, 0x8b, 0x65, 0x6b, 0x8e, 0xbc, 0xe8, 0x6d, 0x2b, 0xf3, 0xbd,
    0x57, 0xbf, 0xf3, 0x47, 0xf8, 0xdb, 0x20, 0xbc, 0x56, 0x45, 0xc9, 0xfe, 0xca, 0xd8, 0xfb,
    0x18, 0xdb, 0xf1, 0xb6, 0xf9, 0x1f, 0x9e, 0x0d, 0xe3, 0xa4, 0x58, 0x86, 0x99, 0x49, 0x15,
    0x37, 0x2a, 0xe0, 0x75, 0xf8, 0x7c, 0x3f, 0x21, 0x3d, 0x26, 0x47, 0x26, 0xbe, 0x00, 0x86,
    0x18, 0xa7, 0x2f, 0x69, 0x9c, 0x9f, 0x43, 0x19, 0x0a, 0x29, 0xb2, 0x91, 0xa4, 0x2a, 0x61,
    0x0b, 0x01, 0x91, 0xcd, 0xa7, 0x2d, 0x1c, 0xe1, 0xb2, 0xf5, 0x02, 0x8e, 0x96, 0x5f, 0x48,
    0x0a, 0x9c, 0x6c, 0x95, 0x08, 0x9a, 0x48, 0xb2, 0x69, 0x64, 0xce, 0x9b, 0xc4, 0x74, 0x43,
    0x34, 0x14, 0x0d, 0xf7, 0x8f, 0x7f, 0x28, 0x6f, 0xc8, 0xd1, 0x57, 0xb0, 0xfe, 0x25, 0x5e,
    0x07, 0x69, 0x02, 0x83, 0x7d, 0xaf, 0x76, 0xf5, 0x2d, 0xed, 0xab, 0x32, 0x53, 0x1c, 0x8d,
    0x9f, 0x86, 0xb8, 0x32, 0x35, 0xe5, 0x13, 0x4f, 0x7c, 0x71, 0x4c, 0x10, 0x06, 0xf3, 0x51,
    0x8b, 0xf4, 0x53, 0x38, 0x9f, 0x18, 0xbd, 0x2b, 0xb1, 0x70, 0x73, 0x2c, 0x25, 0xee, 0x71,
    0x2f, 0x7f, 0xa0, 0x36, 0x0f, 0xa2, 0xdc, 0xc0, 0xf0, 0xdc, 0x70, 0xca, 0xb8, 0xea, 0xc2,
    0xe4, 0x25, 0x61, 0x95, 0xcb, 0x86, 0xba, 0xbf, 0x0c, 0x19, 0x99, 0x70, 0x08, 0x3e, 0xc1,
    0x02, 0x8a, 0xe4, 0x6d, 0x7f, 0x48, 0x53, 0x0b, 0x02, 0x1c, 0xb8, 0xbd, 0xfd, 0x54, 0x07,
    0x83, 0x05, 0x88, 0xd8, 0x6c, 0x04, 0x8c, 0x0a, 0x0a, 0xf0, 0xff, 0x9e, 0x31, 0xe2, 0x7f,
    0x26, 0xa7, 0x4f, 0x32, 0x91, 0xff, 0xac, 0x3d, 0xb7, 0x03, 0x8f, 0xb3, 0x51, 0x28, 0x9b,
    0x42, 0x4b, 0xf2, 0x22, 0x2e, 0x72, 0xb0, 0x11, 0x65, 0x76, 0xcc, 0x58, 0xc5, 0xc5, 0xec,
    0x82, 0x0a, 0x9a, 0xee, 0x74, 0x43, 0xcd, 0x69, 0x26, 0xaa, 0x28, 0xa4, 0xce, 0x72, 0xd6,
    0xc0, 0xcf, 0x5b, 0x91, 0xf7, 0x94, 0xc9, 0x6d, 0x82, 0xa9, 0x12, 0xac, 0xe2, 0x7b, 0xed,
    0x32, 0x1a, 0xaa, 0x37, 0xb4, 0xa3, 0x8d, 0x75, 0x69, 0xde, 0xb0, 0x3f, 0x48, 0x3d, 0x0c,
    0x37, 0x53, 0xca, 0x6d, 0x66, 0x23, 0xbf, 0x1d, 0x58, 0xc9, 0x99, 0x5a, 0xf8, 0xa3, 0x54,
    0x36, 0x13, 0x27, 0xd1, 0x82, 0x2a, 0xff, 0xfb, 0xbf, 0x56, 0xf6, 0xab, 0x6c, 0xf0, 0xa5,
    0xb4, 0xed, 0x3f, 0x13, 0xb4, 0x05, 0x90, 0xad, 0x5c, 0x23, 0x86, 0x56, 0x07, 0x56, 0x70,
    0x5c, 0x68, 0x15, 0x6f, 0x3f, 0xfe, 0xa8, 0xe7, 0xa1, 0x53, 0x04, 0x54, 0x7e, 0x26, 0xa0,
    0xd2, 0xcb, 0x9c, 0x84, 0x64, 0x01, 0x05, 0xe1, 0xca, 0xfb, 0xef, 0x90, 0x50, 0x02, 0xdb,
    0xd0, 0x90, 0x80, 0xf7, 0x4f, 0x23, 0xa2, 0x45, 0x36, 0xaa, 0x89, 0x77, 0xed, 0x9b, 0x38,
    0x7e, 0xd4, 0x02, 0xf7, 0x91, 0xd0, 0x75, 0x40, 0x7b, 0x3d, 0x18, 0xe1, 0x2e, 0x03, 0x68,
    0x97, 0xf8, 0xe8, 0xbe, 0x02, 0xba, 0xea, 0x27, 0x89, 0x85, 0xf7, 0xf0, 0xa0, 0x35, 0x1f,
    0x90, 0x5d, 0x2b, 0xb7, 0xff, 0xd4, 0x64, 0xcf, 0x71, 0x0c, 0x20, 0x36, 0x43, 0x19, 0x0e,
    0xf0, 0x84, 0x3b, 0x27, 0x6d, 0x06, 0x01, 0xe1, 0x53, 0x11, 0xae, 0xd8, 0x20, 0x93, 0x77,
    0x27, 0x97, 0x7e, 0x60, 0x5f, 0x53, 0xb1, 0x49, 0xcf, 0x21, 0x12, 0xa0, 0x94, 0xa8, 0x1b,
    0xa2, 0xa3, 0x43, 0x3b, 0x68, 0xc0, 0xa0, 0xca, 0xae, 0xef, 0x67, 0xd5, 0x69, 0xf4, 0xb6,
    0x8a, 0x93, 0xdc, 0x32, 0xaa, 0x0a, 0xf7, 0xc5, 0x93, 0x03, 0xd4, 0xf2, 0x1e, 0xa2, 0x40,
    0xe5, 0x10, 0xa9, 0x84, 0x65, 0x54, 0xbe, 0x6c, 0x49, 0x9e, 0x21, 0x78, 0x18, 0xba, 0x94,
    0x8d, 0xb2, 0xc1, 0x62, 0x9f, 0x0f, 0x76, 0x84, 0x7b, 0xa0, 0x03, 0x73, 0x72, 0x28, 0xfa,
    0x9c, 0xd7, 0x2e, 0xcf, 0xb5, 0xab, 0xb1, 0x36, 0x90, 0x36, 0xf5, 0xd0, 0x1b, 0x74, 0x8a,
    0x7b, 0xfa, 0x86, 0x22, 0xd1, 0x0c, 0x95, 0xc5, 0x68, 0xed, 0x49, 0x0b, 0xef, 0x23, 0x4f,
    0xc1, 0xbc, 0x54, 0xfe, 0x8f, 0xf8, 0x03, 0x37, 0x96, 0x6c, 0xff, 0xc5, 0xd4, 0xa6, 0x78,
    0x0c, 0x49, 0xdf, 0x67, 0xfa, 0xd5, 0x45, 0x7f, 0x08, 0xab, 0x22, 0x29, 0x47, 0x7c, 0x48,
    0x80, 0xd2, 0x7f, 0x1f, 0xa3, 0xca, 0x51, 0x47, 0x03, 0x3e, 0x99, 0xd3, 0x52, 0xc3, 0xcc,
    0x91, 0x52, 0x54, 0x57, 0x54, 0x1a, 0xad, 0x58, 0x34, 0x8b, 0x0e, 0x7c, 0xbb, 0xf5, 0x27,
    0x44, 0xde, 0x78, 0xf5, 0x97, 0x22, 0x45, 0x3d, 0xe2, 0xb3, 0x02, 0x56, 0x44, 0xf9, 0xbf,
    0x39, 0x35, 0x91, 0xd0, 0x4e, 0xda, 0xca, 0x74, 0x82, 0x00, 0x61, 0xa0, 0x3b, 0xfb, 0xe4,
    0x0d, 0x00, 0x91, 0x6b, 0x3b, 0xe2, 0xba, 0x84, 0x18, 0x8b, 0x7f, 0x1e, 0x7e, 0xba, 0x43,
    0x40, 0x6d, 0xd2, 0x91, 0x2a, 0xf9, 0xff, 0x0b, 0x88, 0xe5, 0x4f, 0x66, 0x4b, 0xde, 0x33,
    0xfa, 0xf7, 0x17, 0x9d, 0xf7, 0xcc, 0x7c, 0x0c, 0x78, 0x78, 0xe6, 0x37, 0x96, 0x45, 0x01,
    0xff, 0x25, 0x16, 0x93, 0x0d, 0x9c, 0x56, 0x35, 0xa3, 0x7d, 0x93, 0xbe, 0x24, 0x2d, 0x6d,
    0x77, 0x5a, 0x68, 0xd6, 0x67, 0x99, 0x81, 0xd8, 0x5a, 0x4d, 0x2f, 0x78, 0xb5, 0xb4, 0x39,
    0x48, 0x00, 0xa5, 0x42, 0xa1, 0x50, 0xc4, 0x7f, 0x08, 0x18, 0x71, 0x07, 0x4e, 0x18, 0x4e,
    0x75, 0xee, 0x70, 0x5c, 0x5b, 0x98, 0x72, 0x04, 0xc8, 0x70, 0x37, 0x83, 0x19, 0x47, 0x29,
    0xf9, 0xb5, 0xd8, 0x3b, 0x46, 0x4f, 0xe2, 0xd2, 0x7b, 0xef, 0xce, 0x3d, 0xde, 0xc3, 0x93,
    0x8a, 0x45, 0xb1, 0xb0, 0xef, 0xad, 0xa4, 0x09, 0x73, 0x0e, 0x53, 0xec, 0x4e, 0xf4, 0x16,
    0x42, 0x4f, 0xc6, 0x4d, 0x0a, 0xa2, 0x05, 0xc5, 0x94, 0xfc, 0xd6, 0xd6, 0xff, 0xec, 0x5b,
    0x13, 0x8b, 0xce, 0x80, 0xaa, 0xd4, 0x91, 0x37, 0x9d, 0xfc, 0xd3, 0x2a, 0xa4, 0x6d, 0xc6,
    0x29, 0x60, 0x97, 0x9b, 0x30, 0x26, 0xac, 0xef, 0x9b, 0xe6, 0x22, 0x26, 0x52, 0xb0, 0xfc,
    0x7a, 0x97, 0xbd, 0xdd, 0xb7, 0x5a, 0x38, 0xac, 0xfa, 0x7e, 0x5f, 0x2d, 0x15, 0xbb, 0x87,
    0x11, 0x39, 0x91, 0x92, 0xca, 0xca, 0xdc, 0xf2, 0x6a, 0x6a, 0x64, 0x13, 0xfc, 0x88, 0x98,
    0x77, 0x42, 0x21, 0xe5, 0xd2, 0xff, 0xa4, 0x03, 0xa1, 0x62, 0x20, 0x8f, 0x56, 0xe5, 0x0f,
    0x4f, 0x81, 0x51, 0xc7, 0x11, 0x71, 0x29, 0x14, 0xc6, 0xa4, 0xca, 0x37, 0xc0, 0x6f, 0x6f,
    0x2f, 0x46, 0x31, 0xfe, 0x28, 0x97, 0x14, 0x08, 0x48, 0x8d, 0x01, 0xaf, 0xe2, 0xf6, 0x63,
    0xed, 0x5b, 0x30, 0xce, 0xef, 0x1b, 0x93, 0x02, 0x6e, 0xe2, 0xe9, 0xfb, 0xa3, 0xf0, 0x2a,
    0x6d, 0x6a, 0xc2, 0xf6, 0xd3, 0x53, 0x18, 0x5b, 0xb5, 0xc5, 0x2d, 0x32, 0x25, 0xad, 0xbf,
    0x3e, 0x4d, 0x8b, 0x33, 0xda, 0xbd, 0xfa, 0xa7, 0x75, 0x10, 0x58, 0xac, 0xdb, 0x34, 0xdc,
    0x38, 0x45, 0x39, 0xf9, 0x54, 0xf1, 0x22, 0x24, 0x5c, 0x6e, 0xe2, 0xb0, 0x3f, 0xfb, 0x29,
    0xbc, 0xe9, 0x3a, 0x97, 0x99, 0xb8, 0xaf, 0x30, 0xc6, 0xf5, 0xc5, 0x4b, 0x6c, 0xbc, 0x94,
    0xbc, 0x45, 0x77, 0xfc, 0x43, 0xfb, 0x18, 0x4f, 0x9e, 0x74, 0x40, 0x21, 0xae, 0x3d, 0x17,
    0x74, 0xb9, 0x33, 0xbc, 0x8d, 0x46, 0x1c, 0x58, 0x76, 0xc2, 0x87, 0x00, 0x6f, 0xa4, 0xe1,
    0xd8, 0x25, 0x98, 0xc2, 0x30, 0xf9, 0x4c, 0xe3, 0x7b, 0xef, 0x4a, 0x14, 0x88, 0xa3, 0x06,
    0xb8, 0x23, 0x42, 0x3a, 0xb0, 0x1b, 0xfc, 0x1a, 0x1b, 0xb4, 0x9c, 0x6e, 0xc9, 0xc1, 0xab,
    0x26, 0x30, 0x85, 0xd8, 0xda, 0x20, 0xb4, 0x6c, 0x1f, 0x86, 0xf3, 0x22, 0xa5, 0xec, 0x2a,
    0x30, 0xbb, 0x8c, 0x4d, 0x99, 0x9c, 0xff, 0x40, 0xfb, 0xad, 0x05, 0x29, 0x0f, 0x72, 0x22,
    0x53, 0xa3, 0xdb, 0x4f, 0x0d, 0xf7, 0xc3, 0x0f, 0xfa, 0x73, 0xec, 0x47, 0xe6, 0x4e, 0x80,
    0xde, 0x5b, 0xeb, 0xf0, 0x7f, 0xb1, 0x19, 0x4c, 0x1b, 0x0b, 0xb4, 0x6d, 0x81, 0xfb, 0xc0,
    0x50, 0x38, 0xdc, 0xa0, 0x78, 0x9d, 0x9c, 0xb7, 0x48, 0x5f, 0x2a, 0x81, 0x74, 0x10, 0x5f,
    0xda, 0x57, 0xf6, 0x8f, 0xe3, 0x83, 0x03, 0x98, 0x90, 0x98, 0xf3, 0xe6, 0x80, 0x9a, 0xa0,
    0xe0, 0x93, 0x3f, 0xf2, 0xca, 0x4c, 0xe4, 0xe5, 0xaf, 0x2c, 0x26, 0x23, 0xdb, 0x7f, 0xc0,
    0x0b, 0xbc, 0xd1, 0x13, 0x77, 0xeb, 0x30, 0x7e, 0x19, 0xe3, 0x95, 0xad, 0xf7, 0x1b, 0xea,
    0xab, 0x55, 0x93, 0x8d, 0xeb, 0x26, 0x77, 0x65, 0x94, 0x7e, 0x3a, 0x22, 0x17, 0xd6, 0xdf,
    0xdc, 0x3e, 0x47, 0xc7, 0xe1, 0x9a, 0xb2, 0x30, 0x84, 0x00, 0x47, 0xc6, 0x82, 0x27, 0xda,
    0x4c, 0xd1, 0x3d, 0xf7, 0x5f, 0xd6, 0x46, 0xdd, 0x1e, 0x6e, 0x52, 0x56, 0x70, 0x3c, 0x20,
    0x44, 0x8d, 0xde, 0x76, 0x07, 0xda, 0xb1, 0x27, 0x91, 0x35, 0x82, 0x4a, 0x40, 0x03, 0x2f,
    0xe2, 0x78, 0x16, 0xf6, 0xb4, 0x45, 0xcd, 0x51, 0x27, 0xda, 0xa9, 0x91, 0xb8, 0x7f, 0xdc,
    0x4f, 0xba, 0x47, 0xaa, 0x63, 0x79, 0xf3, 0x17, 0x41, 0xc2, 0xe1, 0x05, 0xb3, 0xf4, 0x4d,
    0xbc, 0x96, 0x39, 0x24, 0x97, 0x63, 0x71, 0x53, 0xfb, 0x41, 0xc9, 0x25, 0x03, 0xf8, 0xd6,
    0x3f, 0xd1, 0xf4, 0xfe, 0x23, 0xcc, 0xf3, 0x73, 0x1c, 0x44, 0xbd, 0x6f, 0xad, 0xaf, 0xe7,
    0x84, 0xcf, 0xa0, 0x6b, 0x36, 0xdd, 0x69, 0xd6, 0x0c, 0xd3, 0x99, 0x2b, 0xfe, 0xc8, 0xb4,
    0x99, 0x9b, 0xed, 0x4d, 0x8b, 0x34, 0xee, 0x7c, 0x51, 0x8b, 0x91, 0xda, 0x62, 0x26, 0x88,
    0x77, 0x30, 0x0a, 0x03, 0x58, 0x30, 0x1e, 0x83, 0x25, 0xa8, 0x3d, 0x71, 0xc1, 0xe5, 0x03,
    0x72, 0xdf, 0x25, 0x7f, 0x70, 0xc6, 0x74, 0x61, 0xb9, 0x68, 0xbd, 0x2d, 0xa0, 0x90, 0xfd,
    0xe4, 0x13, 0x73, 0x25, 0x0c, 0x1c, 0xb2, 0xe8, 0x1c, 0x22, 0x77, 0xc1, 0x41, 0xb9, 0xb3,
    0x95, 0xe3, 0xf6, 0xc3, 0x09, 0xdd, 0xec, 0x2c, 0x1c, 0xa0, 0xc0, 0x3c, 0xc0, 0x16, 0x59,
    0x56, 0xc7, 0xd4, 0x79, 0x9b, 0x9d, 0xc2, 0xdb, 0xb7, 0xda, 0x35, 0x7e, 0x61, 0x50, 0x0d,
    0x23, 0x1b, 0x13, 0xd7, 0xeb, 0x64, 0x9c, 0xbe, 0x95, 0x78, 0x69, 0x2c, 0x24, 0x15, 0xcb,
    0x43, 0x2a, 0x4d, 0xda, 0xc1, 0x3c, 0xef, 0xea, 0x0d, 0xac, 0x65, 0xae, 0xb1, 0xf0, 0x7e,
    0xd4, 0x19, 0xb3, 0x74, 0xdd, 0xaa, 0x08, 0xd6, 0x35, 0x55, 0x15, 0x99, 0x87, 0x7a, 0x61,
    0x5a, 0x37, 0xd7, 0x3e, 0x32, 0x67, 0x1d, 0x4e, 0x0e, 0x2e, 0xae, 0x97, 0x0a, 0xc5, 0xbd,
    0xc5, 0xe2, 0xab, 0xe2, 0xbb, 0x56, 0x71, 0xfb, 0x7d, 0xa1, 0xf8, 0xbe, 0x54, 0xd8, 0xda,
    0xee, 0xdc, 0xac, 0xe7, 0x8e, 0x1e, 0xd9, 0x96, 0xa9, 0xcd, 0x62, 0x69, 0xdb, 0x5c, 0xe5,
    0x24, 0xad, 0xa9, 0x42, 0xc1, 0x5c, 0x5c, 0x84, 0xd9, 0x9b, 0xf6, 0x39, 0x51, 0x24, 0x9a,
    0x55, 0xf0, 0x50, 0xe2, 0x82, 0x9a, 0x39, 0xd5, 0xc4, 0x0e, 0x48, 0xcb, 0x9c, 0x8f, 0x37,
    0x58, 0x54, 0x52, 0xb1, 0x9a, 0x93, 0x44, 0x3c, 0x6b, 0xad, 0x25, 0x55, 0x45, 0x88, 0xa0,
    0x9c, 0xad, 0x08, 0x44, 0xb7, 0x69, 0x6d, 0xf3, 0xb9, 0xd2, 0x74, 0x8e, 0x26, 0x81, 0x78,
    0xf2, 0xcb, 0x4d, 0x58, 0xb4, 0xac, 0x23, 0x80, 0x66, 0xb0, 0x6e, 0x7d, 0x33, 0x85, 0xbe,
    0x47, 0x94, 0xc8, 0xcb, 0x18, 0xf7, 0x46, 0x77, 0x9f, 0xbc, 0xc7, 0x19, 0x7b, 0xb3, 0x69,
    0xfd, 0x23, 0xef, 0x17, 0xf7, 0x59, 0x7a, 0x69, 0x8c, 0x03, 0x85, 0x4e, 0x1a, 0xc6, 0x7c,
    0x8b, 0x5a, 0x7b, 0xf3, 0xe6, 0xcd, 0xca, 0xec, 0x48, 0x5f, 0xdc, 0xfb, 0xfa, 0x62, 0x4f,
    0xdd, 0x9a, 0x90, 0x32, 0x44, 0x9b, 0x3d, 0xb7, 0x18, 0xb0, 0x7b, 0x6a, 0xf7, 0xef, 0xa0,
    0xd5, 0x9b, 0xe3, 0xb1, 0x2a, 0xd4, 0x4c, 0x30, 0x00, 0x0b, 0x73, 0x58, 0x01, 0x13, 0x8a,
    0x38, 0xb0, 0x7d, 0x8c, 0x69, 0xfa, 0x03, 0x7c, 0xe8, 0x4d, 0xe1, 0x5d, 0x41, 0xdf, 0xa6,
    0x25, 0xdf, 0x53, 0x2b, 0x94, 0x3d, 0xe7, 0xa9, 0x37, 0x0a, 0x06, 0x39, 0xc4, 0x94, 0x23,
    0x16, 0xa4, 0x7c, 0x49, 0xb5, 0x6c, 0x34, 0x7e, 0xb0, 0x29, 0x56, 0xb7, 0x17, 0x35, 0xf8,
    0xf9, 0x00, 0x7a, 0x1a, 0xf4, 0x7d, 0x43, 0xaf, 0xa9, 0xd3, 0xf7, 0x9f, 0x80, 0xcb, 0x2f,
    0x67, 0xe0, 0x8f, 0x66, 0x88, 0x02, 0x7a, 0xbc, 0xab, 0x4d, 0xcb, 0x76, 0xcf, 0xb8, 0x48,
    0x44, 0x4e, 0xfc, 0x92, 0x47, 0x6d, 0xb2, 0xb0, 0x8c, 0xa0, 0xee, 0x1b, 0x47, 0x10, 0x07,
    0x8c, 0x7a, 0xde, 0x60, 0x06, 0xa6, 0xc1, 0xa7, 0x38, 0xe0, 0xcd, 0x30, 0xb8, 0x08, 0xd3,
    0xe5, 0x45, 0x96, 0xd1, 0x47, 0xe8, 0x86, 0x7e, 0x7f, 0xd0, 0xbf, 0x19, 0xf2, 0x88, 0x6a,
    0x2c, 0x86, 0xde, 0xf7, 0x4d, 0x30, 0xe5, 0xd8, 0x01, 0xaa, 0xe6, 0xae, 0xc5, 0x42, 0xe3,
    0x6b, 0xaa, 0x48, 0x4e, 0x4e, 0x2e, 0x8a, 0x13, 0x33, 0x72, 0x05, 0xac, 0x7a, 0x36, 0xbb,
    0xdc, 0x7b, 0x6b, 0x0a, 0xa4, 0xce, 0x06, 0x09, 0x0b, 0xfa, 0xf4, 0x41, 0x87, 0xbd, 0xb8,
    0xb9, 0x32, 0xdf, 0xcd, 0xf7, 0xbb, 0xa5, 0xef, 0x65, 0xbf, 0x8f, 0xb3, 0x55, 0xd6, 0xd6,
    0x16, 0xbf, 0x7b, 0xb1, 0x66, 0xe6, 0x77, 0x23, 0x7b, 0xbc, 0xb0, 0x71, 0x5d, 0xb1, 0x3a,
    0x78, 0xad, 0xd5, 0x3a, 0x5b, 0x1c, 0x09, 0xcf, 0x83, 0x5a, 0x72, 0xe7, 0xa0, 0xd6, 0xb5,
    0xc3, 0xa3, 0xde, 0x59, 0x98, 0x67, 0xbf, 0x26, 0x0d, 0x65, 0xb5, 0xcc, 0x6f, 0x7a, 0x48,
    0xf2, 0x98, 0x8b, 0xa2, 0xc5, 0xa0, 0x66, 0xb1, 0xf4, 0x1f, 0x81, 0xf6, 0xdb, 0xaa, 0xf2,
    0x48, 0x65, 0xfb, 0x46, 0xe2, 0x4b, 0xb2, 0xf7, 0xf0, 0x85, 0x83, 0x74, 0xf5, 0x2f, 0x5e,
    0xa8, 0x64, 0x69, 0xf6, 0xa2, 0x70, 0x14, 0x4e, 0xc6, 0xb0, 0x2e, 0x47, 0x68, 0xe7, 0xd2,
    0x64, 0x78, 0x0c, 0x24, 0xe7, 0x2e, 0x0c, 0xb9, 0x44, 0x0e, 0x29, 0xac, 0x1c, 0x8f, 0x8e,
    0xdb, 0x81, 0xe8, 0x7a, 0x68, 0xbc, 0x11, 0x02, 0xef, 0x43, 0xe0, 0xe3, 0x28, 0xe2, 0x50,
    0xc7, 0xbf, 0xcf, 0x31, 0xb5, 0xf1, 0xc6, 0xcb, 0x2f, 0x96, 0xdd, 0x9f, 0xce, 0x28, 0xdd,
    0xb8, 0x3f, 0x1d, 0x9b, 0x33, 0x9c, 0x4a, 0x37, 0x74, 0x1c, 0x2f, 0x34, 0x05, 0x66, 0xc6,
    0x6c, 0xdd, 0xcc, 0x2c, 0xb3, 0x3c, 0x46, 0x6d, 0x61, 0x5f, 0x6d, 0xcf, 0x84, 0x32, 0x79,
    0x1a, 0x65, 0xd3, 0x05, 0x91, 0x39, 0x42, 0x8f, 0x2e, 0x62, 0x9d, 0x99, 0x48, 0xe8, 0x5b,
    0x41, 0x88, 0xd7, 0x06, 0xdc, 0xcd, 0xad, 0xf6, 0xf9, 0x41, 0xf3, 0x23, 0xbb, 0x82, 0x90,
    0xa1, 0xc8, 0xe5, 0x5c, 0xd4, 0xae, 0xf3, 0xf2, 0x3b, 0x6f, 0x6f, 0x2f, 0xee, 0xbe, 0xdd,
    0xd3, 0x74, 0x8e, 0xec, 0xe8, 0x8e, 0x63, 0x33, 0x62, 0x4f, 0x11, 0x0f, 0x56, 0xfa, 0x2e,
    0xca, 0x4e, 0xa9, 0x59, 0x86, 0x6f, 0xdf, 0xbc, 0xb1, 0x36, 0x5e, 0x4d, 0x1e, 0x5e, 0x4d,
    0xe1, 0x7f, 0x22, 0xd5, 0xac, 0xee, 0xdf, 0x19, 0x85, 0x29, 0x13, 0x17, 0x6f, 0xd2, 0xc6,
    0x0f, 0x6f, 0xfa, 0x0a, 0xfb, 0x43, 0xf8, 0x39, 0x57, 0x37, 0xde, 0x93, 0x72, 0xcf, 0xa7,
    0x09, 0x0f, 0x74, 0xa8, 0xcc, 0xc3, 0x0b, 0x33, 0x47, 0x1c, 0x9f, 0x47, 0x73, 0xb7, 0x85,
    0x66, 0x14, 0x41, 0x8e, 0xd1, 0xa7, 0xa4, 0xb8, 0x9f, 0x3f, 0x63, 0x6d, 0x4a, 0x60, 0x47,
    0xad, 0x7f, 0x00, 0xa4, 0x85, 0xdd, 0xdd, 0xdd, 0x55, 0xc9, 0x5f, 0x41, 0xc3, 0xbe, 0x82,
    0x2d, 0x7d, 0xe8, 0x6a, 0xca, 0xcb, 0xee, 0xde, 0xee, 0xae, 0x82, 0xdf, 0x32, 0xcc, 0xb2,
    0xa9, 0x82, 0x84, 0xe7, 0x54, 0x64, 0x4f, 0x13, 0x72, 0x0f, 0xfb, 0x30, 0x24, 0x8f, 0xb5,
    0xa5, 0xf7, 0x53, 0xfc, 0x60, 0x94, 0xcd, 0x47, 0x96, 0xa6, 0xcf, 0x85, 0x1b, 0xa4, 0x1f,
    0xfd, 0xc5, 0xb7, 0xb4, 0xd0, 0x9a, 0x42, 0xbf, 0x13, 0xaa, 0x09, 0x00, 0xda, 0xef, 0x19,
    0x0c, 0x9b, 0xab, 0x19, 0x68, 0xf7, 0xf7, 0x45, 0x8b, 0x5b, 0xa9, 0x4f, 0x86, 0x4d, 0x1c,
    0x7a, 0xf6, 0x73, 0xf0, 0x06, 0xaa, 0x04, 0x01, 0x9c, 0x28, 0xc0, 0x98, 0x94, 0xf6, 0x73,
    0xcb, 0xbf, 0x8b, 0x14, 0xed, 0x4b, 0xb2, 0x67, 0x63, 0xed, 0x67, 0x52, 0x12, 0x5e, 0xeb,
    0x6b, 0x5f, 0x85, 0xb7, 0xf4, 0x7b, 0x0d, 0xcf, 0x35, 0xbe, 0xfe, 0x9b, 0xf0, 0xcc, 0x9d,
    0x5a, 0x02, 0x9a, 0x6c, 0x37, 0xce, 0xf6, 0xf1, 0xd0, 0xdf, 0x7b, 0x78, 0xf4, 0xbd, 0x3e,
    0x20, 0xd4, 0x07, 0xfd, 0x0c, 0xab, 0xbc, 0x7d, 0xb3, 0xe9, 0xce, 0x4f, 0x4b, 0x37, 0x57,
    0x4f, 0x76, 0x77, 0x6f, 0x56, 0xfb, 0x1a, 0x3e, 0x9d, 0x1d, 0x9e, 0x8e, 0xec, 0xee, 0xa3,
    0x7f, 0x7b, 0xd7, 0xa5, 0xbd, 0x69, 0xff, 0xf8, 0x71, 0x7c, 0xdd, 0xdd, 0xf9, 0x7a, 0xd3,
    0xf9, 0xad, 0x3f, 0xaf, 0x45, 0xb5, 0xa0, 0x7e, 0xef, 0x5c, 0x9d, 0x7e, 0xbd, 0xe9, 0x9c,
    0xf7, 0xb6, 0x2f, 0xbd, 0x0b, 0xaf, 0xe6, 0x41, 0x9d, 0xa7, 0xde, 0x76, 0x67, 0x7e, 0x5d,
    0x3c, 0xd5, 0xbe, 0x8e, 0x7b, 0xb5, 0x51, 0xfd, 0xbe, 0x77, 0x55, 0x8e, 0xec, 0x6e, 0x75,
    0x5d, 0x6a, 0xcf, 0x9c, 0x93, 0x73, 0xef, 0xaa, 0xf9, 0xe0, 0xf5, 0x46, 0xd5, 0xe9, 0xcd,
    0xb9, 0x77, 0xe1, 0x4f, 0x1d, 0xa8, 0x33, 0xbd, 0xbe, 0x2a, 0x3f, 0xd8, 0xdd, 0x9d, 0x00,
    0x7d, 0x5b, 0xfb, 0x1a, 0xed, 0x5e, 0x14, 0xaa, 0xe5, 0xcb, 0x76, 0x25, 0x72, 0x0a, 0x8d,
    0xbb, 0x35, 0x3c, 0xa4, 0xe7, 0x27, 0xff, 0xf0, 0xec, 0xc4, 0x3f, 0xbc, 0x6c, 0x57, 0x77,
    0xbf, 0x4e, 0xe1, 0x7b, 0xfd, 0xed, 0xa5, 0xf7, 0x50, 0xba, 0xbc, 0xab, 0x96, 0xeb, 0x77,
    0x5d, 0x78, 0x7f, 0x54, 0x2f, 0xd4, 0x22, 0xb7, 0x7d, 0x5a, 0xbe, 0xbc, 0xf2, 0xb9, 0xce,
    0xf8, 0xf0, 0xec, 0xd8, 0x3f, 0x82, 0x6f, 0xe3, 0xcb, 0x27, 0xaa, 0xf3, 0xdb, 0xe5, 0xfc,
    0x82, 0x75, 0xec, 0xf6, 0x39, 0xd6, 0xf9, 0x64, 0xdf, 0x9d, 0xef, 0x5e, 0x3c, 0x45, 0xbb,
    0x76, 0xf5, 0xb4, 0xd1, 0xc2, 0x32, 0x9d, 0xe3, 0xb3, 0xe3, 0xbd, 0x13, 0xf8, 0x76, 0xdf,
    0x3a, 0x0f, 0x8d, 0xf9, 0x63, 0x1d, 0x9e, 0xeb, 0x67, 0x95, 0x3d, 0x78, 0x7e, 0x17, 0x35,
    0x6d, 0x78, 0xf7, 0x09, 0xeb, 0x9f, 0x55, 0xea, 0xf0, 0xee, 0x3c, 0xaa, 0xdf, 0x41, 0xbf,
    0x9b, 0x43, 0xf9, 0x7c, 0x49, 0x30, 0x63, 0x7d, 0xa7, 0xd4, 0x38, 0x14, 0xf5, 0xab, 0xf0,
    0x53, 0x91, 0xf5, 0x03, 0x84, 0xa3, 0x3d, 0x7f, 0x44, 0xf8, 0x8e, 0xce, 0x2a, 0x1d, 0x28,
    0xe6, 0x7a, 0xf3, 0xc7, 0x06, 0xbc, 0x6b, 0x64, 0xdb, 0xea, 0xbc, 0x81, 0x6f, 0xa7, 0xf0,
    0xe6, 0xac, 0xea, 0x97, 0x9b, 0x9d, 0x01, 0x8e, 0xe1, 0x23, 0xb4, 0x7f, 0x25, 0xdf, 0x5d,
    0xee, 0x76, 0x9b, 0xd0, 0x9e, 0x53, 0xa9, 0x45, 0x76, 0x1b, 0xda, 0xec, 0x56, 0xb8, 0x7e,
    0x0a, 0xf5, 0xea, 0xde, 0xd9, 0x49, 0xa7, 0x0a, 0x65, 0x1f, 0x2f, 0x3d, 0xea, 0xb7, 0x7c,
    0x80, 0x3a, 0xdb, 0xa7, 0x80, 0xa7, 0x22, 0xbe, 0x1f, 0x72, 0x9f, 0x15, 0xc2, 0xe7, 0x8d,
    0xc0, 0xd6, 0xf4, 0xfb, 0x51, 0x17, 0xca, 0x77, 0x9b, 0x8f, 0x88, 0x1b, 0x1b, 0x70, 0x74,
    0x7d, 0x56, 0x00, 0xae, 0x4e, 0x18, 0xf5, 0x0a, 0xa7, 0xd8, 0x77, 0xd4, 0x06, 0x3c, 0x3a,
    0x1f, 0x55, 0x80, 0x4b, 0xc0, 0xda, 0x31, 0xc0, 0x0a, 0xb0, 0x75, 0xda, 0x04, 0x6b, 0x1f,
    0xed, 0x53, 0x7d, 0x0d, 0xd6, 0xe6, 0xd9, 0x49, 0xfd, 0x30, 0xc1, 0x43, 0x85, 0xca, 0xb6,
    0xc7, 0x27, 0xc2, 0x5b, 0x53, 0xc2, 0x0f, 0xe5, 0x8b, 0xd7, 0x12, 0x6f, 0x30, 0x86, 0xf1,
    0x68, 0x9b, 0xf0, 0xdc, 0xf1, 0x1e, 0x69, 0xbe, 0x3b, 0xcd, 0xc7, 0x33, 0x28, 0xdf, 0x3d,
    0x9e, 0x62, 0x9b, 0x1d, 0x9c, 0x8b, 0xe6, 0xd5, 0x29, 0xd1, 0x49, 0xa3, 0x7d, 0x19, 0xb5,
    0xad, 0xeb, 0xe6, 0xe3, 0x10, 0x71, 0x40, 0x38, 0x29, 0x01, 0xed, 0x54, 0x8a, 0xd0, 0x6f,
    0xb6, 0x7d, 0x8f, 0xed, 0xf4, 0x0a, 0xb5, 0x5d, 0x18, 0xe3, 0x91, 0x5d, 0x39, 0x8f, 0x6c,
    0xcf, 0xcb, 0xee, 0xb4, 0x72, 0x51, 0x84, 0xef, 0xa5, 0xc7, 0x8a, 0xa4, 0x8f, 0x4e, 0x9b,
    0x13, 0xb8, 0xd3, 0xe6, 0x10, 0xc7, 0x55, 0x10, 0xb8, 0x3f, 0xc2, 0x7e, 0x1a, 0xd0, 0x3e,
    0xdd, 0x92, 0xe5, 0x4f, 0xaa, 0x87, 0x34, 0x3f, 0x5f, 0xa7, 0x0d, 0xa6, 0xd7, 0xc7, 0x49,
    0x02, 0xf4, 0x5a, 0xb8, 0xa4, 0x7e, 0x7b, 0x15, 0x80, 0x15, 0xda, 0x6a, 0xcd, 0x1f, 0x6f,
    0xff, 0xdc, 0xfe, 0x0d, 0xb4, 0x71, 0xd3, 0x4c, 0xda, 0xbd, 0xdc, 0x6e, 0xc8, 0xbe, 0x11,
    0x38, 0x17, 0x44, 0x6f, 0x4e, 0xbb, 0x26, 0x61, 0x39, 0xa2, 0x35, 0x84, 0x6b, 0xa9, 0x33,
    0x00, 0xae, 0x8f, 0x2e, 0x3b, 0xfe, 0x91, 0xc0, 0x07, 0xac, 0x89, 0x29, 0xcc, 0xb3, 0x73,
    0xf8, 0x2d, 0x0c, 0x24, 0x7e, 0x88, 0x2e, 0xa9, 0x7d, 0xc4, 0x1d, 0x8e, 0xbb, 0xd0, 0xe6,
    0xb6, 0x10, 0x5e, 0x5c, 0x3b, 0xd0, 0x67, 0xe7, 0x5c, 0xd2, 0x38, 0xe2, 0xfc, 0x4c, 0xc2,
    0xf0, 0x0f, 0xcf, 0xa1, 0xff, 0x36, 0x7c, 0x6b, 0x3f, 0x51, 0xf9, 0xca, 0xd9, 0xb1, 0x83,
    0xbd, 0x3a, 0xab, 0x38, 0x50, 0xa6, 0x1f, 0x5d, 0x73, 0x3f, 0x3c, 0x0e, 0x68, 0xff, 0x7a,
    0x7c, 0x74, 0x56, 0xa5, 0x36, 0xb1, 0x7e, 0x3c, 0x8e, 0xce, 0x9c, 0xe8, 0xf0, 0x24, 0x85,
    0xc6, 0x65, 0xb7, 0xfa, 0x06, 0xf0, 0x4b, 0x6b, 0x13, 0xeb, 0x37, 0xe0, 0xdb, 0x75, 0x81,
    0x99, 0x28, 0x0f, 0xb0, 0xb7, 0xef, 0x22, 0xc0, 0x49, 0xb9, 0xd9, 0x44, 0x7a, 0xa9, 0x56,
    0xf8, 0xfc, 0x33, 0xe0, 0x21, 0x84, 0x5f, 0x86, 0xef, 0xf2, 0xec, 0xc4, 0xa9, 0x40, 0x19,
    0x26, 0xcd, 0x47, 0x08, 0xfd, 0x7f, 0x85, 0xe7, 0x16, 0xc1, 0xdb, 0xe9, 0x47, 0xc0, 0x37,
    0x0d, 0x05, 0xde, 0x9b, 0x42, 0xed, 0x1e, 0xfa, 0xa7, 0xf5, 0xce, 0xfd, 0xb7, 0x69, 0x4c,
    0x5e, 0x37, 0x63, 0xa6, 0x51, 0xad, 0xcf, 0x61, 0x1f, 0xe6, 0xb4, 0x8d, 0x65, 0x18, 0x87,
    0xb3, 0xe3, 0x84, 0x7e, 0xaf, 0xb3, 0x30, 0x8e, 0x2f, 0xbf, 0xd6, 0x0f, 0x05, 0x9d, 0x04,
    0xd7, 0x09, 0xd1, 0xb3, 0xca, 0x3f, 0x08, 0xf6, 0x73, 0xe0, 0xca, 0x8f, 0x53, 0xc4, 0xd5,
    0x8d, 0xbd, 0x32, 0x87, 0xe7, 0x74, 0x5b, 0x67, 0x75, 0xc0, 0x0f, 0xf1, 0xcc, 0xee, 0xde,
    0x8d, 0xa9, 0x7b, 0x9e, 0x19, 0x13, 0xf0, 0x07, 0xa0, 0xcb, 0x0e, 0xf6, 0x37, 0xe1, 0xfe,
    0x13, 0x43, 0x5b, 0xd5, 0xf3, 0xc2, 0xa5, 0x3a, 0xb7, 0xc7, 0x62, 0xad, 0x0d, 0xa9, 0xdd,
    0xb4, 0x81, 0xbc, 0xa2, 0x1d, 0xa9, 0x30, 0xee, 0x00, 0x3e, 0x8b, 0xc4, 0x8f, 0x01, 0xef,
    0xde, 0x73, 0xe0, 0x05, 0x99, 0xfe, 0xe7, 0x7b, 0x47, 0xa9, 0xf1, 0x4e, 0xa1, 0x5e, 0x66,
    0xfd, 0xbb, 0xb6, 0x3a, 0xd7, 0x63, 0x28, 0xab, 0xad, 0x11, 0x8d, 0xb6, 0x80, 0x86, 0xdd,
    0xf9, 0x3d, 0xb4, 0x13, 0x3f, 0x9f, 0x17, 0xa6, 0x47, 0x44, 0x1f, 0x30, 0xaf, 0xb4, 0x9e,
    0x3e, 0xea, 0x31, 0x3d, 0x49, 0xda, 0x11, 0xfc, 0xa0, 0xc5, 0x74, 0x10, 0xaf, 0xb1, 0x23,
    0x52, 0x53, 0xd6, 0x39, 0xd0, 0xb6, 0xda, 0x56, 0xcc, 0x0f, 0xa6, 0x88, 0x63, 0x5a, 0xcb,
    0xdd, 0xb9, 0xa4, 0x43, 0xd1, 0x3e, 0xe3, 0xa7, 0x09, 0x6d, 0xfc, 0x5f, 0xea, 0xde, 0xad,
    0x71, 0x9c, 0x69, 0x17, 0xfe, 0x41, 0xeb, 0xe0, 0x35, 0x10, 0x7a, 0x9a, 0xc3, 0xb0, 0x31,
    0x04, 0xa7, 0x31, 0xd8, 0x80, 0xcf, 0x00, 0x67, 0x80, 0x60, 0x08, 0xd3, 0x21, 0x24, 0xf0,
    0xbf, 0xda, 0x48, 0xb2, 0x64, 0xcb, 0x0e, 0xcc, 0xd3, 0xcf, 0xbb, 0xd6, 0x77, 0x30, 0xd7,
    0x13, 0x5b, 0xd6, 0xa6, 0x54, 0xdb, 0xbb, 0xaa, 0x46, 0x6a, 0x7c, 0x3a, 0xd7, 0xbf, 0x26,
    0x47, 0xb8, 0x3b, 0x82, 0x57, 0x20, 0x5f, 0xed, 0x1b, 0xfb, 0x79, 0xfe, 0x4a, 0x86, 0x48,
    0xe6, 0x7d, 0x80, 0x31, 0xbc, 0x77, 0xde, 0x6b, 0xaf, 0x63, 0x9f, 0x3f, 0xdf, 0x3b, 0xf1,
    0x8d, 0x7f, 0x1c, 0x5a, 0xda, 0xda, 0x3c, 0xc1, 0xcb, 0xa7, 0x74, 0xbf, 0xd5, 0xfc, 0x7b,
    0x17, 0x89, 0xf9, 0xf0, 0xb7, 0x43, 0x87, 0xee, 0x67, 0x3a, 0xd6, 0xc5, 0x6d, 0x65, 0x78,
    0x3e, 0x96, 0x9c, 0xcf, 0x13, 0xf1, 0x5e, 0x49, 0x6f, 0x62, 0xae, 0x62, 0x7c, 0xc1, 0x47,
    0xbd, 0x01, 0xdf, 0x27, 0x3a, 0xff, 0xe7, 0x0a, 0x8e, 0x1f, 0x2b, 0x5e, 0x2d, 0xf6, 0x53,
    0x3b, 0x44, 0x13, 0xb3, 0xb3, 0xc1, 0x8f, 0xff, 0x02, 0x3a, 0x6d, 0xa3, 0xec, 0x0f, 0xd2,
    0x64, 0xe7, 0x2f, 0xf8, 0x85, 0x41, 0xb3, 0xf0, 0xdc, 0xe0, 0xa2, 0xf3, 0xef, 0x31, 0xc8,
    0xfc, 0x26, 0x3c, 0x8f, 0x7c, 0xe1, 0x95, 0xe7, 0x8f, 0x7a, 0x00, 0xcb, 0x02, 0x31, 0x1f,
    0xb6, 0xcb, 0x3c, 0x43, 0x1b, 0xeb, 0xcb, 0x94, 0x05, 0xe6, 0x58, 0x72, 0x3e, 0x78, 0x36,
    0xa6, 0xc5, 0xf3, 0x50, 0xed, 0xb5, 0x18, 0x9f, 0xcf, 0x8d, 0xd7, 0x2b, 0xf5, 0x0b, 0xbc,
    0xe3, 0x63, 0x24, 0x78, 0x80, 0xd0, 0x5d, 0x04, 0xdf, 0xd3, 0xce, 0x39, 0xb3, 0xff, 0xe2,
    0x79, 0x28, 0xfb, 0xf8, 0xde, 0x39, 0x43, 0xeb, 0xfc, 0x6d, 0xbc, 0x1d, 0xe9, 0x7f, 0xe0,
    0xf4, 0x5f, 0x51, 0xf4, 0x4f, 0x7a, 0x83, 0x9c, 0xff, 0x7f, 0x78, 0x97, 0x84, 0x0e, 0x92,
    0xa5, 0x70, 0xc9, 0xf2, 0x18, 0xee, 0x92, 0x87, 0xef, 0x8f, 0x7d, 0x9e, 0xfb, 0x25, 0x4c,
    0x48, 0x97, 0xaf, 0x2c, 0x4b, 0xac, 0x7a, 0x96, 0xb1, 0x56, 0xf3, 0x6e, 0xf1, 0x5a, 0x91,
    0x4f, 0x02, 0x63, 0x7f, 0x95, 0x6e, 0x67, 0xdd, 0x5f, 0x7e, 0x1e, 0x7f, 0x07, 0x73, 0x16,
    0x34, 0xce, 0x4d, 0xe7, 0x61, 0xfa, 0x9d, 0x3d, 0xfb, 0x63, 0x21, 0x1f, 0xff, 0xfd, 0x9d,
    0x05, 0x73, 0xab, 0xa1, 0xee, 0x10, 0x83, 0xee, 0xc0, 0x7b, 0xaa, 0xe8, 0x8b, 0xf8, 0xa2,
    0x6b, 0x05, 0xb4, 0xaa, 0xed, 0x13, 0xeb, 0x2d, 0x77, 0x59, 0x5a, 0x45, 0xfd, 0x7c, 0x38,
    0x3b, 0xfc, 0xed, 0x75, 0xf1, 0x19, 0x4d, 0x3a, 0xac, 0xbb, 0x94, 0xf3, 0x3b, 0x71, 0x16,
    0xbf, 0x43, 0x7d, 0xfe, 0xdf, 0xf3, 0xbb, 0xff, 0x68, 0xef, 0x52, 0x7e, 0xc7, 0x34, 0x4f,
    0x47, 0x3d, 0xd5, 0xc6, 0xef, 0x04, 0x3f, 0xd2, 0xc6, 0x8a, 0xec, 0xfc, 0x4e, 0xbf, 0xff,
    0x53, 0x47, 0xc1, 0x9b, 0xef, 0x52, 0x1e, 0xf4, 0x07, 0xee, 0xb5, 0xf9, 0x9d, 0xf4, 0x5e,
    0x0d, 0x65, 0xbf, 0xd7, 0x86, 0x5d, 0x92, 0xbb, 0xd7, 0xe6, 0x5d, 0x4c, 0xef, 0x35, 0xc9,
    0xbe, 0xd7, 0x4e, 0xc1, 0xbd, 0x0e, 0x59, 0x37, 0xd1, 0xc6, 0xda, 0xda, 0xef, 0xb5, 0x2e,
    0x99, 0x66, 0x02, 0x96, 0x31, 0x9d, 0xd2, 0x7b, 0x69, 0xd8, 0x60, 0xc6, 0x1e, 0x68, 0x74,
    0xdf, 0x2c, 0xa1, 0x23, 0x83, 0xd7, 0x6a, 0x74, 0xf4, 0x4f, 0x01, 0x1d, 0x89, 0x35, 0x15,
    0x91, 0x29, 0xeb, 0xea, 0xc3, 0xed, 0x9f, 0xbd, 0x73, 0xfa, 0x58, 0xfa, 0xba, 0x17, 0x01,
    0x25, 0x2f, 0xdb, 0x81, 0x75, 0xcc, 0x02, 0x7d, 0x9c, 0x64, 0xb8, 0xa0, 0x5f, 0xf1, 0xb7,
    0xdf, 0x66, 0x1b, 0x49, 0x7f, 0x64, 0x57, 0xca, 0xf5, 0xaf, 0x87, 0xca, 0x4e, 0x1c, 0xd0,
    0x68, 0x0b, 0x89, 0x7d, 0x28, 0xb6, 0x49, 0x50, 0x4e, 0x57, 0xbf, 0xd4, 0xf9, 0x19, 0x3c,
    0xeb, 0x12, 0x8f, 0x88, 0xd0, 0x06, 0x24, 0x59, 0x4e, 0x7b, 0x43, 0x63, 0x87, 0xed, 0x23,
    0xfb, 0x6d, 0xd0, 0x07, 0x4b, 0xf8, 0x2c, 0xf9, 0x05, 0x50, 0xdf, 0x7b, 0xe2, 0xef, 0x1b,
    0x74, 0x4a, 0xff, 0xb5, 0x26, 0xf3, 0x2a, 0xb0, 0x67, 0x6c, 0x34, 0x38, 0x27, 0x3d, 0x58,
    0x11, 0x3a, 0xc7, 0x6f, 0xce, 0x48, 0xd1, 0x9f, 0xa1, 0x7b, 0xf7, 0x89, 0x07, 0x9d, 0xf5,
    0x73, 0x32, 0x36, 0xe1, 0x31, 0xfd, 0x0e, 0xc8, 0xda, 0xcc, 0x9d, 0x4f, 0x69, 0xa9, 0x3a,
    0xe7, 0xe9, 0x09, 0x1d, 0x87, 0xce, 0x6d, 0xa2, 0xe4, 0x0e, 0xd3, 0xa1, 0x38, 0x5f, 0xa6,
    0xb6, 0x9b, 0xa5, 0x3c, 0x35, 0xf4, 0x69, 0xfd, 0xec, 0x35, 0x7d, 0xd2, 0xa6, 0x0f, 0x08,
    0x87, 0xd7, 0xa6, 0xcb, 0x2b, 0x3e, 0xcb, 0xb5, 0x3a, 0x4b, 0x31, 0x3e, 0xda, 0xf5, 0x53,
    0x1f, 0xea, 0x59, 0x3f, 0x08, 0xf2, 0x88, 0x5e, 0xc6, 0x7f, 0xa2, 0xad, 0xb3, 0x97, 0x59,
    0x71, 0x3f, 0x71, 0x1e, 0x3e, 0xef, 0x15, 0x8e, 0xcb, 0xe7, 0xaf, 0x8f, 0x91, 0xb9, 0x8b,
    0x0f, 0x9d, 0x8e, 0x07, 0xc5, 0x72, 0x04, 0x68, 0xfc, 0xb3, 0x8a, 0xdf, 0xf1, 0x0a, 0xee,
    0xb9, 0x17, 0xd9, 0xfd, 0xf4, 0x3e, 0x52, 0x3b, 0xc5, 0x43, 0xba, 0x22, 0x1e, 0x37, 0x52,
    0x05, 0xfe, 0x6e, 0x86, 0x7e, 0x8f, 0xb7, 0x31, 0xc8, 0x5e, 0xaf, 0xd3, 0x07, 0xfb, 0xf0,
    0xda, 0xd8, 0x92, 0x9f, 0xa3, 0x8f, 0xa9, 0xfb, 0xd4, 0xee, 0x77, 0xd1, 0x46, 0xf3, 0xc9,
    0x35, 0xb8, 0xf8, 0x9b, 0xcf, 0x3b, 0x1f, 0xec, 0xa2, 0xe7, 0x0e, 0xbd, 0x0f, 0x67, 0x35,
    0x5f, 0x92, 0x6f, 0xcb, 0x15, 0xbe, 0x2d, 0xe4, 0x21, 0xbc, 0x46, 0x3c, 0x13, 0x9f, 0xe5,
    0x5a, 0xd8, 0x69, 0x15, 0xb0, 0xeb, 0xa5, 0xae, 0xba, 0x56, 0x7a, 0x75, 0xf5, 0xcb, 0xb8,
    0xe3, 0x96, 0x71, 0xe7, 0xa5, 0xdd, 0x0b, 0x77, 0xd8, 0xdb, 0x66, 0xce, 0x96, 0xd6, 0x4f,
    0xac, 0xe8, 0x77, 0xc7, 0x7b, 0x94, 0xf4, 0x84, 0x7b, 0x49, 0x73, 0x0f, 0x9b, 0x9d, 0xa7,
    0x13, 0x6c, 0xe6, 0x46, 0xdb, 0xf4, 0xad, 0x7c, 0x3a, 0xe4, 0xab, 0xeb, 0xf4, 0x70, 0x8f,
    0x2f, 0xac, 0x7b, 0xb7, 0x03, 0xe6, 0xa7, 0x4f, 0x19, 0x3a, 0x4e, 0x6d, 0xbf, 0xca, 0x1b,
    0x9d, 0x91, 0xdd, 0xde, 0xc7, 0x39, 0x7c, 0xa4, 0x3c, 0x52, 0xf9, 0xae, 0x7a, 0x20, 0x4f,
    0x30, 0xf7, 0x07, 0xe1, 0x37, 0xeb, 0xb0, 0x3f, 0x23, 0xcc, 0xfa, 0x33, 0x2a, 0xc2, 0x27,
    0xe7, 0xb6, 0xe8, 0x0c, 0xfe, 0x7a, 0x76, 0x1a, 0x30, 0xe7, 0x25, 0x9f, 0xe3, 0xc8, 0xe4,
    0xe3, 0xd4, 0x26, 0xfc, 0x27, 0xd5, 0xc3, 0xf3, 0xf3, 0xd6, 0xef, 0xd8, 0x44, 0xf2, 0x50,
    0x9f, 0x18, 0xf7, 0x54, 0xfe, 0x4e, 0xc9, 0x75, 0xe2, 0xf7, 0x86, 0x9f, 0xc2, 0x1c, 0xd7,
    0x45, 0x58, 0xd7, 0x79, 0x95, 0xb6, 0xdd, 0x55, 0x77, 0x0b, 0xf7, 0xe1, 0x17, 0xef, 0x03,
    0xc1, 0x6d, 0x86, 0x2f, 0xc1, 0x7c, 0x26, 0x31, 0xef, 0x7b, 0x75, 0xdd, 0xc9, 0xcc, 0xc1,
    0x6f, 0x09, 0xbc, 0xb9, 0x9c, 0x97, 0xb8, 0x63, 0xc6, 0xfc, 0x0d, 0xfe, 0x62, 0xca, 0x51,
    0xbf, 0xb4, 0x3b, 0xc5, 0x7b, 0x70, 0x1e, 0x9e, 0xcb, 0xc6, 0xe0, 0xfd, 0xd6, 0x79, 0x7b,
    0x5f, 0x06, 0x5f, 0x37, 0xec, 0x0b, 0xde, 0xe3, 0x2e, 0xd2, 0x45, 0xdc, 0xe9, 0x33, 0xed,
    0x81, 0x7f, 0x0a, 0xba, 0xe1, 0x3d, 0xe9, 0xbc, 0x2f, 0x48, 0x36, 0x54, 0x5a, 0x2c, 0xe3,
    0x77, 0x67, 0xf6, 0x71, 0x40, 0xfe, 0xdf, 0x7e, 0x4b, 0xb7, 0x25, 0x26, 0xca, 0x77, 0xc3,
    0x53, 0xdc, 0xa5, 0x3e, 0xf3, 0x49, 0xbc, 0xc3, 0x6b, 0x17, 0xee, 0x6b, 0x5b, 0xd7, 0x3f,
    0x7e, 0x69, 0xec, 0x97, 0xf6, 0x5e, 0x5f, 0xf1, 0x63, 0x43, 0x27, 0xd2, 0x6d, 0xb0, 0x81,
    0x4b, 0xdb, 0x3e, 0xf0, 0x83, 0x8e, 0xf0, 0x39, 0xe6, 0xe9, 0x36, 0xf5, 0x9b, 0x7a, 0x23,
    0xde, 0x84, 0xf4, 0x4c, 0x94, 0xfd, 0xbf, 0x58, 0xce, 0xe7, 0xfd, 0x65, 0xe4, 0xd7, 0x9a,
    0x8e, 0xfb, 0x5f, 0x9f, 0x7b, 0x84, 0x73, 0xaf, 0x0e, 0x37, 0xda, 0xd9, 0xb3, 0x1f, 0xb0,
    0x7e, 0xab, 0x38, 0x30, 0xe4, 0x95, 0xa1, 0x0b, 0xda, 0xee, 0xe3, 0x48, 0xc8, 0xbc, 0xec,
    0x2f, 0xb6, 0x70, 0xee, 0xdd, 0x63, 0x07, 0xcf, 0x37, 0x7b, 0xee, 0xf2, 0x5c, 0x95, 0x4f,
    0x75, 0xa1, 0xea, 0xb1, 0xa5, 0x9d, 0x29, 0xde, 0xf1, 0xbe, 0xd2, 0x3b, 0x80, 0x5f, 0x91,
    0x46, 0x77, 0x23, 0x9a, 0x91, 0x1c, 0x11, 0x77, 0x68, 0xb4, 0xd1, 0xec, 0x86, 0xb0, 0x23,
    0xc3, 0x38, 0x3d, 0x8f, 0x37, 0x7d, 0x6f, 0x7c, 0xc9, 0xff, 0xd0, 0xa7, 0x36, 0xe2, 0x7b,
    0xa8, 0xdf, 0xa1, 0x71, 0xce, 0x87, 0x80, 0xf2, 0xe6, 0x13, 0xf9, 0xdf, 0x33, 0xf0, 0xbf,
    0x30, 0x37, 0x2f, 0xbb, 0x1e, 0x94, 0x41, 0x60, 0x23, 0x8b, 0xf5, 0x44, 0xda, 0x7a, 0x1a,
    0xab, 0x6a, 0xf4, 0xf0, 0x36, 0xe4, 0xf9, 0xae, 0x69, 0x5d, 0x55, 0xb6, 0x7d, 0x66, 0xea,
    0xb5, 0xf3, 0x25, 0x9e, 0x18, 0xe1, 0x39, 0x15, 0xad, 0x25, 0x12, 0x3c, 0xa5, 0x55, 0xbc,
    0x7c, 0xae, 0xb3, 0xe2, 0x31, 0x8e, 0x2c, 0xd3, 0xc0, 0xd6, 0x38, 0x5b, 0xd7, 0x7b, 0x32,
    0x9b, 0x90, 0x8e, 0x05, 0x72, 0xb5, 0x25, 0x7c, 0x9f, 0xf0, 0x8e, 0x73, 0xe1, 0xbf, 0xd7,
    0x64, 0x23, 0xe9, 0x7f, 0x7f, 0x15, 0x7b, 0x79, 0x16, 0x72, 0x94, 0xd7, 0x87, 0x73, 0x6a,
    0xb7, 0x3d, 0x92, 0x97, 0xc1, 0x59, 0x9f, 0x5b, 0xde, 0xf7, 0xab, 0xe9, 0x3d, 0x7f, 0xa1,
    0xc2, 0x71, 0x8c, 0x28, 0x7a, 0xea, 0xc6, 0x6d, 0x69, 0xdb, 0xf9, 0x93, 0x75, 0x4b, 0x8b,
    0xb8, 0xc2, 0x7f, 0xb0, 0xa6, 0xfd, 0x07, 0x1b, 0x8c, 0xfc, 0xa7, 0x62, 0x8f, 0x9f, 0x1d,
    0x2b, 0xc9, 0xa2, 0x26, 0xea, 0xe9, 0x0b, 0xa4, 0x77, 0x11, 0x5f, 0x88, 0xa4, 0xaf, 0x85,
    0x07, 0x67, 0xa8, 0xd9, 0x3d, 0xe3, 0x5d, 0xac, 0xaf, 0x1b, 0xfd, 0xb5, 0x17, 0xf2, 0x05,
    0x7f, 0x15, 0xc6, 0xc1, 0xb9, 0xa1, 0x4e, 0x44, 0xe3, 0x21, 0xcf, 0x02, 0xfb, 0x6f, 0x3c,
    0x32, 0xf2, 0x9a, 0x7d, 0xc7, 0x0b, 0x21, 0x1b, 0x63, 0xf1, 0x5e, 0x6a, 0x5f, 0xa5, 0xba,
    0x3c, 0xf5, 0x03, 0xe2, 0x9d, 0x1a, 0xe8, 0xf2, 0x32, 0xd5, 0xb9, 0x84, 0x6f, 0xcd, 0x90,
    0x36, 0x3d, 0x1d, 0xf9, 0xab, 0xd7, 0xca, 0xc8, 0x0a, 0x61, 0xa3, 0xa5, 0x3a, 0xdd, 0x52,
    0x91, 0x67, 0xd3, 0x2e, 0x30, 0x6d, 0x94, 0xec, 0xf8, 0x64, 0x37, 0xa7, 0x32, 0xc0, 0x79,
    0xd3, 0x3b, 0x75, 0xdb, 0x95, 0xf9, 0x39, 0xcb, 0xfe, 0xf7, 0x94, 0xd7, 0xb0, 0x6c, 0xb1,
    0x1f, 0x4d, 0x6f, 0xca, 0xcc, 0x4d, 0xf3, 0x13, 0x34, 0x8d, 0x18, 0xcd, 0x38, 0xeb, 0xb7,
    0xed, 0x6b, 0xcd, 0x07, 0x5d, 0xfc, 0x4d, 0x53, 0x26, 0xa6, 0x3c, 0xcf, 0x0b, 0xca, 0x75,
    0xf3, 0x5c, 0x59, 0x3f, 0xe4, 0x58, 0x93, 0xdd, 0xdf, 0x21, 0x6c, 0x75, 0xc3, 0xff, 0x9e,
    0xad, 0xe2, 0x3b, 0xef, 0x7f, 0xf1, 0xb7, 0x8e, 0xf6, 0x6f, 0x75, 0x2b, 0x2d, 0x71, 0xaf,
    0x16, 0x90, 0xf5, 0x21, 0x68, 0xf2, 0x24, 0x6b, 0xcb, 0x88, 0x6f, 0xf3, 0xf9, 0xea, 0xbf,
    0xfa, 0xa1, 0x98, 0x91, 0x61, 0xb3, 0xea, 0xb6, 0x0c, 0xdb, 0x99, 0xc8, 0x8b, 0xac, 0xfa,
    0x41, 0x33, 0xc6, 0xba, 0x6d, 0xdf, 0xce, 0xd3, 0x6e, 0xdc, 0xb2, 0x9d, 0x07, 0xfb, 0x5d,
    0x0b, 0xcf, 0x68, 0xac, 0xc5, 0x21, 0xd0, 0x5e, 0x24, 0x9f, 0x35, 0xeb, 0x57, 0x1f, 0xe9,
    0xe4, 0x74, 0xdf, 0x59, 0x4e, 0xff, 0x9e, 0x1e, 0xda, 0xc4, 0xfb, 0x3b, 0x6e, 0x7d, 0xe8,
    0x64, 0x1c, 0x96, 0x79, 0x0c, 0xc7, 0x63, 0x7e, 0x33, 0xaf, 0xeb, 0x9c, 0x68, 0xdf, 0xc1,
    0x80, 0x35, 0x51, 0x4c, 0x75, 0xc9, 0xb1, 0x4d, 0x37, 0xda, 0x64, 0x62, 0x6c, 0xc2, 0x8f,
    0x74, 0xbe, 0x30, 0x44, 0x1d, 0xed, 0x8b, 0xde, 0x61, 0xbf, 0x83, 0x0b, 0xf3, 0xa7, 0x7f,
    0x22, 0x8e, 0x03, 0xef, 0x1e, 0xf0, 0xf9, 0xb9, 0x11, 0x9b, 0x8b, 0x5b, 0x71, 0x27, 0x30,
    0x4d, 0x16, 0x3e, 0x1a, 0x4e, 0x0e, 0x68, 0xd3, 0xe3, 0x3e, 0x1f, 0x7c, 0xa1, 0x6f, 0xc3,
    0xbf, 0xf0, 0xb9, 0x65, 0x40, 0x7e, 0x21, 0xf7, 0x59, 0xf0, 0xa9, 0xac, 0x6d, 0xa6, 0xf6,
    0xf4, 0x76, 0xda, 0xfe, 0xde, 0xf9, 0xc0, 0x5b, 0xed, 0x7b, 0x6a, 0xe3, 0x1b, 0xc5, 0x76,
    0x48, 0xf8, 0x3b, 0xac, 0x71, 0x1e, 0xa4, 0x2b, 0x58, 0x23, 0xeb, 0x76, 0x07, 0xbb, 0xff,
    0x7d, 0x1d, 0x9a, 0x9c, 0xcd, 0xf9, 0x7f, 0xfb, 0x24, 0x7b, 0x0d, 0xff, 0x81, 0xf2, 0xfb,
    0xe5, 0x1e, 0x6b, 0x74, 0x34, 0x16, 0xb2, 0x27, 0xab, 0x5f, 0x1b, 0x6b, 0x29, 0xa2, 0xbb,
    0x9f, 0x3d, 0xcb, 0x03, 0x53, 0xdb, 0xb1, 0xb6, 0x56, 0xeb, 0x31, 0xf5, 0x3c, 0x83, 0x1f,
    0xf8, 0x44, 0x21, 0xaf, 0x37, 0xf6, 0x74, 0x3b, 0x34, 0xe7, 0x61, 0xee, 0x53, 0xba, 0xce,
    0xd8, 0xca, 0x7c, 0xb3, 0xc8, 0x2e, 0xd4, 0xcf, 0xdf, 0x03, 0xde, 0x5a, 0x23, 0x5b, 0x2f,
    0xbb, 0x34, 0xde, 0x74, 0xf1, 0xb2, 0x7b, 0x27, 0x7c, 0x08, 0x45, 0x3e, 0x3e, 0xaf, 0x65,
    0xed, 0xcf, 0x4f, 0x1c, 0x7b, 0xd0, 0x61, 0x1f, 0x9c, 0x8a, 0x21, 0xdf, 0x16, 0x17, 0xd3,
    0xc8, 0x3a, 0x6e, 0xc1, 0x38, 0x92, 0xce, 0xf4, 0xfd, 0x7b, 0x72, 0x32, 0x7e, 0xd5, 0x16,
    0xf5, 0x8e, 0xb8, 0xeb, 0xc1, 0x49, 0xe8, 0x72, 0x53, 0xe9, 0x6b, 0x63, 0xdf, 0xaa, 0x1a,
    0xa4, 0xab, 0xf2, 0xd8, 0x94, 0x41, 0x57, 0x5a, 0x6c, 0xea, 0x33, 0x7b, 0xfe, 0x84, 0x09,
    0xee, 0x79, 0xde, 0xe7, 0x6e, 0xc8, 0xbf, 0xfe, 0x38, 0xd5, 0x39, 0x2c, 0x31, 0x41, 0xbf,
    0xbe, 0x8b, 0xce, 0x28, 0xce, 0x9c, 0x91, 0xc1, 0xaf, 0xda, 0x88, 0x43, 0x28, 0x91, 0x6d,
    0x38, 0xa1, 0x11, 0x53, 0x91, 0x32, 0x9a, 0x75, 0xf3, 0x99, 0x75, 0x8c, 0x9c, 0x9c, 0xaf,
    0xb3, 0x73, 0x31, 0x6c, 0x5f, 0x6d, 0x0f, 0x7f, 0x0c, 0x37, 0xd6, 0xb1, 0x0a, 0x62, 0x91,
    0xcf, 0x19, 0xba, 0x3f, 0xf9, 0x8a, 0x7e, 0xe0, 0x59, 0x45, 0x8e, 0xdf, 0x7c, 0x09, 0xc2,
    0x4e, 0x67, 0xf8, 0x3b, 0x50, 0x07, 0x2c, 0x89, 0x07, 0x6a, 0x7b, 0x1f, 0xb5, 0xed, 0x77,
    0xd9, 0x90, 0xc0, 0x13, 0x7b, 0xd6, 0xd8, 0xab, 0xa9, 0x5b, 0x14, 0xda, 0x66, 0x19, 0x7e,
    0xc8, 0x05, 0x83, 0x47, 0x9a, 0xbc, 0x34, 0xd4, 0x6d, 0x96, 0x3c, 0x1f, 0x60, 0x9d, 0xaf,
    0x63, 0xfc, 0x36, 0x3d, 0xcc, 0x88, 0xad, 0x64, 0xbe, 0xa5, 0xc7, 0x75, 0x32, 0x58, 0x20,
    0xfd, 0xa6, 0xae, 0x67, 0xe8, 0x24, 0xe6, 0x73, 0x86, 0x1f, 0xa5, 0x90, 0x1f, 0xea, 0xe7,
    0xe9, 0x8f, 0x4c, 0xbd, 0xc0, 0x3c, 0xaf, 0x58, 0x62, 0x22, 0x72, 0xb1, 0x36, 0x8c, 0x03,
    0xfe, 0x18, 0x71, 0x4f, 0x8c, 0x33, 0x0a, 0xc9, 0xa7, 0xa1, 0xfb, 0xab, 0x28, 0x7e, 0xc0,
    0x30, 0x75, 0x1f, 0xe3, 0xcc, 0x8c, 0xb9, 0x1b, 0xb4, 0x69, 0xdb, 0x47, 0x2d, 0x6e, 0x55,
    0xfd, 0x5b, 0xb6, 0x98, 0xab, 0x71, 0x3e, 0xf9, 0xf8, 0x9e, 0x7d, 0x9f, 0xc6, 0x24, 0xcf,
    0xac, 0x86, 0xcf, 0xc9, 0x5c, 0xbb, 0xf8, 0x9d, 0x9d, 0x76, 0x8b, 0x64, 0x88, 0x2f, 0xec,
    0xa1, 0x27, 0x18, 0xe7, 0x6f, 0xdc, 0x5f, 0x73, 0x6e, 0xc6, 0xde, 0x14, 0xea, 0x8a, 0x79,
    0x4b, 0x46, 0x0f, 0x30, 0xe5, 0x4d, 0xd6, 0x4e, 0xc8, 0xc5, 0xbd, 0x98, 0x7f, 0x10, 0xcf,
    0xd1, 0x2f, 0x69, 0xec, 0x79, 0x81, 0x9f, 0x3b, 0xe7, 0x63, 0xb7, 0xad, 0x4b, 0xc3, 0x63,
    0xad, 0x0c, 0xbd, 0x99, 0x3c, 0xd6, 0xc9, 0xe1, 0x31, 0xf2, 0xb1, 0x9a, 0x73, 0x43, 0xc5,
    0xc5, 0xb9, 0xe9, 0x73, 0x23, 0xfe, 0x35, 0xdb, 0x94, 0xdd, 0x0d, 0x83, 0x37, 0x68, 0xbc,
    0x5d, 0xc0, 0xcb, 0x0c, 0x9d, 0xc2, 0xe0, 0x43, 0x16, 0x1e, 0xc6, 0xb8, 0xc5, 0x6d, 0xc6,
    0x55, 0xc4, 0x3f, 0xb5, 0x18, 0x8f, 0xc9, 0x2b, 0x72, 0xfc, 0xfc, 0xd3, 0xc2, 0xcf, 0xdf,
    0x0f, 0x06, 0x1d, 0x1f, 0xe4, 0x73, 0xce, 0x46, 0xcf, 0xe0, 0x15, 0x95, 0xcf, 0xa2, 0x1d,
    0x0a, 0x63, 0x53, 0x73, 0x9b, 0xcd, 0x99, 0x91, 0x67, 0x3a, 0x7d, 0x09, 0xfd, 0x2c, 0xef,
    0x0b, 0x40, 0x67, 0x5b, 0xc2, 0x3c, 0x83, 0x20, 0x63, 0x67, 0x68, 0x38, 0x54, 0x94, 0x0b,
    0x1f, 0x45, 0x7e, 0x8b, 0x7e, 0xd4, 0xcc, 0xbe, 0x88, 0xef, 0x9a, 0x78, 0x8c, 0x22, 0x5a,
    0x7e, 0xff, 0x73, 0x6e, 0xaf, 0x10, 0x5f, 0x7a, 0x82, 0x67, 0xfa, 0xa9, 0xdf, 0xff, 0xfd,
    0xb8, 0x03, 0x0f, 0x02, 0xcb, 0xdb, 0x93, 0x7e, 0x30, 0x81, 0xef, 0x92, 0x7a, 0x0e, 0xf0,
    0xce, 0xa7, 0xf0, 0x5f, 0x1d, 0xf8, 0xee, 0xbb, 0xff, 0x08, 0xbf, 0x83, 0xc0, 0xfa, 0x09,
    0x1b, 0x7f, 0xb3, 0xc6, 0x7a, 0x95, 0x41, 0x8f, 0x2e, 0xe2, 0x2b, 0x34, 0xac, 0xcb, 0x3f,
    0x60, 0x5d, 0x32, 0x38, 0x44, 0x4b, 0x0c, 0x84, 0xf1, 0xb9, 0xd9, 0xfb, 0x6f, 0xf0, 0x46,
    0xcd, 0x6d, 0x25, 0x2e, 0x75, 0x68, 0xc7, 0x28, 0xf0, 0xdc, 0xc5, 0x9d, 0xd7, 0x78, 0x4f,
    0xde, 0x50, 0x7b, 0x39, 0xf1, 0x5b, 0xa0, 0xd7, 0x3a, 0x6e, 0x58, 0xea, 0x13, 0x85, 0x7b,
    0x63, 0xc2, 0x16, 0xdb, 0x9e, 0x1e, 0x47, 0x1a, 0xd8, 0xe2, 0x48, 0x26, 0xdf, 0xd0, 0x74,
    0x07, 0xed, 0x11, 0x43, 0xfe, 0x3d, 0x66, 0xd6, 0xad, 0xf4, 0x97, 0x40, 0xf8, 0x35, 0x6e,
    0xd6, 0x57, 0x1d, 0xdf, 0x7f, 0x09, 0xd8, 0x9f, 0xa7, 0x61, 0x0b, 0x6c, 0x7a, 0x87, 0x81,
    0xc0, 0xb9, 0x45, 0x76, 0xdf, 0x91, 0xba, 0x0f, 0x33, 0xb8, 0x0f, 0x73, 0x27, 0x6c, 0xce,
    0xf7, 0x41, 0xc6, 0xa7, 0xd9, 0x7f, 0x89, 0x3e, 0x39, 0x03, 0x73, 0x80, 0xf7, 0x43, 0xc6,
    0x11, 0x13, 0x68, 0xf0, 0x3b, 0xa1, 0x9f, 0x68, 0x3c, 0x45, 0xc5, 0xeb, 0x06, 0xe4, 0xcb,
    0x1a, 0x76, 0x40, 0x9c, 0xda, 0x51, 0x6a, 0x5e, 0x23, 0xf8, 0xdd, 0x33, 0x3c, 0x33, 0xe2,
    0x9d, 0x10, 0x93, 0x90, 0xe3, 0x1f, 0x60, 0xdf, 0x65, 0xfd, 0x42, 0x79, 0xdc, 0x62, 0x43,
    0xb6, 0xd6, 0x98, 0xb5, 0xc1, 0x43, 0xf9, 0xfc, 0xaa, 0x19, 0x1b, 0x22, 0x1b, 0x5f, 0xab,
    0x98, 0x64, 0xe6, 0x3b, 0x17, 0x11, 0xbb, 0xf9, 0xf0, 0x5b, 0x56, 0x9f, 0x97, 0x1e, 0x93,
    0xf0, 0x3b, 0x99, 0xeb, 0x30, 0xe5, 0x0d, 0x8c, 0x35, 0xf5, 0x64, 0x8c, 0xdf, 0xe0, 0x3f,
    0x61, 0xff, 0x64, 0x63, 0xf8, 0xa6, 0xfd, 0x23, 0x6c, 0x92, 0x6c, 0x3c, 0x55, 0xc7, 0x6c,
    0xbe, 0xf6, 0x8a, 0xf4, 0xb5, 0x0b, 0x2c, 0x06, 0xd3, 0x97, 0xe0, 0xbb, 0x9e, 0xe0, 0xdd,
    0x7a, 0x46, 0x39, 0x19, 0xd0, 0xa9, 0x0c, 0x05, 0xaf, 0x85, 0x31, 0x49, 0x06, 0x4c, 0xd2,
    0xea, 0x99, 0xee, 0xcf, 0x56, 0xf8, 0x69, 0x81, 0xa6, 0x27, 0x44, 0x4f, 0xcc, 0x17, 0x3c,
    0x0b, 0x4d, 0xb4, 0x25, 0xf1, 0xff, 0x42, 0xff, 0xec, 0xe9, 0x3c, 0x60, 0x20, 0x62, 0xb2,
    0xcf, 0xf1, 0xc7, 0x71, 0x47, 0xd0, 0x9e, 0xf4, 0xcb, 0xdb, 0x78, 0x99, 0xa1, 0x2f, 0xe8,
    0x2c, 0x64, 0x52, 0x96, 0x6f, 0xe5, 0x70, 0x2b, 0x42, 0x6f, 0x39, 0x65, 0xed, 0x1e, 0x43,
    0x91, 0xb8, 0x3b, 0xc7, 0x8e, 0x61, 0x99, 0xa7, 0x77, 0xe6, 0xdb, 0x31, 0xca, 0x30, 0x1a,
    0xc6, 0xa7, 0xbf, 0xbf, 0x74, 0x06, 0xc2, 0xa6, 0x1f, 0x66, 0x64, 0x94, 0xa1, 0xbf, 0xf1,
    0xd6, 0xf2, 0x0e, 0xb2, 0xd8, 0x04, 0xe1, 0xf7, 0x36, 0xed, 0x3e, 0xa5, 0xfb, 0x7a, 0xe7,
    0x5f, 0x79, 0x29, 0x6f, 0x29, 0xd5, 0xc1, 0x73, 0x3c, 0xdc, 0x66, 0x0b, 0xfe, 0x33, 0x14,
    0x69, 0x1e, 0xf4, 0xb3, 0xba, 0xc3, 0x6f, 0x81, 0xbb, 0x66, 0x1f, 0x31, 0xfc, 0x3f, 0x73,
    0x8d, 0xb9, 0xa2, 0xfc, 0x98, 0x07, 0x39, 0xbf, 0x44, 0x0e, 0xb7, 0xb9, 0xd8, 0x66, 0xfd,
    0x86, 0xde, 0x8c, 0x6b, 0x9c, 0x2a, 0x1b, 0xc9, 0x91, 0x71, 0x32, 0xf2, 0x1d, 0x30, 0x66,
    0xe9, 0xa6, 0x32, 0x2c, 0xbd, 0xcf, 0x66, 0x3c, 0x58, 0xec, 0x79, 0x6a, 0x77, 0x84, 0x02,
    0xa0, 0x7c, 0xd9, 0x23, 0xd6, 0x87, 0x8c, 0xb3, 0xfe, 0x6e, 0x0c, 0xdd, 0x8e, 0xe3, 0x39,
    0x8d, 0xda, 0xe7, 0x68, 0xc6, 0x8f, 0xbb, 0x71, 0x1a, 0x3f, 0x0e, 0x5d, 0x25, 0x33, 0x53,
    0x86, 0xc4, 0x1a, 0xe6, 0xee, 0x91, 0xf4, 0x83, 0xd7, 0x52, 0xbd, 0xc1, 0xa0, 0x31, 0x71,
    0x0c, 0x79, 0x66, 0xf8, 0xa9, 0x0c, 0xfa, 0x10, 0xb4, 0x68, 0x3e, 0xa7, 0xeb, 0xae, 0x81,
    0x4e, 0x2c, 0x1d, 0x5f, 0xca, 0x09, 0x33, 0x36, 0x25, 0xf6, 0x71, 0xd2, 0xe2, 0xb8, 0x08,
    0xf1, 0x2c, 0x83, 0x99, 0x31, 0xe2, 0xdc, 0x9a, 0xfe, 0xe2, 0x9b, 0xfe, 0x0f, 0x1d, 0x0b,
    0x98, 0x14, 0x1b, 0x76, 0x3b, 0xa7, 0xef, 0xd9, 0x74, 0xe3, 0x11, 0xe9, 0x28, 0x5b, 0xd7,
    0xea, 0x28, 0xc2, 0xd7, 0x0b, 0xef, 0xc5, 0x3f, 0x86, 0xaf, 0xef, 0x7f, 0x01, 0xbd, 0xba,
    0x8f, 0xd3, 0xa3, 0x79, 0xd2, 0x3d, 0xe7, 0x7d, 0x1b, 0x73, 0x3c, 0x4d, 0x60, 0x3c, 0xb3,
    0xa9, 0x81, 0xdb, 0xd0, 0xef, 0x84, 0x8a, 0x8b, 0x65, 0x63, 0x1e, 0x63, 0xd6, 0x37, 0xf1,
    0xfd, 0x8c, 0xec, 0x7a, 0x1a, 0x6a, 0x71, 0x29, 0x6d, 0xcc, 0xbd, 0x38, 0x7b, 0x45, 0x63,
    0x3b, 0x6f, 0xf0, 0x01, 0x41, 0xbb, 0x42, 0x67, 0xb1, 0xe9, 0x3c, 0x79, 0x5f, 0x85, 0xf0,
    0x29, 0x7e, 0xac, 0xe2, 0x05, 0x93, 0x43, 0x0b, 0x71, 0xc2, 0xf0, 0xef, 0xc3, 0x70, 0x9b,
    0x5b, 0x88, 0x67, 0xb2, 0xaf, 0x08, 0x64, 0x2c, 0xc9, 0x15, 0x87, 0xbf, 0x2f, 0x62, 0x05,
    0xf4, 0x21, 0xa2, 0x5f, 0x53, 0xd8, 0xda, 0xcf, 0xfa, 0xb7, 0x23, 0xc7, 0x22, 0x57, 0xa6,
    0xc7, 0xee, 0xbf, 0xad, 0xa4, 0xbe, 0x73, 0xc2, 0x96, 0x19, 0x6b, 0x30, 0x68, 0xc2, 0xb6,
    0xb6, 0xf3, 0x91, 0x79, 0x5a, 0x36, 0xd9, 0x60, 0xde, 0xff, 0xdc, 0x19, 0x95, 0x7e, 0x4b,
    0x91, 0xd6, 0x2c, 0x7a, 0xf3, 0x50, 0xe8, 0xcd, 0xbf, 0xb2, 0x34, 0x29, 0x74, 0x55, 0x96,
    0x9c, 0x9b, 0x72, 0x34, 0xec, 0xc4, 0x49, 0x4f, 0xc7, 0x3a, 0x0d, 0x74, 0xfb, 0x30, 0x18,
    0xed, 0x8d, 0x65, 0x67, 0x28, 0xe2, 0x6b, 0xb1, 0x9d, 0x37, 0x9a, 0x31, 0xb0, 0xfe, 0x30,
    0x9f, 0xaa, 0x35, 0x0b, 0xb9, 0x94, 0xc7, 0x84, 0x58, 0x72, 0x1d, 0x14, 0x8e, 0x91, 0xed,
    0x9d, 0x35, 0xbe, 0x51, 0x6a, 0xd3, 0x26, 0x4d, 0xe0, 0x83, 0x45, 0xfc, 0x5c, 0xc7, 0x3a,
    0x2f, 0x2a, 0xf5, 0x29, 0xda, 0xfc, 0x43, 0xb9, 0xfc, 0x18, 0x94, 0x3d, 0x25, 0xd8, 0x57,
    0x5f, 0x6d, 0xb3, 0xc5, 0x34, 0x7f, 0xd2, 0x8f, 0x34, 0x67, 0xe6, 0x5f, 0xe1, 0x74, 0x0b,
    0xa9, 0x91, 0xbf, 0xa2, 0x61, 0x5a, 0xd8, 0x66, 0x5f, 0x96, 0x63, 0x77, 0x73, 0xfe, 0x8f,
    0xf7, 0xbc, 0x93, 0xac, 0xf7, 0x3b, 0x2b, 0xb2, 0x09, 0x96, 0x81, 0xdf, 0x66, 0x79, 0xe4,
    0x0d, 0xdc, 0x5b, 0x15, 0x6c, 0x35, 0xd7, 0x90, 0x15, 0x86, 0x9d, 0x8f, 0x77, 0x7f, 0x89,
    0xb0, 0x4e, 0x4c, 0x73, 0xc7, 0x39, 0x2c, 0x1c, 0xbe, 0xdf, 0xfe, 0xd9, 0x12, 0xcb, 0x66,
    0x7e, 0x1f, 0xb2, 0x8d, 0xed, 0x0a, 0x1b, 0xfb, 0x24, 0xec, 0x1b, 0xc6, 0xa6, 0x8e, 0x8e,
    0x33, 0x85, 0xb2, 0xd0, 0xe0, 0x55, 0x42, 0x96, 0x7a, 0x3a, 0xce, 0x95, 0x64, 0xe4, 0x44,
    0x23, 0x67, 0x67, 0xd3, 0x77, 0x69, 0xf8, 0xcf, 0x38, 0x5f, 0xf5, 0x28, 0xf0, 0x93, 0x6f,
    0x88, 0x59, 0x06, 0x99, 0x98, 0xbb, 0x25, 0x56, 0x2d, 0xc7, 0x21, 0x3c, 0xc4, 0x82, 0xd7,
    0xe0, 0x21, 0xbe, 0x92, 0xf2, 0x19, 0xbc, 0x0e, 0xe3, 0x2b, 0x7d, 0x75, 0x6f, 0x15, 0x2e,
    0xd7, 0x31, 0x66, 0xdc, 0xee, 0x3c, 0xa8, 0x8f, 0x49, 0xc6, 0xe2, 0x7a, 0x2c, 0x7b, 0x99,
    0xba, 0x4f, 0x0e, 0xcf, 0x81, 0xcc, 0x9f, 0x24, 0x1e, 0xd7, 0xd3, 0xf9, 0x41, 0x60, 0x8b,
    0xb0, 0x4f, 0x66, 0x55, 0xf6, 0x9c, 0xca, 0x73, 0x44, 0x9c, 0x50, 0xc9, 0x73, 0x79, 0x1f,
    0xfd, 0x39, 0xc6, 0x9d, 0xd0, 0x73, 0xc3, 0x3f, 0xf1, 0xdc, 0x9f, 0xfe, 0xee, 0xb5, 0xe3,
    0xfb, 0xdc, 0xb5, 0xe7, 0x71, 0xed, 0x3e, 0x5f, 0x7b, 0x6e, 0x0a, 0x47, 0x37, 0xac, 0xdc,
    0x6f, 0x9e, 0xc7, 0x9f, 0xa6, 0x97, 0x6b, 0x9f, 0xfb, 0xd3, 0xdf, 0x15, 0x78, 0x64, 0x7c,
    0xf4, 0xdc, 0xae, 0xdd, 0x97, 0x6b, 0xcf, 0xc3, 0xd0, 0x7d, 0xff, 0x00, 0x1d, 0x5c, 0x3b,
    0xb5, 0xeb, 0x25, 0x79, 0xc6, 0xe3, 0xfd, 0x11, 0x7a, 0xb9, 0x76, 0x1d, 0x7f, 0xfa, 0x3c,
    0xa5, 0x97, 0x6b, 0x9f, 0xbb, 0x76, 0x5f, 0xae, 0x5d, 0xef, 0xb5, 0xcf, 0x5d, 0x4b, 0xcf,
    0x8e, 0x77, 0x2d, 0xbf, 0xfa, 0xd3, 0xdf, 0xd5, 0xec, 0x35, 0x85, 0x6b, 0xb1, 0xda, 0xd5,
    0xbf, 0xb0, 0x7e, 0x18, 0x94, 0x3e, 0x87, 0xf6, 0x26, 0xeb, 0x58, 0x93, 0x6f, 0xed, 0x74,
    0x6f, 0x56, 0xf6, 0x5c, 0x9a, 0x77, 0x8e, 0xb9, 0x0b, 0xff, 0xf9, 0xfc, 0x48, 0xa6, 0xf3,
    0xa3, 0x3f, 0x31, 0x5e, 0x9a, 0xdf, 0xef, 0x6d, 0xec, 0xcf, 0x79, 0x4d, 0x9f, 0xed, 0x87,
    0xb1, 0xf0, 0xd7, 0xce, 0x9d, 0xfa, 0xb7, 0x98, 0xcc, 0x6b, 0xe7, 0x99, 0xe2, 0x74, 0xbd,
    0x9f, 0xd8, 0xef, 0x6b, 0xcf, 0xef, 0xff, 0xd6, 0x73, 0xdf, 0xef, 0xf7, 0x6d, 0xe7, 0xfc,
    0xe9, 0xe1, 0xda, 0xe7, 0xae, 0x3d, 0x8f, 0xb4, 0x66, 0x05, 0xc6, 0xf7, 0xfe, 0xf7, 0xd6,
    0xed, 0xfc, 0xfe, 0x34, 0xfd, 0x5d, 0x3b, 0xde, 0x9f, 0xfe, 0xee, 0x1f, 0xa7, 0xab, 0x2b,
    0xf7, 0x7f, 0x8b, 0xaf, 0x5e, 0x4d, 0x2f, 0xd7, 0xde, 0xdf, 0x3f, 0xb6, 0x8e, 0x34, 0x3e,
    0x0a, 0x86, 0x54, 0x8b, 0x27, 0x72, 0x54, 0xfd, 0x9a, 0xf7, 0x47, 0x27, 0x44, 0xdb, 0xd3,
    0x5b, 0xee, 0xdc, 0x70, 0x9f, 0xda, 0x91, 0x8b, 0xb9, 0x24, 0x6c, 0x2f, 0x0e, 0x6a, 0xfe,
    0xd3, 0xc1, 0xbd, 0xf7, 0x3a, 0x01, 0xd7, 0x8e, 0x12, 0x79, 0x29, 0xf3, 0xa0, 0x97, 0x62,
    0x27, 0x8d, 0xd6, 0x20, 0xa0, 0x5a, 0x46, 0x9f, 0xe8, 0x47, 0x0f, 0x1d, 0xed, 0xef, 0x5c,
    0xe8, 0xc7, 0x50, 0xe6, 0xdd, 0x69, 0xb8, 0x3a, 0xf4, 0x5b, 0xc8, 0x18, 0xcc, 0x88, 0xe3,
    0x28, 0x3f, 0xe7, 0xdf, 0xe4, 0x82, 0x18, 0x79, 0x6f, 0xfe, 0x38, 0xcc, 0xfa, 0xc0, 0x84,
    0x26, 0x31, 0xb0, 0x98, 0xa6, 0xbf, 0xc0, 0xd5, 0xb1, 0x4c, 0x6a, 0x2c, 0x23, 0xb7, 0x9d,
    0x7e, 0x30, 0x56, 0x3d, 0x7a, 0x7a, 0x88, 0xb9, 0x3e, 0x0b, 0xe1, 0x88, 0x2a, 0x3f, 0xf4,
    0x50, 0xb6, 0x38, 0x81, 0xf4, 0xfd, 0xab, 0xb5, 0x39, 0x8c, 0xa7, 0xc3, 0x7f, 0x23, 0x1e,
    0xc8, 0x77, 0x25, 0x7c, 0xab, 0x9a, 0x1f, 0xf0, 0x88, 0xf8, 0x3c, 0xca, 0xc5, 0xf5, 0x93,
    0xd7, 0xce, 0x9a, 0x1c, 0x45, 0x4d, 0x9b, 0xa0, 0x9e, 0xce, 0x03, 0xee, 0x9a, 0xcc, 0xd5,
    0x1c, 0xc0, 0xb4, 0xd9, 0x42, 0x8c, 0xa2, 0x38, 0x1f, 0xfc, 0x4e, 0x5a, 0xcf, 0x89, 0x6a,
    0xcc, 0x80, 0x0e, 0xfa, 0xe4, 0xf7, 0x0e, 0x30, 0xce, 0xf9, 0xca, 0xb9, 0x92, 0x63, 0x47,
    0x45, 0xd5, 0x70, 0x1a, 0x49, 0xff, 0x52, 0x9e, 0xce, 0x0c, 0x5c, 0x48, 0x8a, 0xad, 0xc8,
    0x4d, 0x83, 0x43, 0xe7, 0xa9, 0xdb, 0xe8, 0x0c, 0x03, 0xad, 0x66, 0x92, 0xe6, 0x37, 0x19,
    0x1f, 0xaa, 0xc2, 0xb8, 0xf7, 0x09, 0xff, 0x44, 0xf5, 0xcd, 0x1a, 0x20, 0xeb, 0x95, 0x6f,
    0xc0, 0xcb, 0x69, 0xfe, 0xb5, 0x73, 0x9a, 0xe3, 0x7f, 0xd4, 0xfd, 0x0c, 0x46, 0x2d, 0x31,
    0x9c, 0xc8, 0xea, 0x43, 0x62, 0x9a, 0x30, 0xe2, 0xce, 0x39, 0x7c, 0x7a, 0xb5, 0xee, 0x5a,
    0xba, 0x36, 0xba, 0xb2, 0xd5, 0x75, 0x69, 0xe7, 0xd6, 0x46, 0xdf, 0x4b, 0x73, 0x63, 0x8c,
    0x3c, 0xb6, 0xb9, 0xaa, 0x6c, 0x0b, 0x98, 0x35, 0x23, 0x0c, 0x3f, 0x9f, 0x0d, 0xc7, 0xc0,
    0x1c, 0x5b, 0xfd, 0x92, 0xaa, 0xcb, 0xb5, 0xb8, 0xcc, 0x39, 0xeb, 0xb8, 0x12, 0x75, 0xf6,
    0x31, 0xa6, 0x95, 0x8c, 0xf5, 0x6a, 0xf6, 0x99, 0x36, 0x7f, 0x1d, 0x1f, 0x50, 0xb4, 0x37,
    0x1a, 0x10, 0xf9, 0xbd, 0xc9, 0xe8, 0xd4, 0x46, 0x0c, 0xc4, 0xe6, 0xc7, 0x37, 0xf2, 0x51,
    0x1f, 0xa2, 0xf2, 0x77, 0xbb, 0xb9, 0xfc, 0x7f, 0x73, 0x8c, 0x2c, 0xbe, 0x56, 0x3b, 0x7b,
    0xa6, 0x5f, 0xfc, 0xbe, 0x41, 0xab, 0x9a, 0x9f, 0xb8, 0x62, 0x89, 0xcd, 0x9c, 0x11, 0xb7,
    0x7c, 0x79, 0x19, 0x78, 0xe5, 0x77, 0x44, 0xd4, 0xd8, 0xc0, 0x7d, 0x89, 0x36, 0x56, 0xdb,
    0xf1, 0x1d, 0xe6, 0x5e, 0xdb, 0xf0, 0x1d, 0xc2, 0x1e, 0xf4, 0x04, 0x8f, 0x2c, 0x8b, 0xa9,
    0x8e, 0x1c, 0xbc, 0x27, 0x72, 0xc6, 0x2a, 0x05, 0x39, 0xc2, 0x9f, 0x77, 0x43, 0xca, 0xc3,
    0x58, 0xc6, 0xc0, 0x51, 0x79, 0xcb, 0xfe, 0x50, 0xfa, 0x26, 0x11, 0x83, 0xd1, 0x6d, 0xe0,
    0xa7, 0x14, 0x8b, 0xa9, 0xed, 0x1b, 0xe7, 0x23, 0xbc, 0xeb, 0xf4, 0x11, 0xb8, 0x1d, 0x9b,
    0x96, 0xd9, 0xfb, 0x5c, 0x8c, 0xf7, 0x3d, 0x57, 0x3b, 0x4e, 0xe3, 0x55, 0xc4, 0x27, 0xc6,
    0x2e, 0x1b, 0xe1, 0xdc, 0x6c, 0xb1, 0xfa, 0x02, 0xbc, 0xb4, 0x96, 0xbb, 0xa6, 0x78, 0x5c,
    0x75, 0x40, 0x46, 0xb8, 0xc3, 0x90, 0x71, 0xc4, 0x33, 0x81, 0x81, 0x40, 0x19, 0x48, 0xb9,
    0x93, 0x0a, 0xd1, 0x5e, 0x30, 0xa9, 0x77, 0x24, 0x1e, 0x4c, 0xca, 0x48, 0xf9, 0x77, 0x1e,
    0x4b, 0xf9, 0x52, 0x85, 0x3e, 0x01, 0x67, 0x1c, 0xee, 0x24, 0xff, 0xa7, 0x3c, 0x4e, 0x8e,
    0xb9, 0x91, 0xc6, 0xfb, 0x47, 0x3a, 0xef, 0x0f, 0xfb, 0x7b, 0x99, 0xc3, 0x26, 0xb1, 0x0d,
    0x4f, 0x66, 0xb0, 0x95, 0xf3, 0xc0, 0x58, 0x56, 0xbd, 0xfd, 0xd4, 0xee, 0xb7, 0x87, 0x1c,
    0xf1, 0x87, 0xa1, 0xfb, 0xe1, 0xb7, 0x71, 0x1d, 0x9e, 0xfa, 0x7e, 0x4c, 0x71, 0xd8, 0xb0,
    0xe6, 0x25, 0xf2, 0x1f, 0x2b, 0x94, 0x03, 0x07, 0xfa, 0x02, 0xdf, 0x85, 0x51, 0x83, 0xf3,
    0x44, 0x4d, 0x94, 0x60, 0xa3, 0xf1, 0x8f, 0x69, 0xd8, 0x16, 0xb8, 0xa7, 0x8e, 0x71, 0xbf,
    0xd7, 0xe1, 0xcb, 0xcd, 0x7b, 0x5b, 0x5c, 0xcb, 0x44, 0x3b, 0x73, 0x67, 0x98, 0xc1, 0x29,
    0x8c, 0x03, 0x79, 0x59, 0x5e, 0x6b, 0xca, 0xb5, 0xe0, 0x86, 0x44, 0xec, 0x8b, 0xe7, 0x95,
    0x26, 0xdb, 0x72, 0xd3, 0x6c, 0xb1, 0x42, 0xac, 0x13, 0x88, 0xf9, 0xd1, 0xa2, 0x4e, 0x60,
    0xe4, 0xea, 0xd2, 0xe9, 0x69, 0x3e, 0x72, 0xb0, 0x63, 0xa7, 0x1c, 0x7f, 0xf0, 0x85, 0x1d,
    0x9b, 0xf1, 0x64, 0x59, 0x93, 0xe0, 0x95, 0x65, 0x93, 0xe9, 0x5f, 0xf7, 0xa7, 0xcd, 0x8e,
    0x97, 0xca, 0xd4, 0x96, 0x29, 0xc5, 0x32, 0xf6, 0xd3, 0xba, 0x62, 0xfa, 0xfb, 0x84, 0xef,
    0xf7, 0x59, 0xdf, 0x31, 0x73, 0x00, 0x09, 0x27, 0x90, 0x5d, 0xe7, 0x5a, 0xd4, 0x43, 0x8c,
    0xfb, 0x7b, 0x3c, 0x32, 0xe7, 0x2d, 0xf2, 0xf3, 0x24, 0x7e, 0xce, 0x90, 0xad, 0xa3, 0x14,
    0xf8, 0xa6, 0xce, 0x56, 0xc4, 0xe4, 0x47, 0x79, 0x4c, 0x2c, 0x63, 0x30, 0x82, 0x82, 0xfa,
    0x05, 0x79, 0x45, 0x39, 0xbc, 0x8d, 0xc6, 0xf3, 0x52, 0x3d, 0x25, 0x2c, 0xc6, 0x20, 0xd8,
    0x7b, 0x92, 0x5e, 0x45, 0xfe, 0x4d, 0x5e, 0xe6, 0xe7, 0xf2, 0x2a, 0x08, 0x8b, 0xc8, 0x73,
    0x66, 0x69, 0x31, 0x9f, 0x87, 0x29, 0xe3, 0xa6, 0xd6, 0xdc, 0x12, 0x33, 0x8f, 0x66, 0x21,
    0x3d, 0x92, 0xff, 0xa7, 0x78, 0x77, 0xa6, 0xdd, 0xb4, 0x1e, 0xec, 0x98, 0x64, 0x90, 0xbe,
    0x16, 0x7c, 0x5e, 0xd4, 0x61, 0x7c, 0xc3, 0x8c, 0xf3, 0xe2, 0x3c, 0x15, 0xe7, 0x7e, 0x70,
    0xbd, 0x2f, 0x9e, 0x9b, 0xfb, 0x2e, 0x6a, 0x3d, 0x8e, 0xcd, 0xfa, 0x85, 0x4d, 0x59, 0x6f,
    0xc4, 0xa5, 0x9a, 0xfa, 0x95, 0x8e, 0xd9, 0x74, 0xb5, 0xb3, 0x10, 0x79, 0xba, 0xc8, 0x4f,
    0xee, 0x30, 0x9f, 0x97, 0xa1, 0x78, 0x07, 0xee, 0x03, 0xd6, 0xa1, 0xc0, 0x7a, 0x86, 0xa1,
    0x57, 0x23, 0x29, 0xeb, 0xd2, 0x3a, 0x37, 0xea, 0x3b, 0xb3, 0x71, 0xa2, 0x63, 0xac, 0xfe,
    0x26, 0x46, 0xde, 0x68, 0x9a, 0xe7, 0x96, 0xc7, 0x3f, 0xfd, 0xd0, 0xc7, 0x19, 0x5d, 0xcb,
    0x0a, 0xe9, 0x22, 0xc9, 0xd2, 0x85, 0x51, 0x2f, 0xf5, 0xa5, 0xa0, 0x56, 0x60, 0xae, 0x6e,
    0x6e, 0x1c, 0x45, 0x13, 0x92, 0x47, 0xf9, 0x43, 0x85, 0x97, 0xa0, 0x7a, 0x9c, 0xb6, 0xf1,
    0xd8, 0xc9, 0x1c, 0xe6, 0x4b, 0xe9, 0x01, 0xef, 0x43, 0x81, 0x7b, 0x81, 0xf5, 0x7f, 0xa3,
    0x27, 0x58, 0x0b, 0xf4, 0x00, 0xf4, 0x01, 0xf2, 0x9c, 0xf2, 0x4a, 0x90, 0x2e, 0x7f, 0x8b,
    0xe7, 0x85, 0xe9, 0x92, 0xb0, 0x6c, 0x78, 0x27, 0x2a, 0x3c, 0x47, 0x7f, 0x2b, 0x6c, 0x80,
    0xae, 0xaf, 0x39, 0xd4, 0xef, 0xad, 0x2f, 0xea, 0x5b, 0xb6, 0x44, 0x3d, 0xdd, 0x84, 0x9f,
    0xe9, 0xfb, 0xe2, 0x5b, 0xee, 0xdd, 0x24, 0x83, 0x75, 0xc8, 0xd7, 0xf1, 0x99, 0x7a, 0x8a,
    0x71, 0x2c, 0x89, 0x99, 0x5d, 0x74, 0x82, 0xcc, 0x3d, 0x17, 0x6b, 0x22, 0xbb, 0x7a, 0xf0,
    0xea, 0x9b, 0x72, 0xae, 0x75, 0x75, 0xa8, 0xcd, 0x83, 0xea, 0x01, 0x14, 0xdc, 0xaf, 0x8a,
    0xbf, 0x3e, 0xc3, 0xfc, 0x05, 0xfe, 0xf5, 0x00, 0xfb, 0x6a, 0xdf, 0x47, 0x33, 0xe7, 0xfe,
    0xda, 0x39, 0x1e, 0xf9, 0xa1, 0x27, 0x42, 0xc7, 0xc0, 0xda, 0x0a, 0x88, 0x3b, 0xa7, 0x7f,
    0xfc, 0x6f, 0xcc, 0x49, 0xa6, 0xf5, 0x88, 0x5c, 0xd5, 0x97, 0x8e, 0xdd, 0x0f, 0x9e, 0xf2,
    0xaa, 0xed, 0x00, 0xfa, 0x83, 0x5b, 0x7e, 0xb6, 0xed, 0x35, 0xce, 0xe9, 0x8e, 0xe7, 0x14,
    0x10, 0x78, 0xab, 0xa3, 0xb8, 0x3f, 0x89, 0xdc, 0x4b, 0x94, 0xdf, 0x9c, 0x43, 0x3a, 0xbb,
    0x33, 0x35, 0xa9, 0x4f, 0x93, 0x4d, 0x6f, 0xe6, 0x65, 0xe0, 0xfc, 0x1e, 0x34, 0x3c, 0x91,
    0x21, 0x04, 0x06, 0x40, 0xb3, 0x63, 0x38, 0x67, 0xc2, 0x2d, 0xae, 0x61, 0x59, 0xc5, 0xba,
    0x18, 0x9b, 0x4e, 0x58, 0xe7, 0xa0, 0x58, 0xba, 0xf8, 0x06, 0xac, 0x73, 0xd4, 0x16, 0xb8,
    0x12, 0x8c, 0x38, 0xf2, 0x2c, 0x81, 0xb5, 0x7b, 0x4b, 0x6d, 0xaa, 0xf2, 0x7a, 0xa3, 0x71,
    0xdd, 0x34, 0xc4, 0x83, 0x9e, 0xb0, 0xb6, 0xe0, 0x22, 0x57, 0x4b, 0x4e, 0x61, 0x23, 0xda,
    0x4e, 0xa0, 0xe9, 0x99, 0xde, 0xb3, 0x26, 0x07, 0x52, 0x7d, 0xdc, 0x5a, 0x37, 0x89, 0xf5,
    0xa3, 0xa6, 0xb6, 0xac, 0x1d, 0x36, 0x4d, 0xd8, 0x3f, 0x32, 0x3d, 0x28, 0xfd, 0xd6, 0xb0,
    0x65, 0xfd, 0x64, 0x55, 0xbb, 0x4c, 0xe3, 0xcf, 0xb2, 0x76, 0x5e, 0xa6, 0x66, 0x80, 0x36,
    0xcd, 0x53, 0xeb, 0x88, 0x7e, 0xa2, 0xdf, 0xfe, 0xc8, 0x6a, 0x77, 0xe2, 0x1d, 0xb9, 0xf8,
    0xed, 0x6c, 0x9c, 0x3b, 0xbd, 0x1e, 0xd4, 0x63, 0xe6, 0x5c, 0x8c, 0x9c, 0x24, 0xf1, 0x9d,
    0xee, 0x47, 0x5a, 0xe3, 0x59, 0xcf, 0x3d, 0xaa, 0xfa, 0xf6, 0x7a, 0x75, 0x86, 0x4f, 0x20,
    0x7b, 0x43, 0x58, 0xbb, 0x62, 0x3a, 0x1a, 0x74, 0x22, 0x94, 0x65, 0xdd, 0xc2, 0x9c, 0x84,
    0xaf, 0xcf, 0xad, 0x3d, 0xd6, 0xeb, 0xfc, 0xa6, 0x77, 0x1e, 0x31, 0x32, 0x3d, 0xae, 0x6f,
    0xcc, 0x7f, 0x27, 0x97, 0x13, 0xf5, 0xef, 0x68, 0x7e, 0x11, 0x44, 0xa8, 0xdb, 0x17, 0xcf,
    0xdc, 0xe8, 0x5e, 0x3d, 0xd7, 0x7c, 0xdd, 0x37, 0x4f, 0xd3, 0x1f, 0x64, 0xfd, 0x01, 0xb1,
    0xc6, 0xf7, 0x94, 0xcd, 0x5c, 0x74, 0x4f, 0x06, 0xb9, 0x5a, 0x17, 0xc6, 0x3d, 0xa9, 0xf9,
    0xaf, 0x32, 0x75, 0x6f, 0xa4, 0x5f, 0x48, 0x9f, 0x73, 0xb5, 0xfe, 0x50, 0x76, 0xaf, 0x87,
    0x8e, 0x7f, 0x87, 0x6a, 0x7b, 0xc2, 0xdc, 0xfd, 0x0e, 0xd7, 0xb1, 0x4f, 0x75, 0x19, 0xaf,
    0xb2, 0x48, 0xe6, 0xf0, 0xe6, 0x6d, 0x7e, 0x5f, 0xe8, 0x10, 0x46, 0xce, 0x83, 0x8e, 0x81,
    0xca, 0xe6, 0x5c, 0x09, 0x39, 0x2a, 0x6c, 0x97, 0x02, 0x0c, 0x73, 0x69, 0x4e, 0x1b, 0xdd,
    0xa7, 0xb4, 0xbe, 0x8f, 0x81, 0x39, 0x8d, 0x9d, 0x48, 0x62, 0x4e, 0x0f, 0x5c, 0x7b, 0xfc,
    0x2f, 0x91, 0xb7, 0xf3, 0x2b, 0x9b, 0xb7, 0x43, 0xb6, 0xa2, 0xb4, 0xc1, 0xc8, 0xae, 0x64,
    0x59, 0xe9, 0xb6, 0x84, 0xeb, 0x4f, 0xb2, 0xba, 0x8b, 0xd4, 0xaf, 0x6c, 0x7a, 0x5a, 0x5e,
    0x0f, 0xc8, 0xce, 0xe9, 0x4a, 0xdf, 0xde, 0x28, 0xd5, 0xd3, 0x0e, 0xdc, 0x3b, 0xa0, 0xa7,
    0x75, 0xe9, 0x0b, 0x1d, 0x6b, 0x7e, 0xce, 0xb9, 0xf0, 0xff, 0x8a, 0xfd, 0x93, 0x7e, 0x7d,
    0xf1, 0x5d, 0x4c, 0x1c, 0xdf, 0x90, 0x72, 0x5e, 0x86, 0xb8, 0xf6, 0xae, 0xdf, 0xfa, 0xbc,
    0x7f, 0xbb, 0xa2, 0x57, 0x81, 0xe2, 0x1b, 0xbc, 0x36, 0xaf, 0x65, 0xb5, 0x97, 0xd0, 0xf6,
    0x75, 0xd8, 0xcd, 0x5c, 0x8c, 0x02, 0xbb, 0xae, 0x9a, 0xc7, 0x2d, 0x17, 0xfb, 0x65, 0x88,
    0x32, 0x5e, 0xb8, 0x53, 0x84, 0x0f, 0xd7, 0xee, 0xf6, 0x45, 0xe5, 0x30, 0xdb, 0xf2, 0x36,
    0x5c, 0x01, 0xbd, 0x0e, 0x8c, 0xc8, 0x91, 0xb6, 0xd8, 0x61, 0x58, 0x4b, 0x0e, 0xe5, 0x72,
    0x4b, 0x6e, 0x4e, 0x3c, 0x21, 0xe9, 0x32, 0x9e, 0xed, 0xd0, 0x85, 0x3b, 0xdc, 0xa6, 0x3b,
    0x11, 0x3d, 0x21, 0x64, 0xfd, 0x1e, 0x69, 0x2b, 0xbc, 0x2a, 0x0c, 0x62, 0x1e, 0x03, 0x60,
    0xc5, 0xd4, 0xb1, 0xd2, 0x05, 0x58, 0x48, 0x4f, 0xcb, 0x37, 0xfb, 0x74, 0xd2, 0x7c, 0xb3,
    0xda, 0xae, 0x3d, 0xa4, 0xe3, 0x51, 0x9b, 0xfb, 0x4d, 0xc0, 0x5e, 0xd6, 0x46, 0x54, 0x83,
    0xfa, 0x1f, 0xc0, 0x59, 0xaf, 0xde, 0x3d, 0xb2, 0x27, 0x7c, 0xf6, 0x33, 0x5d, 0xc2, 0x07,
    0x63, 0x9b, 0x74, 0x0f, 0x1a, 0x03, 0xf8, 0xd0, 0xf9, 0x6a, 0xbf, 0x98, 0x5d, 0xe7, 0x21,
    0x34, 0x9e, 0x2f, 0xd3, 0x6f, 0x90, 0xd2, 0xef, 0x2b, 0xe9, 0x04, 0x82, 0x8e, 0x42, 0xd6,
    0xa4, 0x8f, 0x21, 0x8f, 0xcd, 0xb0, 0xe0, 0x9d, 0xe7, 0x9d, 0x7c, 0x1e, 0x20, 0xdf, 0x61,
    0x5f, 0xd4, 0x4e, 0xfb, 0x5d, 0x70, 0x3d, 0x31, 0x51, 0xd3, 0x88, 0x7d, 0xc1, 0xea, 0xac,
    0xcf, 0xd9, 0x97, 0xa6, 0xe8, 0x25, 0x87, 0x1d, 0xdd, 0xe5, 0xd7, 0x96, 0xca, 0x53, 0x6d,
    0xa3, 0x5b, 0xc7, 0xc3, 0xb5, 0x58, 0xf1, 0x28, 0x57, 0xae, 0x59, 0xf3, 0x09, 0xd8, 0xf6,
    0xe9, 0x84, 0xce, 0xd7, 0x1f, 0x7b, 0x6d, 0xc9, 0xbb, 0x44, 0x6e, 0x60, 0x5f, 0xe8, 0xd2,
    0xfc, 0x0a, 0x71, 0x7f, 0x72, 0x35, 0xb2, 0x85, 0x6f, 0xdc, 0x86, 0x61, 0xfc, 0xc2, 0xff,
    0x65, 0xee, 0x45, 0x27, 0x30, 0xe5, 0x9b, 0xe9, 0xbb, 0xd5, 0xf2, 0x96, 0x72, 0xb5, 0x49,
    0xb9, 0x05, 0x42, 0x9f, 0xa2, 0x1a, 0x6f, 0x95, 0xa2, 0x7c, 0x74, 0x4b, 0xfd, 0x50, 0xbb,
    0xcb, 0x92, 0x1b, 0x20, 0xd7, 0xb2, 0x24, 0x9e, 0xae, 0xfc, 0x31, 0x6e, 0x46, 0x8f, 0x35,
    0x29, 0xad, 0xe1, 0xa2, 0xf9, 0x75, 0x4c, 0x59, 0x54, 0xbc, 0x16, 0xf1, 0xdc, 0x0b, 0x7d,
    0x91, 0x3e, 0x93, 0xd2, 0xef, 0xa5, 0x7d, 0x00, 0xe8, 0xfe, 0x1b, 0xe7, 0x22, 0xea, 0x79,
    0xce, 0xa5, 0x82, 0xff, 0x8f, 0x55, 0x4e, 0x4c, 0xe9, 0xb9, 0xc8, 0xda, 0x1b, 0x66, 0x4e,
    0x86, 0x8f, 0x97, 0x7c, 0x4b, 0x9c, 0x93, 0xe2, 0x83, 0x7d, 0xa1, 0x3b, 0x96, 0x9c, 0x93,
    0x77, 0xe9, 0x54, 0xb0, 0x8f, 0xa9, 0x1d, 0x78, 0xcd, 0x3e, 0x5e, 0x5c, 0x37, 0x77, 0x57,
    0x61, 0x8b, 0xf3, 0x71, 0x3b, 0x8e, 0xca, 0x2d, 0x68, 0xb3, 0x6c, 0x47, 0x79, 0x33, 0xce,
    0x1b, 0xae, 0x5b, 0x7b, 0x11, 0xb9, 0xb5, 0x22, 0xa7, 0xdf, 0x3b, 0x0a, 0x7f, 0xa1, 0x9f,
    0x29, 0xcf, 0x9f, 0x33, 0xfb, 0xd9, 0xff, 0xd1, 0x7b, 0x3a, 0xa0, 0x9f, 0xfd, 0x5b, 0xcc,
    0xde, 0x4f, 0x50, 0xcd, 0xfa, 0xd9, 0xff, 0xb3, 0x31, 0x3c, 0x2d, 0xa7, 0x96, 0x6a, 0xb2,
    0x4e, 0xad, 0xee, 0x97, 0x46, 0xdf, 0xcb, 0x34, 0x16, 0x7e, 0xe9, 0x7a, 0x3b, 0x9f, 0x47,
    0xd0, 0x4c, 0x9a, 0x47, 0x57, 0x13, 0x75, 0xac, 0xa6, 0x22, 0x8f, 0x89, 0xf4, 0x19, 0x55,
    0xdc, 0x9d, 0xb4, 0xcc, 0x5c, 0xa2, 0x22, 0xdf, 0xe3, 0x32, 0x97, 0xc7, 0x52, 0x92, 0x73,
    0xca, 0x56, 0x5f, 0xc4, 0x7e, 0x44, 0xdc, 0x25, 0xa1, 0x1a, 0x57, 0xa6, 0x7f, 0x8c, 0xf6,
    0xf4, 0xe4, 0x68, 0x63, 0xe6, 0x56, 0x08, 0x9e, 0xc7, 0xb5, 0xb6, 0x8b, 0xeb, 0xb2, 0x95,
    0x45, 0xab, 0xcf, 0x1e, 0x97, 0xe7, 0x1e, 0x0b, 0x5e, 0x9f, 0x90, 0x8f, 0xc1, 0x36, 0xc7,
    0x31, 0x78, 0x7d, 0x7f, 0x68, 0xab, 0x6f, 0x3b, 0x6a, 0xb4, 0x50, 0xe6, 0xfb, 0x9d, 0xce,
    0x34, 0x5f, 0x26, 0x5f, 0xab, 0x37, 0x97, 0x5f, 0x3b, 0x16, 0xba, 0x69, 0x65, 0xa0, 0xf7,
    0x79, 0xc8, 0xe4, 0xcc, 0xc2, 0x7e, 0x06, 0x5f, 0x14, 0x23, 0xae, 0xc4, 0x14, 0x2b, 0x0c,
    0xd7, 0xa2, 0xb8, 0xc7, 0x73, 0xa7, 0x57, 0x88, 0x35, 0xc7, 0xbe, 0x40, 0xa9, 0x8c, 0x12,
    0xf3, 0x6c, 0x7e, 0x7e, 0xdb, 0xc0, 0xe9, 0x2b, 0x9d, 0x3a, 0xf5, 0x63, 0x77, 0x64, 0xdd,
    0xb1, 0xde, 0x83, 0xc6, 0x56, 0x13, 0xde, 0x33, 0xea, 0x68, 0xf2, 0xf7, 0x7c, 0xf1, 0x3d,
    0xef, 0x1f, 0xe7, 0xbf, 0xc7, 0x32, 0x00, 0x68, 0xe1, 0x61, 0x42, 0xfa, 0xd1, 0x9a, 0xeb,
    0x86, 0x5b, 0x5d, 0x36, 0xa2, 0xbf, 0xff, 0x82, 0xf6, 0xf0, 0x44, 0xf5, 0x78, 0x4a, 0x08,
    0x49, 0xf8, 0x7c, 0x99, 0xcf, 0xc2, 0xb8, 0xff, 0xad, 0xe4, 0x45, 0x70, 0xc6, 0xbd, 0xb4,
    0x7a, 0x6c, 0xf4, 0xa4, 0xa2, 0xfe, 0x0b, 0x1b, 0xf6, 0x47, 0x4e, 0xc8, 0x0f, 0x13, 0x57,
    0xef, 0x51, 0x7a, 0xff, 0x1e, 0xf1, 0x59, 0x99, 0xab, 0x40, 0xb5, 0xb4, 0xd2, 0x3a, 0x78,
    0x4d, 0x71, 0x6e, 0x62, 0x46, 0xcf, 0x0c, 0xfe, 0xf5, 0x7b, 0x1a, 0x1d, 0xcf, 0x8b, 0x7d,
    0xfd, 0x34, 0x67, 0xeb, 0xf3, 0xd3, 0x0f, 0x2c, 0x39, 0x5b, 0x2c, 0xaf, 0x6b, 0xc2, 0x4e,
    0xcd, 0x3a, 0x50, 0x83, 0x2f, 0x99, 0x27, 0x21, 0x72, 0xb3, 0x10, 0x4f, 0x23, 0xea, 0x76,
    0xa2, 0x4e, 0x91, 0x1d, 0x6b, 0x33, 0x0e, 0xd2, 0x9a, 0x00, 0x40, 0xeb, 0xcc, 0xbf, 0x26,
    0x4b, 0x7d, 0xb7, 0xdd, 0x6c, 0x51, 0x0d, 0x05, 0xe6, 0xdd, 0x55, 0xc1, 0xbb, 0xc7, 0x3a,
    0xc5, 0x37, 0x63, 0x24, 0xc2, 0x26, 0xb4, 0xd3, 0x51, 0xe4, 0x84, 0xd9, 0xb8, 0x51, 0xc9,
    0x92, 0xa6, 0x86, 0x2b, 0x38, 0x51, 0x8c, 0xd0, 0x31, 0xf3, 0x73, 0x7c, 0x1d, 0x37, 0xc4,
    0xa2, 0xbb, 0xd8, 0x4b, 0x0a, 0xf6, 0x90, 0xed, 0xad, 0x49, 0xa5, 0x9d, 0xd9, 0x43, 0xa1,
    0xb8, 0x9f, 0x1c, 0x0f, 0x48, 0xc6, 0xcc, 0x83, 0xed, 0xf9, 0x38, 0x42, 0xef, 0xf4, 0x74,
    0x22, 0x5f, 0xcb, 0xba, 0x97, 0xa9, 0x59, 0x67, 0xc4, 0x77, 0x05, 0xc6, 0xaa, 0xf8, 0x1b,
    0x20, 0x5b, 0x87, 0x23, 0xbd, 0xe7, 0xe8, 0xd7, 0xc9, 0xd5, 0xe1, 0x30, 0x7c, 0x01, 0x14,
    0x45, 0x7f, 0xd4, 0xff, 0xb3, 0xeb, 0x18, 0x0b, 0x5f, 0xc0, 0x38, 0x77, 0xee, 0xba, 0x6f,
    0x7d, 0xf8, 0xaa, 0xef, 0x9f, 0x66, 0x5b, 0x82, 0x8e, 0x21, 0xf4, 0x19, 0xbf, 0x65, 0xcd,
    0x35, 0xb0, 0x12, 0xc2, 0xa6, 0x32, 0x64, 0x7c, 0xb6, 0x86, 0xb3, 0xe8, 0x47, 0xc5, 0xfa,
    0xea, 0x13, 0xc9, 0xd7, 0x36, 0x1a, 0x99, 0xb6, 0xad, 0xc5, 0xff, 0xf1, 0xa7, 0x9f, 0xa3,
    0x0f, 0x82, 0xbc, 0x3f, 0x25, 0xa0, 0x3d, 0x0c, 0x75, 0x5a, 0x60, 0x7f, 0x1b, 0x3e, 0xe7,
    0xde, 0xe3, 0x60, 0x8d, 0xfe, 0x93, 0x1e, 0xe7, 0x38, 0x45, 0x3d, 0xad, 0x86, 0x7c, 0x5b,
    0x90, 0x47, 0x3d, 0x77, 0xcf, 0xb8, 0x2d, 0xe2, 0x39, 0xde, 0x72, 0x3b, 0x14, 0x78, 0x09,
    0xcc, 0xe5, 0x6a, 0x0a, 0x67, 0x75, 0x17, 0x95, 0x5f, 0x8b, 0x72, 0x75, 0xdc, 0x14, 0xfd,
    0x3c, 0x7b, 0x6d, 0x26, 0x23, 0x4e, 0xcd, 0xbd, 0x19, 0x1f, 0x99, 0x27, 0x80, 0x4e, 0xa2,
    0x8b, 0x2e, 0xcb, 0x62, 0xe1, 0xaf, 0x35, 0x7c, 0x4e, 0xd9, 0x3d, 0xf2, 0x66, 0x85, 0xfd,
    0xb4, 0xba, 0x7d, 0x01, 0xaf, 0x57, 0xe8, 0x41, 0x86, 0x7f, 0x56, 0xfc, 0xce, 0xcc, 0x2b,
    0xee, 0x1f, 0xa2, 0xea, 0xda, 0x67, 0xf2, 0x72, 0x0d, 0xff, 0xc1, 0x98, 0x74, 0xf2, 0x22,
    0x1e, 0xc6, 0x9b, 0xdb, 0x7e, 0x47, 0x8f, 0x37, 0x1b, 0xbd, 0x01, 0x28, 0x66, 0xe8, 0x5e,
    0xfe, 0xf5, 0x1c, 0xec, 0x0d, 0xc0, 0xfa, 0xc0, 0x40, 0xe8, 0x1b, 0x03, 0xf3, 0x79, 0x19,
    0x75, 0xd8, 0x6f, 0x44, 0xf1, 0x3d, 0xac, 0xa9, 0x29, 0xcf, 0x05, 0xed, 0xb4, 0xd1, 0x51,
    0xda, 0x66, 0xfb, 0x9b, 0xa4, 0xbe, 0x32, 0x83, 0x67, 0x1b, 0x3e, 0xdc, 0x94, 0x17, 0x50,
    0xc2, 0x78, 0xdf, 0xe8, 0x8f, 0x22, 0x62, 0x5d, 0x22, 0xd6, 0xe4, 0x65, 0xeb, 0x23, 0x65,
    0x47, 0xe5, 0x7d, 0x53, 0x4c, 0xcf, 0xbe, 0xa4, 0xe7, 0x27, 0x65, 0x3f, 0xa8, 0xff, 0x8e,
    0xc3, 0x89, 0x9b, 0xad, 0xeb, 0x2f, 0xf4, 0x2e, 0xc2, 0x95, 0xe0, 0x7b, 0x54, 0xff, 0x02,
    0x13, 0x8c, 0x27, 0xb0, 0x5d, 0x0e, 0xf4, 0x2a, 0xec, 0x90, 0x51, 0x2e, 0xce, 0x47, 0x31,
    0x9c, 0xd3, 0x71, 0xb8, 0x07, 0x99, 0xc8, 0xb2, 0xba, 0xa2, 0xeb, 0xa8, 0xf3, 0x4e, 0xff,
    0xac, 0x0d, 0xaf, 0xf6, 0xdb, 0xac, 0x3f, 0x60, 0xd2, 0xab, 0xb4, 0x71, 0x36, 0xf9, 0xfb,
    0x9b, 0xf5, 0xa4, 0xb2, 0x35, 0xc7, 0xf4, 0x1a, 0xad, 0x69, 0x6c, 0xfc, 0x9c, 0xd7, 0xe5,
    0x7b, 0xad, 0x03, 0xd1, 0xc3, 0x2a, 0xb5, 0xd1, 0x9f, 0x0b, 0x30, 0x2a, 0xdf, 0xc7, 0x64,
    0xdf, 0x9f, 0x59, 0x5f, 0x25, 0xed, 0x6f, 0xe7, 0x39, 0xf6, 0x7a, 0x7d, 0x45, 0x3a, 0x65,
    0x0b, 0xbc, 0x8b, 0xda, 0x15, 0x2b, 0x3a, 0xb3, 0x85, 0x88, 0xcb, 0x2e, 0xb6, 0x88, 0x01,
    0xde, 0x1f, 0xd9, 0x6a, 0x2b, 0x8b, 0xfc, 0xd1, 0x97, 0xce, 0x20, 0xa5, 0x8d, 0xa0, 0x62,
    0xc6, 0x52, 0xe0, 0x57, 0x59, 0xd7, 0x74, 0x65, 0x6f, 0xbc, 0x30, 0xd3, 0x5f, 0x30, 0x5f,
    0x2b, 0xd4, 0xeb, 0x4d, 0x81, 0x5d, 0x29, 0x70, 0x76, 0xe1, 0x59, 0xc7, 0x3f, 0x14, 0xe0,
    0x33, 0x75, 0xfa, 0x54, 0xdd, 0x24, 0xd3, 0x17, 0x65, 0xe4, 0xe2, 0x98, 0xb6, 0xa5, 0x51,
    0x42, 0xc3, 0xec, 0x7d, 0x65, 0xeb, 0x48, 0xa8, 0x3a, 0x9e, 0x96, 0xbc, 0x75, 0x8b, 0xbe,
    0xd2, 0x1d, 0x0b, 0xe1, 0x8e, 0x2d, 0x60, 0x9f, 0xc3, 0x6f, 0xec, 0x84, 0x08, 0xef, 0x0f,
    0x87, 0x70, 0x44, 0x4d, 0x3a, 0xe2, 0x27, 0x0d, 0x3e, 0xd7, 0x69, 0xd8, 0x92, 0x3d, 0x5d,
    0x66, 0xfa, 0x80, 0xfd, 0xd4, 0x21, 0xeb, 0x7e, 0x13, 0xbd, 0x17, 0xa3, 0xc4, 0xa0, 0x18,
    0xb6, 0xf0, 0x87, 0xec, 0x8d, 0xa0, 0xeb, 0xd0, 0xf3, 0x82, 0x1a, 0xd4, 0xc2, 0x27, 0x26,
    0x7c, 0x5a, 0xad, 0x8b, 0x34, 0xee, 0x61, 0xc1, 0xfb, 0x99, 0xf2, 0xab, 0xf8, 0xfe, 0x9b,
    0x0f, 0x08, 0x7f, 0x33, 0x35, 0xea, 0x80, 0xba, 0xa8, 0xbf, 0x48, 0x3f, 0xbc, 0x1e, 0x63,
    0x6a, 0xa1, 0xda, 0x7a, 0x9c, 0x65, 0x63, 0x31, 0x96, 0xba, 0xab, 0x19, 0x5d, 0x35, 0x9d,
    0xd6, 0x14, 0xf0, 0x54, 0x6c, 0x20, 0xd7, 0x0b, 0x59, 0xf4, 0x20, 0x20, 0xdf, 0x4e, 0x3c,
    0xbf, 0x6c, 0x87, 0xf1, 0x78, 0x93, 0x4c, 0xde, 0x90, 0x27, 0x72, 0xba, 0x43, 0x59, 0x43,
    0x7b, 0x1f, 0xa8, 0x1a, 0xf9, 0xa2, 0xa7, 0xae, 0x56, 0xc7, 0x5a, 0xd8, 0x56, 0x47, 0x3d,
    0x8d, 0x32, 0x91, 0xf4, 0x25, 0xaa, 0xa3, 0x41, 0xd8, 0x3b, 0x51, 0x73, 0x9e, 0x62, 0x5a,
    0x07, 0x4b, 0x39, 0xb7, 0xe2, 0x7d, 0xd6, 0xfb, 0x15, 0x6f, 0xad, 0xfb, 0x4c, 0x7a, 0x62,
    0xbf, 0x74, 0xb2, 0x75, 0x7f, 0x8c, 0xfe, 0x90, 0x99, 0xfa, 0xb8, 0xf9, 0x9a, 0xae, 0x14,
    0xca, 0xfa, 0x95, 0xbf, 0x3a, 0x8c, 0xe1, 0x3c, 0xb6, 0x99, 0x5f, 0x0c, 0xb5, 0x3a, 0x67,
    0x53, 0xd5, 0xa4, 0x07, 0x7a, 0xc6, 0xf1, 0xfd, 0xca, 0x4a, 0xf6, 0x99, 0xe1, 0x7e, 0xc6,
    0x3d, 0x47, 0xbe, 0x49, 0xad, 0x36, 0x5f, 0xef, 0xdd, 0xa3, 0x5a, 0x9b, 0xf2, 0xce, 0x73,
    0xe5, 0x38, 0xc5, 0xb4, 0x80, 0x2c, 0x58, 0x4f, 0x35, 0x3e, 0x81, 0x3c, 0x08, 0x7d, 0xc4,
    0x49, 0x1f, 0x48, 0x3f, 0x78, 0x17, 0x62, 0xb9, 0x36, 0x17, 0x71, 0x94, 0x5e, 0xab, 0x3c,
    0x63, 0xd6, 0xe1, 0x4b, 0xfd, 0x26, 0x22, 0xe7, 0x43, 0xc3, 0x88, 0x98, 0xba, 0xad, 0x51,
    0xd4, 0xc0, 0xde, 0x89, 0xb8, 0x4d, 0xda, 0x07, 0x64, 0xec, 0x7e, 0x5f, 0x23, 0xa1, 0xb8,
    0x46, 0x3d, 0xeb, 0x67, 0x33, 0x6b, 0x8e, 0x25, 0xa2, 0x7e, 0x16, 0xc5, 0x7a, 0xfe, 0xe8,
    0x74, 0x3d, 0x46, 0xf4, 0xa7, 0xcd, 0xd5, 0x04, 0x2b, 0xf9, 0x8e, 0xd9, 0x1b, 0x4b, 0xe9,
    0x25, 0x35, 0x3c, 0xb5, 0x7e, 0xcc, 0x8a, 0xe6, 0x26, 0x3e, 0xd3, 0xdc, 0x84, 0xf1, 0xd1,
    0x27, 0xad, 0x39, 0x20, 0x6b, 0xbb, 0xd1, 0x7c, 0xd1, 0xa7, 0xa7, 0xd7, 0xac, 0x11, 0x7e,
    0xf4, 0xc1, 0xd8, 0xe2, 0xaf, 0x57, 0xd8, 0x5c, 0x36, 0x3f, 0x34, 0xd2, 0xcc, 0x6b, 0x69,
    0x33, 0x73, 0xfc, 0x5c, 0x9c, 0x64, 0xe0, 0xe4, 0xe3, 0x24, 0xa1, 0xb0, 0xe5, 0x75, 0xd9,
    0x72, 0x39, 0x29, 0xd0, 0xd9, 0x92, 0xa6, 0xa5, 0xf7, 0xb6, 0x86, 0x4f, 0xe8, 0x73, 0x0d,
    0xda, 0x8b, 0x50, 0xe0, 0x96, 0x8f, 0x2a, 0xf6, 0xeb, 0x4f, 0x55, 0x6f, 0x3d, 0x59, 0x93,
    0xe0, 0x6e, 0x0c, 0xec, 0x9e, 0xee, 0xb3, 0xe5, 0x1e, 0x81, 0x69, 0x9d, 0x4a, 0xa3, 0xae,
    0x16, 0x33, 0xf7, 0x55, 0xee, 0x8d, 0xec, 0x83, 0x1a, 0xa4, 0x75, 0xdc, 0x54, 0x5c, 0x93,
    0xea, 0x58, 0xf8, 0xd5, 0x8b, 0x7c, 0x9a, 0xd9, 0xbd, 0x97, 0xba, 0x1d, 0xd9, 0x3d, 0x8b,
    0x8f, 0xb3, 0x10, 0x18, 0xa8, 0xc5, 0xb6, 0xa7, 0xef, 0x79, 0x8d, 0xed, 0xdc, 0x40, 0x8b,
    0x14, 0xd6, 0xa6, 0x55, 0xbc, 0x35, 0x7b, 0x2e, 0x0b, 0xac, 0x55, 0x85, 0xfe, 0x81, 0xc9,
    0x35, 0xbc, 0xba, 0x56, 0x26, 0xe1, 0x09, 0xf3, 0xf1, 0x18, 0x0b, 0x6f, 0xc6, 0x3a, 0x8e,
    0xdf, 0x18, 0x7d, 0xea, 0x4c, 0x9c, 0x47, 0x98, 0xda, 0x03, 0x02, 0xf3, 0x92, 0xda, 0x05,
    0x49, 0x5d, 0x5a, 0xe3, 0xb9, 0x4c, 0x5d, 0xda, 0x5c, 0x4e, 0x55, 0xb6, 0xbf, 0x83, 0xde,
    0xee, 0x8a, 0xef, 0xa7, 0x78, 0x8d, 0xa5, 0xe8, 0x69, 0x96, 0xfa, 0x1f, 0x32, 0x39, 0x00,
    0x0c, 0x1d, 0xd7, 0xe9, 0x36, 0x65, 0x1e, 0xe1, 0x01, 0xb6, 0xbd, 0xd2, 0xfa, 0x9b, 0xb2,
    0x3a, 0x8e, 0x11, 0x8e, 0xb0, 0xa6, 0x8b, 0xc6, 0x1b, 0xc6, 0x6b, 0x03, 0xa7, 0x2a, 0xfa,
    0xbd, 0x65, 0xf1, 0x4c, 0x26, 0x8f, 0xc8, 0xf9, 0x6f, 0x76, 0x99, 0xfd, 0x37, 0xea, 0x86,
    0xeb, 0xb8, 0xf7, 0x0b, 0xec, 0x03, 0xe3, 0x4e, 0xf8, 0x22, 0x26, 0x62, 0xeb, 0xd9, 0x69,
    0x73, 0x56, 0x5c, 0xb3, 0x75, 0xfc, 0x34, 0x36, 0x93, 0xc3, 0x8a, 0x1b, 0xbc, 0xd9, 0xcc,
    0xd1, 0xed, 0xfc, 0xcc, 0xdd, 0xd7, 0xfd, 0xdc, 0x92, 0x3e, 0xdf, 0x39, 0xa7, 0x05, 0x6c,
    0x05, 0xe6, 0xb4, 0x48, 0x9b, 0xa4, 0xd3, 0x4f, 0xd8, 0x3f, 0x25, 0xea, 0xc4, 0xc2, 0xfe,
    0x3f, 0x48, 0xda, 0x3f, 0x2d, 0x48, 0x73, 0x90, 0x24, 0x06, 0xc3, 0x32, 0x2f, 0x3a, 0xfb,
    0x27, 0x85, 0x76, 0xc0, 0x96, 0x75, 0x6e, 0xd1, 0x73, 0xd9, 0xe8, 0x8f, 0x9a, 0xc6, 0x35,
    0x39, 0x39, 0xa4, 0x23, 0xc4, 0x85, 0xf8, 0x4b, 0xab, 0x1f, 0x15, 0x75, 0x96, 0x6c, 0x0f,
    0x5c, 0xad, 0xc5, 0x81, 0xb4, 0x73, 0x27, 0x69, 0x8d, 0xe7, 0x6c, 0xff, 0xdb, 0xd9, 0xd4,
    0xfb, 0x38, 0x0b, 0x32, 0x39, 0x84, 0x85, 0x7d, 0xc3, 0x35, 0xdd, 0xa2, 0x40, 0xae, 0x30,
    0xcc, 0xf8, 0xca, 0x4d, 0x5b, 0x4b, 0x61, 0xa4, 0x85, 0x7f, 0x49, 0x93, 0xdb, 0x7c, 0x07,
    0x46, 0x3e, 0x45, 0x68, 0xd0, 0xcf, 0x7b, 0x41, 0xcd, 0xde, 0x32, 0xbb, 0x2a, 0x6b, 0x07,
    0xfc, 0xb2, 0xbc, 0x2f, 0x23, 0x12, 0xb2, 0x30, 0xfa, 0xc6, 0xce, 0x42, 0x2c, 0xc5, 0x70,
    0x76, 0xd6, 0x08, 0xf1, 0x3d, 0x66, 0x2c, 0xb0, 0x97, 0xf6, 0xec, 0x52, 0x76, 0x21, 0xd9,
    0xdc, 0x07, 0x96, 0xce, 0xa9, 0x23, 0xf1, 0xfc, 0xc2, 0x97, 0xd8, 0xd5, 0xf9, 0x19, 0xe7,
    0x2f, 0xb5, 0x5a, 0xe1, 0xbc, 0x0e, 0xb3, 0x66, 0x7a, 0x1e, 0x5f, 0xa8, 0xd3, 0x41, 0x9c,
    0xb5, 0x65, 0xea, 0x06, 0x06, 0x4d, 0xe6, 0xeb, 0x19, 0x47, 0xad, 0xbc, 0x2e, 0x14, 0xa1,
    0xac, 0x3b, 0x9c, 0x84, 0x4a, 0xff, 0x36, 0x7a, 0x16, 0x60, 0xfd, 0x52, 0x87, 0xe8, 0xac,
    0xb1, 0x75, 0x87, 0xf6, 0xf9, 0x61, 0xb1, 0x9d, 0xfd, 0x95, 0xf6, 0x19, 0xaa, 0xa8, 0xfc,
    0xea, 0x4b, 0xcb, 0x98, 0x61, 0x41, 0x53, 0xa4, 0x93, 0x9b, 0xbd, 0x7b, 0x53, 0xdf, 0xe2,
    0x02, 0x2f, 0x7a, 0x12, 0x3e, 0xc4, 0xcf, 0xa1, 0x5e, 0xef, 0x8a, 0xfd, 0x19, 0x64, 0xf3,
    0x7a, 0x0c, 0x9b, 0xf7, 0x10, 0x7d, 0x47, 0x81, 0x8a, 0x81, 0xa2, 0xef, 0x2c, 0x8d, 0x43,
    0x85, 0xb5, 0x86, 0xc5, 0xbc, 0x6c, 0x3d, 0x85, 0xe0, 0x4c, 0x1e, 0xa4, 0x5f, 0x41, 0xf8,
    0x74, 0xdf, 0x11, 0xe7, 0x0e, 0x7b, 0x83, 0x9c, 0x2e, 0x28, 0x78, 0x4f, 0x81, 0x1f, 0x60,
    0xd3, 0x09, 0xb6, 0xa2, 0xff, 0xa1, 0xec, 0x83, 0x07, 0xf6, 0x81, 0xf2, 0xc1, 0x1b, 0x71,
    0x4e, 0x45, 0xd4, 0xdb, 0x2f, 0x8a, 0xcd, 0xe7, 0x65, 0x28, 0xfb, 0x50, 0xde, 0xb2, 0xb1,
    0x2b, 0x7a, 0xf2, 0xe4, 0x72, 0x37, 0xe3, 0xac, 0x1e, 0x9b, 0xf6, 0x35, 0xca, 0xc8, 0x98,
    0xc7, 0x51, 0x7b, 0x30, 0xe9, 0x60, 0x2c, 0x05, 0xf4, 0x55, 0xc7, 0xc0, 0x32, 0xad, 0xa5,
    0x8c, 0x73, 0x00, 0x45, 0xad, 0x6d, 0xa7, 0x97, 0xe9, 0x4d, 0x6a, 0xf8, 0xa2, 0xfa, 0xa6,
    0x68, 0xc4, 0x9d, 0x90, 0x86, 0x05, 0xce, 0xef, 0x68, 0xe0, 0x99, 0x44, 0x9f, 0x78, 0x5f,
    0x1e, 0xf9, 0x6c, 0x2c, 0x79, 0xf3, 0xd7, 0xe5, 0xff, 0xc0, 0x59, 0xfa, 0xd6, 0x5c, 0x64,
    0xa7, 0x3c, 0x06, 0x49, 0xef, 0xef, 0x36, 0x15, 0x3d, 0x8a, 0xcf, 0x0d, 0x95, 0xcf, 0x68,
    0xa7, 0x1a, 0x34, 0x96, 0xbe, 0x57, 0xa0, 0x5f, 0x99, 0x35, 0x17, 0x0d, 0x79, 0xe5, 0x0b,
    0x8d, 0x38, 0x23, 0x5b, 0xfe, 0x6f, 0xea, 0x8f, 0xcf, 0xde, 0xc3, 0xe7, 0x2a, 0xda, 0xcd,
    0x1f, 0xf8, 0x26, 0x87, 0xd2, 0xde, 0x3f, 0xa9, 0xad, 0x7a, 0x86, 0x99, 0x3e, 0x3f, 0xea,
    0x3d, 0xd2, 0xf5, 0x15, 0xc4, 0x36, 0x5c, 0x3b, 0xf6, 0xe5, 0x88, 0xf1, 0x66, 0xe2, 0xcb,
    0x5d, 0x53, 0xdf, 0xb3, 0x5c, 0x1f, 0x0f, 0x5b, 0x9c, 0xe3, 0xfb, 0x75, 0x88, 0x18, 0x87,
    0x6d, 0xe0, 0x5e, 0x8d, 0x36, 0xa6, 0x0c, 0x27, 0x7d, 0xd3, 0x79, 0xcb, 0xf4, 0xeb, 0x2b,
    0xb5, 0xb3, 0xbd, 0x86, 0x48, 0xf7, 0x24, 0xfb, 0xf0, 0xbf, 0xfa, 0x0e, 0xd9, 0x41, 0x9a,
    0x47, 0x3c, 0xc7, 0xa3, 0x38, 0x67, 0x6b, 0x8e, 0x3a, 0xd7, 0xd1, 0x16, 0xba, 0x57, 0x16,
    0x5d, 0x64, 0x4b, 0x0a, 0x9a, 0x7c, 0x09, 0x24, 0xee, 0x39, 0x8b, 0xe3, 0x36, 0x78, 0x9a,
    0xdf, 0x6b, 0xfb, 0xda, 0x66, 0x79, 0x39, 0xf9, 0x17, 0x84, 0x1e, 0x6a, 0xe5, 0xd7, 0x81,
    0x53, 0x50, 0x32, 0xa9, 0xe8, 0xec, 0x6e, 0xa0, 0xa7, 0x94, 0x1e, 0x96, 0x9d, 0x41, 0xe9,
    0xc1, 0x7d, 0x1f, 0xb7, 0xae, 0x1f, 0xfb, 0xb9, 0x8a, 0x79, 0x4b, 0x69, 0xaf, 0xa8, 0xb2,
    0xce, 0xf9, 0x4b, 0xf3, 0x58, 0xa4, 0xcc, 0xb7, 0xcc, 0x7c, 0x37, 0x9d, 0x36, 0xbc, 0x34,
    0x14, 0xf1, 0xfc, 0xff, 0x3b, 0x77, 0xb7, 0xe4, 0x1d, 0x89, 0x05, 0x37, 0xdf, 0x71, 0x6e,
    0x47, 0xf4, 0x27, 0x52, 0x7b, 0x49, 0xf8, 0xa9, 0x37, 0x71, 0xce, 0x41, 0xc6, 0xb7, 0x99,
    0x99, 0x73, 0xce, 0x45, 0xcf, 0xe4, 0xcb, 0x94, 0xd9, 0x92, 0x20, 0xaf, 0x45, 0x2e, 0xbe,
    0xd1, 0x72, 0xf1, 0xa5, 0x5f, 0xd6, 0xb9, 0xa2, 0x66, 0x05, 0xe9, 0x57, 0x49, 0x11, 0x1e,
    0x4d, 0x34, 0xa1, 0xcb, 0x00, 0xd5, 0xe3, 0x63, 0xed, 0x66, 0xf8, 0x99, 0x2d, 0xbe, 0x22,
    0x65, 0x98, 0xf2, 0x48, 0xb7, 0x2b, 0x2a, 0x9a, 0xdd, 0x34, 0xe6, 0xf3, 0xf5, 0x37, 0xd6,
    0x6a, 0x3c, 0xaf, 0xc5, 0x5f, 0xbb, 0x79, 0x99, 0x93, 0xf6, 0xa4, 0x37, 0xde, 0x35, 0x71,
    0xfd, 0x34, 0x56, 0xd0, 0x20, 0x1f, 0xb6, 0x89, 0x7f, 0xe7, 0x31, 0x9f, 0xc9, 0x5f, 0xa7,
    0x2f, 0xed, 0x8f, 0xec, 0xe9, 0xf0, 0x9c, 0x62, 0x85, 0x6d, 0xf3, 0x35, 0xec, 0x50, 0x6d,
    0x77, 0x65, 0xfb, 0x61, 0xc5, 0xf7, 0x9b, 0x3d, 0x09, 0x8a, 0x6b, 0xe7, 0x5e, 0x94, 0x2f,
    0xa7, 0x9f, 0xbf, 0x84, 0x9d, 0xd1, 0xb7, 0x63, 0x0e, 0x8d, 0xd8, 0xbc, 0xe4, 0x73, 0x47,
    0x73, 0x61, 0xe4, 0x54, 0x19, 0x7a, 0xa7, 0xe9, 0x2f, 0x4b, 0xe7, 0x4a, 0x31, 0x30, 0x83,
    0xeb, 0x3a, 0x9a, 0xb5, 0x4f, 0x74, 0xa6, 0x6f, 0x9d, 0xc1, 0x3b, 0xf2, 0x67, 0x58, 0x37,
    0x06, 0xc2, 0xf7, 0x58, 0x4c, 0xc7, 0x69, 0x6c, 0x36, 0xa5, 0x63, 0xe5, 0x17, 0x4e, 0x3a,
    0x3a, 0x90, 0xc5, 0x07, 0xac, 0x6a, 0x01, 0x99, 0x78, 0x45, 0x1d, 0xef, 0x60, 0xf5, 0x57,
    0xfc, 0x18, 0x85, 0xb5, 0x50, 0xb2, 0x7a, 0x7c, 0x3f, 0x8d, 0xb5, 0xe8, 0x74, 0x9a, 0xcb,
    0xd5, 0xce, 0x8d, 0x7a, 0x6c, 0x18, 0x39, 0x4f, 0xc5, 0x3d, 0x16, 0x4a, 0xd6, 0xc1, 0x3c,
    0x2b, 0xfb, 0x0f, 0x31, 0xff, 0x9a, 0x59, 0xf7, 0xc9, 0x7c, 0x3e, 0xe5, 0x69, 0xfe, 0x26,
    0xce, 0xa3, 0x96, 0x65, 0x0f, 0x78, 0x9d, 0xdb, 0xef, 0xce, 0x55, 0x62, 0x52, 0x6c, 0xf7,
    0xbe, 0xfd, 0xff, 0xe9, 0x7d, 0x94, 0x31, 0xbf, 0x8d, 0x8d, 0xcf, 0x7e, 0x95, 0xd2, 0xa7,
    0x3f, 0x9e, 0xf6, 0xaa, 0xfc, 0x5f, 0xa3, 0x4f, 0x2b, 0x1f, 0xcd, 0xea, 0xb2, 0x9e, 0xc8,
    0x26, 0x99, 0x50, 0xca, 0x57, 0x4c, 0xff, 0x9a, 0xb6, 0xe7, 0xeb, 0xff, 0x35, 0xbe, 0x32,
    0x71, 0xc1, 0x5d, 0xee, 0xbb, 0xdb, 0xf9, 0xed, 0x6f, 0x73, 0x7d, 0x76, 0x18, 0x7b, 0x8c,
    0x4e, 0x0e, 0x0a, 0x07, 0xac, 0xf5, 0x75, 0xb7, 0xf4, 0x02, 0x3b, 0x3a, 0x46, 0x7e, 0xbe,
    0xc9, 0xd8, 0x80, 0xb6, 0x7d, 0xb7, 0xc8, 0xc1, 0xa2, 0xf9, 0x62, 0x0f, 0x74, 0xca, 0x39,
    0x64, 0x6b, 0x5c, 0x30, 0x1e, 0xf4, 0xff, 0xa5, 0xb9, 0x4e, 0x1a, 0xd7, 0xdb, 0xb0, 0xc6,
    0xac, 0xe8, 0xf5, 0x0c, 0x4a, 0xf5, 0x74, 0x33, 0xae, 0xf9, 0x4d, 0x1e, 0x6d, 0x30, 0x20,
    0x04, 0x61, 0x1f, 0xec, 0x38, 0x2f, 0x9f, 0xf3, 0xf7, 0xf8, 0x7b, 0xb6, 0x9a, 0xfc, 0x9a,
    0x5f, 0x1d, 0x66, 0x70, 0x68, 0x62, 0x7e, 0x46, 0xaf, 0x1c, 0xb3, 0x4e, 0xbf, 0x16, 0x87,
    0xba, 0x50, 0xbc, 0x2d, 0xcc, 0x41, 0x6d, 0xca, 0x3c, 0xf5, 0x38, 0x6b, 0xf7, 0x62, 0xad,
    0x8b, 0x27, 0x72, 0xb0, 0x67, 0x37, 0xea, 0x94, 0xee, 0x46, 0xf4, 0x99, 0x5e, 0x67, 0x73,
    0xb2, 0x39, 0x50, 0xc3, 0xb1, 0xd7, 0xe2, 0x7c, 0x34, 0xba, 0xd7, 0x4d, 0x11, 0xbb, 0xca,
    0x2d, 0x16, 0x39, 0x19, 0x93, 0xa8, 0xda, 0xf8, 0x9a, 0x1c, 0xfd, 0x45, 0x77, 0xd9, 0xcc,
    0xc2, 0xbd, 0xfa, 0x07, 0x7d, 0xf4, 0xdc, 0xdb, 0xfb, 0xc8, 0xd8, 0xc3, 0x82, 0x58, 0xe8,
    0x30, 0xf0, 0xeb, 0x68, 0x0f, 0x36, 0x65, 0x2e, 0xb3, 0x79, 0xff, 0xf3, 0xf5, 0xbe, 0x6c,
    0xbd, 0xbe, 0xc9, 0x19, 0x12, 0x7f, 0x53, 0x31, 0xc9, 0xe6, 0xec, 0x95, 0xcf, 0x6c, 0x6e,
    0x64, 0xb2, 0xc8, 0x48, 0xad, 0x4e, 0x4a, 0x85, 0xfd, 0x47, 0x01, 0x63, 0x3a, 0x6d, 0x7d,
    0x2d, 0x78, 0xb2, 0xbc, 0x7f, 0x6b, 0xde, 0x21, 0x1f, 0x5f, 0x1b, 0x6d, 0x6d, 0x79, 0x6e,
    0x71, 0xbf, 0xb4, 0x87, 0x0a, 0xd5, 0x06, 0xc4, 0x5a, 0x59, 0xcd, 0xb9, 0x93, 0xfa, 0xe4,
    0x72, 0x43, 0xf4, 0x50, 0x29, 0xe0, 0xa3, 0xba, 0xdd, 0x49, 0xfb, 0xd8, 0x34, 0xf5, 0xb3,
    0x77, 0xdf, 0xb0, 0xe4, 0x7a, 0xdc, 0xf0, 0x0d, 0xae, 0x01, 0xb3, 0x22, 0xff, 0xba, 0xf0,
    0x6f, 0x5f, 0xb0, 0x56, 0x15, 0xd2, 0x8c, 0xac, 0xaf, 0x97, 0xe2, 0x05, 0xcc, 0x18, 0xbf,
    0x75, 0x02, 0x91, 0xe7, 0x4c, 0x32, 0xbe, 0x5b, 0xc1, 0xdb, 0x3d, 0xca, 0xcb, 0x4c, 0xe3,
    0xee, 0x63, 0x21, 0xee, 0xa5, 0x1d, 0xa1, 0x2f, 0xb5, 0xca, 0x3c, 0xac, 0x72, 0x27, 0xed,
    0xd5, 0x07, 0x8d, 0x63, 0x4d, 0xcf, 0x68, 0x7f, 0x2e, 0x9d, 0xb0, 0x39, 0x66, 0x5f, 0xe4,
    0xf6, 0xca, 0xc3, 0x6f, 0x0e, 0x44, 0xcd, 0xca, 0x05, 0x62, 0x23, 0x03, 0x4f, 0xf5, 0x88,
    0x65, 0xfa, 0x31, 0x0d, 0x45, 0x1c, 0x62, 0xe1, 0x60, 0xce, 0x6c, 0xa3, 0x2b, 0x70, 0x3d,
    0x81, 0x0b, 0xf7, 0x65, 0x7f, 0x86, 0x4c, 0x8c, 0x04, 0xef, 0xdc, 0x97, 0x3f, 0xb2, 0xc5,
    0x68, 0x5f, 0xcc, 0xba, 0x23, 0x8e, 0xaa, 0x61, 0xa6, 0xc5, 0x86, 0x59, 0x0f, 0x44, 0x5a,
    0x05, 0xad, 0x87, 0x23, 0xad, 0x97, 0x62, 0xb6, 0xe7, 0x3b, 0xfb, 0x20, 0x76, 0x19, 0x1c,
    0xa1, 0x83, 0xc2, 0x58, 0xeb, 0x41, 0xa0, 0xf9, 0x83, 0x42, 0x51, 0xdf, 0x2c, 0x5c, 0xca,
    0xac, 0x7c, 0xa7, 0x0a, 0xe8, 0xc2, 0xc4, 0xad, 0x9a, 0xbe, 0xd2, 0x09, 0xfb, 0x79, 0x19,
    0x96, 0xaf, 0x9b, 0xb5, 0xe6, 0xf9, 0xe5, 0x7b, 0x94, 0x89, 0x31, 0x6d, 0x32, 0x51, 0xf0,
    0xac, 0x2f, 0xc0, 0xa8, 0x7f, 0x68, 0xe8, 0x4a, 0x93, 0x40, 0xc3, 0x03, 0xd1, 0xdd, 0x57,
    0x2b, 0xe6, 0x69, 0xb2, 0x3e, 0x77, 0xd6, 0xa7, 0xaa, 0xfc, 0x78, 0x72, 0x5d, 0x69, 0xaf,
    0x80, 0xe5, 0xa7, 0x90, 0x45, 0x86, 0x0e, 0x6a, 0xd3, 0x71, 0xfb, 0xc3, 0x4c, 0xaf, 0x96,
    0xf8, 0xbf, 0x33, 0x14, 0xf1, 0xac, 0xa5, 0x5e, 0x37, 0x87, 0x79, 0x49, 0xbf, 0x38, 0xc7,
    0x62, 0xe7, 0x1b, 0x7e, 0xe7, 0x63, 0x1a, 0xdb, 0x2b, 0xe8, 0xeb, 0x96, 0x7b, 0x3e, 0x93,
    0xf5, 0x5d, 0xaf, 0x79, 0xb3, 0xc7, 0x64, 0xce, 0x3f, 0x98, 0xd6, 0x94, 0xd7, 0x6a, 0x3e,
    0xe3, 0x1f, 0xc8, 0x8e, 0x91, 0xd6, 0x76, 0xd4, 0x30, 0xa1, 0x06, 0x0d, 0x5a, 0xec, 0xd3,
    0xe2, 0xe6, 0xb6, 0x1e, 0x95, 0x39, 0x9c, 0x81, 0x33, 0xcc, 0xe0, 0x9d, 0x2c, 0xfd, 0x8e,
    0x75, 0xbf, 0x0c, 0x1d, 0x29, 0x67, 0x3b, 0xa6, 0x73, 0xbf, 0x18, 0x75, 0xa7, 0x72, 0x73,
    0xe7, 0x33, 0xe7, 0xea, 0x19, 0x6e, 0xca, 0xc6, 0xc8, 0xf0, 0x96, 0xa2, 0xfa, 0x78, 0xb3,
    0xe7, 0x51, 0x9a, 0x17, 0x7e, 0x65, 0xce, 0xf1, 0xb7, 0x7d, 0x75, 0xaf, 0x18, 0xa3, 0xdc,
    0xbd, 0x2e, 0x17, 0xf9, 0xb6, 0xb5, 0x68, 0xf5, 0xab, 0x3f, 0xad, 0x7b, 0x6a, 0xc7, 0xd0,
    0xf1, 0x4e, 0x71, 0x17, 0x08, 0xb3, 0x64, 0x60, 0xe8, 0x72, 0xb5, 0x3f, 0x8c, 0x1e, 0x5a,
    0x7e, 0x65, 0xb9, 0xbb, 0xa9, 0xf5, 0x2f, 0xbd, 0xfa, 0x6e, 0x9a, 0x38, 0x08, 0x1b, 0x26,
    0xc2, 0x23, 0xd8, 0xd7, 0xa3, 0xe2, 0x00, 0x85, 0xfd, 0xcd, 0x65, 0xde, 0x7b, 0x69, 0xff,
    0xe6, 0xd3, 0x5c, 0x5f, 0x2b, 0x73, 0x9f, 0x4a, 0xbf, 0x93, 0xae, 0x3b, 0x57, 0xfb, 0x2f,
    0x73, 0xe0, 0x51, 0xde, 0x3e, 0xf2, 0xd9, 0x41, 0xe0, 0xb3, 0x0c, 0x1f, 0x37, 0x3b, 0xdf,
    0x99, 0x55, 0x6c, 0xb4, 0x0f, 0x7c, 0xb5, 0x36, 0xdc, 0x64, 0x75, 0x0d, 0xfc, 0x7d, 0x94,
    0xc9, 0x5a, 0x1f, 0xe3, 0xbb, 0x2c, 0xbd, 0xca, 0x3a, 0x71, 0x96, 0x7d, 0xca, 0xf5, 0xd4,
    0xfd, 0xc4, 0x7a, 0x9c, 0x96, 0x74, 0x89, 0x6f, 0xef, 0x12, 0xfc, 0xee, 0x49, 0xd5, 0x9e,
    0xde, 0x8a, 0x99, 0xda, 0x93, 0xd9, 0x9a, 0xce, 0x4f, 0x4e, 0xda, 0xa7, 0x8e, 0x70, 0xe8,
    0xaf, 0x15, 0x6b, 0xea, 0xe9, 0x79, 0xb7, 0x23, 0x5d, 0xce, 0x5b, 0xfb, 0x9f, 0x4e, 0xea,
    0x86, 0x67, 0x47, 0x5c, 0xce, 0x77, 0x31, 0x65, 0x5b, 0x9d, 0x06, 0xa6, 0xe9, 0x4e, 0x3e,
    0x6b, 0x4c, 0x98, 0x7b, 0x5f, 0xe6, 0xba, 0xad, 0xed, 0xf6, 0x2d, 0xed, 0x91, 0xac, 0x31,
    0x34, 0x94, 0x31, 0x75, 0x91, 0xbf, 0x2c, 0x72, 0xd3, 0x3a, 0x83, 0xa0, 0xb8, 0xf6, 0xb6,
    0xf1, 0xae, 0xf5, 0xaa, 0x1a, 0xb7, 0x34, 0xdd, 0x2a, 0xad, 0x07, 0x69, 0xe0, 0x53, 0xc7,
    0x89, 0x89, 0x46, 0x6c, 0xf8, 0xf1, 0x5b, 0xf9, 0xae, 0x63, 0xd2, 0x2c, 0xfe, 0x17, 0x6b,
    0x09, 0x83, 0x57, 0x88, 0xdc, 0x20, 0x71, 0x47, 0xe5, 0x99, 0x16, 0xf2, 0x89, 0x65, 0xe7,
    0xf9, 0x2b, 0xf1, 0xa0, 0x36, 0xec, 0x86, 0xc8, 0x71, 0xe2, 0xdf, 0xc9, 0xb5, 0xe8, 0xbd,
    0x3d, 0x53, 0xe6, 0x64, 0xfb, 0x52, 0x9b, 0x7c, 0x5a, 0xaf, 0xd7, 0x79, 0x09, 0xcd, 0xef,
    0x45, 0xec, 0x22, 0xa3, 0xab, 0x98, 0x35, 0xb1, 0xd1, 0x2f, 0x93, 0xe6, 0x12, 0xb3, 0xfe,
    0xd6, 0xbb, 0x26, 0x1a, 0x62, 0x9b, 0xfd, 0xfa, 0x39, 0x59, 0x64, 0x87, 0xcc, 0xd7, 0xd7,
    0x41, 0xe8, 0xe2, 0x59, 0xec, 0x9a, 0x6e, 0x0b, 0x71, 0x3c, 0x37, 0xed, 0xdf, 0xc3, 0xfa,
    0xe4, 0x8f, 0xe8, 0x53, 0x70, 0x66, 0x86, 0x4f, 0xd7, 0x96, 0xd3, 0x5f, 0xc6, 0xdf, 0xe6,
    0x8f, 0x6b, 0xab, 0x4f, 0xe2, 0xb6, 0x6e, 0xa3, 0x32, 0x6e, 0xf8, 0x98, 0xcb, 0xe7, 0xd1,
    0x19, 0x94, 0x8f, 0xd6, 0xe8, 0x69, 0x53, 0x9a, 0x23, 0xe5, 0xe9, 0xbd, 0xe3, 0xd1, 0xfe,
    0x7f, 0xcb, 0x53, 0x05, 0x5f, 0x20, 0x3a, 0xdc, 0x96, 0xf7, 0xcd, 0xd5, 0xfc, 0x60, 0x88,
    0x3c, 0xf9, 0xc4, 0x9b, 0x02, 0x61, 0x27, 0x67, 0x71, 0xf7, 0x16, 0x1f, 0x96, 0xd9, 0xc7,
    0x86, 0xed, 0xc9, 0xe1, 0x7d, 0x9f, 0x8c, 0xdc, 0xe7, 0xf2, 0xbd, 0x66, 0x7c, 0xf6, 0x37,
    0x3f, 0x98, 0x27, 0x60, 0xd4, 0xe6, 0xa0, 0x5c, 0x28, 0xb3, 0x1e, 0x11, 0xf3, 0x79, 0x51,
    0x90, 0x6b, 0xf1, 0x48, 0x9b, 0x46, 0xf4, 0x9a, 0xc8, 0xc4, 0x64, 0xaf, 0x8b, 0x07, 0x70,
    0xab, 0x59, 0x19, 0x96, 0xd8, 0xb6, 0x4f, 0x82, 0xa7, 0x88, 0x7c, 0x33, 0x0b, 0x0f, 0x09,
    0x0f, 0x11, 0xfb, 0x2f, 0xe6, 0xcd, 0x7c, 0xd3, 0x94, 0x59, 0xb9, 0xba, 0xa9, 0x9f, 0x7a,
    0x4e, 0xc8, 0x79, 0xf1, 0x1f, 0x43, 0x91, 0xa7, 0xb8, 0xd0, 0xfa, 0x2c, 0x23, 0x8e, 0x08,
    0xeb, 0x4e, 0x6f, 0xf3, 0xb9, 0x59, 0x56, 0x1b, 0x95, 0xe5, 0xce, 0x4b, 0x96, 0x8e, 0x77,
    0xec, 0xfd, 0x64, 0xb1, 0x1f, 0x6e, 0x9e, 0x93, 0xf7, 0xcd, 0x7c, 0x52, 0xf9, 0x5c, 0xd4,
    0x4e, 0xef, 0xe1, 0xb8, 0x5c, 0x6c, 0xee, 0x57, 0x20, 0x77, 0x2a, 0x8b, 0x20, 0x3a, 0x2f,
    0x95, 0xf1, 0xac, 0xda, 0xf8, 0x8c, 0x26, 0xbe, 0xb7, 0xa8, 0xfa, 0x95, 0x45, 0x37, 0x78,
    0x76, 0xef, 0x56, 0xbd, 0x4e, 0xd2, 0x59, 0xd4, 0xc2, 0xcd, 0xa2, 0xeb, 0x6e, 0xb4, 0xdf,
    0x97, 0xbb, 0x24, 0x59, 0xec, 0xfc, 0xf7, 0x97, 0xd1, 0x17, 0x8d, 0x33, 0x9e, 0x26, 0xdd,
    0xb4, 0x7f, 0x89, 0x5d, 0xcf, 0x59, 0xee, 0xc3, 0xd7, 0xb8, 0x25, 0x7e, 0xbf, 0x0f, 0x8f,
    0x5d, 0x78, 0xee, 0x75, 0xdd, 0x4b, 0xaf, 0xf3, 0x75, 0x98, 0x6d, 0xe1, 0x7b, 0x93, 0x7e,
    0xdc, 0xf0, 0xdf, 0x83, 0x9a, 0x7f, 0x8e, 0x27, 0x9e, 0x13, 0x56, 0x13, 0x67, 0xde, 0x69,
    0x2c, 0x1e, 0x92, 0x5f, 0xcb, 0x07, 0xff, 0xb0, 0xa8, 0xd6, 0xd7, 0x8b, 0x87, 0x01, 0x7f,
    0x8d, 0xe0, 0xe7, 0x30, 0x79, 0x72, 0xbf, 0x3e, 0xfe, 0x1e, 0x35, 0x77, 0xcb, 0x5d, 0xe3,
    0x6b, 0xc5, 0xf7, 0xcb, 0xaa, 0x77, 0x5a, 0x76, 0x83, 0xd3, 0x7c, 0xef, 0x1d, 0xe6, 0xa3,
    0xeb, 0x6c, 0xf2, 0xf5, 0xfa, 0x34, 0x81, 0x6f, 0x6c, 0x96, 0x7f, 0x4d, 0xbb, 0xf5, 0xc3,
    0xda, 0x3c, 0x2d, 0xf7, 0xc3, 0xd5, 0xe3, 0xa6, 0xb9, 0x5e, 0x9e, 0xe1, 0xbd, 0xb3, 0x7a,
    0x7e, 0xb6, 0x3e, 0xf3, 0x39, 0x9b, 0xfa, 0x6f, 0xbd, 0x2e, 0xee, 0x87, 0xb3, 0xea, 0xd7,
    0xeb, 0xb8, 0xbb, 0xda, 0x3f, 0x57, 0xbe, 0x3e, 0xd4, 0xbe, 0xb5, 0xde, 0x56, 0xb3, 0xe9,
    0xb5, 0xa8, 0x0d, 0x56, 0xd1, 0xbe, 0x7f, 0x5a, 0x8c, 0xee, 0xf7, 0xf0, 0xb3, 0xf5, 0x99,
    0xad, 0x5f, 0x87, 0xb5, 0x9c, 0xd4, 0x78, 0x55, 0xef, 0xfc, 0x32, 0x6d, 0x3a, 0x8b, 0xcc,
    0x5f, 0xe0, 0xbb, 0x38, 0xaf, 0xf9, 0xd4, 0x3b, 0x44, 0xfb, 0xed, 0x4a, 0x5b, 0x63, 0x25,
    0x26, 0xef, 0xfd, 0x0b, 0x9c, 0xd5, 0x2e, 0x39, 0x2e, 0xbb, 0x8d, 0x73, 0xdc, 0x6a, 0xfe,
    0x3b, 0x83, 0xb0, 0xbf, 0x86, 0xff, 0x9f, 0x16, 0x41, 0x0c, 0xff, 0x0e, 0xcf, 0xb0, 0x86,
    0xdc, 0xdf, 0x91, 0xfa, 0x9b, 0xd8, 0xf7, 0x6d, 0xfe, 0x99, 0xf1, 0x34, 0x7c, 0x87, 0xef,
    0x2e, 0x1e, 0xb6, 0xb0, 0xdf, 0xf5, 0x86, 0x9a, 0xef, 0xf9, 0xee, 0x34, 0xab, 0xba, 0xef,
    0x5a, 0xf8, 0xce, 0xcf, 0xd3, 0xbc, 0xe1, 0x9d, 0x9f, 0xff, 0xf4, 0xba, 0xe1, 0x65, 0xd1,
    0x3e, 0xe2, 0x56, 0x65, 0x0b, 0xf3, 0x5e, 0xcf, 0x76, 0x5f, 0x09, 0xcf, 0xab, 0xe9, 0xc0,
    0x13, 0x38, 0x9b, 0xf3, 0x1c, 0xd6, 0xfa, 0x34, 0x91, 0xcf, 0x35, 0x92, 0x97, 0x87, 0xe6,
    0x7c, 0xe2, 0x1d, 0xe0, 0x9d, 0xa3, 0xa0, 0x31, 0xa0, 0x8d, 0x46, 0x05, 0xe6, 0xb7, 0x5e,
    0xb7, 0xc7, 0xf8, 0x21, 0xf9, 0x8c, 0xa6, 0xe2, 0xcc, 0x8b, 0xc7, 0xf9, 0x58, 0x9c, 0x2b,
    0xb3, 0x49, 0x25, 0x59, 0xc2, 0xf9, 0xcc, 0xaa, 0xc1, 0x77, 0xcf, 0x1f, 0xa3, 0x49, 0x65,
    0x4d, 0x7b, 0x47, 0x38, 0x9b, 0x6d, 0x34, 0xed, 0x1f, 0x16, 0xbb, 0x25, 0xbe, 0xf3, 0xcf,
    0x9c, 0x19, 0xfc, 0xff, 0xf4, 0x74, 0xc6, 0xf7, 0xbe, 0x0e, 0x70, 0x47, 0x8e, 0x51, 0x37,
    0xcc, 0x26, 0xfd, 0xf7, 0x68, 0x54, 0xf9, 0x88, 0xa6, 0x6b, 0x07, 0xe9, 0x69, 0xb1, 0x0b,
    0xc3, 0x07, 0xbf, 0xbe, 0x84, 0x35, 0xc3, 0x99, 0x1e, 0x96, 0x0f, 0xf0, 0xdc, 0xd4, 0x83,
    0xd4, 0x9d, 0xa7, 0x6a, 0xfd, 0xf4, 0x34, 0x85, 0x7d, 0x9d, 0x86, 0x87, 0xe5, 0x2e, 0x38,
    0x1a, 0x58, 0x9e, 0xbf, 0xee, 0x79, 0x3d, 0xde, 0x2b, 0x9c, 0xd3, 0x27, 0xac, 0x59, 0x7e,
    0xb4, 0xd8, 0xfd, 0x3c, 0xc6, 0x3b, 0xf7, 0x9c, 0xbe, 0x17, 0x5e, 0x60, 0x5f, 0x5f, 0x81,
    0x2f, 0x70, 0xbe, 0x9b, 0x78, 0x52, 0xdf, 0x2e, 0xba, 0xe1, 0xb6, 0xd7, 0x76, 0x56, 0xf0,
    0xaf, 0x78, 0x92, 0x9c, 0xa3, 0xd1, 0x6a, 0x3f, 0xec, 0x46, 0x87, 0x97, 0x07, 0xbf, 0x82,
    0x3f, 0x55, 0x0f, 0x97, 0xf9, 0x64, 0x7b, 0xa4, 0xf3, 0x39, 0x57, 0xd4, 0x3b, 0xfd, 0xf3,
    0x46, 0xd7, 0x9b, 0xd9, 0xd4, 0x4b, 0xd4, 0xb9, 0x3a, 0xcd, 0x0b, 0xdd, 0xf5, 0x51, 0xe3,
    0x65, 0x35, 0x39, 0x3c, 0x4d, 0xbc, 0xf5, 0xa2, 0x3b, 0x80, 0xb3, 0x70, 0x2f, 0xd1, 0x48,
    0xf1, 0x0e, 0xf9, 0x86, 0x07, 0x7c, 0xa2, 0x9f, 0xcc, 0x26, 0x7e, 0x77, 0x3e, 0xf9, 0x4a,
    0x3e, 0x0f, 0x40, 0xf3, 0x93, 0x04, 0xbe, 0x1d, 0xd5, 0x1f, 0xbb, 0xd1, 0xe5, 0x69, 0x9f,
    0xfd, 0x71, 0x0c, 0x74, 0x9a, 0x7c, 0xe1, 0xbe, 0xf1, 0x3d, 0xe8, 0x86, 0x1f, 0xf1, 0xc4,
    0x0d, 0x27, 0x5f, 0xef, 0x21, 0xef, 0x85, 0xbb, 0x00, 0x7e, 0x20, 0x79, 0xcf, 0x38, 0x4c,
    0xf6, 0x83, 0x7a, 0x38, 0x0e, 0x1b, 0x13, 0xd0, 0xfd, 0x42, 0x5f, 0xf0, 0x92, 0x49, 0xd0,
    0x83, 0xa4, 0xe1, 0x8e, 0x93, 0xd0, 0x9b, 0x56, 0xa2, 0xe6, 0xd8, 0x0d, 0x5d, 0xfc, 0xf6,
    0x7c, 0xff, 0x89, 0x3c, 0xa0, 0xd7, 0x02, 0x71, 0xd5, 0x49, 0xc6, 0x53, 0x07, 0xff, 0x8b,
    0xc0, 0x6f, 0x03, 0xe2, 0x0d, 0x21, 0x9e, 0x67, 0x1d, 0xe9, 0x8c, 0xd6, 0x1e, 0x21, 0x6f,
    0x35, 0xc7, 0xf1, 0x03, 0x9e, 0x79, 0x6c, 0x7c, 0x7b, 0x38, 0xba, 0x6f, 0xc0, 0xfd, 0x6a,
    0x46, 0x4b, 0x41, 0x3f, 0xbd, 0xd5, 0x2f, 0xb8, 0xcb, 0xc3, 0xd7, 0x9f, 0x7b, 0xf1, 0x8d,
    0x7e, 0xb3, 0xef, 0x0c, 0x3e, 0xfa, 0x67, 0x98, 0xd7, 0xbe, 0x92, 0x59, 0x9b, 0x07, 0x77,
    0x03, 0x9e, 0x86, 0x6b, 0xac, 0x74, 0xe0, 0x0e, 0x00, 0xef, 0xac, 0x5f, 0x80, 0xce, 0x56,
    0x15, 0x7a, 0xff, 0x33, 0x06, 0x3a, 0x9a, 0x4f, 0x06, 0xab, 0x65, 0xcd, 0x07, 0x3e, 0x92,
    0xc2, 0x5e, 0xf2, 0x5d, 0x0c, 0x81, 0x47, 0xee, 0x92, 0x8f, 0xc8, 0xf9, 0x3a, 0xcc, 0xab,
    0xcd, 0xeb, 0xb1, 0xb5, 0xfd, 0xd1, 0x73, 0xe5, 0xef, 0x79, 0xdf, 0x78, 0x9c, 0xfb, 0x55,
    0xf5, 0xf3, 0xd4, 0xeb, 0xac, 0xd7, 0xf3, 0x6e, 0x67, 0xdd, 0xeb, 0x6c, 0x57, 0x40, 0xd7,
    0xd4, 0xfa, 0x5c, 0xcd, 0xa7, 0xc3, 0x3d, 0x9c, 0xed, 0xc7, 0xa2, 0x36, 0x04, 0x3a, 0x71,
    0xa2, 0x2e, 0xf0, 0x8c, 0x51, 0x67, 0xf5, 0xb8, 0x0d, 0x27, 0xa3, 0xe0, 0x73, 0x35, 0xee,
    0xa1, 0xef, 0xac, 0x03, 0x3f, 0xec, 0xfd, 0x43, 0x6b, 0x84, 0xb1, 0x80, 0x76, 0x9c, 0x78,
    0xff, 0xc8, 0x7c, 0xeb, 0x03, 0xe4, 0x2c, 0xed, 0x0b, 0xef, 0x21, 0x3c, 0xfb, 0xd0, 0xac,
    0x9d, 0x3e, 0xcc, 0xce, 0xcd, 0x4b, 0xdc, 0x75, 0x1d, 0x5a, 0x87, 0xf8, 0xc6, 0x08, 0xe8,
    0x9a, 0xc4, 0xc0, 0x4b, 0x32, 0xf3, 0xef, 0xb8, 0xef, 0x0b, 0x97, 0xef, 0x89, 0xcf, 0x7b,
    0x97, 0xfc, 0xee, 0xd3, 0xf9, 0xe7, 0x6a, 0xd4, 0x75, 0xdf, 0x66, 0x30, 0xbf, 0xd1, 0x08,
    0x40, 0xb8, 0x7d, 0x6a, 0x35, 0x81, 0x17, 0xc4, 0x97, 0x5e, 0xb7, 0x7e, 0x02, 0xba, 0x3f,
    0x90, 0x86, 0xab, 0xce, 0xba, 0x37, 0xba, 0xff, 0xc7, 0x0f, 0xa3, 0xfe, 0xb8, 0xd5, 0x1c,
    0xc3, 0xf0, 0x61, 0xe4, 0xfa, 0x6e, 0xb0, 0x39, 0xd0, 0xfc, 0x60, 0x5f, 0xcf, 0xd1, 0x14,
    0xc0, 0x5d, 0x8e, 0xae, 0x9e, 0x92, 0xe4, 0x57, 0x18, 0xf6, 0x4d, 0x9a, 0x1a, 0xe7, 0xd6,
    0xfc, 0x21, 0x82, 0xf3, 0x08, 0x56, 0x70, 0x07, 0x3e, 0x96, 0x42, 0xfe, 0x2c, 0x6a, 0xbd,
    0x47, 0x98, 0x2f, 0x3e, 0x27, 0x9e, 0x3d, 0x3d, 0xf2, 0x37, 0xff, 0xe9, 0xb9, 0xfe, 0xdb,
    0xf9, 0x79, 0xf5, 0x6b, 0xbd, 0x04, 0xbe, 0x0f, 0xf7, 0xfe, 0x15, 0xe4, 0x11, 0xf0, 0x92,
    0xdd, 0x07, 0x58, 0xef, 0x39, 0x7e, 0xd8, 0xae, 0xa2, 0x5d, 0x03, 0xe5, 0xdc, 0xfb, 0xa2,
    0x78, 0x11, 0xee, 0xdd, 0xb4, 0x49, 0xf4, 0x12, 0x4d, 0x86, 0xab, 0x19, 0xf0, 0x76, 0x96,
    0x77, 0xab, 0xb0, 0xbb, 0x4e, 0x7a, 0x0f, 0x5e, 0x12, 0x3f, 0xf8, 0xc9, 0x72, 0x3f, 0x58,
    0xd5, 0x04, 0xdf, 0xab, 0x82, 0x0c, 0x3b, 0x44, 0xb0, 0xdf, 0x51, 0x88, 0x67, 0xff, 0xb6,
    0xbb, 0xeb, 0x35, 0xec, 0x8d, 0x33, 0x87, 0xf9, 0x02, 0xcf, 0x78, 0x8f, 0x27, 0xc1, 0x6a,
    0x0d, 0x81, 0xfe, 0x12, 0xd8, 0xb7, 0xc6, 0xae, 0xf7, 0xe0, 0xbf, 0x45, 0xa3, 0x26, 0xd2,
    0x32, 0xab, 0xf9, 0x40, 0x17, 0xfc, 0x6d, 0x98, 0xc7, 0x07, 0xfe, 0x3c, 0x87, 0xf9, 0xc5,
    0xe6, 0x09, 0xc6, 0x81, 0xef, 0xc4, 0x87, 0x65, 0x35, 0xa0, 0x7d, 0x78, 0xdc, 0x34, 0xe0,
    0x87, 0x77, 0x42, 0xa6, 0xbc, 0x82, 0x7c, 0xbf, 0xc0, 0x7c, 0x9b, 0x8b, 0xee, 0x57, 0x20,
    0x2e, 0xce, 0x0e, 0x68, 0xaf, 0x0b, 0x77, 0xbe, 0xfa, 0x05, 0xf7, 0xbc, 0x4e, 0x77, 0x00,
    0x1b, 0x68, 0xa7, 0x0a, 0x32, 0x21, 0x11, 0x7f, 0x9b, 0xc0, 0xbc, 0x2b, 0x11, 0xde, 0xa9,
    0xca, 0x6a, 0x2f, 0x79, 0xae, 0xe4, 0xe8, 0x68, 0x1f, 0x4d, 0x61, 0x0f, 0x76, 0x8d, 0x13,
    0xa9, 0xf5, 0x22, 0x69, 0x9e, 0x17, 0x35, 0xf8, 0xce, 0xde, 0xaf, 0x03, 0xed, 0xa4, 0xb4,
    0xfc, 0x26, 0x7e, 0x08, 0xcf, 0x8b, 0x0d, 0xae, 0x39, 0xb9, 0x3c, 0xed, 0xb4, 0xf1, 0xf3,
    0xa9, 0x68, 0xb4, 0x70, 0xec, 0x07, 0xd6, 0x1d, 0x9e, 0x37, 0xcd, 0xcd, 0xa2, 0xda, 0x78,
    0x26, 0xee, 0xc7, 0xa3, 0x46, 0x97, 0xf3, 0xc9, 0x6c, 0xf5, 0xc8, 0xbc, 0xfd, 0x14, 0x6d,
    0xff, 0x71, 0x1d, 0xeb, 0x5f, 0x63, 0x94, 0xd7, 0x72, 0xdd, 0x77, 0x7b, 0xfd, 0x9d, 0x5e,
    0xaf, 0xc0, 0x0f, 0x96, 0x2b, 0x7f, 0xda, 0x3f, 0x23, 0xfd, 0xf4, 0xab, 0x44, 0xc7, 0xeb,
    0xbf, 0xe0, 0x3d, 0x31, 0x67, 0x78, 0xa7, 0x21, 0xdf, 0x87, 0xb3, 0x38, 0x2c, 0xcf, 0x75,
    0x4f, 0x28, 0xce, 0xf4, 0xd7, 0x48, 0x7c, 0x3b, 0xbb, 0x46, 0xdc, 0xff, 0x07, 0x71, 0x57,
    0x79, 0x1a, 0x46, 0xfa, 0x05, 0x7a, 0xdc, 0xa7, 0xe3, 0xdc, 0xef, 0xa3, 0x5d, 0x72, 0x5e,
    0x4f, 0x10, 0xf4, 0xb2, 0x2f, 0x3a, 0x0b, 0xf9, 0x6e, 0x90, 0xd2, 0xf0, 0x9b, 0xbe, 0x4e,
    0x2b, 0x1e, 0x88, 0xfe, 0x3f, 0x32, 0xdf, 0xe2, 0xe7, 0x1e, 0x2a, 0x8a, 0x26, 0x14, 0xbf,
    0xfa, 0x54, 0x73, 0xb6, 0x9e, 0xc5, 0x85, 0x79, 0xf2, 0xf2, 0x20, 0xf9, 0x31, 0xbc, 0x7f,
    0x36, 0xf7, 0x6f, 0x24, 0x33, 0x27, 0x48, 0xd7, 0xfc, 0x6c, 0xaf, 0xd5, 0x69, 0xe0, 0x9a,
    0xb7, 0x41, 0xbe, 0x69, 0x7c, 0x91, 0xf6, 0x12, 0xc6, 0x5f, 0xae, 0x80, 0x96, 0x6b, 0xc0,
    0xcf, 0xa0, 0x37, 0x9d, 0x1f, 0x5b, 0x31, 0xf1, 0xc4, 0xd9, 0x48, 0x7d, 0x27, 0x73, 0x0e,
    0xf9, 0x33, 0xd3, 0xd8, 0x5e, 0xce, 0x55, 0x7c, 0x13, 0xf8, 0x7e, 0x6c, 0x5d, 0xe3, 0x3d,
    0x0a, 0xc8, 0xef, 0x41, 0x9f, 0xe8, 0x5b, 0xee, 0x82, 0xd0, 0xb1, 0x92, 0x74, 0x9c, 0x41,
    0x98, 0xdb, 0x9f, 0x88, 0xee, 0xaf, 0x7c, 0xf6, 0xda, 0x7b, 0x60, 0x8e, 0xfd, 0xcc, 0x32,
    0xad, 0x65, 0xf9, 0x80, 0x3a, 0x3a, 0xca, 0x18, 0xe0, 0x29, 0x2d, 0x35, 0xc7, 0x21, 0xec,
    0xf0, 0xc7, 0xbe, 0xf3, 0x32, 0x5a, 0x0b, 0xfa, 0x7a, 0x5b, 0x2d, 0x84, 0x4e, 0x7e, 0xfd,
    0x90, 0x3a, 0xbb, 0x7e, 0x5e, 0x38, 0x47, 0xff, 0x0d, 0xc6, 0xaf, 0xc1, 0x5a, 0x12, 0xb8,
    0xee, 0x12, 0xf4, 0xe1, 0xe5, 0x66, 0xb5, 0x5f, 0xec, 0x1a, 0xb0, 0xbe, 0x8e, 0xfa, 0x0e,
    0x24, 0xfc, 0x9d, 0xbf, 0x43, 0xb9, 0x3e, 0xa6, 0x29, 0xf9, 0xcc, 0x55, 0xf7, 0xa0, 0x8b,
    0x34, 0xb4, 0xec, 0x3b, 0xfd, 0x5e, 0xe3, 0x41, 0x34, 0x9f, 0x0e, 0xfe, 0x0d, 0xf6, 0xf4,
    0xdc, 0x1e, 0x75, 0x63, 0xdc, 0xa3, 0x2d, 0xfe, 0xdd, 0xa0, 0x7d, 0xd8, 0x1b, 0x1f, 0x79,
    0xc9, 0x1d, 0x60, 0xde, 0x7c, 0xd5, 0x19, 0xe4, 0xc6, 0x17, 0x34, 0x05, 0x72, 0x12, 0xe7,
    0xe8, 0x7b, 0x89, 0x74, 0x05, 0xb4, 0xef, 0x7f, 0x2e, 0x2f, 0x6f, 0xa7, 0xa7, 0x9a, 0xe7,
    0x26, 0xde, 0xef, 0x45, 0x2d, 0x4a, 0x96, 0xbb, 0xe8, 0x1d, 0xe8, 0xfb, 0x03, 0x64, 0xd5,
    0xa9, 0xda, 0x39, 0x79, 0xaf, 0xc3, 0xcb, 0x73, 0xbb, 0x57, 0x7b, 0xba, 0x2c, 0x2f, 0xde,
    0x5b, 0xf1, 0x24, 0xbd, 0x74, 0x93, 0x5d, 0xaf, 0xb5, 0xfe, 0x35, 0xdb, 0x1d, 0x40, 0x0e,
    0x3f, 0x50, 0x2e, 0xc5, 0xdd, 0x06, 0xc9, 0x82, 0xa7, 0xbd, 0x7f, 0x0a, 0xc4, 0xfd, 0x79,
    0xa1, 0xae, 0xf7, 0x29, 0xe7, 0x72, 0x90, 0xf7, 0x6b, 0x52, 0x6d, 0x6c, 0xe6, 0x3b, 0xb4,
    0x78, 0xdf, 0xa6, 0xa3, 0x6b, 0xce, 0x7a, 0xbd, 0x92, 0x67, 0x4d, 0xfb, 0x02, 0xfb, 0xd7,
    0x38, 0x0a, 0xda, 0x21, 0xbd, 0x73, 0xbd, 0xd8, 0x27, 0x8d, 0x1e, 0xd1, 0x55, 0xd0, 0x80,
    0xd1, 0x7c, 0x16, 0xd5, 0x99, 0xb8, 0x5f, 0x61, 0x63, 0xd6, 0x32, 0x69, 0x23, 0xc3, 0x23,
    0x0f, 0xaf, 0xa3, 0x8d, 0xc3, 0x05, 0xf4, 0x67, 0xfd, 0x9e, 0xfe, 0x07, 0x3a, 0x3d, 0xe8,
    0x9b, 0x0a, 0xcb, 0xf0, 0x4a, 0x96, 0xd6, 0xe8, 0x3b, 0x13, 0x75, 0x97, 0xaa, 0xfd, 0x7f,
    0xd0, 0x1f, 0xf0, 0xae, 0xbf, 0xd4, 0x1c, 0x45, 0x6b, 0xa8, 0xef, 0xa8, 0xf1, 0x26, 0x3e,
    0x5d, 0xb2, 0x9f, 0x8f, 0x28, 0x73, 0xc1, 0x16, 0xc0, 0xdf, 0x27, 0x25, 0x36, 0xcb, 0x06,
    0x87, 0xb0, 0x87, 0x3c, 0x1b, 0xed, 0x82, 0xde, 0xde, 0xf8, 0xc8, 0xd2, 0xae, 0x9a, 0x4b,
    0x53, 0x95, 0xae, 0x24, 0xf6, 0x93, 0xde, 0xb3, 0xf3, 0xef, 0x3f, 0xbf, 0x67, 0x86, 0x3c,
    0x7d, 0xb3, 0xf3, 0x23, 0x31, 0xef, 0xeb, 0xf9, 0x91, 0xa4, 0xd5, 0x5b, 0xf8, 0x91, 0xfb,
    0xfa, 0x92, 0x7a, 0xef, 0x59, 0xf1, 0x59, 0xb5, 0x7e, 0xc5, 0x93, 0x40, 0x47, 0x3b, 0x2d,
    0xab, 0x64, 0xc1, 0x71, 0x36, 0x6d, 0x5a, 0xf8, 0x51, 0x65, 0xbd, 0x74, 0x95, 0xac, 0xfb,
    0xe7, 0x1e, 0x7f, 0x47, 0x53, 0xd0, 0x8f, 0x95, 0x4c, 0x74, 0x7e, 0x98, 0xbe, 0x90, 0x66,
    0x4b, 0x3f, 0x99, 0xf3, 0xc6, 0xef, 0x68, 0x7b, 0xb7, 0x3a, 0x5c, 0x3d, 0x6e, 0x31, 0x2d,
    0x98, 0x57, 0xe9, 0x55, 0x8b, 0x89, 0xfb, 0x69, 0xe5, 0x63, 0x0f, 0xef, 0xab, 0x49, 0xf5,
    0xbc, 0xc0, 0x19, 0x4a, 0xf9, 0x3c, 0x85, 0x9f, 0xc7, 0xdd, 0x64, 0xa3, 0xfc, 0x3e, 0x0f,
    0xd5, 0x32, 0x5e, 0xd2, 0xc1, 0x8d, 0x32, 0x1e, 0xd6, 0x71, 0x5f, 0xa6, 0x67, 0xa5, 0xeb,
    0xd9, 0xf0, 0x60, 0xe7, 0xdd, 0x78, 0x5f, 0x67, 0xa0, 0xc7, 0xcd, 0xa6, 0x89, 0xe5, 0x3c,
    0xf8, 0xa6, 0x5b, 0x0f, 0xd5, 0xba, 0xe5, 0x7e, 0x1f, 0x63, 0x3c, 0xb7, 0x49, 0xa5, 0xf0,
    0xd6, 0x40, 0x83, 0xeb, 0x97, 0xd0, 0x90, 0xf1, 0xe6, 0xfb, 0xc5, 0xe7, 0x23, 0xde, 0xbd,
    0xd6, 0xe4, 0xbf, 0x93, 0xd3, 0xb5, 0xe2, 0xc5, 0x74, 0xa4, 0xed, 0x2b, 0xc9, 0x8b, 0xd5,
    0x48, 0x6b, 0xde, 0x7e, 0x80, 0xfd, 0xda, 0xa4, 0x31, 0xe4, 0xbd, 0x1c, 0x6d, 0x6f, 0xbc,
    0xbc, 0x47, 0x59, 0x59, 0x9f, 0x39, 0x0b, 0x63, 0x4d, 0xdf, 0xe9, 0x59, 0x8b, 0xaa, 0xe0,
    0x60, 0x3b, 0x3d, 0xc2, 0x37, 0x5e, 0x46, 0x49, 0x4e, 0x97, 0x02, 0x9b, 0xa4, 0xae, 0xd1,
    0x0f, 0x9c, 0xcb, 0x8b, 0xa0, 0x85, 0xf4, 0x2c, 0xe0, 0x77, 0x01, 0xcf, 0x2f, 0xf7, 0x6c,
    0x9f, 0xa1, 0x41, 0xfb, 0x28, 0xbb, 0x3c, 0xe3, 0xde, 0x01, 0x6d, 0xbf, 0x9c, 0x9b, 0x0b,
    0x79, 0xeb, 0xda, 0xbe, 0xc6, 0xf0, 0x33, 0x3c, 0x8b, 0x7e, 0x3b, 0xa4, 0xaf, 0x63, 0x43,
    0xdb, 0x24, 0x97, 0xea, 0x27, 0xc9, 0x17, 0xa3, 0x16, 0xd0, 0xfe, 0xa4, 0xfe, 0x1b, 0xf6,
    0xb6, 0xd8, 0xe4, 0xd7, 0xa2, 0xfe, 0xa6, 0xe9, 0x84, 0x30, 0x76, 0x65, 0xb1, 0x3b, 0x02,
    0xc7, 0x1f, 0xcf, 0x95, 0x82, 0xe7, 0xb7, 0x96, 0xb5, 0x3d, 0x84, 0x1f, 0x73, 0xb4, 0x47,
    0x75, 0x38, 0x77, 0x98, 0x97, 0x7b, 0x8c, 0x8b, 0xdf, 0x47, 0x7e, 0x65, 0x7c, 0xd3, 0xce,
    0xd4, 0x98, 0x77, 0xf6, 0xb5, 0xe2, 0xdf, 0x27, 0x60, 0x53, 0xe7, 0xed, 0x0d, 0x58, 0x43,
    0xca, 0xac, 0x4b, 0xea, 0xe6, 0xab, 0xbf, 0x95, 0xbe, 0xda, 0xc3, 0x9f, 0x07, 0xf3, 0x49,
    0x59, 0xfb, 0xb7, 0x17, 0x4f, 0xbe, 0x1c, 0x90, 0x8f, 0xef, 0x2f, 0xec, 0xb3, 0xd9, 0x2d,
    0x3f, 0xf7, 0x96, 0xb5, 0xa0, 0xcf, 0xb8, 0x99, 0xbd, 0x07, 0xf0, 0x1d, 0xfe, 0xdd, 0x58,
    0xa8, 0xcd, 0x9f, 0x4a, 0xf7, 0x7e, 0xbd, 0x43, 0x9d, 0x62, 0x31, 0xcd, 0xd2, 0x8b, 0x58,
    0xd8, 0xe4, 0x7b, 0x57, 0xf2, 0xbb, 0x4f, 0xa5, 0xf7, 0xe2, 0xcf, 0xf2, 0x39, 0xe0, 0x83,
    0xad, 0xbf, 0xfe, 0x1e, 0x1f, 0x0d, 0x79, 0x8b, 0xcf, 0xe6, 0x79, 0x47, 0xe3, 0x33, 0xee,
    0x7e, 0xc1, 0xdd, 0x20, 0x3f, 0x8a, 0xb8, 0x2f, 0xbf, 0x2e, 0x6f, 0x2b, 0xa9, 0xc7, 0xd1,
    0xd5, 0xbc, 0xfb, 0x07, 0xb8, 0x47, 0xa8, 0xb7, 0xd2, 0x78, 0x8a, 0x4f, 0xe5, 0xfc, 0x31,
    0x7f, 0xb9, 0xdf, 0xd5, 0x73, 0xbe, 0xb4, 0x22, 0x7b, 0x91, 0xfc, 0x69, 0xe1, 0xb5, 0xf6,
    0xf9, 0xc5, 0xae, 0x92, 0x2f, 0xb9, 0x71, 0x53, 0xde, 0x95, 0xfa, 0x23, 0xd8, 0x4f, 0xa5,
    0x92, 0xfc, 0x77, 0x72, 0xfc, 0x1d, 0xe7, 0xe5, 0xd5, 0xe6, 0x53, 0xff, 0x75, 0x8e, 0x77,
    0xea, 0xbc, 0x3a, 0x5f, 0xeb, 0x7a, 0xeb, 0x65, 0x35, 0xc8, 0xfb, 0x92, 0xb6, 0x95, 0x68,
    0x84, 0xcf, 0x61, 0x50, 0xf9, 0x3b, 0xdc, 0xba, 0x83, 0x30, 0x08, 0x7e, 0x68, 0xf6, 0xff,
    0xf9, 0x53, 0xf3, 0x7b, 0x19, 0x8d, 0x2b, 0xe1, 0xe8, 0x5f, 0xbc, 0x97, 0x3f, 0x83, 0x24,
    0x7f, 0x9a, 0x6c, 0xd0, 0x7d, 0x10, 0xdb, 0x68, 0x12, 0xad, 0xf1, 0x6e, 0x64, 0x9e, 0xb5,
    0x26, 0x66, 0x1d, 0xd0, 0x2b, 0x61, 0xfd, 0xf3, 0x89, 0xd8, 0xef, 0x02, 0x5d, 0x3d, 0xab,
    0x5b, 0x65, 0x0e, 0xcb, 0x36, 0xa2, 0xb5, 0xf4, 0x7e, 0x24, 0xe2, 0x0c, 0x48, 0x37, 0x51,
    0xf9, 0x2a, 0xfa, 0x18, 0xd5, 0x79, 0x1e, 0x41, 0x63, 0xf7, 0x28, 0xbf, 0x6f, 0xf1, 0x2b,
    0xbc, 0x83, 0x4a, 0x02, 0xb2, 0xe4, 0x14, 0xb5, 0x52, 0xfd, 0xd1, 0xb8, 0x13, 0x23, 0x2b,
    0xda, 0xed, 0x06, 0x93, 0xd7, 0xff, 0x8a, 0xa7, 0x43, 0xd2, 0xa3, 0x51, 0xa6, 0x68, 0x74,
    0xfd, 0xf2, 0x67, 0xa4, 0x55, 0xb8, 0xc3, 0xb4, 0xaf, 0xfa, 0x9d, 0x7f, 0x6c, 0x0f, 0xcf,
    0xfe, 0xa1, 0x6c, 0xb0, 0xa8, 0x1b, 0xee, 0x50, 0xcf, 0xd7, 0x75, 0x27, 0xb4, 0x27, 0x9f,
    0xf7, 0xfb, 0xb8, 0xeb, 0xee, 0xfb, 0xe7, 0x4f, 0x53, 0xcf, 0x91, 0xf7, 0xd6, 0xfd, 0xdc,
    0x4c, 0x1a, 0x95, 0x7e, 0xad, 0x0f, 0xba, 0x47, 0xe2, 0x4c, 0x5b, 0xbd, 0x77, 0x75, 0x26,
    0xad, 0xc5, 0x36, 0x85, 0x75, 0xb6, 0x4b, 0xd7, 0xd6, 0x5f, 0x6c, 0xd6, 0xa0, 0xd7, 0xdf,
    0xcc, 0xcb, 0xe9, 0x01, 0xf4, 0xb7, 0x0f, 0x9c, 0x13, 0xeb, 0x62, 0xcd, 0x65, 0x6f, 0x9f,
    0xe2, 0x51, 0x7c, 0x06, 0xda, 0x38, 0xc4, 0x30, 0x9f, 0x6b, 0xfc, 0x5f, 0xe9, 0xdf, 0x71,
    0xe6, 0x33, 0xea, 0x67, 0x31, 0xfb, 0x39, 0xd7, 0x0b, 0xb0, 0xdf, 0x52, 0xfb, 0xc4, 0x7f,
    0xc1, 0x5e, 0x8e, 0x46, 0xcd, 0xfd, 0x6c, 0x1a, 0xc1, 0xdf, 0xf1, 0x5b, 0x9f, 0xab, 0xa8,
    0x70, 0x9e, 0x37, 0xf7, 0xdb, 0x17, 0xe7, 0x30, 0x1e, 0x3b, 0x77, 0xca, 0xdf, 0xc4, 0xb1,
    0xe4, 0x63, 0xd9, 0x42, 0xfa, 0xfc, 0x4a, 0xef, 0xae, 0x9d, 0x56, 0x05, 0xbd, 0xfe, 0x3c,
    0xd8, 0xce, 0x48, 0xea, 0x55, 0x60, 0x53, 0xa5, 0x73, 0xe8, 0x7e, 0x1d, 0x62, 0x38, 0x93,
    0xe4, 0x53, 0xc4, 0xf1, 0x9a, 0x8f, 0x30, 0x97, 0x75, 0x20, 0x6c, 0xb1, 0xde, 0x43, 0xfc,
    0x9f, 0x78, 0x6f, 0xc0, 0x1f, 0x80, 0x0f, 0x47, 0xa7, 0xe5, 0xae, 0x72, 0xe9, 0x51, 0x2c,
    0xa3, 0xfc, 0xc0, 0x8f, 0x70, 0xbe, 0x11, 0xda, 0x13, 0xdd, 0xa4, 0x1a, 0x4d, 0xbe, 0x80,
    0xfc, 0x73, 0x34, 0x41, 0x5f, 0x39, 0xc8, 0x05, 0xfe, 0x36, 0xf9, 0x6d, 0xe5, 0xf3, 0x14,
    0x84, 0x39, 0xa0, 0xbd, 0x04, 0xfa, 0xc4, 0x0e, 0x6c, 0xfc, 0xe4, 0x11, 0x7d, 0xc1, 0xc0,
    0xe2, 0xaa, 0xfb, 0x21, 0xfd, 0xbc, 0xc0, 0xf7, 0x41, 0xde, 0xc1, 0xbe, 0xc0, 0xb7, 0x23,
    0xfb, 0x76, 0x41, 0x37, 0x05, 0xdb, 0x8b, 0xed, 0x31, 0x8c, 0x1f, 0x36, 0x6b, 0x20, 0xef,
    0x85, 0xef, 0x17, 0xe8, 0xd2, 0xab, 0x2c, 0x30, 0x66, 0x0a, 0xb2, 0x54, 0xae, 0x4f, 0x7c,
    0x00, 0xb4, 0xbf, 0x06, 0x79, 0xb7, 0xa6, 0x39, 0x8e, 0xa4, 0x9f, 0x57, 0xee, 0x4f, 0xdd,
    0x03, 0x7e, 0x0c, 0x1c, 0x61, 0x27, 0x75, 0xe4, 0x1e, 0x7d, 0x05, 0x0b, 0x47, 0x8d, 0x91,
    0x93, 0x04, 0x6f, 0xaa, 0x0f, 0x80, 0xcf, 0x26, 0x30, 0xaf, 0x77, 0x8e, 0x05, 0xc0, 0x19,
    0xb9, 0xc0, 0x5d, 0xc1, 0xf5, 0xae, 0x81, 0xe7, 0x9d, 0xc6, 0x62, 0x6d, 0x43, 0xb1, 0x27,
    0xbb, 0xaa, 0xd3, 0x19, 0xc6, 0x45, 0x3f, 0x87, 0xc8, 0xab, 0x9c, 0x75, 0x02, 0xb2, 0xe0,
    0xb1, 0x18, 0xa5, 0x93, 0x92, 0xcc, 0x68, 0x01, 0xcd, 0x7c, 0x0d, 0xda, 0xda, 0x1d, 0xd1,
    0x79, 0x36, 0x26, 0x24, 0xcf, 0x62, 0x94, 0x78, 0xe2, 0x9e, 0xfa, 0x6a, 0xde, 0x61, 0xb7,
    0x0c, 0xfa, 0x3e, 0xc8, 0xd2, 0xb0, 0x2d, 0xf6, 0x22, 0xbb, 0x56, 0x9e, 0x8f, 0x88, 0x1d,
    0x5c, 0xd6, 0xd0, 0x1b, 0x78, 0x3e, 0xca, 0xef, 0x27, 0x62, 0x46, 0x4f, 0xe7, 0xb7, 0x7f,
    0xe7, 0xde, 0x9c, 0x60, 0xfc, 0x11, 0x63, 0xbc, 0xc2, 0xaf, 0x7f, 0x12, 0xbc, 0x02, 0xef,
    0x0e, 0xfe, 0x96, 0x2c, 0x30, 0x66, 0x7f, 0x06, 0x39, 0x01, 0x74, 0x82, 0x67, 0xbe, 0xc4,
    0x54, 0xc3, 0x6d, 0x0f, 0xe9, 0xbf, 0x9a, 0x6c, 0xe9, 0x0c, 0xab, 0x5f, 0xef, 0xb8, 0xaf,
    0x6b, 0xd1, 0x59, 0xde, 0x53, 0x2c, 0x33, 0x1f, 0x9b, 0x12, 0xe7, 0xe8, 0xf6, 0x93, 0x68,
    0xf5, 0x17, 0x5b, 0xa0, 0xe5, 0xee, 0x17, 0xae, 0x19, 0x75, 0xa5, 0x8b, 0xe4, 0x71, 0x72,
    0xb0, 0x77, 0xff, 0xf4, 0x5c, 0x71, 0x0e, 0x18, 0x93, 0xe0, 0xbb, 0x8b, 0x71, 0x1c, 0xb4,
    0xd1, 0x6f, 0x24, 0xfd, 0x36, 0x17, 0xf9, 0xfc, 0x53, 0x2e, 0xd6, 0x15, 0x1e, 0x7d, 0xbc,
    0x42, 0xdf, 0x96, 0xb2, 0x7c, 0x09, 0xba, 0x0b, 0xeb, 0x25, 0x61, 0xc6, 0x0e, 0xf9, 0x42,
    0x72, 0xc1, 0x78, 0x17, 0xd8, 0x80, 0x9f, 0x4a, 0x6e, 0x77, 0xe1, 0xce, 0x81, 0xad, 0xc8,
    0x1a, 0xf6, 0x65, 0x73, 0xbc, 0x43, 0x8c, 0x97, 0xb1, 0x11, 0xf1, 0xbb, 0xbd, 0xd6, 0x3b,
    0xff, 0x56, 0xdd, 0xe0, 0xf7, 0xba, 0x4d, 0x98, 0xf2, 0x4c, 0x4f, 0xe9, 0x4f, 0x9a, 0x1f,
    0x9f, 0x47, 0x21, 0x4b, 0xe1, 0xac, 0x04, 0xdf, 0xc0, 0x7d, 0xa2, 0x7b, 0x46, 0x73, 0x44,
    0x15, 0x8c, 0xfd, 0x9e, 0xce, 0x43, 0xde, 0x31, 0xd4, 0xa1, 0xe5, 0xbb, 0x8d, 0xac, 0x8d,
    0x31, 0x16, 0x60, 0x4f, 0x48, 0x3d, 0x24, 0xbc, 0x14, 0xea, 0xd9, 0xc2, 0x77, 0x90, 0xb1,
    0xdf, 0xd9, 0x67, 0x0f, 0xeb, 0x94, 0xf4, 0xc5, 0xbf, 0xdf, 0x01, 0xef, 0x05, 0x5e, 0x24,
    0xb5, 0x5d, 0xd0, 0x4f, 0xf9, 0xbc, 0x94, 0x1c, 0x42, 0x7b, 0x65, 0x79, 0x16, 0xf2, 0x72,
    0x38, 0x64, 0x78, 0x39, 0xad, 0xeb, 0xf1, 0xe2, 0xa8, 0xb3, 0x25, 0x1d, 0x37, 0x74, 0x3e,
    0xdb, 0xcc, 0xf0, 0xdd, 0xaa, 0xbb, 0x8a, 0xef, 0xa6, 0xf2, 0xba, 0x28, 0x46, 0xea, 0xf6,
    0x8b, 0x3d, 0xd0, 0xdc, 0x24, 0x24, 0x5d, 0x6e, 0x58, 0x5d, 0x27, 0xb3, 0xea, 0x91, 0xf8,
    0x38, 0x43, 0x19, 0x6b, 0x5b, 0x61, 0xcc, 0x2b, 0x04, 0x1d, 0x09, 0x63, 0x57, 0xc0, 0xe7,
    0xea, 0xbe, 0x80, 0x9c, 0x05, 0x39, 0x70, 0x98, 0x55, 0x5d, 0xa2, 0x7b, 0xa2, 0x85, 0xae,
    0x73, 0xe0, 0x7a, 0x8f, 0x70, 0x5e, 0x6f, 0x8b, 0xea, 0x10, 0xed, 0xf8, 0x3d, 0xe8, 0x16,
    0x9f, 0xf8, 0x97, 0xa7, 0xa4, 0xe0, 0x4c, 0xba, 0x42, 0x8f, 0x70, 0x63, 0xe0, 0x71, 0xeb,
    0x73, 0xd2, 0x71, 0xcf, 0x11, 0xec, 0x31, 0xe8, 0x1a, 0x0e, 0xec, 0xd9, 0x7a, 0xb9, 0x5b,
    0x69, 0xfa, 0xcc, 0x3b, 0xda, 0xb9, 0xd1, 0xa5, 0x97, 0x9e, 0x17, 0xc8, 0x70, 0xfc, 0xde,
    0xf2, 0xd3, 0xe2, 0xd7, 0x6d, 0x8e, 0x39, 0x76, 0xea, 0xb5, 0x49, 0x87, 0x40, 0xcc, 0xc2,
    0xc4, 0xf9, 0xe1, 0xe7, 0x47, 0x1a, 0xab, 0x23, 0xc7, 0x14, 0xff, 0x1f, 0x1c, 0x0a, 0x6d,
    0x73, 0xce, 0x1d, 0xa9, 0xff, 0x45, 0x13, 0xbf, 0xb9, 0xdc, 0xc5, 0xb0, 0x17, 0xa0, 0x53,
    0x0c, 0x94, 0x1c, 0xa6, 0x79, 0x21, 0xaf, 0xd2, 0x78, 0x23, 0xfd, 0xee, 0xf5, 0xa7, 0x36,
    0xc9, 0x4f, 0x9b, 0xb8, 0x56, 0xa4, 0x49, 0xf2, 0xff, 0x22, 0x8d, 0xb1, 0xbf, 0x85, 0xd6,
    0xf6, 0x28, 0x62, 0xf3, 0x3a, 0xed, 0x04, 0x22, 0xae, 0x3d, 0xa4, 0x3b, 0x0a, 0x7b, 0x36,
    0x7d, 0xcc, 0xe4, 0xcf, 0x23, 0xde, 0xbb, 0x27, 0x1e, 0xf7, 0x2c, 0xfe, 0x7f, 0x79, 0x2c,
    0xc1, 0xc4, 0xf9, 0xf9, 0x53, 0xe0, 0xc7, 0x6f, 0xe3, 0x5a, 0x93, 0xce, 0x19, 0x68, 0xb6,
    0xfa, 0x4b, 0xba, 0xbe, 0x16, 0x8d, 0xfb, 0x3f, 0xc2, 0xe6, 0xbe, 0x6d, 0xaf, 0xcf, 0xdb,
    0x69, 0xb5, 0x93, 0xda, 0x5e, 0x43, 0x23, 0x3e, 0xdc, 0xd7, 0xe6, 0x90, 0x93, 0x0b, 0xfc,
    0x87, 0x7e, 0x05, 0x78, 0x2b, 0xfa, 0xc5, 0xe5, 0x9c, 0x52, 0xbe, 0xb8, 0x0b, 0xd7, 0x51,
    0xf1, 0x4d, 0x5b, 0x3e, 0x03, 0x2d, 0x0e, 0xf3, 0xe4, 0xca, 0x7b, 0xa5, 0xc9, 0xd4, 0x89,
    0x85, 0x31, 0xc1, 0xe6, 0xe5, 0xfd, 0xd3, 0xec, 0x65, 0x75, 0x96, 0x29, 0x7f, 0x21, 0x0c,
    0xcc, 0x19, 0x74, 0x10, 0xa6, 0xa1, 0xff, 0x91, 0xe7, 0x28, 0xc6, 0xc6, 0x7d, 0x4a, 0x75,
    0xbc, 0xcc, 0xd7, 0x69, 0xa9, 0x6d, 0xac, 0x65, 0x9b, 0xde, 0x07, 0xb9, 0xd7, 0x29, 0x3d,
    0xcf, 0x21, 0xbc, 0x17, 0x8c, 0xf7, 0xf8, 0xfd, 0x3a, 0xf4, 0xbb, 0x84, 0xfc, 0xfe, 0xaa,
    0xa3, 0xdd, 0x2b, 0x75, 0xc1, 0x2b, 0x9e, 0xbf, 0x8a, 0x86, 0x6d, 0xba, 0x01, 0x9c, 0x39,
    0xb3, 0x3f, 0x51, 0x2f, 0x83, 0x77, 0x12, 0xf4, 0xff, 0xd1, 0x7e, 0xe0, 0x1e, 0x39, 0x40,
    0x4e, 0xfd, 0xa4, 0x74, 0xf9, 0x6e, 0x92, 0xc6, 0xc8, 0xbb, 0xb9, 0xfd, 0x6c, 0x91, 0x9d,
    0xd2, 0x66, 0x4a, 0x07, 0xf8, 0x7e, 0x0b, 0xf5, 0x87, 0xe5, 0x3e, 0x7b, 0xcf, 0xf3, 0xb4,
    0xe7, 0x30, 0xc4, 0xbf, 0xc1, 0xd9, 0xd4, 0xb7, 0xda, 0xd8, 0x65, 0xe7, 0xd9, 0x5c, 0xd6,
    0x8f, 0x59, 0x25, 0x3a, 0x80, 0x3d, 0x5d, 0x81, 0x3b, 0xe4, 0x89, 0xbb, 0x75, 0xc9, 0x9f,
    0x7b, 0x79, 0x99, 0xd4, 0xf1, 0x2c, 0x41, 0xbe, 0xc3, 0x73, 0x60, 0xbf, 0xd9, 0x7c, 0x92,
    0x6c, 0x91, 0x97, 0x76, 0xdd, 0xda, 0x6c, 0x92, 0x38, 0x2a, 0x86, 0x87, 0x71, 0xaa, 0x3d,
    0xe9, 0x6e, 0x88, 0xef, 0x7f, 0x0d, 0x5a, 0x70, 0x2f, 0x5b, 0xa6, 0xef, 0x90, 0x63, 0x67,
    0x8f, 0xb8, 0xd3, 0x40, 0x9e, 0x0e, 0x67, 0xe9, 0x27, 0xe3, 0x09, 0x9e, 0xc9, 0xfd, 0x6f,
    0x6e, 0x00, 0xbb, 0x20, 0x5e, 0xcf, 0xa7, 0x43, 0xe9, 0x2f, 0x3c, 0x21, 0xdf, 0x87, 0x3d,
    0x46, 0x60, 0xf7, 0x81, 0x7e, 0x76, 0x02, 0xdd, 0xf2, 0x20, 0x9f, 0x2f, 0xe1, 0x25, 0x6b,
    0x3f, 0xe2, 0x1e, 0xb4, 0xf7, 0x1f, 0xbb, 0x15, 0xd0, 0x93, 0x87, 0x3f, 0x52, 0xb9, 0x61,
    0x15, 0x87, 0x02, 0x8b, 0x97, 0x20, 0xb6, 0x69, 0x59, 0x6d, 0xbc, 0xc7, 0xbb, 0xe0, 0x6d,
    0xee, 0xa1, 0x4e, 0x70, 0xc4, 0x3b, 0x72, 0xeb, 0x77, 0xc5, 0xbc, 0xaf, 0xff, 0x56, 0xce,
    0x36, 0xe5, 0xe3, 0x68, 0x1f, 0xa2, 0x3d, 0x8a, 0x78, 0xc7, 0x77, 0x38, 0xeb, 0x65, 0x6f,
    0xef, 0x69, 0x18, 0x2c, 0xaa, 0x8d, 0x65, 0xaf, 0x50, 0xee, 0x65, 0xce, 0x7b, 0xdc, 0x2b,
    0xf9, 0x1b, 0x67, 0x1b, 0x02, 0x8f, 0x39, 0xaf, 0x72, 0xf2, 0xc9, 0xd4, 0x1f, 0x19, 0x2b,
    0x7c, 0x12, 0x6c, 0x99, 0xc6, 0x56, 0x7c, 0x47, 0xea, 0x50, 0x30, 0x57, 0xf1, 0xdd, 0xf0,
    0x93, 0xce, 0x45, 0xda, 0xf4, 0xa0, 0x4b, 0xed, 0x7c, 0xc4, 0xc3, 0x01, 0x3f, 0xf9, 0xaa,
    0xcc, 0xa8, 0xcd, 0x61, 0xce, 0x73, 0xfc, 0x3f, 0xe9, 0x5c, 0x30, 0xc6, 0xa4, 0xae, 0xf6,
    0xf8, 0x41, 0x75, 0x01, 0xba, 0x0a, 0xda, 0x64, 0xf1, 0x2e, 0x01, 0xfb, 0x3a, 0x04, 0xdd,
    0xe9, 0x01, 0x1f, 0x72, 0x2e, 0x84, 0xdd, 0xa1, 0x6f, 0xfb, 0xa7, 0x98, 0x6d, 0x28, 0x89,
    0x4c, 0xc0, 0xb6, 0x5e, 0x81, 0x5e, 0xed, 0xc4, 0x13, 0xd6, 0x2b, 0xd4, 0x37, 0x95, 0x2e,
    0xe3, 0x4d, 0x5c, 0xd0, 0xb3, 0xd1, 0x36, 0x73, 0x1d, 0xb1, 0x9e, 0x0d, 0xc6, 0x67, 0xd1,
    0xb2, 0xdc, 0x05, 0x22, 0x06, 0x1a, 0x9f, 0xd8, 0xcf, 0x87, 0x36, 0x22, 0xda, 0xed, 0x2e,
    0x5b, 0xc9, 0xbb, 0xb0, 0xd9, 0x40, 0xf7, 0xa9, 0x24, 0x51, 0x37, 0x41, 0x3e, 0x04, 0x72,
    0x5f, 0x41, 0xdd, 0x1f, 0xf9, 0xb5, 0xda, 0xb7, 0xae, 0xbb, 0x43, 0x5b, 0x8b, 0x7c, 0xe9,
    0x6f, 0xcf, 0x27, 0x15, 0xf8, 0xae, 0x7f, 0x40, 0x3e, 0xb6, 0xac, 0xe0, 0x5e, 0x79, 0x75,
    0x5d, 0x92, 0x62, 0x7d, 0x26, 0x73, 0xae, 0x81, 0x58, 0x2b, 0xfa, 0xd5, 0xaa, 0x15, 0xc4,
    0xd8, 0xcf, 0x99, 0xfd, 0xf9, 0x8a, 0x0e, 0x7f, 0xa5, 0xbe, 0xd1, 0xb7, 0xc7, 0x6e, 0xe3,
    0xec, 0xc7, 0xef, 0x05, 0xe8, 0xda, 0xbf, 0xc6, 0x77, 0xa6, 0xbe, 0x5d, 0x0d, 0x9d, 0x91,
    0xc7, 0xc7, 0x16, 0xf0, 0x8d, 0xb6, 0xf3, 0x7f, 0x0c, 0xdf, 0x5a, 0xea, 0xf7, 0x27, 0x5a,
    0xfb, 0x5e, 0x87, 0x7d, 0x0c, 0x3f, 0xb4, 0xb1, 0x75, 0x5d, 0xb4, 0xa1, 0xc7, 0x71, 0x4a,
    0x19, 0xf2, 0x7b, 0x67, 0x6c, 0xf2, 0x1d, 0x2b, 0xdf, 0x7a, 0x6e, 0x7f, 0x6f, 0x0b, 0x06,
    0xf3, 0x4a, 0xda, 0xdb, 0x64, 0xb9, 0x4d, 0x2e, 0x63, 0x41, 0xdf, 0xa5, 0x3e, 0xd0, 0x7d,
    0xcc, 0x21, 0xf0, 0x91, 0xfb, 0x12, 0xfd, 0x8e, 0xfc, 0x6a, 0xb4, 0x57, 0x70, 0x9f, 0xfb,
    0xca, 0x95, 0xbe, 0xd6, 0x5b, 0xbf, 0xc3, 0x31, 0x23, 0xfb, 0x77, 0x1e, 0x56, 0x05, 0xfc,
    0xf9, 0x81, 0xba, 0x67, 0x1d, 0xe5, 0x87, 0xbb, 0xbb, 0x82, 0x1f, 0xa6, 0xdf, 0x72, 0x98,
    0x6f, 0xe1, 0x87, 0x82, 0x86, 0xaa, 0xf3, 0x69, 0x1f, 0xef, 0xe9, 0xbb, 0xda, 0xfb, 0x76,
    0xf3, 0x71, 0x54, 0xec, 0x2f, 0xb4, 0xcc, 0xf5, 0x43, 0xd3, 0x3f, 0xbe, 0xf3, 0x53, 0x12,
    0x6e, 0x90, 0xc5, 0x45, 0x52, 0x9c, 0x03, 0xf5, 0xad, 0xe1, 0x31, 0xae, 0xf5, 0x0f, 0x84,
    0x4a, 0x7d, 0xa0, 0xf9, 0x39, 0x80, 0x0d, 0xad, 0xf9, 0xff, 0x08, 0x9f, 0x05, 0x7c, 0x02,
    0x4b, 0xd6, 0x02, 0xef, 0x57, 0x51, 0x98, 0x5b, 0x53, 0xd7, 0x3f, 0x01, 0xbf, 0xd8, 0xc9,
    0xd9, 0xb8, 0x1a, 0x05, 0x70, 0x6f, 0xac, 0xf1, 0x73, 0xa9, 0x1b, 0xe9, 0xf7, 0x5b, 0xec,
    0x63, 0xbe, 0x53, 0x1c, 0xff, 0xd4, 0x75, 0x49, 0xd4, 0x33, 0xa3, 0x69, 0x24, 0x70, 0x17,
    0xaf, 0x28, 0x01, 0xbe, 0x7b, 0xad, 0xdf, 0x7f, 0x6f, 0x3e, 0x6b, 0x8b, 0xb3, 0x92, 0x2e,
    0xaa, 0xb0, 0xbe, 0xfa, 0x90, 0x3e, 0x6b, 0x9b, 0x8b, 0xd2, 0x6b, 0xb5, 0x9f, 0xcd, 0x98,
    0xb4, 0x63, 0xc8, 0x27, 0xa3, 0xe9, 0x82, 0x95, 0xcf, 0x74, 0xdd, 0x15, 0x90, 0x2b, 0x09,
    0x77, 0xf7, 0xfd, 0x69, 0xca, 0xeb, 0x27, 0xdf, 0x4d, 0x16, 0xb7, 0x06, 0x3c, 0x11, 0x31,
    0x20, 0xbb, 0x47, 0x38, 0xce, 0x18, 0xc7, 0xb9, 0x7a, 0xdd, 0xd6, 0xf9, 0xd9, 0xe2, 0x9a,
    0xbc, 0x9a, 0x24, 0x47, 0x24, 0x36, 0x34, 0xda, 0x87, 0x1f, 0xd2, 0x37, 0x53, 0xc0, 0x1b,
    0xc7, 0xf9, 0x2d, 0x66, 0x0c, 0x73, 0x12, 0xe0, 0x1c, 0x80, 0xae, 0x35, 0x7c, 0x6a, 0x4e,
    0xcc, 0xf0, 0x83, 0xfc, 0xd8, 0xe5, 0x78, 0x3d, 0xc9, 0x7b, 0x24, 0x7d, 0xfe, 0xca, 0xbe,
    0x1c, 0xdf, 0xd5, 0xef, 0xa8, 0xa0, 0xb1, 0x6d, 0x03, 0x69, 0xf5, 0x9c, 0xbd, 0x2b, 0xb6,
    0x5a, 0x4c, 0x1a, 0x5b, 0xf4, 0x09, 0x8f, 0x69, 0x8d, 0x76, 0x8c, 0x5b, 0xc9, 0x9d, 0xc8,
    0xf3, 0x9a, 0x79, 0x6a, 0xb4, 0x91, 0x5b, 0x67, 0x79, 0x1c, 0x2c, 0xb7, 0xae, 0xef, 0x68,
    0xe3, 0x55, 0x6f, 0xa8, 0xd3, 0x2c, 0xab, 0xeb, 0xd4, 0x2e, 0x19, 0xdd, 0xbf, 0x2d, 0x26,
    0x6f, 0xc2, 0x1c, 0xd7, 0x42, 0xf4, 0xcb, 0x93, 0xdf, 0x07, 0xec, 0x82, 0xf5, 0x62, 0xda,
    0xbf, 0x30, 0xeb, 0x27, 0x87, 0x75, 0xbc, 0xeb, 0xec, 0x97, 0x15, 0x35, 0x36, 0xda, 0xa6,
    0x1f, 0x6a, 0x7e, 0x13, 0xa0, 0xa5, 0x4e, 0x87, 0xfc, 0xca, 0xd3, 0x56, 0x7f, 0x8d, 0x3a,
    0xe9, 0x6c, 0x1c, 0xcb, 0xbf, 0xa0, 0xfd, 0x2e, 0x74, 0x19, 0xf2, 0xd3, 0x93, 0x1f, 0x10,
    0xde, 0x62, 0x17, 0x3b, 0xa0, 0x8b, 0xc1, 0x1e, 0xde, 0xff, 0x9f, 0x5e, 0xbb, 0x73, 0x40,
    0x24, 0xcb, 0xef, 0x8b, 0x30, 0x8f, 0x74, 0xe7, 0x3b, 0x9d, 0x52, 0x5d, 0x73, 0x56, 0x2c,
    0x6a, 0xb0, 0xf7, 0x4e, 0x14, 0x74, 0x52, 0xec, 0x49, 0x89, 0x8c, 0x9a, 0xd9, 0xf9, 0x5c,
    0xad, 0x34, 0xc9, 0xca, 0x95, 0xa0, 0xfb, 0xb5, 0x7e, 0x99, 0xc4, 0x70, 0xbe, 0x21, 0x62,
    0x73, 0xb8, 0x00, 0x21, 0xd3, 0x2e, 0xe8, 0x9b, 0x02, 0x7a, 0x1b, 0x83, 0x0c, 0x61, 0x7b,
    0xbc, 0x7e, 0xc5, 0x77, 0xe2, 0xb6, 0x1d, 0x63, 0x99, 0x62, 0xef, 0x95, 0x4e, 0x86, 0xfe,
    0x77, 0xdd, 0xb6, 0x62, 0x7b, 0x55, 0xf8, 0x4e, 0xc1, 0xbe, 0x8e, 0xc1, 0xee, 0x06, 0x9d,
    0x31, 0x2e, 0x6f, 0x8f, 0xee, 0x4f, 0xd0, 0x1d, 0x93, 0xed, 0x4b, 0x8b, 0xf5, 0x31, 0x9b,
    0x34, 0x9c, 0x7a, 0xf5, 0xc5, 0x6e, 0xf0, 0x06, 0xb6, 0xc0, 0x1d, 0xc8, 0x46, 0xe5, 0x2b,
    0x7a, 0x57, 0x6b, 0xad, 0x74, 0xdf, 0xa5, 0xd0, 0xeb, 0x64, 0x4e, 0x47, 0x84, 0x18, 0xdf,
    0xb8, 0x8d, 0x31, 0x2e, 0xd1, 0x5a, 0xaf, 0x67, 0xd5, 0x01, 0x7c, 0x2f, 0x7c, 0x8f, 0xc5,
    0x80, 0x57, 0xbd, 0xf6, 0x5a, 0xef, 0xab, 0x08, 0x6c, 0xa0, 0xa7, 0xd6, 0x7d, 0xa9, 0xec,
    0xf1, 0x3c, 0xd0, 0x7f, 0x7d, 0x26, 0xd9, 0x7f, 0xc3, 0x3e, 0x49, 0x9f, 0x2f, 0xf9, 0x59,
    0x0d, 0xcf, 0x7b, 0xf2, 0x2b, 0xdd, 0xbb, 0x9f, 0xf2, 0xdd, 0x5f, 0xa8, 0xab, 0x8e, 0xb3,
    0x50, 0xf2, 0x2b, 0x1f, 0x98, 0x1e, 0xdf, 0x57, 0xf3, 0xd1, 0xfd, 0xcf, 0x9e, 0xd8, 0xcf,
    0xf3, 0xfd, 0xef, 0xc7, 0x6a, 0x06, 0xdf, 0x42, 0xb8, 0xfd, 0xfa, 0x67, 0x3c, 0xf5, 0xde,
    0x6d, 0xb6, 0x4f, 0x20, 0xf4, 0x96, 0xee, 0xf6, 0x50, 0x80, 0x25, 0xd6, 0xe2, 0x84, 0x18,
    0xa1, 0x58, 0xe1, 0x3a, 0xae, 0xba, 0x07, 0xf8, 0x5d, 0xaa, 0xd7, 0xec, 0xf0, 0x3b, 0x6b,
    0xa5, 0x6b, 0x18, 0x34, 0xc5, 0x33, 0xe4, 0xbb, 0xfa, 0x39, 0xdc, 0x61, 0x9e, 0x04, 0xd8,
    0x8d, 0x5f, 0x9b, 0xe6, 0x1d, 0xee, 0xff, 0x7c, 0xf4, 0xb9, 0xca, 0xdb, 0x88, 0xa6, 0x0f,
    0xb8, 0x62, 0x9f, 0x17, 0x5d, 0xc2, 0x69, 0x33, 0x2e, 0xa0, 0x7d, 0xaf, 0x7e, 0x4f, 0x79,
    0xad, 0x35, 0xf9, 0x9b, 0xe7, 0xe2, 0x6f, 0xbd, 0x2e, 0xd0, 0x00, 0xae, 0x91, 0xc6, 0x7b,
    0x3d, 0x9e, 0x8f, 0xc5, 0x7e, 0x64, 0x0b, 0x5d, 0x8a, 0xf9, 0x1c, 0x6c, 0x38, 0xad, 0x52,
    0xfc, 0x37, 0xb6, 0x75, 0x4a, 0xef, 0xf5, 0x6d, 0x34, 0x2d, 0xd2, 0x5d, 0xbf, 0xb3, 0xed,
    0xce, 0x43, 0xdb, 0x33, 0x79, 0x29, 0xd9, 0x57, 0xd3, 0x16, 0xbe, 0xe5, 0xbb, 0xf7, 0x5f,
    0xb2, 0xf1, 0x12, 0x8c, 0x09, 0xdf, 0x5d, 0xc1, 0x93, 0x44, 0xce, 0x65, 0x18, 0xc0, 0x7c,
    0xfd, 0x18, 0x07, 0x3e, 0x2e, 0x91, 0x07, 0xb3, 0x8f, 0x77, 0x35, 0x0a, 0x22, 0x90, 0x6f,
    0x9f, 0xc0, 0x4e, 0x0e, 0x44, 0x5e, 0x8e, 0x5f, 0x85, 0x7f, 0x4f, 0xfb, 0x6b, 0xf4, 0xc5,
    0x6d, 0x17, 0xb4, 0x7b, 0x86, 0x76, 0xfe, 0xdb, 0xee, 0x9c, 0x8b, 0x6d, 0x12, 0x8e, 0xbb,
    0xe9, 0x19, 0x71, 0xb5, 0x71, 0x5e, 0x74, 0x87, 0xfb, 0x2b, 0xd6, 0x34, 0x5c, 0x54, 0xbf,
    0x20, 0xbb, 0xcf, 0x4b, 0xa4, 0x8f, 0xaa, 0x93, 0xcf, 0x93, 0xaa, 0xba, 0xf5, 0x11, 0xf0,
    0x45, 0xf7, 0xe7, 0x5b, 0x84, 0xfb, 0x8c, 0xf9, 0x40, 0xa8, 0xe3, 0x19, 0xf9, 0xa6, 0xd6,
    0x5d, 0x2d, 0xaa, 0xab, 0xf7, 0x5e, 0xcb, 0xff, 0x4b, 0x7b, 0xef, 0x63, 0x2e, 0xc6, 0x7a,
    0x56, 0x56, 0xb9, 0xf9, 0x6d, 0x64, 0xac, 0xe7, 0x0d, 0x73, 0x71, 0x0e, 0x84, 0x7f, 0x80,
    0xc6, 0x60, 0x0f, 0xc6, 0xd3, 0x01, 0xc9, 0x46, 0xb0, 0xc7, 0x2f, 0x1c, 0x93, 0x75, 0x09,
    0xac, 0xc7, 0xe8, 0xc8, 0x16, 0xdc, 0x34, 0x37, 0x14, 0x17, 0x82, 0x75, 0x92, 0x8f, 0x8e,
    0x7f, 0x44, 0xcc, 0xed, 0x61, 0xc0, 0x31, 0x3e, 0x97, 0xbf, 0x41, 0x79, 0x81, 0x5d, 0xe1,
    0x45, 0x8c, 0x2f, 0xe8, 0x02, 0xd1, 0xce, 0x7d, 0x45, 0x9e, 0x5b, 0x92, 0x8f, 0x23, 0x70,
    0xfd, 0x07, 0x78, 0x0f, 0x63, 0x94, 0x98, 0xa7, 0x94, 0xdb, 0xb7, 0x6c, 0x1e, 0x93, 0xae,
    0xaa, 0x5c, 0xcf, 0xd7, 0xb7, 0x6f, 0x72, 0x41, 0x61, 0x5f, 0x6b, 0x16, 0x9a, 0x47, 0xbc,
    0x4b, 0xb1, 0x9b, 0x0b, 0xe6, 0xdf, 0x95, 0xeb, 0x3a, 0xfa, 0x78, 0x75, 0xc2, 0x0d, 0xe3,
    0x8f, 0x14, 0x9f, 0xbd, 0x2f, 0xbc, 0x57, 0x70, 0x1f, 0xc7, 0x98, 0xcf, 0xa9, 0xd3, 0xef,
    0xce, 0xfd, 0x9a, 0x39, 0x5f, 0x35, 0x17, 0xe0, 0x9d, 0x63, 0x07, 0xf3, 0x2e, 0x3e, 0xae,
    0x53, 0x5b, 0xfc, 0xbb, 0xbb, 0xa8, 0xf5, 0xfb, 0x98, 0x47, 0xbd, 0xdc, 0x45, 0x98, 0x73,
    0x3b, 0x83, 0xa8, 0x9a, 0x54, 0x91, 0x1f, 0xf9, 0x29, 0xfd, 0x11, 0x96, 0x44, 0xbf, 0xa7,
    0xff, 0x84, 0xee, 0x53, 0x11, 0xf4, 0xfa, 0xa3, 0x27, 0x7d, 0x29, 0xad, 0xb8, 0x0f, 0x72,
    0x98, 0x62, 0x15, 0xbe, 0xd0, 0xc7, 0xbd, 0x4b, 0xef, 0x42, 0x47, 0xf3, 0x87, 0x3b, 0x85,
    0x9b, 0x9f, 0x5b, 0xa2, 0xd3, 0x53, 0x6e, 0x9e, 0x65, 0xfc, 0xe4, 0x86, 0xb9, 0xef, 0x31,
    0x0f, 0x3a, 0x55, 0x7a, 0x77, 0x8d, 0xfc, 0xe4, 0x34, 0x8e, 0x01, 0x63, 0x12, 0xad, 0x3c,
    0xee, 0xdf, 0x58, 0xce, 0xdd, 0x3b, 0x83, 0x8d, 0x8a, 0x4b, 0x35, 0xae, 0x38, 0xb3, 0x07,
    0x9b, 0x60, 0xe3, 0x63, 0x3e, 0xa3, 0x5b, 0x89, 0xaa, 0x14, 0xfb, 0xc3, 0xb8, 0x60, 0x56,
    0x83, 0xbb, 0xe4, 0x23, 0x16, 0x21, 0x7d, 0xfe, 0xbc, 0x4e, 0xf7, 0x33, 0xb3, 0x0f, 0x8f,
    0x1d, 0x61, 0x5b, 0xff, 0xac, 0x90, 0xdf, 0x38, 0xab, 0x31, 0xca, 0xd6, 0x6e, 0x05, 0xf3,
    0x2a, 0x70, 0x66, 0xf5, 0x45, 0x2d, 0x40, 0x1f, 0xe4, 0x16, 0x6d, 0xd5, 0xf9, 0xd9, 0x2d,
    0x47, 0x43, 0xce, 0x5b, 0xaa, 0x20, 0x2e, 0x20, 0xae, 0xae, 0x0f, 0xb3, 0xea, 0x6a, 0x05,
    0x03, 0x73, 0xbe, 0x12, 0x95, 0xc3, 0xde, 0x75, 0x3f, 0x94, 0x8d, 0x27, 0xee, 0x3e, 0xfb,
    0xdf, 0x4e, 0xba, 0x8f, 0x4b, 0xc7, 0x9a, 0x68, 0x31, 0x8d, 0xb1, 0x1c, 0x5f, 0x8b, 0x2b,
    0x2f, 0x01, 0xfa, 0x91, 0x3c, 0x47, 0xe6, 0xe4, 0x5b, 0xf1, 0x01, 0x1d, 0xc4, 0xfa, 0x86,
    0x33, 0xe2, 0x67, 0x01, 0xc7, 0xc3, 0x47, 0x84, 0xd5, 0x25, 0x1c, 0x22, 0xe8, 0x91, 0x8c,
    0xd1, 0xec, 0xfa, 0x9c, 0xcf, 0x52, 0x8b, 0x85, 0x81, 0xcd, 0x81, 0x79, 0x0c, 0xea, 0x3d,
    0xdd, 0x64, 0x65, 0x9f, 0xd8, 0x2b, 0x3d, 0xce, 0x43, 0xb9, 0x73, 0x7a, 0x4e, 0x9f, 0xe5,
    0xf5, 0x42, 0xda, 0x5e, 0x32, 0x87, 0x7a, 0x32, 0x94, 0x31, 0x5a, 0x41, 0x17, 0x7a, 0xdc,
    0x8b, 0xfb, 0x31, 0x26, 0xfa, 0x7f, 0x0c, 0xec, 0xb4, 0xc4, 0x5a, 0xea, 0x73, 0x37, 0x62,
    0x5b, 0x19, 0x93, 0x94, 0x79, 0x93, 0x3a, 0x96, 0x20, 0x98, 0x53, 0xbe, 0x26, 0xe5, 0x6c,
    0xef, 0x94, 0xed, 0xcb, 0x6c, 0x22, 0xec, 0xd4, 0x6d, 0xfa, 0x3c, 0xc6, 0xc1, 0x0a, 0xf0,
    0x12, 0xdb, 0x4a, 0x77, 0xa5, 0xc8, 0xcf, 0xe9, 0x0b, 0x3e, 0x20, 0xcf, 0x57, 0xcb, 0xf1,
    0xc3, 0x3d, 0x2c, 0x7b, 0xc0, 0x0f, 0x64, 0xce, 0x5b, 0x6f, 0x23, 0xe9, 0xaf, 0x63, 0xa9,
    0xa0, 0xe8, 0x56, 0xea, 0x18, 0x79, 0x7c, 0x08, 0xd9, 0x81, 0x4c, 0x67, 0x0a, 0x3f, 0xd7,
    0x7f, 0xc3, 0x3a, 0x72, 0x34, 0x68, 0xf7, 0x59, 0xf3, 0x33, 0x4f, 0x6a, 0x5e, 0xbd, 0xd2,
    0x49, 0x20, 0xde, 0x5b, 0x4a, 0x3c, 0x96, 0xcc, 0x13, 0xd5, 0xd6, 0xe2, 0x8b, 0xfb, 0x15,
    0xd7, 0xf2, 0x51, 0xbe, 0x16, 0x75, 0xa7, 0x9e, 0x39, 0xbf, 0x25, 0x01, 0xfd, 0x12, 0x31,
    0xc1, 0x9b, 0xbc, 0xb3, 0x51, 0xfb, 0xcd, 0x32, 0xbe, 0x55, 0x76, 0x51, 0x7d, 0x02, 0xd0,
    0xb7, 0x4f, 0xbb, 0x3a, 0xe1, 0xa5, 0x41, 0x6f, 0x38, 0x10, 0xee, 0xaa, 0x1c, 0xab, 0xd2,
    0x55, 0xc1, 0x9e, 0x7b, 0xf0, 0x2f, 0xa4, 0xa7, 0xc8, 0xfb, 0xcb, 0xf9, 0xc1, 0x98, 0x7b,
    0x5b, 0x1f, 0xdc, 0x8f, 0xa1, 0xda, 0x53, 0xd4, 0x7f, 0xc8, 0x97, 0xc6, 0x7f, 0x43, 0x3c,
    0xe7, 0x11, 0x77, 0xcc, 0xf3, 0x28, 0x8e, 0x3f, 0xa8, 0x7d, 0x08, 0x16, 0x0e, 0xbf, 0xf3,
    0x7e, 0x47, 0xf7, 0x2e, 0xcb, 0x7b, 0xac, 0xfe, 0x7a, 0xb5, 0x67, 0x2d, 0xc2, 0xa4, 0xe6,
    0xe1, 0x1b, 0xdf, 0xb9, 0x8c, 0x5b, 0x9b, 0x58, 0x34, 0xb9, 0x66, 0x81, 0xf5, 0xc0, 0xfb,
    0xe1, 0x0b, 0x2e, 0xdf, 0xc9, 0xb6, 0xf4, 0x9e, 0x7f, 0x7e, 0x3d, 0x93, 0x6f, 0x2d, 0xfd,
    0x61, 0x9d, 0x42, 0x31, 0xbe, 0xd2, 0x17, 0x3e, 0x53, 0xb9, 0x6c, 0xbe, 0x8f, 0xb1, 0xe9,
    0x7e, 0x33, 0x1a, 0x5d, 0x25, 0xdf, 0x0e, 0xba, 0xce, 0x31, 0x0a, 0x34, 0xbd, 0x31, 0xa4,
    0x28, 0xdf, 0x17, 0xc8, 0xac, 0x34, 0x5e, 0xa1, 0xf1, 0x11, 0xa6, 0x51, 0xaa, 0xab, 0x22,
    0x20, 0x2c, 0x53, 0x9f, 0xe9, 0x45, 0x7b, 0xde, 0x8d, 0xcf, 0xb8, 0x67, 0x12, 0x4b, 0xab,
    0xfc, 0xfe, 0xfa, 0x4f, 0xe7, 0xe5, 0xb3, 0x8c, 0xb9, 0xe0, 0x1e, 0xc8, 0x78, 0x39, 0x3c,
    0x11, 0x91, 0x1d, 0x73, 0xdd, 0x9a, 0x40, 0xb7, 0x3e, 0x69, 0xfe, 0x7a, 0xdb, 0x9c, 0xa4,
    0x10, 0x2e, 0xab, 0xe1, 0x65, 0xa4, 0xc9, 0x3d, 0xaa, 0x2d, 0x93, 0xe6, 0x37, 0x1c, 0xd0,
    0x76, 0xb5, 0x0e, 0x6d, 0xca, 0x88, 0xcd, 0x1c, 0x75, 0xd2, 0x6f, 0xe6, 0x2c, 0xf1, 0x05,
    0xdd, 0xe3, 0x9f, 0x78, 0x0a, 0x74, 0x4c, 0xbe, 0x6f, 0x7b, 0xac, 0x4a, 0xda, 0xcd, 0xb3,
    0xdb, 0x87, 0xe5, 0xdc, 0x8a, 0x7d, 0xa8, 0x14, 0x87, 0x08, 0x9b, 0xa0, 0xc3, 0x90, 0xdf,
    0x2a, 0xbf, 0xed, 0x0e, 0xd6, 0xb2, 0xa9, 0x93, 0xbc, 0x0c, 0xf9, 0x7d, 0xf9, 0x9d, 0x5c,
    0x65, 0xe9, 0x1c, 0xb3, 0x74, 0x53, 0x12, 0x57, 0x98, 0xf1, 0xdd, 0x47, 0x99, 0x85, 0x73,
    0x39, 0x1e, 0x6f, 0xac, 0xfb, 0x35, 0xfb, 0xe5, 0x67, 0xe6, 0xb9, 0x2f, 0x0f, 0x58, 0xc7,
    0x3b, 0x80, 0xae, 0x61, 0xdd, 0xbf, 0x59, 0xb7, 0x8f, 0x58, 0x7e, 0xcc, 0x33, 0x45, 0x5b,
    0xb2, 0x87, 0x71, 0x03, 0xec, 0x36, 0xb0, 0xd9, 0xbf, 0xb6, 0xbf, 0x46, 0xa0, 0xbb, 0x61,
    0xe3, 0x2e, 0x3a, 0x2d, 0x6a, 0xce, 0x8a, 0x30, 0x72, 0x97, 0xca, 0x02, 0xde, 0xcd, 0xe2,
    0x34, 0x1f, 0x11, 0xe6, 0x6e, 0x2a, 0xfc, 0xe9, 0xe1, 0x69, 0x77, 0x38, 0xcd, 0x27, 0x77,
    0xfd, 0xf3, 0xe7, 0x1e, 0x6c, 0xcc, 0x78, 0x76, 0x45, 0xac, 0x11, 0xf3, 0x0c, 0x16, 0xb5,
    0x89, 0x64, 0x4c, 0xaa, 0x53, 0x5f, 0x2f, 0x34, 0x3a, 0x37, 0x74, 0x2d, 0xe4, 0x69, 0xee,
    0xee, 0x05, 0xe9, 0x85, 0x74, 0x07, 0xae, 0x2f, 0x40, 0x76, 0x2a, 0x62, 0x42, 0x5b, 0xeb,
    0x84, 0xb8, 0xea, 0x5d, 0xb8, 0x17, 0xb8, 0x55, 0xa0, 0xbd, 0xcf, 0xd5, 0x6c, 0x8f, 0xba,
    0x7c, 0x77, 0xbd, 0x7e, 0x6a, 0xdd, 0x7f, 0x3c, 0x6d, 0xee, 0xc4, 0x18, 0x8d, 0xdf, 0x98,
    0x55, 0x24, 0xd3, 0x30, 0x37, 0xdd, 0x87, 0xbb, 0xf6, 0xf8, 0xc0, 0x74, 0x3d, 0x43, 0xdc,
    0x81, 0x3f, 0x3d, 0xf5, 0xdb, 0xe8, 0xcf, 0x16, 0xfa, 0x6f, 0xf6, 0x70, 0x4e, 0xad, 0x19,
    0xf7, 0xb4, 0x76, 0xff, 0xa5, 0xe3, 0x99, 0x7a, 0x6e, 0xe3, 0x73, 0xf0, 0x5a, 0xee, 0x33,
    0xc5, 0x1c, 0x60, 0xfc, 0xa2, 0x03, 0xe7, 0x78, 0x5e, 0xdf, 0xc1, 0xbb, 0x07, 0x59, 0x13,
    0x26, 0xf7, 0xba, 0x75, 0xff, 0x06, 0x3c, 0x01, 0xf3, 0xf3, 0x93, 0xa8, 0xca, 0xf8, 0xe3,
    0x79, 0x2b, 0xe3, 0xf0, 0x17, 0x98, 0xd7, 0xec, 0xe5, 0x61, 0xf5, 0x36, 0xc3, 0xbd, 0xdb,
    0xae, 0x60, 0xaf, 0x3e, 0xc4, 0x38, 0xa7, 0x79, 0xd5, 0xcd, 0xeb, 0xaf, 0x7a, 0xdc, 0x84,
    0xfb, 0xf7, 0x4b, 0x5b, 0xc3, 0x28, 0xb5, 0x9a, 0x7f, 0xbf, 0x14, 0xe4, 0xd9, 0x17, 0xad,
    0x1c, 0x13, 0xe8, 0x78, 0x53, 0x3e, 0x26, 0xfd, 0x1b, 0xf6, 0x2c, 0xd5, 0x65, 0x2c, 0xfa,
    0x6b, 0x31, 0x3d, 0x9a, 0x76, 0x41, 0xa2, 0x74, 0xbe, 0x34, 0x8f, 0x89, 0xdf, 0x5d, 0x54,
    0xce, 0x6c, 0x92, 0x7c, 0x28, 0x5d, 0x8d, 0xb0, 0xdd, 0x46, 0x4d, 0xb0, 0x34, 0x76, 0xa9,
    0xc6, 0xe2, 0x79, 0x8a, 0x7b, 0xb4, 0xcd, 0x1c, 0xa9, 0x32, 0x1d, 0x55, 0x8b, 0xe9, 0xa7,
    0xca, 0xe4, 0x35, 0xa7, 0x7b, 0x05, 0x32, 0xa8, 0x36, 0x7c, 0x43, 0xcc, 0x3b, 0xf2, 0x0f,
    0xe7, 0x39, 0xa5, 0x3e, 0x40, 0xe2, 0x5d, 0x96, 0x75, 0xa1, 0xcd, 0x4b, 0xf6, 0x86, 0xcc,
    0x7f, 0x3c, 0x8b, 0x67, 0xf5, 0xb5, 0xb4, 0xc0, 0xd6, 0x63, 0xfb, 0x24, 0x97, 0xdb, 0x54,
    0xa6, 0x90, 0xf2, 0x57, 0x63, 0x9b, 0x3d, 0xca, 0x79, 0x14, 0x8e, 0xcc, 0x69, 0xcd, 0xc7,
    0x60, 0x4e, 0x41, 0xe6, 0x99, 0x9c, 0x1c, 0xd0, 0xea, 0x20, 0x9c, 0xc4, 0xb7, 0x64, 0x7e,
    0xc9, 0xf7, 0x2d, 0x39, 0x1b, 0x8f, 0xd7, 0xcc, 0x7f, 0xe7, 0x02, 0x0d, 0xba, 0xdb, 0xf9,
    0x93, 0xf8, 0x02, 0x25, 0x3f, 0xd5, 0xb7, 0x8d, 0x58, 0x2d, 0xda, 0x61, 0xd1, 0xe1, 0x45,
    0x3b, 0xeb, 0x39, 0xb2, 0xa6, 0x3d, 0x89, 0x35, 0xd7, 0x80, 0x6f, 0x10, 0x26, 0x27, 0xdc,
    0xa7, 0x2b, 0xb4, 0x27, 0xd5, 0xcf, 0x02, 0x27, 0xcf, 0xf8, 0x1f, 0xc4, 0xd5, 0x3c, 0x84,
    0x19, 0xfb, 0xca, 0xe0, 0xb0, 0x65, 0x1e, 0x02, 0xea, 0x8e, 0x1b, 0xb0, 0xff, 0x56, 0xbd,
    0x7b, 0x61, 0x5b, 0x2e, 0x59, 0x15, 0xeb, 0xad, 0x19, 0x0c, 0x63, 0xeb, 0xee, 0xe3, 0x69,
    0x9d, 0xbf, 0x25, 0xf6, 0x29, 0x9e, 0x43, 0x3c, 0x9f, 0x5a, 0x73, 0xa9, 0x9e, 0x7e, 0xcf,
    0x10, 0x67, 0x25, 0x6b, 0xb4, 0x08, 0x1b, 0x6b, 0x47, 0x76, 0x14, 0xe6, 0x54, 0x29, 0x1f,
    0xaa, 0xed, 0xc3, 0x39, 0xb3, 0x9c, 0xf7, 0xb1, 0xe1, 0x7c, 0x0f, 0xb9, 0xce, 0xfb, 0xb7,
    0x24, 0x72, 0xd0, 0x07, 0xc0, 0x31, 0x3a, 0xb9, 0x6f, 0x6b, 0x91, 0x1b, 0x11, 0xe1, 0x3d,
    0xf6, 0x18, 0xb7, 0xa4, 0xad, 0x13, 0xec, 0x49, 0xf4, 0x93, 0x21, 0x2e, 0x76, 0x94, 0xe2,
    0x86, 0x0f, 0x88, 0x67, 0x42, 0x7f, 0x13, 0xdb, 0xcd, 0x4b, 0x59, 0x37, 0x68, 0x93, 0xce,
    0x6d, 0x28, 0x31, 0x0f, 0xe0, 0xdd, 0x1e, 0xdc, 0x13, 0xaa, 0x39, 0x74, 0x60, 0xbf, 0x5b,
    0x72, 0xa8, 0x8b, 0xe5, 0xcb, 0x2c, 0xcd, 0x33, 0xe6, 0x35, 0xb7, 0x75, 0x9e, 0x86, 0x72,
    0xd8, 0xbd, 0xfb, 0x41, 0xea, 0x53, 0x4f, 0x8e, 0xf1, 0xe3, 0xd8, 0x38, 0x0b, 0xdb, 0xbd,
    0x20, 0xdf, 0x16, 0xfa, 0x89, 0xa4, 0x9f, 0x77, 0x65, 0x2b, 0x1a, 0x63, 0x7b, 0xf1, 0x35,
    0xc1, 0x19, 0xc5, 0xf7, 0xfc, 0xc3, 0xcc, 0xc1, 0xdc, 0xb9, 0xc6, 0x6f, 0x5b, 0x6d, 0xaf,
    0xde, 0xa8, 0x72, 0x31, 0x75, 0x5f, 0x84, 0xc4, 0xa4, 0x11, 0xb6, 0x1f, 0xee, 0x0c, 0xf0,
    0xe4, 0x55, 0xe1, 0x58, 0xec, 0xfa, 0xe2, 0x7a, 0xe9, 0x88, 0x38, 0x20, 0xd1, 0x64, 0x9a,
    0xa1, 0xd3, 0x64, 0xaa, 0x13, 0xf7, 0x17, 0x53, 0x4b, 0x0c, 0x6d, 0x52, 0x35, 0xd6, 0x8f,
    0x25, 0x67, 0xaa, 0xc5, 0x47, 0x97, 0x97, 0xe2, 0xfa, 0x00, 0x12, 0x47, 0x97, 0x3b, 0xb3,
    0xcb, 0x48, 0xac, 0x43, 0x17, 0xb7, 0xae, 0xc0, 0x54, 0x83, 0xfd, 0x85, 0xfa, 0xc9, 0xac,
    0x2f, 0xf5, 0x6e, 0xbb, 0x3e, 0x6b, 0xd7, 0x05, 0x3a, 0x87, 0x0b, 0xf0, 0xcc, 0x57, 0xf4,
    0x21, 0x8f, 0x50, 0xb5, 0xd7, 0x14, 0x76, 0x3e, 0x7f, 0x17, 0x39, 0xbe, 0x8e, 0x3e, 0x9a,
    0xfe, 0x4c, 0xf6, 0x2f, 0xfe, 0x1b, 0x63, 0xf6, 0x58, 0x33, 0x83, 0x70, 0x7d, 0x0f, 0x1e,
    0xc3, 0xb7, 0x08, 0xf5, 0x0a, 0xbc, 0x07, 0x95, 0x42, 0xbd, 0x80, 0xd7, 0xab, 0x6a, 0xa7,
    0xbe, 0xf9, 0x46, 0xe3, 0x7f, 0xa7, 0x4f, 0x75, 0xe5, 0x37, 0xee, 0xdf, 0x41, 0x1f, 0xa5,
    0x87, 0x7f, 0x8f, 0x0c, 0x9f, 0x61, 0x86, 0x87, 0x1d, 0x2a, 0x30, 0x9e, 0xfa, 0x46, 0x59,
    0xbd, 0x28, 0xdf, 0xde, 0xc4, 0x97, 0x7a, 0x40, 0xb7, 0x70, 0x6e, 0x94, 0x83, 0xa3, 0xd5,
    0x4b, 0x31, 0x0c, 0xc5, 0x3e, 0x91, 0xb4, 0xd6, 0x5d, 0x7a, 0x7e, 0xa4, 0x23, 0x11, 0x3e,
    0xac, 0x6b, 0x59, 0x20, 0x0b, 0x98, 0x47, 0xcd, 0x98, 0xcf, 0x1c, 0x81, 0x8f, 0x20, 0x8f,
    0xc0, 0x5e, 0x57, 0x30, 0x47, 0x17, 0xf9, 0x3d, 0xd6, 0x2a, 0x5c, 0x3e, 0x0c, 0x6e, 0xfc,
    0xbf, 0x19, 0x6c, 0x30, 0x8e, 0xd9, 0x39, 0x0f, 0x2e, 0xc3, 0x6b, 0xbe, 0xcd, 0xf9, 0x57,
    0xb7, 0xab, 0x70, 0x6e, 0x93, 0xaf, 0x36, 0x62, 0xaf, 0x4b, 0xf4, 0x41, 0x79, 0xee, 0xfa,
    0xff, 0xb1, 0xa8, 0x36, 0x50, 0xef, 0x15, 0xf9, 0xe3, 0xa8, 0xef, 0x07, 0x99, 0xbc, 0x7a,
    0x61, 0x12, 0x75, 0x40, 0x54, 0x0e, 0x14, 0xc7, 0xde, 0x9e, 0xb5, 0x38, 0x9b, 0xa8, 0x4d,
    0xd0, 0x72, 0xb4, 0xf5, 0x5a, 0x60, 0xbc, 0x76, 0xb7, 0x71, 0x10, 0x6b, 0x79, 0x8d, 0xc6,
    0x7f, 0x68, 0xf7, 0xaf, 0x60, 0xed, 0x45, 0x77, 0x26, 0xe6, 0xfa, 0x74, 0x1b, 0x25, 0x23,
    0xd9, 0xfc, 0x6d, 0x49, 0x1b, 0x5c, 0xd3, 0x2a, 0xc1, 0xbb, 0xbc, 0xc6, 0xf8, 0x98, 0xf4,
    0x98, 0xf7, 0x3e, 0xad, 0x3b, 0x21, 0x78, 0xcc, 0xdf, 0x70, 0x07, 0x70, 0x8c, 0x8f, 0x59,
    0xc8, 0xd5, 0x9b, 0x40, 0x7a, 0x9d, 0x56, 0xd3, 0x31, 0x15, 0x16, 0x20, 0x1d, 0xf7, 0xad,
    0x05, 0xf9, 0xb3, 0x73, 0x31, 0x66, 0x6e, 0xad, 0x01, 0x92, 0xa5, 0x7f, 0x7d, 0xbc, 0x32,
    0xa2, 0xf0, 0x0e, 0xc0, 0x3a, 0xd1, 0xf6, 0xbf, 0x82, 0x06, 0x28, 0xb7, 0x5d, 0x5b, 0x1f,
    0x57, 0x80, 0x87, 0xc9, 0x3c, 0x95, 0x8b, 0x05, 0x9b, 0xa4, 0xef, 0x87, 0xb0, 0xc3, 0x3f,
    0xe2, 0xfc, 0xf2, 0x9c, 0xea, 0x27, 0xca, 0xed, 0x63, 0x3f, 0x19, 0xff, 0x4e, 0xd4, 0xcb,
    0x3e, 0xdf, 0x8b, 0x3c, 0x54, 0xb0, 0xfd, 0x1e, 0xbc, 0x37, 0xd0, 0x5d, 0xdf, 0x41, 0x5e,
    0x7d, 0x84, 0xf9, 0x85, 0xbb, 0x10, 0x65, 0xe5, 0x25, 0xa2, 0x9a, 0x8e, 0x43, 0xce, 0x51,
    0x09, 0x2c, 0x43, 0x97, 0x72, 0x52, 0x49, 0xb6, 0x63, 0xce, 0x0a, 0xd5, 0x82, 0xc1, 0xba,
    0x35, 0xd0, 0xf3, 0xab, 0x22, 0x07, 0xd0, 0x5a, 0x27, 0x32, 0xb5, 0x03, 0x44, 0x0e, 0x0d,
    0xd4, 0x6f, 0x2a, 0x77, 0xda, 0x97, 0x7a, 0x36, 0xea, 0xa3, 0x84, 0x8f, 0x5e, 0x1d, 0xc4,
    0x2f, 0x20, 0x0f, 0x2b, 0x40, 0xe7, 0x34, 0x37, 0x85, 0x93, 0xec, 0x26, 0x3f, 0x70, 0x6e,
    0xbd, 0x14, 0x07, 0xd3, 0xea, 0x34, 0x1a, 0xb5, 0xb3, 0xaa, 0x21, 0xc8, 0xca, 0xf8, 0x30,
    0x62, 0xdd, 0x10, 0x38, 0x87, 0x51, 0xfd, 0xb4, 0xdc, 0x2d, 0xc1, 0x5e, 0x4e, 0x7e, 0xcf,
    0x8d, 0xc1, 0x1c, 0xe5, 0x5f, 0xb5, 0xb1, 0x9b, 0x3a, 0x88, 0x93, 0x72, 0xff, 0x46, 0x1b,
    0xef, 0x56, 0xf4, 0xe0, 0x59, 0x63, 0x81, 0x94, 0x13, 0x8c, 0xfb, 0x33, 0xed, 0xa3, 0xef,
    0x8a, 0x35, 0x64, 0x2d, 0x79, 0xa1, 0xeb, 0x19, 0xd5, 0x90, 0x73, 0x5f, 0x63, 0xbb, 0x6f,
    0x0c, 0x27, 0x83, 0x63, 0x3b, 0xd6, 0xb8, 0x6a, 0x71, 0x4d, 0xce, 0xb4, 0x96, 0xe1, 0x8d,
    0xe1, 0xd9, 0xcc, 0xcf, 0x37, 0xce, 0x71, 0x9f, 0x38, 0x05, 0xf8, 0xea, 0xe2, 0x77, 0xaa,
    0x4b, 0xf6, 0xe6, 0x77, 0x9c, 0x59, 0x75, 0x65, 0x95, 0x5f, 0xc5, 0xb2, 0xcf, 0x7b, 0x43,
    0xc2, 0x8d, 0xef, 0x90, 0x5e, 0x72, 0xe3, 0xde, 0x09, 0x7c, 0xcf, 0xad, 0x6b, 0x6a, 0x7c,
    0x9c, 0x31, 0x9e, 0xd8, 0xf1, 0xf7, 0xc5, 0x73, 0x54, 0x7c, 0xed, 0xd6, 0xf7, 0xd4, 0x9d,
    0x65, 0x9e, 0x11, 0xc6, 0x2d, 0x6f, 0xfa, 0x4e, 0xf8, 0x5e, 0x94, 0x53, 0x50, 0xf2, 0x0e,
    0xf0, 0xb8, 0xf5, 0x1d, 0xe9, 0x2b, 0xbe, 0xf1, 0x3d, 0xae, 0x43, 0x7a, 0xe3, 0x19, 0x63,
    0x86, 0xf5, 0xe2, 0xc6, 0x33, 0x06, 0x5b, 0xee, 0x83, 0x63, 0xf3, 0xb7, 0xbe, 0xf7, 0x75,
    0x4d, 0x6f, 0x3d, 0xdf, 0x28, 0x6b, 0xd7, 0x7f, 0xff, 0x9d, 0x6a, 0xc3, 0x59, 0xdc, 0x78,
    0xe7, 0x93, 0xd9, 0x8d, 0xf3, 0x32, 0xf0, 0x49, 0xff, 0xe2, 0x5d, 0xe4, 0xbb, 0xb7, 0xce,
    0xca, 0x4a, 0xac, 0x11, 0x77, 0xf3, 0xbb, 0xb7, 0xf2, 0x5c, 0x3d, 0xe6, 0x71, 0xe3, 0xfa,
    0x40, 0x0f, 0x5d, 0xde, 0xf8, 0x8e, 0xac, 0xb7, 0x70, 0xdb, 0xba, 0x50, 0x3f, 0xba, 0x71,
    0x70, 0x27, 0xbf, 0xde, 0x6f, 0x7c, 0x07, 0x73, 0x24, 0x7f, 0xcf, 0x26, 0xf1, 0xad, 0xf7,
    0xf9, 0x8b, 0x6e, 0x7f, 0xaf, 0xe1, 0xa0, 0x0f, 0x10, 0xf4, 0x80, 0xdb, 0xf6, 0x51, 0x8d,
    0xdb, 0x3e, 0xca, 0x71, 0x6f, 0x9c, 0x27, 0xea, 0x2f, 0x37, 0xd3, 0xb1, 0xd4, 0x6b, 0x6e,
    0x16, 0xda, 0xc2, 0xb3, 0x9a, 0xbf, 0x5b, 0xde, 0xfc, 0xbd, 0xf0, 0x33, 0xba, 0x55, 0x66,
    0x3a, 0x4a, 0xb7, 0x7e, 0x0b, 0x78, 0x63, 0x75, 0x7d, 0x06, 0xd9, 0x79, 0x78, 0xd9, 0x85,
    0x7c, 0xa9, 0xe2, 0x35, 0x92, 0xde, 0x7a, 0xf3, 0x3b, 0xe4, 0xe7, 0xbc, 0x6d, 0x9e, 0x5c,
    0x30, 0xbe, 0xf9, 0x5b, 0x58, 0x13, 0x7d, 0x59, 0x4d, 0xb0, 0xbf, 0xc6, 0x8d, 0xfb, 0x89,
    0x8f, 0x1b, 0xf9, 0x08, 0xbc, 0x73, 0xab, 0x8c, 0x89, 0x77, 0x8d, 0x43, 0x41, 0xbc, 0xb1,
    0x1d, 0xec, 0xf7, 0x70, 0x58, 0x74, 0x6f, 0x9d, 0x1f, 0xd6, 0xcc, 0xe1, 0x3e, 0x01, 0xfd,
    0xa8, 0xd7, 0x72, 0x39, 0x96, 0xf8, 0x85, 0x9a, 0x75, 0xf4, 0xc9, 0x2c, 0x12, 0xc4, 0xe2,
    0x67, 0xc4, 0x3d, 0x84, 0xa4, 0x8b, 0x5b, 0xfc, 0x44, 0x93, 0xfa, 0xad, 0xb4, 0xb3, 0x5e,
    0xaa, 0xe7, 0xfe, 0x3b, 0x5d, 0x5c, 0xe0, 0x92, 0x6f, 0xfd, 0x16, 0xe5, 0x39, 0xdf, 0x28,
    0xfa, 0xe8, 0x57, 0xf8, 0x7d, 0xb3, 0xde, 0x4a, 0xb6, 0xcc, 0xff, 0xa2, 0xde, 0x7a, 0xab,
    0x02, 0xba, 0xe4, 0x8d, 0x6b, 0x02, 0xda, 0x4a, 0x76, 0x37, 0xbf, 0x73, 0xbb, 0x3e, 0x98,
    0x74, 0x11, 0x57, 0x73, 0xb3, 0x8e, 0x76, 0x40, 0xbc, 0xd6, 0xa2, 0xa0, 0x9e, 0xfa, 0x1f,
    0xed, 0xa8, 0x76, 0xd5, 0xad, 0xfa, 0x20, 0xe8, 0x9d, 0x8c, 0x8d, 0xb9, 0x49, 0xff, 0xb9,
    0xc7, 0xe2, 0x5e, 0x28, 0x37, 0xeb, 0x59, 0xb7, 0x7e, 0x67, 0x7a, 0xab, 0xbe, 0xf9, 0xb5,
    0x4c, 0xfa, 0xdb, 0xd9, 0xcd, 0xba, 0x55, 0xe3, 0x63, 0xd1, 0x6d, 0xbc, 0xce, 0x26, 0x9f,
    0xea, 0x72, 0xa7, 0x5b, 0x75, 0x02, 0xd9, 0x8f, 0xe2, 0x06, 0x3d, 0x07, 0x63, 0x75, 0x37,
    0xd3, 0x5f, 0x63, 0x2e, 0xc4, 0x8d, 0xe7, 0x23, 0xe7, 0xfe, 0xdf, 0x97, 0x5d, 0xd5, 0xf5,
    0x91, 0x41, 0x87, 0xb8, 0x7b, 0xa3, 0x0f, 0xe1, 0x21, 0x39, 0x44, 0x93, 0xaf, 0x6f, 0xe5,
    0xe6, 0x6f, 0x5a, 0xf6, 0xf6, 0x1e, 0xf0, 0xa0, 0x08, 0xf1, 0x90, 0x88, 0x13, 0x40, 0xdd,
    0x6d, 0xb1, 0x13, 0xbe, 0xa9, 0x51, 0x53, 0xd6, 0x26, 0xfe, 0x1d, 0x4d, 0x93, 0x1a, 0xfa,
    0xd0, 0x37, 0xaa, 0xe4, 0xdd, 0xe6, 0x6e, 0x35, 0xe2, 0xde, 0x2d, 0xa2, 0x3e, 0x1c, 0xf0,
    0xac, 0x87, 0x28, 0x70, 0x9e, 0xa8, 0xfb, 0x73, 0xbd, 0xbc, 0x68, 0x89, 0x75, 0xda, 0x14,
    0x73, 0x2f, 0xea, 0x19, 0xa4, 0x76, 0x0f, 0x7e, 0x1f, 0xe3, 0x8e, 0x60, 0x97, 0x84, 0xe8,
    0x84, 0x6f, 0xc4, 0x32, 0x37, 0xe1, 0xb2, 0x78, 0x08, 0xa9, 0x76, 0x9e, 0xf0, 0x7d, 0x52,
    0xc3, 0xa2, 0x86, 0x35, 0x06, 0xd6, 0xc9, 0x0c, 0xe4, 0x5c, 0xbf, 0x26, 0xf9, 0x3c, 0xd6,
    0xf9, 0x12, 0xdf, 0x22, 0x2c, 0xc7, 0x29, 0x46, 0x5f, 0xdf, 0x34, 0xc4, 0xda, 0x0b, 0xd8,
    0x68, 0x8d, 0x58, 0x61, 0xc4, 0xf8, 0x72, 0x9c, 0xd1, 0xc7, 0x3c, 0xc8, 0x77, 0xc2, 0xe6,
    0xb8, 0xf7, 0x08, 0x63, 0xa8, 0xbd, 0xa4, 0xd7, 0x72, 0x04, 0xfe, 0x24, 0x71, 0x08, 0x6f,
    0xf1, 0x45, 0xdd, 0xbc, 0xf5, 0x7a, 0x09, 0xcf, 0x2d, 0x36, 0xae, 0xee, 0x67, 0xd3, 0xfb,
    0xad, 0x82, 0x87, 0x04, 0xe3, 0x61, 0x1f, 0x41, 0x35, 0x7c, 0x8f, 0x64, 0xac, 0x3c, 0x5f,
    0x85, 0xeb, 0xb1, 0x54, 0x68, 0x9e, 0x63, 0x38, 0xb7, 0x9d, 0xad, 0xce, 0xca, 0x75, 0x71,
    0x3c, 0xc3, 0x99, 0xe6, 0x7f, 0xd7, 0x73, 0x20, 0xee, 0x75, 0x9a, 0x97, 0xb1, 0x30, 0xc4,
    0xbc, 0x47, 0x3a, 0x56, 0xc5, 0x8a, 0x11, 0x37, 0xe2, 0x92, 0x17, 0x9c, 0xa3, 0x5e, 0x83,
    0xb1, 0xa4, 0xc6, 0x66, 0xbe, 0x06, 0x0c, 0xff, 0x9f, 0xf1, 0x50, 0x44, 0x73, 0x4f, 0x71,
    0x6b, 0x19, 0x69, 0xf4, 0x5d, 0x14, 0xcb, 0xb6, 0xd7, 0xc8, 0xa1, 0x5c, 0xd3, 0xa5, 0xa8,
    0xab, 0x7a, 0xaf, 0xd1, 0xd8, 0x33, 0x11, 0x57, 0x33, 0xee, 0xa3, 0x1d, 0x33, 0x62, 0x62,
    0xb3, 0xe7, 0xa0, 0x7f, 0x8f, 0xd6, 0x6f, 0xe2, 0x09, 0xaf, 0x18, 0xbf, 0x93, 0x68, 0xf9,
    0x21, 0xd5, 0x84, 0x32, 0xe8, 0x02, 0x71, 0x95, 0x32, 0x7e, 0x2a, 0xcf, 0x31, 0xcd, 0xc1,
    0x61, 0x1c, 0xbf, 0xc5, 0xc0, 0xb8, 0x5c, 0xf3, 0xd7, 0x5a, 0xdf, 0xc7, 0xc0, 0x00, 0x46,
    0xc5, 0x45, 0xaf, 0x9f, 0xa5, 0xd7, 0x13, 0xce, 0xe3, 0x2f, 0x41, 0xce, 0x9e, 0x8d, 0x3a,
    0xf8, 0x7c, 0xd1, 0xbb, 0x85, 0x7a, 0x72, 0x78, 0x89, 0x82, 0x3e, 0xf6, 0x49, 0x7b, 0x87,
    0xd4, 0x89, 0xb0, 0x87, 0xc2, 0xce, 0xc7, 0xfb, 0xa6, 0x72, 0x4a, 0x52, 0xfa, 0xe6, 0x58,
    0x41, 0x9e, 0x8e, 0xea, 0x13, 0x56, 0x9e, 0x0f, 0x45, 0x79, 0x4f, 0x88, 0x23, 0x40, 0xbe,
    0x70, 0xec, 0x13, 0x79, 0x4c, 0xb2, 0x7b, 0x49, 0xf3, 0x8c, 0xb1, 0xff, 0x18, 0xe5, 0x62,
    0xa0, 0xf3, 0xcb, 0x98, 0x59, 0x4c, 0xb5, 0x89, 0x88, 0x5f, 0x7d, 0x2c, 0xaa, 0x88, 0x0b,
    0x38, 0xd4, 0x16, 0xf8, 0xcd, 0x16, 0xf3, 0x58, 0x66, 0xfb, 0x3e, 0xf6, 0x7a, 0x2b, 0xcd,
    0xc2, 0xf7, 0x02, 0x8a, 0xd1, 0xf8, 0xeb, 0xe5, 0xce, 0xc7, 0x7a, 0xd0, 0x67, 0x78, 0x5f,
    0x35, 0x5b, 0xaf, 0x70, 0x36, 0x61, 0xdc, 0xb3, 0x90, 0xcd, 0xb8, 0xff, 0x17, 0xe4, 0x73,
    0x53, 0xa2, 0x5d, 0xf2, 0x8e, 0xb9, 0xd3, 0xda, 0xef, 0x3e, 0xe2, 0x87, 0x35, 0xe2, 0xca,
    0x9a, 0x6d, 0x0a, 0xfc, 0xce, 0x03, 0x5a, 0xd5, 0xb1, 0x10, 0x69, 0x1d, 0xc4, 0x69, 0xab,
    0xe3, 0xb8, 0xa5, 0x31, 0xf6, 0x1a, 0x7e, 0x5f, 0x14, 0x17, 0x93, 0xb9, 0x8a, 0xbb, 0x65,
    0xeb, 0x8f, 0xa6, 0x9f, 0x89, 0xac, 0xd7, 0xf7, 0x90, 0xd6, 0x42, 0x97, 0xb5, 0x8f, 0x24,
    0x1e, 0x65, 0xdf, 0x12, 0x63, 0x2a, 0xad, 0xfa, 0x3f, 0x8b, 0x6a, 0xf2, 0xf1, 0xe8, 0x36,
    0x8e, 0xba, 0xc9, 0x99, 0x63, 0xd4, 0x9f, 0x2b, 0xac, 0x0f, 0x2b, 0xfb, 0x3c, 0x02, 0x7f,
    0xc3, 0xbe, 0x06, 0x8f, 0x36, 0xcc, 0x26, 0xc7, 0x7c, 0x81, 0xcf, 0x37, 0x24, 0xc6, 0xf3,
    0x57, 0xb3, 0xc3, 0xc4, 0xa9, 0x8c, 0xa9, 0x96, 0x0c, 0x9e, 0x39, 0xe3, 0x2d, 0x29, 0xcf,
    0xda, 0x7b, 0x84, 0x2f, 0xf5, 0x69, 0x4f, 0x6f, 0xdb, 0x2b, 0xe0, 0x17, 0xd1, 0x78, 0x3b,
    0xdb, 0x33, 0x63, 0xaf, 0x82, 0x62, 0x9b, 0x4a, 0xe4, 0xdd, 0x78, 0x29, 0xaf, 0x6d, 0x31,
    0x95, 0xe6, 0x25, 0xf2, 0x32, 0x6f, 0xde, 0x37, 0x59, 0xdb, 0x10, 0xfe, 0x33, 0x79, 0x75,
    0x90, 0x73, 0x9f, 0x95, 0x63, 0x7b, 0xb2, 0x79, 0x13, 0xaf, 0x70, 0x77, 0xce, 0x02, 0xcb,
    0x58, 0x21, 0xb4, 0xa9, 0x77, 0x70, 0xaf, 0xb1, 0x57, 0x9a, 0xac, 0x39, 0x4b, 0xf2, 0x1f,
    0xe4, 0xc4, 0x35, 0x7e, 0xea, 0x54, 0xef, 0x55, 0xde, 0xa9, 0x62, 0xcc, 0x12, 0xd7, 0x82,
    0x56, 0x8c, 0x31, 0x75, 0x9e, 0x64, 0xc1, 0x14, 0xe4, 0xe6, 0x50, 0x8a, 0x01, 0x08, 0x29,
    0x9c, 0xef, 0xf0, 0xd3, 0xee, 0x70, 0xc1, 0x9a, 0x44, 0xb2, 0x9f, 0x25, 0xd6, 0x0b, 0x90,
    0x64, 0xd9, 0x8e, 0x75, 0x71, 0xbc, 0xca, 0x82, 0x7b, 0xe7, 0x5c, 0xe6, 0xdd, 0xce, 0xd9,
    0xcf, 0x64, 0x6e, 0x90, 0xe4, 0xfb, 0x2a, 0x66, 0xdf, 0xeb, 0x28, 0x0c, 0x13, 0x8d, 0xeb,
    0x3a, 0xe7, 0x08, 0xde, 0x19, 0xb4, 0xb7, 0xce, 0xe0, 0xb2, 0xbd, 0x0c, 0x26, 0x41, 0xfd,
    0x3d, 0x70, 0xa2, 0xdd, 0xe0, 0x6b, 0xb0, 0xf3, 0x76, 0xd1, 0x38, 0xdc, 0xcc, 0x5e, 0x87,
    0xd9, 0xae, 0xbf, 0x7d, 0x9e, 0xb8, 0x89, 0x07, 0x7f, 0x7b, 0x6e, 0x27, 0xeb, 0xc1, 0xe5,
    0x36, 0x78, 0x9d, 0xd5, 0xbd, 0xd7, 0xfe, 0xc6, 0x1b, 0x2f, 0xab, 0xd1, 0xab, 0x9f, 0xc0,
    0xf5, 0x41, 0x35, 0xa8, 0x0c, 0x60, 0xdc, 0x42, 0x0c, 0x92, 0x58, 0x47, 0x50, 0x5d, 0xaf,
    0xaf, 0x41, 0xd5, 0x7a, 0x2f, 0x51, 0x5f, 0xa9, 0xae, 0x30, 0x66, 0xf9, 0xba, 0xdc, 0x27,
    0xa0, 0x3b, 0x7d, 0xc0, 0x7b, 0x09, 0xfa, 0x2e, 0x47, 0xc0, 0xa7, 0xe6, 0xad, 0xd5, 0x7e,
    0xde, 0x17, 0x3d, 0x17, 0x25, 0x9d, 0xbe, 0x01, 0xcf, 0x7e, 0x7b, 0xda, 0x87, 0x9f, 0xd4,
    0x67, 0x84, 0xcf, 0x35, 0x10, 0x53, 0x82, 0xbd, 0x6c, 0xd6, 0x4a, 0x17, 0xaa, 0xae, 0xf6,
    0xbb, 0x3a, 0xa7, 0xb1, 0xeb, 0xdb, 0x39, 0xf6, 0xd7, 0xab, 0x0d, 0xdf, 0xd0, 0x8f, 0xf2,
    0xfa, 0x95, 0xd8, 0xf9, 0xb5, 0xdf, 0x0d, 0xb1, 0xf7, 0x20, 0xf0, 0x57, 0xac, 0xef, 0xd0,
    0x51, 0xcf, 0x04, 0xd9, 0x43, 0xb4, 0x6b, 0xf6, 0x89, 0xe4, 0x3e, 0x90, 0x2e, 0xf1, 0x4b,
    0xdf, 0xca, 0x58, 0xba, 0x69, 0x7c, 0x41, 0x3c, 0xe7, 0xf2, 0xcc, 0x3d, 0x21, 0x7b, 0x97,
    0xf9, 0x99, 0x73, 0x57, 0x8d, 0x7c, 0x32, 0x85, 0x09, 0x84, 0x71, 0x86, 0x38, 0xa6, 0x43,
    0xeb, 0x9c, 0xbf, 0x46, 0xe5, 0xc2, 0x61, 0x3d, 0x6d, 0xea, 0x2b, 0x59, 0xcf, 0xd6, 0xc4,
    0xe6, 0x5a, 0xd0, 0xdc, 0x03, 0x81, 0x91, 0x48, 0x73, 0x09, 0x25, 0x6e, 0xe4, 0xaa, 0x1a,
    0x19, 0x3d, 0x02, 0xe3, 0x12, 0xe8, 0x27, 0xa5, 0xef, 0x8f, 0xab, 0x11, 0xcf, 0x43, 0xcb,
    0xd0, 0xe7, 0x47, 0xf2, 0x3f, 0xf5, 0x3f, 0xe9, 0x7a, 0xcc, 0x7e, 0x51, 0xfd, 0xa9, 0xe5,
    0xe5, 0xcf, 0x21, 0x20, 0x8c, 0xb1, 0x5b, 0x5b, 0xc2, 0x1e, 0xcd, 0xf6, 0x03, 0xd1, 0x97,
    0x68, 0xf8, 0x42, 0x18, 0x72, 0x7b, 0x8d, 0x5e, 0xac, 0xcd, 0x0b, 0x7a, 0x64, 0x84, 0x58,
    0x80, 0x6a, 0xa2, 0x77, 0xf1, 0xdc, 0x02, 0xea, 0x6d, 0x1b, 0x6e, 0x83, 0xae, 0xfb, 0x3a,
    0xba, 0x7b, 0x4b, 0xdd, 0x65, 0xec, 0x83, 0x80, 0x39, 0x67, 0x54, 0xaf, 0x5e, 0xe4, 0xa1,
    0xa2, 0x4e, 0x1e, 0x75, 0x2a, 0xa7, 0xe8, 0x21, 0x7c, 0xa7, 0x7a, 0xf8, 0x9d, 0xfc, 0x98,
    0xc5, 0x5f, 0xb8, 0xb7, 0x26, 0xd5, 0x38, 0xca, 0xda, 0x9f, 0xdd, 0x06, 0xca, 0x20, 0xae,
    0x56, 0xfa, 0x0d, 0xd4, 0x67, 0x42, 0x55, 0xeb, 0x5c, 0xd5, 0xcb, 0xb0, 0x60, 0x2f, 0x28,
    0xa3, 0xd8, 0xbf, 0xbc, 0x06, 0x9b, 0xa2, 0x0b, 0x6b, 0xd2, 0xfa, 0x64, 0x15, 0xcf, 0xdd,
    0x9d, 0xc0, 0xfd, 0xb0, 0xf6, 0x88, 0xca, 0xf5, 0x73, 0xcc, 0x9f, 0x11, 0xf0, 0x1e, 0x3e,
    0x5e, 0x47, 0xcb, 0xed, 0x10, 0xb5, 0x58, 0xe6, 0x88, 0x05, 0x1a, 0xe9, 0xb6, 0x4a, 0x68,
    0x4f, 0xc6, 0xf1, 0x83, 0xdc, 0xc1, 0xf7, 0x74, 0xdd, 0xb5, 0xbf, 0xd8, 0x6a, 0x7f, 0x0b,
    0x1f, 0xc1, 0x92, 0x4b, 0x4c, 0xf8, 0x07, 0xd1, 0x0f, 0x13, 0x73, 0xb8, 0x9a, 0xc9, 0xac,
    0x35, 0xa2, 0xb8, 0x67, 0xc0, 0x03, 0xde, 0x01, 0x94, 0xc3, 0x22, 0xb7, 0x71, 0x63, 0xe6,
    0xa0, 0x7d, 0x27, 0xe7, 0x42, 0xb9, 0xe8, 0x2c, 0x5f, 0xd6, 0xc6, 0xbc, 0xc2, 0x32, 0x7d,
    0xfd, 0xb5, 0x05, 0x3a, 0xfc, 0x8e, 0x68, 0x3f, 0xa3, 0xe7, 0x7e, 0x5f, 0x43, 0x53, 0xdb,
    0x20, 0xf9, 0x18, 0x6b, 0x7f, 0x1b, 0xa9, 0x1e, 0x9a, 0x1e, 0xdb, 0x73, 0x55, 0x2d, 0xd7,
    0x67, 0x03, 0x21, 0x1d, 0xda, 0xec, 0x1d, 0xe0, 0x3d, 0x7a, 0x2d, 0xdb, 0x4b, 0x46, 0x3e,
    0x0b, 0xf2, 0x95, 0x98, 0x37, 0x19, 0xfa, 0xb1, 0xa9, 0xdf, 0xa7, 0xf6, 0x5d, 0x19, 0xdf,
    0xf0, 0xcc, 0x9a, 0x27, 0xfa, 0x76, 0xea, 0xb9, 0x2c, 0x8c, 0xc5, 0x5d, 0x53, 0xde, 0xd1,
    0xf7, 0xe5, 0x04, 0x3d, 0x1c, 0x74, 0x15, 0xc2, 0xd8, 0x6e, 0x31, 0xf6, 0xce, 0xb5, 0x77,
    0x1e, 0x74, 0xee, 0x68, 0x6b, 0xa7, 0x39, 0x63, 0x46, 0x3d, 0x63, 0xf2, 0x23, 0x48, 0x2c,
    0x83, 0x67, 0xa1, 0x43, 0x83, 0x7e, 0xf3, 0x39, 0x35, 0x5a, 0x7d, 0x5b, 0x89, 0x3f, 0x1d,
    0xe3, 0x8b, 0x33, 0x90, 0xfc, 0x5b, 0xd6, 0xaa, 0xd5, 0xf2, 0x10, 0x54, 0x4d, 0x56, 0xdd,
    0xa6, 0x38, 0x83, 0xac, 0x79, 0x9e, 0xd7, 0xe9, 0xad, 0xf5, 0x95, 0x47, 0xa2, 0x7e, 0xa3,
    0x17, 0x5f, 0x58, 0x4f, 0xd7, 0x8a, 0x37, 0xef, 0xfa, 0x88, 0x4f, 0xc6, 0x1c, 0x98, 0xc4,
    0x47, 0xf4, 0xcd, 0x9a, 0x33, 0x35, 0x72, 0xb3, 0xb1, 0x69, 0xc6, 0xfe, 0x86, 0xd2, 0x2f,
    0xa7, 0x6b, 0x29, 0xcf, 0xe3, 0xda, 0x82, 0xcc, 0xa2, 0x7c, 0x13, 0x90, 0x2d, 0x42, 0x7e,
    0xf6, 0xa3, 0x6e, 0xa3, 0x16, 0x3d, 0x6c, 0xf7, 0x25, 0x35, 0xf3, 0x80, 0x56, 0xa3, 0xd3,
    0xd8, 0xbc, 0x69, 0x9e, 0xa2, 0xdd, 0xe7, 0x98, 0xe6, 0x09, 0x00, 0x2f, 0x9e, 0xc4, 0x28,
    0x54, 0x1e, 0x7a, 0xdf, 0x81, 0xf9, 0x56, 0xfd, 0x3a, 0xf6, 0x99, 0x18, 0x8c, 0x07, 0x17,
    0x52, 0xff, 0x58, 0xab, 0x4d, 0xbf, 0x8e, 0x6b, 0x1e, 0xd6, 0xab, 0x94, 0xbd, 0xa5, 0x5f,
    0xaf, 0xbd, 0x4f, 0xf1, 0xb7, 0x66, 0x8a, 0x6f, 0xd2, 0xd6, 0x89, 0xb2, 0x3a, 0x54, 0x3a,
    0x75, 0xf9, 0x81, 0x81, 0x86, 0x13, 0x00, 0x7e, 0x3e, 0xdc, 0x27, 0xe9, 0xd8, 0xc2, 0xd7,
    0xcd, 0x63, 0x44, 0xb9, 0xdc, 0xa1, 0x1a, 0xea, 0x3a, 0xef, 0x34, 0xef, 0x7e, 0xce, 0x7e,
    0xbb, 0x09, 0x74, 0x3b, 0xa3, 0x5c, 0x58, 0xc9, 0x4b, 0xd2, 0xdf, 0x71, 0x0f, 0x02, 0xcf,
    0x4b, 0xb4, 0x7a, 0x9a, 0xe9, 0xbb, 0x66, 0x7d, 0x65, 0xf5, 0x7b, 0x6b, 0x1d, 0xba, 0x7f,
    0x8f, 0x81, 0x9e, 0x8b, 0x9f, 0xdb, 0x93, 0x21, 0xea, 0x28, 0xcc, 0xbf, 0x0f, 0x54, 0xef,
    0xde, 0x57, 0xd3, 0x4f, 0xd2, 0xd7, 0xfe, 0x06, 0x32, 0xba, 0x5f, 0x1f, 0xc2, 0x79, 0xc2,
    0x5a, 0xc3, 0x3d, 0x2a, 0xea, 0x69, 0xf0, 0x81, 0x7d, 0x93, 0xd2, 0xef, 0xc9, 0x5a, 0x89,
    0xda, 0xf6, 0xda, 0xd9, 0x5c, 0x6b, 0x3d, 0x46, 0x27, 0xbf, 0x35, 0xd4, 0x7e, 0xf6, 0x8b,
    0xcf, 0xda, 0xcf, 0x85, 0x3d, 0x6a, 0xed, 0xe7, 0x6e, 0xbf, 0x0b, 0xad, 0x98, 0x7c, 0x5b,
    0x7f, 0x40, 0xcf, 0xd1, 0xd4, 0x6a, 0xfe, 0x99, 0x72, 0x2b, 0xf5, 0x29, 0x56, 0xeb, 0xaf,
    0x4e, 0x14, 0x88, 0xf3, 0xd1, 0xf4, 0xc3, 0x2b, 0xf6, 0x70, 0x9d, 0xdf, 0xbf, 0x35, 0xe9,
    0x05, 0x39, 0x98, 0xa9, 0x2d, 0x2b, 0xe4, 0xee, 0x53, 0xeb, 0x7e, 0xfb, 0x42, 0xd8, 0xe0,
    0xd1, 0x2b, 0xc5, 0x7a, 0x73, 0x5f, 0x39, 0xf5, 0x3d, 0xf7, 0xfb, 0x5a, 0x80, 0x42, 0xde,
    0x03, 0x9f, 0xac, 0x80, 0x7d, 0xb9, 0xb6, 0xec, 0x83, 0x25, 0x4f, 0x31, 0xb3, 0xe6, 0x8a,
    0x4f, 0xcb, 0x0d, 0xd3, 0xe6, 0x84, 0xb9, 0x87, 0x58, 0x23, 0x4b, 0xd1, 0xb4, 0xe8, 0x07,
    0xa3, 0x71, 0x5b, 0x9d, 0x4d, 0xc4, 0x84, 0x22, 0x4e, 0x14, 0xed, 0x2b, 0xd8, 0xf3, 0xb6,
    0x57, 0x96, 0xec, 0x81, 0xf8, 0x9e, 0x2e, 0xeb, 0x48, 0x4f, 0x35, 0x78, 0xff, 0x48, 0xab,
    0x13, 0x4d, 0xfc, 0xd6, 0x4b, 0xf0, 0x5f, 0x9b, 0x4f, 0x92, 0xf2, 0x45, 0xfd, 0x2e, 0x11,
    0x66, 0xfb, 0x36, 0xda, 0xef, 0xb6, 0x95, 0xb7, 0x1b, 0xf5, 0xc9, 0xec, 0x7c, 0x47, 0xd9,
    0x15, 0x0d, 0x83, 0xaa, 0xd7, 0xbe, 0xfc, 0x57, 0x36, 0x93, 0x07, 0x72, 0x6e, 0x8d, 0x18,
    0x5c, 0x0f, 0x17, 0x55, 0x0f, 0x2f, 0x97, 0x93, 0x51, 0x96, 0x93, 0xad, 0xfb, 0xec, 0x8b,
    0xd6, 0x68, 0x39, 0x4f, 0x63, 0x95, 0x4a, 0x4c, 0xf9, 0x86, 0xa1, 0xcc, 0xcf, 0xfd, 0x51,
    0x4f, 0xcc, 0x71, 0x79, 0x4f, 0x7b, 0x2a, 0xb5, 0x62, 0xd5, 0x2f, 0xab, 0x7f, 0xfe, 0xa6,
    0x46, 0xb7, 0xf1, 0xbc, 0xa8, 0xf9, 0xbf, 0x54, 0x9d, 0xb1, 0x50, 0x62, 0xec, 0xb5, 0x1c,
    0x34, 0xcf, 0x47, 0xe9, 0x24, 0x5a, 0x4d, 0xe0, 0x72, 0x5f, 0x0c, 0xf1, 0x29, 0xf3, 0x9d,
    0x56, 0x77, 0xd5, 0x71, 0xfd, 0xf2, 0x5b, 0xa1, 0x59, 0xb3, 0xb2, 0x5f, 0x53, 0xf3, 0xd2,
    0xcc, 0x52, 0x4b, 0x56, 0x8d, 0x15, 0xca, 0xda, 0xc6, 0xaa, 0x57, 0x57, 0x89, 0xfe, 0x62,
    0x57, 0x31, 0xce, 0xc7, 0x32, 0x47, 0x91, 0x47, 0x59, 0xde, 0x53, 0xdc, 0xf2, 0x5e, 0x29,
    0x17, 0x64, 0x85, 0x76, 0x1e, 0xe9, 0xba, 0x05, 0x8f, 0x7f, 0xc4, 0x7a, 0xd6, 0x95, 0x6b,
    0x96, 0xda, 0xf6, 0x4e, 0xf4, 0x8e, 0xae, 0x14, 0xd4, 0x8e, 0xd4, 0x6b, 0xf4, 0x08, 0x5a,
    0xf9, 0x89, 0xa6, 0x4c, 0x36, 0x75, 0xf0, 0x4f, 0xa3, 0x9e, 0x41, 0xd7, 0x05, 0x3a, 0x6e,
    0x29, 0x47, 0xa0, 0x4a, 0x18, 0x01, 0x99, 0x87, 0x5c, 0x01, 0x1b, 0x02, 0xe9, 0x65, 0xad,
    0xbd, 0x19, 0xc7, 0xea, 0x17, 0xfb, 0x11, 0x8c, 0x38, 0x91, 0x5a, 0x5b, 0xb6, 0x97, 0xc3,
    0xd4, 0xd1, 0xbe, 0x5f, 0x31, 0xf2, 0xeb, 0x59, 0xef, 0xd7, 0x78, 0x26, 0xdc, 0xdb, 0x6f,
    0xf2, 0xf3, 0x38, 0x9d, 0x34, 0x27, 0xc1, 0xa3, 0x5e, 0x58, 0xd1, 0x68, 0x7d, 0x4e, 0x6b,
    0x4a, 0x1d, 0xc9, 0xb0, 0x27, 0x6c, 0x35, 0x08, 0xcc, 0x98, 0x5c, 0x21, 0x8f, 0x26, 0xfd,
    0x63, 0x43, 0x92, 0x8e, 0x02, 0x33, 0x06, 0x36, 0x04, 0x7d, 0x6a, 0x38, 0x0d, 0x1d, 0xe0,
    0x34, 0x2f, 0x33, 0xbe, 0xa3, 0xe5, 0xf6, 0xb3, 0x8e, 0x47, 0xb5, 0x41, 0x54, 0xaf, 0x6c,
    0x86, 0x87, 0xad, 0xd6, 0x41, 0xfa, 0xf7, 0xb2, 0x9c, 0xdc, 0x9b, 0x7a, 0x64, 0x94, 0xef,
    0xc1, 0xbb, 0xc5, 0x7b, 0x57, 0xde, 0xef, 0xe2, 0xbb, 0x78, 0x9b, 0xbc, 0xf7, 0xd6, 0x38,
    0x9d, 0xff, 0xb3, 0xfd, 0x8e, 0x39, 0xcb, 0x58, 0x5b, 0x0b, 0xf1, 0x08, 0x59, 0xdb, 0xd0,
    0x39, 0x5c, 0x8c, 0x7b, 0x23, 0x2f, 0x58, 0xd4, 0xc2, 0xfd, 0x5c, 0xdc, 0xcd, 0xcc, 0xfd,
    0xc3, 0x9c, 0x14, 0x3d, 0x76, 0x29, 0xef, 0x12, 0xd6, 0xc5, 0x8c, 0xa9, 0x1e, 0x6d, 0x73,
    0x9f, 0x7a, 0x5f, 0x58, 0xc3, 0x15, 0x7b, 0x04, 0x69, 0xfe, 0x8f, 0x4d, 0x34, 0x11, 0x77,
    0x7a, 0xc4, 0xbb, 0x54, 0xd3, 0x46, 0x7c, 0x1b, 0xfe, 0xe6, 0xad, 0x29, 0x5e, 0x45, 0xb1,
    0x04, 0xed, 0x26, 0x3c, 0x5f, 0xcc, 0xf9, 0x01, 0xb9, 0xed, 0xe4, 0x7a, 0xb5, 0xc9, 0x7a,
    0x69, 0xad, 0x5c, 0xee, 0x7b, 0x0e, 0xe7, 0x8c, 0x35, 0x76, 0x6c, 0x31, 0xad, 0x92, 0x3a,
    0x38, 0x96, 0x3f, 0xe6, 0x7c, 0x17, 0x1f, 0xe5, 0x4d, 0x0b, 0xf4, 0x27, 0xec, 0x5b, 0xb2,
    0x95, 0x5d, 0x85, 0xbe, 0x1a, 0x8c, 0xf3, 0xe5, 0xf4, 0xfc, 0xef, 0xcf, 0x47, 0xe4, 0xf0,
    0x7a, 0x16, 0x5f, 0xac, 0xe7, 0x20, 0xfc, 0x17, 0xbd, 0x3b, 0xaf, 0xfd, 0x66, 0xf8, 0x23,
    0xff, 0xec, 0x17, 0xbb, 0xe4, 0x87, 0xac, 0x03, 0xf5, 0x22, 0xfa, 0x36, 0x88, 0x7e, 0xda,
    0x29, 0x66, 0x21, 0xb5, 0xeb, 0x4b, 0x62, 0x7b, 0x9d, 0x85, 0x53, 0x3f, 0x61, 0x3f, 0x32,
    0x6e, 0x40, 0xbd, 0x79, 0x2f, 0x9a, 0x9d, 0x9b, 0xe3, 0x29, 0x2a, 0xce, 0x2b, 0xe9, 0xdf,
    0x80, 0xac, 0x72, 0x2b, 0xf3, 0x69, 0x1f, 0x6c, 0x1c, 0xec, 0xf7, 0xcb, 0x3d, 0x1b, 0x9f,
    0xbf, 0x9f, 0x34, 0x7f, 0x03, 0xfc, 0xfd, 0xa7, 0xe8, 0x7b, 0xa8, 0x6a, 0xee, 0xfc, 0xad,
    0xee, 0x92, 0xf7, 0xe6, 0x7f, 0x9e, 0x73, 0x3d, 0x76, 0xae, 0xc3, 0x83, 0xa4, 0x7e, 0x45,
    0x37, 0xaf, 0xa8, 0xdf, 0x51, 0x5c, 0x1b, 0x1c, 0x67, 0x55, 0xff, 0x77, 0xef, 0xd2, 0xa9,
    0xec, 0x2f, 0x79, 0x07, 0xfd, 0xc9, 0xc8, 0x71, 0x8a, 0x1f, 0x38, 0xa6, 0x20, 0xea, 0x1d,
    0x7b, 0x7b, 0xcd, 0x97, 0x2a, 0x62, 0x18, 0xc5, 0xb5, 0x21, 0xbf, 0xde, 0x83, 0x2a, 0xd8,
    0x93, 0xaf, 0xed, 0x70, 0x87, 0xf5, 0xd2, 0xc2, 0x35, 0xd9, 0xd4, 0x53, 0x2f, 0xc4, 0xf8,
    0xe6, 0x25, 0xe0, 0x5d, 0xc8, 0xe7, 0xdc, 0xae, 0xd7, 0x8b, 0x5d, 0xcc, 0xbd, 0x42, 0x2a,
    0xf7, 0xda, 0x3f, 0xb9, 0x3e, 0x3d, 0xdb, 0x0b, 0x36, 0x9b, 0x2c, 0xeb, 0x97, 0xf9, 0x5b,
    0xd0, 0x9a, 0xf5, 0x3c, 0xba, 0x66, 0xcd, 0x32, 0x3c, 0x9b, 0x5c, 0x6f, 0x77, 0x9d, 0x76,
    0xe7, 0x64, 0x45, 0x9b, 0xf3, 0x15, 0xbd, 0xa7, 0x35, 0xde, 0x0d, 0xff, 0xf5, 0x1d, 0xdc,
    0xca, 0x6d, 0xc7, 0xfb, 0x7e, 0x81, 0xbb, 0x7d, 0xc2, 0xfa, 0x56, 0x19, 0x1c, 0x88, 0xe6,
    0x1b, 0xaa, 0xbe, 0x8a, 0xd3, 0x56, 0x5f, 0xfb, 0xb6, 0xbf, 0xec, 0x19, 0xb5, 0x09, 0xef,
    0x5e, 0xf1, 0x76, 0x9f, 0x8d, 0xac, 0x75, 0xa8, 0xef, 0xbb, 0xf4, 0x63, 0xdb, 0x7a, 0x55,
    0x1f, 0x74, 0x51, 0x67, 0xa2, 0x37, 0x76, 0x1a, 0xa6, 0x0f, 0xfd, 0x8a, 0xfe, 0xe7, 0x9a,
    0x82, 0xf1, 0xb0, 0x97, 0x26, 0xd6, 0x50, 0x40, 0x3e, 0x88, 0x38, 0x9b, 0xd3, 0x9c, 0xf3,
    0x3e, 0x7a, 0x9d, 0x2d, 0xf9, 0x53, 0x05, 0x76, 0x1e, 0xfb, 0x24, 0xa3, 0x1e, 0x0c, 0xe7,
    0x75, 0x01, 0xd0, 0x17, 0xb9, 0x5f, 0xa0, 0x2e, 0xdd, 0xf2, 0xff, 0xc2, 0x9e, 0x88, 0xe3,
    0x5d, 0xd6, 0x95, 0xc3, 0xbe, 0x6b, 0x66, 0x4f, 0xcf, 0x96, 0xea, 0x51, 0xfa, 0x6e, 0xfe,
    0xaa, 0xbe, 0x9c, 0x76, 0x1b, 0x2e, 0xd4, 0xd6, 0xdd, 0x11, 0x3d, 0x0e, 0x81, 0x27, 0x48,
    0x5e, 0xad, 0x13, 0x73, 0x4b, 0x1f, 0x42, 0xac, 0x13, 0x74, 0x25, 0xdd, 0xfb, 0xc4, 0x4b,
    0xdf, 0x9e, 0xb1, 0xf7, 0xf0, 0xbd, 0xcf, 0x78, 0x3a, 0xe4, 0x7a, 0x01, 0x15, 0x91, 0x17,
    0xe9, 0x27, 0xa1, 0xbe, 0x3f, 0x7f, 0x80, 0x2e, 0x67, 0x1d, 0xcc, 0x61, 0x76, 0x80, 0xa7,
    0x97, 0xd9, 0xb4, 0xf9, 0x89, 0xf1, 0x68, 0x9c, 0xeb, 0x13, 0xd8, 0xaa, 0xec, 0x9f, 0x46,
    0x85, 0x6f, 0x99, 0x31, 0x14, 0xcc, 0xb9, 0x14, 0x78, 0x2f, 0x4f, 0xca, 0x88, 0x96, 0xb1,
    0x2e, 0xf1, 0xe1, 0x9b, 0xcf, 0x4f, 0xac, 0xfb, 0xa6, 0xf3, 0x93, 0x3f, 0xab, 0xba, 0xdc,
    0xe3, 0x01, 0x63, 0x2d, 0x20, 0xdf, 0x9a, 0xa0, 0xbb, 0xca, 0xbe, 0xee, 0x64, 0xdf, 0x61,
    0x92, 0x24, 0x0a, 0x42, 0xa5, 0x0f, 0xa3, 0x0e, 0xa6, 0xef, 0x2b, 0x9c, 0xd3, 0x98, 0xef,
    0xd6, 0xb7, 0xae, 0x6d, 0x9e, 0x8f, 0xac, 0x23, 0xb1, 0x40, 0x1f, 0x4c, 0xcd, 0x7f, 0xe3,
    0xb8, 0x37, 0x72, 0x66, 0x7b, 0xd7, 0xf5, 0xa1, 0x75, 0x11, 0x9f, 0x46, 0x7d, 0x15, 0x76,
    0xaa, 0x77, 0xff, 0x1f, 0xcf, 0x15, 0xf7, 0x5e, 0xc4, 0x71, 0x63, 0xe4, 0xe1, 0x5d, 0xd4,
    0x03, 0xac, 0x8b, 0x2e, 0xf3, 0x9f, 0xfe, 0x57, 0xce, 0x83, 0xf9, 0x28, 0xd7, 0x88, 0x98,
    0xdc, 0xf8, 0xcf, 0xd0, 0xab, 0x46, 0x93, 0x62, 0x6c, 0xd6, 0xfb, 0xf1, 0xdd, 0x30, 0xf1,
    0x1a, 0x3d, 0xac, 0xe1, 0xa5, 0xdf, 0xb7, 0x26, 0xdc, 0x23, 0x94, 0xeb, 0x68, 0x63, 0x28,
    0x80, 0xe6, 0x25, 0x7b, 0x22, 0xe9, 0x34, 0xde, 0xa6, 0xfe, 0xd3, 0x58, 0x6b, 0xf7, 0xf9,
    0x2f, 0x74, 0x93, 0x2a, 0xe2, 0x8b, 0xcc, 0xf9, 0x90, 0xbf, 0x93, 0x68, 0xec, 0xcb, 0xf8,
    0xd6, 0x74, 0xd6, 0xf5, 0xf3, 0x5c, 0xee, 0xb7, 0x35, 0xaf, 0x81, 0x7a, 0x48, 0x6a, 0xfd,
    0x92, 0xfe, 0x52, 0x97, 0x7f, 0xa6, 0xcf, 0x93, 0x79, 0xb4, 0xe8, 0x5f, 0x34, 0xc7, 0xbb,
    0xe5, 0x1e, 0x58, 0x7f, 0x9e, 0x47, 0x18, 0xb2, 0x4b, 0xef, 0x05, 0x81, 0xfd, 0xb2, 0xd8,
    0xe5, 0x3e, 0x62, 0xa1, 0x29, 0xa7, 0x54, 0x2d, 0x16, 0xfd, 0xfb, 0xef, 0x82, 0x2f, 0xb0,
    0x7c, 0xa1, 0x7d, 0x16, 0x35, 0xdf, 0x0a, 0xc7, 0xba, 0xbe, 0xaf, 0x72, 0x81, 0x6e, 0x3b,
    0xdd, 0xc6, 0xd5, 0xf8, 0xa8, 0xd4, 0x6b, 0x3a, 0xee, 0x45, 0xdf, 0x2f, 0x1f, 0xf5, 0xe5,
    0xcd, 0x9e, 0x28, 0xe1, 0x75, 0x6d, 0xa1, 0xbf, 0x59, 0x6a, 0xb0, 0x32, 0x9f, 0x48, 0x48,
    0x0e, 0xe9, 0x1e, 0x86, 0xae, 0xb2, 0x5f, 0x1d, 0xd8, 0x07, 0x57, 0x97, 0x2f, 0xee, 0x25,
    0x86, 0xa8, 0xc3, 0x68, 0xf1, 0x9f, 0x21, 0x8f, 0x1d, 0x1e, 0xe3, 0x6f, 0x7c, 0x42, 0x1f,
    0xd6, 0x88, 0x00, 0x3b, 0x1f, 0xeb, 0x46, 0x0d, 0x27, 0x7d, 0x8c, 0x05, 0x69, 0x35, 0x62,
    0x7f, 0x57, 0xa9, 0x1e, 0xab, 0xd7, 0x8b, 0xdd, 0x69, 0xef, 0x9e, 0xd7, 0xa9, 0xbe, 0xda,
    0x69, 0xf4, 0x16, 0x95, 0x35, 0x6d, 0x80, 0x7f, 0x5c, 0x8c, 0x7a, 0xb4, 0x05, 0x75, 0xd0,
    0xac, 0xd3, 0xb1, 0x1e, 0x1c, 0xca, 0x9b, 0x41, 0x5e, 0x24, 0xc7, 0xc8, 0xd4, 0xac, 0x2b,
    0x43, 0x2c, 0x63, 0xe3, 0xcf, 0xe3, 0xd5, 0x0f, 0xae, 0x1d, 0xb0, 0xc4, 0x5c, 0x8d, 0xdd,
    0x8a, 0x3d, 0x21, 0x9a, 0xb2, 0x9f, 0xec, 0x0a, 0xe3, 0xe3, 0xcb, 0x5a, 0x13, 0x65, 0xea,
    0xe6, 0x1f, 0xcf, 0xc4, 0xdd, 0xa7, 0x1c, 0xa2, 0xea, 0x9d, 0xa4, 0x47, 0xac, 0x3d, 0xf3,
    0xbd, 0xb7, 0xe1, 0x2e, 0x54, 0xbf, 0x90, 0x1e, 0x44, 0x7f, 0xd6, 0xb7, 0xb2, 0x18, 0xe6,
    0x51, 0x75, 0x41, 0xce, 0xbb, 0xef, 0x54, 0xcf, 0x62, 0xe2, 0x77, 0x51, 0x87, 0x43, 0xda,
    0x28, 0x67, 0x28, 0x79, 0x15, 0xbe, 0xa3, 0x82, 0x7e, 0xc6, 0x8c, 0x45, 0x94, 0x7d, 0x9e,
    0x93, 0x54, 0x6b, 0x56, 0x90, 0x17, 0x91, 0xad, 0x87, 0xf5, 0xa4, 0x44, 0xff, 0x1d, 0xee,
    0xec, 0xaf, 0x97, 0xd5, 0xf7, 0x14, 0xab, 0x84, 0xbd, 0x78, 0xbb, 0xc9, 0x36, 0xad, 0x33,
    0xa9, 0xd7, 0x64, 0x46, 0xdb, 0x10, 0x7b, 0xa5, 0x20, 0x56, 0xaa, 0x4e, 0xd8, 0xea, 0x87,
    0xe9, 0xd6, 0xaa, 0x57, 0xb1, 0xf1, 0x2e, 0x63, 0x6d, 0x18, 0x43, 0x0d, 0xb4, 0x37, 0x69,
    0xd1, 0xa6, 0xa5, 0xfa, 0x57, 0x13, 0x1c, 0xab, 0xf7, 0x43, 0x7d, 0xb7, 0xdd, 0xab, 0x78,
    0x7f, 0x9e, 0x5e, 0x7b, 0x30, 0xd7, 0xa8, 0x1d, 0xb8, 0xc1, 0x01, 0xb1, 0xd5, 0xc3, 0x69,
    0x9e, 0x4f, 0xbe, 0xd6, 0xdc, 0x13, 0x40, 0x8d, 0x21, 0xcf, 0xe2, 0x47, 0xaf, 0x7d, 0xff,
    0x05, 0x71, 0xeb, 0xa9, 0x75, 0xff, 0xe5, 0x3b, 0xbd, 0xf7, 0x5e, 0xbb, 0xff, 0x30, 0x54,
    0xb2, 0xfb, 0x0a, 0xf5, 0x31, 0x6c, 0xdd, 0xdd, 0x38, 0xa6, 0xfb, 0x30, 0xdc, 0x7c, 0xae,
    0x5b, 0x1a, 0xf7, 0xc2, 0xe3, 0xfa, 0xfa, 0xb8, 0xd8, 0x7f, 0xdb, 0xe9, 0xb5, 0x56, 0x5f,
    0x8d, 0xdb, 0xe7, 0x71, 0x1d, 0x1a, 0xd7, 0xe1, 0x71, 0x43, 0xfa, 0x9d, 0xc7, 0xdf, 0xaa,
    0xef, 0xd6, 0xfa, 0xb7, 0xce, 0x83, 0xf6, 0xf0, 0x0e, 0xbe, 0x75, 0xbe, 0xe9, 0x5b, 0x1d,
    0x23, 0x71, 0x82, 0x18, 0x0a, 0xaf, 0x13, 0xb7, 0x98, 0x26, 0xef, 0xbf, 0xf0, 0x3b, 0x14,
    0xa7, 0x35, 0x52, 0x4d, 0xab, 0xb3, 0xd4, 0x05, 0xd2, 0xb3, 0x18, 0x7e, 0x3e, 0x8f, 0x41,
    0xb6, 0x41, 0x7f, 0xde, 0x7a, 0xc3, 0x10, 0xee, 0xde, 0xd3, 0xa8, 0xd9, 0x04, 0x5d, 0xf8,
    0x6a, 0xe0, 0xa1, 0x8d, 0x7a, 0x04, 0xda, 0xad, 0xf7, 0xb4, 0x7e, 0xd7, 0x43, 0xf4, 0x75,
    0xc3, 0x04, 0x68, 0xf2, 0x0e, 0xd6, 0xc1, 0x77, 0xb1, 0x3d, 0xf8, 0xc4, 0x9f, 0xf1, 0xce,
    0x02, 0xfe, 0x36, 0xc6, 0x19, 0x84, 0x4c, 0x15, 0x3c, 0x58, 0xc3, 0xe1, 0x71, 0x6f, 0x02,
    0xbb, 0xee, 0x71, 0x1d, 0x8f, 0x24, 0xd6, 0x6a, 0x6e, 0x91, 0x4e, 0x3f, 0xed, 0xbf, 0xbf,
    0xaf, 0x43, 0xdd, 0x8f, 0x10, 0xb1, 0x64, 0x0e, 0xf3, 0xf8, 0x39, 0xdf, 0x45, 0xc3, 0x1e,
    0xf8, 0x42, 0xad, 0x3e, 0x59, 0x7a, 0xbf, 0xef, 0xcf, 0xa0, 0xf9, 0x64, 0xb0, 0x9a, 0xba,
    0xc1, 0xfb, 0x8c, 0xc7, 0x19, 0xec, 0x85, 0x0d, 0x47, 0x48, 0xb4, 0xee, 0x1e, 0xa9, 0x6f,
    0xeb, 0x9e, 0xb0, 0x34, 0xe3, 0x49, 0xd2, 0x7a, 0x1c, 0x89, 0x9e, 0xcd, 0x93, 0x0a, 0xf0,
    0x2d, 0xe1, 0x86, 0x45, 0xdd, 0x36, 0x5e, 0x13, 0xce, 0xfd, 0x5c, 0x2f, 0xda, 0x0f, 0xe0,
    0x54, 0xc7, 0xe4, 0xc0, 0x75, 0xdf, 0x84, 0x2f, 0x40, 0xd4, 0x34, 0x7e, 0x99, 0x34, 0x2a,
    0x2f, 0xa0, 0xbe, 0xe1, 0xe4, 0xdf, 0x01, 0x9d, 0x44, 0xab, 0xe9, 0x14, 0xed, 0x1a, 0x60,
    0x36, 0x6a, 0x8c, 0xd9, 0xff, 0x03, 0xf7, 0x5a, 0xd5, 0x81, 0xd2, 0xef, 0x37, 0xec, 0x4f,
    0xdd, 0x4e, 0xe9, 0xca, 0x72, 0x57, 0x37, 0xf7, 0xc7, 0x5e, 0xc7, 0xe8, 0x1d, 0xf9, 0xba,
    0x08, 0x56, 0x69, 0xcf, 0xf0, 0x7b, 0xc2, 0x56, 0xc2, 0x1d, 0x3e, 0x7b, 0x40, 0xdf, 0xc3,
    0x33, 0x94, 0xd8, 0xd5, 0x47, 0xed, 0x3e, 0xa6, 0xe3, 0x19, 0xf7, 0x2b, 0x47, 0xb7, 0xcc,
    0x53, 0x9a, 0xf5, 0xc6, 0x9d, 0x33, 0xdc, 0xad, 0x8f, 0x92, 0xb1, 0xcf, 0x3c, 0xb6, 0xc7,
    0xb4, 0x43, 0x63, 0x57, 0xf8, 0x77, 0x11, 0xff, 0x8e, 0xbf, 0x77, 0x77, 0xcd, 0xf7, 0x06,
    0x58, 0x0f, 0xd0, 0xc5, 0xa0, 0xf0, 0x7b, 0xcd, 0x56, 0x34, 0xf5, 0x6b, 0x20, 0xd7, 0x3f,
    0xe7, 0x6c, 0xf8, 0x8c, 0x07, 0xe3, 0x88, 0xef, 0x2b, 0xaf, 0x15, 0xf5, 0x68, 0x8c, 0xdf,
    0xbf, 0xf5, 0xf7, 0x7b, 0x98, 0xe5, 0x21, 0xb9, 0xb3, 0xd1, 0xf8, 0xc5, 0x73, 0xca, 0x2f,
    0x83, 0x4e, 0x31, 0xbf, 0xc8, 0xf3, 0x21, 0xa2, 0x01, 0x8d, 0xdf, 0x65, 0xf9, 0x48, 0xf2,
    0xd2, 0x7d, 0x07, 0xd9, 0x90, 0xc5, 0x66, 0xeb, 0xf7, 0x5d, 0xf0, 0xd4, 0xa0, 0x72, 0x18,
    0x31, 0x57, 0x85, 0xf7, 0x1e, 0x7d, 0xdf, 0xfe, 0x9a, 0xee, 0xd1, 0xa6, 0x29, 0x64, 0xbb,
    0xd7, 0xf0, 0xa1, 0x09, 0x7a, 0x91, 0xb7, 0x16, 0xf5, 0x08, 0xdf, 0x51, 0xce, 0x23, 0xa6,
    0xc1, 0xb9, 0x4d, 0xd8, 0x0b, 0xd5, 0x89, 0x11, 0xff, 0x48, 0xf6, 0x31, 0xe6, 0x20, 0x24,
    0x73, 0xf5, 0x56, 0xfe, 0x0e, 0xec, 0x8b, 0x2a, 0x63, 0x8d, 0xb1, 0x2e, 0x0f, 0x8c, 0x91,
    0x3d, 0xdd, 0x86, 0xf1, 0x49, 0xc7, 0x40, 0xfd, 0x4e, 0xd4, 0x29, 0x44, 0x5d, 0x8f, 0xea,
    0x52, 0x9f, 0x04, 0xd6, 0x5b, 0x8f, 0x68, 0x87, 0x93, 0x3f, 0xbd, 0x7c, 0x3f, 0xee, 0x06,
    0x56, 0x9c, 0xa5, 0x3e, 0x3f, 0xe5, 0x4d, 0xb9, 0xa8, 0xc3, 0x9c, 0x03, 0x1c, 0xb7, 0x9d,
    0xc7, 0x59, 0xf6, 0xc4, 0x37, 0xf9, 0x4a, 0x0d, 0xd6, 0x45, 0x3e, 0x5a, 0xb1, 0x1f, 0xcd,
    0x7e, 0x90, 0xde, 0x03, 0x74, 0x98, 0xee, 0xc7, 0x43, 0x0c, 0xf7, 0xe8, 0x53, 0xd6, 0x46,
    0xb1, 0x60, 0x5d, 0xc3, 0x23, 0xea, 0x49, 0xb8, 0x9e, 0x3c, 0x0d, 0x6b, 0x74, 0x44, 0xf9,
    0x61, 0xf1, 0xf9, 0x4a, 0x5f, 0x96, 0xf3, 0x75, 0x82, 0xdf, 0xb5, 0x80, 0x66, 0xa9, 0x46,
    0xe1, 0xeb, 0xba, 0xfd, 0xd3, 0xa2, 0xfa, 0x05, 0xcf, 0xde, 0x15, 0xd4, 0x0f, 0xf3, 0x31,
    0x7e, 0x5e, 0xd0, 0x3e, 0x53, 0xde, 0x5e, 0x22, 0xea, 0x46, 0x32, 0xef, 0xec, 0x60, 0xcd,
    0xc2, 0x26, 0xad, 0x94, 0xce, 0x36, 0xd2, 0x6a, 0x7a, 0x12, 0xfe, 0x2f, 0xd9, 0xb3, 0x4f,
    0x93, 0xfa, 0x88, 0x3a, 0xc9, 0x10, 0xfe, 0xb6, 0x8d, 0x08, 0x17, 0x97, 0xd6, 0x7c, 0xb3,
    0x4f, 0xd4, 0x7b, 0xc9, 0x60, 0xbe, 0x8d, 0xbc, 0x27, 0xd6, 0xc3, 0xbd, 0x60, 0x36, 0xf5,
    0x2f, 0x2f, 0xb9, 0x75, 0xe5, 0xf4, 0x5f, 0xc4, 0x4d, 0x20, 0x16, 0x18, 0x6b, 0x97, 0x8b,
    0x18, 0x3c, 0x27, 0xb0, 0x59, 0x93, 0x7e, 0xaf, 0x7b, 0x4c, 0xb0, 0x06, 0xe7, 0xa2, 0x75,
    0xf4, 0xdc, 0xaf, 0x00, 0x9d, 0x1f, 0x30, 0x67, 0x0f, 0xe8, 0x82, 0x6c, 0x4b, 0x19, 0xfb,
    0x62, 0x5f, 0xc8, 0x1a, 0xf6, 0x6a, 0xa1, 0xf3, 0xfe, 0x20, 0xbf, 0x39, 0xe8, 0x9e, 0x4f,
    0x61, 0x47, 0x91, 0x9d, 0xad, 0xd5, 0x38, 0xa3, 0xfe, 0x7c, 0x1d, 0x65, 0x77, 0x60, 0xac,
    0xc6, 0x4c, 0xc9, 0x7f, 0x47, 0xb6, 0xb8, 0xc0, 0x1f, 0x8e, 0x70, 0xfd, 0x18, 0xf7, 0x23,
    0xc7, 0xf5, 0xfa, 0xb5, 0x18, 0x05, 0xc6, 0x2f, 0x74, 0x4c, 0xa8, 0x1e, 0xcb, 0x78, 0x12,
    0x92, 0x65, 0x95, 0xfe, 0x7d, 0x7b, 0x1c, 0x44, 0x1f, 0x47, 0xcc, 0x8d, 0xe3, 0x1d, 0x32,
    0xaa, 0xe5, 0x80, 0x88, 0xb8, 0x89, 0xaa, 0x63, 0x46, 0x3a, 0x37, 0xe6, 0x06, 0x4d, 0xee,
    0x96, 0x71, 0x64, 0x0c, 0x35, 0x8d, 0x75, 0xb0, 0xcf, 0x06, 0xf6, 0x8e, 0x30, 0x4c, 0xa0,
    0x0b, 0x0c, 0x46, 0xf5, 0x1e, 0x31, 0x2c, 0x09, 0xbd, 0xc7, 0xfe, 0x4b, 0x7c, 0xb6, 0xaf,
    0x7f, 0x93, 0xaf, 0x7a, 0x06, 0xf3, 0x21, 0xea, 0xbe, 0x0a, 0xff, 0x7c, 0xa7, 0x49, 0xf5,
    0xe7, 0x0f, 0xbe, 0x03, 0xe7, 0xfa, 0xe3, 0xe9, 0xdc, 0xd8, 0xa3, 0xdd, 0x18, 0x4f, 0x7a,
    0xcf, 0xc6, 0xf1, 0xa9, 0xea, 0xd6, 0x24, 0x96, 0xf3, 0xa9, 0x9a, 0x60, 0x1f, 0x44, 0xb8,
    0x3f, 0x2f, 0x83, 0xd7, 0x66, 0x29, 0x7e, 0x9b, 0xd7, 0xed, 0x0d, 0x65, 0xcc, 0x4f, 0x9f,
    0xdb, 0x40, 0xf5, 0x5f, 0xd1, 0xd6, 0xb0, 0x69, 0xb2, 0xf8, 0x21, 0x89, 0x75, 0x12, 0x31,
    0x1d, 0x23, 0xc7, 0x7d, 0xa9, 0x45, 0xdd, 0x65, 0xf5, 0x0d, 0xc2, 0x10, 0xeb, 0x58, 0x2f,
    0xee, 0x5a, 0xf5, 0x76, 0x2e, 0x9a, 0xd7, 0x5d, 0xae, 0xfe, 0x6f, 0x11, 0x8e, 0xb4, 0x78,
    0x87, 0x36, 0xac, 0xfc, 0x05, 0xe4, 0xcd, 0x2b, 0xf0, 0xe2, 0x4b, 0xb6, 0x47, 0x8b, 0xf9,
    0x19, 0xbb, 0x4e, 0xef, 0x02, 0x61, 0x61, 0x82, 0x0c, 0x0e, 0xf0, 0xb6, 0xfc, 0x46, 0xeb,
    0xf5, 0x18, 0xa8, 0xea, 0xfb, 0x5c, 0xb2, 0xdf, 0x3a, 0xfe, 0xcb, 0x57, 0x34, 0xcb, 0x39,
    0x22, 0xee, 0x6c, 0x8d, 0x97, 0x5f, 0xb1, 0x4f, 0x85, 0x39, 0xaa, 0x06, 0x4e, 0x42, 0xd4,
    0xc1, 0x58, 0x4b, 0x34, 0x2a, 0xc5, 0x6d, 0xf6, 0x16, 0x35, 0xc2, 0x28, 0x2a, 0x1e, 0x44,
    0x95, 0x2a, 0xc9, 0x10, 0x23, 0xd6, 0x84, 0xb5, 0x0b, 0x41, 0xdf, 0x39, 0xcc, 0x04, 0x0f,
    0x3a, 0xee, 0x83, 0x1f, 0xd4, 0x83, 0x92, 0x18, 0xd3, 0x23, 0xde, 0x85, 0xe1, 0x24, 0xa6,
    0x89, 0xc4, 0xa9, 0x97, 0xf5, 0x56, 0x91, 0x31, 0x0d, 0xbc, 0xf3, 0xc4, 0x5b, 0x3a, 0x87,
    0x28, 0x48, 0xfe, 0x1e, 0x06, 0xb1, 0x3b, 0x4e, 0x86, 0xc8, 0x4b, 0xb1, 0x8f, 0x33, 0xc8,
    0x11, 0x83, 0xe1, 0xda, 0xd2, 0xa8, 0x1b, 0x7e, 0x5f, 0xd3, 0x93, 0x71, 0x56, 0xff, 0x68,
    0x7a, 0x33, 0xf3, 0x6f, 0x3f, 0xcd, 0xf8, 0x86, 0x05, 0xdb, 0x82, 0x78, 0x42, 0x90, 0xa5,
    0x36, 0xe0, 0xdd, 0xfb, 0xd9, 0xc7, 0x28, 0xf1, 0xfa, 0xa3, 0xb0, 0xd1, 0xf4, 0x9d, 0xf0,
    0xcc, 0xd5, 0xef, 0xa7, 0x5c, 0xef, 0x60, 0x81, 0xb5, 0x76, 0xa6, 0x52, 0x7f, 0x51, 0x79,
    0x20, 0x77, 0x62, 0xfd, 0x2e, 0x09, 0x7e, 0x46, 0x79, 0x53, 0x47, 0xec, 0xf5, 0x80, 0xfd,
    0x97, 0x12, 0x17, 0x8f, 0x3a, 0x45, 0x37, 0xa1, 0x9e, 0x49, 0xa0, 0x63, 0xe0, 0xfe, 0x9e,
    0x7b, 0xd8, 0x7f, 0x9e, 0xf1, 0x17, 0x3f, 0x4f, 0xbd, 0xd6, 0x5a, 0xda, 0x3f, 0x87, 0x05,
    0x61, 0xe1, 0x7e, 0xf4, 0x2d, 0x31, 0x26, 0xc9, 0x4b, 0xa3, 0x7f, 0xdc, 0xc1, 0x8a, 0xdf,
    0x86, 0x7b, 0x41, 0xcf, 0x88, 0x99, 0x2a, 0xc2, 0x2d, 0x8a, 0xbc, 0x66, 0xc4, 0x3d, 0x04,
    0xac, 0x5e, 0xe3, 0x25, 0x44, 0xa3, 0x78, 0x87, 0x46, 0x75, 0xd0, 0xcf, 0x96, 0x6f, 0xfd,
    0xec, 0x5b, 0x80, 0x36, 0x95, 0x25, 0x2f, 0xa9, 0xc0, 0x3f, 0x58, 0x3a, 0x1f, 0x55, 0x9b,
    0xaf, 0x89, 0x7c, 0x93, 0xea, 0xa2, 0x9a, 0x6c, 0x53, 0x7f, 0x1c, 0x9d, 0x83, 0x0b, 0x77,
    0xce, 0x30, 0xd0, 0xe8, 0x6a, 0x8b, 0x7d, 0x1b, 0x10, 0x93, 0xf8, 0x8e, 0x7e, 0x9b, 0xa8,
    0xe4, 0xc6, 0x5f, 0x44, 0x2d, 0x00, 0x7e, 0xde, 0xfd, 0xdc, 0x80, 0xfe, 0x8a, 0xf9, 0x4e,
    0x77, 0xa2, 0xbf, 0x08, 0xe9, 0xce, 0x89, 0x30, 0x9e, 0xdd, 0x89, 0xfc, 0xb1, 0xec, 0x77,
    0x45, 0xdd, 0x3d, 0x7c, 0x07, 0xf9, 0x88, 0xb5, 0x5f, 0x39, 0xd7, 0x55, 0xdd, 0x2d, 0xc2,
    0x60, 0xef, 0x5d, 0xd6, 0xef, 0x31, 0x17, 0x8e, 0xe7, 0xf6, 0x4a, 0xba, 0x27, 0xde, 0x63,
    0x0d, 0xd7, 0x27, 0xb8, 0x93, 0x52, 0x5f, 0xd0, 0xb1, 0x41, 0x52, 0xb7, 0x43, 0x1f, 0xef,
    0xca, 0xa5, 0x4d, 0xeb, 0x72, 0x92, 0x2f, 0x17, 0xee, 0x29, 0xc6, 0x87, 0xba, 0x68, 0xbf,
    0xfc, 0xdb, 0x2e, 0xd5, 0x1f, 0x3e, 0x71, 0x0f, 0xd3, 0xaf, 0x2d, 0xe6, 0xdc, 0x71, 0xae,
    0x77, 0xc0, 0x1e, 0xe7, 0x34, 0xee, 0x9e, 0x75, 0x2f, 0xda, 0x23, 0xcc, 0xdf, 0xdb, 0xa1,
    0xe7, 0x33, 0x5d, 0xe9, 0xb9, 0xf8, 0x0f, 0xe1, 0x27, 0xd5, 0xd1, 0x25, 0x9c, 0xae, 0x29,
    0x29, 0x26, 0xca, 0xbf, 0x03, 0xdd, 0xb9, 0xf2, 0x49, 0x38, 0x21, 0x5e, 0x2b, 0x62, 0x1c,
    0xb9, 0xc6, 0x8f, 0xf7, 0xd6, 0xc3, 0xba, 0x28, 0xa4, 0xdb, 0x03, 0xfd, 0xee, 0xa9, 0x76,
    0x91, 0xf2, 0x1b, 0x80, 0xe6, 0xd1, 0x86, 0x46, 0xcc, 0xc6, 0x68, 0x07, 0x36, 0xd8, 0x68,
    0x3a, 0x0b, 0xc6, 0xbd, 0xb1, 0xce, 0x68, 0x15, 0xef, 0xcb, 0x13, 0xf1, 0xaf, 0x9f, 0xab,
    0x0b, 0x36, 0xff, 0x48, 0xaf, 0xdd, 0x49, 0x31, 0x99, 0xca, 0x6c, 0x83, 0xdf, 0x76, 0x4e,
    0x5f, 0x21, 0xb0, 0xe8, 0xa7, 0x39, 0xf0, 0x73, 0xb4, 0xdd, 0x9e, 0x2e, 0x03, 0xc7, 0xb3,
    0x10, 0x57, 0xea, 0xaf, 0x45, 0xb2, 0x43, 0xf5, 0xb1, 0x04, 0xdb, 0x25, 0x3a, 0xcd, 0x15,
    0x2e, 0x8e, 0xed, 0x17, 0xcb, 0x42, 0x1e, 0xd3, 0xcc, 0xf1, 0xe0, 0x77, 0x67, 0xfb, 0x24,
    0xf0, 0x7f, 0x56, 0x3c, 0xf8, 0xf7, 0xe3, 0x0d, 0x54, 0xfd, 0x03, 0xef, 0x30, 0x9b, 0xfc,
    0xcb, 0x62, 0xa5, 0xed, 0x72, 0x34, 0xf9, 0x98, 0x49, 0x9f, 0xd3, 0x36, 0x8f, 0x63, 0x96,
    0x91, 0xd8, 0xb5, 0xbc, 0xec, 0x2a, 0x99, 0x87, 0x86, 0x01, 0x80, 0x7b, 0x73, 0xba, 0x02,
    0x48, 0xcf, 0x65, 0xb1, 0xc6, 0x79, 0xd9, 0x9b, 0x9f, 0x27, 0x7c, 0x7f, 0x23, 0x6d, 0xfe,
    0xe6, 0x9a, 0x3f, 0xf3, 0x7e, 0x5d, 0xe0, 0x82, 0x25, 0x36, 0xc1, 0x8a, 0x8f, 0xc6, 0x33,
    0xc1, 0x86, 0xf7, 0xe6, 0x13, 0x1f, 0x64, 0x4a, 0x5d, 0xf2, 0xac, 0x2c, 0xfe, 0x7e, 0x28,
    0x0a, 0x1d, 0x9f, 0xfe, 0x5e, 0xf0, 0x7b, 0x0b, 0x76, 0xfa, 0xdf, 0xcd, 0xd1, 0xd4, 0x23,
    0xb5, 0xe0, 0x9b, 0xe5, 0x63, 0xd0, 0x73, 0xcb, 0x9c, 0x2e, 0x21, 0xcf, 0x64, 0xd4, 0x4d,
    0x20, 0x9b, 0x3e, 0x82, 0x5a, 0xb8, 0x99, 0xe5, 0x73, 0x12, 0xb2, 0xfb, 0xf0, 0x57, 0x21,
    0xdc, 0xc4, 0x2c, 0xe6, 0xef, 0x62, 0x5a, 0x23, 0xf9, 0x38, 0x9b, 0x1c, 0x85, 0x3e, 0xc5,
    0xb1, 0x2c, 0x8d, 0x16, 0x61, 0xff, 0xb2, 0xf4, 0x83, 0xd8, 0xd4, 0x5e, 0x0b, 0xf8, 0x9c,
    0x1f, 0x88, 0xff, 0x71, 0x0e, 0xac, 0xa1, 0xff, 0xe4, 0xe9, 0xca, 0x2b, 0xc2, 0x73, 0xa8,
    0xc6, 0xd4, 0x73, 0xdd, 0x82, 0x33, 0x2f, 0xa3, 0x3f, 0x5d, 0xdf, 0xe0, 0x7a, 0xd5, 0x1a,
    0x53, 0x62, 0xc9, 0xb9, 0xde, 0xf1, 0x74, 0xce, 0xfc, 0x9d, 0x7a, 0xb4, 0x2d, 0x05, 0xa6,
    0x64, 0xbc, 0x95, 0x7e, 0xc2, 0xdb, 0xe7, 0x3b, 0x16, 0xfd, 0x3d, 0x43, 0xc9, 0x1f, 0x8d,
    0xfd, 0xbf, 0xb7, 0xbf, 0xd3, 0x41, 0xf1, 0x7c, 0xc3, 0x63, 0x6c, 0xdb, 0xe3, 0x49, 0xd5,
    0x73, 0x14, 0x3d, 0x85, 0xce, 0xf7, 0x73, 0x2e, 0xf8, 0x4e, 0x21, 0xce, 0x59, 0xe9, 0xa2,
    0x43, 0x84, 0x79, 0x67, 0xdb, 0xff, 0x90, 0x36, 0x3a, 0x72, 0x9c, 0x1b, 0xf6, 0xd9, 0x3a,
    0xc2, 0xbc, 0x5a, 0x79, 0xd7, 0xde, 0xc4, 0xfd, 0xd5, 0xe9, 0xe9, 0x22, 0xed, 0x4a, 0x0b,
    0x19, 0xfd, 0x24, 0xd2, 0xde, 0xf5, 0x47, 0xa2, 0x0f, 0xc9, 0x2b, 0xfe, 0x57, 0xf7, 0x3a,
    0xdd, 0x62, 0xfb, 0x47, 0x68, 0x45, 0xf2, 0xb2, 0x31, 0x7c, 0x4b, 0xd5, 0xc7, 0x9b, 0x8e,
    0x57, 0xa8, 0x97, 0x84, 0xd5, 0x04, 0x75, 0x3c, 0xe1, 0x4f, 0x31, 0x74, 0x33, 0xeb, 0xd9,
    0x2a, 0x95, 0x9c, 0xdd, 0xa0, 0x30, 0x81, 0x2e, 0xf5, 0x28, 0x92, 0x3e, 0x0e, 0xec, 0xb1,
    0x71, 0xd8, 0x77, 0xd2, 0x0b, 0x65, 0x8d, 0xfe, 0x91, 0xe8, 0x37, 0xc0, 0xf5, 0xd8, 0x53,
    0x0f, 0xf9, 0x79, 0x7b, 0xb0, 0x97, 0x31, 0xea, 0x7f, 0x87, 0x68, 0xc7, 0x75, 0x9e, 0x60,
    0x6e, 0x10, 0xd4, 0x2f, 0xba, 0xff, 0x85, 0xec, 0x18, 0xac, 0xdb, 0xde, 0x4d, 0x04, 0x06,
    0x13, 0x39, 0xc2, 0xdc, 0xd3, 0x80, 0x74, 0xdd, 0xd1, 0xfd, 0x39, 0x33, 0x0e, 0xca, 0x8b,
    0xce, 0xe7, 0x65, 0x54, 0xa1, 0xf5, 0xc2, 0x3a, 0x6b, 0xcb, 0x9d, 0xfb, 0xb9, 0xe4, 0xfe,
    0x69, 0x3c, 0xe3, 0xc1, 0xc3, 0x38, 0x86, 0xc0, 0x39, 0x8a, 0xfe, 0xc8, 0xad, 0xbb, 0x55,
    0xa9, 0x63, 0x3d, 0x09, 0x07, 0xe6, 0x8a, 0xfc, 0x0d, 0xc6, 0xf9, 0x14, 0xf9, 0x03, 0xca,
    0x47, 0x35, 0x0b, 0xd3, 0x77, 0x9a, 0xc9, 0x72, 0x1a, 0x62, 0xfc, 0xc4, 0x79, 0x51, 0xbd,
    0x92, 0x1d, 0xe8, 0x95, 0x09, 0xcd, 0xad, 0x7b, 0xb7, 0x87, 0x67, 0xb6, 0xdc, 0x5b, 0xe3,
    0x8e, 0x85, 0x58, 0x86, 0x9a, 0x3c, 0x07, 0xae, 0x61, 0xde, 0x04, 0xf9, 0x52, 0xa7, 0x1e,
    0x92, 0x7f, 0x82, 0xde, 0x9d, 0xcc, 0xaa, 0x47, 0xce, 0x91, 0x15, 0xbe, 0xba, 0x70, 0xeb,
    0x2d, 0xb5, 0xd5, 0xd0, 0xf9, 0x1a, 0xd9, 0xfa, 0xe3, 0x2a, 0x7d, 0x04, 0xb1, 0xf7, 0xd5,
    0xcc, 0x4b, 0x96, 0xf6, 0x43, 0x10, 0x57, 0x1b, 0xb2, 0x66, 0x8f, 0xd4, 0x81, 0xd2, 0x9c,
    0xcd, 0x17, 0x9c, 0xa9, 0xd9, 0x5f, 0xc8, 0x3f, 0xad, 0xb9, 0xa5, 0x8a, 0x17, 0x77, 0x98,
    0x2d, 0xba, 0x4f, 0x71, 0x8f, 0xeb, 0xe2, 0x5e, 0x06, 0xf6, 0x6f, 0x94, 0xc8, 0x82, 0x92,
    0x0d, 0x6d, 0x7d, 0x16, 0x3f, 0xc4, 0x4f, 0xac, 0xb1, 0x73, 0x87, 0xf3, 0x8a, 0xb8, 0x47,
    0x15, 0x7b, 0x98, 0x46, 0x1c, 0x4f, 0x47, 0x9a, 0xa7, 0xfa, 0xc2, 0x4f, 0x35, 0x03, 0xdf,
    0x60, 0x07, 0x16, 0xb2, 0xbf, 0x17, 0xd5, 0xc5, 0x58, 0xe3, 0x7e, 0xaf, 0x97, 0x3a, 0x36,
    0xe5, 0xef, 0xa0, 0x4d, 0x41, 0x58, 0xcd, 0xbd, 0x97, 0x20, 0x06, 0xeb, 0x69, 0xc3, 0xfe,
    0x2d, 0x0f, 0x5b, 0xc3, 0xdc, 0x6e, 0xab, 0xde, 0xa8, 0xd8, 0x1e, 0xf5, 0xa7, 0xe4, 0x57,
    0x31, 0x30, 0x3d, 0xac, 0xdb, 0x11, 0x8a, 0x18, 0x91, 0xc4, 0x71, 0x14, 0x60, 0xab, 0x19,
    0xfa, 0xda, 0xf9, 0x9f, 0x7c, 0x5d, 0x2b, 0xdb, 0x73, 0xbd, 0xff, 0xb9, 0x32, 0x4f, 0xca,
    0x52, 0x9e, 0xa7, 0x8e, 0x59, 0xa1, 0x3d, 0x99, 0xc8, 0xfd, 0xfa, 0xc6, 0x07, 0xb3, 0x22,
    0xd1, 0x84, 0xb1, 0x61, 0xb3, 0xee, 0x31, 0x79, 0xc1, 0x9f, 0xa7, 0x54, 0x63, 0x53, 0xc7,
    0x12, 0x16, 0x65, 0x59, 0xbd, 0xff, 0xa0, 0xda, 0x52, 0x13, 0x81, 0x85, 0xa5, 0xfb, 0xf3,
    0xcf, 0x4d, 0xc7, 0x14, 0x9d, 0x04, 0x76, 0x99, 0x6a, 0x9b, 0x58, 0xe2, 0x9e, 0x74, 0x5e,
    0x7b, 0x90, 0xee, 0x19, 0xf1, 0xde, 0x6e, 0x65, 0xcd, 0x82, 0x25, 0xf6, 0x11, 0x67, 0x6c,
    0x3a, 0x77, 0x81, 0xcf, 0xff, 0xe0, 0xbe, 0x85, 0xe4, 0x37, 0xdf, 0x0a, 0xfa, 0x79, 0x0c,
    0xdc, 0xb7, 0xa4, 0xdf, 0x48, 0xb7, 0x91, 0x2c, 0x1d, 0x58, 0x5f, 0x10, 0xde, 0x61, 0x4f,
    0x14, 0x27, 0x0a, 0x7b, 0x8e, 0xf8, 0xbb, 0x0e, 0xfa, 0xe0, 0x3d, 0x03, 0xcf, 0x49, 0x75,
    0x5c, 0x31, 0x77, 0x47, 0x9c, 0xcd, 0x7e, 0xa0, 0xb0, 0x77, 0x66, 0x5f, 0x65, 0x85, 0x01,
    0xe3, 0x04, 0xb6, 0xbb, 0xf8, 0x3b, 0x9a, 0x6e, 0x99, 0x8e, 0x71, 0x4f, 0xb3, 0x79, 0x5c,
    0x8d, 0xa0, 0x29, 0xac, 0x31, 0x61, 0x3c, 0xe2, 0x10, 0x69, 0x99, 0xb0, 0x5e, 0x83, 0x44,
    0x09, 0xd1, 0xb7, 0xc3, 0xf3, 0x8e, 0xb2, 0xb1, 0xa7, 0xbc, 0x3c, 0xe7, 0x77, 0xb7, 0x89,
    0xaf, 0x62, 0xbb, 0x0c, 0xfb, 0xcc, 0xc0, 0xde, 0x68, 0x36, 0xe3, 0x54, 0x60, 0xe4, 0x7b,
    0xd6, 0xde, 0x59, 0x3a, 0xa6, 0x92, 0xc7, 0x85, 0xe7, 0xfb, 0x35, 0xde, 0xab, 0xc1, 0xc8,
    0xd5, 0xce, 0x7f, 0x7f, 0x7d, 0x33, 0x7c, 0x6d, 0xc5, 0x7d, 0xe8, 0x33, 0x71, 0x41, 0xac,
    0x25, 0xf0, 0xc8, 0xe8, 0x93, 0xa1, 0xfc, 0xde, 0xb6, 0xab, 0x63, 0xd9, 0x12, 0xba, 0x03,
    0xff, 0x5b, 0x1a, 0x10, 0xef, 0xf6, 0xa9, 0xdf, 0x5f, 0xf7, 0x93, 0x78, 0x5b, 0x41, 0x7f,
    0xc4, 0x5f, 0xaf, 0xfe, 0xfe, 0x2e, 0xc7, 0x92, 0xfc, 0x42, 0xd4, 0x9b, 0x92, 0x79, 0x96,
    0xff, 0x43, 0xdf, 0xea, 0x61, 0x1e, 0xa1, 0xa8, 0x2f, 0xd2, 0xdb, 0x5b, 0xd7, 0xac, 0xf1,
    0x19, 0xa3, 0xa3, 0x1a, 0x0e, 0x55, 0xcc, 0x97, 0x10, 0xfd, 0xeb, 0xc4, 0x7d, 0xd3, 0x7b,
    0x70, 0x7c, 0xb5, 0x8f, 0x7d, 0xcf, 0xe4, 0xfd, 0x23, 0x9d, 0x40, 0xf6, 0x3b, 0x27, 0x9f,
    0xf6, 0x78, 0xae, 0x11, 0x4e, 0x82, 0x6b, 0xfb, 0xe4, 0xea, 0x4c, 0x09, 0xdf, 0xa4, 0xd5,
    0x42, 0xb6, 0xfa, 0xe7, 0x48, 0x9b, 0x53, 0xd6, 0x1f, 0x8d, 0xb8, 0x09, 0xac, 0x61, 0x33,
    0x04, 0xf6, 0x3c, 0x80, 0xc2, 0x9e, 0xe6, 0xb8, 0x36, 0x96, 0x25, 0x84, 0xe7, 0x47, 0xb9,
    0xc5, 0x23, 0x7b, 0x1d, 0xc9, 0x7b, 0xeb, 0xeb, 0x45, 0x11, 0x5d, 0xbb, 0x0d, 0x8c, 0x15,
    0x30, 0x5e, 0xcb, 0x73, 0x08, 0x9b, 0x0b, 0x99, 0x17, 0xd4, 0x01, 0xbb, 0x55, 0xca, 0x2c,
    0x23, 0x85, 0x35, 0x35, 0x41, 0x17, 0x58, 0x5a, 0xe3, 0x76, 0x43, 0x6d, 0x2e, 0x25, 0xbe,
    0xbe, 0x9a, 0x53, 0xb6, 0xee, 0x40, 0x2a, 0x3b, 0x9b, 0x8b, 0xa0, 0x7e, 0x8a, 0x3b, 0xec,
    0xc3, 0x3d, 0x79, 0x01, 0xd9, 0xd0, 0xb7, 0xe7, 0xd0, 0xdc, 0xa7, 0xe7, 0xfd, 0xf5, 0x6d,
    0x8e, 0xf4, 0xdb, 0xb6, 0xb8, 0x90, 0xd9, 0x4b, 0x11, 0x68, 0xf2, 0xbb, 0xfc, 0x9d, 0x6f,
    0x4d, 0x7d, 0x37, 0x56, 0xe9, 0xd9, 0x7f, 0x51, 0x3d, 0x1f, 0xb9, 0x5e, 0xd8, 0x6b, 0xaa,
    0x31, 0x18, 0x71, 0x8f, 0x2c, 0xd1, 0x63, 0xca, 0x8b, 0x18, 0x33, 0x77, 0xa6, 0x5e, 0x42,
    0xc8, 0x27, 0x6f, 0xee, 0x03, 0x9d, 0xae, 0x33, 0xcd, 0x1b, 0x3e, 0x2c, 0xab, 0xc9, 0x86,
    0xba, 0xea, 0xb9, 0x61, 0x8a, 0x57, 0x98, 0xe7, 0xa7, 0xee, 0xbf, 0xdb, 0x10, 0xf6, 0xcb,
    0x35, 0xa7, 0xcc, 0xe2, 0x0b, 0xd3, 0xfa, 0x51, 0x78, 0xb9, 0xdc, 0x29, 0xfd, 0x1e, 0x7c,
    0xf3, 0xd8, 0xd1, 0x69, 0x3b, 0x57, 0x6f, 0x31, 0x5d, 0xcf, 0x95, 0x7d, 0x6b, 0x8d, 0xfb,
    0x89, 0x77, 0x4c, 0xab, 0xc2, 0xde, 0xb9, 0xaa, 0x0e, 0x72, 0xc9, 0x9e, 0xa5, 0x3c, 0xf3,
    0xea, 0x65, 0xe6, 0xfc, 0xf9, 0x71, 0x97, 0x7a, 0x3e, 0x65, 0xc5, 0x37, 0x6b, 0x63, 0x96,
    0x7e, 0xbf, 0xfa, 0x7c, 0xbe, 0x34, 0x1b, 0xcd, 0xc8, 0x87, 0xbb, 0xfa, 0x7c, 0x53, 0x9d,
    0xbf, 0xb5, 0x4f, 0xa9, 0x7c, 0xcb, 0xf2, 0x1e, 0x5b, 0x3c, 0x6b, 0x5a, 0x33, 0xf2, 0x6e,
    0x51, 0xc7, 0x2b, 0xaf, 0x1f, 0x6e, 0x7e, 0xca, 0xf8, 0x82, 0xa4, 0x7d, 0x33, 0x1f, 0x91,
    0x05, 0x98, 0x53, 0x28, 0x7c, 0xfc, 0x89, 0x8e, 0x1d, 0x38, 0x99, 0xb9, 0x8b, 0xd8, 0xc3,
    0x7a, 0x7b, 0xa9, 0xb1, 0x1e, 0x53, 0x7b, 0xe6, 0xa4, 0xc9, 0xaa, 0x43, 0x86, 0x57, 0x61,
    0x1a, 0xd5, 0x8d, 0x7b, 0x6a, 0x89, 0x7a, 0xc5, 0x5c, 0xaf, 0x80, 0xec, 0x3b, 0x31, 0x3f,
    0x6e, 0x0f, 0x8d, 0xda, 0x86, 0xc3, 0xb0, 0xd9, 0xa7, 0x67, 0x48, 0x86, 0xd4, 0x4d, 0x7e,
    0xe6, 0x71, 0x5b, 0xea, 0x61, 0xa5, 0x39, 0xb4, 0xb7, 0xf4, 0xa2, 0xf7, 0xa5, 0xbf, 0xd2,
    0xcf, 0x61, 0x64, 0xee, 0x99, 0xee, 0x67, 0x96, 0x34, 0x66, 0xfb, 0xbe, 0x1e, 0x53, 0xc6,
    0xf2, 0xd1, 0x16, 0xcb, 0xb6, 0xd9, 0x92, 0x7a, 0xdc, 0xb7, 0xe8, 0x1b, 0x59, 0x9e, 0x53,
    0x0f, 0x8c, 0x3e, 0x28, 0x9f, 0xdc, 0x5f, 0x41, 0xa3, 0xff, 0x56, 0xf3, 0x18, 0x8d, 0x4a,
    0x0a, 0x1d, 0x2b, 0x70, 0xd1, 0xe2, 0xde, 0xfa, 0xb7, 0x72, 0x7e, 0xed, 0x14, 0x37, 0x50,
    0x63, 0xd7, 0x6c, 0x62, 0xd2, 0x19, 0xc8, 0x97, 0x01, 0x36, 0xb9, 0xc0, 0x8e, 0x68, 0x75,
    0xf0, 0x9c, 0x64, 0x2d, 0x6b, 0xb8, 0x07, 0xf1, 0x5b, 0xdc, 0xfa, 0xfe, 0x3c, 0x47, 0x81,
    0x2f, 0xcf, 0x3e, 0x1f, 0xfd, 0x3c, 0xcb, 0xe9, 0xc9, 0xe8, 0xc7, 0x0a, 0xbc, 0x28, 0x09,
    0xb8, 0xfa, 0xb1, 0x2e, 0x5f, 0x1b, 0xe2, 0x5e, 0x49, 0x7e, 0x70, 0xaf, 0xf5, 0x77, 0x6d,
    0x3c, 0x7c, 0x2b, 0xef, 0x84, 0x31, 0x77, 0xb2, 0x83, 0x6a, 0x64, 0x17, 0x0b, 0x5f, 0x88,
    0x5a, 0x62, 0x6f, 0xec, 0x5d, 0xe3, 0xe3, 0x69, 0x22, 0xc7, 0xe4, 0xbb, 0x85, 0xbe, 0x16,
    0xe9, 0xb2, 0xf7, 0x9d, 0xed, 0x32, 0xf4, 0xa7, 0x87, 0x47, 0x8e, 0x71, 0xab, 0x5c, 0x63,
    0xa7, 0x8a, 0xf2, 0xb9, 0x9b, 0x98, 0xc3, 0x8b, 0x58, 0x9e, 0xd2, 0x78, 0x95, 0x25, 0xae,
    0xfe, 0x2b, 0x1b, 0xaf, 0xfc, 0xfe, 0x5b, 0x45, 0xf4, 0xae, 0xc5, 0x11, 0xfa, 0xc3, 0x89,
    0xc3, 0x9b, 0x94, 0xf8, 0x21, 0xba, 0xbd, 0x9b, 0x62, 0x68, 0x63, 0xd8, 0xd3, 0x9b, 0xbe,
    0x2d, 0xe0, 0x0f, 0x72, 0x5f, 0x2e, 0x7f, 0x64, 0x5f, 0xec, 0xf7, 0x9a, 0x73, 0xbf, 0x5d,
    0xcb, 0x10, 0x2b, 0x99, 0x99, 0xff, 0xaf, 0xc5, 0x8e, 0x7d, 0xfd, 0xfa, 0xdc, 0xcb, 0xd6,
    0x68, 0x7c, 0x6b, 0xe7, 0x95, 0x05, 0x58, 0x9e, 0x7c, 0x3e, 0xfa, 0x7f, 0x63, 0x4e, 0x37,
    0x88, 0xa1, 0x79, 0x18, 0xfc, 0x0a, 0xe7, 0x62, 0xff, 0x46, 0x98, 0xc7, 0xe0, 0x48, 0xdb,
    0x3f, 0xda, 0xfb, 0x34, 0xbf, 0x75, 0x14, 0x60, 0x6f, 0xcd, 0x72, 0x5a, 0x49, 0xed, 0x85,
    0xf1, 0xc0, 0xd9, 0x68, 0x99, 0xe5, 0xdb, 0x1b, 0xe6, 0xd9, 0xbd, 0xfd, 0x73, 0x16, 0x03,
    0xf6, 0xcc, 0xab, 0x8c, 0xed, 0xa5, 0x63, 0x0d, 0x69, 0xac, 0xc8, 0xce, 0x23, 0xaf, 0xda,
    0xfb, 0x39, 0x5b, 0x6b, 0x88, 0x59, 0x79, 0x6b, 0x88, 0x76, 0x68, 0x47, 0xf1, 0x5f, 0xb0,
    0xc2, 0x67, 0xe0, 0x9f, 0xda, 0xbe, 0x12, 0xae, 0x3e, 0x57, 0x0b, 0x8b, 0xd7, 0xda, 0xc9,
    0x75, 0x43, 0x6b, 0xdd, 0xe4, 0xd7, 0x3a, 0xe0, 0x7d, 0x3b, 0xe7, 0xf6, 0x4d, 0xf4, 0x12,
    0xf6, 0x65, 0xf2, 0x76, 0x28, 0xf8, 0x23, 0xcc, 0xfb, 0x32, 0xae, 0x46, 0x64, 0x97, 0x0e,
    0xfd, 0xf5, 0xcb, 0x3e, 0x21, 0xff, 0x6d, 0x50, 0x4b, 0x2e, 0xb0, 0x86, 0x63, 0x01, 0x9e,
    0x73, 0x3a, 0x4b, 0x79, 0xe5, 0x23, 0xfa, 0xae, 0x5f, 0xdf, 0x80, 0x16, 0xdc, 0x8f, 0x45,
    0xe4, 0xd7, 0xb4, 0x6f, 0x8b, 0xed, 0x5a, 0x6b, 0xe9, 0xa0, 0x6f, 0xf3, 0x69, 0xd7, 0x29,
    0xb3, 0x43, 0x73, 0x2f, 0xa1, 0xb3, 0xf4, 0xfb, 0x25, 0xcf, 0x28, 0xff, 0x8e, 0xa5, 0xbe,
    0x9c, 0x09, 0xdc, 0xc1, 0xd3, 0x6c, 0xf7, 0xf6, 0x31, 0x43, 0x9f, 0x3b, 0xf6, 0x2f, 0xa0,
    0xf5, 0x40, 0x26, 0x61, 0x9f, 0x75, 0x18, 0x7f, 0x83, 0xf5, 0xbe, 0x6d, 0x7e, 0x0c, 0x21,
    0x3b, 0xe1, 0x87, 0x90, 0x65, 0xa4, 0xd7, 0x89, 0x78, 0xc3, 0x6f, 0xc2, 0x20, 0x4b, 0xff,
    0xf7, 0x20, 0x41, 0xbf, 0x16, 0xf9, 0xa7, 0xa9, 0x4e, 0x74, 0x0d, 0x31, 0x67, 0x20, 0xf7,
    0x5e, 0x07, 0x31, 0xfa, 0xb0, 0x87, 0x4a, 0xde, 0x89, 0x7e, 0x13, 0x69, 0xff, 0xf8, 0x4c,
    0xfe, 0xa3, 0xe8, 0x5d, 0xc1, 0x3e, 0xcc, 0x04, 0x6b, 0x5e, 0xc9, 0x7a, 0x39, 0x20, 0x07,
    0xcb, 0x9c, 0xf0, 0xfd, 0x89, 0xd0, 0x95, 0x35, 0xda, 0xd0, 0x6b, 0xd1, 0x49, 0x1f, 0x7f,
    0x3d, 0x73, 0x3f, 0x59, 0xc4, 0xe6, 0xe9, 0xbd, 0x65, 0x7d, 0xa6, 0x19, 0x45, 0x47, 0x96,
    0xef, 0xc6, 0x78, 0xe2, 0xb9, 0x10, 0xd6, 0x0b, 0x3a, 0x3c, 0xf5, 0xfc, 0x08, 0x18, 0x73,
    0x3f, 0x53, 0x9f, 0x33, 0xc6, 0xf1, 0xab, 0xba, 0x95, 0xb8, 0xf7, 0x3f, 0x64, 0x8f, 0x69,
    0x5f, 0x0c, 0x44, 0xdd, 0x53, 0x7a, 0xd6, 0x69, 0x68, 0x39, 0xae, 0xcd, 0x6d, 0xdc, 0x46,
    0x38, 0xea, 0x19, 0xea, 0x77, 0x49, 0x0c, 0xe7, 0x36, 0x84, 0x6f, 0x51, 0x7d, 0x90, 0xa9,
    0x36, 0xbc, 0xcc, 0x6f, 0xbf, 0x9a, 0xc7, 0xea, 0xf5, 0x1b, 0x92, 0x26, 0xe3, 0xd5, 0x2a,
    0x7b, 0xf9, 0x0b, 0x7b, 0x7e, 0x7c, 0x87, 0x51, 0x9c, 0xa5, 0x7b, 0xf4, 0xa3, 0xe7, 0x7e,
    0x7e, 0x47, 0xdd, 0xaf, 0xb3, 0x6e, 0x1b, 0xcb, 0x3c, 0x72, 0xea, 0x1f, 0x8f, 0xd8, 0x6d,
    0x7d, 0x9f, 0x8e, 0xfb, 0x71, 0xfb, 0xfe, 0x72, 0x9e, 0x2d, 0xd0, 0x88, 0xee, 0xa7, 0x14,
    0x86, 0xa9, 0x06, 0xf7, 0xe7, 0xe3, 0x48, 0xcb, 0x6f, 0xed, 0xb8, 0xef, 0x0b, 0x17, 0xf5,
    0xf0, 0xe2, 0x4f, 0xea, 0x95, 0xc5, 0xa8, 0x1e, 0x8c, 0x3a, 0xc9, 0x78, 0xea, 0xe0, 0x7f,
    0xc8, 0x0f, 0xdc, 0x20, 0x57, 0xdb, 0x47, 0xe6, 0x5b, 0x13, 0x16, 0x9d, 0xf2, 0x03, 0xd6,
    0xc6, 0xc0, 0x9b, 0x9c, 0xc6, 0x53, 0xff, 0x7c, 0x45, 0xbd, 0x86, 0x34, 0x0f, 0x1d, 0xfd,
    0xbf, 0x46, 0x20, 0x13, 0x62, 0xae, 0xf5, 0xff, 0x1a, 0x4d, 0x92, 0x2a, 0xda, 0x4d, 0xfd,
    0x23, 0xe6, 0x2f, 0x54, 0x16, 0x0f, 0x98, 0x8f, 0x5b, 0x92, 0x83, 0x9b, 0xda, 0x85, 0x7c,
    0x58, 0x97, 0x98, 0xeb, 0x46, 0x9d, 0xe0, 0x3c, 0x11, 0xaf, 0x55, 0x07, 0xbd, 0xf8, 0xb8,
    0xc0, 0x3a, 0x6a, 0x82, 0xde, 0x24, 0xde, 0x9b, 0x73, 0xa0, 0xa9, 0x76, 0xd3, 0x5c, 0xe0,
    0x45, 0x5d, 0x3f, 0x91, 0x63, 0x61, 0xc4, 0x69, 0x18, 0xb3, 0xfe, 0xc0, 0x74, 0x22, 0xe3,
    0xe8, 0x9f, 0x03, 0x7a, 0xbb, 0x11, 0xb7, 0x35, 0xfc, 0x1a, 0x84, 0x82, 0x9f, 0x94, 0xd5,
    0x95, 0x7d, 0x45, 0x3a, 0x29, 0xed, 0xe4, 0x6d, 0x0e, 0xc3, 0x3f, 0xb6, 0x5e, 0x52, 0x5d,
    0xe0, 0x29, 0x49, 0xbc, 0x36, 0xf2, 0xb9, 0xdb, 0x58, 0x7b, 0xbc, 0x71, 0x02, 0xdd, 0x60,
    0xb1, 0x5d, 0xd6, 0x31, 0xba, 0x11, 0xf5, 0xff, 0x09, 0xd3, 0x7a, 0x1d, 0xb9, 0x9a, 0x46,
    0x18, 0x64, 0xad, 0x8e, 0x89, 0xec, 0xa7, 0x82, 0x35, 0x4f, 0xc6, 0x66, 0x7d, 0x19, 0xb8,
    0x43, 0x5b, 0x0d, 0xb2, 0xe2, 0xb9, 0x63, 0xfd, 0x3a, 0xcb, 0xd8, 0x70, 0x57, 0xb2, 0xf9,
    0xb9, 0x3a, 0xd8, 0x94, 0x1b, 0xe7, 0xa6, 0x7d, 0x25, 0x16, 0xf9, 0xb9, 0xac, 0xfa, 0x9b,
    0xed, 0xf7, 0x1f, 0x11, 0xf6, 0xf1, 0xe9, 0x0e, 0x4d, 0x39, 0x50, 0x94, 0xf3, 0x6d, 0x19,
    0x62, 0x6b, 0xf1, 0x7c, 0xda, 0x76, 0xbf, 0x90, 0xe6, 0xc3, 0x14, 0xfe, 0x64, 0x89, 0x07,
    0xa3, 0xdf, 0x81, 0x7a, 0xb0, 0x1b, 0x18, 0x7e, 0xce, 0xe7, 0x15, 0xbd, 0xd9, 0x09, 0x8b,
    0xa7, 0xfa, 0x1f, 0x18, 0x8b, 0x06, 0x9d, 0xe7, 0x65, 0x14, 0x13, 0x3e, 0x13, 0x65, 0xc4,
    0x87, 0x38, 0x45, 0xca, 0x37, 0x42, 0x6c, 0xa8, 0x99, 0xaf, 0x00, 0x76, 0xe3, 0x8c, 0xf5,
    0x1a, 0x57, 0xcc, 0x61, 0x17, 0x4f, 0xea, 0xaf, 0x02, 0xa3, 0xb9, 0x5e, 0x6c, 0xe5, 0x33,
    0x6f, 0x0f, 0x9e, 0x69, 0x98, 0x79, 0x0f, 0x59, 0x0c, 0x23, 0xe6, 0x10, 0x60, 0x1d, 0x4f,
    0xc7, 0xa2, 0x7a, 0xc7, 0x79, 0x05, 0x15, 0xf9, 0x4d, 0xaf, 0x02, 0xbc, 0xf4, 0xb4, 0x08,
    0x87, 0x7a, 0x77, 0xee, 0x43, 0x87, 0xeb, 0x5b, 0x79, 0x4d, 0x11, 0x77, 0x54, 0x79, 0x0a,
    0x27, 0x7b, 0x5d, 0xbd, 0xb7, 0x0e, 0xe6, 0x5c, 0x0f, 0x54, 0xef, 0xa2, 0xfc, 0x9e, 0x26,
    0x3d, 0xee, 0x80, 0x18, 0x6d, 0xb0, 0x2f, 0xc9, 0x66, 0xe7, 0xfc, 0x0f, 0x77, 0x03, 0xf6,
    0x01, 0x64, 0x2b, 0xff, 0x9d, 0x72, 0x26, 0x99, 0x46, 0x67, 0xad, 0x9c, 0x9c, 0x5e, 0x6b,
    0x28, 0xca, 0xaf, 0x42, 0x7b, 0xc0, 0x38, 0xa3, 0xee, 0x1a, 0xd6, 0xd7, 0x04, 0xbb, 0xfa,
    0x29, 0xc2, 0xf9, 0xc1, 0xdd, 0x79, 0xda, 0xc1, 0xbd, 0x19, 0x35, 0xb4, 0x1a, 0xc3, 0xb8,
    0x95, 0xd7, 0xa8, 0xfb, 0xae, 0xf1, 0x88, 0xde, 0x65, 0xd0, 0xf6, 0x4b, 0x72, 0x2d, 0xc4,
    0x49, 0xae, 0xf8, 0x20, 0xeb, 0x87, 0x39, 0x5f, 0x91, 0x36, 0xb7, 0xbf, 0x25, 0x7e, 0x24,
    0x31, 0xe6, 0x18, 0x9f, 0xc7, 0xbb, 0x9b, 0x58, 0x6a, 0x1b, 0xa9, 0xb8, 0x12, 0xea, 0x32,
    0x91, 0x43, 0x10, 0x88, 0x31, 0x86, 0xdc, 0x27, 0xeb, 0x0e, 0xfb, 0xb8, 0xe9, 0x7e, 0xa0,
    0xfa, 0x89, 0x62, 0x3c, 0xaf, 0x2d, 0xf7, 0x48, 0xcf, 0x0d, 0xb4, 0xd5, 0x52, 0xb4, 0xac,
    0xbb, 0x31, 0xac, 0xd8, 0x00, 0xb9, 0xbe, 0x6f, 0xf0, 0x40, 0x9c, 0x73, 0x92, 0xdf, 0xa3,
    0x7a, 0x8d, 0xd3, 0x9a, 0x78, 0xbf, 0x82, 0x39, 0x5d, 0x09, 0xcd, 0xe3, 0x8a, 0x6f, 0x5d,
    0xbe, 0xa5, 0xea, 0x73, 0xa6, 0x31, 0xd6, 0x3c, 0x9f, 0x4c, 0x1a, 0x72, 0x1f, 0x44, 0xcd,
    0x3e, 0xf7, 0x36, 0x78, 0xc8, 0xd5, 0x69, 0x14, 0xdf, 0x57, 0x3e, 0xa7, 0x4c, 0xbd, 0xaa,
    0xac, 0xf1, 0x6d, 0xe9, 0x79, 0xb4, 0xe6, 0x3e, 0x6e, 0x84, 0xb1, 0xff, 0xe6, 0xbe, 0x18,
    0x70, 0xc2, 0xd9, 0xa4, 0xf5, 0x7c, 0xab, 0x8d, 0x33, 0xca, 0xf4, 0xb8, 0x4b, 0x72, 0x85,
    0xa7, 0x46, 0x8c, 0x67, 0xe7, 0x3e, 0x29, 0x5f, 0x1b, 0xec, 0x9d, 0x6c, 0xdc, 0x97, 0x96,
    0xf8, 0x0c, 0xe1, 0xee, 0x9d, 0x54, 0xed, 0xd1, 0xa0, 0x92, 0xcc, 0x5a, 0xf7, 0x6f, 0xb2,
    0x1a, 0xe2, 0xc0, 0x23, 0x55, 0x7f, 0x4e, 0xd6, 0x9f, 0xf9, 0x49, 0x35, 0xdb, 0x50, 0xff,
    0x3a, 0x0f, 0xcb, 0x83, 0xc0, 0xba, 0x60, 0xfe, 0x6d, 0x9f, 0xeb, 0x89, 0x83, 0x6e, 0xcd,
    0xf7, 0xa2, 0x49, 0x53, 0x7d, 0x37, 0x14, 0x35, 0x51, 0x64, 0xde, 0xd8, 0x4c, 0x61, 0xf1,
    0x1e, 0x39, 0xf4, 0x7c, 0x12, 0x75, 0x19, 0x43, 0x30, 0xe3, 0x1c, 0xc2, 0x95, 0x15, 0x47,
    0xd1, 0xb7, 0x43, 0x8c, 0xd1, 0x74, 0xd2, 0x35, 0x5b, 0x6a, 0xa7, 0xfe, 0x2d, 0xd7, 0x15,
    0xdd, 0x0b, 0xf6, 0x13, 0xc1, 0xde, 0x54, 0x28, 0xb3, 0xc0, 0x56, 0xc5, 0xfe, 0xf2, 0xd6,
    0x29, 0xdb, 0x3b, 0x8f, 0xdf, 0xc7, 0xe9, 0x25, 0x2d, 0xc9, 0x9c, 0x87, 0x29, 0xf0, 0x94,
    0xea, 0x96, 0x4a, 0x86, 0x8a, 0xfa, 0x5e, 0x9a, 0xac, 0xe7, 0xfd, 0x1a, 0xa5, 0x39, 0x09,
    0xda, 0xdc, 0x35, 0x10, 0xef, 0x02, 0x7b, 0x88, 0x75, 0x52, 0x83, 0x37, 0xad, 0x0e, 0x4d,
    0xf7, 0x0c, 0x3e, 0x94, 0xd6, 0xac, 0xc1, 0xb8, 0x80, 0x2f, 0x75, 0x44, 0xad, 0x9e, 0xaf,
    0x0f, 0x1a, 0x86, 0xdd, 0x1a, 0xff, 0x0c, 0x35, 0x1d, 0x4f, 0xc4, 0x92, 0x35, 0xde, 0xa2,
    0x90, 0x55, 0xb9, 0x74, 0xae, 0xc4, 0xba, 0x20, 0x7f, 0xcf, 0xdc, 0x19, 0xd4, 0x51, 0x44,
    0x23, 0xec, 0x95, 0x82, 0x78, 0x55, 0xe5, 0x0f, 0xad, 0x97, 0xf0, 0x6a, 0x92, 0x17, 0xca,
    0xa0, 0xd7, 0xdc, 0x59, 0x6c, 0x4d, 0x1d, 0xea, 0x8a, 0x3c, 0x2f, 0x2b, 0xee, 0x2a, 0xcd,
    0x63, 0xfd, 0x4d, 0xc7, 0x3f, 0xa3, 0x3f, 0x21, 0xa8, 0x85, 0xaf, 0x9c, 0xeb, 0xd3, 0xd9,
    0xfc, 0x2f, 0x6b, 0xde, 0x9d, 0x7a, 0xee, 0xba, 0x7a, 0xb8, 0x3e, 0xeb, 0x48, 0xab, 0x5f,
    0xb7, 0xad, 0x15, 0x8f, 0x65, 0xbe, 0x59, 0x6f, 0x94, 0xc7, 0x56, 0x6b, 0xb2, 0x78, 0x42,
    0xa8, 0x1d, 0xf5, 0x95, 0x93, 0x79, 0x1f, 0x8c, 0x05, 0x9c, 0xfa, 0xa8, 0x6f, 0x24, 0x68,
    0x49, 0xec, 0x13, 0xd5, 0x1b, 0xc2, 0xbb, 0xd7, 0xd2, 0x73, 0x4b, 0x12, 0x5d, 0x57, 0xb9,
    0xff, 0x06, 0xd9, 0x1a, 0x5a, 0xee, 0x6d, 0x06, 0xff, 0x16, 0x63, 0xff, 0xc5, 0x4c, 0x3f,
    0x2b, 0xf8, 0x69, 0x36, 0x6e, 0x7e, 0xb1, 0x8d, 0xf7, 0x98, 0xaf, 0x19, 0xfa, 0xbd, 0x2c,
    0xf9, 0x64, 0xb4, 0xd7, 0xae, 0xb6, 0x5f, 0x89, 0xd0, 0x25, 0x1d, 0x8a, 0x6d, 0x7f, 0x04,
    0xf2, 0xec, 0x3b, 0x5f, 0x6e, 0xd8, 0x69, 0x3c, 0x4f, 0x2b, 0x5e, 0x10, 0x6c, 0xe1, 0xdf,
    0x4c, 0x3f, 0xc7, 0x5e, 0x3b, 0xab, 0xa5, 0x36, 0xb7, 0x34, 0x87, 0xc1, 0x1e, 0x33, 0xb7,
    0x83, 0x6d, 0x46, 0x29, 0x23, 0xe1, 0xde, 0x61, 0xfd, 0x93, 0xcb, 0xa0, 0x96, 0xc6, 0xaa,
    0xfe, 0x78, 0x1b, 0x0f, 0xfc, 0xd0, 0xff, 0x35, 0x4e, 0x1a, 0xe3, 0xd0, 0xed, 0xc3, 0xbf,
    0x26, 0x07, 0xce, 0xe7, 0x57, 0xd8, 0x1e, 0xac, 0xfb, 0x58, 0x9b, 0x15, 0x69, 0xa4, 0xfc,
    0x5e, 0xf0, 0x7b, 0xc0, 0xdf, 0x1c, 0xcc, 0x13, 0x8b, 0xf0, 0xbb, 0x53, 0x75, 0x07, 0xd7,
    0x0f, 0x70, 0x68, 0xc8, 0x1c, 0x5d, 0x37, 0xbd, 0x31, 0xcf, 0xf5, 0x3c, 0xb8, 0xb8, 0x65,
    0x57, 0xba, 0xf7, 0xe8, 0x83, 0x6a, 0xe5, 0x31, 0x91, 0xb6, 0x7c, 0xc6, 0x6c, 0xae, 0x02,
    0x78, 0x52, 0x6b, 0x42, 0x5f, 0xe2, 0x50, 0xd3, 0x01, 0xb4, 0xfe, 0x8d, 0xe5, 0xbc, 0x9c,
    0x38, 0xa0, 0x03, 0xa0, 0x0d, 0xae, 0x9f, 0x11, 0xfa, 0xc4, 0x84, 0x4d, 0x3f, 0x1e, 0x05,
    0x87, 0x71, 0x27, 0x0c, 0xc6, 0x4e, 0xfd, 0x6f, 0xf8, 0x39, 0x30, 0x73, 0xd5, 0x84, 0x2f,
    0x64, 0xee, 0x31, 0xd7, 0x4d, 0x8c, 0x61, 0x0e, 0x39, 0xdc, 0x08, 0xdd, 0xcf, 0xdc, 0x3e,
    0x98, 0x4e, 0xf4, 0x18, 0xb3, 0x8f, 0xba, 0x74, 0x37, 0x58, 0x17, 0xd0, 0x43, 0x1f, 0xf3,
    0x81, 0x16, 0x88, 0x66, 0xd0, 0xcf, 0x90, 0xc7, 0x0c, 0x73, 0xaf, 0x45, 0xaa, 0x17, 0x2d,
    0xb5, 0xca, 0x4f, 0xe3, 0x73, 0x17, 0xb1, 0x20, 0xac, 0x2d, 0x56, 0x89, 0xb0, 0x66, 0xc9,
    0x82, 0xfd, 0x06, 0x90, 0xa7, 0xa5, 0xb2, 0x62, 0x3a, 0x28, 0xeb, 0xb3, 0x48, 0xf5, 0x11,
    0x1d, 0xd9, 0x9c, 0x67, 0x9b, 0xcf, 0x6b, 0x29, 0xfe, 0x96, 0x62, 0xeb, 0x50, 0x07, 0xea,
    0xe8, 0x75, 0x2a, 0x75, 0xe0, 0x81, 0x67, 0x38, 0x6b, 0x65, 0xf7, 0x81, 0x3c, 0xfb, 0x0b,
    0x40, 0xa2, 0xce, 0x12, 0xd6, 0xba, 0xa0, 0x1a, 0xa8, 0x2a, 0x86, 0x82, 0xf9, 0x27, 0x3b,
    0x07, 0xfe, 0x3c, 0x1b, 0x75, 0x60, 0xee, 0x4e, 0x8a, 0xaf, 0x2b, 0xcb, 0x23, 0x92, 0x75,
    0xc5, 0x5c, 0xc6, 0x13, 0xf7, 0xf3, 0x91, 0xe7, 0x51, 0x5c, 0x8f, 0x1f, 0xe8, 0x04, 0xed,
    0xe5, 0xd6, 0x3d, 0xcf, 0x76, 0x09, 0xca, 0xd0, 0xf3, 0xcb, 0x68, 0x4d, 0xfd, 0xd7, 0x80,
    0xfc, 0xd5, 0x73, 0x8f, 0x88, 0xd9, 0x4b, 0xbf, 0x5b, 0x71, 0x44, 0x7d, 0xd8, 0x66, 0xc3,
    0xcf, 0x35, 0x27, 0x0b, 0x10, 0x6f, 0x85, 0x35, 0x38, 0xbc, 0xd9, 0xf4, 0xfe, 0x8d, 0x6a,
    0x8f, 0x4a, 0x6a, 0xa3, 0x1b, 0x73, 0xaf, 0xac, 0x97, 0xed, 0xef, 0x70, 0x6a, 0xdf, 0xec,
    0xe7, 0x30, 0x1e, 0x3b, 0x77, 0x1f, 0x72, 0x9e, 0xa8, 0xbf, 0xd1, 0xb8, 0xad, 0x4f, 0x51,
    0xf6, 0x73, 0x35, 0xd8, 0xe4, 0x73, 0x86, 0x0b, 0x62, 0x67, 0x01, 0xd0, 0xd7, 0x20, 0x9a,
    0x89, 0xf2, 0xbd, 0xb4, 0x34, 0xde, 0x66, 0xc5, 0x7b, 0x75, 0x70, 0x2e, 0x5f, 0xf1, 0x24,
    0x53, 0xbc, 0x9f, 0xe4, 0x61, 0x16, 0xaf, 0xa7, 0xfb, 0x68, 0xfa, 0x88, 0xf9, 0x3e, 0x60,
    0xbe, 0xcd, 0xb7, 0x62, 0xd6, 0xeb, 0x4a, 0x4e, 0x31, 0xd9, 0xf7, 0x84, 0x03, 0x07, 0x9d,
    0x12, 0xfd, 0x47, 0x9b, 0xb2, 0x56, 0xc0, 0x21, 0xc5, 0x9d, 0xe6, 0xeb, 0x72, 0x68, 0x7d,
    0xac, 0x7e, 0x1c, 0xb3, 0x6e, 0x45, 0x07, 0x31, 0x8c, 0x07, 0xee, 0x6b, 0x4c, 0x78, 0x3c,
    0x0d, 0xf3, 0xde, 0xa3, 0x3e, 0x20, 0xed, 0x81, 0x46, 0x65, 0xb9, 0xa1, 0x5a, 0x23, 0xc2,
    0xc8, 0xfa, 0x52, 0x49, 0xad, 0x09, 0x51, 0x7f, 0xd6, 0xe7, 0x7d, 0x6d, 0x53, 0x6f, 0x38,
    0x3b, 0x37, 0xee, 0x62, 0x0e, 0x64, 0xea, 0x2f, 0xf9, 0xbb, 0xa5, 0x6a, 0x93, 0x7d, 0x1b,
    0x2f, 0x1a, 0xc3, 0x86, 0x09, 0x16, 0xfd, 0xa5, 0xdf, 0xe1, 0xf9, 0x7d, 0x5a, 0x7f, 0x4d,
    0x49, 0x2a, 0xa9, 0x6b, 0x02, 0x74, 0x9a, 0xa0, 0x9e, 0x16, 0xa8, 0xf3, 0xf5, 0xa9, 0x3e,
    0xf7, 0x7b, 0x99, 0x50, 0x3f, 0xe9, 0x05, 0xd6, 0x5a, 0x3a, 0x0b, 0x5c, 0x3f, 0xd6, 0x6b,
    0xc5, 0x88, 0x1b, 0x86, 0x7d, 0xad, 0x9c, 0xd0, 0xe7, 0xbb, 0xc0, 0x1c, 0x50, 0xaa, 0xc5,
    0xb9, 0x74, 0x71, 0x2b, 0x8b, 0xf5, 0x35, 0xfb, 0x3a, 0x61, 0xaf, 0xdb, 0xe5, 0x56, 0xf3,
    0x11, 0x0e, 0xf3, 0x3b, 0x8c, 0x91, 0x41, 0xdf, 0x1d, 0xb0, 0x35, 0x8f, 0xb8, 0x6f, 0x20,
    0x30, 0x76, 0x73, 0x10, 0xf8, 0x7e, 0xee, 0x07, 0x68, 0xdd, 0x4b, 0x13, 0xfb, 0xa1, 0x3d,
    0xf6, 0x0a, 0xb0, 0xc6, 0xcd, 0x8b, 0xe2, 0xc0, 0xe8, 0xb7, 0xae, 0x20, 0x3d, 0xf4, 0x17,
    0xc4, 0x12, 0x26, 0x9c, 0xf7, 0x01, 0x7a, 0xeb, 0x12, 0xf4, 0xdc, 0xf1, 0x24, 0xc9, 0x9c,
    0x9f, 0x8d, 0xb3, 0xfe, 0xa7, 0x6b, 0xd8, 0xc1, 0xb9, 0x5f, 0xe2, 0x4e, 0x05, 0xec, 0xb1,
    0xea, 0xdd, 0x7d, 0x7d, 0xef, 0xa2, 0xab, 0xf6, 0x52, 0xd6, 0x48, 0xf5, 0xc0, 0x0e, 0x32,
    0x09, 0x63, 0x09, 0x35, 0xdc, 0x56, 0xd1, 0x5e, 0x10, 0x66, 0xdc, 0xce, 0x87, 0x32, 0x3d,
    0xb9, 0xc6, 0xe8, 0x7f, 0x6d, 0x2d, 0x79, 0x7e, 0x78, 0xf5, 0x1a, 0x8a, 0xce, 0x33, 0xad,
    0xea, 0x63, 0xcc, 0x69, 0x82, 0xf3, 0x57, 0x75, 0x56, 0x28, 0x7f, 0x43, 0xdd, 0xed, 0xfc,
    0xb6, 0xf3, 0x74, 0xd2, 0x39, 0x6a, 0x7d, 0x33, 0x6e, 0xc0, 0x49, 0x19, 0xbd, 0xbf, 0x3b,
    0x35, 0xe8, 0x60, 0xa3, 0x08, 0x71, 0x28, 0xfb, 0x08, 0xf8, 0x43, 0x7c, 0x5a, 0xee, 0x7c,
    0x1f, 0x2e, 0x55, 0x1f, 0xa9, 0x6d, 0xd2, 0x7f, 0x66, 0x7e, 0x1c, 0x57, 0xda, 0x0f, 0x0b,
    0xf0, 0x4f, 0xf2, 0xd5, 0x62, 0xdf, 0xd0, 0xa5, 0xd9, 0x6f, 0x9b, 0x6c, 0x1f, 0xf8, 0x06,
    0x64, 0xf1, 0x87, 0xca, 0x4b, 0xc0, 0x1a, 0x3a, 0x93, 0x77, 0xe1, 0xab, 0xac, 0xaf, 0xb1,
    0x36, 0x9c, 0xa5, 0xa5, 0x66, 0x07, 0xd6, 0xce, 0x09, 0xa9, 0x0f, 0x00, 0xd9, 0x72, 0xcc,
    0x28, 0x67, 0x81, 0xf3, 0x0b, 0xd0, 0x5e, 0x09, 0x2f, 0x52, 0x77, 0xc2, 0xfc, 0xb4, 0x98,
    0x2c, 0xf7, 0x8c, 0xf5, 0x73, 0x22, 0xf2, 0xc1, 0x60, 0x4d, 0x80, 0xdc, 0x7a, 0x44, 0x5c,
    0xbb, 0x9e, 0x7c, 0x0d, 0xd3, 0xd9, 0x34, 0xb7, 0xe6, 0x6b, 0x7a, 0xe2, 0x3c, 0x82, 0x9c,
    0x5d, 0x8c, 0xea, 0x59, 0x01, 0xcf, 0x9d, 0x02, 0xbd, 0x6a, 0x75, 0xfd, 0xad, 0x75, 0x4e,
    0x54, 0xbb, 0x34, 0x57, 0x87, 0xab, 0x38, 0x76, 0x87, 0x3c, 0xa9, 0xb4, 0x27, 0x0a, 0xe2,
    0x28, 0xee, 0x90, 0xa8, 0x7a, 0xcc, 0xd6, 0xfe, 0x74, 0x53, 0xe2, 0x71, 0xb8, 0xaf, 0x38,
    0x27, 0x63, 0xcf, 0x95, 0xe4, 0x20, 0x1b, 0xdf, 0xf9, 0xcd, 0x75, 0x9f, 0xe0, 0xec, 0x2d,
    0x37, 0x94, 0x2e, 0xdc, 0x39, 0x50, 0x1d, 0xbf, 0x19, 0xd8, 0x37, 0x40, 0x77, 0x84, 0x3b,
    0xf9, 0x72, 0x99, 0xfa, 0x43, 0x98, 0xe7, 0x06, 0xdf, 0xa5, 0xbc, 0x32, 0xbe, 0xab, 0x29,
    0xbc, 0xc0, 0xe6, 0x15, 0x7b, 0xc3, 0x71, 0x58, 0x4d, 0xd7, 0xb2, 0xe5, 0x1a, 0x80, 0x9e,
    0xf7, 0x3d, 0x40, 0x0c, 0xbd, 0xd6, 0x87, 0x00, 0x63, 0xd0, 0x07, 0x29, 0x9b, 0x38, 0x6f,
    0x64, 0x79, 0x9a, 0x53, 0xc2, 0xf5, 0x9d, 0x7f, 0xf4, 0x5c, 0xb0, 0x97, 0x25, 0xbf, 0x92,
    0xd8, 0xd2, 0xd8, 0x6d, 0x89, 0x0e, 0x56, 0x94, 0xab, 0x60, 0xe8, 0x54, 0xb2, 0x0e, 0xb7,
    0x0b, 0x51, 0x8b, 0x77, 0x6a, 0x71, 0x24, 0xed, 0xd9, 0xb4, 0x4e, 0xac, 0xfe, 0xac, 0xe2,
    0x3c, 0x57, 0xed, 0x79, 0x53, 0xa7, 0x49, 0x63, 0xd5, 0x8d, 0x2b, 0xfc, 0xbf, 0x6f, 0x8b,
    0xec, 0xa1, 0x7f, 0x12, 0x7d, 0xbf, 0x58, 0x7b, 0x77, 0xe9, 0xf8, 0xc0, 0xbf, 0x93, 0x21,
    0xc6, 0xdd, 0xb0, 0x9f, 0x58, 0x0f, 0x97, 0xf7, 0xd4, 0xbf, 0x58, 0xf7, 0xcd, 0x15, 0xf9,
    0xe4, 0x0f, 0x94, 0xf6, 0xa4, 0xad, 0x36, 0x12, 0xd7, 0x93, 0x07, 0x5d, 0x1e, 0x6c, 0xe8,
    0x3e, 0xee, 0xae, 0xca, 0x7c, 0x37, 0x53, 0x99, 0xa3, 0x99, 0xbe, 0xcf, 0xb5, 0xb1, 0xe1,
    0x62, 0x8d, 0x16, 0x8d, 0xb7, 0x86, 0x17, 0xf1, 0xce, 0x58, 0xe6, 0xa6, 0x69, 0xb1, 0x8e,
    0xc1, 0xeb, 0xa0, 0x3a, 0x28, 0xc9, 0x43, 0xd4, 0x31, 0x1d, 0x4b, 0xa7, 0xb2, 0x9e, 0x57,
    0xf1, 0x4f, 0x33, 0x7f, 0xde, 0x78, 0xe7, 0xbc, 0x7e, 0xa5, 0x5a, 0x9b, 0x6d, 0xb3, 0x3f,
    0x28, 0xf0, 0x4f, 0xc8, 0x17, 0xc8, 0x77, 0x6e, 0xe6, 0xc6, 0xb2, 0x4f, 0x07, 0x7d, 0x8c,
    0x1f, 0x69, 0x55, 0xe5, 0x30, 0x0e, 0xb9, 0x06, 0xfb, 0x4f, 0xe3, 0xdd, 0xf1, 0x9d, 0xee,
    0xa4, 0xfc, 0xd0, 0x47, 0xe0, 0xc3, 0x28, 0x5f, 0x28, 0x4f, 0xa0, 0xfd, 0xbe, 0x9a, 0x8f,
    0x7f, 0x72, 0x9d, 0x12, 0xe0, 0x37, 0xc0, 0x2f, 0x1e, 0xcf, 0xef, 0x66, 0x4d, 0x6c, 0xd0,
    0xe3, 0x07, 0xa2, 0x29, 0xf8, 0x9e, 0xf7, 0xf6, 0xf8, 0xf0, 0x8e, 0xf9, 0x5c, 0x78, 0xe7,
    0xd5, 0xaf, 0xa4, 0xbb, 0xa5, 0x5a, 0x93, 0x60, 0x27, 0xe6, 0xfa, 0x2f, 0x18, 0xf8, 0x9a,
    0x9c, 0x21, 0xf6, 0x05, 0xf8, 0xb7, 0x31, 0x80, 0x72, 0xbe, 0xdc, 0x5e, 0x54, 0xd1, 0x5f,
    0x65, 0x72, 0x01, 0xd3, 0xfa, 0x39, 0x60, 0xff, 0x15, 0xe6, 0x5b, 0xa5, 0x76, 0xa4, 0x93,
    0x8f, 0x6b, 0xd0, 0x6b, 0xcf, 0x4c, 0x2a, 0x8e, 0xa5, 0x6f, 0x57, 0x2e, 0x0e, 0xe4, 0x5d,
    0x3d, 0xb2, 0xc7, 0xf5, 0xbc, 0xb6, 0xa2, 0x7c, 0x2e, 0xfa, 0xdb, 0xab, 0xf6, 0x37, 0xd9,
    0x22, 0x3f, 0xe7, 0x94, 0x17, 0xca, 0x98, 0x18, 0xd3, 0x87, 0x66, 0x47, 0x03, 0x5d, 0x01,
    0x4c, 0xce, 0x31, 0xdc, 0xdf, 0x60, 0xff, 0xd4, 0xba, 0xdf, 0x63, 0xee, 0x72, 0xdf, 0xb6,
    0x5c, 0x1c, 0xbd, 0xd4, 0x2e, 0x56, 0x32, 0xe5, 0xef, 0xd1, 0xa7, 0xec, 0x3f, 0x60, 0x7c,
    0xd2, 0x0f, 0x1a, 0xcf, 0x06, 0xf7, 0x01, 0xff, 0x9f, 0xfd, 0x1b, 0xef, 0x3f, 0xf5, 0xfb,
    0x7b, 0x7c, 0x05, 0x0f, 0x7b, 0x15, 0x7d, 0x26, 0x9a, 0x63, 0x90, 0x61, 0x22, 0x0e, 0xa8,
    0xe3, 0xb6, 0xe5, 0xca, 0xbf, 0xef, 0x81, 0xf6, 0x12, 0xec, 0xbf, 0xda, 0xaf, 0x61, 0x6d,
    0x38, 0xbe, 0xe9, 0x3b, 0xe8, 0x2f, 0x28, 0xc9, 0xe7, 0xd3, 0xcf, 0xdb, 0x96, 0xd3, 0x87,
    0x0a, 0x5f, 0xc6, 0x1d, 0x2d, 0x67, 0xad, 0x83, 0xfd, 0xb6, 0xd0, 0xf7, 0x71, 0x46, 0x7f,
    0xf0, 0xbb, 0x9d, 0x65, 0x3f, 0xbc, 0xc2, 0x5e, 0x67, 0xb9, 0x18, 0xf7, 0x35, 0xfe, 0xe6,
    0xe7, 0xa0, 0x52, 0xcc, 0xe7, 0xc6, 0xb5, 0x08, 0xf4, 0xc3, 0xfe, 0x21, 0xe2, 0x38, 0x37,
    0x55, 0x0e, 0xf7, 0x28, 0xf1, 0x65, 0xde, 0x91, 0x16, 0xdb, 0x95, 0x7f, 0x1b, 0x66, 0x6c,
    0x39, 0x46, 0x38, 0x52, 0x7d, 0xb3, 0xf4, 0x7d, 0x41, 0xec, 0xa0, 0x03, 0xe7, 0xbc, 0x51,
    0x42, 0x3d, 0xbe, 0x92, 0xfa, 0xc9, 0x42, 0xd2, 0xe1, 0xa6, 0xa8, 0xc7, 0x53, 0x5c, 0xb1,
    0x2b, 0x3f, 0x95, 0x25, 0x4e, 0xcc, 0x7b, 0x19, 0xa8, 0xde, 0x8e, 0x72, 0x6e, 0x6f, 0x57,
    0x8e, 0xb2, 0xb1, 0x9c, 0x62, 0xbf, 0x51, 0x0d, 0xf7, 0xd9, 0x7b, 0xc3, 0x9e, 0xe7, 0xb2,
    0x41, 0xb6, 0x3e, 0x57, 0x6e, 0x4c, 0xcb, 0x5a, 0x66, 0x13, 0xf7, 0x8c, 0x72, 0xd3, 0xd6,
    0xd0, 0xba, 0x1f, 0x2a, 0xc6, 0xf4, 0xbd, 0x5f, 0xce, 0x7a, 0x06, 0x23, 0xd0, 0xed, 0x0a,
    0xce, 0xbd, 0xca, 0x6c, 0x79, 0xe4, 0x79, 0x59, 0x1b, 0x61, 0xde, 0xf0, 0xb4, 0x4f, 0xbe,
    0xb0, 0xd9, 0x3e, 0x66, 0xb5, 0x2d, 0xfa, 0x15, 0x40, 0xc7, 0xf3, 0x29, 0x4f, 0x12, 0x73,
    0xb9, 0xc6, 0x14, 0xcb, 0x21, 0xad, 0xfe, 0x9a, 0xac, 0x99, 0xe6, 0xa0, 0x7c, 0x44, 0x7f,
    0x62, 0x92, 0xdc, 0x31, 0x16, 0x04, 0xe8, 0x10, 0x6d, 0x1e, 0x51, 0xa3, 0xbf, 0xcf, 0x77,
    0xec, 0x2c, 0xee, 0x65, 0x54, 0xa1, 0x5a, 0xa6, 0xcb, 0x12, 0xda, 0x0d, 0x6a, 0xe1, 0x27,
    0x8c, 0x07, 0xef, 0x19, 0x6b, 0xcf, 0xd2, 0x1c, 0x82, 0x7e, 0x65, 0x3e, 0xf9, 0x42, 0x9f,
    0xf7, 0xa3, 0xcb, 0xf8, 0x4f, 0xbe, 0xd1, 0xe5, 0x29, 0xaf, 0x63, 0x34, 0xb1, 0xd9, 0x17,
    0xe7, 0x37, 0x33, 0xf4, 0xb1, 0x7e, 0x53, 0x6f, 0x76, 0x28, 0xb0, 0x51, 0x3d, 0xac, 0x55,
    0xba, 0xdd, 0x09, 0xeb, 0x03, 0x62, 0xac, 0x12, 0xe3, 0xd7, 0x14, 0x8b, 0xda, 0x90, 0xfe,
    0x75, 0x5a, 0x81, 0xd6, 0x16, 0xd5, 0x44, 0x60, 0x84, 0xb9, 0x1e, 0xae, 0xe8, 0xef, 0xc4,
    0xda, 0x03, 0xd0, 0x64, 0xb5, 0x71, 0xcc, 0xf6, 0x34, 0x2c, 0xca, 0x73, 0xca, 0xda, 0x1f,
    0x86, 0xac, 0x18, 0xac, 0x64, 0x6b, 0xd3, 0xf7, 0xc4, 0x77, 0x41, 0x7f, 0x96, 0xb5, 0xf4,
    0xcb, 0x18, 0xeb, 0xc7, 0x06, 0x64, 0xb3, 0xb6, 0x64, 0x1f, 0xf5, 0x80, 0x9f, 0xb3, 0xf4,
    0x52, 0x7d, 0x26, 0x41, 0xff, 0x4e, 0x28, 0xb6, 0x2c, 0xc6, 0xfc, 0x98, 0xe7, 0xb1, 0x53,
    0xaf, 0x28, 0x33, 0x3e, 0xf9, 0xcc, 0xe8, 0xdf, 0xff, 0x1f, 0x7b, 0xef, 0xbe, 0xd7, 0x38,
    0xb4, 0x09, 0xef, 0xdf, 0x7d, 0x15, 0x6a, 0xe6, 0xfb, 0x6d, 0x57, 0xcd, 0x54, 0x51, 0x3e,
    0xaa, 0xe8, 0xde, 0x7e, 0xdf, 0x01, 0x63, 0x83, 0x29, 0x30, 0xf8, 0x08, 0xb8, 0xab, 0xb7,
    0xb6, 0x84, 0xad, 0xb2, 0x2c, 0xb9, 0x2d, 0x19, 0x63, 0x66, 0xfb, 0x62, 0xf6, 0x56, 0xf6,
    0xbe, 0x88, 0x3c, 0x48, 0x99, 0x3a, 0x1b, 0x0c, 0x14, 0x34, 0xcc, 0xd0, 0x85, 0xe5, 0x54,
    0x64, 0x66, 0x64, 0x64, 0x64, 0x64, 0xc4, 0x13, 0x71, 0xbe, 0x50, 0x5c, 0x5f, 0x68, 0x73,
    0xc0, 0x41, 0xae, 0x34, 0x05, 0xfd, 0x8f, 0x9c, 0xe5, 0x1a, 0x9c, 0x4f, 0x0d, 0xc1, 0x6e,
    0xd2, 0x07, 0x9a, 0x67, 0xc5, 0xd7, 0xeb, 0x59, 0x9f, 0xa2, 0xec, 0xf2, 0xfe, 0x1d, 0x28,
    0x50, 0xee, 0x47, 0xeb, 0x11, 0xa2, 0x7d, 0x4e, 0x88, 0xc5, 0xa5, 0x98, 0xe4, 0x70, 0x7e,
    0x09, 0x79, 0x68, 0x22, 0x79, 0xc3, 0x0c, 0xf3, 0x81, 0x77, 0xfe, 0x47, 0x5c, 0x56, 0x8e,
    0x1e, 0xcc, 0x09, 0x41, 0xb1, 0xd6, 0x31, 0x26, 0x66, 0x79, 0x59, 0x8d, 0xe7, 0x25, 0xe6,
    0x79, 0x0b, 0x72, 0x94, 0xdf, 0x4b, 0xdf, 0x22, 0x56, 0x3b, 0xda, 0x27, 0x98, 0x3f, 0x31,
    0xeb, 0xa1, 0xec, 0x08, 0xf3, 0x34, 0xf1, 0xc3, 0x6c, 0x78, 0xf4, 0xa3, 0x8f, 0x85, 0x9f,
    0x83, 0xfa, 0x25, 0xc1, 0x78, 0xe4, 0x19, 0xfe, 0x6a, 0x5c, 0x2c, 0x79, 0x6c, 0x9e, 0xf9,
    0xb1, 0x06, 0x7e, 0x11, 0xce, 0x14, 0xbe, 0xaf, 0x2e, 0xc7, 0x20, 0x6e, 0x40, 0x7f, 0x89,
    0x4c, 0x72, 0xad, 0x7b, 0xdf, 0x53, 0x5e, 0xc2, 0xb8, 0xc8, 0x95, 0x78, 0x98, 0x9e, 0x75,
    0xf3, 0x4b, 0x75, 0xe0, 0x28, 0xac, 0x50, 0x15, 0x73, 0xbf, 0xf0, 0x71, 0xdc, 0xff, 0xf4,
    0xf5, 0x06, 0x9c, 0x03, 0x58, 0x57, 0x32, 0x8d, 0x92, 0x4e, 0xed, 0xdd, 0xaf, 0xdc, 0x92,
    0x3f, 0x1d, 0xd7, 0x4c, 0xfe, 0x7f, 0x29, 0x72, 0x50, 0x96, 0x7b, 0xf2, 0x5d, 0xc2, 0x1e,
    0x50, 0x00, 0xaf, 0x0d, 0xb9, 0xef, 0x25, 0xe2, 0xf3, 0x91, 0x7b, 0x6f, 0x72, 0xf7, 0x49,
    0x21, 0xe2, 0xaf, 0x85, 0xf1, 0x83, 0x68, 0x07, 0x26, 0xf8, 0xd0, 0xc6, 0x42, 0xb4, 0x03,
    0xfa, 0x8b, 0x13, 0xac, 0xe1, 0x94, 0x71, 0xbe, 0x44, 0x7b, 0x34, 0x95, 0x3d, 0x25, 0xe6,
    0x38, 0xf2, 0xd6, 0x87, 0xe8, 0x4f, 0x0a, 0xf2, 0x08, 0xf7, 0x03, 0xd8, 0x1b, 0x09, 0xad,
    0xc6, 0x5e, 0x19, 0xcf, 0x47, 0x68, 0xb7, 0x63, 0x76, 0x08, 0xb4, 0x57, 0x21, 0x26, 0xf1,
    0xd9, 0xf3, 0x49, 0x1e, 0xc9, 0x9b, 0x29, 0xfa, 0xda, 0x68, 0x18, 0x77, 0x04, 0x32, 0xad,
    0x68, 0x78, 0x87, 0x8a, 0xe5, 0x92, 0xee, 0x0b, 0xa6, 0x21, 0xff, 0xc8, 0x08, 0x79, 0xde,
    0xb2, 0xd7, 0x93, 0x91, 0xbc, 0xad, 0xfa, 0x7e, 0x2d, 0xa9, 0xee, 0xf0, 0x5e, 0x91, 0xed,
    0x4b, 0x7e, 0xa1, 0x8e, 0x52, 0xff, 0x7c, 0x27, 0x4f, 0x7c, 0x43, 0x62, 0xe2, 0x17, 0x39,
    0x29, 0x8b, 0xfb, 0x44, 0x7f, 0x28, 0x5f, 0x97, 0xc0, 0xd8, 0xb7, 0x0b, 0x12, 0xc7, 0x8f,
    0x73, 0xcd, 0xec, 0x2c, 0x64, 0xee, 0x44, 0x1b, 0x39, 0xa3, 0x83, 0xe3, 0x59, 0x73, 0x3c,
    0x0c, 0x39, 0x35, 0x05, 0x1a, 0x73, 0x61, 0x9b, 0x20, 0xae, 0x29, 0x8d, 0xdc, 0x85, 0x4a,
    0x64, 0x01, 0xe5, 0x5c, 0xe3, 0xa2, 0x2e, 0xe7, 0x94, 0x6f, 0xdb, 0x72, 0x7d, 0x05, 0x19,
    0xb7, 0x7d, 0xde, 0x11, 0xf4, 0x48, 0x22, 0x97, 0xf6, 0x06, 0x39, 0x0f, 0xdf, 0x67, 0x5b,
    0x49, 0x66, 0xed, 0xc7, 0x63, 0x35, 0x66, 0xa5, 0xfb, 0x28, 0x1c, 0xe3, 0xc4, 0xe2, 0xd8,
    0x96, 0x89, 0x79, 0x35, 0x6e, 0x23, 0xf0, 0xa6, 0x1b, 0xbc, 0x8f, 0x03, 0x23, 0x7c, 0x4f,
    0x19, 0xbb, 0xa8, 0x4b, 0x62, 0x0d, 0xe9, 0x79, 0x3f, 0x9c, 0xef, 0x99, 0xd2, 0xd7, 0x41,
    0x2c, 0x1f, 0xbf, 0x2f, 0x02, 0x63, 0xfa, 0x7e, 0xf8, 0x45, 0xd2, 0x58, 0x87, 0xb1, 0xd6,
    0x71, 0x08, 0x60, 0x62, 0xd7, 0xef, 0x84, 0x69, 0x94, 0x1c, 0x3b, 0xcb, 0xf1, 0x5b, 0x93,
    0x33, 0xcf, 0x37, 0xa1, 0xb6, 0x5f, 0xb9, 0x3d, 0xb9, 0xf5, 0x6c, 0xc0, 0x49, 0xb1, 0x93,
    0xfd, 0x3c, 0x7f, 0xad, 0x5d, 0xd4, 0x31, 0xce, 0xc1, 0xe7, 0x85, 0x4a, 0xde, 0x8c, 0xb2,
    0x87, 0xfc, 0x25, 0x98, 0x6f, 0x3b, 0xae, 0xb9, 0x4b, 0x63, 0x18, 0x15, 0x0b, 0xc2, 0xfb,
    0xf9, 0x63, 0x75, 0x29, 0x3e, 0x5b, 0x74, 0x3c, 0xbd, 0x67, 0x4f, 0x17, 0x63, 0xec, 0x4f,
    0xd6, 0x46, 0x48, 0x4f, 0xe1, 0xf4, 0x44, 0x9d, 0x85, 0xe0, 0x3c, 0x7c, 0x2d, 0xd5, 0x5f,
    0xf4, 0x9d, 0xf2, 0xe5, 0x53, 0x01, 0x7d, 0x64, 0xaa, 0x8e, 0x7a, 0x31, 0x35, 0x99, 0x7d,
    0x4c, 0xee, 0x2d, 0x26, 0x2c, 0x96, 0xa7, 0xc5, 0xf5, 0xf9, 0x26, 0xc3, 0xff, 0x1d, 0x5d,
    0x38, 0x8b, 0x82, 0x89, 0x76, 0xbe, 0x1c, 0xe5, 0x79, 0x0d, 0xce, 0x25, 0xd4, 0x9e, 0x20,
    0x17, 0xf3, 0x7b, 0xec, 0xdb, 0x28, 0xff, 0x46, 0x69, 0xce, 0xbc, 0x18, 0x85, 0x4a, 0xd4,
    0x8c, 0x70, 0xcf, 0x1a, 0xce, 0xe1, 0x1c, 0x71, 0x57, 0x72, 0x2d, 0xc5, 0x3e, 0x90, 0xf2,
    0xbd, 0x20, 0xf6, 0x8e, 0xfb, 0xe6, 0x94, 0xed, 0x05, 0x1f, 0x04, 0xdd, 0xf9, 0xa3, 0xef,
    0xe2, 0xfb, 0xcc, 0x93, 0x18, 0x2a, 0xe2, 0xdb, 0x52, 0xe2, 0xef, 0x92, 0xb6, 0x71, 0x8e,
    0x37, 0x16, 0xe4, 0xcc, 0x04, 0x72, 0x5a, 0xec, 0xdb, 0x67, 0xc4, 0x6f, 0x22, 0xbe, 0x46,
    0xae, 0xc9, 0xcf, 0x34, 0x3c, 0x67, 0x2e, 0xcd, 0x4f, 0xc0, 0x65, 0x01, 0xc9, 0x7d, 0x47,
    0xbc, 0x89, 0x6e, 0xa6, 0x1e, 0xc2, 0x7a, 0xa9, 0x7a, 0x38, 0x6e, 0xa6, 0x9f, 0x33, 0xc1,
    0x3f, 0x20, 0x0d, 0x24, 0x67, 0x29, 0xf0, 0xf1, 0xb4, 0x57, 0x24, 0x76, 0x8f, 0x5b, 0x9a,
    0xba, 0x6e, 0x66, 0x9f, 0x87, 0xda, 0x7a, 0xe7, 0xa1, 0xe2, 0xf9, 0x1e, 0x7d, 0x08, 0xc6,
    0x27, 0xce, 0x1d, 0x1d, 0x37, 0x7c, 0x87, 0xdf, 0xe3, 0xee, 0xc5, 0xca, 0x7f, 0xcf, 0x5e,
    0x9d, 0xe3, 0x7c, 0x24, 0xc5, 0x9e, 0xf9, 0x38, 0x88, 0xe6, 0x2d, 0xbf, 0x3b, 0x68, 0xb4,
    0xfc, 0xdc, 0xba, 0x2d, 0xce, 0xd9, 0x55, 0xd9, 0x6b, 0xbb, 0xcc, 0xed, 0x11, 0x24, 0x6e,
    0xfd, 0x36, 0x42, 0x7c, 0x8b, 0xb6, 0x58, 0x6a, 0x87, 0x23, 0xb6, 0xa2, 0x8b, 0x13, 0x7f,
    0x28, 0x74, 0x73, 0x9f, 0x2b, 0x1c, 0xb3, 0xaf, 0x34, 0xeb, 0x5d, 0x98, 0xb7, 0x9f, 0xbd,
    0xa2, 0xb1, 0xa0, 0x3f, 0xd6, 0x91, 0x6f, 0xe0, 0xac, 0xbd, 0x6b, 0xa3, 0xdd, 0x0e, 0xfd,
    0x71, 0x6d, 0x06, 0xf2, 0x74, 0x7e, 0xc3, 0x7b, 0x6a, 0x90, 0x87, 0xdb, 0xfe, 0xb3, 0x20,
    0x16, 0xee, 0x07, 0xa8, 0x8b, 0x0d, 0xad, 0x08, 0x3e, 0xb3, 0x7c, 0x9b, 0x33, 0xa1, 0x79,
    0x77, 0x87, 0x27, 0xdf, 0xa6, 0xfe, 0x33, 0x09, 0x7b, 0x38, 0x94, 0x43, 0x32, 0xbd, 0xfe,
    0xee, 0xe4, 0xc8, 0xf4, 0x63, 0xb8, 0xe8, 0xef, 0x48, 0x7a, 0x2f, 0x62, 0xdd, 0xa1, 0x5f,
    0xa7, 0xab, 0x40, 0xfd, 0x11, 0xb9, 0xa5, 0xa1, 0x9c, 0x29, 0xd1, 0x14, 0xd9, 0x9f, 0xdb,
    0xee, 0x0f, 0x9d, 0xe3, 0xb9, 0x0a, 0x7b, 0xc1, 0xe7, 0xb2, 0x26, 0xf0, 0x3b, 0x3f, 0xd3,
    0xa6, 0xb5, 0xf2, 0xe5, 0x44, 0x9a, 0x23, 0x66, 0x23, 0x86, 0x79, 0xc5, 0x3c, 0xec, 0xf6,
    0x41, 0x8e, 0x49, 0xc2, 0xb5, 0x74, 0xb4, 0x4c, 0xea, 0x1b, 0xc6, 0x29, 0x55, 0xf1, 0xee,
    0x6e, 0xee, 0x27, 0x88, 0xb9, 0xd2, 0xcb, 0x90, 0xbf, 0x33, 0x72, 0x1d, 0x18, 0xf7, 0x59,
    0xb5, 0xd7, 0x75, 0x70, 0xbf, 0x75, 0x50, 0xe6, 0xb2, 0x11, 0x63, 0x20, 0xaf, 0x0e, 0x17,
    0xbc, 0x42, 0xe5, 0xd6, 0x60, 0xca, 0x73, 0x7c, 0xb1, 0x5f, 0x7f, 0x0c, 0x49, 0x6c, 0x28,
    0x68, 0xec, 0xde, 0x9e, 0x4a, 0x34, 0xf8, 0x7a, 0x83, 0x9c, 0xf7, 0x3a, 0xc4, 0xd3, 0x61,
    0xbf, 0x5c, 0x8d, 0xa7, 0x1b, 0x3c, 0x5e, 0xf0, 0x0e, 0x6b, 0x81, 0xf7, 0x4f, 0x7e, 0x67,
    0xce, 0xbf, 0x77, 0x0e, 0x8f, 0xeb, 0x9f, 0x14, 0xf7, 0x50, 0x8e, 0xca, 0x9f, 0x7d, 0x97,
    0x16, 0x3c, 0xdb, 0xa3, 0xfe, 0x74, 0x43, 0xfd, 0x46, 0x0f, 0x8e, 0x46, 0x14, 0xe7, 0xf1,
    0x10, 0x77, 0x7b, 0x74, 0xeb, 0xe5, 0x0e, 0x92, 0x62, 0x51, 0x44, 0xbc, 0xdd, 0xba, 0xe8,
    0xbe, 0x0f, 0xe7, 0xe0, 0x6f, 0x2a, 0xf7, 0x65, 0x67, 0xd8, 0x43, 0x1e, 0x0e, 0x2d, 0x8f,
    0x35, 0x42, 0x58, 0x03, 0x7e, 0xcc, 0xaa, 0x29, 0x62, 0x84, 0x91, 0xbb, 0xd3, 0x06, 0xb5,
    0x11, 0x0c, 0x59, 0x53, 0xe7, 0xb8, 0xb8, 0x18, 0xe3, 0x21, 0xe9, 0x11, 0x2c, 0x46, 0xa5,
    0x77, 0xed, 0xc5, 0x8d, 0x4b, 0x79, 0xdd, 0x89, 0xef, 0x34, 0xc6, 0xf3, 0x97, 0x8e, 0x8a,
    0xb9, 0xc7, 0xe2, 0x57, 0xcb, 0x5b, 0xf3, 0x24, 0x0c, 0x58, 0x01, 0x47, 0x60, 0xff, 0xf2,
    0xd4, 0xc2, 0xb1, 0x6a, 0x4c, 0x08, 0xee, 0x65, 0x84, 0x0d, 0x63, 0x77, 0x7e, 0x6c, 0x94,
    0x3c, 0xa7, 0xa0, 0x8c, 0xcb, 0x44, 0xfc, 0x24, 0x05, 0x7d, 0x9a, 0xe4, 0xf7, 0xa6, 0x7e,
    0xe4, 0x5c, 0xed, 0x61, 0xe1, 0x82, 0x1e, 0x8b, 0x7d, 0xaf, 0x3a, 0x11, 0xb9, 0xc8, 0x5a,
    0x27, 0x4a, 0xb7, 0x04, 0x47, 0xf3, 0x02, 0x71, 0x07, 0x78, 0x6e, 0xc1, 0x23, 0x13, 0xf3,
    0x69, 0xb0, 0x56, 0x48, 0x2c, 0xd2, 0x64, 0x90, 0x9e, 0x3b, 0x85, 0xdf, 0x2f, 0xe5, 0x64,
    0x1a, 0x96, 0x79, 0x76, 0x39, 0x99, 0xe2, 0x1d, 0xc0, 0x09, 0xa7, 0xe5, 0x33, 0xbd, 0xd3,
    0x73, 0x05, 0x9e, 0x87, 0xb1, 0xad, 0x1b, 0x32, 0x16, 0xd0, 0xbe, 0xa8, 0xcb, 0x3b, 0x24,
    0xc2, 0xea, 0xa2, 0xef, 0xfc, 0x0e, 0xcf, 0xbf, 0xe5, 0xcb, 0x43, 0x56, 0x87, 0x51, 0x22,
    0xe5, 0x2e, 0x91, 0x6f, 0x23, 0x71, 0x2d, 0xd0, 0x98, 0x80, 0x40, 0xae, 0x7b, 0x7c, 0xae,
    0xbb, 0x1b, 0x82, 0x65, 0x2a, 0xca, 0x3b, 0xcf, 0x67, 0x78, 0x17, 0x7d, 0x64, 0x23, 0xce,
    0x64, 0x2c, 0x12, 0xf1, 0xb9, 0xa8, 0xff, 0xc0, 0xa5, 0x97, 0xf7, 0x4a, 0xc4, 0x3f, 0x0a,
    0xfb, 0xa3, 0xdd, 0x27, 0xcf, 0xec, 0x15, 0x23, 0xc9, 0x66, 0x48, 0xce, 0x52, 0xe1, 0xdc,
    0x1d, 0x8f, 0x8e, 0x07, 0x9d, 0x2f, 0x8e, 0x3d, 0xc1, 0xb0, 0xe4, 0x47, 0x4b, 0x36, 0x37,
    0x7f, 0x28, 0xf7, 0x60, 0x8d, 0x77, 0x48, 0x2e, 0xed, 0xe8, 0x98, 0xfb, 0x4b, 0xc2, 0xcf,
    0x5f, 0x04, 0x07, 0x9b, 0x94, 0xff, 0x5c, 0x16, 0xc7, 0x92, 0xbe, 0x7b, 0x6c, 0x61, 0xae,
    0xa3, 0x0e, 0xf6, 0xe7, 0x33, 0xa5, 0x5f, 0xd8, 0xeb, 0xbc, 0xfd, 0xca, 0xc0, 0xf7, 0x8f,
    0x07, 0x1d, 0x77, 0x21, 0xbe, 0xc0, 0xcf, 0x3b, 0x26, 0xd9, 0xb4, 0xab, 0x1e, 0x3d, 0xc1,
    0x7a, 0x84, 0x3e, 0x98, 0x0f, 0xb4, 0xf1, 0x11, 0xbe, 0xf2, 0xd6, 0x59, 0x3c, 0xae, 0x2a,
    0x6b, 0x97, 0xf3, 0x6b, 0x55, 0x8e, 0x4a, 0x21, 0x4c, 0xe7, 0x6c, 0xeb, 0x84, 0xfb, 0x57,
    0x5a, 0x30, 0x1e, 0x5b, 0xce, 0x09, 0xf0, 0x68, 0x73, 0xd0, 0xe2, 0xe3, 0x2f, 0xdb, 0x38,
    0x04, 0x3b, 0x00, 0xf5, 0x1f, 0xcc, 0x65, 0x49, 0xf3, 0xd6, 0xb1, 0x18, 0x6c, 0x62, 0x9f,
    0x73, 0x50, 0xc3, 0xcb, 0xe1, 0x16, 0xb4, 0xd9, 0x3d, 0xc2, 0x3c, 0x5c, 0x20, 0x06, 0x01,
    0x57, 0x60, 0x8e, 0xf9, 0x5c, 0xd4, 0xd8, 0xfb, 0xb4, 0x13, 0x79, 0x5d, 0xe5, 0xb2, 0x67,
    0xa1, 0xdf, 0xd1, 0xb5, 0xe8, 0xf9, 0xb8, 0x90, 0xf5, 0x30, 0x9c, 0xa6, 0xc8, 0x2d, 0x42,
    0xe0, 0xf7, 0xe2, 0xc7, 0x7b, 0x92, 0xf7, 0x4b, 0xa4, 0x4f, 0x52, 0x2c, 0xdf, 0x33, 0xdc,
    0x54, 0x39, 0x77, 0x5e, 0x59, 0xef, 0xb0, 0xb6, 0x2b, 0x18, 0xcf, 0xd2, 0x5d, 0x5e, 0x9e,
    0x6c, 0xce, 0x9b, 0xc4, 0xf6, 0x16, 0x3b, 0xd6, 0xc4, 0x1f, 0xc8, 0x93, 0xe3, 0x41, 0x9d,
    0x92, 0xbf, 0x65, 0xdf, 0x36, 0xd4, 0x45, 0x6d, 0x59, 0x77, 0x26, 0xcf, 0xf3, 0x34, 0xb6,
    0x8c, 0x9d, 0xdc, 0x65, 0xfb, 0x81, 0xef, 0x8f, 0x16, 0x35, 0x4f, 0x64, 0x9f, 0x4a, 0xc4,
    0xbe, 0xeb, 0x1c, 0x55, 0x44, 0x9f, 0x16, 0xc2, 0x9b, 0xf1, 0xf3, 0xb3, 0x25, 0xe6, 0xc6,
    0x58, 0x8a, 0x44, 0xbf, 0x28, 0x22, 0xb6, 0x39, 0xdd, 0x4b, 0x63, 0xef, 0xaa, 0xa6, 0x61,
    0x24, 0xe5, 0x4a, 0xc9, 0x38, 0x37, 0x8f, 0xb9, 0x0e, 0x22, 0xe2, 0x04, 0x50, 0x07, 0x9b,
    0x3c, 0x07, 0xac, 0x7c, 0xa7, 0x70, 0x11, 0xe4, 0x41, 0x92, 0xbf, 0x99, 0xd8, 0x99, 0x2e,
    0x42, 0x0c, 0xeb, 0xa3, 0x8f, 0xf3, 0xab, 0xdc, 0x7f, 0x78, 0xb9, 0x8f, 0x58, 0xf1, 0x25,
    0xd7, 0xd5, 0xab, 0xf8, 0x77, 0x0a, 0x12, 0x4f, 0x83, 0x0e, 0x83, 0xb9, 0xd2, 0xf9, 0xd8,
    0xb9, 0x9e, 0x13, 0x81, 0x61, 0x82, 0xfe, 0x26, 0x3c, 0x17, 0xa2, 0x97, 0xd7, 0x40, 0x1e,
    0x72, 0xdf, 0xd8, 0x97, 0x7d, 0x46, 0x23, 0xe2, 0x2e, 0x65, 0xcc, 0x3e, 0x79, 0x3d, 0xf3,
    0x87, 0x10, 0xed, 0x9e, 0x0e, 0x18, 0x85, 0x91, 0x7c, 0x17, 0x3a, 0x49, 0x0c, 0xfc, 0x61,
    0x36, 0xfd, 0x1e, 0x2e, 0x6e, 0x0f, 0x4e, 0xa2, 0x95, 0x8d, 0x77, 0x28, 0xdf, 0x5f, 0xec,
    0x49, 0x99, 0xf2, 0x13, 0xb7, 0x89, 0xa3, 0x8e, 0x18, 0x95, 0x2f, 0x30, 0xe2, 0x6c, 0x47,
    0x7f, 0xf0, 0x2c, 0x2a, 0xd7, 0xe7, 0xfb, 0xa5, 0xf0, 0x7d, 0xc6, 0xb7, 0x4d, 0x85, 0x62,
    0x68, 0xdb, 0x61, 0x4c, 0x9f, 0xa8, 0x3d, 0x4a, 0xcc, 0x8f, 0xe8, 0xe5, 0xab, 0x93, 0xe4,
    0xf8, 0xae, 0x85, 0xca, 0xe7, 0x90, 0x2d, 0x38, 0xe2, 0xbc, 0x15, 0xbc, 0x8b, 0x0a, 0x9d,
    0xf8, 0x1d, 0x3f, 0x7f, 0x97, 0xe0, 0x38, 0x24, 0xfa, 0x60, 0x09, 0xb1, 0x7e, 0x2c, 0x9f,
    0x38, 0x3f, 0x44, 0xd1, 0xbb, 0x93, 0xa1, 0x77, 0x4b, 0x23, 0x5c, 0x6b, 0x03, 0xea, 0x4b,
    0xf9, 0x54, 0xe1, 0xfc, 0xf5, 0xc9, 0x77, 0x6e, 0x11, 0xcf, 0xe8, 0x88, 0x25, 0x8c, 0xf1,
    0x03, 0xb4, 0x1d, 0x9c, 0xf7, 0x4a, 0xfe, 0xbd, 0x79, 0x95, 0xe0, 0xc8, 0xb3, 0xf6, 0xa7,
    0x23, 0x8f, 0xb6, 0x0a, 0x92, 0x13, 0x06, 0xce, 0xa6, 0xc4, 0x4e, 0x39, 0xb0, 0xc6, 0x73,
    0x2e, 0x03, 0xe3, 0xa0, 0x91, 0x1e, 0xbc, 0x63, 0x84, 0xf1, 0x26, 0x79, 0x91, 0x19, 0x3e,
    0x67, 0xc4, 0xd9, 0xb1, 0x8e, 0xd0, 0x16, 0x30, 0x95, 0xf2, 0x05, 0x1f, 0x52, 0xcc, 0xaf,
    0x32, 0xc5, 0xde, 0xe2, 0xb9, 0x65, 0xf8, 0x3a, 0xb8, 0x28, 0x1f, 0x11, 0x5c, 0x58, 0x4e,
    0x0f, 0x6d, 0x3b, 0xe7, 0x44, 0x07, 0xc5, 0xfc, 0x04, 0x40, 0xff, 0x18, 0x74, 0x99, 0x9d,
    0xcc, 0x1d, 0xe2, 0x6c, 0x00, 0xbf, 0x9b, 0xd0, 0xcf, 0xf4, 0x3b, 0xea, 0xce, 0x64, 0xe7,
    0x4b, 0x8e, 0xad, 0xac, 0x63, 0xdd, 0x14, 0xd3, 0x83, 0xe4, 0x80, 0x20, 0xd8, 0x5d, 0x21,
    0x29, 0xfa, 0xfd, 0x30, 0xdb, 0x2b, 0x8d, 0x87, 0x4b, 0xbc, 0xd7, 0x98, 0x63, 0x0c, 0x23,
    0xf1, 0xe1, 0x9c, 0xe0, 0xfd, 0xc4, 0x69, 0xe0, 0x59, 0xca, 0x1d, 0x25, 0x9b, 0xd7, 0xe4,
    0x5c, 0x30, 0xac, 0x30, 0x7e, 0x5f, 0x3b, 0x3e, 0x16, 0x73, 0x96, 0xee, 0x6f, 0x0d, 0x4f,
    0x63, 0xfd, 0x98, 0x0d, 0xda, 0x64, 0x78, 0xf7, 0x41, 0x7f, 0x85, 0xf0, 0xbd, 0x6c, 0xab,
    0xd8, 0xc9, 0x79, 0x71, 0x4c, 0x1e, 0x46, 0x4b, 0x04, 0x9e, 0x84, 0x7f, 0xa6, 0xc0, 0xbb,
    0xf4, 0x39, 0xcd, 0xf5, 0xa4, 0xfb, 0x93, 0xa3, 0xeb, 0xbe, 0x1f, 0xcb, 0x1c, 0x85, 0xf5,
    0x7a, 0xe1, 0xae, 0x5d, 0xbb, 0xe0, 0xfd, 0x2f, 0x71, 0xbf, 0x5f, 0xe2, 0xe3, 0x12, 0xb0,
    0xe6, 0x54, 0xbc, 0x0f, 0x5b, 0x32, 0xfc, 0xb9, 0x8b, 0xa3, 0x25, 0xfa, 0xbe, 0x1d, 0xe5,
    0x53, 0xc4, 0x66, 0x43, 0x5e, 0x0d, 0xc7, 0xce, 0x0a, 0x71, 0x3c, 0x79, 0xd2, 0x7f, 0xc1,
    0xcb, 0xcf, 0x13, 0x1c, 0x7f, 0xce, 0xa3, 0x21, 0x38, 0xaf, 0x01, 0x1f, 0x7b, 0xd0, 0xb1,
    0x5e, 0x1f, 0xe7, 0x7d, 0xf4, 0xef, 0x81, 0x39, 0xf1, 0x62, 0x4f, 0x26, 0xd2, 0x78, 0x0f,
    0xd0, 0x6f, 0x29, 0x6c, 0x8b, 0x89, 0xee, 0x4b, 0x41, 0x7e, 0xb7, 0x7f, 0xd1, 0xa5, 0x7a,
    0x6b, 0xf7, 0x5f, 0xb5, 0xfd, 0x5d, 0xd9, 0x46, 0xed, 0xfb, 0xec, 0x87, 0xec, 0xfa, 0x82,
    0x27, 0xfb, 0x82, 0x23, 0x1d, 0xc5, 0x48, 0xb9, 0xe4, 0x9f, 0x73, 0x50, 0xef, 0x16, 0xf2,
    0x12, 0x3d, 0xa5, 0xb5, 0x37, 0x83, 0x35, 0x54, 0x24, 0x18, 0x26, 0x94, 0x47, 0xb8, 0x1f,
    0x2c, 0xf7, 0x85, 0x7c, 0x15, 0x74, 0x7f, 0x8d, 0xc2, 0x31, 0x09, 0x60, 0xe6, 0x32, 0xdb,
    0xcb, 0xaa, 0x4f, 0xd5, 0xf6, 0xb8, 0x58, 0x37, 0x22, 0x62, 0x13, 0x0f, 0x7a, 0xd7, 0xfd,
    0x3f, 0xee, 0x22, 0x79, 0x3f, 0xc2, 0x3c, 0xd7, 0xc4, 0x67, 0xba, 0x54, 0xbf, 0xbd, 0xf4,
    0xbb, 0x22, 0xee, 0x09, 0x41, 0x06, 0x75, 0x89, 0x5e, 0x14, 0x6e, 0x3b, 0x2a, 0x4e, 0x89,
    0xc9, 0xe9, 0x65, 0x7e, 0x29, 0x7c, 0xdc, 0x48, 0x3e, 0xe7, 0xd3, 0xf6, 0xa0, 0x20, 0xe9,
    0x0c, 0x0f, 0x80, 0xc4, 0x40, 0x92, 0xbc, 0xea, 0x3e, 0xa6, 0x76, 0x90, 0xce, 0x50, 0x1e,
    0xb8, 0x71, 0x29, 0xc7, 0xfb, 0xd1, 0x81, 0x0c, 0xbd, 0x26, 0x7e, 0x72, 0xb7, 0x27, 0xb7,
    0x6c, 0x87, 0x19, 0xd2, 0xbb, 0x18, 0x86, 0x23, 0xc6, 0x49, 0xf6, 0x60, 0x5f, 0x19, 0x26,
    0xfc, 0x7b, 0x6b, 0x9c, 0x9d, 0x49, 0x4a, 0x82, 0x5f, 0x05, 0xf5, 0x4d, 0x09, 0xe0, 0xa3,
    0xf4, 0x3b, 0xb0, 0x07, 0x77, 0x19, 0x1d, 0x63, 0x61, 0x9e, 0x84, 0xf5, 0x11, 0x83, 0x25,
    0xdd, 0x5f, 0x8a, 0xbe, 0x1f, 0xbe, 0x1d, 0x3f, 0x1c, 0x83, 0x44, 0x74, 0x53, 0xaf, 0x7d,
    0x17, 0x5c, 0xe0, 0xfd, 0x64, 0x3c, 0xb5, 0x93, 0x6b, 0x15, 0xc7, 0xbe, 0xb5, 0x83, 0xf2,
    0x73, 0x2b, 0x5d, 0x9f, 0xb6, 0x87, 0xcb, 0xe4, 0x7b, 0x73, 0xd4, 0xf3, 0xa0, 0x8f, 0x5c,
    0xef, 0x8f, 0xb7, 0x4e, 0x12, 0xf8, 0x39, 0x3e, 0xef, 0xac, 0xb4, 0x46, 0xf6, 0x61, 0xad,
    0x3d, 0xb9, 0x4e, 0xc1, 0xf7, 0x35, 0x6b, 0x9b, 0x47, 0x23, 0x3c, 0x57, 0x05, 0xd7, 0x90,
    0x03, 0x76, 0x6f, 0x8e, 0x0d, 0x7a, 0x97, 0x51, 0x2b, 0xd7, 0x89, 0x7f, 0x37, 0xc5, 0xee,
    0x5d, 0xac, 0x9c, 0xfb, 0x17, 0xfa, 0x55, 0xd5, 0xf8, 0x7d, 0x1d, 0x9c, 0x4b, 0x48, 0xfe,
    0x9a, 0x87, 0xce, 0xe4, 0x7b, 0x13, 0xc9, 0x8d, 0x4e, 0xe6, 0xbb, 0x77, 0xcd, 0xcf, 0x87,
    0x67, 0xe6, 0x33, 0xe8, 0x22, 0x47, 0x05, 0x5e, 0xfe, 0xc8, 0x3c, 0xbe, 0x20, 0x38, 0x60,
    0x7a, 0x67, 0x65, 0x0f, 0x4f, 0x0c, 0x76, 0x1f, 0x51, 0xde, 0x05, 0x59, 0x55, 0x9d, 0x21,
    0xb4, 0x4a, 0x73, 0x38, 0xd8, 0x9f, 0x5b, 0xbb, 0xee, 0x19, 0xd1, 0x9d, 0x3a, 0xc3, 0x36,
    0xa9, 0x61, 0x7d, 0x4c, 0x3c, 0x1c, 0x30, 0xf8, 0xbb, 0x4f, 0xee, 0x23, 0xb4, 0x29, 0xea,
    0x40, 0x03, 0xea, 0x4a, 0x3c, 0xef, 0xd1, 0xb8, 0x5f, 0xd4, 0xe6, 0x24, 0x2f, 0x73, 0x81,
    0x71, 0x92, 0x33, 0x14, 0xde, 0x89, 0xa0, 0xdc, 0xe2, 0x72, 0xbe, 0x74, 0xba, 0x5f, 0xa3,
    0x15, 0x13, 0xf0, 0x7c, 0x60, 0xcd, 0xb8, 0xec, 0x7e, 0x08, 0x6d, 0xa7, 0xe4, 0x9d, 0x04,
    0xbc, 0x68, 0xff, 0x25, 0x7f, 0xad, 0x4c, 0xa0, 0x7f, 0x18, 0x47, 0x82, 0xff, 0xfa, 0x79,
    0xd8, 0x5c, 0x89, 0xfe, 0xae, 0x57, 0x9e, 0xae, 0x4c, 0xb1, 0x50, 0x18, 0x0e, 0xc1, 0xf8,
    0x9c, 0x8f, 0x8f, 0x70, 0x2d, 0x52, 0xbc, 0xb2, 0x02, 0xe2, 0x95, 0xdd, 0x60, 0x9c, 0xd0,
    0xe2, 0x0c, 0xee, 0xc9, 0x33, 0x7f, 0x8c, 0xe9, 0x1a, 0x6e, 0x14, 0x46, 0xe8, 0x57, 0x2d,
    0x45, 0xac, 0x7f, 0x99, 0x15, 0x8d, 0x0f, 0x47, 0x71, 0x80, 0x28, 0x5e, 0x41, 0x0f, 0x7d,
    0x30, 0x87, 0x78, 0xb1, 0x4b, 0x73, 0x63, 0x1f, 0x60, 0xae, 0xc5, 0x2a, 0xe2, 0x26, 0x98,
    0x56, 0x92, 0x7d, 0xbe, 0x89, 0xb1, 0x79, 0x44, 0x4f, 0xee, 0x1e, 0xec, 0xd0, 0x7c, 0xc8,
    0x3c, 0x1e, 0xe1, 0x83, 0xc6, 0x78, 0x6e, 0x35, 0xcc, 0xa8, 0x03, 0x92, 0xeb, 0xea, 0x5a,
    0x73, 0x4f, 0x31, 0xe8, 0x90, 0x87, 0xb8, 0xec, 0x23, 0x39, 0xa2, 0x88, 0x3f, 0xac, 0xe0,
    0x04, 0x67, 0x63, 0xc4, 0x4a, 0xfb, 0x26, 0xf9, 0x56, 0xca, 0xf8, 0x77, 0xb7, 0x68, 0xeb,
    0x9d, 0x95, 0xec, 0xa7, 0x72, 0x79, 0x8e, 0xc1, 0x7c, 0x7b, 0x89, 0xfe, 0xee, 0x05, 0x5c,
    0x04, 0x37, 0x09, 0xe3, 0x0b, 0xd8, 0x9a, 0x81, 0xfe, 0x14, 0x48, 0x4c, 0xa4, 0x45, 0x62,
    0x09, 0xfe, 0xc3, 0x1e, 0xc1, 0xcc, 0xa6, 0xf1, 0x38, 0xb6, 0x1d, 0xa1, 0x2b, 0x7b, 0x72,
    0xfd, 0x80, 0xd0, 0x6f, 0x57, 0x25, 0x3e, 0x4a, 0x25, 0xab, 0x21, 0xb6, 0x6f, 0xd6, 0xf1,
    0x28, 0xe4, 0x29, 0x44, 0xdc, 0xa5, 0xbd, 0x36, 0xf1, 0x1d, 0xaf, 0xdc, 0x4c, 0x09, 0xb6,
    0xd0, 0xcc, 0x65, 0xd5, 0x60, 0xb9, 0xc0, 0xdc, 0xb2, 0xa5, 0xcb, 0x49, 0xe7, 0x03, 0xe8,
    0xa7, 0x97, 0xe7, 0x43, 0xa0, 0x8f, 0xc5, 0x12, 0xb7, 0xf6, 0x10, 0xef, 0xd2, 0xa1, 0x3e,
    0x20, 0x77, 0x0e, 0x60, 0xcd, 0x58, 0x98, 0x8b, 0x16, 0x71, 0xc2, 0x81, 0xdf, 0x5a, 0x95,
    0x62, 0xde, 0x31, 0xd1, 0x17, 0x8b, 0xb4, 0xd1, 0x3d, 0xc1, 0x1c, 0x74, 0x67, 0xb7, 0x92,
    0xfe, 0x30, 0x1a, 0xa7, 0x55, 0xa4, 0x1b, 0x31, 0x5b, 0x88, 0xaf, 0x3c, 0xd7, 0x27, 0x19,
    0x32, 0xfd, 0xca, 0x3a, 0x01, 0x9a, 0xf3, 0x23, 0x1d, 0xfe, 0x3e, 0x5b, 0xee, 0xda, 0xed,
    0xd5, 0x06, 0x9d, 0xfa, 0x4f, 0xaa, 0x53, 0x57, 0x40, 0x9e, 0x98, 0x30, 0x3e, 0xc4, 0x1f,
    0x8c, 0x71, 0x8a, 0x97, 0x78, 0x87, 0x7b, 0x80, 0x7a, 0x26, 0xf2, 0x66, 0x67, 0xf4, 0x39,
    0x7f, 0x45, 0x99, 0x4b, 0xdb, 0xc0, 0x78, 0x33, 0xec, 0x43, 0x4c, 0x0c, 0x1e, 0xf7, 0x2f,
    0x5e, 0x11, 0xd9, 0x20, 0xe2, 0xec, 0xba, 0xf7, 0xd1, 0xe9, 0xea, 0x24, 0x46, 0xe7, 0x10,
    0xd8, 0x74, 0x3c, 0xdc, 0x2b, 0xe0, 0xe3, 0x1c, 0xb9, 0x93, 0xa6, 0x18, 0xaf, 0xa2, 0xbf,
    0x37, 0x8e, 0xa1, 0x87, 0xbe, 0xa5, 0xdc, 0x76, 0xe1, 0xf9, 0xaf, 0x45, 0xdc, 0x57, 0x27,
    0x75, 0x5c, 0x4e, 0xd3, 0xd8, 0x0b, 0x01, 0x1b, 0xcf, 0xc7, 0x3e, 0x8b, 0xc6, 0x96, 0x40,
    0xcb, 0x42, 0xf5, 0x96, 0xf8, 0x87, 0xc8, 0xd8, 0x83, 0xa1, 0xb3, 0x94, 0x17, 0xf3, 0x16,
    0x56, 0x94, 0x8f, 0x72, 0x78, 0xbe, 0xf8, 0xb9, 0x8a, 0xfb, 0x29, 0xf3, 0x3d, 0x8e, 0xe3,
    0x31, 0x5c, 0x12, 0xc9, 0x16, 0x26, 0xe4, 0xa3, 0x09, 0xdb, 0x3e, 0xf8, 0xbd, 0x2f, 0x8d,
    0xf2, 0xfb, 0x19, 0xd0, 0x71, 0x7c, 0xac, 0x46, 0x61, 0x2c, 0x08, 0x96, 0x19, 0x8f, 0x27,
    0xb2, 0xd7, 0xbf, 0xa7, 0xbb, 0x28, 0x22, 0x96, 0x71, 0xdd, 0xa4, 0x58, 0x02, 0x01, 0x3b,
    0x40, 0x2f, 0x04, 0xd9, 0x9b, 0x13, 0x31, 0x09, 0xa3, 0xee, 0x83, 0x03, 0xf1, 0x73, 0x22,
    0xa2, 0xae, 0xb9, 0x13, 0xa9, 0x77, 0x06, 0xeb, 0x8f, 0xc0, 0xa0, 0x93, 0xce, 0x4d, 0xe5,
    0xa8, 0x76, 0x70, 0x2d, 0xb3, 0x18, 0xca, 0xe8, 0xb2, 0x9c, 0x17, 0xa2, 0xef, 0xad, 0x05,
    0x56, 0xd2, 0x1b, 0xf9, 0x38, 0x0d, 0x43, 0x34, 0x84, 0x71, 0x57, 0x59, 0xd9, 0xfd, 0x84,
    0x55, 0x58, 0xb7, 0x24, 0x77, 0x98, 0x89, 0x58, 0xb3, 0x77, 0x5c, 0xa7, 0xdc, 0x9f, 0xca,
    0xd5, 0x7a, 0xbe, 0xe5, 0x82, 0x3c, 0x40, 0xac, 0xc2, 0x11, 0xb9, 0x1f, 0x21, 0xd8, 0x7a,
    0x7f, 0x21, 0x76, 0x13, 0x35, 0x8c, 0xd7, 0x90, 0x21, 0xa6, 0x34, 0x0a, 0x23, 0xb8, 0xb3,
    0x7f, 0xeb, 0xc5, 0xe3, 0xd4, 0x55, 0xa6, 0xb7, 0xb0, 0x77, 0x1f, 0xc0, 0x33, 0xf7, 0x92,
    0x90, 0xa4, 0x35, 0xc5, 0xd6, 0x73, 0xc1, 0x9c, 0xe8, 0xad, 0x11, 0x9b, 0xdf, 0x4f, 0x0c,
    0x4c, 0x8a, 0x7f, 0xfc, 0x14, 0xc0, 0x45, 0xcf, 0x86, 0xc9, 0xc5, 0x78, 0xed, 0x98, 0xe7,
    0x2d, 0xef, 0x2e, 0xf9, 0xd9, 0x38, 0x29, 0x27, 0x3a, 0x9e, 0x53, 0xda, 0x16, 0xbb, 0x8f,
    0x98, 0x60, 0x51, 0x79, 0xda, 0xb1, 0xce, 0x0c, 0xe7, 0x21, 0x78, 0xdf, 0x14, 0xf2, 0xdc,
    0xa2, 0xce, 0x42, 0xfe, 0x1a, 0x13, 0xf4, 0x8a, 0x8c, 0x75, 0x1f, 0xf8, 0x98, 0xd9, 0x49,
    0xee, 0xa2, 0x7e, 0xbc, 0x73, 0x46, 0x70, 0xe0, 0x76, 0xe0, 0xec, 0x12, 0xbc, 0xb3, 0x88,
    0xf3, 0x83, 0x79, 0xe8, 0x10, 0xdc, 0xdd, 0x44, 0x9a, 0x29, 0xce, 0x3e, 0x2d, 0x07, 0x3b,
    0xe2, 0xa4, 0x3d, 0x76, 0x4f, 0xda, 0x15, 0xf8, 0x1d, 0x75, 0x40, 0x37, 0xdd, 0x3e, 0xd9,
    0x6c, 0x9f, 0x7c, 0xdb, 0x9d, 0xd7, 0xdb, 0x95, 0xfc, 0xb9, 0x31, 0xc8, 0x72, 0x86, 0xc4,
    0x71, 0x1f, 0xcf, 0xc4, 0xb6, 0x4f, 0xda, 0xb5, 0xdb, 0x8c, 0xf5, 0xa9, 0xa8, 0xff, 0xd2,
    0x82, 0x60, 0xcd, 0x85, 0x79, 0x68, 0x7f, 0x37, 0xdb, 0x98, 0x74, 0x39, 0x5f, 0x26, 0x8e,
    0x85, 0xe7, 0xec, 0x88, 0x98, 0xdf, 0x48, 0x7e, 0x6b, 0xc2, 0x1e, 0x01, 0x67, 0x0a, 0xee,
    0x98, 0xd8, 0xe7, 0xa3, 0x65, 0xd6, 0xb9, 0xe3, 0x7b, 0x62, 0xa9, 0x83, 0xb6, 0xf0, 0xc4,
    0x07, 0x6d, 0xd2, 0xd9, 0xea, 0x3d, 0x20, 0xf6, 0xf9, 0x56, 0xe2, 0x3a, 0x91, 0xfc, 0x4b,
    0xc6, 0x81, 0x61, 0x1a, 0x24, 0xf6, 0xff, 0xfc, 0xb6, 0xe2, 0xd4, 0xf6, 0x6b, 0xf0, 0x8b,
    0x19, 0x91, 0xb3, 0x27, 0xea, 0xf9, 0x91, 0xc7, 0x2f, 0xc8, 0x13, 0x9f, 0x5b, 0x0b, 0xd4,
    0xf8, 0xb9, 0x09, 0x63, 0xb0, 0x2c, 0xe8, 0x57, 0x96, 0xf8, 0x7f, 0xe4, 0x15, 0x92, 0x8b,
    0x79, 0xbc, 0x9c, 0x21, 0xcb, 0xcf, 0xba, 0x8d, 0x39, 0x3b, 0x4f, 0x6e, 0x31, 0xf6, 0x0f,
    0x9b, 0x08, 0x0e, 0x2e, 0xb1, 0x9b, 0xb4, 0x0f, 0x4c, 0xa3, 0xcd, 0x31, 0x40, 0xb0, 0x8c,
    0xa6, 0xe7, 0xb3, 0x0c, 0xe3, 0x80, 0xe7, 0xd6, 0xc4, 0xf6, 0x23, 0xfa, 0x5d, 0xdf, 0x6f,
    0x22, 0xe4, 0x5b, 0x2a, 0x3e, 0x68, 0x18, 0xff, 0x92, 0xda, 0xf8, 0x91, 0x17, 0x7b, 0xec,
    0x48, 0x30, 0x69, 0x2c, 0x12, 0xf7, 0xf7, 0x19, 0xb1, 0xa4, 0x07, 0x05, 0xd4, 0xdd, 0x8f,
    0x14, 0x03, 0x9b, 0xc8, 0x68, 0x16, 0xcb, 0xb0, 0x33, 0xea, 0x91, 0xfb, 0x79, 0x51, 0x97,
    0x7d, 0xf3, 0x90, 0xc4, 0x8c, 0xaf, 0x69, 0x0f, 0x6a, 0x2c, 0x4e, 0xf7, 0xf7, 0x12, 0xf6,
    0xbc, 0x0b, 0xeb, 0x51, 0x1f, 0xa6, 0x7c, 0xf3, 0xba, 0x05, 0xba, 0xa6, 0x5a, 0xac, 0x47,
    0x0d, 0x79, 0x63, 0x0e, 0xe7, 0x88, 0x19, 0xe6, 0x69, 0xe2, 0xf1, 0x50, 0xd4, 0x6e, 0x97,
    0x4f, 0x78, 0x3e, 0xd0, 0xb7, 0x72, 0x42, 0xef, 0xcc, 0xb5, 0x4e, 0x3f, 0x37, 0x1d, 0x5d,
    0x5c, 0xd8, 0x0f, 0x7d, 0xcc, 0x96, 0xa4, 0x79, 0x27, 0x34, 0x74, 0xb9, 0x6f, 0x74, 0x46,
    0xcc, 0x44, 0xbc, 0xa2, 0x04, 0x6c, 0x20, 0x1a, 0xf7, 0x20, 0xe8, 0x9d, 0x78, 0x2f, 0xb1,
    0x71, 0x51, 0x6e, 0x8e, 0x9a, 0x88, 0x19, 0x00, 0x7b, 0x11, 0x9e, 0xb1, 0xae, 0xca, 0x7b,
    0x1e, 0x16, 0x36, 0xcb, 0x7b, 0x70, 0x66, 0xc0, 0x9e, 0x5c, 0x31, 0x0f, 0x06, 0x68, 0x3f,
    0x34, 0x1d, 0xbd, 0xbd, 0xe2, 0x19, 0x24, 0xe6, 0xae, 0xa6, 0xc1, 0xf8, 0x0c, 0xf7, 0x70,
    0xd7, 0x7b, 0xbc, 0xe6, 0xe5, 0xdf, 0x88, 0x8a, 0xc7, 0x22, 0x18, 0x92, 0x25, 0x01, 0x1b,
    0xd6, 0x64, 0x85, 0xe2, 0x8a, 0x9c, 0x89, 0x34, 0xb6, 0x90, 0xe6, 0xaa, 0x81, 0x6b, 0xe0,
    0x7d, 0x85, 0xa9, 0x7e, 0xfe, 0xaf, 0xda, 0xe1, 0x02, 0xf4, 0xf9, 0x1e, 0xe8, 0x0d, 0xa8,
    0xdc, 0x94, 0xe4, 0x7c, 0x73, 0x51, 0x98, 0xb0, 0x0c, 0xab, 0xbd, 0xb5, 0x37, 0xa8, 0x59,
    0x24, 0xff, 0x67, 0x4d, 0xf6, 0xb3, 0xe5, 0x71, 0x6a, 0x78, 0xb6, 0x0c, 0xdc, 0x35, 0x63,
    0xea, 0xce, 0x52, 0x2d, 0x9e, 0x84, 0x71, 0x83, 0x93, 0xee, 0x77, 0x39, 0x5f, 0xf0, 0xbb,
    0x82, 0xbd, 0xdc, 0x34, 0xe1, 0x7c, 0x6e, 0x51, 0x5b, 0x92, 0x37, 0x2e, 0xd4, 0xfe, 0xcc,
    0x8b, 0xda, 0x45, 0x3c, 0x7f, 0xfb, 0xd8, 0xb3, 0x51, 0xc3, 0xcf, 0xf9, 0x83, 0xfd, 0x89,
    0x07, 0x1a, 0x87, 0x2b, 0x20, 0x9c, 0x51, 0x44, 0x3b, 0x16, 0xe8, 0x31, 0x37, 0x66, 0xaf,
    0xcf, 0xf1, 0xbc, 0x94, 0x42, 0x7f, 0x0c, 0x3e, 0x38, 0xe6, 0x99, 0x9e, 0xb5, 0x2e, 0x9a,
    0xcb, 0xf3, 0xa3, 0x52, 0x5c, 0xbe, 0x05, 0x1a, 0xcb, 0xe8, 0xd7, 0x75, 0x6c, 0xb1, 0xef,
    0xb5, 0x21, 0xd9, 0xad, 0x33, 0xe0, 0xb5, 0x2f, 0x68, 0x3e, 0x79, 0xb4, 0x4d, 0x15, 0x81,
    0x0a, 0xfe, 0x9c, 0x23, 0xce, 0x3f, 0x9e, 0xcd, 0x71, 0x0e, 0x7b, 0xe8, 0x13, 0x76, 0xde,
    0xb6, 0x92, 0x5a, 0x79, 0x64, 0x1e, 0x4f, 0x06, 0xdb, 0xde, 0xdd, 0xa4, 0x81, 0x79, 0xb2,
    0xd9, 0x38, 0x62, 0x3a, 0xbc, 0x77, 0x2f, 0xdb, 0x67, 0x39, 0x9f, 0x69, 0x8c, 0xdc, 0x90,
    0x87, 0x60, 0x1c, 0x56, 0x07, 0xf4, 0xa9, 0xaa, 0xcb, 0xf2, 0xbe, 0x8e, 0x82, 0x78, 0x19,
    0x46, 0x46, 0x8d, 0xe7, 0x42, 0x3a, 0xa4, 0x58, 0x1c, 0x58, 0x07, 0x6b, 0xc7, 0xc3, 0x2c,
    0x35, 0xd8, 0xa3, 0xfe, 0x37, 0xe4, 0xee, 0x0b, 0xf8, 0x73, 0x8a, 0xb2, 0xb8, 0x47, 0xef,
    0xf9, 0xd9, 0x02, 0xb1, 0xb2, 0xb6, 0xd3, 0xec, 0xdc, 0x44, 0x1e, 0x9f, 0xd7, 0xc7, 0xea,
    0xb7, 0x75, 0xd7, 0xf7, 0x4f, 0x16, 0x51, 0x78, 0x5a, 0x91, 0x71, 0x62, 0x55, 0x31, 0xdf,
    0x89, 0x6d, 0x8d, 0x8a, 0x1b, 0xbb, 0x05, 0xfe, 0x5a, 0xf4, 0xda, 0x89, 0x77, 0xaa, 0x7e,
    0x7f, 0x86, 0x73, 0x7f, 0x03, 0xf6, 0x47, 0xf5, 0x5c, 0xcb, 0xa3, 0x8d, 0xb1, 0x23, 0x62,
    0x84, 0x31, 0x41, 0x56, 0xc2, 0x23, 0x18, 0x14, 0xea, 0x20, 0x3b, 0x3b, 0xdc, 0x8f, 0x42,
    0xcc, 0x88, 0xcc, 0x93, 0x44, 0x70, 0x01, 0x84, 0xd8, 0x34, 0xea, 0x6b, 0x7f, 0xde, 0xc5,
    0x22, 0xf7, 0x4b, 0x1c, 0x8f, 0x2e, 0x36, 0x8e, 0x20, 0x8c, 0x4f, 0xfe, 0x2d, 0x80, 0x8f,
    0xc2, 0x42, 0xab, 0x91, 0xfb, 0x58, 0x36, 0xfe, 0x5e, 0xfe, 0x00, 0xa0, 0x1b, 0x31, 0x1d,
    0x44, 0x26, 0xda, 0x97, 0x28, 0xe7, 0xf1, 0xbe, 0x58, 0xca, 0xf3, 0x03, 0x7b, 0x73, 0x7b,
    0x0c, 0xf3, 0x1b, 0xd0, 0xfd, 0x0b, 0x09, 0x36, 0x46, 0x31, 0xd6, 0x20, 0x0d, 0xdb, 0xcb,
    0x17, 0x11, 0xef, 0xa9, 0xb2, 0x33, 0xe9, 0x78, 0x67, 0x5e, 0xa2, 0x6f, 0x7a, 0x31, 0x7e,
    0xeb, 0x8b, 0x90, 0x0b, 0x7d, 0x7d, 0x19, 0x1d, 0x83, 0x78, 0x51, 0x3e, 0xaa, 0xa1, 0xcf,
    0x7f, 0x09, 0x72, 0xbf, 0xa5, 0xb9, 0x35, 0x2f, 0x56, 0xa5, 0x8a, 0x72, 0x7c, 0xe7, 0x22,
    0x5e, 0xbd, 0x68, 0x17, 0x7a, 0x9c, 0x86, 0x5b, 0x1f, 0x27, 0x0a, 0x73, 0x0f, 0x75, 0x64,
    0x6b, 0x31, 0x2e, 0x2a, 0x52, 0x97, 0x14, 0x6c, 0x0a, 0x95, 0x0a, 0xa9, 0x27, 0x22, 0x36,
    0xea, 0x59, 0x18, 0x2d, 0xaa, 0x73, 0x3a, 0xb5, 0xca, 0xd8, 0xea, 0xb7, 0xf6, 0xf8, 0x77,
    0xcc, 0xf5, 0x27, 0xfa, 0x60, 0x66, 0xd0, 0x73, 0x1d, 0xb4, 0x99, 0x42, 0x1f, 0xc4, 0x39,
    0x71, 0xf4, 0xc4, 0x27, 0x26, 0x6e, 0x5c, 0x05, 0x3b, 0x4f, 0xd0, 0x3f, 0x94, 0xd2, 0x89,
    0x94, 0xfd, 0xdc, 0xbf, 0x82, 0x36, 0x15, 0x41, 0x87, 0x0f, 0xbc, 0x97, 0x13, 0xf3, 0xc6,
    0x78, 0xf7, 0x1b, 0xd5, 0x5c, 0x86, 0xf3, 0x48, 0x7e, 0x34, 0x00, 0xde, 0x90, 0x31, 0xf8,
    0x7f, 0x20, 0xce, 0x38, 0xc1, 0x8f, 0x08, 0xd8, 0x51, 0x8f, 0x98, 0x2f, 0xd2, 0x4e, 0xd4,
    0x42, 0xb4, 0x7d, 0x35, 0x80, 0xff, 0x83, 0xb6, 0x30, 0x86, 0xa5, 0xce, 0xce, 0xd2, 0x81,
    0x0b, 0x73, 0x7a, 0x2a, 0xbf, 0xe7, 0xf7, 0x29, 0xe0, 0x2b, 0xbb, 0x8e, 0xdc, 0x39, 0x0d,
    0x17, 0xe4, 0x7a, 0x7b, 0x94, 0x78, 0xe7, 0xe0, 0xe5, 0xf8, 0x63, 0x77, 0x60, 0xb2, 0x5f,
    0x17, 0xc7, 0x03, 0x6d, 0xa1, 0xbe, 0xa6, 0x81, 0x9e, 0x84, 0x39, 0xcd, 0x49, 0x7e, 0xc8,
    0xde, 0x8b, 0x44, 0x3b, 0xae, 0x1f, 0x93, 0x56, 0xa7, 0xf9, 0x56, 0x3c, 0xdc, 0x5c, 0x01,
    0x52, 0x8a, 0x8d, 0x47, 0xbd, 0x32, 0x60, 0x9f, 0x4f, 0xee, 0x5b, 0x8f, 0xe8, 0x5b, 0x74,
    0xf4, 0xf1, 0x03, 0xa8, 0xee, 0x85, 0xb8, 0x48, 0x40, 0xd7, 0x02, 0x75, 0x81, 0x3e, 0x8d,
    0x58, 0x0c, 0x3c, 0x3c, 0xd7, 0x06, 0xf5, 0x4f, 0x02, 0x9a, 0x59, 0x3d, 0x81, 0xb1, 0x95,
    0xc2, 0x7d, 0x8a, 0xff, 0xd6, 0x41, 0xfd, 0x0e, 0xc6, 0xee, 0x88, 0xcb, 0xae, 0xeb, 0x1e,
    0x35, 0x58, 0x2e, 0x3f, 0x8e, 0xbf, 0xea, 0xe9, 0x83, 0x1c, 0x73, 0xeb, 0xc2, 0xbc, 0x85,
    0x03, 0xe7, 0x37, 0x73, 0x08, 0xe7, 0x37, 0x90, 0xbb, 0x1c, 0xd7, 0x9c, 0xad, 0x21, 0x8b,
    0xc5, 0x13, 0x72, 0x7c, 0x45, 0x61, 0xab, 0x44, 0xf9, 0x39, 0x89, 0x39, 0x6a, 0x3c, 0x19,
    0x18, 0x8b, 0x10, 0x66, 0xa2, 0x7e, 0x51, 0x87, 0xfd, 0xea, 0x92, 0xda, 0xb1, 0x2f, 0xd0,
    0x01, 0xf4, 0x50, 0xb4, 0xa3, 0x16, 0x22, 0xd7, 0x3b, 0xa1, 0x31, 0x11, 0x9f, 0x4e, 0x9e,
    0x6f, 0xc0, 0xff, 0x4b, 0x1a, 0xbb, 0xd6, 0x9b, 0x22, 0x86, 0x0c, 0x9e, 0x2f, 0xf0, 0x6e,
    0xdc, 0xfb, 0x5a, 0xfe, 0x1e, 0xd4, 0x2f, 0x2c, 0x86, 0x9f, 0x0f, 0x4a, 0xd7, 0x50, 0x0e,
    0xc0, 0x2d, 0xd5, 0xaa, 0xdd, 0x7a, 0xa3, 0x5b, 0x3f, 0xc6, 0x3b, 0x21, 0xad, 0xb0, 0xe5,
    0xfd, 0x95, 0xe8, 0x4f, 0x36, 0xde, 0x79, 0xf5, 0x88, 0xed, 0x4f, 0xca, 0xc1, 0xb2, 0x3b,
    0x74, 0xcd, 0x55, 0xef, 0xe7, 0x4f, 0xda, 0x50, 0x73, 0xc2, 0xdd, 0x6d, 0xf7, 0x1c, 0x64,
    0xc1, 0xe5, 0xf1, 0x75, 0xf1, 0x58, 0xfc, 0x87, 0x75, 0xc4, 0x55, 0x71, 0x7a, 0xa2, 0x3d,
    0xe0, 0x53, 0x01, 0xce, 0xe1, 0xc3, 0xcf, 0xe5, 0xfc, 0x52, 0x5b, 0xe6, 0x97, 0xc7, 0x2d,
    0xcd, 0xf1, 0x98, 0xc4, 0xf8, 0xfb, 0xa0, 0x83, 0xfc, 0x35, 0xbf, 0x5b, 0xe0, 0x77, 0xef,
    0xfc, 0xc4, 0x5c, 0x93, 0x1d, 0xea, 0x47, 0x6d, 0xe6, 0x8e, 0x29, 0x7d, 0x5e, 0xfc, 0x3f,
    0xce, 0x77, 0x11, 0xeb, 0x8d, 0xcd, 0x01, 0x9c, 0x53, 0x6e, 0x4c, 0x96, 0xab, 0x1c, 0xd7,
    0x84, 0xd9, 0x63, 0x05, 0x9c, 0x98, 0xdd, 0x79, 0x1f, 0x71, 0xed, 0xba, 0xa1, 0xf9, 0x9e,
    0xdc, 0x69, 0x9d, 0xa2, 0x39, 0xbf, 0x5c, 0x8e, 0xae, 0x2e, 0x0a, 0x38, 0x8f, 0x5d, 0x22,
    0x3f, 0xb7, 0x4a, 0x2e, 0x91, 0x15, 0xe5, 0x4b, 0xec, 0xeb, 0xa2, 0x0e, 0x3b, 0xff, 0x3a,
    0x58, 0x27, 0xc3, 0x3c, 0x46, 0xea, 0x9f, 0xb7, 0x63, 0xf8, 0x2b, 0x62, 0x2e, 0x23, 0xf2,
    0x35, 0x2c, 0x82, 0x89, 0x83, 0xfe, 0xcd, 0x02, 0xf6, 0x8b, 0x17, 0xdf, 0x11, 0xd2, 0x05,
    0xfc, 0xc7, 0xe6, 0x9b, 0xe3, 0xfe, 0xe5, 0x23, 0x01, 0x3f, 0x84, 0xdd, 0xe9, 0x34, 0x24,
    0x4f, 0x28, 0xcb, 0x72, 0x50, 0x35, 0xa2, 0x62, 0x2a, 0x22, 0xf2, 0xc6, 0xc5, 0xed, 0x13,
    0xfc, 0x80, 0x9f, 0x07, 0x75, 0x87, 0xdf, 0x51, 0xc0, 0x98, 0x15, 0x7a, 0x1d, 0x13, 0x31,
    0x80, 0xee, 0xd1, 0x47, 0x09, 0x3f, 0xc8, 0xef, 0x67, 0x64, 0x7c, 0xc6, 0xa5, 0x80, 0xe3,
    0xef, 0xc9, 0x58, 0xae, 0x4b, 0x8e, 0xbd, 0x3d, 0x8f, 0x2a, 0x93, 0x18, 0x6b, 0x20, 0x62,
    0x30, 0xff, 0x5c, 0x61, 0xcf, 0x21, 0x32, 0x54, 0x3d, 0xa8, 0x16, 0x30, 0x0e, 0x41, 0x13,
    0x51, 0xa9, 0xcf, 0xc2, 0xc2, 0xd7, 0x8f, 0x6b, 0xe1, 0x98, 0x33, 0x1f, 0x47, 0x8d, 0x63,
    0x49, 0x7e, 0x24, 0x5e, 0xfe, 0x9e, 0x83, 0x9d, 0x3c, 0xe6, 0x8a, 0xba, 0x9c, 0x74, 0xbc,
    0x19, 0xf6, 0x83, 0xa8, 0xfa, 0x96, 0xbe, 0x6f, 0x1b, 0xab, 0x93, 0xe6, 0x69, 0x8b, 0x8a,
    0x10, 0xe5, 0x2e, 0xb9, 0x6b, 0xa7, 0x67, 0xd4, 0xfa, 0x4c, 0xb8, 0xdf, 0x42, 0x7b, 0x28,
    0x8b, 0x0a, 0x38, 0xe4, 0x38, 0x26, 0x44, 0x76, 0x7f, 0x94, 0xf3, 0x29, 0xf2, 0x5c, 0xab,
    0xbe, 0x3e, 0xad, 0xc6, 0x61, 0xfd, 0x1b, 0xda, 0xd0, 0x18, 0xb6, 0xa7, 0x8b, 0x7e, 0x2f,
    0xcb, 0x3c, 0xc9, 0x87, 0x70, 0x7c, 0xbe, 0x33, 0x39, 0x3e, 0x47, 0xcc, 0x7e, 0x9a, 0x9b,
    0x66, 0xe6, 0x77, 0xfe, 0xc7, 0xf7, 0xfd, 0x33, 0x55, 0x07, 0x63, 0x75, 0xa8, 0x7f, 0x30,
    0xfe, 0x07, 0xcd, 0x1e, 0xcc, 0x27, 0xba, 0xe5, 0xea, 0xda, 0xe6, 0x37, 0x67, 0x8d, 0x6d,
    0x72, 0xb9, 0xed, 0xad, 0x2d, 0x25, 0xea, 0x39, 0x7e, 0x55, 0xfa, 0x58, 0x54, 0xfe, 0x47,
    0xb4, 0x9d, 0xcb, 0xe7, 0xb7, 0xb7, 0x73, 0x50, 0x2e, 0x97, 0x2f, 0x94, 0x0a, 0xdb, 0xf0,
    0x1a, 0x69, 0x88, 0xfd, 0x99, 0x3b, 0xae, 0x3a, 0x03, 0x52, 0xee, 0x5b, 0x0f, 0xed, 0x8c,
    0xfd, 0xfb, 0x4c, 0x7e, 0x36, 0xe6, 0x8e, 0xae, 0x38, 0xee, 0xcc, 0x18, 0xb8, 0x1b, 0xbf,
    0x70, 0xda, 0xff, 0xa6, 0x0f, 0xdc, 0x4d, 0x4d, 0xbf, 0x32, 0x2c, 0xfd, 0x6c, 0x66, 0x4f,
    0x99, 0xbb, 0x7c, 0xa3, 0xdf, 0x4c, 0xed, 0x99, 0xeb, 0xbc, 0x53, 0x36, 0xbe, 0x7e, 0xd5,
    0x13, 0x5b, 0x9b, 0x9b, 0xfa, 0xc6, 0x3b, 0xe5, 0x3f, 0xca, 0xb5, 0x6a, 0xce, 0xf5, 0x9f,
    0x77, 0x36, 0xd7, 0x95, 0xbf, 0xde, 0xfe, 0xf2, 0x03, 0x2b, 0xb8, 0x79, 0x6a, 0x6a, 0xca,
    0x0a, 0xff, 0xb4, 0xef, 0xb1, 0x55, 0xd9, 0x54, 0x1d, 0x07, 0xbe, 0xb9, 0xb6, 0x0d, 0x4d,
    0xfd, 0xf2, 0xc3, 0x87, 0x7f, 0xfe, 0xf3, 0x07, 0xe5, 0x9f, 0xca, 0xa1, 0x3e, 0xd3, 0x7f,
    0x14, 0x77, 0xa4, 0x2b, 0x57, 0xc6, 0xcc, 0x71, 0x15, 0x13, 0x5a, 0x57, 0xec, 0x2b, 0xf2,
    0xdd, 0x82, 0xf7, 0x95, 0x81, 0x3d, 0xc1, 0x2a, 0x36, 0xa1, 0x38, 0xbe, 0xd1, 0x1e, 0x19,
    0x62, 0xd0, 0x57, 0x26, 0xba, 0xea, 0x46, 0x17, 0x56, 0x6a, 0xae, 0x32, 0x51, 0x97, 0xf0,
    0x72, 0x55, 0xc3, 0xc2, 0x17, 0x27, 0x73, 0xd3, 0x35, 0xa6, 0xa6, 0x4e, 0x9a, 0x70, 0x14,
    0xd2, 0xfc, 0x47, 0x53, 0x75, 0xa6, 0x0e, 0x67, 0xea, 0x74, 0xe4, 0xf0, 0x66, 0x4e, 0xc2,
    0x29, 0xea, 0x0c, 0xc6, 0x4b, 0xc7, 0x07, 0xd0, 0x21, 0xa5, 0xbf, 0x84, 0x3a, 0x14, 0x7d,
    0x75, 0x97, 0xa4, 0x4a, 0xfe, 0xe6, 0xbf, 0x81, 0xab, 0xfa, 0xa6, 0x0e, 0x7f, 0x7e, 0xf8,
    0x40, 0x7a, 0x1d, 0x1c, 0x85, 0xff, 0xfc, 0xa0, 0xc0, 0x0f, 0x19, 0x01, 0xfc, 0xf9, 0xa7,
    0x30, 0xd3, 0x75, 0x97, 0xf4, 0xc2, 0xb0, 0x34, 0x63, 0x40, 0xaa, 0x87, 0xf1, 0x77, 0x6c,
    0x93, 0x15, 0xe1, 0x25, 0x49, 0xef, 0x17, 0x86, 0x69, 0x2a, 0xd3, 0x99, 0x61, 0x41, 0xe7,
    0xae, 0xa2, 0x2a, 0x57, 0x33, 0x43, 0xb7, 0x34, 0x73, 0xa9, 0x0c, 0xb1, 0x22, 0xc3, 0x1a,
    0x3d, 0x2e, 0x3c, 0x81, 0x6a, 0xae, 0xec, 0x19, 0x7f, 0x37, 0x4b, 0xfd, 0xff, 0xc6, 0xde,
    0x68, 0x3d, 0x3a, 0x0c, 0x2a, 0xbc, 0x42, 0x0b, 0x2a, 0xae, 0xad, 0xf4, 0x75, 0xf6, 0x85,
    0xe9, 0x95, 0x9f, 0xe9, 0xee, 0x7c, 0x66, 0x39, 0xca, 0xae, 0x62, 0xcd, 0x27, 0x7d, 0x7d,
    0xad, 0xc0, 0x9c, 0xe8, 0xd7, 0xfa, 0x6c, 0x69, 0xc3, 0x4c, 0x8e, 0x2d, 0x7b, 0xe1, 0x28,
    0x49, 0x59, 0xe8, 0xa6, 0xc9, 0x5e, 0xfb, 0x40, 0xfe, 0x25, 0x75, 0xbd, 0xe1, 0x4d, 0xfd,
    0xfc, 0xe7, 0xaf, 0xb7, 0x6c, 0x68, 0xf0, 0xe7, 0x5a, 0x9d, 0x29, 0x5f, 0xd5, 0x5f, 0xbc,
    0xd3, 0x99, 0x3d, 0xd0, 0x1d, 0x67, 0xd3, 0x71, 0x35, 0xe8, 0xf4, 0xe6, 0x62, 0x66, 0xb8,
    0x9b, 0x3f, 0x0e, 0xa1, 0x52, 0xfb, 0x9d, 0xf2, 0xff, 0xfd, 0xe7, 0xcd, 0x57, 0x15, 0xaa,
    0x95, 0x6d, 0x5a, 0xea, 0x44, 0x7f, 0xab, 0xfc, 0xf8, 0xeb, 0xaf, 0x40, 0x15, 0x8c, 0xd5,
    0xfc, 0x9f, 0x50, 0x15, 0xf9, 0x48, 0xd9, 0x4f, 0xf9, 0x6f, 0xfc, 0xfc, 0xb3, 0xf2, 0xd3,
    0x9e, 0x99, 0xda, 0x4f, 0x7f, 0x7d, 0xb1, 0xfe, 0x78, 0xeb, 0xb7, 0x44, 0xbb, 0xa4, 0x6c,
    0xe8, 0xa3, 0xbf, 0x82, 0xb3, 0xd5, 0x02, 0xbe, 0xfa, 0x7f, 0xff, 0xf7, 0xd0, 0x36, 0xd5,
    0x83, 0xa3, 0x07, 0x7c, 0xaf, 0xcf, 0x0c, 0x9c, 0x6b, 0x55, 0xee, 0xeb, 0x08, 0x4a, 0xbf,
    0xbb, 0x17, 0xd9, 0x9d, 0x9f, 0xfa, 0xb6, 0xf5, 0xcd, 0x9e, 0xcf, 0x7e, 0x7a, 0xcb, 0x9b,
    0xeb, 0x87, 0xf8, 0xa5, 0x14, 0x78, 0xe2, 0xad, 0x29, 0x5c, 0x82, 0x84, 0xf1, 0x38, 0x43,
    0xfa, 0x74, 0xa6, 0xd3, 0x59, 0xef, 0xc0, 0x92, 0x47, 0x3e, 0xb0, 0xf4, 0x85, 0x57, 0x86,
    0x29, 0xbe, 0x17, 0x62, 0xcd, 0x7d, 0xdb, 0x56, 0x16, 0xf6, 0x94, 0x4e, 0xab, 0x3b, 0x02,
    0x92, 0xfa, 0xa5, 0xd9, 0xbb, 0x6d, 0x7c, 0x28, 0xf5, 0xed, 0xc3, 0x07, 0xa5, 0x6e, 0x93,
    0xc8, 0x35, 0x9a, 0x1d, 0xea, 0x0b, 0x15, 0x12, 0xf0, 0x5f, 0xa0, 0xf9, 0xc3, 0x3f, 0x14,
    0xba, 0x3c, 0xd0, 0x4f, 0xd4, 0xe9, 0x14, 0x5e, 0xe9, 0x34, 0x8f, 0x7f, 0xd5, 0x54, 0x57,
    0x19, 0x3e, 0x9a, 0xc8, 0xab, 0x86, 0x6d, 0x7d, 0xf8, 0x06, 0x1c, 0xf8, 0x4b, 0x5f, 0x75,
    0xed, 0xad, 0x77, 0xfa, 0xf2, 0x08, 0x33, 0x8c, 0xde, 0x12, 0x6f, 0xb5, 0x6f, 0x36, 0x9c,
    0x8e, 0xa8, 0x76, 0xfd, 0xcd, 0x36, 0x7a, 0x07, 0x3b, 0xdf, 0x34, 0x2f, 0x6a, 0xbe, 0xf4,
    0x60, 0x59, 0x73, 0xe0, 0x84, 0x4a, 0x3d, 0xe5, 0xba, 0x18, 0xd5, 0xd0, 0x30, 0x4e, 0x8d,
    0x01, 0xef, 0x30, 0xcf, 0xbe, 0xee, 0x6d, 0xed, 0xdb, 0xb4, 0x5f, 0x9b, 0x60, 0xc6, 0x68,
    0xca, 0x12, 0xbd, 0x9d, 0x8d, 0x8b, 0xd6, 0xc2, 0x20, 0x96, 0xdf, 0x8b, 0x13, 0xe3, 0xd4,
    0x35, 0x78, 0xc7, 0xc5, 0x53, 0x0f, 0xf5, 0xa6, 0xab, 0x6d, 0xd7, 0xbe, 0x39, 0x1f, 0x4f,
    0xd5, 0xbd, 0x46, 0xa7, 0xf2, 0xf1, 0xf4, 0xd6, 0x61, 0xbf, 0xee, 0x21, 0x9c, 0x98, 0x0e,
    0xf3, 0xdc, 0xd0, 0x69, 0x77, 0xaa, 0x7b, 0x97, 0xad, 0x1b, 0xb3, 0xd1, 0xa9, 0x9a, 0xa7,
    0x73, 0xaf, 0x71, 0x5b, 0x2d, 0x0b, 0x65, 0xcf, 0x1a, 0xdd, 0xea, 0x21, 0x79, 0x9e, 0x1b,
    0x2d, 0x78, 0xa7, 0xb5, 0xbc, 0xd9, 0x87, 0xb2, 0xfb, 0xc7, 0xd5, 0xee, 0x5e, 0xe3, 0x3c,
    0x3e, 0xae, 0xc0, 0xbf, 0x9d, 0xce, 0xc7, 0xd3, 0x3c, 0xd4, 0x57, 0x18, 0xed, 0x1f, 0x57,
    0xe0, 0xf3, 0x27, 0xa7, 0x81, 0xf5, 0x2f, 0x6f, 0xea, 0x50, 0xb6, 0x7e, 0x5c, 0xa9, 0xc3,
    0x93, 0xf0, 0xfb, 0xdd, 0x0e, 0x69, 0xbf, 0xd1, 0xba, 0x39, 0x83, 0x67, 0x67, 0x5e, 0x39,
    0xd6, 0x6a, 0xdd, 0xb8, 0x58, 0x47, 0xcb, 0xfb, 0x0e, 0x68, 0xe8, 0x8c, 0x79, 0xbd, 0xa4,
    0xd2, 0xe6, 0x6d, 0xb7, 0xc2, 0xdb, 0x6c, 0xc2, 0x7b, 0xcd, 0x16, 0xfb, 0x0e, 0x69, 0xce,
    0xb4, 0xfc, 0xad, 0x7b, 0xd4, 0xe8, 0x74, 0x2b, 0xa4, 0x4f, 0xb9, 0x9d, 0xbd, 0x56, 0x67,
    0x11, 0xda, 0xd8, 0x87, 0xba, 0xe1, 0x79, 0xf5, 0x88, 0xd4, 0x93, 0x6f, 0x38, 0x6d, 0x28,
    0xe6, 0xf4, 0x55, 0xf2, 0x50, 0x67, 0x8e, 0xb7, 0x77, 0x0c, 0xcf, 0x8e, 0x39, 0x7d, 0x1d,
    0xd6, 0xf1, 0xca, 0x91, 0x67, 0xa4, 0xbe, 0x7e, 0xe5, 0x84, 0xb7, 0x07, 0xdf, 0xd5, 0x0f,
    0x8c, 0xb5, 0xf1, 0x51, 0xe5, 0x78, 0x7f, 0x6f, 0xbf, 0x71, 0xd1, 0x2d, 0xc3, 0x73, 0x18,
    0x3a, 0xa3, 0x43, 0x23, 0x74, 0x60, 0x1d, 0xad, 0x32, 0x19, 0xa7, 0xd1, 0x71, 0x45, 0x83,
    0x28, 0x6d, 0xbd, 0x7d, 0xe7, 0x23, 0xd0, 0x53, 0x6d, 0x12, 0xda, 0xeb, 0x47, 0xc7, 0x55,
    0xb7, 0x5b, 0xf9, 0xd8, 0x81, 0xef, 0x2e, 0x8d, 0x1b, 0xab, 0x31, 0xae, 0xee, 0xf5, 0x72,
    0xd6, 0x6e, 0x2d, 0xd4, 0x6e, 0xa7, 0xd2, 0x70, 0xd4, 0xdc, 0xd1, 0x5e, 0x3b, 0x77, 0x22,
    0x12, 0xcb, 0x8a, 0x0d, 0xda, 0x75, 0x6d, 0xfb, 0x7c, 0x59, 0x13, 0xb2, 0xb6, 0x90, 0xa8,
    0x8b, 0x47, 0x56, 0xf5, 0x48, 0xb6, 0xc0, 0x06, 0x5a, 0x52, 0xe7, 0x0c, 0x1d, 0x98, 0x3c,
    0x56, 0xeb, 0x95, 0x7e, 0x81, 0xdc, 0xe8, 0xb8, 0x54, 0x4b, 0x97, 0x2c, 0x21, 0x42, 0xf6,
    0x72, 0xaa, 0x04, 0x7e, 0x45, 0x0f, 0xd8, 0x1d, 0x1e, 0x3d, 0xdc, 0xe9, 0xe4, 0x80, 0x8f,
    0xd5, 0x3c, 0x4f, 0x78, 0xf9, 0xd8, 0xd8, 0x3b, 0x02, 0xcd, 0xd6, 0x45, 0x8f, 0xa3, 0x4b,
    0x5b, 0x75, 0xda, 0x67, 0x27, 0xbc, 0x3e, 0x22, 0x14, 0x1f, 0x98, 0x98, 0xcd, 0x9d, 0xd2,
    0x41, 0x6e, 0xba, 0xc7, 0x70, 0x22, 0x80, 0xd3, 0x45, 0x73, 0x8a, 0x27, 0x05, 0x16, 0x01,
    0xc1, 0xef, 0x42, 0x3d, 0x94, 0x6f, 0x8b, 0xdb, 0xc2, 0xfb, 0xf4, 0x16, 0x44, 0x5b, 0xc2,
    0xb0, 0xb9, 0x07, 0xd4, 0xa0, 0xd0, 0x5d, 0x50, 0xe4, 0x52, 0xf4, 0x7e, 0xc2, 0x9b, 0x69,
    0x32, 0xa1, 0x91, 0x5c, 0x88, 0xd4, 0xda, 0x67, 0x08, 0xb0, 0x81, 0x8c, 0x35, 0x4e, 0xb2,
    0xb7, 0xb0, 0xbe, 0xd9, 0xcd, 0x27, 0x3f, 0x01, 0xca, 0x27, 0x1d, 0x6d, 0xd9, 0x3b, 0xef,
    0xbc, 0xa8, 0xea, 0x09, 0x68, 0xf5, 0x78, 0xf3, 0x85, 0x88, 0xf9, 0x78, 0xd3, 0x00, 0x63,
    0x11, 0x2d, 0xcd, 0xac, 0x08, 0xd4, 0x1b, 0x1d, 0x4f, 0xcd, 0x88, 0x9e, 0x43, 0x91, 0x5a,
    0x78, 0x0a, 0xf0, 0x6e, 0x60, 0x7b, 0xc5, 0x23, 0xb3, 0xc7, 0x22, 0xed, 0x18, 0x8a, 0xe0,
    0x46, 0x2f, 0xed, 0x2c, 0x3d, 0x1a, 0x56, 0x6b, 0xdb, 0x47, 0x94, 0xa6, 0x75, 0xe3, 0x4d,
    0xb1, 0x30, 0xf0, 0x77, 0xa8, 0x27, 0x2c, 0x5a, 0x6a, 0x68, 0xdf, 0xc4, 0x53, 0x93, 0x74,
    0xaa, 0x54, 0x04, 0x8b, 0x05, 0xbb, 0x25, 0xbb, 0x40, 0xd4, 0x79, 0xf4, 0xf2, 0xef, 0x0c,
    0x42, 0xe9, 0x5a, 0x2b, 0x52, 0x34, 0x4a, 0x1d, 0x51, 0x7b, 0xcf, 0x6f, 0x9c, 0x38, 0x6b,
    0xa5, 0xa5, 0x61, 0x7b, 0x34, 0xb5, 0xed, 0x61, 0xd3, 0xa3, 0x8f, 0x78, 0xc4, 0xef, 0x44,
    0x48, 0xc8, 0x8d, 0x10, 0xc9, 0x02, 0x7c, 0x0c, 0x27, 0x33, 0xcc, 0x66, 0x02, 0xbc, 0x5c,
    0x28, 0xfc, 0xa3, 0xa1, 0x67, 0x35, 0x2f, 0x37, 0x3f, 0xfa, 0xfd, 0x2d, 0x11, 0x8b, 0x06,
    0x6a, 0x2e, 0x6b, 0x78, 0xd3, 0xe8, 0xf4, 0xca, 0xda, 0xce, 0x45, 0xf5, 0x66, 0x7e, 0x59,
    0x40, 0xb7, 0xd9, 0x6f, 0x2c, 0x13, 0x4f, 0xbb, 0xd5, 0xfa, 0x48, 0x6f, 0xed, 0x97, 0xed,
    0xe8, 0xba, 0x7f, 0x50, 0x19, 0x45, 0x9c, 0x30, 0x91, 0xbf, 0xf0, 0x16, 0x99, 0xa2, 0xb3,
    0xdf, 0xc4, 0x9d, 0x2e, 0xed, 0x3e, 0xf0, 0x9f, 0x90, 0x65, 0x5a, 0xb0, 0xca, 0xed, 0x2d,
    0x85, 0xba, 0x89, 0x28, 0x2c, 0x83, 0x62, 0x73, 0x8c, 0xbc, 0x72, 0x6c, 0x69, 0x98, 0xc5,
    0xfc, 0x5c, 0xd6, 0x0c, 0x38, 0xed, 0xff, 0x89, 0xb2, 0xe1, 0x68, 0x19, 0x1d, 0xc9, 0xe2,
    0x6b, 0xe2, 0xc9, 0xc1, 0xd6, 0xcd, 0x0e, 0xbd, 0x6d, 0x14, 0xb2, 0x4c, 0xeb, 0xe7, 0x3b,
    0xe6, 0xd5, 0xbe, 0xa0, 0x3c, 0x8f, 0xbc, 0x50, 0xf1, 0x32, 0x7f, 0xa7, 0x22, 0x43, 0x56,
    0xcf, 0xf0, 0x1b, 0x3e, 0x39, 0x22, 0xbe, 0xcb, 0x32, 0x89, 0x91, 0xdb, 0xce, 0x02, 0x47,
    0xe1, 0xef, 0x70, 0xb4, 0x71, 0x01, 0x49, 0xdf, 0x47, 0xb1, 0x23, 0xb7, 0xe7, 0x89, 0xd9,
    0x69, 0xbd, 0xd1, 0x59, 0xc0, 0x04, 0x8b, 0x53, 0xbb, 0x80, 0xa8, 0xd7, 0x74, 0x4d, 0x4b,
    0x01, 0xd1, 0xae, 0xb1, 0x3e, 0xb6, 0x86, 0xba, 0x88, 0x18, 0x47, 0xd7, 0x16, 0xf1, 0xea,
    0x59, 0x0e, 0x12, 0xbc, 0x4f, 0x76, 0x9c, 0x5e, 0x74, 0x84, 0x26, 0xc8, 0xda, 0x4f, 0x48,
    0x82, 0xaf, 0x13, 0x9a, 0x2d, 0x5e, 0x8b, 0xe3, 0x83, 0x71, 0x3f, 0x57, 0x45, 0x19, 0x21,
    0x59, 0x07, 0xac, 0x82, 0xa7, 0x9e, 0x77, 0x3f, 0x99, 0xa3, 0xe6, 0xb5, 0x34, 0xef, 0xc6,
    0x76, 0xd5, 0xf8, 0xf5, 0xd7, 0xa7, 0x3e, 0xfa, 0x91, 0x1f, 0xf1, 0xfc, 0xaf, 0xcf, 0x54,
    0x3e, 0xd3, 0x9d, 0xf5, 0x9e, 0xfe, 0x53, 0xce, 0xff, 0xf9, 0x7c, 0xb1, 0x18, 0x3e, 0xff,
    0xf2, 0xaf, 0xe7, 0xff, 0x47, 0xf9, 0x79, 0x90, 0xf3, 0xff, 0x91, 0x63, 0x18, 0x5b, 0x3b,
    0xfb, 0x70, 0x0c, 0xba, 0xd6, 0x45, 0x53, 0x00, 0xf9, 0xe2, 0xd3, 0xc7, 0x88, 0x2f, 0x5a,
    0xda, 0x56, 0x3e, 0xfe, 0x8b, 0xb3, 0x79, 0x1f, 0xce, 0x01, 0x7b, 0xa0, 0xfc, 0x9f, 0x5e,
    0x7f, 0x45, 0x23, 0xc2, 0x07, 0xf8, 0xbf, 0xd2, 0xb1, 0xde, 0xd3, 0x57, 0xf0, 0x50, 0x8e,
    0xc8, 0x71, 0x46, 0xa7, 0xe7, 0x75, 0x64, 0x6c, 0x5d, 0xc3, 0x62, 0x23, 0xd7, 0x9d, 0x3a,
    0x7f, 0xf8, 0x30, 0x34, 0xdc, 0xd1, 0xbc, 0xbf, 0x39, 0xb0, 0x27, 0x1f, 0xd4, 0x85, 0x03,
    0x0b, 0xc3, 0xf8, 0x60, 0x38, 0xce, 0x5c, 0x77, 0x3e, 0x40, 0x6b, 0x58, 0x27, 0x3d, 0x0e,
    0xe6, 0x81, 0x2c, 0x38, 0x3a, 0x35, 0x6d, 0xdb, 0x65, 0x47, 0x9c, 0x81, 0x6d, 0xc1, 0xa8,
    0x07, 0xae, 0x3d, 0x93, 0x8e, 0x3d, 0x70, 0xe2, 0x71, 0x36, 0x47, 0xaa, 0x43, 0x8a, 0xfe,
    0x86, 0xc6, 0x3f, 0xc6, 0xc9, 0x75, 0x06, 0xbb, 0xa4, 0xdf, 0xe0, 0x71, 0x3d, 0xa1, 0x4d,
    0x54, 0xd7, 0x18, 0x28, 0x13, 0x75, 0xac, 0xd7, 0xa0, 0x75, 0xd5, 0x1a, 0xe8, 0x52, 0xdb,
    0xcc, 0x8a, 0xc7, 0x3a, 0xb9, 0x0e, 0xac, 0xfe, 0xcd, 0x4f, 0xed, 0x4a, 0xab, 0xed, 0x1f,
    0xf1, 0xbf, 0x57, 0xb6, 0x1d, 0x51, 0x41, 0xf8, 0xd8, 0x19, 0x3f, 0x09, 0x31, 0xdf, 0xfc,
    0x39, 0x7c, 0x91, 0xbd, 0x0c, 0xd6, 0x19, 0x1e, 0xde, 0x29, 0xe3, 0x43, 0x91, 0x52, 0x67,
    0x8f, 0xde, 0x08, 0xe7, 0x75, 0x32, 0xee, 0xbc, 0x24, 0x10, 0xc6, 0xff, 0x14, 0xbb, 0xdb,
    0x67, 0x89, 0xdd, 0x95, 0x68, 0xe6, 0xac, 0x18, 0x3d, 0x2b, 0x02, 0xa9, 0xd1, 0xb5, 0x52,
    0x37, 0xc9, 0x97, 0x32, 0x0d, 0xb7, 0xab, 0x0c, 0xb9, 0xbf, 0x20, 0xe4, 0x07, 0xde, 0x00,
    0x05, 0x55, 0xb3, 0x5c, 0x7d, 0x66, 0xa9, 0x26, 0x54, 0xfc, 0x97, 0xfc, 0x4d, 0xa8, 0x1b,
    0x2f, 0xc4, 0xae, 0x4e, 0xf9, 0x81, 0xd4, 0xe6, 0xce, 0x36, 0x1b, 0x82, 0xbf, 0xe4, 0xa7,
    0xed, 0x09, 0x85, 0x63, 0x45, 0x84, 0xfc, 0x60, 0xed, 0x36, 0x01, 0x38, 0x83, 0x0c, 0x8a,
    0xd1, 0xfd, 0x64, 0xae, 0x5a, 0xd2, 0x79, 0x8d, 0x20, 0x26, 0x60, 0x99, 0x9a, 0xb1, 0x30,
    0xef, 0x02, 0xfd, 0x19, 0xbd, 0x15, 0xf0, 0xec, 0x76, 0x84, 0xc8, 0x62, 0xb7, 0xa0, 0x67,
    0x67, 0x8c, 0xec, 0x3e, 0xc2, 0xf3, 0x3f, 0xd1, 0x4f, 0xc9, 0xf7, 0xf9, 0x9c, 0x53, 0x9b,
    0x31, 0x3a, 0x8f, 0x46, 0xa9, 0x41, 0x1d, 0x78, 0xee, 0x6c, 0xd0, 0xf3, 0x76, 0x15, 0xfe,
    0x52, 0x1b, 0xc0, 0xa5, 0x33, 0xc8, 0xc1, 0x19, 0xf6, 0xa2, 0xbe, 0x4f, 0x3e, 0x17, 0x9b,
    0xc7, 0x87, 0x26, 0x9e, 0x6d, 0x4b, 0xe4, 0xbc, 0xda, 0xa9, 0x6f, 0xc3, 0xf9, 0x57, 0x2a,
    0x67, 0xf6, 0x76, 0xeb, 0x66, 0x86, 0x67, 0x50, 0x95, 0x9e, 0x41, 0xf7, 0xf4, 0x4a, 0x8d,
    0x4d, 0xe1, 0xb3, 0x73, 0xde, 0x21, 0xe7, 0xe8, 0x43, 0x78, 0xe7, 0x50, 0x3a, 0xb7, 0xd3,
    0xec, 0x9f, 0xde, 0xf9, 0x1d, 0xdb, 0xed, 0x54, 0xc8, 0x19, 0xb8, 0xc9, 0xcf, 0xc0, 0x87,
    0x4e, 0xee, 0x54, 0x8b, 0x0d, 0xe3, 0xa6, 0x0d, 0xff, 0x36, 0x8f, 0x0f, 0x5c, 0xfc, 0x3c,
    0x7c, 0x23, 0xef, 0xe6, 0x58, 0x39, 0xcf, 0xa6, 0x80, 0x6d, 0x9d, 0xb7, 0xdd, 0x26, 0x7c,
    0x05, 0xef, 0x48, 0xb6, 0x02, 0x3c, 0xff, 0x36, 0xce, 0xdd, 0x32, 0x2f, 0xcb, 0xe8, 0x0e,
    0xdb, 0x75, 0xff, 0xdc, 0x8e, 0x6d, 0xd4, 0xf9, 0x39, 0x1c, 0xfb, 0xd3, 0x61, 0x75, 0x52,
    0x42, 0x23, 0xf2, 0x9c, 0x7d, 0x52, 0x69, 0xe2, 0x39, 0x5b, 0xec, 0x47, 0x9d, 0xd1, 0xed,
    0xfd, 0xa0, 0xfd, 0xca, 0x0b, 0xfd, 0xe8, 0x35, 0x30, 0x13, 0xc3, 0xf2, 0x06, 0x68, 0xaf,
    0xf0, 0x1c, 0xfb, 0xb0, 0x80, 0xe7, 0xcc, 0xd6, 0x40, 0xec, 0x2a, 0xbc, 0x3d, 0xf8, 0xae,
    0x83, 0xba, 0x46, 0xa4, 0x2e, 0xa4, 0xaf, 0x5b, 0x73, 0x80, 0xbe, 0xbd, 0x0e, 0xed, 0x4f,
    0xe9, 0x6b, 0x5e, 0x34, 0x2b, 0x62, 0xbf, 0xa0, 0xaf, 0x64, 0x0e, 0xa8, 0x7d, 0xa3, 0x46,
    0x1b, 0xb4, 0x8f, 0x1d, 0x5e, 0x0e, 0xea, 0xdf, 0x6f, 0x7e, 0x23, 0xf3, 0x5c, 0x21, 0x36,
    0xf3, 0x8a, 0x73, 0x09, 0xe5, 0x7a, 0xad, 0xa8, 0xf1, 0x3f, 0x29, 0x36, 0x96, 0x11, 0x75,
    0xec, 0x23, 0x4d, 0x78, 0xd6, 0x64, 0x3c, 0x23, 0xd2, 0x33, 0x18, 0xd7, 0xee, 0x35, 0xce,
    0xf0, 0x0b, 0x1b, 0xe7, 0x62, 0x63, 0xdc, 0xe0, 0xf3, 0xc9, 0x6c, 0x57, 0xd0, 0x4e, 0xcb,
    0x53, 0x1e, 0xde, 0x8b, 0xe9, 0x0b, 0xda, 0xac, 0x3a, 0xa4, 0xcf, 0x7d, 0xe0, 0x57, 0x78,
    0x51, 0xc7, 0x27, 0xa4, 0xde, 0x46, 0xc1, 0x24, 0xfc, 0xdf, 0x39, 0x9f, 0x7a, 0xb6, 0x9f,
    0x7c, 0xee, 0x12, 0x1a, 0xc8, 0xbc, 0xed, 0x11, 0x1e, 0x5b, 0x32, 0x3e, 0x3d, 0xa8, 0x63,
    0xd4, 0x16, 0xd4, 0xba, 0xb9, 0x80, 0x67, 0x17, 0x84, 0x86, 0x8b, 0x2e, 0xa5, 0xe1, 0xa2,
    0x3d, 0x3e, 0xd4, 0xf0, 0xdd, 0xdb, 0x66, 0x4b, 0xb0, 0xf1, 0xc1, 0x3a, 0xc3, 0x4c, 0x47,
    0xdb, 0x01, 0xed, 0x7a, 0xc6, 0x27, 0xd4, 0xbf, 0x51, 0x2f, 0xef, 0xf6, 0x8d, 0x3c, 0x3b,
    0x11, 0x44, 0x1e, 0x72, 0x6b, 0xc7, 0xcf, 0x08, 0xc4, 0xf6, 0x41, 0xbc, 0x20, 0xd0, 0xdb,
    0x4e, 0x32, 0xc2, 0x63, 0x56, 0xe6, 0x15, 0xbd, 0xed, 0x72, 0x27, 0x6d, 0x3c, 0x3b, 0x60,
    0x5e, 0x86, 0x89, 0xcf, 0x9d, 0x9c, 0x79, 0x54, 0xdf, 0xaf, 0x14, 0xfd, 0x2c, 0x22, 0xc4,
    0x99, 0x98, 0xc5, 0x0a, 0xd1, 0x9b, 0x09, 0x4a, 0x4e, 0x59, 0x44, 0x27, 0x8a, 0xf6, 0xa6,
    0x08, 0xc3, 0xed, 0xc6, 0x4d, 0x3d, 0xcf, 0xce, 0x29, 0x39, 0x92, 0x39, 0xfc, 0xac, 0x37,
    0xb7, 0x91, 0x62, 0xd6, 0xf4, 0xec, 0xb4, 0x08, 0xde, 0x5c, 0x6a, 0x01, 0xbd, 0x8f, 0xeb,
    0xa3, 0x37, 0x8d, 0x2c, 0x11, 0xea, 0x61, 0x88, 0x7b, 0x04, 0x15, 0x63, 0x67, 0x42, 0xfe,
    0x8f, 0x8e, 0x08, 0xb7, 0x4f, 0xb2, 0x9c, 0x77, 0xec, 0xa3, 0x7c, 0xb3, 0xda, 0xc9, 0x37,
    0xd1, 0x2b, 0x5f, 0xb2, 0x43, 0x4c, 0x58, 0x44, 0x79, 0xe8, 0xfc, 0xcd, 0x6e, 0xeb, 0xbf,
    0x19, 0x93, 0x23, 0xc6, 0xc6, 0x43, 0x97, 0xa2, 0xf3, 0xee, 0x23, 0x7a, 0xa4, 0x8d, 0x5f,
    0x6f, 0xeb, 0x6b, 0x8d, 0x44, 0x65, 0x63, 0x94, 0x45, 0xc8, 0xc3, 0x34, 0x98, 0x89, 0x5c,
    0xc8, 0x82, 0xfd, 0x05, 0xbe, 0x37, 0x44, 0x6f, 0x68, 0xe9, 0xbc, 0x89, 0x51, 0x32, 0x92,
    0x82, 0xec, 0xcd, 0xe6, 0x79, 0xff, 0xc4, 0xf3, 0x44, 0x0e, 0x3d, 0x09, 0x4d, 0xe2, 0x71,
    0xc8, 0x07, 0x9d, 0x98, 0xbe, 0x4e, 0xaa, 0xcb, 0xc4, 0x71, 0x37, 0x78, 0x1f, 0x4a, 0x94,
    0x98, 0xf9, 0x83, 0x7a, 0xb6, 0x57, 0x99, 0x3f, 0x5c, 0x7b, 0x9d, 0x02, 0xf1, 0xba, 0xce,
    0xf3, 0x76, 0x4c, 0x34, 0xf3, 0x44, 0xf6, 0x7a, 0x8b, 0x98, 0x6f, 0xba, 0xc7, 0x47, 0x44,
    0x78, 0x6b, 0x6c, 0xdf, 0x1e, 0x5e, 0x72, 0x94, 0xf3, 0x30, 0xba, 0x52, 0x00, 0xd5, 0x6d,
    0x6e, 0x75, 0xc6, 0xb8, 0xce, 0x39, 0xea, 0x30, 0xe1, 0xa7, 0x76, 0xa1, 0x17, 0xe6, 0x2b,
    0x2c, 0x8f, 0xc0, 0xa0, 0x6b, 0x9a, 0xcd, 0x27, 0x41, 0x46, 0x09, 0xa3, 0xb5, 0x05, 0x10,
    0x62, 0xe7, 0x4a, 0x98, 0xcf, 0xa3, 0x8c, 0x3c, 0x1c, 0xf2, 0xd8, 0xa6, 0xd1, 0x19, 0x21,
    0x6e, 0x36, 0x97, 0x01, 0xc4, 0xbc, 0xf4, 0x31, 0x89, 0x44, 0xcc, 0x89, 0x1a, 0x07, 0x49,
    0x1c, 0x60, 0x46, 0xd2, 0x28, 0xd4, 0x3a, 0x90, 0xdb, 0x79, 0xca, 0x0b, 0xb2, 0x37, 0xa9,
    0x45, 0x82, 0xde, 0xe9, 0xea, 0x39, 0x41, 0x2f, 0x21, 0x1e, 0x95, 0x44, 0xdf, 0x2b, 0x74,
    0xa2, 0x6c, 0x27, 0x1e, 0x59, 0x01, 0x54, 0x52, 0x1a, 0x0d, 0xff, 0xe9, 0x7a, 0x55, 0x6f,
    0xfa, 0xfe, 0xb0, 0x28, 0xd2, 0x06, 0xf5, 0x20, 0x32, 0x5b, 0xee, 0xf8, 0xbc, 0x39, 0x1d,
    0x30, 0x7b, 0x6b, 0xc7, 0xc5, 0xb1, 0xd2, 0xca, 0x0c, 0xb1, 0xad, 0xb2, 0x97, 0x43, 0x6f,
    0x41, 0xa1, 0x0e, 0x3c, 0xb9, 0x07, 0xe5, 0xba, 0xb7, 0x68, 0x6f, 0xd7, 0xca, 0xc0, 0x87,
    0xbc, 0xd9, 0x87, 0x67, 0x7a, 0x2b, 0x2f, 0xa3, 0x1f, 0xc6, 0x8f, 0x35, 0x7a, 0x9e, 0xe4,
    0xf7, 0xb5, 0xaa, 0x97, 0xd1, 0xbd, 0x4c, 0x23, 0x35, 0xbe, 0x0b, 0x5a, 0x10, 0x7d, 0x04,
    0x8a, 0x26, 0x7e, 0xf4, 0x31, 0x2b, 0xc3, 0xbc, 0x9a, 0x09, 0xbd, 0xc1, 0xc8, 0x7b, 0x82,
    0x84, 0xe3, 0xda, 0x44, 0x9e, 0xbe, 0x38, 0x22, 0x9e, 0xb2, 0xb4, 0x9e, 0x90, 0xc7, 0xba,
    0xd6, 0x43, 0x41, 0x12, 0xb3, 0x36, 0x45, 0xb4, 0x47, 0x3c, 0x7d, 0x33, 0xb5, 0xb9, 0x64,
    0x70, 0x6c, 0x0f, 0x27, 0x7a, 0x43, 0xa5, 0x77, 0xde, 0xcc, 0x0f, 0x0e, 0x6e, 0xa8, 0x0d,
    0x15, 0xf0, 0xe6, 0xe7, 0x9e, 0xa6, 0xd4, 0x66, 0x4b, 0xbd, 0x46, 0x0f, 0x30, 0x5b, 0x24,
    0x27, 0x11, 0x2f, 0x2b, 0x39, 0x83, 0x1b, 0xc8, 0x4b, 0x82, 0x5a, 0x9c, 0xbf, 0x9b, 0x7e,
    0xda, 0xee, 0x89, 0xb4, 0xc1, 0x3c, 0xde, 0xe0, 0x1d, 0x85, 0x4b, 0x50, 0x48, 0xf0, 0xee,
    0x95, 0x47, 0xfb, 0x27, 0xcc, 0x2b, 0xb9, 0x5f, 0x19, 0x36, 0x18, 0xc2, 0xdf, 0x65, 0xf1,
    0x3a, 0x38, 0x84, 0x72, 0x9c, 0x3f, 0x0a, 0xa5, 0x6b, 0x98, 0x7b, 0x8a, 0xaa, 0x77, 0x2e,
    0xd0, 0x78, 0x34, 0xa3, 0x23, 0x8a, 0x68, 0xd5, 0x28, 0x21, 0xa2, 0x95, 0xb4, 0xc7, 0xf2,
    0x4c, 0xd6, 0x04, 0x11, 0xb1, 0x82, 0xef, 0x45, 0x45, 0xa8, 0x93, 0x39, 0x6b, 0xf7, 0xa2,
    0xc7, 0x8a, 0xf5, 0x3f, 0x03, 0xcf, 0xab, 0xef, 0xe3, 0x47, 0xb4, 0xff, 0x1a, 0x96, 0xa6,
    0xac, 0xdb, 0xf8, 0xfb, 0x3f, 0xd2, 0xfc, 0xbf, 0x8a, 0xf9, 0xed, 0x90, 0xfd, 0x37, 0xbf,
    0xf1, 0xd5, 0xfe, 0xfb, 0x28, 0x3f, 0xb2, 0xfd, 0x97, 0xf8, 0xdb, 0x7c, 0x1d, 0xcc, 0x74,
    0x71, 0xa1, 0x9b, 0x90, 0x35, 0x54, 0x7e, 0x55, 0xde, 0xa0, 0x71, 0x0d, 0xfd, 0x67, 0x88,
    0x2d, 0xf0, 0xfd, 0x5b, 0xe5, 0xff, 0xfc, 0x1f, 0xe5, 0x0d, 0x33, 0x1c, 0xd3, 0x6f, 0x94,
    0x56, 0xde, 0x5c, 0xcd, 0xad, 0x01, 0x5a, 0x68, 0xde, 0xd8, 0xef, 0x94, 0xc9, 0x3b, 0x65,
    0xff, 0x2f, 0x70, 0xbb, 0x97, 0x71, 0xa5, 0xbc, 0x19, 0x17, 0x94, 0x5f, 0x7f, 0xfd, 0x55,
    0x5b, 0xd4, 0xd6, 0xac, 0xbd, 0x55, 0xf0, 0x89, 0x32, 0xa6, 0x96, 0xb0, 0x68, 0x3b, 0xb4,
    0x95, 0xa0, 0xdd, 0x59, 0xb7, 0xe6, 0x13, 0x7d, 0x86, 0x0e, 0x56, 0xd4, 0xf8, 0xfc, 0x4e,
    0xea, 0xee, 0xcf, 0x8a, 0xd7, 0x26, 0x34, 0xc4, 0xcd, 0x70, 0x93, 0xdf, 0xc6, 0xbf, 0xff,
    0xfc, 0x45, 0xcc, 0xd3, 0x7f, 0xbd, 0x55, 0x7e, 0xbe, 0x2f, 0x65, 0xf6, 0x6f, 0xe3, 0xc2,
    0xf0, 0x91, 0xd4, 0x0b, 0x35, 0xbe, 0xe5, 0x83, 0x46, 0x0d, 0x5b, 0x2d, 0x60, 0xa6, 0x88,
    0xf3, 0xbf, 0x24, 0xc3, 0xe5, 0x91, 0x00, 0xed, 0x33, 0x83, 0x18, 0xa7, 0xe0, 0xca, 0x9e,
    0x6f, 0xb0, 0xc6, 0xa9, 0x62, 0x00, 0xf5, 0x6f, 0x09, 0x49, 0x53, 0xe2, 0xb6, 0xb4, 0x01,
    0xa9, 0x73, 0xd3, 0xdd, 0xc0, 0x8a, 0x7f, 0xe4, 0x86, 0xb4, 0x91, 0xea, 0x9c, 0x2e, 0x2c,
    0x8c, 0xa6, 0x6f, 0xdf, 0x06, 0x67, 0xd0, 0xb7, 0xdf, 0x43, 0x73, 0x53, 0x1c, 0x87, 0x7b,
    0xfa, 0xc5, 0x1e, 0xbd, 0x99, 0xe9, 0x7f, 0xce, 0x8d, 0x99, 0xfe, 0x66, 0x63, 0xf3, 0xc3,
    0x35, 0x07, 0x73, 0x53, 0x75, 0xed, 0xd9, 0xc6, 0x5b, 0xbf, 0x6b, 0x09, 0xe5, 0xed, 0xc9,
    0x34, 0xd0, 0x90, 0x9d, 0xad, 0xbc, 0xef, 0xa1, 0x9a, 0xad, 0x3c, 0xbf, 0xd1, 0xca, 0x56,
    0xd2, 0x1d, 0xa8, 0xf9, 0x3d, 0xb1, 0x67, 0x66, 0x7b, 0x03, 0xbd, 0xfc, 0x0c, 0xd3, 0x70,
    0x19, 0x8b, 0xcf, 0xfb, 0x13, 0x32, 0xa8, 0x81, 0xea, 0xf9, 0x5c, 0x7a, 0xdf, 0x03, 0x0b,
    0xbd, 0xb6, 0xf1, 0x76, 0xdd, 0x76, 0x51, 0x15, 0x7d, 0x16, 0x2e, 0x86, 0xab, 0xd8, 0x44,
    0x97, 0xc1, 0xd4, 0xcb, 0xd9, 0xed, 0xa1, 0xe2, 0x2f, 0xb5, 0x8d, 0x2e, 0x66, 0x68, 0x7b,
    0x8f, 0x89, 0x7d, 0x68, 0xbf, 0x9e, 0xab, 0x39, 0x9f, 0xd1, 0xae, 0xd3, 0xee, 0x51, 0xbb,
    0xad, 0x56, 0x3e, 0x2e, 0xa3, 0x4d, 0xa8, 0x52, 0xa0, 0x36, 0xa1, 0x93, 0x62, 0xc3, 0x58,
    0xf0, 0x9d, 0x13, 0xf6, 0xce, 0x09, 0xbc, 0xa3, 0x76, 0x9a, 0xbe, 0x3d, 0x6a, 0xb9, 0x53,
    0xde, 0x1f, 0xe1, 0x3b, 0x39, 0xf6, 0x4e, 0x1e, 0xde, 0x11, 0xdb, 0xa9, 0x62, 0x3b, 0x27,
    0xb4, 0x1f, 0x99, 0xfb, 0x52, 0xbf, 0x88, 0xa7, 0x37, 0x66, 0xf8, 0x6e, 0x18, 0xa7, 0xa6,
    0x78, 0xba, 0x49, 0xd9, 0xf6, 0xbc, 0xbe, 0x8f, 0x8d, 0x1d, 0x44, 0xd8, 0xfa, 0xa6, 0x9d,
    0x10, 0x34, 0x5d, 0x82, 0x20, 0xe2, 0xe9, 0xa5, 0x18, 0x35, 0x44, 0xcf, 0x1d, 0x47, 0xcb,
    0x6b, 0xd4, 0xdd, 0x88, 0xae, 0x48, 0x6c, 0x25, 0xe4, 0x9e, 0xdb, 0x3b, 0x9b, 0x7f, 0x36,
    0x7e, 0x58, 0x1e, 0xcc, 0x8f, 0x0b, 0x92, 0xbf, 0x19, 0x39, 0x77, 0xc5, 0xb4, 0x2d, 0xd8,
    0x93, 0xea, 0xe3, 0x48, 0xd3, 0x79, 0xa6, 0x27, 0x27, 0x94, 0x2d, 0x12, 0x3f, 0x9b, 0x29,
    0xfd, 0xa0, 0xeb, 0x27, 0x96, 0x83, 0xb3, 0x64, 0xfe, 0xba, 0x77, 0xd8, 0x75, 0xe0, 0xdc,
    0x51, 0xc4, 0x2a, 0xa9, 0x2c, 0x46, 0x44, 0x63, 0x44, 0x16, 0x46, 0xa0, 0xe4, 0xd1, 0x0f,
    0xa0, 0x5b, 0x7c, 0xfe, 0x5c, 0x3c, 0xe2, 0xff, 0x5e, 0x3f, 0xa2, 0xfe, 0xe7, 0xc9, 0x99,
    0x83, 0x91, 0x61, 0x6a, 0x6b, 0xd3, 0x07, 0x53, 0xfc, 0xff, 0xb7, 0x73, 0xa5, 0xa0, 0xfe,
    0x55, 0xda, 0xde, 0x7a, 0xd5, 0xff, 0x1e, 0xe3, 0xe7, 0x41, 0xee, 0xff, 0x6b, 0x96, 0xa5,
    0xb8, 0x87, 0x32, 0x7f, 0xd8, 0xb2, 0x27, 0x7a, 0x05, 0x14, 0x37, 0xe1, 0xd1, 0xe9, 0xdc,
    0x97, 0xdb, 0x5d, 0xe8, 0x0e, 0x14, 0x85, 0xcd, 0x58, 0x7c, 0x7a, 0x60, 0xdb, 0x1a, 0x7b,
    0x2f, 0xfe, 0x51, 0x4b, 0xe2, 0x8f, 0x7f, 0xf9, 0xc1, 0xd3, 0xeb, 0x94, 0x37, 0xfc, 0xe1,
    0xdf, 0x93, 0x59, 0xa9, 0xb9, 0x3f, 0x39, 0xca, 0x14, 0x94, 0x42, 0x77, 0xa9, 0x0c, 0xe1,
    0xee, 0xbb, 0xcc, 0xcb, 0xfe, 0xe6, 0xfd, 0xb1, 0x71, 0xd6, 0xac, 0xb4, 0xdb, 0x97, 0x5f,
    0x4e, 0x4f, 0xf7, 0x37, 0x50, 0xd5, 0xcb, 0xe1, 0x7f, 0xa4, 0xa7, 0xbf, 0xc8, 0xd5, 0x82,
    0x65, 0x9a, 0xa9, 0xd5, 0x36, 0x2b, 0xbb, 0xc7, 0xc7, 0x42, 0xb5, 0x79, 0x52, 0xad, 0xf8,
    0x50, 0xad, 0x3a, 0x51, 0x6f, 0x61, 0x7f, 0x4f, 0xaf, 0x79, 0xf7, 0x64, 0xb7, 0x57, 0xab,
    0x88, 0x95, 0x13, 0x1d, 0x35, 0xf8, 0x05, 0xea, 0xab, 0x6f, 0x84, 0x81, 0x0c, 0x8d, 0x2d,
    0xf2, 0x11, 0x03, 0xfe, 0x1f, 0xa2, 0xe6, 0x7e, 0xf8, 0x80, 0x91, 0x00, 0x24, 0x52, 0xc3,
    0x80, 0x28, 0xf4, 0xec, 0x5f, 0xa8, 0x4b, 0x45, 0x9d, 0xd9, 0xa0, 0x2b, 0xa3, 0x43, 0x39,
    0xd2, 0x02, 0xde, 0x72, 0x36, 0x37, 0x37, 0xc9, 0xe4, 0x08, 0x33, 0x29, 0xcd, 0x8f, 0xf0,
    0x9e, 0x22, 0xa8, 0x0f, 0xba, 0x4d, 0xbf, 0xfd, 0x91, 0x77, 0x58, 0x28, 0xfd, 0x9b, 0xf8,
    0xc6, 0xee, 0x79, 0xa5, 0x75, 0x7a, 0x52, 0x11, 0xe6, 0x88, 0x3f, 0x21, 0x1d, 0x8d, 0xe6,
    0xf1, 0xa9, 0xd8, 0x5d, 0xb9, 0x34, 0xeb, 0x31, 0x75, 0xa5, 0x2f, 0x8f, 0xf4, 0xc1, 0xd8,
    0xce, 0xef, 0xdc, 0xab, 0x64, 0xa0, 0x5a, 0x8a, 0xa3, 0x9b, 0x57, 0xef, 0x67, 0xfa, 0x15,
    0x09, 0x28, 0xb0, 0x8a, 0x36, 0x9f, 0xd1, 0xa0, 0x0b, 0xc3, 0x35, 0x54, 0xd3, 0xb8, 0x25,
    0xd8, 0x26, 0x0d, 0x06, 0xd1, 0x61, 0x95, 0x24, 0xb9, 0x9e, 0x4c, 0xe7, 0xa6, 0xf9, 0x21,
    0x31, 0xb7, 0x2d, 0x7a, 0xe2, 0xfb, 0x8b, 0x23, 0x83, 0xcb, 0x89, 0x21, 0x2e, 0x39, 0xf4,
    0xf1, 0xd7, 0xe0, 0x9b, 0x88, 0x40, 0x02, 0x69, 0xe5, 0xf9, 0x1f, 0xe8, 0xa2, 0xe2, 0x2b,
    0x9a, 0x34, 0xfe, 0x90, 0xb7, 0xcc, 0x3f, 0xff, 0xb6, 0xe1, 0x4d, 0xc2, 0x86, 0x3f, 0xf8,
    0x8b, 0xdd, 0x7b, 0x24, 0x0e, 0xbb, 0x50, 0x8e, 0x8e, 0x39, 0xed, 0xbb, 0x20, 0x40, 0x44,
    0x01, 0x49, 0xae, 0xf8, 0x1f, 0x7e, 0xf9, 0xc1, 0xff, 0x7b, 0x93, 0x3a, 0xc9, 0xa0, 0xec,
    0x3a, 0x89, 0x1f, 0xc8, 0xcf, 0x1e, 0xb1, 0x9b, 0x48, 0xa1, 0xf2, 0xd7, 0x73, 0xd4, 0xa2,
    0x8b, 0xbe, 0x41, 0xbd, 0xe9, 0x7b, 0xe8, 0xa9, 0xde, 0xce, 0x0f, 0xf1, 0x59, 0xa3, 0x59,
    0x37, 0xa3, 0x3d, 0xee, 0xbd, 0xce, 0xbd, 0xd5, 0xb5, 0xce, 0x11, 0xbb, 0x29, 0x35, 0xf7,
    0xc5, 0x5e, 0xf9, 0xf8, 0xb0, 0x5a, 0xc1, 0x1b, 0x54, 0x7a, 0x5b, 0x4c, 0xcb, 0x9d, 0x97,
    0xf2, 0xe8, 0x61, 0xa0, 0x75, 0xa8, 0x97, 0xbb, 0x36, 0xae, 0x39, 0x03, 0xd4, 0xaa, 0xbb,
    0x7a, 0x3b, 0xdc, 0x26, 0xb7, 0xc8, 0x97, 0xc7, 0xfb, 0x7b, 0x65, 0x78, 0x67, 0xc1, 0x6e,
    0x6f, 0x40, 0xb3, 0x5e, 0x36, 0x2b, 0xd5, 0xbd, 0x4b, 0xea, 0x65, 0xb0, 0x47, 0x34, 0xf0,
    0xc8, 0xf3, 0x02, 0x68, 0x02, 0x5d, 0x5d, 0x7a, 0xeb, 0xee, 0xdd, 0xa4, 0xf7, 0xd0, 0x53,
    0x5b, 0x21, 0x11, 0x0a, 0x1d, 0xe6, 0x5d, 0xdf, 0x69, 0x61, 0x99, 0x9d, 0x39, 0xd5, 0xd8,
    0x95, 0xe3, 0xfd, 0x1e, 0xd5, 0xfa, 0x6f, 0x99, 0xd6, 0xbf, 0xe4, 0xfd, 0xd5, 0xf6, 0x9a,
    0xbf, 0x35, 0xbf, 0xbf, 0x58, 0xef, 0xc0, 0xbb, 0xf5, 0x1e, 0x60, 0xfd, 0x17, 0x75, 0xd6,
    0x66, 0xf9, 0xf8, 0x20, 0x5f, 0xf1, 0x23, 0x1e, 0xa8, 0x07, 0x44, 0xb7, 0xcc, 0x3d, 0x13,
    0x7b, 0xad, 0xea, 0x80, 0xde, 0x3e, 0xd3, 0xdb, 0xf6, 0x4b, 0x28, 0x5f, 0xa6, 0xe3, 0x03,
    0x77, 0x87, 0x4e, 0x1f, 0xc7, 0x0f, 0xc6, 0xa1, 0xd3, 0xa9, 0x1e, 0x6a, 0xf4, 0x26, 0xbb,
    0xdc, 0xa7, 0x51, 0x05, 0xcd, 0x5c, 0x20, 0xaa, 0x80, 0x46, 0x5a, 0x20, 0x2d, 0x87, 0x40,
    0xb9, 0x6d, 0x6f, 0xb2, 0xc8, 0x07, 0x3e, 0x26, 0x5d, 0x18, 0xa7, 0x6e, 0x4b, 0xf6, 0xd8,
    0xcf, 0x22, 0x6e, 0xf1, 0xc3, 0x51, 0x0e, 0xed, 0x71, 0x03, 0xc6, 0xb0, 0xbe, 0xd7, 0xee,
    0x5e, 0x10, 0x1e, 0x2f, 0x34, 0xbb, 0x64, 0x6c, 0x0e, 0xe2, 0x78, 0x41, 0xc7, 0xbe, 0x9c,
    0xf8, 0x9c, 0xe2, 0x2d, 0xfb, 0x44, 0x98, 0xab, 0x83, 0xec, 0x73, 0xd5, 0x65, 0x73, 0x65,
    0xb7, 0xff, 0xa4, 0x0f, 0x6d, 0x7a, 0xb2, 0x43, 0xfe, 0x41, 0x1a, 0x9b, 0x94, 0xc6, 0x8a,
    0x43, 0x7e, 0x3a, 0x22, 0x51, 0x28, 0x4d, 0xea, 0x25, 0xc0, 0xfa, 0x4a, 0xfb, 0xcf, 0xa2,
    0x58, 0xdb, 0x52, 0x64, 0x8a, 0x38, 0x26, 0x09, 0xd1, 0x15, 0x47, 0xc9, 0xd8, 0x46, 0x87,
    0xa5, 0x77, 0xc3, 0x24, 0xe3, 0xe9, 0x23, 0xce, 0x41, 0x14, 0x4e, 0x91, 0x78, 0xdb, 0x60,
    0x47, 0x7b, 0xad, 0xa2, 0x41, 0x99, 0x26, 0xe6, 0x15, 0x91, 0xa2, 0x0c, 0x38, 0x56, 0xfa,
    0xdc, 0x5e, 0x62, 0x34, 0x03, 0x96, 0x6b, 0x78, 0x79, 0x69, 0x60, 0xea, 0xab, 0xdd, 0x6a,
    0x77, 0x91, 0xd3, 0xce, 0xda, 0xb9, 0x86, 0x23, 0xe0, 0x5c, 0x1f, 0x69, 0x65, 0xc4, 0xb4,
    0x7a, 0x6e, 0xf0, 0x16, 0xce, 0x02, 0x39, 0x31, 0xf6, 0x3c, 0x8d, 0xe1, 0xbd, 0x46, 0xe7,
    0xe4, 0xbc, 0xbb, 0x73, 0xd8, 0xce, 0xed, 0x54, 0x18, 0x46, 0x89, 0x88, 0x1b, 0x3f, 0xea,
    0x57, 0xb7, 0xf1, 0xa6, 0x8e, 0x44, 0x21, 0x14, 0x76, 0xae, 0x7b, 0xbe, 0xd7, 0x3e, 0xf0,
    0x55, 0x6d, 0x75, 0x4a, 0x87, 0xed, 0xaa, 0x79, 0xd5, 0xcc, 0xed, 0x9c, 0x01, 0x4f, 0x08,
    0xe6, 0x9f, 0x88, 0x97, 0x37, 0x8b, 0x42, 0x61, 0x63, 0xb1, 0x33, 0xe7, 0x78, 0xb4, 0x97,
    0x45, 0x8f, 0xd1, 0x1f, 0xe8, 0x59, 0x4d, 0x3c, 0xac, 0x49, 0xdf, 0x6f, 0x31, 0x4f, 0xa9,
    0xea, 0x83, 0x13, 0x6b, 0xbe, 0xdf, 0xda, 0xdb, 0xd3, 0x60, 0x3e, 0x10, 0xb3, 0x1b, 0xf3,
    0x0c, 0x96, 0x12, 0x06, 0x39, 0x46, 0x9c, 0x90, 0xbc, 0x72, 0x97, 0x17, 0x9a, 0x49, 0xbd,
    0x2b, 0xde, 0xd8, 0x34, 0xba, 0x5a, 0xb5, 0x93, 0xdb, 0xa9, 0x37, 0x5b, 0x37, 0x51, 0x9e,
    0x14, 0xe3, 0xa1, 0x28, 0xe0, 0x29, 0xe1, 0x69, 0x96, 0xe0, 0x26, 0x11, 0xef, 0x77, 0x82,
    0x71, 0x8c, 0xf8, 0x41, 0x93, 0x2e, 0x62, 0x5a, 0xe0, 0xcd, 0xc4, 0x18, 0x4e, 0xc7, 0x3c,
    0x63, 0xaa, 0x1d, 0x98, 0x23, 0x38, 0xd9, 0x6e, 0x33, 0x6c, 0x05, 0x9e, 0x3f, 0x89, 0xe0,
    0x9c, 0x1a, 0x69, 0xd8, 0x86, 0xe4, 0x26, 0xe2, 0x7a, 0x70, 0x88, 0x78, 0x34, 0x9f, 0x6e,
    0xb7, 0xbb, 0x49, 0xd8, 0x49, 0x67, 0x1a, 0xde, 0xe4, 0x8c, 0xe5, 0x28, 0x94, 0xe8, 0x1c,
    0x26, 0xe6, 0x9b, 0x59, 0x32, 0x7c, 0x3b, 0xc4, 0xf3, 0x11, 0x3f, 0x7f, 0x0c, 0x61, 0x02,
    0xe1, 0xf4, 0x05, 0x72, 0x57, 0x41, 0x5f, 0xe7, 0x98, 0x97, 0x99, 0xd2, 0xe2, 0xe5, 0x75,
    0xea, 0x4f, 0x4a, 0x1e, 0x4d, 0xa1, 0xfc, 0x19, 0x41, 0xfe, 0xa6, 0xb9, 0x54, 0xaa, 0xe4,
    0x46, 0x3f, 0x9d, 0x1b, 0xa8, 0xaf, 0xac, 0xb5, 0xdb, 0xb9, 0x7c, 0xf5, 0x68, 0x79, 0x93,
    0xfb, 0xdb, 0xc1, 0xf9, 0xed, 0x06, 0x30, 0x0f, 0x43, 0x5e, 0x10, 0xbb, 0xdb, 0x62, 0x5b,
    0xbc, 0x19, 0xfc, 0x26, 0x48, 0x1a, 0x97, 0x04, 0x9c, 0x62, 0xb1, 0x7e, 0x16, 0xb3, 0x9f,
    0xda, 0xe1, 0xf9, 0x10, 0x08, 0xee, 0x43, 0x14, 0x0d, 0xc7, 0x66, 0xfd, 0xac, 0xdd, 0xe9,
    0xfc, 0x4f, 0x2b, 0x98, 0x6b, 0x46, 0xba, 0xf9, 0x3a, 0xd6, 0x0a, 0xd5, 0x65, 0xaf, 0x58,
    0x78, 0x86, 0x30, 0xef, 0x42, 0x0e, 0x0f, 0xb9, 0xad, 0x88, 0x5b, 0x76, 0x2c, 0xbb, 0xbc,
    0xfc, 0x43, 0x11, 0x2b, 0xfd, 0xfb, 0x88, 0x04, 0x88, 0x3e, 0xff, 0xaf, 0xf7, 0x26, 0x28,
    0xfc, 0x5f, 0x28, 0x85, 0xfd, 0xff, 0x8b, 0x5b, 0x1f, 0x4b, 0xaf, 0xe7, 0xff, 0xc7, 0xf8,
    0xbd, 0xff, 0x79, 0xbd, 0xff, 0xb9, 0xbb, 0xa1, 0x87, 0xd8, 0x09, 0xe5, 0xcb, 0x0a, 0xf2,
    0x43, 0x28, 0x63, 0x38, 0xb6, 0x49, 0xc2, 0xce, 0xa5, 0x62, 0xfc, 0xe9, 0x46, 0xc2, 0x75,
    0x64, 0xb9, 0xca, 0x5d, 0x0c, 0xbd, 0xbd, 0xf9, 0x2a, 0x5c, 0x96, 0x44, 0x5d, 0xb1, 0xf4,
    0xde, 0x7d, 0xf5, 0x0e, 0xed, 0x8e, 0x4c, 0x14, 0x79, 0xee, 0xbc, 0x77, 0xed, 0xf7, 0x53,
    0xbe, 0x77, 0x5f, 0xca, 0x7d, 0x0b, 0x8d, 0xf3, 0x56, 0xd9, 0xc9, 0x01, 0xfd, 0x71, 0xf5,
    0xf1, 0xa3, 0x65, 0xfe, 0xe8, 0xbd, 0x7d, 0x76, 0xf2, 0x5a, 0xb2, 0xbb, 0x93, 0xdb, 0x86,
    0x73, 0x83, 0x27, 0xbc, 0x3e, 0x7b, 0xa7, 0x4f, 0x7c, 0x78, 0x9b, 0x78, 0xc2, 0xaa, 0x64,
    0x3b, 0xb9, 0xa4, 0xd9, 0x28, 0xa7, 0xe8, 0xa3, 0x25, 0xde, 0xa3, 0x90, 0x8c, 0x58, 0xe5,
    0x9d, 0xc3, 0x88, 0x64, 0x9d, 0x2c, 0xec, 0x38, 0xe8, 0x1b, 0xd6, 0x2b, 0x8b, 0xf7, 0x1a,
    0x2d, 0xc6, 0x5e, 0xa2, 0x6f, 0x65, 0xd2, 0xbd, 0x4b, 0xff, 0x02, 0xd1, 0x78, 0x88, 0xd6,
    0x74, 0x97, 0xc2, 0x33, 0x04, 0x5e, 0x61, 0xa6, 0x3c, 0x44, 0xdb, 0xd2, 0x60, 0x6e, 0xc2,
    0x62, 0xe6, 0xcd, 0x23, 0x44, 0x8a, 0xbe, 0x1a, 0x4c, 0xba, 0x93, 0x1e, 0x66, 0x9b, 0x22,
    0x22, 0xde, 0x8d, 0x50, 0x0d, 0x74, 0xb0, 0xcc, 0xe7, 0xfa, 0xcb, 0xfc, 0x82, 0x66, 0xa4,
    0x3c, 0xaf, 0x7b, 0x8e, 0xe8, 0xfd, 0x3f, 0xb8, 0x10, 0xee, 0xa7, 0x10, 0x24, 0xef, 0xff,
    0xdd, 0xc7, 0xe0, 0xfe, 0xbf, 0xbd, 0xfd, 0xea, 0xff, 0xf1, 0x38, 0x3f, 0x6b, 0xb5, 0xff,
    0x2f, 0x59, 0x99, 0x24, 0xc7, 0x88, 0x7f, 0x19, 0xca, 0x8e, 0x43, 0x67, 0xd8, 0xbe, 0x30,
    0x09, 0x6b, 0x6f, 0x47, 0x90, 0x37, 0x73, 0x22, 0x33, 0xe2, 0x4f, 0x0c, 0x75, 0x9d, 0x65,
    0xef, 0x08, 0xf2, 0x23, 0xca, 0x07, 0x59, 0x94, 0x2f, 0x70, 0x3a, 0xf5, 0xde, 0xe3, 0x27,
    0x07, 0x95, 0x25, 0x7c, 0xfd, 0x5b, 0xb6, 0xa6, 0x7f, 0x65, 0xce, 0x09, 0x1f, 0xfe, 0x7d,
    0xdc, 0xb8, 0xe8, 0x37, 0x41, 0xac, 0xd3, 0xef, 0xd1, 0xab, 0xe3, 0x7d, 0x1f, 0x14, 0x22,
    0xbf, 0xd3, 0xa5, 0x60, 0xca, 0xfa, 0xcf, 0x15, 0xb6, 0x02, 0xeb, 0xbf, 0x90, 0xdb, 0x2e,
    0x5e, 0xd7, 0xff, 0x63, 0xfc, 0xd0, 0x29, 0xdf, 0xa4, 0x4b, 0x1c, 0xb4, 0x21, 0x04, 0x3c,
    0x6a, 0x9a, 0x5e, 0x7f, 0x1e, 0xef, 0x27, 0xe6, 0xfc, 0xcf, 0xb4, 0xf3, 0xf5, 0x98, 0x00,
    0xce, 0xff, 0xf9, 0x42, 0xf8, 0xfe, 0x3f, 0xbf, 0xfd, 0xf1, 0x75, 0xfd, 0x3f, 0xc6, 0xcf,
    0xdc, 0xff, 0x7f, 0x5e, 0xa8, 0xb3, 0x61, 0x04, 0xd0, 0x5f, 0xc5, 0x22, 0xde, 0x78, 0x8a,
    0x21, 0xe5, 0x48, 0x6c, 0xfe, 0xc0, 0x9e, 0xcd, 0xa0, 0x4d, 0x73, 0x09, 0x07, 0xb1, 0xa1,
    0x47, 0xb8, 0x19, 0x05, 0xac, 0x53, 0xc6, 0xb4, 0x12, 0xd3, 0xb8, 0x22, 0x48, 0x75, 0x94,
    0x03, 0xde, 0xbe, 0x9a, 0xd9, 0x13, 0xac, 0x8d, 0x44, 0x58, 0xbf, 0xa7, 0x57, 0xa2, 0x04,
    0x8f, 0xdf, 0x9c, 0xb2, 0xe6, 0xe5, 0xa0, 0x79, 0xdd, 0x1d, 0xd9, 0x1a, 0x89, 0x25, 0x77,
    0xa2, 0xb5, 0x7f, 0xfc, 0x91, 0x7c, 0x23, 0x46, 0x6a, 0x07, 0xae, 0x5b, 0xa5, 0xeb, 0x53,
    0x83, 0xf4, 0x8f, 0xb5, 0x6b, 0x3e, 0x88, 0xff, 0x7c, 0x40, 0x90, 0x4e, 0x56, 0xd2, 0x7e,
    0xd3, 0xd3, 0x4a, 0xf7, 0x8a, 0xd5, 0x46, 0x3b, 0xe6, 0x5e, 0x8b, 0x46, 0x69, 0x92, 0x7b,
    0xae, 0x21, 0x47, 0x05, 0xcb, 0x91, 0xbe, 0x2e, 0x41, 0x2a, 0x23, 0x11, 0xab, 0x18, 0xdd,
    0x23, 0x94, 0xf9, 0x65, 0x3a, 0x8e, 0x1c, 0xa5, 0x6c, 0xf8, 0x48, 0x62, 0xcd, 0x4e, 0x83,
    0x3b, 0x5d, 0x74, 0xcb, 0x62, 0xe4, 0xac, 0x4e, 0xbd, 0xf7, 0x4e, 0x9b, 0xe5, 0x9b, 0x62,
    0x5c, 0xad, 0x37, 0x96, 0x09, 0x91, 0x9e, 0x22, 0x8e, 0x6b, 0xc5, 0x2d, 0xc2, 0x89, 0xcc,
    0xe4, 0x69, 0x8e, 0x07, 0x11, 0xc3, 0x35, 0x70, 0x0a, 0x95, 0x10, 0x68, 0x9a, 0x88, 0x61,
    0x3c, 0xed, 0x48, 0xb4, 0x08, 0x46, 0x8a, 0xf2, 0x7c, 0x9b, 0x02, 0xf6, 0x3a, 0xd1, 0xda,
    0xc4, 0xea, 0x47, 0xcd, 0x8d, 0xe7, 0x95, 0x55, 0x31, 0x1f, 0x21, 0x8e, 0xed, 0xc1, 0xcd,
    0x47, 0x23, 0x4c, 0xbd, 0x08, 0x2b, 0x92, 0xa3, 0x86, 0x68, 0x8f, 0x79, 0x8a, 0x06, 0x86,
    0x03, 0x41, 0x5b, 0x3c, 0xbe, 0xf0, 0xf2, 0x40, 0x44, 0x61, 0x89, 0xf3, 0x7b, 0x06, 0x66,
    0x4e, 0xb0, 0x87, 0x7b, 0x18, 0xbe, 0x23, 0x3f, 0x0f, 0x47, 0x60, 0x0c, 0x48, 0xfe, 0x2e,
    0xe5, 0x16, 0x95, 0x2f, 0xa9, 0x5c, 0x19, 0x91, 0xfc, 0x8e, 0x87, 0x27, 0x77, 0xcb, 0x8d,
    0xf4, 0xf6, 0xec, 0xd7, 0x9f, 0xd5, 0x7e, 0xa2, 0xf7, 0x7f, 0x6e, 0x79, 0x7b, 0x94, 0xfd,
    0x63, 0x29, 0x64, 0xff, 0xdf, 0xca, 0x17, 0x0a, 0xaf, 0xfb, 0xff, 0x63, 0xfc, 0x3c, 0xc8,
    0x7f, 0xb2, 0x0c, 0x22, 0xfd, 0x92, 0xcd, 0x54, 0x21, 0xb6, 0xe1, 0xaf, 0xf9, 0x18, 0x83,
    0xdd, 0xbc, 0xf9, 0xbb, 0xd1, 0x38, 0x30, 0x4e, 0xc8, 0xf1, 0x89, 0x3c, 0x65, 0x80, 0x2f,
    0x00, 0x0f, 0x86, 0x59, 0xf0, 0x77, 0xf1, 0x60, 0xf3, 0xf5, 0xeb, 0x95, 0x61, 0xea, 0x88,
    0x1b, 0x28, 0x34, 0xf4, 0x1d, 0xdd, 0x18, 0x7d, 0x9e, 0xef, 0xdb, 0xa6, 0xec, 0x40, 0x17,
    0x51, 0x95, 0x5c, 0xc6, 0xf8, 0xbb, 0x82, 0x23, 0xd9, 0x26, 0xf3, 0x47, 0x0b, 0xbb, 0x5f,
    0x03, 0xc4, 0xfe, 0x5a, 0xb7, 0x06, 0x21, 0xd8, 0x42, 0x57, 0xd1, 0x20, 0x5c, 0xbd, 0xc5,
    0xc7, 0x57, 0xd2, 0x20, 0xf6, 0xb9, 0x8d, 0xb9, 0x5e, 0x69, 0xe0, 0xe7, 0xc3, 0x7a, 0xa7,
    0x71, 0x4f, 0x3d, 0xcc, 0x89, 0xf6, 0xf9, 0x4d, 0xf9, 0xb8, 0x6a, 0xa2, 0xa6, 0xc0, 0x34,
    0x93, 0x6a, 0x0c, 0xe7, 0xd3, 0x32, 0xf1, 0xa0, 0x01, 0xed, 0x00, 0xbd, 0x44, 0xda, 0x65,
    0xeb, 0xa2, 0x3b, 0x46, 0x6f, 0x9a, 0x93, 0x41, 0xe5, 0x84, 0xe0, 0x4c, 0x74, 0x38, 0xe6,
    0xc3, 0x36, 0xf5, 0xb1, 0x3b, 0xea, 0x05, 0x09, 0xbb, 0xa3, 0x33, 0xf0, 0xbc, 0x58, 0x98,
    0xf2, 0x0d, 0xbe, 0xfb, 0xc6, 0x35, 0x8b, 0x0e, 0xb3, 0x69, 0xd3, 0x32, 0x03, 0x8e, 0xa7,
    0xa2, 0xa7, 0x4b, 0xd7, 0xd3, 0x58, 0x04, 0x2d, 0x86, 0x68, 0x2c, 0xda, 0xb1, 0xac, 0x99,
    0x98, 0x07, 0xd6, 0x62, 0x01, 0xef, 0x9d, 0x65, 0xd6, 0x4c, 0x0e, 0x98, 0x9f, 0x7e, 0x55,
    0x8f, 0xc7, 0x2c, 0x44, 0x61, 0x5f, 0xfe, 0x6a, 0xd8, 0x87, 0x5e, 0xb4, 0x4d, 0x35, 0xb8,
    0xc5, 0x39, 0x96, 0x3f, 0x71, 0x44, 0x6f, 0x95, 0xe3, 0x32, 0xcd, 0xa8, 0xee, 0x67, 0xe9,
    0xd5, 0x80, 0x98, 0xa6, 0xd3, 0xc0, 0xec, 0x9c, 0x7b, 0xfd, 0x83, 0x1b, 0x92, 0xf9, 0x2a,
    0xde, 0xc5, 0x6f, 0xec, 0xf3, 0x25, 0x7e, 0x5b, 0x1f, 0x88, 0xcb, 0x8c, 0xb4, 0xb5, 0x63,
    0xb8, 0xde, 0xc5, 0x9e, 0xa3, 0x77, 0x78, 0xbc, 0x42, 0xe9, 0xa8, 0x4d, 0x30, 0x76, 0xeb,
    0xf4, 0xde, 0xe9, 0x85, 0xb3, 0x3e, 0x04, 0x32, 0xd8, 0xd1, 0x4c, 0xbc, 0x8d, 0x0b, 0x72,
    0x2f, 0x65, 0xc2, 0x38, 0x4d, 0xc0, 0xd3, 0x20, 0x9e, 0x32, 0x64, 0xec, 0x4f, 0xf0, 0xbd,
    0xf4, 0xba, 0xa1, 0x9e, 0x2b, 0xa5, 0xb0, 0xd7, 0xcc, 0x7e, 0x92, 0x27, 0x47, 0xb5, 0xd8,
    0x19, 0x5a, 0xba, 0xd4, 0x2b, 0x68, 0x3f, 0x17, 0x9c, 0x87, 0xb9, 0xe7, 0xe1, 0xd2, 0x0e,
    0x73, 0x50, 0x75, 0xfa, 0x55, 0x1a, 0x8f, 0x8b, 0x59, 0xe5, 0x1b, 0xe7, 0x37, 0x4e, 0xf7,
    0x04, 0x0d, 0x31, 0x83, 0x07, 0x48, 0xf4, 0x78, 0x30, 0x6d, 0xcf, 0x0e, 0x78, 0x61, 0x64,
    0xca, 0xa2, 0xf7, 0xff, 0xe0, 0x5d, 0xda, 0xfd, 0xf4, 0x80, 0x94, 0xf8, 0xcf, 0x42, 0xd8,
    0xbf, 0xf4, 0xb1, 0xf0, 0xea, 0xff, 0xff, 0x28, 0x3f, 0x0f, 0xb2, 0xff, 0x07, 0xd9, 0x47,
    0xeb, 0x53, 0x74, 0xc7, 0x34, 0x2c, 0xf7, 0xbd, 0x66, 0x38, 0x78, 0x83, 0xff, 0xde, 0xd2,
    0xdc, 0xf7, 0x04, 0xf1, 0xff, 0xdf, 0xee, 0x72, 0xaa, 0x3b, 0x83, 0x99, 0x31, 0x75, 0xdf,
    0x42, 0x1f, 0x2c, 0xfb, 0x3d, 0x6e, 0xd9, 0x0e, 0xb0, 0xa9, 0x4e, 0x2e, 0xda, 0x83, 0x55,
    0x3e, 0xca, 0xc1, 0x2f, 0xb9, 0xb2, 0x40, 0x35, 0x8b, 0x3a, 0xaf, 0x48, 0x13, 0x74, 0x88,
    0xa7, 0xea, 0xcc, 0x3a, 0xc4, 0x5f, 0x82, 0xc9, 0x20, 0xb4, 0x6c, 0x84, 0x26, 0x7f, 0x15,
    0x27, 0x2e, 0xd2, 0x11, 0x83, 0x14, 0x3b, 0x7e, 0xa2, 0xcb, 0x74, 0xc4, 0x7b, 0xdc, 0x41,
    0xad, 0x1a, 0x04, 0xe6, 0x28, 0x3b, 0xe8, 0x8e, 0x2f, 0xc4, 0x08, 0xb0, 0xd6, 0x2a, 0x68,
    0x91, 0x3b, 0xd8, 0x4a, 0xa8, 0xea, 0xcd, 0x4e, 0xc5, 0x39, 0x19, 0x37, 0xf7, 0x1a, 0xed,
    0x0a, 0x8d, 0x0c, 0x44, 0x04, 0x2d, 0x93, 0x68, 0x0e, 0xc7, 0x07, 0x5a, 0x99, 0xa0, 0x7a,
    0x0d, 0xe1, 0xbc, 0x6e, 0x53, 0xe4, 0xef, 0x66, 0x85, 0xf8, 0x05, 0x8b, 0xdf, 0xa3, 0xcf,
    0xb7, 0x72, 0xdd, 0xa0, 0xf6, 0x0b, 0xbc, 0xd9, 0xee, 0xc2, 0xbf, 0x5d, 0xd4, 0x3c, 0x5a,
    0xd4, 0x40, 0xcc, 0xbd, 0x16, 0x94, 0x25, 0x68, 0x53, 0x5d, 0x0f, 0x59, 0x8b, 0x94, 0x11,
    0x85, 0x43, 0xd5, 0x47, 0x00, 0x3f, 0x26, 0x88, 0x6d, 0xc4, 0x17, 0xfa, 0x86, 0xf8, 0x42,
    0xad, 0xa1, 0x85, 0xda, 0x87, 0x73, 0xcd, 0x6c, 0x1a, 0x7b, 0x1c, 0xfd, 0x9d, 0x69, 0x1f,
    0xa0, 0x0d, 0x69, 0xe5, 0xa8, 0xe2, 0xa4, 0x1d, 0xac, 0x53, 0x23, 0x08, 0x6a, 0xd0, 0x3e,
    0x88, 0x46, 0xe5, 0xe3, 0x43, 0xaf, 0x5f, 0x4d, 0xd2, 0xaf, 0xcc, 0xf6, 0x0e, 0xd1, 0x4f,
    0xd1, 0xd6, 0x71, 0x5d, 0x3b, 0xe0, 0x88, 0x1f, 0xf9, 0xb1, 0x7a, 0x51, 0x1f, 0xc1, 0xae,
    0x1e, 0x9f, 0xe3, 0x6d, 0x7c, 0xc3, 0x65, 0x68, 0xe4, 0xbb, 0x1a, 0xd9, 0x95, 0xea, 0xdf,
    0xdc, 0xbf, 0x80, 0x72, 0x1c, 0x65, 0x02, 0x76, 0xc0, 0x4f, 0x6e, 0x5f, 0xd8, 0xad, 0xc5,
    0x7c, 0xf1, 0x79, 0x9c, 0x96, 0xc3, 0x91, 0x87, 0xef, 0x8f, 0x5c, 0x81, 0x88, 0xc2, 0xb0,
    0x1f, 0x50, 0xc4, 0x8a, 0x1a, 0x41, 0x00, 0x89, 0xa2, 0x23, 0xa8, 0x6d, 0xf8, 0x76, 0x8f,
    0xbc, 0x79, 0x51, 0xda, 0x08, 0xcf, 0x95, 0x18, 0xad, 0x89, 0xc8, 0xbe, 0x7d, 0x2c, 0x3f,
    0xc0, 0x86, 0x92, 0x98, 0x07, 0x2b, 0xd0, 0xa6, 0x8c, 0x54, 0x12, 0xea, 0x43, 0x8c, 0xc6,
    0x97, 0xe7, 0xf4, 0x80, 0xe7, 0xf3, 0x6b, 0xee, 0x11, 0x34, 0xb1, 0xea, 0xce, 0x15, 0x7c,
    0xfa, 0x09, 0x2a, 0x73, 0xf8, 0xdd, 0x03, 0x3f, 0x1f, 0xb3, 0x5c, 0x8f, 0xcf, 0x63, 0xa7,
    0xa0, 0x41, 0xdd, 0xf2, 0x3c, 0xd3, 0xbb, 0x99, 0x72, 0x9b, 0xfb, 0xa8, 0x55, 0x5b, 0xc6,
    0x45, 0xee, 0xd5, 0x5e, 0xf4, 0x74, 0x3f, 0xa2, 0xfe, 0x27, 0xc6, 0xbf, 0xaf, 0x13, 0x06,
    0xed, 0xfe, 0xe7, 0x63, 0x2e, 0x84, 0xff, 0xfc, 0xb1, 0x94, 0x7f, 0xd5, 0xff, 0x1e, 0xe3,
    0x41, 0xf4, 0xbf, 0x3a, 0x61, 0x24, 0x62, 0xd8, 0xe0, 0x40, 0xc5, 0x21, 0x5b, 0x10, 0x7a,
    0x7c, 0x45, 0xcf, 0x82, 0xaf, 0xc0, 0x7a, 0xb2, 0x4d, 0xe8, 0xdf, 0xce, 0x00, 0x5a, 0x16,
    0x0f, 0xa0, 0x84, 0x6f, 0x20, 0x8a, 0xaa, 0x7c, 0x65, 0x7c, 0xe4, 0x40, 0xeb, 0x9b, 0x82,
    0x06, 0xd5, 0x83, 0xee, 0x44, 0x83, 0xc9, 0x84, 0xb6, 0x64, 0x18, 0xdf, 0xa4, 0xcb, 0xa1,
    0xde, 0x47, 0x3c, 0x7d, 0x28, 0x95, 0xed, 0xf8, 0x9c, 0x1e, 0xcc, 0x8f, 0x27, 0xd3, 0x5b,
    0xc8, 0x43, 0x81, 0xe7, 0x40, 0xbd, 0x32, 0x44, 0x95, 0xe2, 0x84, 0x38, 0xbc, 0x84, 0xde,
    0x6d, 0xc7, 0x44, 0x83, 0x0f, 0xdd, 0x66, 0x51, 0xdd, 0x20, 0x6a, 0xdb, 0x79, 0x75, 0x41,
    0x7f, 0x16, 0x4f, 0x50, 0xed, 0xc3, 0x04, 0x36, 0x7b, 0xa8, 0xee, 0x80, 0xda, 0x82, 0xe1,
    0x53, 0x38, 0x38, 0x63, 0x28, 0xd7, 0x9f, 0x1e, 0xd8, 0x2c, 0x0d, 0xab, 0x72, 0x19, 0x28,
    0xa1, 0x61, 0x64, 0x07, 0x97, 0x25, 0x61, 0x4b, 0xdd, 0x13, 0xae, 0x42, 0xf5, 0x48, 0x68,
    0x0f, 0xa7, 0xa2, 0xa1, 0x5b, 0xa1, 0xd0, 0xa9, 0x7e, 0xa5, 0x21, 0x25, 0xa4, 0x61, 0x6a,
    0xde, 0xbf, 0x6a, 0x82, 0xb2, 0xc5, 0x69, 0x99, 0x87, 0x54, 0xa9, 0xb9, 0x26, 0x86, 0x54,
    0x85, 0x18, 0x89, 0xc6, 0x91, 0x18, 0x83, 0x8d, 0xb6, 0xcb, 0xd2, 0x8e, 0x33, 0xa0, 0xb8,
    0x01, 0x8b, 0x40, 0x35, 0xe6, 0xd2, 0x60, 0x6a, 0x57, 0xf8, 0x4a, 0xe7, 0x94, 0x19, 0x47,
    0x73, 0x51, 0xce, 0xc4, 0xad, 0x72, 0x24, 0x39, 0x09, 0x85, 0xd3, 0x43, 0xbb, 0x97, 0xe7,
    0xd9, 0xf2, 0xd2, 0xec, 0xd2, 0xd4, 0xa4, 0x92, 0x71, 0x65, 0x4c, 0x54, 0x04, 0x34, 0xd0,
    0xa7, 0xa5, 0x92, 0xdc, 0xce, 0x32, 0x16, 0x98, 0x53, 0x52, 0xd3, 0xdb, 0x84, 0x1f, 0x60,
    0x73, 0x8c, 0x1f, 0xc6, 0x4c, 0xf5, 0xa8, 0x44, 0x84, 0x95, 0xbc, 0x5e, 0x11, 0x3d, 0xdb,
    0xc9, 0xfe, 0xc3, 0xd1, 0x6c, 0xd6, 0x8c, 0x01, 0x96, 0xb8, 0xff, 0x17, 0xb6, 0xf2, 0xc5,
    0x68, 0xff, 0x2f, 0x7e, 0x7c, 0xdd, 0xff, 0x1f, 0xe5, 0x47, 0xde, 0xff, 0x69, 0x8c, 0xbf,
    0x65, 0x9b, 0xa6, 0xbd, 0x20, 0xa9, 0xdb, 0x60, 0xd7, 0x72, 0x70, 0x9f, 0x37, 0x34, 0x0c,
    0xd0, 0x27, 0x86, 0xe3, 0xa0, 0xa9, 0xc5, 0xbe, 0x52, 0x3c, 0x6e, 0x81, 0x0d, 0x77, 0x36,
    0x67, 0xce, 0xba, 0xb4, 0x87, 0xca, 0x0d, 0xc5, 0xa6, 0x0f, 0xc4, 0x8f, 0xf3, 0xc7, 0x41,
    0x88, 0x7d, 0x2f, 0xb1, 0x5d, 0xe0, 0x05, 0xff, 0x8b, 0x10, 0x14, 0x05, 0x49, 0xce, 0x18,
    0x4f, 0x27, 0x0f, 0x83, 0x45, 0x2b, 0x42, 0x32, 0xbf, 0x10, 0x41, 0xfe, 0x57, 0x11, 0x99,
    0xe5, 0x44, 0x80, 0xbe, 0x77, 0x4a, 0xf8, 0x35, 0x1f, 0x02, 0x21, 0xf4, 0x4a, 0x50, 0xd7,
    0xe9, 0xaa, 0x86, 0xe8, 0x0b, 0x2d, 0x17, 0xc1, 0x06, 0xde, 0x29, 0x93, 0x39, 0xa1, 0xba,
    0xd2, 0x2e, 0x86, 0xee, 0xc6, 0x78, 0xe9, 0x33, 0x3f, 0x2f, 0x82, 0x5c, 0x41, 0xe0, 0x46,
    0xd5, 0x26, 0x14, 0x97, 0xea, 0x0f, 0xa4, 0x42, 0x8c, 0xa6, 0x96, 0x39, 0xda, 0x64, 0xc9,
    0x10, 0x35, 0x80, 0xa1, 0x67, 0x31, 0x63, 0x89, 0xb6, 0xc0, 0xe0, 0xdc, 0x48, 0xb6, 0xc0,
    0x97, 0x6f, 0xd3, 0x86, 0x39, 0xf8, 0xc2, 0x6f, 0xa1, 0x07, 0x1b, 0xa7, 0x67, 0xed, 0xda,
    0xfd, 0xeb, 0xae, 0x00, 0x39, 0xe1, 0x3d, 0xfa, 0x65, 0x5d, 0xb5, 0xef, 0x09, 0xe8, 0x20,
    0x23, 0x62, 0x31, 0xcc, 0xc8, 0x8b, 0x21, 0x90, 0x85, 0x88, 0xf7, 0x3c, 0x80, 0x0b, 0x9e,
    0xd4, 0xe7, 0x4f, 0x71, 0x1d, 0x08, 0x43, 0xe6, 0x17, 0xbb, 0x33, 0x4f, 0x46, 0xd4, 0x93,
    0xaa, 0x3f, 0x2d, 0xd4, 0x5b, 0xdb, 0xfe, 0xe9, 0x97, 0xc7, 0xe5, 0x69, 0x99, 0xbe, 0x15,
    0x59, 0x96, 0x1f, 0xc2, 0xa7, 0xd0, 0x38, 0x13, 0x8c, 0x0d, 0x4f, 0x04, 0xc9, 0x28, 0x1b,
    0xe3, 0xb7, 0xf1, 0x83, 0xef, 0x17, 0xfa, 0x4d, 0xf8, 0x33, 0x2b, 0x77, 0xae, 0x52, 0x57,
    0x2f, 0x26, 0x88, 0xd0, 0x30, 0xc8, 0x87, 0x58, 0x56, 0xe0, 0x3c, 0x21, 0x25, 0xa9, 0xca,
    0x79, 0xfa, 0x36, 0x41, 0x51, 0xa1, 0xac, 0xe8, 0x27, 0xcf, 0x0d, 0x88, 0x72, 0x61, 0x68,
    0x4a, 0x48, 0xd0, 0x9d, 0xc0, 0x99, 0x98, 0x21, 0x78, 0xe3, 0x1b, 0x6c, 0xf0, 0x1b, 0x8a,
    0x56, 0x97, 0xdf, 0xbf, 0x3c, 0x15, 0xfa, 0x62, 0x30, 0x30, 0x1c, 0xa5, 0xaf, 0xc2, 0x07,
    0x57, 0xef, 0xc0, 0x91, 0xe1, 0x0d, 0x30, 0xf0, 0x24, 0x3c, 0x0f, 0x4b, 0x38, 0x8c, 0x2a,
    0x67, 0x47, 0x37, 0x75, 0xca, 0x9a, 0xb0, 0xe3, 0x23, 0x29, 0xf6, 0x14, 0x3f, 0x39, 0x9c,
    0xe5, 0xcd, 0x57, 0x62, 0x65, 0xf9, 0xab, 0xb7, 0x31, 0x73, 0x46, 0xeb, 0x53, 0x76, 0x71,
    0x2c, 0xdb, 0xc5, 0xe4, 0xbd, 0xaa, 0xcb, 0xfb, 0x2a, 0x57, 0xf1, 0x5b, 0xe0, 0x63, 0x56,
    0x0f, 0xb7, 0xb6, 0x87, 0xad, 0x8d, 0x0d, 0x4b, 0x23, 0xc3, 0xfb, 0x4e, 0x71, 0x6d, 0x7b,
    0x26, 0xe3, 0xd7, 0x45, 0x06, 0x6d, 0x24, 0xb4, 0x3e, 0x42, 0xef, 0x08, 0x6b, 0x44, 0x67,
    0x8f, 0xa8, 0x3f, 0x88, 0x7a, 0x90, 0xb4, 0xa9, 0xf9, 0x45, 0xef, 0x27, 0xa3, 0x83, 0x35,
    0x7f, 0x52, 0x3a, 0x48, 0xe1, 0x4a, 0x5a, 0x87, 0xac, 0x47, 0x4a, 0x9f, 0x23, 0x46, 0x9d,
    0x1a, 0xbe, 0x4a, 0x1a, 0xd0, 0x32, 0xfc, 0x2f, 0xde, 0x26, 0x4d, 0x86, 0x58, 0xf0, 0x37,
    0x43, 0x76, 0xad, 0x62, 0xd5, 0x1a, 0x93, 0x34, 0x89, 0x44, 0x15, 0x3b, 0x42, 0x83, 0x90,
    0x3f, 0xc4, 0x7d, 0x23, 0x1a, 0x3f, 0x2e, 0x27, 0xa6, 0xa3, 0x5e, 0x34, 0x4b, 0xab, 0x18,
    0xa4, 0xf7, 0x32, 0x1a, 0xad, 0x18, 0x0a, 0x69, 0x01, 0x23, 0x5c, 0xeb, 0xe3, 0x06, 0x35,
    0x9d, 0x9f, 0x14, 0x9b, 0xe5, 0x9b, 0x6b, 0xbc, 0x9f, 0xeb, 0xe7, 0x28, 0xca, 0xe8, 0xa0,
    0xe3, 0x5e, 0x4c, 0x53, 0x92, 0x89, 0x89, 0xe2, 0x24, 0x1d, 0xd7, 0x3b, 0x35, 0xa7, 0x4f,
    0xed, 0x76, 0x18, 0xde, 0xd0, 0x1e, 0xf7, 0x6c, 0xa2, 0xf7, 0x88, 0x17, 0x75, 0x9e, 0xb5,
    0xb9, 0x84, 0xf7, 0x07, 0x39, 0x8a, 0x09, 0x74, 0x9c, 0x6b, 0x70, 0x7c, 0x1b, 0xea, 0x61,
    0xdf, 0x61, 0x52, 0xaf, 0x26, 0x92, 0xf1, 0xe6, 0x44, 0xf6, 0x6a, 0x5a, 0xca, 0x38, 0x42,
    0x0e, 0xc1, 0xd1, 0x61, 0xe5, 0xab, 0x3e, 0xae, 0xcf, 0x2d, 0x33, 0xb0, 0x2d, 0x65, 0x9f,
    0x89, 0xce, 0x02, 0xed, 0x4f, 0x9b, 0x1a, 0xdc, 0x2e, 0x99, 0x87, 0x13, 0xf5, 0xef, 0x2e,
    0x06, 0xb2, 0xdc, 0x25, 0xf6, 0x7f, 0xd2, 0x2c, 0x2f, 0xb6, 0xa0, 0x6e, 0x93, 0x65, 0xa9,
    0x1c, 0x1f, 0xec, 0x20, 0xbd, 0xd7, 0x2c, 0x53, 0xcf, 0x02, 0xe8, 0xa6, 0x18, 0x44, 0xa4,
    0xee, 0x25, 0x31, 0xaa, 0x55, 0x1a, 0xc4, 0x38, 0x77, 0xde, 0x92, 0x33, 0x28, 0x9f, 0x44,
    0x59, 0xd9, 0xad, 0xf8, 0xd8, 0x3f, 0x14, 0xaf, 0xa8, 0x63, 0xf8, 0x73, 0xd0, 0x62, 0x73,
    0x19, 0x23, 0x8f, 0xbb, 0x12, 0x7e, 0xd1, 0xb9, 0x80, 0x5f, 0x74, 0xd2, 0x5d, 0xae, 0x78,
    0xda, 0x71, 0x6e, 0x49, 0x1f, 0xce, 0xb1, 0x4f, 0x64, 0xcc, 0xc9, 0x7c, 0xf7, 0x3c, 0x3c,
    0x0f, 0x5b, 0xea, 0x58, 0x83, 0xba, 0xd0, 0xf3, 0xec, 0x92, 0x8e, 0xef, 0x38, 0xc3, 0x3c,
    0xa8, 0xe3, 0x0e, 0x7f, 0x07, 0xc7, 0xb9, 0x7a, 0x7c, 0x58, 0x15, 0xe7, 0xf9, 0x22, 0xe0,
    0x06, 0x65, 0xdc, 0x3f, 0x19, 0x9e, 0x93, 0x3f, 0xcf, 0x1e, 0xfd, 0xd4, 0x9b, 0x8d, 0xd4,
    0x66, 0xe5, 0xc6, 0xa8, 0x6d, 0x39, 0x63, 0x37, 0xc9, 0xd2, 0xe4, 0x95, 0xa7, 0x7c, 0xeb,
    0xea, 0x26, 0xe5, 0x7d, 0x43, 0x29, 0xb4, 0x47, 0x3c, 0xe2, 0x68, 0x36, 0xa8, 0xdd, 0x55,
    0x62, 0x0c, 0xef, 0x22, 0xb2, 0xee, 0x37, 0x9f, 0x2f, 0xa4, 0x31, 0x64, 0xb8, 0x54, 0xdd,
    0x16, 0xc5, 0xec, 0x3a, 0xf1, 0x71, 0xa9, 0x3c, 0x9c, 0x2c, 0x32, 0xaf, 0xd2, 0xb8, 0x52,
    0xae, 0x20, 0x2f, 0xf8, 0x34, 0x16, 0x80, 0x97, 0x3b, 0xa9, 0x7c, 0xc0, 0xee, 0xed, 0x71,
    0x2e, 0x69, 0x76, 0xb2, 0x6e, 0x87, 0xe0, 0x58, 0x75, 0x0d, 0x9a, 0x4d, 0xad, 0x4b, 0xf0,
    0xdc, 0xa5, 0x37, 0xff, 0x34, 0x83, 0x54, 0x91, 0xf5, 0x45, 0xc8, 0x3e, 0x45, 0x33, 0x59,
    0x0f, 0x20, 0xef, 0xa2, 0xa1, 0xb8, 0x71, 0xee, 0x56, 0x28, 0x2d, 0x37, 0x95, 0xef, 0x71,
    0x37, 0x72, 0xb8, 0xde, 0xb1, 0xce, 0x1d, 0xfa, 0x19, 0x91, 0x94, 0x59, 0x0c, 0x47, 0x87,
    0xbd, 0x25, 0x66, 0x00, 0xeb, 0x91, 0x4c, 0x6b, 0xf5, 0xbd, 0x4b, 0x2f, 0xd3, 0x1a, 0xc5,
    0x3b, 0xa1, 0x9e, 0x8e, 0xfb, 0x27, 0xac, 0x3f, 0xb0, 0xb6, 0xbf, 0x45, 0xac, 0x77, 0x7f,
    0x8a, 0x64, 0xbd, 0xf1, 0x71, 0x3d, 0xa2, 0xe3, 0x4a, 0xeb, 0x62, 0xd9, 0xd4, 0xf6, 0x28,
    0x35, 0xa7, 0x3e, 0x26, 0xc8, 0xcf, 0x9c, 0xde, 0xfd, 0xe3, 0xfd, 0x23, 0x89, 0x0f, 0x1a,
    0xf6, 0xc4, 0xc3, 0x6d, 0x6b, 0x57, 0xbd, 0xb5, 0x80, 0x63, 0x32, 0x3e, 0x3e, 0xac, 0x97,
    0x67, 0x27, 0xce, 0x67, 0x83, 0xe2, 0xc0, 0xc1, 0x98, 0x42, 0x7f, 0x8f, 0x59, 0xec, 0xc8,
    0xe0, 0x3f, 0x4f, 0x16, 0x11, 0x04, 0x04, 0x5f, 0xae, 0xa3, 0xc7, 0xe8, 0x08, 0xdb, 0x6e,
    0xcd, 0xa2, 0xcf, 0x48, 0xa7, 0x6e, 0xc3, 0x3c, 0xf5, 0x1a, 0x34, 0xc3, 0xdc, 0x37, 0xe6,
    0x42, 0x2f, 0x1c, 0x70, 0x1e, 0x10, 0x6b, 0x0e, 0xd6, 0x61, 0xfb, 0x60, 0x5a, 0x15, 0xde,
    0x39, 0xdc, 0xfb, 0x4e, 0xd7, 0xbb, 0x24, 0x8f, 0xbb, 0x2c, 0x8b, 0x1e, 0xcd, 0x32, 0x37,
    0xce, 0x5c, 0x87, 0x7e, 0x35, 0x87, 0x75, 0xf4, 0xb3, 0xa1, 0x88, 0x11, 0xb9, 0x86, 0x47,
    0x8f, 0xfd, 0x67, 0xa2, 0xb7, 0x2e, 0x5e, 0xe8, 0x1c, 0x9f, 0x93, 0x4b, 0xa0, 0x1b, 0xea,
    0x43, 0x9f, 0xe1, 0x25, 0x0f, 0xc9, 0xca, 0x27, 0xf8, 0xc0, 0x10, 0x3a, 0x88, 0xac, 0x96,
    0x35, 0x96, 0x6b, 0x45, 0xcc, 0x45, 0x5e, 0xe6, 0x1f, 0xa4, 0xfb, 0xd2, 0xf7, 0xaf, 0xe9,
    0x5c, 0x90, 0x35, 0x09, 0xed, 0xe1, 0x1e, 0x70, 0xce, 0xf6, 0x11, 0xe0, 0x4b, 0xf4, 0x26,
    0xd9, 0xde, 0x45, 0xb0, 0xf1, 0x5a, 0xc5, 0x5e, 0x39, 0x29, 0xfa, 0x9b, 0xe3, 0xa4, 0x91,
    0x4c, 0x07, 0x37, 0xd7, 0x5a, 0x81, 0x64, 0x9f, 0xca, 0xe1, 0x45, 0xca, 0x60, 0xb9, 0x57,
    0x3c, 0xbf, 0x99, 0xf6, 0x0e, 0x48, 0x26, 0x18, 0xb3, 0x7f, 0x6e, 0xde, 0x0e, 0x0a, 0x24,
    0xcb, 0x75, 0x0f, 0x33, 0x61, 0x1d, 0x54, 0x0d, 0xd0, 0x69, 0xa6, 0xda, 0xe1, 0x78, 0x08,
    0xc7, 0x52, 0x2d, 0x74, 0x97, 0x83, 0x3c, 0xcd, 0x64, 0x84, 0x18, 0x6e, 0x8d, 0x03, 0xbc,
    0xea, 0x2e, 0x55, 0xea, 0xdb, 0x31, 0xea, 0x97, 0x83, 0x19, 0xab, 0x25, 0x5f, 0x94, 0x6a,
    0x3b, 0x79, 0x00, 0x67, 0x6a, 0x37, 0xb1, 0xce, 0x80, 0xbf, 0x8a, 0xff, 0x77, 0x37, 0x32,
    0x19, 0xc3, 0xc0, 0xbb, 0x13, 0x9d, 0x47, 0x4d, 0x78, 0x8e, 0x99, 0x5b, 0x48, 0xb6, 0xf2,
    0xaa, 0x23, 0x66, 0x6b, 0x92, 0x71, 0xf3, 0x82, 0x19, 0xd7, 0x17, 0x1e, 0x2e, 0x5c, 0xff,
    0x9b, 0x23, 0x7e, 0x40, 0x02, 0x7d, 0xe8, 0x25, 0xcb, 0x33, 0xcb, 0x9f, 0x66, 0xeb, 0xb3,
    0xbb, 0x68, 0xda, 0xfd, 0x42, 0x23, 0x9c, 0xbd, 0xca, 0x20, 0xd8, 0x74, 0xbb, 0xbd, 0x00,
    0xc1, 0xac, 0xe9, 0xdc, 0x27, 0x27, 0xd8, 0x27, 0x19, 0x93, 0x2c, 0x95, 0x8e, 0x48, 0x2f,
    0xff, 0x6f, 0xb3, 0x11, 0x9f, 0x7d, 0x2b, 0x7b, 0xdd, 0x6b, 0x1a, 0xb3, 0xf8, 0xcc, 0x76,
    0xbd, 0x6d, 0xc6, 0x27, 0xbe, 0xaf, 0xd3, 0x72, 0xe1, 0xb7, 0xdf, 0x29, 0xe5, 0xfb, 0xe7,
    0xe6, 0xe0, 0xdb, 0xa7, 0xed, 0xda, 0x01, 0xfb, 0xdb, 0x08, 0x63, 0xd6, 0x45, 0xf6, 0x1f,
    0xe6, 0x04, 0x3f, 0xa3, 0x8e, 0x3c, 0x16, 0xde, 0xbb, 0x51, 0x7d, 0x45, 0xef, 0xeb, 0x30,
    0x7e, 0x26, 0x39, 0x01, 0x93, 0x30, 0x66, 0xde, 0x25, 0x4f, 0xf3, 0x30, 0xef, 0x94, 0xd3,
    0xef, 0x65, 0x5d, 0x2f, 0xd0, 0xe6, 0x79, 0x2e, 0xc4, 0x53, 0x4d, 0x8a, 0xa5, 0xf8, 0x31,
    0x9d, 0x95, 0x1d, 0x10, 0x93, 0xe6, 0x59, 0xdb, 0xdc, 0xd9, 0x13, 0x71, 0x21, 0x13, 0xe6,
    0x0c, 0xb6, 0xd2, 0xa3, 0x76, 0xae, 0x74, 0x05, 0xf2, 0x53, 0xc2, 0x5a, 0x84, 0x75, 0x48,
    0x15, 0x5e, 0x64, 0x07, 0x62, 0x0e, 0x65, 0x6c, 0x3f, 0x72, 0xbe, 0xba, 0x11, 0xa2, 0x08,
    0xb5, 0x2c, 0xd7, 0x11, 0x46, 0xb6, 0x48, 0xe5, 0x75, 0x9a, 0xb5, 0x2c, 0x3b, 0x3d, 0xad,
    0x9d, 0xcd, 0xb5, 0x24, 0x7f, 0xa4, 0xf1, 0x1b, 0x30, 0x9a, 0xbd, 0x71, 0x3b, 0xc8, 0xe7,
    0xdd, 0x5d, 0x81, 0x0e, 0x81, 0x4f, 0xbf, 0x25, 0xf7, 0x09, 0xe6, 0x21, 0xa7, 0x1e, 0xec,
    0x85, 0xec, 0x85, 0xb2, 0xac, 0x3c, 0x64, 0x34, 0xb5, 0x82, 0x73, 0xce, 0x22, 0x24, 0xaa,
    0x66, 0x19, 0x27, 0x32, 0x76, 0x0c, 0xa3, 0x7c, 0xf8, 0xc4, 0xf5, 0x81, 0x31, 0x9a, 0xd0,
    0xd8, 0x63, 0x84, 0xb5, 0x48, 0xf0, 0x1a, 0x8b, 0x97, 0x17, 0xd3, 0xeb, 0x3e, 0xc9, 0xfc,
    0x30, 0x1e, 0x02, 0xbf, 0x6b, 0x17, 0x6c, 0x7e, 0xfd, 0x3a, 0x3f, 0xc0, 0x9e, 0x00, 0xbc,
    0x37, 0x7a, 0x17, 0xb5, 0xac, 0xf5, 0x7c, 0x83, 0x7d, 0xe5, 0x96, 0xee, 0x4d, 0xcd, 0xeb,
    0x31, 0x12, 0xf6, 0x1a, 0xee, 0x17, 0xe9, 0xcf, 0xfb, 0x71, 0xd9, 0x6f, 0xb7, 0xcd, 0xe4,
    0x28, 0xb3, 0xc4, 0x6c, 0x97, 0xda, 0xc1, 0x68, 0x3a, 0x58, 0x96, 0x22, 0xf7, 0x2e, 0x5c,
    0x11, 0xf2, 0x29, 0xf8, 0x6e, 0x54, 0x1f, 0x31, 0x02, 0x24, 0x44, 0x83, 0x94, 0x81, 0x33,
    0xd8, 0xdd, 0x59, 0x56, 0xc4, 0xf2, 0x0b, 0x95, 0x11, 0x7c, 0xcd, 0x45, 0xc9, 0x86, 0x10,
    0x71, 0x32, 0x21, 0xd0, 0x46, 0x8a, 0x2c, 0x18, 0xf7, 0x2e, 0x50, 0x3f, 0xa8, 0x13, 0x94,
    0xd8, 0xdb, 0x81, 0x96, 0x69, 0x7e, 0x00, 0x7a, 0x86, 0x56, 0x3c, 0x1a, 0x0d, 0x0e, 0x61,
    0x68, 0x79, 0x7a, 0x42, 0xe2, 0xfa, 0x6c, 0x1e, 0x74, 0x17, 0xd0, 0xf7, 0x6f, 0x24, 0x0e,
    0x1a, 0xc0, 0x04, 0xe5, 0xf2, 0x4d, 0x2c, 0x53, 0xde, 0x2b, 0xf6, 0xce, 0x6f, 0x1c, 0xe0,
    0x12, 0xcc, 0xb1, 0xed, 0x8f, 0xf3, 0x0a, 0xbc, 0x7f, 0x1b, 0xd8, 0xdf, 0xe5, 0xfa, 0xf3,
    0x02, 0x66, 0x2f, 0x81, 0x75, 0x27, 0xe9, 0x2c, 0x29, 0xfa, 0x8c, 0x58, 0x47, 0x25, 0x5e,
    0x04, 0xda, 0xfa, 0xd6, 0x2f, 0x42, 0x5b, 0xe5, 0x3d, 0x03, 0xca, 0xc1, 0xfa, 0x69, 0x82,
    0x54, 0xbb, 0xa3, 0x7e, 0x03, 0x63, 0x8a, 0xfd, 0x2e, 0x10, 0x1c, 0x80, 0x21, 0xf4, 0x61,
    0x4d, 0x4c, 0xb4, 0x7b, 0x0d, 0xfb, 0x13, 0x92, 0xc9, 0x72, 0x09, 0xe3, 0x7f, 0x2b, 0xcc,
    0xba, 0xde, 0x23, 0xd3, 0x3a, 0x42, 0x5f, 0x5d, 0xa4, 0x11, 0x74, 0x43, 0x03, 0xc6, 0x80,
    0x2d, 0xd7, 0x7d, 0x62, 0xe2, 0xd0, 0x2b, 0x22, 0x9f, 0x44, 0xeb, 0x43, 0x32, 0xdd, 0x74,
    0xee, 0xe1, 0xef, 0x1c, 0xb3, 0x0c, 0x83, 0x0e, 0x0b, 0x32, 0xca, 0x04, 0x99, 0xb8, 0x30,
    0x42, 0x75, 0xbb, 0x5f, 0xd8, 0x19, 0x80, 0x2e, 0x4e, 0xb2, 0x78, 0x92, 0xb5, 0x0c, 0x6b,
    0x33, 0x75, 0xe2, 0x67, 0xe2, 0x17, 0x7e, 0xb1, 0xb7, 0xe8, 0x17, 0xc8, 0xf8, 0x8f, 0x23,
    0xe0, 0x8a, 0xfa, 0x6d, 0xec, 0xbc, 0xb1, 0x6c, 0xa2, 0xcd, 0xf9, 0x11, 0xd0, 0xa8, 0x1e,
    0x0b, 0x64, 0xfe, 0x60, 0xff, 0xf5, 0xf7, 0x8e, 0x08, 0xf9, 0xbc, 0xda, 0xbe, 0x22, 0xaf,
    0xaa, 0xd3, 0x04, 0xf5, 0xad, 0x21, 0x3e, 0xbb, 0x28, 0x1f, 0xfd, 0xa9, 0xc1, 0x59, 0xe3,
    0x5c, 0x1b, 0xf6, 0x0b, 0xee, 0x48, 0x6f, 0xbd, 0x7c, 0x3d, 0x2d, 0x8e, 0x7f, 0xd4, 0x0b,
    0xa1, 0x02, 0xa2, 0xf1, 0x55, 0x30, 0x83, 0x30, 0xca, 0xa6, 0x71, 0xef, 0xbc, 0x12, 0x35,
    0x0c, 0xff, 0xc0, 0xcf, 0x22, 0x2b, 0x64, 0x59, 0x46, 0x3e, 0x87, 0xb3, 0xde, 0x96, 0x8c,
    0x1c, 0xbd, 0x2e, 0x4a, 0xe8, 0x08, 0x58, 0x0b, 0xaf, 0x3f, 0x07, 0xb1, 0x1f, 0x88, 0xed,
    0x60, 0x67, 0x82, 0xe8, 0x80, 0x50, 0xf6, 0x7a, 0x70, 0x88, 0x18, 0xd3, 0xa5, 0xdb, 0xe0,
    0x82, 0x61, 0x64, 0x4b, 0xeb, 0x25, 0x52, 0xd7, 0x93, 0xdb, 0x66, 0xf5, 0x6d, 0x0d, 0x1b,
    0x7f, 0xcd, 0xf4, 0x8a, 0x40, 0xc7, 0x85, 0x8f, 0x2d, 0xde, 0xce, 0xc3, 0x31, 0xb8, 0xb3,
    0x7a, 0x91, 0xab, 0x38, 0x99, 0xea, 0x32, 0x48, 0x5d, 0x33, 0x44, 0x54, 0x03, 0x39, 0x6e,
    0x9e, 0x37, 0x1c, 0x98, 0x2b, 0xd0, 0x13, 0x32, 0xed, 0x0d, 0xa6, 0x9f, 0x65, 0x36, 0xed,
    0xca, 0xb3, 0xad, 0xc6, 0xc8, 0x7d, 0x21, 0xb3, 0xeb, 0x1a, 0xf4, 0xc5, 0xac, 0x74, 0x1d,
    0xd9, 0x5d, 0x6f, 0x8e, 0xc4, 0xbd, 0x2a, 0x78, 0x8e, 0xc3, 0x77, 0xfa, 0x13, 0x41, 0xdf,
    0x6d, 0x7d, 0x87, 0xe8, 0xc9, 0x78, 0x16, 0x95, 0xc7, 0x24, 0x2c, 0x73, 0xfd, 0x71, 0xad,
    0xea, 0x8f, 0x51, 0xed, 0xde, 0xe9, 0xec, 0x89, 0x6b, 0xf4, 0xa8, 0xa8, 0x8d, 0xf4, 0xc9,
    0xf5, 0xd1, 0x6d, 0xf6, 0x36, 0x56, 0x3d, 0x83, 0x86, 0xc6, 0xf9, 0x6f, 0xa0, 0x47, 0x46,
    0xfe, 0x3a, 0x64, 0x57, 0x3c, 0xff, 0xb0, 0xfc, 0x05, 0xfe, 0x78, 0xc7, 0x9c, 0x35, 0x43,
    0xc5, 0xca, 0x97, 0xc4, 0xb2, 0x35, 0xe7, 0x35, 0xa6, 0xe7, 0xd9, 0xfd, 0x44, 0xc6, 0x7f,
    0x35, 0xfa, 0x27, 0x2d, 0xfe, 0x67, 0x2b, 0xb7, 0x1d, 0xf6, 0xff, 0x2d, 0x6d, 0xbd, 0xe2,
    0x3d, 0xca, 0xcf, 0x83, 0xc4, 0xff, 0x74, 0xa6, 0x03, 0xd5, 0x31, 0xac, 0x61, 0x53, 0xbf,
    0xf7, 0x21, 0xe2, 0x6f, 0xb6, 0x86, 0xf8, 0x9f, 0x00, 0x8a, 0x9c, 0xc7, 0xae, 0xef, 0x29,
    0x1c, 0x7a, 0x80, 0x61, 0x00, 0x39, 0x01, 0x88, 0x43, 0x27, 0x26, 0xdd, 0xd2, 0x74, 0x6b,
    0xb0, 0x74, 0x5d, 0x7d, 0x5d, 0x81, 0xbe, 0x6a, 0x3e, 0xe0, 0x9c, 0x08, 0x19, 0x17, 0x45,
    0x18, 0x81, 0x46, 0xd3, 0x4d, 0x7d, 0xa8, 0xba, 0x7a, 0xc8, 0x31, 0x8c, 0x7f, 0x01, 0xbd,
    0x7f, 0x8a, 0x2e, 0x2b, 0x43, 0xdd, 0x55, 0x74, 0x0b, 0x06, 0x59, 0x77, 0xa2, 0x02, 0x92,
    0xa8, 0xf3, 0x12, 0x52, 0x8d, 0x6f, 0x37, 0x27, 0xea, 0xf4, 0xcd, 0x9b, 0xdf, 0xc6, 0xfa,
    0x1d, 0x1d, 0xef, 0xdf, 0xdf, 0x2a, 0xbf, 0xfe, 0x97, 0xf2, 0x46, 0x0e, 0x55, 0x87, 0xaf,
    0xc6, 0xff, 0x6c, 0xba, 0xf6, 0xb1, 0x0d, 0x63, 0xa6, 0x77, 0xa6, 0x30, 0x77, 0x65, 0xd5,
    0xdf, 0xbc, 0x7d, 0x27, 0x95, 0x24, 0x75, 0xf8, 0x8f, 0x88, 0x27, 0x47, 0xd0, 0x45, 0x26,
    0xfe, 0x22, 0x9e, 0xfe, 0xf2, 0x43, 0xc4, 0xc3, 0xcd, 0x19, 0xfd, 0xdb, 0x9e, 0xb1, 0x54,
    0xf1, 0xc1, 0x56, 0x4d, 0x5e, 0xf2, 0xcd, 0x03, 0xf8, 0x93, 0xf8, 0x41, 0x31, 0xb0, 0x77,
    0x8f, 0x5b, 0xb7, 0xa4, 0x8c, 0xa7, 0x2b, 0xc5, 0xab, 0x37, 0x3a, 0x15, 0x8a, 0x92, 0x7e,
    0x92, 0x78, 0xf5, 0xe6, 0xf9, 0xb4, 0x72, 0x7a, 0xeb, 0x1e, 0x36, 0x3a, 0xdd, 0x43, 0x1e,
    0xce, 0xee, 0x1d, 0x09, 0xd2, 0x4c, 0x9f, 0xfa, 0x93, 0x1c, 0x9e, 0x76, 0x6a, 0xe4, 0x8e,
    0x9f, 0x23, 0xf7, 0x96, 0x04, 0xa9, 0x9d, 0xfc, 0x3b, 0x3e, 0x21, 0xf7, 0x7a, 0x1d, 0x7a,
    0xdb, 0x62, 0x79, 0x9d, 0xc8, 0x9d, 0x97, 0x4e, 0xdf, 0xc5, 0x58, 0x75, 0xdf, 0xdf, 0xe3,
    0x4a, 0x73, 0x2b, 0x75, 0x07, 0xfc, 0x3e, 0xaf, 0xc9, 0xee, 0xce, 0x58, 0x60, 0x15, 0xb9,
    0xe6, 0x77, 0x66, 0xec, 0x99, 0x94, 0x77, 0x89, 0xde, 0xb3, 0x0a, 0xed, 0xf8, 0xf8, 0x7d,
    0x9e, 0x51, 0x7e, 0xc6, 0xee, 0xde, 0x69, 0xcc, 0x3c, 0x0b, 0xc6, 0x12, 0x70, 0xfe, 0xbc,
    0xf4, 0x6e, 0x5c, 0x7c, 0x17, 0xe3, 0xee, 0x1b, 0xb7, 0xd5, 0x0a, 0xaf, 0x97, 0xe5, 0x82,
    0xf9, 0xb1, 0x68, 0xbd, 0x2a, 0xc9, 0x5b, 0x65, 0xf2, 0xbb, 0xf5, 0x8f, 0xe7, 0x98, 0x2d,
    0xc6, 0x0a, 0xef, 0xf3, 0x5b, 0xb7, 0x6e, 0x1b, 0xfa, 0x76, 0xca, 0xcb, 0x4a, 0x75, 0x93,
    0xf0, 0x2d, 0x76, 0xdf, 0x4a, 0x10, 0x8a, 0xce, 0x5b, 0xe5, 0x9b, 0x59, 0xb3, 0x52, 0xbd,
    0xf7, 0xfc, 0xdd, 0x1e, 0xcd, 0x28, 0x3c, 0x16, 0x10, 0x85, 0xa2, 0x83, 0xce, 0xa0, 0x8d,
    0x5b, 0xa6, 0x3f, 0x63, 0x3c, 0xfe, 0xa1, 0x88, 0x9b, 0x20, 0x20, 0xe9, 0xe4, 0xf6, 0x6e,
    0xec, 0xbe, 0xe8, 0xb5, 0x76, 0xfe, 0x1c, 0x14, 0xcc, 0xe9, 0x31, 0x9c, 0x0d, 0xfb, 0x07,
    0x18, 0x77, 0x6f, 0x70, 0x84, 0x1d, 0x21, 0x17, 0x52, 0xb5, 0x0f, 0xfc, 0x08, 0xba, 0xe9,
    0x5c, 0x5f, 0x9e, 0x63, 0x13, 0xe2, 0x39, 0x2f, 0xc7, 0xd0, 0x7a, 0x68, 0x30, 0x1a, 0x9e,
    0x0f, 0xba, 0xf3, 0x1e, 0x22, 0xe2, 0x14, 0x4c, 0x7c, 0xfe, 0xed, 0xf2, 0x7c, 0x8b, 0xd8,
    0xb4, 0x8b, 0x3a, 0xb3, 0x51, 0x79, 0x38, 0x86, 0x49, 0x98, 0x83, 0xdd, 0xc1, 0x41, 0x7d,
    0xc0, 0xbb, 0xcf, 0x3c, 0x22, 0xdd, 0xdf, 0x98, 0x97, 0xdc, 0xf6, 0x78, 0x80, 0xfd, 0xbc,
    0xc9, 0xfd, 0xc4, 0xe1, 0x49, 0x20, 0x00, 0xcd, 0x6c, 0xf5, 0xce, 0x7b, 0xe4, 0xac, 0x4c,
    0x8f, 0x21, 0x34, 0x1f, 0xb4, 0x77, 0xe7, 0x22, 0xce, 0x26, 0x13, 0x38, 0x67, 0x91, 0x80,
    0x62, 0x2b, 0x98, 0x74, 0x8b, 0x72, 0x9f, 0x4b, 0x5e, 0xbd, 0x24, 0x96, 0xbc, 0xed, 0x7a,
    0x67, 0xb1, 0x36, 0x11, 0xd0, 0xe3, 0xb5, 0x09, 0xb9, 0xa7, 0x0d, 0xc4, 0xed, 0xdf, 0x98,
    0x3c, 0xd7, 0xc3, 0xd9, 0xa7, 0x03, 0xe7, 0x65, 0x18, 0x8f, 0xf1, 0x99, 0x60, 0x2b, 0xd1,
    0x4b, 0xb3, 0xfe, 0x64, 0xa7, 0xd8, 0xff, 0xb6, 0x35, 0x05, 0x3d, 0x7c, 0x27, 0x8c, 0xcc,
    0x99, 0x54, 0xbf, 0xc6, 0x73, 0x48, 0xf7, 0x96, 0xde, 0x0b, 0x44, 0xd3, 0x4a, 0xed, 0x1d,
    0x4e, 0x47, 0xa5, 0xf3, 0x7c, 0x4e, 0xb0, 0xb3, 0x60, 0xde, 0x30, 0xd0, 0xcb, 0x8d, 0xbd,
    0xcb, 0xc9, 0x14, 0xc6, 0xb6, 0x31, 0x27, 0xa8, 0x49, 0x13, 0x9c, 0xb3, 0x51, 0x4e, 0x3d,
    0x6f, 0x11, 0x29, 0x09, 0xc6, 0xc4, 0xc2, 0xf3, 0xfc, 0xe7, 0x56, 0x09, 0x64, 0xce, 0xae,
    0xb9, 0xea, 0xce, 0x7a, 0x17, 0x63, 0x38, 0xbf, 0xf7, 0x46, 0xfd, 0xc3, 0xae, 0x79, 0xd1,
    0x33, 0x48, 0x1b, 0xe6, 0xd0, 0x3b, 0x2f, 0xc0, 0xef, 0x81, 0x6b, 0xe2, 0xb9, 0x4e, 0x2d,
    0xd1, 0x27, 0xee, 0xba, 0x7d, 0x40, 0xb2, 0x57, 0x9b, 0x5d, 0x90, 0x59, 0x98, 0x2f, 0x0a,
    0x90, 0x26, 0xd0, 0xec, 0x08, 0xb8, 0x06, 0x78, 0xa7, 0x9d, 0xef, 0x61, 0x3e, 0x2e, 0x86,
    0xf0, 0xb9, 0x15, 0xc8, 0x1b, 0xf5, 0x1a, 0xb8, 0xf7, 0x12, 0x7f, 0xb8, 0xfe, 0x8f, 0x81,
    0xe4, 0x3f, 0x9b, 0xb8, 0x51, 0x3f, 0xa2, 0xfe, 0x5f, 0xd8, 0x2e, 0x84, 0xf3, 0x3f, 0xc0,
    0x57, 0xfc, 0xf7, 0x47, 0xf9, 0x59, 0xab, 0xfe, 0xcf, 0x50, 0x1e, 0x81, 0x81, 0x8e, 0x8d,
    0xa6, 0x88, 0x7e, 0xf2, 0x02, 0xa6, 0xd4, 0x25, 0xe0, 0xf3, 0x5e, 0x79, 0xfa, 0xc4, 0x2f,
    0x3a, 0x22, 0x6c, 0x6e, 0x7e, 0x90, 0xaa, 0xc0, 0x02, 0x85, 0xe8, 0x02, 0x1f, 0x3e, 0x60,
    0xe3, 0x3f, 0x95, 0xb2, 0xaf, 0xc8, 0x3b, 0xf4, 0xc9, 0xd9, 0xcc, 0x98, 0x18, 0xae, 0x71,
    0x2b, 0x07, 0xba, 0xeb, 0xea, 0xe4, 0xf1, 0x0f, 0xb4, 0xe9, 0x4d, 0xa8, 0x47, 0x35, 0xdf,
    0xf6, 0x4a, 0x75, 0xd6, 0x3a, 0xd1, 0xc6, 0x85, 0x07, 0xbb, 0x9a, 0x46, 0x3e, 0xb1, 0xde,
    0x52, 0x47, 0xf5, 0x37, 0x85, 0xdc, 0xdb, 0x77, 0x4a, 0xc4, 0xf3, 0x7c, 0xee, 0xed, 0xdb,
    0x9b, 0x54, 0xf9, 0x56, 0xde, 0x17, 0x73, 0x40, 0x58, 0x4c, 0x4b, 0x27, 0x73, 0xd3, 0x35,
    0xe6, 0x32, 0xbd, 0xad, 0x52, 0x74, 0x53, 0xa5, 0xb7, 0xd1, 0xcf, 0x0b, 0x3e, 0x01, 0x85,
    0xfb, 0x45, 0x18, 0x0f, 0xef, 0x97, 0xbe, 0x4e, 0xdb, 0x3e, 0xb3, 0x17, 0xf0, 0x6e, 0x44,
    0xc5, 0xe8, 0x56, 0xb6, 0x78, 0x2b, 0xc1, 0x16, 0x76, 0x76, 0x76, 0x32, 0xd5, 0x0b, 0xe5,
    0x86, 0x30, 0xae, 0xe6, 0xfc, 0xfd, 0xea, 0xcd, 0x09, 0xf5, 0x72, 0x66, 0x39, 0x21, 0xf1,
    0x84, 0x21, 0x7c, 0xa6, 0x66, 0xc7, 0x19, 0xda, 0x4e, 0x19, 0x1e, 0xcc, 0x4d, 0x95, 0x9d,
    0x88, 0xd0, 0x54, 0x61, 0x9a, 0xf2, 0xa1, 0x91, 0xcd, 0xe7, 0xde, 0x91, 0xb7, 0xbd, 0x36,
    0x87, 0xc9, 0xdc, 0x84, 0x09, 0x09, 0x14, 0x2d, 0x44, 0x16, 0x9d, 0xda, 0x0b, 0x98, 0xd3,
    0x51, 0xa0, 0x32, 0xf4, 0x9f, 0xa8, 0xd7, 0x2d, 0x7d, 0xf8, 0x26, 0xf8, 0xf6, 0xfb, 0x62,
    0x88, 0xa9, 0x40, 0x79, 0xda, 0xfb, 0x96, 0xbf, 0x18, 0xc8, 0xb7, 0x83, 0xf9, 0x6c, 0x26,
    0x5d, 0xe2, 0xd0, 0x10, 0x93, 0xb1, 0x3a, 0xf1, 0xad, 0x50, 0xb3, 0xdb, 0x5b, 0x51, 0xcd,
    0x0f, 0x0e, 0x09, 0x0b, 0x69, 0xb9, 0x4b, 0x3c, 0x6b, 0x92, 0x13, 0x29, 0x59, 0xd3, 0x98,
    0x7b, 0x6a, 0x3b, 0x06, 0x49, 0xa6, 0x5d, 0x66, 0x7f, 0xeb, 0xa7, 0x20, 0x98, 0x54, 0xe9,
    0xfc, 0xdd, 0xf2, 0x6b, 0xd8, 0xdc, 0xaf, 0x94, 0x4f, 0x9b, 0xbb, 0xed, 0xca, 0x7e, 0x80,
    0xd2, 0x94, 0x6b, 0xd3, 0xa2, 0x70, 0x34, 0x56, 0x7e, 0xfa, 0x5f, 0xff, 0xeb, 0xb7, 0xdf,
    0xf3, 0x9f, 0x37, 0x05, 0x18, 0xbf, 0xf7, 0x6f, 0xf0, 0x27, 0x0f, 0x7f, 0xbd, 0x79, 0x93,
    0xfe, 0xa5, 0xc0, 0x5c, 0xe2, 0xa8, 0xbe, 0x7d, 0xbb, 0xae, 0x27, 0x6f, 0xff, 0xfa, 0xeb,
    0xdf, 0xff, 0xeb, 0xbf, 0x7e, 0xf2, 0x86, 0xba, 0x6e, 0x5b, 0xef, 0xa7, 0x9e, 0x14, 0xda,
    0xcd, 0xd4, 0xa5, 0xcf, 0x72, 0x0e, 0x89, 0xb5, 0xf0, 0x87, 0xbd, 0x35, 0x9f, 0x84, 0x26,
    0xca, 0x6c, 0x4e, 0x55, 0x3c, 0xb3, 0x9b, 0xba, 0x35, 0x74, 0x47, 0xef, 0x14, 0xe4, 0x3f,
    0x29, 0xbc, 0xff, 0x1b, 0x43, 0xa6, 0x8b, 0x92, 0x1e, 0x71, 0x5f, 0x01, 0xc1, 0xfe, 0x77,
    0xe6, 0x3c, 0x52, 0x40, 0x40, 0x2d, 0xbf, 0x87, 0x56, 0x03, 0x0c, 0x48, 0x09, 0x7e, 0x0b,
    0xd0, 0x20, 0xa9, 0x91, 0x8b, 0xda, 0xeb, 0xc3, 0x6f, 0xb9, 0xdf, 0xb9, 0xd8, 0x0a, 0xad,
    0xbf, 0x50, 0xc1, 0x2b, 0xb4, 0x1d, 0x55, 0x48, 0x9a, 0xf2, 0x37, 0x74, 0x5a, 0x4a, 0x6f,
    0xdc, 0xfc, 0x4b, 0x21, 0xd3, 0x0f, 0xf4, 0xfa, 0x33, 0x73, 0xa2, 0x4e, 0x03, 0xab, 0xbf,
    0xbf, 0xfc, 0x15, 0x78, 0xa1, 0xc6, 0xf3, 0xbe, 0xeb, 0x33, 0xc5, 0xbe, 0xd6, 0x67, 0xa6,
    0x6a, 0x0a, 0xc5, 0x2c, 0xc6, 0x68, 0x33, 0x1a, 0x79, 0xa6, 0x9a, 0x6f, 0x09, 0xb7, 0x17,
    0x59, 0xe1, 0x7f, 0x2c, 0xf8, 0x1f, 0x23, 0xa5, 0x03, 0xfd, 0xca, 0xe6, 0xac, 0xef, 0x00,
    0xf8, 0x9e, 0x37, 0xf3, 0x99, 0x5e, 0x80, 0x9a, 0xbd, 0x17, 0xf2, 0x19, 0x5b, 0xf8, 0x2d,
    0x0d, 0x2e, 0xd9, 0xb8, 0xe8, 0x08, 0x45, 0x75, 0x98, 0x6c, 0xac, 0x55, 0x28, 0x69, 0xb9,
    0xee, 0x59, 0x0d, 0x3f, 0x9d, 0xb2, 0x8e, 0x0b, 0x19, 0x1c, 0xf0, 0x71, 0xe5, 0x66, 0xa0,
    0x50, 0x42, 0x79, 0x94, 0x8b, 0x71, 0xa3, 0xfc, 0x1f, 0xc5, 0xa0, 0x0d, 0x76, 0xa9, 0xd2,
    0xc2, 0x6e, 0xa2, 0xde, 0x18, 0x93, 0xf9, 0x84, 0x3d, 0x29, 0xe6, 0xa8, 0x12, 0x82, 0xb5,
    0x01, 0x2d, 0x46, 0xf5, 0xaf, 0xe8, 0xed, 0x81, 0xc5, 0x4d, 0x41, 0x56, 0xbb, 0xa3, 0x99,
    0x70, 0xde, 0xbc, 0x21, 0xc6, 0x35, 0xbf, 0x0a, 0xdc, 0xb6, 0x79, 0x95, 0xd0, 0x1a, 0x69,
    0xb3, 0xe4, 0xe4, 0xc4, 0x76, 0xc2, 0x32, 0x5f, 0x6a, 0xa8, 0x48, 0x1b, 0xa2, 0xa3, 0xd6,
    0x30, 0x6e, 0x4c, 0x1a, 0x0b, 0x56, 0xd3, 0x1c, 0xbf, 0x11, 0x02, 0xe0, 0xb2, 0xad, 0xbd,
    0x3d, 0xad, 0xf8, 0x36, 0x9a, 0x24, 0x0c, 0xc2, 0x23, 0x24, 0x90, 0x9e, 0xe0, 0x6a, 0xd8,
    0x9c, 0xcf, 0xc9, 0xdb, 0x35, 0x71, 0xa2, 0xb8, 0x40, 0x22, 0xe6, 0x54, 0x3e, 0x3f, 0x36,
    0x55, 0xd3, 0x1e, 0xbe, 0xf9, 0xc9, 0x1e, 0xff, 0xb4, 0x76, 0x6b, 0x9d, 0x76, 0xd0, 0xbd,
    0xca, 0x25, 0x0a, 0x9b, 0xb3, 0x42, 0xf4, 0x97, 0xf4, 0x5e, 0x56, 0xc8, 0x22, 0x66, 0xa9,
    0x11, 0x4b, 0x9d, 0x56, 0x61, 0x1e, 0xec, 0x95, 0xe3, 0x03, 0x13, 0xad, 0x47, 0x53, 0x16,
    0xf2, 0x67, 0x03, 0xa3, 0x8a, 0xe0, 0x3b, 0xad, 0xd3, 0x21, 0x51, 0x03, 0xda, 0xb8, 0x43,
    0x9b, 0x37, 0x2e, 0xaa, 0xc4, 0x0b, 0xbe, 0x09, 0x27, 0x69, 0x6e, 0x99, 0x22, 0xd1, 0x12,
    0x1f, 0x25, 0x46, 0xf3, 0x2c, 0x8a, 0x59, 0xe9, 0xab, 0x34, 0x2b, 0xbd, 0x5f, 0xbe, 0xda,
    0x40, 0x21, 0x11, 0xab, 0x16, 0xb1, 0x60, 0x61, 0x54, 0x0b, 0xb5, 0x46, 0x9d, 0x4b, 0x59,
    0xe8, 0xb3, 0x4e, 0xce, 0xb7, 0xfa, 0xf1, 0x67, 0xc4, 0xda, 0xe7, 0x3d, 0x93, 0xac, 0x7c,
    0x44, 0x12, 0xb7, 0xb2, 0xb1, 0xc8, 0x03, 0x29, 0x4b, 0x87, 0x44, 0x0b, 0x2b, 0x27, 0x59,
    0xa2, 0xb2, 0x79, 0x40, 0xb9, 0x7d, 0x7d, 0xdc, 0x09, 0xb7, 0x95, 0xb3, 0x79, 0xb4, 0x03,
    0xe5, 0x41, 0x80, 0x26, 0x1f, 0xdf, 0x3b, 0x7f, 0xc9, 0x2d, 0x8f, 0xdf, 0xbc, 0xa8, 0x0f,
    0x59, 0x5b, 0xb4, 0x06, 0xb2, 0x67, 0x92, 0xd5, 0x52, 0xce, 0x42, 0x22, 0xd1, 0x29, 0x65,
    0x4f, 0x18, 0x9f, 0x98, 0x77, 0xeb, 0x4b, 0x3f, 0x42, 0x23, 0x7e, 0x9c, 0x42, 0x75, 0x90,
    0x96, 0xe6, 0x13, 0xeb, 0x6a, 0x08, 0x16, 0x44, 0xcc, 0xae, 0xc2, 0xac, 0x94, 0x68, 0x11,
    0x0c, 0x67, 0x52, 0xa1, 0xd6, 0x53, 0x21, 0xea, 0x45, 0xb2, 0xbc, 0x4a, 0x16, 0xd2, 0xa6,
    0x0b, 0x5d, 0x12, 0xe1, 0xc7, 0xc6, 0xe9, 0xc2, 0x1b, 0xe3, 0xc7, 0x1d, 0xbb, 0x50, 0x3f,
    0x3b, 0x8d, 0xcc, 0xbc, 0xe0, 0x5b, 0x92, 0xeb, 0x35, 0xde, 0x7e, 0xd7, 0x5b, 0x17, 0x99,
    0x5d, 0x1e, 0x9f, 0x8c, 0xfc, 0x9e, 0xd0, 0x1f, 0x9f, 0xbe, 0xc2, 0xc8, 0x83, 0x1a, 0x63,
    0x3d, 0x61, 0xfd, 0x7a, 0xed, 0xef, 0x7b, 0x7c, 0x84, 0xd1, 0x30, 0xbe, 0x65, 0x3c, 0x7d,
    0x06, 0xe7, 0x16, 0xf8, 0x67, 0xc5, 0x79, 0x94, 0x9e, 0x09, 0xf4, 0xd9, 0xcd, 0x96, 0xcf,
    0xcd, 0xce, 0x25, 0x1d, 0xa7, 0x36, 0x9b, 0x1f, 0x1a, 0x45, 0x43, 0xfa, 0x78, 0xce, 0x22,
    0x78, 0x39, 0xd6, 0x16, 0xa3, 0x9d, 0xf2, 0x25, 0xa3, 0xc9, 0x62, 0xd1, 0x75, 0x12, 0x24,
    0x69, 0xa3, 0x53, 0x93, 0x6f, 0x17, 0x64, 0x7e, 0x96, 0xe4, 0x93, 0xc0, 0x27, 0x46, 0x2c,
    0xf8, 0xf3, 0x2a, 0xf1, 0x69, 0x54, 0x39, 0xbf, 0xbe, 0x93, 0x22, 0x8b, 0x56, 0x3d, 0x8a,
    0xdf, 0xa8, 0x5b, 0x04, 0x8c, 0x30, 0xb2, 0xe3, 0xd6, 0x67, 0xe8, 0x76, 0x43, 0xee, 0xa3,
    0xce, 0xaf, 0x8f, 0x44, 0xe4, 0x49, 0xf4, 0x4a, 0xfc, 0x1a, 0x31, 0x6f, 0x7c, 0x1e, 0x62,
    0xcd, 0xe7, 0x0d, 0xf9, 0x16, 0x26, 0xea, 0x56, 0x25, 0xaa, 0xdc, 0x0a, 0xb4, 0x17, 0xa6,
    0x68, 0xda, 0x85, 0xdb, 0x11, 0x3a, 0x77, 0x97, 0x49, 0x73, 0x27, 0xdf, 0x3e, 0x65, 0x6f,
    0x79, 0x5e, 0x0a, 0xee, 0xb7, 0x14, 0xc9, 0x99, 0x45, 0x82, 0xf9, 0x3c, 0xdc, 0x3d, 0x08,
    0x19, 0xc5, 0xaf, 0xfe, 0x7e, 0x73, 0x4f, 0xf9, 0x28, 0xb7, 0x11, 0xe2, 0xbb, 0x5b, 0x06,
    0x18, 0x33, 0x77, 0xac, 0x2d, 0x2a, 0xcf, 0x56, 0xe0, 0xe7, 0xfa, 0x3c, 0xd8, 0x26, 0x81,
    0xf4, 0xa2, 0x69, 0xcd, 0x32, 0x8d, 0x3c, 0x64, 0x37, 0x69, 0x24, 0x5a, 0xcf, 0xf5, 0xf6,
    0xae, 0x97, 0xf0, 0xcf, 0xa8, 0x53, 0x74, 0xa4, 0xb9, 0xbe, 0xa9, 0x66, 0xd8, 0xb3, 0xa5,
    0x42, 0x7f, 0x4d, 0xd6, 0x27, 0xc7, 0x87, 0xd5, 0x1a, 0x7c, 0x77, 0x43, 0xf7, 0xba, 0x7a,
    0xdc, 0xf3, 0x42, 0xf2, 0x86, 0x46, 0x70, 0xde, 0xb2, 0xa8, 0xf2, 0x5c, 0x23, 0x5a, 0xe6,
    0x5e, 0x93, 0xe6, 0xb0, 0x1d, 0xc3, 0x7f, 0xb9, 0x20, 0xcc, 0xa4, 0x3c, 0xe6, 0x92, 0xfc,
    0xc6, 0x97, 0xb5, 0x15, 0x96, 0x49, 0xf2, 0xd8, 0xc4, 0xd4, 0x41, 0x9e, 0xf1, 0x6c, 0x69,
    0xed, 0x39, 0x34, 0x62, 0xf3, 0xa8, 0xbc, 0xa2, 0x3e, 0x47, 0xda, 0xc2, 0x08, 0xf5, 0x75,
    0xf4, 0x4a, 0x7b, 0x3e, 0x89, 0x20, 0x26, 0x7c, 0x9e, 0x45, 0xaf, 0x11, 0xda, 0x5a, 0x41,
    0xf1, 0xe5, 0x56, 0xb2, 0x8c, 0x2a, 0x8e, 0x82, 0xf4, 0xca, 0xfb, 0x46, 0x4a, 0x1d, 0xd1,
    0x7f, 0xf8, 0xf6, 0x5a, 0x94, 0xcd, 0x98, 0x9b, 0x26, 0xa1, 0xaf, 0x52, 0xbf, 0xa2, 0xd6,
    0x8c, 0x5e, 0x1d, 0xad, 0x7f, 0xdf, 0x32, 0xe4, 0x85, 0x65, 0x66, 0xfe, 0x6e, 0x52, 0x9e,
    0x63, 0x48, 0xea, 0x5d, 0xe4, 0x70, 0xaf, 0xae, 0x73, 0x44, 0x7b, 0x51, 0xc6, 0xb6, 0x11,
    0x5f, 0x92, 0xb1, 0x2c, 0x62, 0xbc, 0x4a, 0x50, 0x02, 0x64, 0x19, 0x4b, 0xc7, 0x99, 0xb5,
    0xdd, 0xa2, 0xf7, 0x58, 0xe4, 0x7d, 0x54, 0x3f, 0x4e, 0x48, 0xc4, 0xf7, 0x11, 0xdb, 0x0f,
    0x41, 0x8f, 0x81, 0x28, 0xfd, 0x2d, 0x34, 0xe6, 0xbd, 0x72, 0xd2, 0xbc, 0x46, 0x78, 0x1b,
    0x75, 0xdb, 0x48, 0x1a, 0xa7, 0xb8, 0xb1, 0x4e, 0xd4, 0x43, 0xa4, 0xfa, 0xc4, 0xe8, 0xfc,
    0x3f, 0xb2, 0xc9, 0x15, 0x38, 0x83, 0x3e, 0xb3, 0xb6, 0x12, 0xf4, 0xcc, 0x78, 0xcf, 0x0f,
    0x97, 0x07, 0xf9, 0x0c, 0xb3, 0x3b, 0xee, 0x69, 0x2c, 0x42, 0x5f, 0x47, 0x74, 0x08, 0xf4,
    0x69, 0xb3, 0x39, 0x08, 0xef, 0x11, 0x2c, 0x72, 0xbf, 0x4a, 0xce, 0x3c, 0xab, 0xf2, 0xa5,
    0x87, 0x78, 0xd4, 0xb8, 0xa4, 0x53, 0x52, 0xba, 0xcf, 0x29, 0xda, 0x81, 0xf4, 0x2c, 0x8e,
    0x07, 0xe3, 0xce, 0xc3, 0xf2, 0x97, 0x2c, 0x1b, 0x62, 0xf4, 0x0d, 0xcc, 0x18, 0x91, 0x94,
    0x53, 0xd2, 0x0b, 0x53, 0xe5, 0x55, 0x8a, 0x1c, 0x9a, 0x07, 0xe9, 0xed, 0xf8, 0xde, 0x4a,
    0xfb, 0x32, 0x22, 0xc6, 0xdc, 0x69, 0xdd, 0x26, 0xc8, 0xd7, 0xa8, 0xf1, 0x8a, 0xd2, 0xa3,
    0xde, 0x1b, 0x05, 0xf5, 0x48, 0xcf, 0x1b, 0x0b, 0x3f, 0xf7, 0xc7, 0x41, 0x7e, 0x92, 0xda,
    0x7c, 0x17, 0xab, 0x4b, 0x16, 0x46, 0x59, 0xce, 0xa8, 0xb2, 0xf7, 0x14, 0xe1, 0x9d, 0xda,
    0xce, 0x76, 0x64, 0x1d, 0x64, 0xdd, 0x73, 0xa5, 0x71, 0x62, 0xe8, 0x12, 0x51, 0x6b, 0x34,
    0x7d, 0xd3, 0xfd, 0xa1, 0x1b, 0x1c, 0xbb, 0x5b, 0x1c, 0xbb, 0x01, 0x5b, 0xb7, 0xa8, 0x8b,
    0x63, 0x27, 0xe9, 0x3f, 0xf2, 0x5e, 0x28, 0xe9, 0xfc, 0xe4, 0x59, 0x26, 0x18, 0xee, 0xcf,
    0xde, 0x88, 0x7a, 0x35, 0xdd, 0x7c, 0x6b, 0x1f, 0x98, 0x46, 0x66, 0xcf, 0x2a, 0xcf, 0x3b,
    0xf7, 0xcf, 0xda, 0x01, 0x46, 0x14, 0x55, 0x6f, 0x49, 0x54, 0x5d, 0xd9, 0x83, 0xf1, 0x1e,
    0x8a, 0x75, 0x13, 0xda, 0x08, 0xe7, 0x59, 0x3b, 0x6f, 0x8e, 0x8f, 0xcb, 0x7b, 0xfb, 0xd8,
    0x76, 0x7e, 0x33, 0x42, 0x2f, 0x25, 0xf8, 0x5c, 0x87, 0xbf, 0x73, 0x2a, 0x66, 0xe6, 0x68,
    0x86, 0xed, 0x09, 0xf5, 0xd4, 0x81, 0xe7, 0x8d, 0x7e, 0x51, 0x33, 0x07, 0xc6, 0x62, 0xd8,
    0x76, 0x5d, 0x39, 0x1b, 0xcb, 0xd6, 0x75, 0x98, 0x1e, 0xcc, 0x09, 0x57, 0xbf, 0x26, 0xfd,
    0x98, 0x34, 0xc2, 0x28, 0xee, 0x1d, 0xe2, 0x1d, 0xb6, 0x43, 0xb3, 0xb8, 0x94, 0xed, 0x61,
    0xf2, 0x78, 0x3a, 0xba, 0xc5, 0x08, 0xd3, 0xe3, 0x25, 0xf4, 0xaf, 0xba, 0x87, 0xd1, 0xe0,
    0xed, 0xc0, 0xc4, 0x48, 0xb6, 0x43, 0x1a, 0x89, 0xc8, 0xbe, 0x27, 0x68, 0x14, 0x25, 0xde,
    0x79, 0xef, 0xa2, 0x9a, 0xbf, 0x3c, 0x5f, 0xd8, 0x34, 0xe2, 0x85, 0x40, 0x81, 0x9f, 0xf6,
    0x35, 0xcc, 0xe0, 0x61, 0x13, 0x2f, 0xac, 0x4a, 0x75, 0xdc, 0x2b, 0x8f, 0xa0, 0x1c, 0x46,
    0x56, 0x81, 0x77, 0x10, 0xd6, 0xbc, 0x74, 0xca, 0x22, 0x84, 0xed, 0x93, 0x6f, 0xbb, 0x53,
    0x73, 0xfc, 0xf7, 0xed, 0xdd, 0xe9, 0xe7, 0xd6, 0x78, 0xae, 0x4d, 0xaa, 0x8e, 0x76, 0xde,
    0x5e, 0x47, 0xb9, 0xdb, 0x93, 0x32, 0x7a, 0x1b, 0xa1, 0x97, 0x51, 0x22, 0x2d, 0xc2, 0x18,
    0xb8, 0x77, 0x12, 0x69, 0x0b, 0xe7, 0xe4, 0x33, 0x2d, 0xe3, 0xf1, 0xc2, 0xf1, 0x98, 0x47,
    0x0d, 0xf3, 0x9f, 0x61, 0x4e, 0x08, 0xfd, 0x07, 0xc8, 0x07, 0xf5, 0x13, 0xf5, 0xbc, 0x36,
    0x11, 0x1a, 0x9f, 0xf7, 0x3b, 0x40, 0xd3, 0x8d, 0x54, 0x5f, 0x24, 0xed, 0x06, 0xf7, 0x92,
    0xd0, 0xbf, 0x5f, 0x5b, 0x60, 0xb4, 0x2d, 0xf1, 0x42, 0x9b, 0x70, 0x3e, 0x2a, 0x99, 0x83,
    0xee, 0xa8, 0x5f, 0xa6, 0x74, 0x9e, 0xe0, 0x3c, 0xec, 0x63, 0x24, 0xe5, 0x2e, 0x46, 0x87,
    0x67, 0xda, 0x1e, 0xa1, 0xa9, 0xba, 0x77, 0xad, 0xc1, 0x3b, 0x09, 0xf4, 0xdf, 0x26, 0xd3,
    0x00, 0xfa, 0x4b, 0x82, 0xd7, 0x56, 0xc2, 0x38, 0xee, 0x8f, 0x4b, 0xa7, 0xad, 0x95, 0xda,
    0x9d, 0xb6, 0xc7, 0xc9, 0x73, 0xda, 0x82, 0xef, 0x2d, 0xea, 0x81, 0x96, 0x3a, 0x0e, 0xeb,
    0xbb, 0x1c, 0xd1, 0x76, 0x60, 0x5d, 0xb4, 0x59, 0xc4, 0x3e, 0x22, 0xaf, 0x90, 0xe7, 0xf0,
    0xf5, 0x0e, 0x6c, 0xd0, 0x3a, 0x31, 0x5a, 0x9e, 0xd2, 0x20, 0xad, 0x69, 0x0a, 0x6b, 0xcf,
    0x21, 0x90, 0xef, 0x87, 0x37, 0x27, 0xe5, 0xe8, 0xb1, 0x05, 0xbe, 0x76, 0xe8, 0xdc, 0x9c,
    0xde, 0x98, 0xa2, 0xdc, 0xa0, 0xf5, 0x97, 0x5c, 0x0d, 0xcb, 0xc4, 0xcc, 0x0b, 0xac, 0x99,
    0x77, 0x41, 0xee, 0x0c, 0xec, 0x7a, 0x2b, 0xf6, 0x5d, 0xe4, 0xa9, 0xe5, 0x09, 0xca, 0x31,
    0x43, 0xc2, 0x5b, 0xde, 0xb3, 0x05, 0xeb, 0x1f, 0xe7, 0x0d, 0xb1, 0x3f, 0x25, 0xb3, 0xb7,
    0xd2, 0x76, 0x2e, 0xea, 0xb7, 0x18, 0xfd, 0x75, 0x3c, 0xe9, 0xde, 0x68, 0xe7, 0x55, 0xe7,
    0xae, 0xc7, 0x6f, 0xbb, 0x8b, 0x93, 0xfd, 0xdd, 0x05, 0x8c, 0x3d, 0xbb, 0x4f, 0xa1, 0x63,
    0x1a, 0xdf, 0x6a, 0xdd, 0xd4, 0x30, 0x1a, 0xcc, 0xaa, 0x93, 0xcf, 0x34, 0xbd, 0x01, 0xed,
    0x25, 0xc8, 0xee, 0x81, 0xe1, 0x8d, 0xad, 0xb8, 0x76, 0x13, 0xd7, 0x18, 0x1f, 0x0b, 0xfa,
    0x74, 0xbf, 0x8f, 0xdb, 0x97, 0x39, 0xa4, 0x0f, 0x7e, 0x93, 0xc6, 0x8e, 0x45, 0xfb, 0x6a,
    0xed, 0xd0, 0xc4, 0xe8, 0x77, 0x1a, 0x85, 0x15, 0x90, 0xaf, 0xc7, 0x63, 0xff, 0x73, 0xaf,
    0x22, 0xe1, 0x30, 0x8b, 0xf6, 0x75, 0xdf, 0x28, 0xed, 0xf7, 0x0b, 0x28, 0xf7, 0xeb, 0x53,
    0xd9, 0x64, 0x5e, 0xa1, 0xf9, 0x7a, 0x4e, 0x27, 0xde, 0xad, 0xcd, 0x6a, 0x23, 0xb7, 0xd3,
    0x74, 0x9b, 0x55, 0x92, 0x23, 0x32, 0x86, 0xe7, 0x19, 0x2d, 0xb9, 0x7e, 0x9e, 0x7b, 0x95,
    0xa7, 0x2c, 0x3a, 0xdf, 0x3a, 0xdb, 0xbf, 0xe9, 0x9f, 0x17, 0xdd, 0x8f, 0x9f, 0xf7, 0x31,
    0x7c, 0xd7, 0xfd, 0x5c, 0x1e, 0xda, 0xf0, 0x7b, 0x83, 0xf3, 0x08, 0xff, 0xc2, 0x7c, 0x3a,
    0x94, 0x99, 0x64, 0x5e, 0x8d, 0xf1, 0xf4, 0xa1, 0x9f, 0x7f, 0xbe, 0xc8, 0xef, 0x5c, 0x74,
    0xff, 0x3a, 0x33, 0x06, 0x28, 0xdb, 0xc8, 0x58, 0xf2, 0x7d, 0x02, 0x91, 0x90, 0xda, 0x13,
    0xaf, 0x0b, 0x69, 0x3f, 0xd9, 0x1b, 0x58, 0x47, 0x23, 0xbd, 0x1b, 0x5e, 0x5b, 0x03, 0xdc,
    0xb8, 0xf7, 0x6e, 0xb5, 0x9e, 0xef, 0xb7, 0x62, 0xf8, 0xed, 0x10, 0xbf, 0x2b, 0x2d, 0x2e,
    0xd9, 0x60, 0x59, 0xc2, 0x4c, 0x54, 0x96, 0x76, 0x30, 0x74, 0x6a, 0xfb, 0xbb, 0xa4, 0x3c,
    0x73, 0x6c, 0xc1, 0x3e, 0x8f, 0x77, 0x7a, 0x50, 0xdf, 0x39, 0x8d, 0xa8, 0x8b, 0xe5, 0x21,
    0x2b, 0x8e, 0xb0, 0x67, 0x44, 0xc9, 0x15, 0x5c, 0xc7, 0x4e, 0xcc, 0xbe, 0x92, 0xc2, 0x9b,
    0x32, 0x1a, 0xeb, 0x2c, 0x69, 0x91, 0x7d, 0xdc, 0xaf, 0x90, 0xb1, 0xae, 0xb7, 0x76, 0x67,
    0x3a, 0xd7, 0x98, 0x93, 0xf5, 0x56, 0x3b, 0xcf, 0xc9, 0x7c, 0x9b, 0x34, 0x36, 0x79, 0x67,
    0xe1, 0xc9, 0xf9, 0xc5, 0x30, 0x4e, 0x26, 0x88, 0xe3, 0x75, 0x7e, 0x7b, 0xa4, 0x79, 0xf2,
    0xbc, 0x5b, 0x88, 0x91, 0xcd, 0x94, 0x8e, 0x83, 0x1d, 0x1e, 0xed, 0x68, 0xe3, 0x7e, 0x73,
    0x04, 0x5e, 0xdc, 0x07, 0x59, 0xb2, 0xdc, 0x85, 0xfd, 0x13, 0xe9, 0xae, 0x2c, 0xc8, 0xbf,
    0xe1, 0x92, 0xee, 0x61, 0xe3, 0xe9, 0xd1, 0x72, 0xec, 0x65, 0x92, 0xa3, 0xfa, 0xc6, 0x5e,
    0xf2, 0x62, 0x4f, 0xd4, 0x2d, 0x68, 0x14, 0x27, 0x93, 0x23, 0x27, 0x46, 0xbc, 0xac, 0xad,
    0x41, 0x9e, 0x54, 0xcc, 0xb9, 0x8a, 0xe9, 0x4d, 0xce, 0x6f, 0xa6, 0xfa, 0x04, 0x23, 0xaf,
    0xf0, 0x9e, 0xd8, 0xe9, 0x17, 0xaa, 0xe3, 0x1a, 0xcf, 0x66, 0x4f, 0x11, 0x04, 0x78, 0xb4,
    0xd0, 0x6f, 0x72, 0x99, 0xb3, 0x0c, 0xc8, 0x69, 0xd6, 0x66, 0x69, 0xd4, 0x3b, 0x68, 0x10,
    0xc4, 0x93, 0x0d, 0xb7, 0x35, 0x8c, 0x4c, 0x87, 0x79, 0xa9, 0x45, 0x8f, 0xfb, 0x01, 0xaf,
    0x90, 0x07, 0x56, 0x1d, 0xfa, 0xb6, 0x3b, 0xbf, 0x44, 0xfd, 0x6f, 0x72, 0x63, 0x82, 0x5c,
    0xa9, 0x20, 0x63, 0xe3, 0xe4, 0xba, 0xd7, 0x0e, 0x46, 0x96, 0x4e, 0xaa, 0x44, 0xd6, 0x0c,
    0xf9, 0xd1, 0xa0, 0x4c, 0xf6, 0x83, 0x39, 0xe6, 0xa9, 0xed, 0x15, 0x9b, 0x36, 0xcc, 0xcb,
    0xcc, 0xbc, 0x70, 0xfa, 0x49, 0x84, 0x29, 0xa6, 0x7d, 0xc1, 0xb1, 0x6c, 0x9f, 0x57, 0x17,
    0x9f, 0x55, 0xe7, 0x46, 0xe4, 0x87, 0x93, 0xdb, 0xdd, 0xd0, 0x7a, 0x6d, 0x9d, 0x97, 0x70,
    0x42, 0x5f, 0xcc, 0x6d, 0x44, 0x9f, 0xe8, 0x17, 0x7b, 0x40, 0xcb, 0xcd, 0x35, 0xf4, 0x81,
    0x87, 0x7b, 0x07, 0xc8, 0x1b, 0x7d, 0xd0, 0xa5, 0x1b, 0xdd, 0xbd, 0x23, 0xf6, 0xec, 0xcc,
    0x5b, 0x9a, 0x53, 0x16, 0xc7, 0x06, 0xbd, 0xdb, 0xd9, 0xf7, 0x55, 0xfd, 0x00, 0xfa, 0xca,
    0xdd, 0x63, 0xe7, 0x3a, 0x6e, 0x5f, 0x05, 0x1d, 0x5a, 0xe5, 0x74, 0x55, 0x29, 0x6f, 0x9e,
    0xfd, 0xaa, 0x7f, 0x5e, 0xdd, 0x02, 0xd9, 0x92, 0xef, 0x77, 0xbd, 0xe7, 0xa0, 0x1b, 0xee,
    0xd0, 0xf1, 0x21, 0x73, 0x72, 0xcb, 0xe6, 0xf8, 0x36, 0x71, 0xcc, 0x96, 0xc2, 0xb8, 0x7c,
    0x99, 0x07, 0xf7, 0x6d, 0xed, 0x60, 0xb4, 0x04, 0xbd, 0xfc, 0x16, 0x64, 0xe0, 0x14, 0x64,
    0xbf, 0xd8, 0x1e, 0x72, 0x2b, 0xf0, 0x8f, 0xc0, 0x2b, 0x27, 0x73, 0xa4, 0xab, 0x4b, 0xd7,
    0xf0, 0xac, 0xb5, 0x0b, 0x7b, 0x4f, 0x88, 0x9e, 0x58, 0xdd, 0x80, 0xd7, 0xc1, 0x75, 0x46,
    0x03, 0x6f, 0x8f, 0xbf, 0x85, 0xe7, 0xaa, 0x0b, 0x63, 0x82, 0x11, 0xfa, 0x03, 0x1e, 0x51,
    0x60, 0x9a, 0xb2, 0xce, 0xc2, 0xea, 0x21, 0xe5, 0x4a, 0x32, 0x12, 0x43, 0x8c, 0x7e, 0x1c,
    0x33, 0x8e, 0xd9, 0x1e, 0x94, 0xa0, 0x5b, 0x2d, 0xc7, 0xde, 0x1e, 0x10, 0xb3, 0x3e, 0x6e,
    0x2d, 0x82, 0x00, 0xd1, 0x85, 0xf3, 0x0b, 0xec, 0x8f, 0x4c, 0x47, 0x00, 0xd9, 0x0a, 0x7a,
    0x91, 0x71, 0x21, 0x7d, 0xa1, 0x52, 0x75, 0x28, 0x4f, 0x99, 0x2e, 0xae, 0x73, 0x0d, 0x23,
    0x68, 0x76, 0x49, 0x51, 0x7f, 0xc0, 0xb5, 0x76, 0x8d, 0xa9, 0x87, 0xfa, 0x07, 0x3b, 0xd6,
    0xb2, 0x76, 0xad, 0x2e, 0x07, 0x84, 0x8e, 0x9a, 0x99, 0xdf, 0x79, 0x6a, 0x37, 0xe9, 0x17,
    0x23, 0xf9, 0xff, 0xa3, 0xc3, 0xd0, 0xa4, 0x6f, 0x62, 0xfe, 0x1f, 0xc3, 0x58, 0x5f, 0x1b,
    0xfe, 0xff, 0xf9, 0x42, 0x29, 0x97, 0xdf, 0x0e, 0xe5, 0x7f, 0x2e, 0x7c, 0x2c, 0xbd, 0xfa,
    0x3f, 0xca, 0x0f, 0x86, 0x91, 0x6e, 0xa8, 0x73, 0x77, 0x64, 0xcf, 0x36, 0x7e, 0x66, 0xa1,
    0x1b, 0x98, 0xe1, 0x18, 0x3e, 0x6d, 0xec, 0x4e, 0xd4, 0x5b, 0xdb, 0x52, 0xce, 0xf5, 0xbe,
    0xd2, 0x67, 0xd7, 0xc6, 0x40, 0x77, 0x36, 0xa8, 0x63, 0xe8, 0x86, 0x3d, 0x1b, 0xaa, 0x96,
    0x4b, 0xbc, 0xbc, 0x36, 0x68, 0x08, 0x00, 0xfb, 0x66, 0x66, 0x9b, 0x50, 0xec, 0x67, 0xe6,
    0xea, 0xd7, 0x4e, 0x3e, 0xfe, 0xce, 0x0a, 0xcd, 0x67, 0x26, 0x36, 0x30, 0x72, 0xdd, 0xa9,
    0xf3, 0x87, 0x0f, 0xea, 0xc2, 0xd9, 0x54, 0x49, 0x63, 0xe8, 0xef, 0x8b, 0x45, 0xff, 0xc2,
    0x1b, 0xfd, 0xb9, 0xa5, 0x99, 0xba, 0xe6, 0x53, 0xf6, 0xef, 0x2b, 0xe3, 0xc6, 0xc5, 0xe8,
    0x21, 0x96, 0xc0, 0x2f, 0xb4, 0xf1, 0xbf, 0x73, 0x9b, 0xf9, 0x9d, 0xcd, 0x9c, 0x5f, 0xc1,
    0xc6, 0xa0, 0xda, 0xfe, 0x1c, 0x9d, 0xfe, 0x3d, 0x9a, 0x78, 0xe8, 0xac, 0xd7, 0xcf, 0x8a,
    0x6a, 0xca, 0x9e, 0x6e, 0xbd, 0xaf, 0x39, 0x33, 0x55, 0x37, 0x37, 0x78, 0x78, 0x6c, 0xa8,
    0xf0, 0x68, 0xa2, 0x1a, 0x96, 0x0b, 0xbf, 0x3a, 0xeb, 0x91, 0xd7, 0xa7, 0x70, 0xaf, 0x86,
    0x3b, 0x9a, 0xf7, 0xb1, 0x47, 0x1f, 0x74, 0x68, 0xa1, 0x4f, 0x5f, 0xf8, 0xeb, 0x5d, 0x34,
    0x4d, 0x63, 0x60, 0x2b, 0x87, 0x73, 0xe3, 0x5b, 0x5f, 0x9f, 0x39, 0x0f, 0x40, 0xc2, 0xcc,
    0xc9, 0xcd, 0x66, 0xb3, 0x14, 0x22, 0x6c, 0xac, 0x5c, 0x39, 0x51, 0x67, 0x03, 0x55, 0x33,
    0xd9, 0xfb, 0x93, 0xb9, 0x69, 0x42, 0x3b, 0xeb, 0x27, 0x87, 0xb6, 0xc4, 0xaa, 0xf7, 0x62,
    0xc9, 0x9b, 0x1b, 0x62, 0xec, 0xb6, 0x30, 0xf7, 0xc1, 0x20, 0x12, 0xf4, 0x2b, 0x64, 0xb3,
    0xff, 0xe3, 0x9c, 0x19, 0x59, 0xec, 0xbd, 0x7d, 0x95, 0xb5, 0x38, 0x86, 0x8d, 0xf8, 0xa5,
    0x4e, 0xf2, 0x68, 0x5a, 0x96, 0x4d, 0x1b, 0x03, 0xd0, 0xd3, 0x09, 0xf3, 0x46, 0x17, 0x24,
    0x50, 0x77, 0x1d, 0xe1, 0x11, 0x56, 0x68, 0xbb, 0x96, 0xee, 0x4a, 0xcf, 0xd8, 0x44, 0x90,
    0xe1, 0xfe, 0xfa, 0xdb, 0x3c, 0x6a, 0xd5, 0x6a, 0x9b, 0x6d, 0xcc, 0xc4, 0x25, 0x38, 0xc4,
    0xd9, 0xc4, 0x37, 0xf7, 0xa0, 0x35, 0xef, 0xd3, 0x86, 0x18, 0xed, 0xbd, 0xc1, 0xa4, 0x7b,
    0x4b, 0xab, 0xed, 0x8c, 0x17, 0x24, 0xb5, 0x79, 0x9f, 0x36, 0xbc, 0xca, 0xfe, 0xf2, 0xeb,
    0x18, 0xda, 0x48, 0xb5, 0xf8, 0xe4, 0x9b, 0x7a, 0xad, 0x06, 0x7b, 0x32, 0x51, 0xaf, 0x75,
    0xf0, 0x10, 0xa5, 0xc1, 0xcc, 0x35, 0xae, 0xd4, 0x81, 0x4b, 0x69, 0x1a, 0x78, 0x14, 0xd0,
    0x93, 0x63, 0xd5, 0x37, 0x86, 0x33, 0x7b, 0x3e, 0xa5, 0x25, 0x1d, 0xfb, 0xca, 0x5d, 0xa8,
    0x9d, 0xcb, 0x09, 0x1c, 0xed, 0x4d, 0x92, 0x9e, 0x6c, 0x43, 0x78, 0xe7, 0xaf, 0xa8, 0xee,
    0xbf, 0xbe, 0xe9, 0xd3, 0xb0, 0x49, 0x68, 0x88, 0xec, 0xf3, 0x37, 0x27, 0x34, 0x53, 0xd3,
    0x56, 0x1c, 0x3d, 0xf9, 0x91, 0x75, 0x4c, 0x97, 0x20, 0x08, 0x83, 0x43, 0xb2, 0xa1, 0x19,
    0x5b, 0x67, 0xcb, 0x8f, 0xd4, 0xb5, 0x19, 0xa8, 0x4b, 0xea, 0x12, 0x0d, 0x9c, 0x97, 0xcb,
    0xd8, 0xfa, 0x40, 0xbb, 0x3f, 0x88, 0xff, 0xfe, 0x95, 0x71, 0x6d, 0x3c, 0x22, 0xc7, 0x9e,
    0xad, 0x9f, 0x6f, 0x69, 0x9d, 0x4f, 0xc6, 0xbd, 0xde, 0x40, 0x7e, 0x07, 0x5c, 0x6c, 0x5f,
    0x8b, 0x97, 0xbd, 0x5e, 0xad, 0x91, 0xa7, 0x23, 0x47, 0x2a, 0x85, 0xb7, 0xbf, 0xda, 0x57,
    0xe3, 0x71, 0x2a, 0xd0, 0x3d, 0xd6, 0xf6, 0x51, 0x6e, 0x64, 0xee, 0x8e, 0x7a, 0xcf, 0x87,
    0x08, 0xf6, 0xd0, 0xb4, 0xa9, 0x87, 0x7b, 0xcd, 0x3a, 0x89, 0xfa, 0x1e, 0x4a, 0x5c, 0x19,
    0xce, 0xb7, 0x55, 0x44, 0xd7, 0x31, 0x60, 0xf7, 0xb8, 0xd9, 0x74, 0x9d, 0x20, 0x77, 0x98,
    0x73, 0x42, 0x99, 0x7c, 0xbe, 0x10, 0xcb, 0x01, 0x51, 0xab, 0x91, 0x8e, 0x73, 0xd4, 0x8a,
    0x33, 0x9a, 0xb2, 0x2a, 0x41, 0xed, 0xb5, 0x27, 0x2d, 0xde, 0x3b, 0x32, 0x57, 0x52, 0x15,
    0x05, 0xa8, 0x8c, 0x58, 0x23, 0xe4, 0xf9, 0xca, 0xcc, 0x39, 0x20, 0x2d, 0x7f, 0xf5, 0x06,
    0xab, 0x95, 0xda, 0x76, 0x24, 0x8f, 0x91, 0x6f, 0xe2, 0x39, 0x06, 0x27, 0x2f, 0x4b, 0x53,
    0x44, 0xfd, 0xed, 0x31, 0x96, 0xa7, 0xc7, 0x3c, 0xac, 0x3c, 0x3c, 0x36, 0xfa, 0xeb, 0x13,
    0x50, 0x99, 0x2f, 0x01, 0xa5, 0xca, 0xae, 0x41, 0xb1, 0xc4, 0x38, 0xb9, 0xf9, 0x15, 0x68,
    0x58, 0xe1, 0x7b, 0x4d, 0xbf, 0x9e, 0xce, 0xf4, 0x6b, 0x43, 0x5f, 0x3c, 0xa6, 0xac, 0xc4,
    0x79, 0x27, 0x11, 0x19, 0x78, 0x29, 0xd4, 0x9f, 0xcd, 0xfd, 0x4a, 0xf7, 0xac, 0x59, 0xe9,
    0x2a, 0xe7, 0x6b, 0x14, 0xa7, 0x48, 0xee, 0x3d, 0xe5, 0x68, 0x6c, 0x15, 0xab, 0x8b, 0xcf,
    0xe0, 0x25, 0xaf, 0x81, 0x58, 0x61, 0x29, 0xe8, 0xb5, 0xce, 0x60, 0x66, 0x4c, 0xd9, 0x39,
    0x63, 0x57, 0x71, 0x8c, 0xc9, 0xd4, 0xd4, 0x49, 0x40, 0xd1, 0x1c, 0xfb, 0xaf, 0xf4, 0xe7,
    0xe9, 0x2a, 0x70, 0x0e, 0x24, 0x8c, 0xb7, 0x41, 0xdf, 0xb2, 0x07, 0x82, 0x66, 0xee, 0xa5,
    0xc5, 0x1a, 0xc4, 0xec, 0x97, 0xbe, 0xfa, 0x3c, 0xb2, 0x27, 0xfa, 0x94, 0x0d, 0x7b, 0xc4,
    0x00, 0x0e, 0x80, 0x64, 0xb8, 0x68, 0xed, 0xf8, 0x57, 0x97, 0x4e, 0x2e, 0x96, 0xf7, 0xf5,
    0x8d, 0xb1, 0xbe, 0x5c, 0xd8, 0x33, 0xcd, 0x3f, 0x81, 0x6c, 0xc0, 0x9b, 0x5c, 0x95, 0xf7,
    0xc0, 0x05, 0x0b, 0xb3, 0xb8, 0xe1, 0x1d, 0x28, 0x4c, 0x38, 0xba, 0x5a, 0x54, 0xfb, 0xdf,
    0xf9, 0x1f, 0xe9, 0xef, 0x0b, 0xbc, 0xc6, 0x89, 0xee, 0xaa, 0x18, 0xb6, 0xe4, 0xf7, 0x06,
    0xf9, 0xb9, 0x6f, 0xc3, 0x41, 0x47, 0x0d, 0x1c, 0x6d, 0xc9, 0x37, 0x16, 0x89, 0xb0, 0x42,
    0x5d, 0x2c, 0x7e, 0x14, 0xbf, 0xb0, 0x49, 0xf0, 0xbc, 0xb4, 0xd5, 0x90, 0x98, 0x43, 0x6c,
    0xa9, 0x3b, 0x3f, 0x6e, 0x04, 0x46, 0x9e, 0x6f, 0x0e, 0xde, 0xdc, 0x52, 0x82, 0x30, 0x44,
    0x22, 0x9c, 0x2e, 0x30, 0xbb, 0xae, 0x66, 0x2f, 0xc8, 0x48, 0xfc, 0x83, 0x60, 0x29, 0x29,
    0xb2, 0xff, 0x62, 0x7d, 0xb1, 0xda, 0x98, 0xf6, 0x10, 0xe6, 0x7a, 0xa6, 0xce, 0x96, 0x18,
    0x48, 0x50, 0xae, 0x5c, 0x5b, 0xd1, 0xf4, 0x09, 0x09, 0x79, 0x47, 0x5c, 0x2a, 0xd5, 0xd2,
    0x2e, 0x5f, 0xc5, 0xc5, 0xf4, 0xbe, 0xba, 0x4a, 0xce, 0xd0, 0x98, 0xd3, 0x0f, 0xe7, 0x14,
    0xf9, 0xc7, 0x3f, 0x94, 0x43, 0x7b, 0x81, 0xaf, 0x21, 0x20, 0xc0, 0x6c, 0x6e, 0x59, 0x98,
    0x11, 0x43, 0x50, 0x77, 0xcf, 0x6a, 0x3f, 0x63, 0x89, 0xaa, 0x31, 0x73, 0xdc, 0x77, 0xca,
    0x13, 0xf4, 0x41, 0x85, 0x8a, 0xbf, 0x42, 0xc8, 0xd7, 0x7f, 0xfc, 0xf1, 0x87, 0xeb, 0x7c,
    0xfc, 0x48, 0x3e, 0xfa, 0x1d, 0x0b, 0x64, 0x23, 0x71, 0xb7, 0x52, 0xcc, 0x24, 0x79, 0x83,
    0xaf, 0x5b, 0xf8, 0xbd, 0xa9, 0x38, 0xc0, 0x23, 0x8a, 0x1f, 0x7d, 0x48, 0xaa, 0x65, 0x15,
    0xec, 0xdc, 0xff, 0xeb, 0x02, 0x78, 0xe6, 0xfd, 0x40, 0xe8, 0xbf, 0xb0, 0x50, 0x79, 0x2c,
    0x57, 0x35, 0x74, 0xaa, 0x6c, 0x6b, 0xba, 0xd2, 0x52, 0x91, 0xa5, 0x1d, 0x81, 0xcc, 0x0f,
    0x54, 0xc8, 0xb0, 0xc1, 0xff, 0x5d, 0x1b, 0x06, 0x06, 0xfa, 0x33, 0x51, 0x87, 0xc6, 0x40,
    0x66, 0x44, 0xd6, 0x55, 0xe0, 0x10, 0x3c, 0xd2, 0x67, 0xfa, 0x3b, 0x05, 0xf3, 0x47, 0x62,
    0x44, 0x65, 0xa1, 0x1a, 0xee, 0x8f, 0xca, 0x3f, 0x3f, 0xf0, 0x3e, 0x5e, 0xd9, 0x36, 0xa6,
    0xeb, 0xab, 0xb3, 0x9f, 0x78, 0x8b, 0x3e, 0xbb, 0xcf, 0x74, 0x12, 0x95, 0x6c, 0xcf, 0x96,
    0x44, 0x6a, 0xc6, 0x8c, 0x60, 0x5d, 0x91, 0x55, 0xc2, 0xa4, 0x90, 0x60, 0xc7, 0xf0, 0x38,
    0x39, 0x25, 0x6c, 0x01, 0xab, 0x83, 0x3f, 0x8a, 0x3f, 0x45, 0xf3, 0x75, 0xb3, 0x89, 0xa5,
    0xd6, 0x1d, 0xe0, 0xf0, 0x89, 0xca, 0x79, 0xeb, 0x43, 0x6e, 0x33, 0xef, 0x2d, 0xa0, 0x08,
    0x27, 0xbb, 0xe6, 0x93, 0xac, 0xf5, 0x48, 0x1a, 0xcf, 0xe6, 0xe6, 0x87, 0xa8, 0x6a, 0x3f,
    0x30, 0xd1, 0x98, 0x2e, 0xa4, 0xc9, 0xda, 0x10, 0xd7, 0x84, 0x76, 0xb6, 0x22, 0xf5, 0x3a,
    0x9e, 0xcd, 0x7d, 0x90, 0x2f, 0xd7, 0x2c, 0x85, 0xe5, 0xa1, 0xea, 0xd4, 0xed, 0x33, 0x2f,
    0xf2, 0x6e, 0xc4, 0x22, 0x61, 0x18, 0x67, 0x6e, 0x1a, 0xaa, 0x05, 0xdb, 0x71, 0x24, 0x55,
    0x42, 0x29, 0x85, 0xac, 0x9a, 0xe5, 0xea, 0x33, 0xd8, 0xf0, 0xf4, 0x9a, 0xe5, 0xed, 0xe6,
    0x6b, 0x60, 0xce, 0x41, 0xc4, 0x12, 0x5a, 0x1f, 0x92, 0xbc, 0x7c, 0x21, 0xb7, 0x7d, 0x07,
    0x4e, 0x2d, 0x73, 0xe9, 0x3d, 0x7f, 0x40, 0xea, 0xf2, 0x3b, 0x3b, 0x29, 0xd4, 0x9d, 0x91,
    0xb0, 0xa5, 0x9b, 0x57, 0x0f, 0x48, 0x46, 0x6e, 0x27, 0x97, 0x42, 0x86, 0x00, 0x37, 0x70,
    0x3a, 0x7c, 0x99, 0x14, 0x4d, 0x47, 0x31, 0x8d, 0xc5, 0xef, 0xb9, 0xfa, 0x62, 0xce, 0x1b,
    0x0a, 0xcb, 0xda, 0x3a, 0x1c, 0x25, 0x07, 0xe3, 0xaf, 0x33, 0xfd, 0x0a, 0x44, 0xa1, 0x35,
    0x0f, 0xff, 0x7a, 0x55, 0x26, 0xd1, 0x95, 0xb6, 0xc2, 0x7c, 0xba, 0x06, 0x23, 0x10, 0x23,
    0x4c, 0x4d, 0x3e, 0x33, 0x35, 0x86, 0x63, 0x9b, 0x98, 0xbe, 0xf5, 0x81, 0x09, 0x2a, 0x64,
    0xc8, 0x82, 0xad, 0x5e, 0xd7, 0xbe, 0xae, 0x81, 0x8b, 0x7c, 0xc2, 0x82, 0x75, 0x46, 0xd3,
    0x99, 0xb1, 0x43, 0x34, 0x6e, 0x6a, 0xba, 0x3e, 0x35, 0x97, 0x75, 0xf2, 0xf8, 0xf1, 0x08,
    0x48, 0x4d, 0x6f, 0x0f, 0x0d, 0x9e, 0xf8, 0xc2, 0xa7, 0xbd, 0x0d, 0x03, 0x14, 0x81, 0x8e,
    0x35, 0x3b, 0xda, 0xf8, 0xfd, 0x15, 0x1c, 0x71, 0xa0, 0x24, 0x3b, 0x54, 0x2c, 0xf4, 0xbe,
    0xee, 0x4e, 0xc8, 0x8e, 0x6d, 0x4c, 0xc8, 0xb6, 0xbf, 0x7b, 0xde, 0x3a, 0xb6, 0x87, 0x76,
    0xf0, 0xe9, 0x06, 0x7e, 0x37, 0xa7, 0xa0, 0x26, 0x7a, 0x87, 0xcd, 0xd5, 0x4f, 0x90, 0xfe,
    0xab, 0x1f, 0x18, 0xa5, 0x0b, 0x01, 0xf9, 0xc4, 0x17, 0x3c, 0xed, 0x45, 0x9c, 0xf4, 0x62,
    0x79, 0xe2, 0x50, 0xaf, 0x64, 0x00, 0xfb, 0x2b, 0xd8, 0x97, 0xcc, 0x27, 0xb5, 0x8d, 0x00,
    0x89, 0x94, 0xb3, 0x93, 0x99, 0xaf, 0x6d, 0x49, 0x65, 0x43, 0xc7, 0xb0, 0x0d, 0x02, 0x0b,
    0x5c, 0x19, 0xfa, 0x2c, 0x70, 0xdb, 0x81, 0xe3, 0xa8, 0xfc, 0xfc, 0xb3, 0x52, 0xf6, 0x0a,
    0xa7, 0x9a, 0xa3, 0xec, 0xcf, 0x27, 0x93, 0x65, 0xf8, 0x06, 0x44, 0x3c, 0xcb, 0x05, 0x75,
    0xe9, 0xf4, 0xe6, 0x9d, 0xdb, 0x82, 0xe7, 0x04, 0x82, 0xc2, 0x20, 0x1f, 0x4f, 0xe8, 0x5a,
    0xed, 0xa3, 0x76, 0x3f, 0x70, 0x09, 0x29, 0x22, 0xf1, 0x2a, 0xfb, 0x42, 0x3a, 0xbd, 0xe0,
    0x76, 0xbf, 0x1b, 0x43, 0x0b, 0xbf, 0x20, 0x89, 0x69, 0x61, 0x4f, 0x34, 0xd8, 0xc9, 0x27,
    0xf2, 0x24, 0xf1, 0x14, 0x28, 0xcf, 0xec, 0xd5, 0x9f, 0x56, 0x42, 0x43, 0x7e, 0x23, 0x86,
    0x31, 0x12, 0x34, 0xbd, 0x0c, 0x42, 0x87, 0xef, 0xd4, 0xf6, 0xa3, 0x0c, 0x3b, 0x06, 0x57,
    0x02, 0xd3, 0x2c, 0xa8, 0x4d, 0xbe, 0xde, 0x84, 0xa7, 0x08, 0xac, 0x52, 0xd7, 0xf6, 0x96,
    0xc5, 0xa1, 0x69, 0xc7, 0xec, 0xe2, 0x64, 0x41, 0xc8, 0x1d, 0x5a, 0xb7, 0xd2, 0x57, 0xca,
    0x7a, 0x44, 0x53, 0x61, 0xcb, 0xdd, 0x91, 0xc6, 0x29, 0x86, 0x3b, 0xe2, 0xc6, 0x35, 0xdb,
    0x06, 0xad, 0x2c, 0xab, 0xdb, 0x47, 0xe3, 0x3a, 0x1b, 0xe8, 0xf0, 0x76, 0x6c, 0x93, 0xbc,
    0xde, 0x3f, 0x8a, 0xe1, 0x15, 0xb4, 0xa7, 0xcd, 0xa0, 0x94, 0x1b, 0x5c, 0xd5, 0xc1, 0x31,
    0xea, 0x23, 0xff, 0xbe, 0x0b, 0x7e, 0xcb, 0x8e, 0x69, 0xc1, 0xb7, 0xb0, 0x0d, 0x8e, 0x9f,
    0x04, 0x17, 0x35, 0x01, 0x04, 0x4a, 0xfd, 0xf5, 0x43, 0xdc, 0xa7, 0xdf, 0x25, 0x72, 0x29,
    0x74, 0xc4, 0x8c, 0xc4, 0xb4, 0x9e, 0xde, 0x76, 0x8c, 0xc1, 0xf3, 0x5d, 0x34, 0xab, 0x7c,
    0xec, 0x10, 0x6f, 0x34, 0xf7, 0xa6, 0xcf, 0xb6, 0x76, 0x13, 0x38, 0xe2, 0x7e, 0x43, 0xcc,
    0x41, 0x59, 0x86, 0x38, 0x24, 0x22, 0x3c, 0x2f, 0x8b, 0x68, 0xd9, 0x37, 0x15, 0x0f, 0xb5,
    0x4b, 0x79, 0x6d, 0xf3, 0x63, 0x4c, 0x26, 0x73, 0x02, 0xde, 0x1d, 0x25, 0x14, 0x1e, 0x6c,
    0x3e, 0xa5, 0x4e, 0x1e, 0x0e, 0x42, 0x75, 0x66, 0x4f, 0xfc, 0x33, 0xaa, 0x54, 0x0c, 0x71,
    0x66, 0x86, 0x46, 0x86, 0x68, 0x55, 0x91, 0x2d, 0xdf, 0xb0, 0x44, 0x4d, 0x76, 0xda, 0x6a,
    0x98, 0xdc, 0x18, 0xad, 0x37, 0xbc, 0x8f, 0xde, 0x7f, 0xb7, 0x7e, 0xc0, 0x0d, 0x58, 0xde,
    0x1f, 0x7e, 0x13, 0x7e, 0xa4, 0xcd, 0x72, 0x6b, 0x3b, 0xd4, 0x72, 0xe4, 0x1a, 0x94, 0xbb,
    0x65, 0x1d, 0x3e, 0xca, 0x96, 0xfa, 0x24, 0x6b, 0x74, 0xeb, 0x63, 0xe6, 0xfd, 0x96, 0x63,
    0x3d, 0xdd, 0xca, 0x6a, 0x12, 0x59, 0x2e, 0xb1, 0xe9, 0x13, 0xae, 0x22, 0x8f, 0x9a, 0x97,
    0x92, 0x3e, 0x16, 0x57, 0x57, 0x3b, 0xbf, 0x7b, 0x5d, 0xe2, 0xe3, 0x56, 0x2a, 0xab, 0x0f,
    0x63, 0x4f, 0x74, 0x3e, 0xcb, 0xf7, 0x54, 0x24, 0x52, 0x0e, 0x41, 0x2f, 0x59, 0x6d, 0xfb,
    0xbe, 0xf3, 0xd3, 0xa1, 0x8e, 0xd9, 0xf7, 0xef, 0x3f, 0xd6, 0xab, 0x9c, 0xea, 0x82, 0xc3,
    0x07, 0xb5, 0x2e, 0x2c, 0x0b, 0x5e, 0xbe, 0x7a, 0xf7, 0x29, 0x5d, 0x37, 0xa7, 0xf3, 0xc8,
    0x0a, 0x15, 0xbd, 0x55, 0x36, 0x91, 0x0c, 0x4a, 0xcc, 0xbd, 0xf6, 0x94, 0xd6, 0xdc, 0x70,
    0x5b, 0x53, 0x13, 0xa4, 0xad, 0x33, 0x9f, 0x4c, 0x54, 0x7a, 0x5b, 0xc8, 0x53, 0x1e, 0x71,
    0x94, 0x89, 0x8e, 0xe7, 0x0e, 0x47, 0x31, 0x38, 0xf3, 0xd2, 0x2b, 0x53, 0x3f, 0xb9, 0x91,
    0xd3, 0x87, 0x86, 0xe3, 0x32, 0x6c, 0x56, 0xa2, 0x23, 0xe3, 0x9d, 0xe6, 0xb5, 0x3a, 0x33,
    0xb9, 0xa3, 0x98, 0xaa, 0x35, 0x9c, 0xa3, 0x21, 0x72, 0x73, 0x85, 0x5d, 0x8d, 0x8e, 0xc7,
    0xdb, 0xcd, 0x52, 0x2e, 0x63, 0xb6, 0xf2, 0xf9, 0x50, 0xc3, 0xcf, 0xd6, 0x86, 0x12, 0xd3,
    0xb9, 0xbf, 0xc5, 0xd8, 0x16, 0x79, 0x5d, 0x78, 0x13, 0xbf, 0x2e, 0xf3, 0x09, 0x0c, 0xd4,
    0x59, 0x4f, 0x40, 0xc4, 0xba, 0xb0, 0x18, 0xc8, 0x6d, 0x42, 0x68, 0x96, 0x9e, 0x9b, 0x69,
    0x30, 0x99, 0x82, 0x70, 0x68, 0xe9, 0xae, 0xa3, 0xfc, 0xe1, 0xe8, 0xba, 0xf6, 0x07, 0xfa,
    0xfc, 0x41, 0xf2, 0x87, 0xb1, 0xed, 0x65, 0xf9, 0xc7, 0x3b, 0x74, 0xf9, 0xa0, 0x0e, 0x16,
    0xca, 0x9b, 0xd8, 0x3f, 0x14, 0x74, 0xa5, 0x08, 0x96, 0x26, 0x8e, 0x22, 0x6c, 0x68, 0x88,
    0x08, 0x48, 0x9d, 0xb9, 0xe9, 0x6e, 0x3e, 0x3e, 0x93, 0xee, 0xa4, 0x32, 0xe9, 0xc2, 0x9e,
    0x6b, 0xee, 0xae, 0x69, 0xde, 0x9d, 0x47, 0x23, 0x27, 0x21, 0x38, 0xbe, 0x2a, 0x0c, 0x1b,
    0xee, 0x3f, 0x36, 0x43, 0x9c, 0x18, 0x62, 0x6c, 0x8f, 0xeb, 0x61, 0x3a, 0x5e, 0xba, 0xd1,
    0x55, 0xf5, 0x09, 0x6c, 0x18, 0xdf, 0xcd, 0x49, 0xfa, 0xa1, 0x78, 0x36, 0x5d, 0xe1, 0x99,
    0xaa, 0x37, 0x89, 0x82, 0xea, 0xa1, 0x0f, 0xd0, 0x9a, 0x74, 0xd9, 0xba, 0xf2, 0x15, 0xd1,
    0x61, 0xc1, 0x3a, 0xf1, 0x12, 0x32, 0xac, 0x53, 0xeb, 0x69, 0x83, 0xfc, 0xf9, 0xb2, 0xf1,
    0x2f, 0x1b, 0x4a, 0x9f, 0x34, 0xe2, 0xfb, 0x86, 0x65, 0xd2, 0x5a, 0x34, 0x6d, 0xed, 0xba,
    0x34, 0x31, 0x02, 0xa5, 0x65, 0xe2, 0x14, 0x87, 0x5e, 0x64, 0x81, 0xe1, 0x10, 0x24, 0x86,
    0xf6, 0x99, 0xc2, 0x80, 0x2b, 0xb0, 0x9f, 0xc7, 0x7c, 0x3b, 0x91, 0x0d, 0xc5, 0x0a, 0xc3,
    0x3b, 0xc5, 0x08, 0x42, 0xb1, 0x8f, 0xc7, 0xfa, 0x95, 0xfb, 0x7e, 0x84, 0xfb, 0x83, 0x03,
    0x24, 0x9d, 0x0b, 0x4b, 0x0b, 0x88, 0xc4, 0xa0, 0xeb, 0xb6, 0xd7, 0x89, 0x51, 0x68, 0xd5,
    0x1c, 0xd5, 0x22, 0x9d, 0xd2, 0x08, 0x6a, 0x7d, 0x82, 0x6c, 0x7a, 0x77, 0xaf, 0x1e, 0x36,
    0xe1, 0xe8, 0xee, 0x5d, 0x9c, 0x3d, 0x4e, 0x17, 0xbd, 0xbf, 0x7f, 0x7f, 0x1a, 0x75, 0x79,
    0x0e, 0xda, 0xf2, 0x1a, 0x75, 0x1d, 0x22, 0xe9, 0x40, 0x2b, 0x99, 0x82, 0x62, 0xc2, 0x8f,
    0xe8, 0xc7, 0x8a, 0xba, 0x0a, 0xc9, 0xb7, 0xf0, 0xe8, 0xaa, 0xca, 0x76, 0xfa, 0x8d, 0x24,
    0x3e, 0x92, 0x70, 0x79, 0x11, 0xc9, 0x0b, 0x61, 0xa9, 0x4a, 0x5e, 0xfc, 0x0e, 0x36, 0x78,
    0xb6, 0x3e, 0x84, 0x25, 0x23, 0x9e, 0x03, 0xda, 0x19, 0x26, 0x7a, 0xdd, 0xe6, 0x8e, 0x2c,
    0x90, 0xbe, 0xf7, 0x13, 0xaa, 0x57, 0x65, 0x81, 0x6e, 0xf8, 0xa5, 0x0c, 0x0a, 0x41, 0xf8,
    0x72, 0x05, 0x85, 0xc0, 0x34, 0xdb, 0x92, 0xc7, 0xc9, 0x5d, 0x0c, 0x1c, 0x33, 0x1d, 0xdd,
    0x1d, 0x3e, 0x61, 0x0e, 0x4d, 0x29, 0x05, 0x47, 0x0e, 0xd3, 0xc4, 0xd9, 0x33, 0x34, 0xd8,
    0xbf, 0x58, 0xee, 0x48, 0x75, 0xfd, 0x95, 0x8b, 0xa5, 0x48, 0xaa, 0x1c, 0xba, 0x9a, 0x91,
    0x06, 0x3c, 0xa9, 0x33, 0x75, 0x60, 0xc7, 0x1c, 0x2d, 0x8a, 0x0d, 0x5f, 0xce, 0x16, 0x86,
    0x6f, 0x4a, 0x6a, 0xc3, 0xca, 0xba, 0x05, 0xb4, 0x44, 0x73, 0x3f, 0x1b, 0xcc, 0x47, 0x97,
    0x65, 0x59, 0x2a, 0x57, 0xf6, 0x4c, 0x41, 0x87, 0x74, 0x9a, 0x4e, 0xda, 0x99, 0x4f, 0x59,
    0xe9, 0xfe, 0x92, 0xf8, 0xdf, 0x67, 0xd2, 0x3e, 0xf8, 0x28, 0x3e, 0x3b, 0x73, 0x49, 0x8a,
    0x7f, 0xfb, 0xe5, 0x99, 0xfe, 0x0b, 0xc5, 0xf4, 0xc5, 0xab, 0x5a, 0xcb, 0x9a, 0x75, 0xf7,
    0x26, 0xaf, 0xc6, 0xb0, 0xa6, 0x77, 0x3e, 0x15, 0x02, 0x09, 0x2b, 0x1c, 0x09, 0xa3, 0xd4,
    0x67, 0x35, 0x29, 0x85, 0xf4, 0xeb, 0x18, 0x18, 0x91, 0xd3, 0xf9, 0x7d, 0xaf, 0x61, 0x92,
    0xf8, 0x45, 0x5d, 0xbc, 0x14, 0x0a, 0xb9, 0xd4, 0x31, 0xd5, 0x61, 0xef, 0x58, 0x97, 0xe9,
    0xbc, 0xe3, 0x91, 0xaf, 0xe3, 0xf9, 0x3d, 0x24, 0x46, 0xa9, 0xde, 0x54, 0x01, 0x9a, 0x1e,
    0x1a, 0x92, 0x99, 0x86, 0x95, 0x95, 0xa6, 0xd0, 0x96, 0xf0, 0xd2, 0xef, 0x80, 0x0a, 0xf9,
    0xdd, 0x18, 0xf9, 0x8d, 0x5f, 0xfa, 0x3c, 0x80, 0xb2, 0xf3, 0x3c, 0x17, 0x6a, 0xfe, 0x53,
    0x42, 0x05, 0x51, 0x45, 0x12, 0x46, 0xae, 0x72, 0x63, 0x36, 0xb0, 0x4d, 0x13, 0x94, 0x2a,
    0x3a, 0x9a, 0x5a, 0xa7, 0x57, 0x49, 0xf7, 0xd8, 0x8e, 0x42, 0x4b, 0x9d, 0xab, 0x24, 0x2a,
    0xfa, 0x82, 0x25, 0x6b, 0xfe, 0x53, 0x3e, 0xcb, 0x84, 0x9d, 0xa8, 0xd3, 0x67, 0x31, 0x5d,
    0x75, 0xfa, 0x92, 0x27, 0xeb, 0x63, 0xfa, 0xe5, 0x02, 0x0c, 0xd7, 0x9d, 0xfd, 0x99, 0x02,
    0xfd, 0xfc, 0xc7, 0x6b, 0xbb, 0x94, 0x3e, 0x5e, 0x4f, 0x29, 0x8a, 0x62, 0xee, 0x4b, 0xfe,
    0xd2, 0x68, 0x3b, 0xdd, 0xbd, 0x86, 0xc5, 0xb7, 0xdf, 0x99, 0xc7, 0x79, 0x7c, 0xfc, 0x4b,
    0xb6, 0x7c, 0x3e, 0xfd, 0xc8, 0x81, 0x86, 0x8b, 0x3b, 0x0f, 0x1a, 0xbe, 0xfc, 0xa2, 0x46,
    0x90, 0xcb, 0x76, 0xa0, 0xb8, 0x9f, 0x57, 0x0f, 0xd3, 0x9b, 0x83, 0x1a, 0xf8, 0xb3, 0x1f,
    0x7c, 0x31, 0xdd, 0x13, 0x03, 0x13, 0xe8, 0xde, 0x99, 0xdf, 0xf0, 0xe5, 0x97, 0x35, 0x62,
    0x74, 0x7e, 0x9b, 0x3c, 0xaa, 0x8e, 0x95, 0x74, 0x95, 0x53, 0x8f, 0x08, 0x0e, 0xf9, 0xfb,
    0x5d, 0x3b, 0xe9, 0x4a, 0x17, 0x3d, 0xc9, 0xdd, 0x99, 0xdd, 0x5f, 0xe0, 0x41, 0xf0, 0x53,
    0x5f, 0x2d, 0xa2, 0xfc, 0x3c, 0x8c, 0xf3, 0xfd, 0xf3, 0x1c, 0xb4, 0xfc, 0x4e, 0xba, 0x3d,
    0x64, 0x5b, 0x7f, 0xec, 0xf3, 0x33, 0x69, 0x34, 0xf2, 0x2b, 0xc5, 0x0f, 0xf3, 0xfd, 0x2d,
    0xcb, 0xb0, 0x8d, 0xcd, 0x7b, 0x2d, 0x35, 0x1c, 0x2d, 0x72, 0x1c, 0x32, 0x54, 0xbc, 0xe2,
    0xb5, 0xd7, 0x4c, 0xc4, 0xd3, 0xdf, 0x43, 0xcf, 0x82, 0xa5, 0xfe, 0xbe, 0xba, 0x7a, 0x7e,
    0x7d, 0x89, 0x13, 0xbe, 0x79, 0x5c, 0xdb, 0xc1, 0x83, 0xb3, 0x6a, 0xf4, 0x99, 0x2d, 0x62,
    0x56, 0xad, 0xf8, 0xb1, 0xd6, 0x40, 0xf4, 0xee, 0xce, 0xda, 0x59, 0xf3, 0x22, 0x78, 0xd9,
    0x41, 0x7e, 0x27, 0xdd, 0x78, 0x46, 0xf8, 0x71, 0x15, 0xfe, 0x8f, 0x63, 0xe0, 0x04, 0xe6,
    0xe4, 0xf5, 0x4c, 0x4c, 0x1b, 0xc1, 0x57, 0xe9, 0x95, 0xc5, 0x31, 0x6a, 0xd6, 0xca, 0x42,
    0xa5, 0x93, 0xb9, 0xe9, 0x1a, 0x53, 0x33, 0x64, 0xe7, 0x5b, 0xb9, 0xca, 0x95, 0xf8, 0x3d,
    0xc5, 0xbf, 0xbf, 0x60, 0x46, 0xfd, 0x94, 0x7e, 0x9f, 0x31, 0xb7, 0xc6, 0x96, 0xbd, 0x78,
    0xd5, 0xe2, 0xd5, 0x34, 0x1f, 0x3f, 0x69, 0xe9, 0x21, 0xac, 0x6c, 0xd2, 0x5e, 0xcd, 0xf3,
    0xc7, 0x84, 0xa5, 0x9b, 0x9b, 0xd9, 0x84, 0xbd, 0x9a, 0xe8, 0xbd, 0x2d, 0x34, 0x9d, 0xc9,
    0x02, 0xf2, 0xaa, 0x9a, 0x68, 0x47, 0x8b, 0xb8, 0x69, 0xe5, 0x5f, 0x6f, 0x64, 0xf6, 0x41,
    0x78, 0x53, 0xbe, 0xba, 0xeb, 0x19, 0xa9, 0xe1, 0x3e, 0xee, 0x67, 0xf7, 0x8a, 0xe1, 0x16,
    0xf0, 0x8a, 0xf1, 0xa5, 0xa7, 0x4b, 0x4f, 0xd7, 0x0c, 0x31, 0x19, 0xe5, 0x5a, 0x45, 0xe2,
    0x36, 0x1e, 0xde, 0x3d, 0x80, 0x13, 0x7a, 0x72, 0xf9, 0xb5, 0x52, 0xef, 0x9c, 0x7c, 0xed,
    0x1e, 0x77, 0x2a, 0x91, 0xde, 0xeb, 0x0f, 0xdb, 0xfe, 0xe5, 0x69, 0xa7, 0xf9, 0xb4, 0x14,
    0x0f, 0x6b, 0xad, 0xaf, 0xf0, 0xff, 0x83, 0x66, 0x65, 0xb7, 0x1d, 0xf6, 0xb7, 0x8b, 0x77,
    0xf0, 0x19, 0x3f, 0x92, 0xb5, 0xed, 0x85, 0xae, 0x51, 0xcf, 0x1a, 0x82, 0xdb, 0xf6, 0x94,
    0x1e, 0x24, 0xc5, 0x2b, 0xfc, 0x52, 0x9c, 0x14, 0xf3, 0xa5, 0x50, 0xc3, 0xcf, 0xdd, 0x4b,
    0xbb, 0x90, 0x6e, 0x28, 0x18, 0xea, 0xee, 0x9e, 0x2a, 0x87, 0x5b, 0xde, 0xc9, 0x71, 0xeb,
    0x34, 0xff, 0xb0, 0xc1, 0x6b, 0xef, 0xb2, 0xd2, 0x51, 0xb8, 0x33, 0x1d, 0xd1, 0xc7, 0xab,
    0xf4, 0x98, 0x0c, 0xcc, 0xa3, 0xe0, 0x7d, 0x0c, 0xf3, 0x74, 0x71, 0x73, 0xf3, 0xe6, 0x2d,
    0x3b, 0x5b, 0xb6, 0x8b, 0xce, 0xc6, 0xb8, 0x24, 0x95, 0x37, 0x8e, 0xae, 0x2b, 0x96, 0x3e,
    0xb1, 0x13, 0xce, 0xdb, 0x77, 0x4a, 0x7f, 0xee, 0x2a, 0xac, 0xb0, 0xfa, 0x4e, 0xd9, 0xdc,
    0x24, 0xaf, 0xd8, 0x63, 0x75, 0xb9, 0xde, 0x38, 0x87, 0x2c, 0xfc, 0x97, 0x21, 0x24, 0x13,
    0xad, 0xda, 0xf6, 0xfd, 0xf9, 0x0f, 0x43, 0x53, 0xcf, 0xf0, 0xbd, 0x97, 0x1e, 0x42, 0xf9,
    0xb5, 0xcd, 0xed, 0x62, 0xfa, 0x45, 0xb9, 0xb3, 0x2e, 0x51, 0x74, 0xf3, 0x7d, 0x48, 0xa2,
    0xc3, 0x0a, 0xa2, 0xac, 0x64, 0xdc, 0xde, 0x99, 0x8c, 0x08, 0x8f, 0x8d, 0x08, 0x3a, 0x9e,
    0x20, 0x3a, 0x44, 0x70, 0xbc, 0xb9, 0xc9, 0x26, 0x11, 0x1d, 0x4f, 0x22, 0xf6, 0x9f, 0x5a,
    0x16, 0xd3, 0x2f, 0xa4, 0x9d, 0x35, 0x09, 0xc5, 0xbf, 0xc9, 0x4a, 0x88, 0xe6, 0xc0, 0x24,
    0x3b, 0xa8, 0xcd, 0xc6, 0xa9, 0xe0, 0x93, 0xbe, 0x31, 0x9c, 0xdb, 0x73, 0xe7, 0x4c, 0x1c,
    0x27, 0xd2, 0xc1, 0x23, 0x68, 0x79, 0x38, 0x25, 0x5c, 0x54, 0x90, 0x57, 0x8d, 0x3c, 0x8e,
    0x04, 0x9e, 0x0f, 0xd0, 0xb6, 0x70, 0x49, 0x7d, 0x97, 0xd8, 0x63, 0x6f, 0x9d, 0xa0, 0xd1,
    0xc5, 0x10, 0x5a, 0x21, 0x0e, 0x5d, 0x37, 0xcd, 0x84, 0x2d, 0xf7, 0x5d, 0x7a, 0xfb, 0xe8,
    0xbf, 0x6a, 0x08, 0xaf, 0x64, 0xfb, 0x98, 0x0f, 0x5c, 0x6f, 0x3a, 0xf1, 0x40, 0xf8, 0x94,
    0xbc, 0x29, 0x07, 0x24, 0x98, 0xb4, 0x42, 0xa8, 0x65, 0x6f, 0x49, 0x25, 0x31, 0xe7, 0x8b,
    0x59, 0xd8, 0xce, 0x60, 0x7e, 0x0c, 0xb3, 0xca, 0x0a, 0x26, 0xb2, 0x24, 0x36, 0x79, 0x44,
    0xf0, 0x69, 0xc6, 0x36, 0x83, 0xe2, 0x18, 0x12, 0x03, 0x59, 0xc7, 0x36, 0x28, 0x02, 0x56,
    0x3c, 0x5a, 0xb6, 0xb5, 0x9c, 0x00, 0xc7, 0x7b, 0x60, 0x70, 0xa4, 0xf7, 0x67, 0x33, 0xfb,
    0xd0, 0x9e, 0x12, 0x4f, 0x32, 0x85, 0xae, 0x47, 0xb4, 0xdb, 0x64, 0x00, 0x4a, 0x4f, 0xa3,
    0xb4, 0x87, 0x3f, 0x8e, 0xa8, 0x2b, 0xe4, 0xc3, 0xa2, 0xee, 0xb9, 0x1b, 0x83, 0x0a, 0x59,
    0xab, 0xa6, 0x74, 0xe0, 0x77, 0x9d, 0x08, 0xc0, 0xe3, 0x38, 0xe4, 0xe4, 0xac, 0x1c, 0x47,
    0x59, 0x03, 0x0c, 0xa3, 0xd4, 0xca, 0x0b, 0x3e, 0x32, 0x17, 0xb2, 0xc4, 0x5e, 0x7a, 0x13,
    0x22, 0xdc, 0xf5, 0x63, 0x4f, 0x9a, 0xd7, 0x9e, 0xb9, 0xf4, 0x5a, 0x3c, 0x59, 0x29, 0xb3,
    0x84, 0x1e, 0x9f, 0x45, 0x78, 0x44, 0x48, 0x6e, 0x67, 0x69, 0x0d, 0xba, 0xc6, 0xcc, 0x9d,
    0xe6, 0x89, 0xb7, 0xa8, 0x9f, 0x48, 0x5a, 0x47, 0xd0, 0xf2, 0xd2, 0x2c, 0xeb, 0xc5, 0xc8,
    0xaa, 0x34, 0xb4, 0x44, 0x1c, 0x98, 0x28, 0x35, 0xe3, 0x3b, 0x5f, 0xb4, 0xc5, 0x0c, 0x76,
    0x04, 0xd6, 0x3b, 0xb9, 0x2f, 0x3c, 0xed, 0x5d, 0x73, 0x0a, 0xc4, 0xc8, 0xc2, 0xb5, 0x8d,
    0xbc, 0xc1, 0xe6, 0x68, 0x4e, 0xd3, 0x3c, 0x9a, 0x8e, 0xf2, 0xc5, 0x93, 0x4b, 0x27, 0x7a,
    0xb6, 0xbf, 0x6c, 0x3c, 0xba, 0x15, 0xa6, 0x58, 0x4a, 0xbf, 0x1a, 0xa1, 0xf3, 0x54, 0x78,
    0x13, 0x25, 0xa1, 0xaa, 0xd0, 0xec, 0x95, 0x2a, 0x0c, 0xbf, 0x66, 0xcf, 0x41, 0x8d, 0x47,
    0x92, 0x89, 0xe1, 0xe8, 0x5f, 0x36, 0x14, 0xc7, 0x00, 0x11, 0x84, 0xc3, 0xfc, 0x4e, 0x59,
    0x8c, 0xc1, 0xe8, 0x8b, 0x35, 0xd1, 0x55, 0x02, 0xe8, 0xa8, 0xd2, 0x49, 0xc3, 0xb4, 0x6e,
    0xee, 0x4c, 0x27, 0xb6, 0xb6, 0xa1, 0x8d, 0x98, 0x4a, 0xae, 0xad, 0xf4, 0x75, 0x45, 0xbd,
    0x0d, 0x13, 0x4f, 0x05, 0x0a, 0x9c, 0x0f, 0x74, 0xcd, 0x50, 0x5d, 0x9d, 0xda, 0xdc, 0x6c,
    0x5c, 0x7e, 0xb1, 0xd4, 0x2b, 0x84, 0x94, 0x55, 0x2d, 0x68, 0xd5, 0xfb, 0xde, 0x81, 0x16,
    0xcb, 0x81, 0x29, 0x01, 0xb2, 0x10, 0x7a, 0xef, 0x86, 0xef, 0x03, 0xbd, 0xa2, 0x12, 0x85,
    0x97, 0x4b, 0x60, 0xe0, 0xe8, 0xfc, 0x41, 0x53, 0x64, 0xcc, 0x78, 0x09, 0x10, 0x79, 0x06,
    0xbc, 0x65, 0x5d, 0xa5, 0x10, 0x33, 0x04, 0xf2, 0xd2, 0xb0, 0xae, 0xed, 0x31, 0x66, 0x2a,
    0xa6, 0x22, 0x99, 0xbd, 0xf3, 0xf8, 0xdc, 0xb9, 0x9d, 0x95, 0x3b, 0xf7, 0xc9, 0x44, 0x9e,
    0x79, 0xfc, 0xbe, 0x38, 0xf5, 0x7b, 0x97, 0xd4, 0x1f, 0xd3, 0x5d, 0x48, 0x35, 0xdb, 0x72,
    0x3d, 0x49, 0xf5, 0x7d, 0x0d, 0xef, 0xb3, 0xdd, 0x21, 0xb7, 0xd2, 0x43, 0x2d, 0xec, 0x98,
    0xbf, 0x8b, 0x0d, 0x7c, 0x32, 0x37, 0xdd, 0x00, 0x29, 0xf1, 0x93, 0x94, 0x65, 0x9a, 0x1e,
    0x4e, 0xf0, 0xef, 0xcc, 0x22, 0xe9, 0x27, 0x55, 0x49, 0x81, 0x78, 0xa2, 0x95, 0x19, 0x7f,
    0x89, 0x50, 0xeb, 0xe3, 0x4e, 0x23, 0xf3, 0x21, 0x19, 0x64, 0x90, 0xe2, 0xe1, 0xa4, 0x7c,
    0x7a, 0x14, 0x09, 0x12, 0xf2, 0xd2, 0xce, 0x21, 0xf9, 0x52, 0x71, 0x27, 0xd4, 0xf2, 0x73,
    0xea, 0xe4, 0x4b, 0x5b, 0x19, 0xe2, 0x5b, 0x49, 0x27, 0x4f, 0x2d, 0xe1, 0xbc, 0xfd, 0x4c,
    0x6d, 0xe8, 0x6e, 0xba, 0x68, 0xa0, 0xdd, 0x6d, 0x2f, 0xec, 0x4c, 0x9e, 0x78, 0x41, 0xb6,
    0x59, 0xa7, 0x98, 0x1b, 0xe2, 0x08, 0x3e, 0xed, 0x7c, 0xdc, 0x7e, 0xb2, 0x25, 0x2a, 0xd2,
    0xd2, 0x56, 0x67, 0x61, 0xeb, 0xe3, 0xc7, 0x50, 0xcb, 0xbc, 0x02, 0xb1, 0xe3, 0x71, 0xf3,
    0x96, 0xfc, 0x27, 0x9b, 0x18, 0x5d, 0x80, 0x94, 0xff, 0x3e, 0x2c, 0xeb, 0xe2, 0xcd, 0xc6,
    0x9b, 0xcf, 0xb7, 0x0a, 0x8f, 0x80, 0xf8, 0xfb, 0xc8, 0x92, 0x07, 0x3a, 0x95, 0x6e, 0xd9,
    0x41, 0xec, 0x8d, 0x99, 0x9e, 0x24, 0xf1, 0x24, 0x73, 0xd6, 0xa3, 0xde, 0xa4, 0x3e, 0xd8,
    0x66, 0x48, 0xf2, 0x33, 0x0f, 0x8e, 0xe3, 0xbd, 0xf1, 0x65, 0xf8, 0x08, 0xc7, 0x89, 0x8f,
    0x26, 0xbd, 0x28, 0x49, 0xee, 0x96, 0xc2, 0x87, 0xe3, 0xde, 0x67, 0x84, 0x69, 0x5e, 0x03,
    0x7d, 0x93, 0x43, 0x5c, 0x3b, 0x68, 0x6e, 0xf1, 0x90, 0xef, 0x69, 0xd6, 0x0e, 0x77, 0x61,
    0x74, 0xf2, 0x4c, 0x19, 0x7c, 0x62, 0x41, 0xfa, 0x5f, 0x71, 0xf1, 0x37, 0x5e, 0x71, 0xf1,
    0x3a, 0x2e, 0x7e, 0xdc, 0x06, 0x1b, 0xd9, 0x4e, 0xad, 0x3a, 0x33, 0x74, 0x4b, 0x33, 0x23,
    0xb9, 0x3f, 0x4e, 0x3a, 0xaa, 0x47, 0xc0, 0x57, 0x8e, 0xb7, 0xbe, 0xb6, 0xd4, 0xa5, 0x32,
    0x5d, 0xca, 0xfe, 0x71, 0xad, 0x5b, 0x49, 0x06, 0x00, 0xf5, 0x0c, 0x26, 0x7c, 0x42, 0x58,
    0x8e, 0x9c, 0x32, 0x9f, 0x6b, 0x34, 0x2b, 0xac, 0x03, 0x43, 0x3f, 0x56, 0x26, 0x3f, 0x2e,
    0x7e, 0x06, 0xf1, 0xf5, 0xb0, 0x7e, 0x43, 0x59, 0x32, 0xeb, 0xa4, 0x47, 0x1e, 0x04, 0x05,
    0xb2, 0xcf, 0x50, 0x36, 0x09, 0xb3, 0x7e, 0xab, 0x78, 0xfc, 0x34, 0x64, 0x91, 0xb1, 0xcf,
    0x1e, 0x82, 0xd2, 0x7e, 0xcd, 0xf3, 0x90, 0xa6, 0xf8, 0xcd, 0x41, 0x1a, 0xe8, 0x9a, 0xe7,
    0x70, 0xda, 0xff, 0xa6, 0x13, 0x5d, 0xef, 0xbe, 0xfa, 0xdf, 0xfd, 0xf5, 0xb9, 0x96, 0xae,
    0x23, 0xd7, 0x9d, 0x3a, 0x3f, 0x7f, 0xf8, 0x30, 0x04, 0x1d, 0x6e, 0xde, 0xdf, 0x04, 0x0d,
    0x83, 0xba, 0x70, 0xf0, 0xf7, 0xfd, 0x40, 0x1b, 0x7f, 0x30, 0x1c, 0x67, 0xae, 0x3b, 0x1f,
    0xee, 0x7c, 0xfc, 0x98, 0x49, 0xa9, 0x8b, 0xee, 0xec, 0x8b, 0xb3, 0x25, 0x7c, 0xdc, 0x0e,
    0x12, 0x9e, 0xfd, 0x01, 0xf4, 0x63, 0x06, 0x8c, 0xce, 0xc1, 0x48, 0x1f, 0x8c, 0xd7, 0xb9,
    0x45, 0x86, 0x80, 0xac, 0x78, 0x0b, 0xb1, 0x72, 0x7e, 0x36, 0x9f, 0xe4, 0x8d, 0x3f, 0x08,
    0xfc, 0x1f, 0xeb, 0xb8, 0x26, 0xf6, 0xbc, 0x84, 0x14, 0x57, 0xb8, 0x30, 0x46, 0xf1, 0x39,
    0xaf, 0x75, 0xc5, 0x70, 0x59, 0x16, 0x43, 0xf8, 0xeb, 0x27, 0x47, 0xf1, 0xd4, 0xfd, 0x47,
    0xfc, 0x2d, 0x7c, 0xcc, 0xe0, 0x4e, 0x8c, 0xb9, 0x8e, 0x6b, 0xee, 0x9e, 0x1a, 0x9c, 0xed,
    0xa7, 0x32, 0xf4, 0x73, 0xad, 0x10, 0x57, 0x00, 0x67, 0x64, 0xcf, 0x4d, 0x0d, 0xaf, 0xfd,
    0x60, 0xe9, 0x41, 0x9d, 0x3e, 0xa4, 0xd5, 0x0b, 0x44, 0xaf, 0x0c, 0xee, 0x7f, 0x8f, 0x64,
    0x6b, 0x5c, 0x03, 0x59, 0x33, 0x3c, 0xc4, 0xeb, 0x6d, 0xd1, 0x62, 0x37, 0x66, 0x47, 0x2a,
    0xdb, 0xaa, 0xb4, 0x0b, 0xad, 0x9a, 0x65, 0x0f, 0x59, 0xcd, 0x76, 0x0c, 0x72, 0x74, 0x2e,
    0xbf, 0xf5, 0x4c, 0x76, 0x07, 0xfd, 0x46, 0xc5, 0xa5, 0x42, 0xe4, 0x89, 0x6d, 0x51, 0xa7,
    0x46, 0x91, 0xf2, 0xab, 0x62, 0xe9, 0x0b, 0x25, 0x40, 0xe7, 0x9b, 0xb7, 0xbf, 0x7c, 0xb1,
    0x6d, 0x40, 0xd5, 0xb4, 0x37, 0xa5, 0xc0, 0xb3, 0xc9, 0xdc, 0x7c, 0x53, 0x24, 0xcf, 0xa0,
    0x90, 0x29, 0x9b, 0xa6, 0x3d, 0x7c, 0x23, 0x7c, 0x0f, 0x8b, 0x78, 0xa6, 0x3b, 0x0e, 0x52,
    0xd8, 0xe4, 0xed, 0x2f, 0xa2, 0x60, 0x17, 0xdc, 0x58, 0x0e, 0xf5, 0x99, 0x0e, 0xeb, 0x73,
    0x2f, 0x94, 0xa5, 0x3d, 0x57, 0xe6, 0x0e, 0x2e, 0xdd, 0x9f, 0xbf, 0x58, 0x5f, 0xac, 0x3f,
    0xf8, 0xc3, 0x75, 0x68, 0x03, 0x4f, 0x45, 0x33, 0x21, 0x02, 0x69, 0xa9, 0x51, 0xaf, 0x92,
    0x3e, 0xd5, 0x55, 0x26, 0x70, 0xd8, 0xb0, 0x2a, 0xea, 0x50, 0x35, 0x2c, 0xea, 0x21, 0x63,
    0x68, 0xa9, 0xf9, 0x37, 0xff, 0xc6, 0x55, 0x87, 0xf7, 0xca, 0x50, 0xb4, 0x2b, 0xf6, 0x9a,
    0xb6, 0x4c, 0xa0, 0x2d, 0x17, 0x7e, 0xd1, 0xa0, 0x32, 0x00, 0x36, 0x44, 0xf1, 0x47, 0x97,
    0x0a, 0x3e, 0x12, 0x32, 0x07, 0x5f, 0x69, 0x1a, 0xba, 0xf3, 0x78, 0x16, 0xa3, 0x4c, 0x06,
    0x81, 0x4d, 0x1f, 0xdf, 0x36, 0xe4, 0x37, 0xae, 0xd8, 0x64, 0x31, 0x3d, 0x9a, 0x75, 0xa8,
    0x60, 0x03, 0x3d, 0x90, 0x79, 0xa8, 0xc6, 0x47, 0x91, 0x9a, 0xef, 0xfc, 0xc3, 0x5d, 0x46,
    0x49, 0x64, 0x54, 0x52, 0x02, 0x56, 0x4b, 0xba, 0x79, 0x25, 0x6a, 0xd6, 0xcf, 0x48, 0x2b,
    0xe4, 0xe2, 0x43, 0xc5, 0x2b, 0xa5, 0x58, 0x45, 0x0a, 0x11, 0xe1, 0x4a, 0x8f, 0x68, 0x16,
    0xd5, 0x34, 0x64, 0x54, 0xea, 0x4d, 0x80, 0x9e, 0x72, 0xb8, 0x91, 0x4a, 0x2b, 0xf0, 0xd1,
    0x0e, 0x16, 0x33, 0xf8, 0x93, 0xab, 0xda, 0x53, 0x24, 0xf1, 0x79, 0x36, 0x28, 0x0c, 0x0c,
    0x0f, 0xd6, 0x62, 0x78, 0x3e, 0x31, 0xd7, 0x1b, 0x9f, 0xf0, 0x27, 0x98, 0xdb, 0x74, 0x34,
    0xd8, 0xce, 0x5e, 0xe7, 0x36, 0x7e, 0x6e, 0xeb, 0x18, 0x32, 0x1e, 0x35, 0xb1, 0x8f, 0x3f,
    0x5b, 0xe9, 0xae, 0x89, 0x96, 0x3e, 0x8c, 0xdc, 0xf2, 0x1e, 0xca, 0xd8, 0xa4, 0x1a, 0x4e,
    0xd3, 0x4f, 0xed, 0xc5, 0x53, 0xf0, 0x7c, 0x06, 0x5f, 0x7b, 0xa0, 0xec, 0x95, 0xe7, 0x13,
    0x95, 0x1e, 0x8c, 0x14, 0x57, 0x1f, 0xb1, 0xf9, 0x64, 0xa9, 0x34, 0x09, 0x16, 0xaa, 0x9f,
    0xf2, 0x8d, 0x71, 0xa5, 0x68, 0xfa, 0x15, 0x8c, 0xbb, 0xf6, 0xf6, 0xf1, 0xe7, 0x79, 0x3b,
    0xdf, 0x02, 0xcd, 0x50, 0xeb, 0x20, 0xcd, 0x11, 0x30, 0x75, 0x4f, 0xef, 0x0f, 0x18, 0xa5,
    0x3f, 0xae, 0xcd, 0xde, 0x9b, 0x68, 0x9a, 0x26, 0x95, 0x1f, 0x5b, 0xbe, 0x2b, 0x5b, 0x71,
    0x2b, 0xdd, 0xc0, 0xe5, 0xd3, 0x9e, 0xc9, 0xcf, 0x22, 0xe3, 0x21, 0x98, 0x54, 0xf1, 0xcc,
    0xff, 0xbb, 0x0a, 0x9c, 0x46, 0x71, 0xb9, 0x62, 0xda, 0xd9, 0x88, 0xa3, 0x5b, 0x78, 0x0c,
    0x62, 0x4a, 0xf3, 0xe9, 0x4b, 0xd7, 0xa7, 0xfd, 0xd8, 0xce, 0xe4, 0xf5, 0xf1, 0x80, 0xf9,
    0x22, 0x51, 0xea, 0xc3, 0x06, 0xad, 0x27, 0x03, 0xc2, 0x4d, 0x62, 0x87, 0x89, 0x3a, 0x45,
    0x80, 0xd2, 0x82, 0xef, 0x07, 0x0e, 0x72, 0x98, 0x49, 0xb0, 0xd0, 0x95, 0x3d, 0x9b, 0xe8,
    0xd9, 0x6d, 0x51, 0x31, 0x97, 0x6e, 0xf9, 0xf4, 0x7b, 0x71, 0xa2, 0x4e, 0x1f, 0x81, 0x5d,
    0x5f, 0xcf, 0x54, 0x05, 0x1d, 0x8e, 0xbb, 0xe4, 0x46, 0x08, 0x71, 0x1e, 0xa9, 0x2a, 0x81,
    0xc8, 0x4b, 0x99, 0xd9, 0xf7, 0x91, 0x41, 0x81, 0xe3, 0x99, 0xb7, 0xfd, 0xf4, 0x2a, 0x77,
    0xb4, 0x54, 0x48, 0xe1, 0xb3, 0xde, 0x32, 0x70, 0x98, 0x27, 0xea, 0x8d, 0x31, 0x99, 0x4f,
    0x11, 0x90, 0x1a, 0x00, 0x0d, 0x8b, 0x9a, 0x28, 0x85, 0x91, 0x7a, 0xf4, 0x09, 0xc8, 0xa7,
    0x7d, 0xa0, 0x7d, 0x2d, 0x28, 0xc4, 0x8f, 0x9e, 0x02, 0x28, 0x7e, 0x4a, 0x2a, 0xcc, 0xf4,
    0x22, 0xda, 0x57, 0xb7, 0xc9, 0x55, 0x8b, 0x3a, 0x18, 0xe8, 0x53, 0xf4, 0xe5, 0x63, 0xca,
    0x6a, 0xe6, 0x88, 0x19, 0xfb, 0xf8, 0x53, 0x53, 0xca, 0x82, 0xae, 0x1d, 0x9b, 0x6c, 0x61,
    0xf9, 0x59, 0x57, 0x22, 0x86, 0x70, 0x8c, 0x8b, 0xa6, 0x45, 0xc8, 0xcb, 0xb0, 0x90, 0xcd,
    0xdb, 0xda, 0x92, 0x27, 0xf8, 0x55, 0x9e, 0xe1, 0x41, 0x3a, 0x5d, 0xa4, 0x67, 0x4a, 0x98,
    0x83, 0x58, 0x36, 0xe9, 0x9a, 0x89, 0x5a, 0x72, 0x57, 0xf0, 0x9d, 0x57, 0x5d, 0x95, 0x4d,
    0xe4, 0x10, 0x71, 0x7f, 0x8f, 0x87, 0x33, 0xef, 0x4c, 0xa4, 0x80, 0x7a, 0x22, 0x58, 0xf9,
    0xbb, 0x90, 0x38, 0x93, 0x0c, 0xe0, 0xde, 0x76, 0x67, 0x84, 0x20, 0x32, 0xd6, 0x6d, 0x72,
    0xf0, 0xc4, 0x0b, 0x1f, 0x01, 0x03, 0xd4, 0x65, 0x39, 0x07, 0xae, 0x7e, 0x85, 0x0e, 0x87,
    0x15, 0x03, 0x1f, 0xa1, 0xe5, 0x5c, 0x70, 0x59, 0x0b, 0x97, 0x69, 0xf5, 0xd3, 0x76, 0xe5,
    0x65, 0xd7, 0x5a, 0x72, 0x43, 0xf5, 0xc2, 0x86, 0x6f, 0x94, 0x91, 0x3e, 0xd3, 0xdf, 0xd1,
    0x70, 0x3c, 0xf3, 0xaf, 0x29, 0x4a, 0x5b, 0x57, 0xd8, 0xfd, 0x90, 0x6c, 0x6a, 0xc8, 0xb4,
    0x3c, 0x81, 0x32, 0x5a, 0x28, 0xa5, 0x5b, 0xe1, 0x58, 0x87, 0xbe, 0x8f, 0x5d, 0xe9, 0x5e,
    0x62, 0xd9, 0x56, 0x08, 0x49, 0x6f, 0x3d, 0x3a, 0x86, 0x3c, 0xc7, 0xf0, 0xa7, 0xa5, 0x38,
    0x47, 0x92, 0x8e, 0xf7, 0x24, 0xb3, 0x9d, 0x6e, 0x7c, 0x60, 0xfd, 0x7a, 0xe4, 0xd9, 0x4e,
    0xe3, 0x23, 0xc3, 0xd4, 0x28, 0x46, 0xdc, 0xce, 0xa7, 0xc2, 0x23, 0x8b, 0xf1, 0x0c, 0x52,
    0x26, 0x4f, 0xb8, 0x2a, 0x4e, 0x0b, 0x61, 0x3a, 0x53, 0xf1, 0x3c, 0xe0, 0xbf, 0xca, 0xc7,
    0x01, 0xe4, 0x7a, 0x9a, 0x3f, 0x59, 0x29, 0x17, 0x0e, 0x68, 0xf2, 0x04, 0x7b, 0x4c, 0x07,
    0x46, 0xae, 0x3f, 0x13, 0xd4, 0xbe, 0x52, 0x2e, 0x3d, 0xc8, 0xa7, 0x1f, 0xc4, 0x7a, 0x7e,
    0x85, 0x82, 0xb7, 0xcd, 0x6d, 0xd0, 0xac, 0x3d, 0x47, 0x30, 0xf8, 0xa4, 0x13, 0xdc, 0x2c,
    0xb9, 0x3e, 0x7e, 0xd6, 0x53, 0x05, 0x11, 0x66, 0xa5, 0x4f, 0x58, 0x42, 0xdf, 0x41, 0x9c,
    0x1d, 0x79, 0x27, 0x48, 0x62, 0xec, 0x52, 0x7d, 0xd8, 0x00, 0xef, 0x4f, 0xb9, 0x78, 0x84,
    0x95, 0x47, 0xf7, 0x05, 0xc4, 0xda, 0xc1, 0x80, 0xa4, 0x47, 0x4b, 0xab, 0xd9, 0x02, 0x16,
    0x2d, 0x1b, 0x36, 0xf2, 0xd9, 0xd9, 0xbc, 0x6f, 0x1a, 0x83, 0x18, 0xb0, 0xb9, 0xbf, 0x69,
    0xd8, 0x4f, 0xb9, 0xf4, 0xbb, 0xf7, 0x7e, 0xb6, 0x51, 0x8e, 0x5c, 0x4d, 0xaf, 0x63, 0x8c,
    0x9c, 0xc1, 0xf9, 0xf9, 0x75, 0x8c, 0xef, 0x39, 0xc6, 0xe9, 0xc1, 0x1a, 0xda, 0x7a, 0x47,
    0x4e, 0x5b, 0xf6, 0xd9, 0xcc, 0xb8, 0x56, 0x5d, 0xfd, 0x7b, 0xdd, 0xb1, 0x43, 0xe4, 0xbd,
    0xd8, 0xb1, 0x1b, 0x76, 0x04, 0xce, 0x6e, 0xf2, 0x86, 0x1d, 0x3f, 0xb8, 0x2f, 0x62, 0xbf,
    0xa7, 0x7b, 0xb4, 0xbc, 0xee, 0xd7, 0xf7, 0x1f, 0xe5, 0x74, 0x7b, 0xf6, 0xeb, 0x7e, 0x7d,
    0x31, 0x4e, 0xd7, 0x3c, 0x5f, 0xf7, 0xeb, 0xfb, 0x8e, 0x71, 0xba, 0xde, 0xb9, 0xe6, 0x91,
    0xb2, 0x5f, 0x9f, 0x1b, 0xee, 0xa8, 0xec, 0x5d, 0x9a, 0x3f, 0x1d, 0xa0, 0x59, 0x24, 0x31,
    0xb7, 0x17, 0x8b, 0xdb, 0xdb, 0xfa, 0x33, 0xa6, 0xe4, 0xf3, 0x9f, 0x22, 0x9b, 0x5a, 0x35,
    0xca, 0x24, 0xe0, 0x33, 0x11, 0xc7, 0x13, 0x4a, 0xaa, 0xe3, 0x43, 0x06, 0xb7, 0x87, 0x3b,
    0x42, 0x8f, 0xf7, 0x50, 0x48, 0x72, 0x9c, 0x4c, 0xc2, 0xac, 0xf0, 0x76, 0x4f, 0xe2, 0x33,
    0x8c, 0x46, 0x20, 0xd2, 0xc9, 0x23, 0x61, 0x0c, 0xbc, 0xbf, 0x9f, 0x2a, 0x4d, 0x4c, 0xde,
    0xa9, 0xbd, 0xa0, 0xd8, 0xdb, 0x7c, 0x86, 0x4c, 0x9a, 0x03, 0x12, 0x9d, 0xb4, 0x7b, 0x6c,
    0x32, 0xde, 0xe8, 0xea, 0xfe, 0xa7, 0xcf, 0x91, 0xef, 0xa4, 0x1e, 0x3b, 0x88, 0xc4, 0xcf,
    0x47, 0x9f, 0xfb, 0x3e, 0x0b, 0x93, 0x9f, 0xbe, 0xcf, 0xb2, 0xc9, 0x0f, 0xb9, 0xa4, 0x3d,
    0xb9, 0xbf, 0xbb, 0xd4, 0x8d, 0x9b, 0x79, 0xae, 0x37, 0x44, 0x9f, 0xf2, 0x62, 0x37, 0xe9,
    0x70, 0xa6, 0x83, 0x9d, 0x3b, 0x5d, 0x13, 0xa6, 0xa3, 0xb6, 0x1b, 0xda, 0x9b, 0xe4, 0xe1,
    0xa0, 0xc9, 0xdd, 0xd3, 0xd7, 0x31, 0x4b, 0x06, 0xc0, 0x20, 0xdf, 0x3c, 0x9d, 0x33, 0xec,
    0xcf, 0x64, 0xfa, 0xa5, 0x16, 0x9d, 0xb0, 0x90, 0x18, 0x78, 0x4e, 0xf3, 0xf8, 0xc8, 0x5e,
    0x8f, 0x3f, 0x8b, 0x19, 0xa2, 0x20, 0xc3, 0x2b, 0xf1, 0xfb, 0x9b, 0xa7, 0x97, 0xbf, 0xde,
    0xd8, 0xa3, 0x83, 0xe7, 0x99, 0xef, 0x70, 0x9e, 0xb2, 0xae, 0x27, 0xbe, 0x47, 0xfe, 0x20,
    0x17, 0x75, 0x9c, 0xdd, 0x97, 0xa7, 0x6d, 0xf5, 0x43, 0xf5, 0x60, 0xee, 0xb8, 0xf6, 0x24,
    0x28, 0xa5, 0x4f, 0x77, 0x5d, 0xe8, 0x5d, 0x7f, 0xee, 0x92, 0x9e, 0x8e, 0x54, 0x67, 0x37,
    0xb0, 0x2c, 0x9e, 0x3d, 0x05, 0x9c, 0x88, 0xab, 0xb9, 0x45, 0x46, 0x57, 0x51, 0x2d, 0xe6,
    0xfa, 0xe6, 0xad, 0xf2, 0x9f, 0x2f, 0xd6, 0x5f, 0x31, 0x20, 0x0e, 0xe8, 0x25, 0x84, 0x84,
    0x84, 0x22, 0x43, 0xd4, 0x9d, 0x36, 0x15, 0x78, 0xb6, 0xfc, 0x69, 0x86, 0xd9, 0x37, 0xfa,
    0xdb, 0x88, 0xb8, 0x87, 0xa9, 0x43, 0x47, 0x46, 0x44, 0xd0, 0x29, 0x61, 0x0c, 0x15, 0x49,
    0x38, 0x9b, 0xea, 0x44, 0xbd, 0xb5, 0x2d, 0x82, 0x8c, 0x14, 0x8b, 0x9d, 0xe0, 0x50, 0xff,
    0xf1, 0xeb, 0x40, 0xfa, 0x10, 0x72, 0x26, 0x52, 0xa0, 0xc3, 0x84, 0xac, 0x4c, 0xee, 0x86,
    0x7c, 0x3c, 0xa2, 0x8d, 0xff, 0x91, 0x4c, 0xf3, 0x1e, 0x08, 0x4d, 0x8c, 0x69, 0xde, 0xeb,
    0x1a, 0xbf, 0x1e, 0xa9, 0xd7, 0x6a, 0x53, 0x77, 0xf4, 0xd9, 0xb5, 0xae, 0x9d, 0xdb, 0xb3,
    0xcc, 0xb6, 0x95, 0x40, 0xd2, 0x73, 0xb5, 0x0b, 0xe5, 0x4a, 0xeb, 0xb1, 0x0b, 0x19, 0x56,
    0x49, 0xc6, 0xba, 0x61, 0x0d, 0x9f, 0xca, 0x1e, 0x91, 0x2b, 0x85, 0x19, 0xf9, 0xd9, 0xdb,
    0x72, 0xdb, 0xe9, 0xaa, 0xa8, 0x31, 0x99, 0xda, 0xb3, 0x80, 0x29, 0xe2, 0x2e, 0xd1, 0xcf,
    0x44, 0x67, 0x77, 0x4f, 0xa1, 0x92, 0x29, 0x91, 0xb8, 0xf0, 0xe9, 0x77, 0x89, 0xe0, 0xa7,
    0xdd, 0xcc, 0x22, 0x34, 0x5e, 0x7c, 0x86, 0xe3, 0x5c, 0x29, 0xfd, 0x10, 0x1b, 0x14, 0x21,
    0x76, 0xd9, 0x70, 0x42, 0x87, 0x83, 0xa2, 0x6a, 0x1d, 0x1b, 0xc0, 0xdd, 0xaa, 0xe9, 0x85,
    0x3c, 0xf9, 0x5e, 0x93, 0x48, 0xdd, 0x8b, 0x53, 0x1b, 0x0a, 0x3b, 0x09, 0x21, 0x10, 0xab,
    0xc9, 0x0b, 0x30, 0xfe, 0xc0, 0x70, 0xa4, 0x5f, 0xe8, 0x4f, 0xc4, 0xd1, 0x58, 0x21, 0xbe,
    0xb8, 0x22, 0x8d, 0x1a, 0xd0, 0x7b, 0x2e, 0x2a, 0xe6, 0x68, 0x51, 0x46, 0x30, 0x35, 0xf4,
    0xb6, 0x67, 0xbb, 0x96, 0xb6, 0x3b, 0x87, 0x23, 0x02, 0x5a, 0x32, 0xce, 0xc4, 0xb9, 0x79,
    0x05, 0x16, 0xad, 0xaa, 0x13, 0xea, 0x68, 0x74, 0x9c, 0xe1, 0x79, 0x85, 0x28, 0x9e, 0xd3,
    0x00, 0x95, 0xa5, 0xa8, 0x9c, 0x54, 0xd5, 0xc4, 0x4c, 0x7f, 0x88, 0xb6, 0x36, 0x77, 0x10,
    0x0c, 0xc3, 0xec, 0x48, 0xd7, 0x94, 0x81, 0xdf, 0xb7, 0x95, 0x14, 0xfe, 0xcc, 0x43, 0x23,
    0xee, 0x54, 0xb7, 0x1c, 0xef, 0x6a, 0x9b, 0xb6, 0xe0, 0xd5, 0x11, 0xda, 0x97, 0x1e, 0x67,
    0xfb, 0x58, 0x51, 0x2f, 0x47, 0x6b, 0x82, 0x4e, 0xa5, 0x6b, 0x4d, 0xd4, 0x90, 0x7f, 0x7f,
    0x09, 0x01, 0x49, 0x4e, 0x2d, 0x73, 0xd9, 0x72, 0x43, 0x49, 0x41, 0x48, 0xb9, 0x75, 0x6a,
    0xef, 0xb2, 0x93, 0x74, 0x3e, 0x03, 0xe9, 0xf0, 0x18, 0x34, 0xad, 0x4f, 0xa3, 0x5b, 0xc3,
    0x8c, 0x57, 0x00, 0xd7, 0x73, 0x79, 0xb1, 0xba, 0x44, 0x78, 0xe9, 0x1a, 0x63, 0xbe, 0x58,
    0x06, 0xda, 0x13, 0xb3, 0x46, 0x62, 0xbd, 0x81, 0xe2, 0xe4, 0xe4, 0x5a, 0x35, 0xcf, 0xe7,
    0x30, 0x85, 0x31, 0x4f, 0x8f, 0x58, 0x4c, 0x12, 0x02, 0x4f, 0x3b, 0xe8, 0x69, 0x9a, 0x89,
    0x5d, 0x91, 0x1d, 0xbc, 0x6d, 0x1f, 0x61, 0x2e, 0xe2, 0x40, 0x92, 0x9e, 0x95, 0x55, 0x0f,
    0x92, 0x98, 0x8c, 0xaf, 0xbe, 0x95, 0xfb, 0x94, 0x93, 0x54, 0x92, 0x15, 0xf5, 0x16, 0x62,
    0x84, 0xbe, 0x23, 0x82, 0x9a, 0x8d, 0x7a, 0xc7, 0x15, 0xc2, 0xd6, 0xb2, 0x6e, 0x20, 0x84,
    0x48, 0xbd, 0x26, 0x08, 0xac, 0x30, 0xfe, 0xa6, 0xad, 0x6a, 0xba, 0xe6, 0x63, 0x01, 0x38,
    0x8b, 0x3b, 0x4f, 0x26, 0x0d, 0x25, 0x3c, 0x44, 0x8f, 0x6c, 0x6c, 0xd9, 0xde, 0x7a, 0x79,
    0x03, 0x74, 0x2a, 0x7d, 0x59, 0x4d, 0xd4, 0xb1, 0x5e, 0x03, 0xe9, 0x8f, 0x55, 0xdd, 0xd3,
    0x20, 0xcb, 0xb4, 0xde, 0x6f, 0x43, 0x7b, 0x9e, 0xe2, 0x0d, 0xe6, 0x21, 0x0b, 0x44, 0xc8,
    0xa7, 0xc1, 0x98, 0x8f, 0x37, 0x1b, 0xb4, 0xbd, 0x07, 0x53, 0x32, 0x12, 0x16, 0xf5, 0x0b,
    0x22, 0xc3, 0xac, 0xa6, 0xdf, 0xf2, 0x7d, 0xcf, 0xe8, 0x22, 0xd9, 0x52, 0x42, 0xc5, 0xf4,
    0xa1, 0xfa, 0x54, 0xdc, 0x29, 0x25, 0x1b, 0xf2, 0x54, 0x42, 0x8f, 0x85, 0x22, 0xf1, 0x7d,
    0x26, 0x53, 0xa8, 0xe2, 0x8e, 0xe3, 0xe1, 0xff, 0x44, 0x8c, 0xcc, 0xaa, 0x8d, 0x0b, 0x50,
    0x2c, 0xb4, 0x5a, 0x48, 0xea, 0x1a, 0xd3, 0x6a, 0xec, 0x77, 0xbf, 0xc7, 0x7c, 0x13, 0xfd,
    0x0c, 0xf5, 0x69, 0x68, 0x5d, 0x51, 0xd5, 0x3d, 0x08, 0xdc, 0x4b, 0x9c, 0xd8, 0x5a, 0x41,
    0x7a, 0x1c, 0xc0, 0x80, 0x38, 0x42, 0x43, 0xaa, 0xcc, 0xc3, 0xc7, 0xfd, 0x6f, 0x97, 0x12,
    0x99, 0xa9, 0x74, 0xfe, 0xad, 0x11, 0x00, 0xb6, 0x4b, 0xe9, 0x96, 0xcf, 0x57, 0xb1, 0xfe,
    0xd6, 0x5f, 0xc5, 0x7a, 0xc4, 0xb7, 0x2b, 0x89, 0x75, 0x6e, 0x72, 0x3a, 0x43, 0xf1, 0xed,
    0x51, 0xf3, 0x74, 0xbe, 0x92, 0x58, 0x5f, 0xb7, 0xf8, 0x8e, 0x26, 0xe8, 0x99, 0x7a, 0x58,
    0x3f, 0x6d, 0x15, 0x22, 0x9b, 0x5a, 0xd5, 0xc3, 0x02, 0x6f, 0x1b, 0xe6, 0x13, 0x7d, 0x16,
    0x98, 0x99, 0x0f, 0x1e, 0x67, 0xea, 0x0c, 0xc7, 0xcd, 0x5c, 0x7a, 0xf9, 0x41, 0x74, 0x0d,
    0xb7, 0xcc, 0x2b, 0xce, 0xc0, 0x4e, 0x4f, 0xe4, 0x84, 0x01, 0x83, 0x98, 0x00, 0xa0, 0x13,
    0x31, 0xe9, 0x2c, 0xff, 0x84, 0xae, 0x44, 0x22, 0x11, 0x2f, 0xee, 0x16, 0xb7, 0xf4, 0xe9,
    0xe5, 0xcf, 0xcb, 0x6f, 0xe7, 0xd2, 0x35, 0x92, 0x91, 0xa1, 0x69, 0xba, 0x15, 0x13, 0x66,
    0x7f, 0xdb, 0x41, 0x2d, 0x18, 0x8e, 0x1d, 0xbf, 0x64, 0x5f, 0xae, 0x1d, 0x07, 0x26, 0x22,
    0xcb, 0x23, 0x30, 0x11, 0xce, 0x3d, 0x67, 0x62, 0x0d, 0x51, 0x35, 0x2b, 0x4e, 0x66, 0xa8,
    0xac, 0x9a, 0xd7, 0xf8, 0x2a, 0xbf, 0x3a, 0xce, 0x0f, 0x19, 0xe2, 0x2a, 0x28, 0x3f, 0xb4,
    0xfd, 0x57, 0x96, 0x88, 0x1e, 0xa8, 0x97, 0xc5, 0x12, 0xa5, 0x4f, 0x59, 0xd0, 0x18, 0xc7,
    0x59, 0xda, 0x06, 0xc9, 0xd7, 0xf7, 0x97, 0xd2, 0x74, 0x12, 0x23, 0x4e, 0x18, 0x7f, 0x9b,
    0xdf, 0x49, 0x5f, 0x90, 0xf4, 0xc2, 0xe3, 0x75, 0x9f, 0x54, 0x1e, 0x72, 0x1a, 0xd2, 0x9d,
    0xa5, 0x69, 0x28, 0x3c, 0xf4, 0x3c, 0x14, 0xfe, 0x9e, 0x13, 0xb1, 0x9d, 0x21, 0x39, 0x80,
    0x11, 0xaf, 0x7b, 0xd3, 0x7d, 0xaf, 0xbc, 0xfc, 0xc3, 0xd5, 0x0f, 0x42, 0x7d, 0x81, 0x03,
    0x9c, 0x7a, 0xcf, 0xe6, 0xb3, 0xef, 0x01, 0x08, 0x2c, 0x8a, 0x98, 0x67, 0x6a, 0xf0, 0x28,
    0x6f, 0x6f, 0x45, 0x36, 0xb5, 0xaa, 0xc1, 0x43, 0x03, 0x2e, 0x1d, 0x06, 0x7d, 0xe9, 0x56,
    0x3e, 0xd4, 0xa0, 0x4e, 0x53, 0x57, 0x19, 0xd6, 0x70, 0x9f, 0x57, 0x18, 0xcf, 0x76, 0xde,
    0x4f, 0x15, 0x6d, 0xb2, 0xbd, 0x1d, 0xbe, 0x31, 0x78, 0xee, 0x27, 0x67, 0xe8, 0x54, 0xfa,
    0x84, 0xc0, 0xf1, 0x98, 0x90, 0xbc, 0xbf, 0x5c, 0xf7, 0x26, 0x44, 0xb9, 0x60, 0xef, 0x9e,
    0x1c, 0x51, 0x2b, 0x34, 0x59, 0xb4, 0xcc, 0xca, 0xaa, 0xd5, 0x04, 0xb6, 0xdb, 0xd3, 0x4d,
    0x5e, 0x92, 0x45, 0x88, 0x7b, 0x2c, 0x8f, 0xf4, 0xc1, 0x98, 0x39, 0x30, 0x63, 0xc6, 0x8f,
    0x56, 0xad, 0xa6, 0x70, 0xcb, 0xa0, 0xe8, 0xd3, 0x5c, 0xe3, 0x44, 0xa0, 0xc7, 0x95, 0x47,
    0x19, 0x2e, 0xc1, 0x77, 0x88, 0xa8, 0xbe, 0x24, 0x38, 0xea, 0xe8, 0xdc, 0xfc, 0xc5, 0x42,
    0x75, 0x96, 0xcd, 0xde, 0xb6, 0x08, 0xdc, 0xba, 0x3a, 0x1b, 0xce, 0x59, 0xa6, 0x7b, 0x92,
    0x9a, 0x06, 0x56, 0x4e, 0x91, 0x72, 0x6d, 0x73, 0xf3, 0x5e, 0x39, 0xa6, 0xdb, 0x3a, 0x4d,
    0x6d, 0xa2, 0xbf, 0x52, 0x5f, 0xc5, 0xde, 0xd8, 0x5e, 0x0f, 0x82, 0xbe, 0xd9, 0xbe, 0x6b,
    0x56, 0xff, 0xa5, 0xd0, 0xc0, 0xbf, 0x34, 0xdb, 0x5a, 0xa1, 0xe8, 0x61, 0xf2, 0xde, 0x5b,
    0x08, 0x8c, 0xc5, 0xf3, 0xfb, 0x2d, 0x46, 0x3a, 0xc2, 0xfe, 0x11, 0x2e, 0xe8, 0xc3, 0xf8,
    0x0b, 0xd5, 0x51, 0x66, 0x73, 0x6b, 0xb8, 0x96, 0x1c, 0x0e, 0xc0, 0x3b, 0x06, 0x4d, 0xda,
    0xfb, 0xdc, 0x1b, 0x8e, 0x3f, 0xdf, 0xba, 0xc6, 0x9d, 0xec, 0x2d, 0x96, 0x97, 0x5b, 0x31,
    0x34, 0xc2, 0x7a, 0x93, 0xd6, 0x64, 0x11, 0x5a, 0xc5, 0xcc, 0x68, 0x0d, 0x35, 0x9f, 0xfc,
    0xa5, 0x1c, 0x43, 0x21, 0xbd, 0x75, 0x27, 0x37, 0x70, 0x18, 0x8d, 0x90, 0xcd, 0x3f, 0x5e,
    0x45, 0x6e, 0x83, 0xb8, 0x0e, 0x9a, 0xb4, 0x9e, 0xcc, 0x0a, 0xd8, 0x3a, 0xa3, 0xe8, 0xfa,
    0x6d, 0xea, 0xea, 0xa3, 0x3a, 0x9d, 0x85, 0x38, 0xfb, 0xbb, 0x61, 0x6c, 0x3f, 0x7a, 0x04,
    0xc4, 0x13, 0xb0, 0x75, 0x31, 0xdd, 0x32, 0x12, 0xc1, 0xd6, 0xdc, 0x43, 0x3d, 0x6c, 0x2f,
    0xe5, 0xea, 0x98, 0xc6, 0xfe, 0x5e, 0x5c, 0x4d, 0x0e, 0x87, 0x4f, 0xc6, 0xd4, 0x19, 0x10,
    0xa2, 0x98, 0x5a, 0x30, 0xd4, 0xbd, 0xf2, 0xf4, 0xdf, 0x83, 0xa7, 0x6b, 0x94, 0xa1, 0xbd,
    0x46, 0x86, 0x56, 0x51, 0x01, 0x1d, 0xc0, 0xd0, 0x31, 0xa9, 0x0c, 0xec, 0xee, 0xb8, 0xba,
    0x91, 0xac, 0x7a, 0x96, 0xcf, 0xfc, 0x4f, 0xc0, 0xd8, 0x19, 0x9c, 0x5b, 0xe9, 0x2c, 0x9c,
    0x74, 0xab, 0x0d, 0x73, 0xac, 0xed, 0x3a, 0xdf, 0x11, 0x43, 0x97, 0xd9, 0xb8, 0xbe, 0x32,
    0xab, 0x72, 0xad, 0x88, 0x7c, 0x5d, 0x4a, 0xe7, 0x6b, 0xe3, 0x55, 0xad, 0xbe, 0x27, 0x4f,
    0x13, 0x91, 0xfc, 0x8c, 0x94, 0xe7, 0x4f, 0xe9, 0x11, 0x24, 0xc6, 0xab, 0xda, 0x1c, 0x20,
    0x95, 0x6b, 0x9f, 0x56, 0x39, 0xfe, 0x98, 0xee, 0xb7, 0x64, 0xbc, 0xaa, 0xc5, 0x32, 0x11,
    0x93, 0x67, 0x9f, 0x99, 0xf2, 0x9b, 0xe1, 0xfe, 0x7a, 0xf1, 0xaa, 0xf6, 0xca, 0xc4, 0xdc,
    0x71, 0x7f, 0x08, 0x34, 0x1f, 0xbc, 0xfa, 0x90, 0xac, 0xea, 0xa4, 0x4c, 0xfc, 0xcd, 0x87,
    0x7a, 0x45, 0x3c, 0x8b, 0x67, 0xea, 0xed, 0x12, 0x67, 0xa7, 0xb5, 0x04, 0x96, 0x12, 0x11,
    0x9f, 0xe4, 0x7a, 0x35, 0x8e, 0xac, 0x97, 0x76, 0x45, 0x90, 0xff, 0xf4, 0x12, 0xc1, 0x57,
    0x15, 0xd2, 0xa3, 0xa8, 0xd9, 0x3d, 0x52, 0x96, 0xdc, 0x45, 0x77, 0x11, 0x0d, 0x70, 0x6a,
    0x9f, 0x5c, 0x88, 0x21, 0xec, 0x49, 0x64, 0xc3, 0x0a, 0xd8, 0x76, 0xcf, 0xd4, 0xed, 0xe6,
    0x21, 0x5d, 0x5b, 0x67, 0x1c, 0x93, 0x9e, 0x23, 0xe8, 0x49, 0xf8, 0x25, 0x29, 0xd7, 0x9a,
    0xaf, 0x47, 0xe1, 0x16, 0xd5, 0xca, 0x06, 0x15, 0x9d, 0xba, 0x8b, 0xc4, 0xc8, 0xe0, 0x98,
    0x65, 0x5f, 0x75, 0xd5, 0xa6, 0x6e, 0x69, 0xfa, 0x4c, 0x12, 0xc9, 0x0f, 0x8f, 0x14, 0xd6,
    0x02, 0x57, 0x88, 0xb7, 0x41, 0x83, 0x30, 0x15, 0x1c, 0x24, 0x65, 0xa4, 0x5a, 0x1a, 0xb9,
    0x76, 0x47, 0x33, 0x7b, 0x3e, 0x1c, 0x29, 0xda, 0x12, 0xba, 0x07, 0x9a, 0xbd, 0x87, 0x7b,
    0xe5, 0x96, 0x5a, 0xea, 0xd3, 0x8b, 0xdb, 0x7b, 0x76, 0x3e, 0x85, 0x23, 0x75, 0x9e, 0xfd,
    0xb3, 0xf3, 0x29, 0xfd, 0x2e, 0x78, 0x46, 0xa6, 0xf4, 0xfe, 0x42, 0x03, 0xa3, 0xa4, 0xc3,
    0x23, 0x21, 0x9e, 0x95, 0x7c, 0x9f, 0x2a, 0x55, 0x22, 0xe3, 0x2f, 0x4f, 0x96, 0x55, 0x63,
    0xb8, 0x51, 0x00, 0x14, 0xaf, 0xdb, 0xd0, 0xfa, 0x98, 0x27, 0xfd, 0xc6, 0x95, 0x32, 0xcf,
    0xac, 0x6f, 0xb8, 0x33, 0x94, 0x40, 0x0f, 0xc4, 0x45, 0xf1, 0x5c, 0x92, 0x1a, 0x56, 0x9c,
    0xa8, 0x38, 0x65, 0xcf, 0x88, 0x18, 0x01, 0xef, 0xcd, 0x84, 0xdc, 0x31, 0x41, 0x56, 0x7c,
    0xcd, 0xb5, 0xb1, 0x66, 0x06, 0x47, 0x7d, 0xca, 0x9a, 0xa1, 0x8c, 0x24, 0x77, 0x61, 0xca,
    0xf2, 0xb8, 0x57, 0x9e, 0xf4, 0xbf, 0x78, 0x34, 0x44, 0x6a, 0x49, 0x01, 0x89, 0x53, 0xbc,
    0x2b, 0x75, 0x6e, 0xba, 0xba, 0x26, 0x62, 0x12, 0x32, 0xaf, 0xc0, 0x27, 0x3b, 0xc7, 0x27,
    0xf5, 0x70, 0x9a, 0x94, 0xa8, 0xe5, 0xac, 0xdd, 0x5d, 0xba, 0xb8, 0xa6, 0xc4, 0x8c, 0xea,
    0x98, 0x0f, 0x2e, 0xf3, 0x44, 0xa5, 0x21, 0x1b, 0xbf, 0x59, 0xf3, 0x49, 0x3f, 0x31, 0x34,
    0x5d, 0x26, 0xd2, 0x0a, 0x0f, 0x40, 0x5a, 0xea, 0x52, 0xc8, 0x46, 0x5a, 0xf1, 0x01, 0x48,
    0xbe, 0x6f, 0x2f, 0xf3, 0x62, 0x3e, 0x1c, 0x9e, 0xed, 0x09, 0x87, 0x4c, 0x6b, 0xec, 0xa5,
    0x8f, 0x16, 0xf3, 0xe9, 0xf7, 0xd3, 0xa1, 0x15, 0x97, 0x05, 0xc1, 0x32, 0xbc, 0x9e, 0x1e,
    0x8b, 0x78, 0x8a, 0x81, 0xcc, 0x60, 0xb5, 0x0b, 0x2d, 0xc2, 0x2c, 0x03, 0x19, 0x5c, 0x62,
    0x7d, 0x18, 0xb3, 0x24, 0x1d, 0x0b, 0x88, 0xd9, 0x3b, 0x80, 0x20, 0xad, 0x0d, 0x6d, 0x75,
    0x9f, 0x10, 0xf9, 0x01, 0xb3, 0x04, 0x87, 0xe7, 0x7b, 0x69, 0x0c, 0xc2, 0x25, 0x19, 0xc6,
    0x28, 0xff, 0x70, 0xd5, 0xb1, 0x8e, 0x36, 0xa4, 0x37, 0x6f, 0x95, 0xf7, 0xff, 0xa5, 0xec,
    0x0a, 0x75, 0x0e, 0x69, 0xea, 0x57, 0xca, 0xc2, 0x80, 0x02, 0x7d, 0x02, 0xe4, 0x7e, 0x6d,
    0xd0, 0x79, 0x5d, 0x53, 0xae, 0x6c, 0x7a, 0x9d, 0x76, 0x8d, 0x99, 0xa8, 0x94, 0x37, 0x86,
    0x13, 0x2d, 0x33, 0xd3, 0xdf, 0xcf, 0x1d, 0x5d, 0xfb, 0xf1, 0xed, 0x17, 0xab, 0xb0, 0xa9,
    0x55, 0xb7, 0x6d, 0x9b, 0xd6, 0x8e, 0x89, 0xa6, 0xfc, 0xea, 0xaf, 0x66, 0xf6, 0x04, 0x5e,
    0x1a, 0x75, 0xda, 0x94, 0xa5, 0x43, 0x03, 0xae, 0x8d, 0xd5, 0x69, 0xf6, 0xc2, 0x82, 0xbe,
    0xf4, 0x01, 0x36, 0x78, 0xa6, 0x82, 0xee, 0xcc, 0x0e, 0xd7, 0x30, 0x08, 0xc4, 0x86, 0x74,
    0xd0, 0x89, 0x7c, 0x26, 0xeb, 0x92, 0x3c, 0xf0, 0x2f, 0xcd, 0xbe, 0x54, 0x28, 0x3d, 0x46,
    0xe0, 0x84, 0x1b, 0x54, 0xf7, 0x27, 0x47, 0xd1, 0x54, 0xbc, 0xd2, 0xb3, 0xe7, 0x04, 0x8d,
    0x68, 0x2b, 0xaa, 0x09, 0x8c, 0xf6, 0xe3, 0xa3, 0xdf, 0x8f, 0x96, 0xf2, 0xe9, 0xf6, 0x6d,
    0xd0, 0xeb, 0x0e, 0xaa, 0x2a, 0x8f, 0x0c, 0x53, 0xf3, 0x58, 0xfb, 0xfb, 0x08, 0xeb, 0x7d,
    0xb3, 0x96, 0x41, 0x94, 0x0b, 0x62, 0x68, 0xed, 0xe0, 0x04, 0xb2, 0x50, 0x7a, 0x28, 0xd4,
    0x80, 0x18, 0x8a, 0xdd, 0x25, 0xa6, 0x33, 0x1d, 0x46, 0x19, 0xb4, 0x4d, 0x22, 0x34, 0xee,
    0x4d, 0x68, 0x5e, 0x5d, 0x64, 0x33, 0x84, 0x2d, 0x40, 0x77, 0xdd, 0xa5, 0xd2, 0xb7, 0x71,
    0x53, 0x06, 0x01, 0xe7, 0x00, 0x99, 0x8d, 0x84, 0x77, 0xb3, 0x48, 0x58, 0x99, 0xe8, 0xbb,
    0x58, 0x99, 0x5c, 0x97, 0xe4, 0x10, 0xf4, 0x35, 0x6e, 0x74, 0xcc, 0xf8, 0xb2, 0xf1, 0x6d,
    0xb8, 0x5f, 0x36, 0x14, 0x7b, 0x1c, 0x91, 0xd6, 0x37, 0x89, 0xf8, 0xfb, 0x9d, 0x59, 0xbd,
    0xe3, 0x8e, 0xac, 0x3b, 0xa5, 0xc8, 0x76, 0x56, 0x3d, 0xb1, 0x22, 0x92, 0xbc, 0x1d, 0x97,
    0xe2, 0xf1, 0x8e, 0x80, 0x4c, 0x97, 0xab, 0x53, 0xc5, 0xfc, 0x09, 0x4e, 0xd0, 0xde, 0xdf,
    0x74, 0x1a, 0x8c, 0x99, 0x4f, 0x3e, 0x9b, 0x9f, 0x76, 0x42, 0xcd, 0xde, 0x71, 0x3f, 0x95,
    0xda, 0x70, 0x89, 0xef, 0x92, 0xaa, 0xf4, 0x55, 0x4d, 0x31, 0x34, 0x3d, 0x68, 0x8e, 0x4e,
    0xe2, 0xfb, 0x0b, 0xe4, 0x58, 0x56, 0xf6, 0xbb, 0x9f, 0xcf, 0x82, 0xcd, 0x40, 0xc6, 0x23,
    0xfb, 0x44, 0x89, 0xbd, 0x18, 0xd9, 0x70, 0xf7, 0x03, 0x73, 0x84, 0xa0, 0x80, 0xff, 0x5b,
    0x0b, 0x1b, 0xd8, 0x42, 0x5d, 0xa2, 0x9c, 0x58, 0xa8, 0xb7, 0xb6, 0xfd, 0x65, 0xe3, 0x1d,
    0x6a, 0x55, 0x6d, 0xc9, 0x55, 0x52, 0xc3, 0x51, 0xa7, 0x53, 0x1b, 0x5d, 0xb8, 0xb4, 0x7b,
    0xfe, 0x9a, 0x4f, 0x3d, 0x19, 0xa6, 0x66, 0x27, 0x5b, 0x36, 0x0a, 0x94, 0x21, 0xd1, 0x20,
    0x8f, 0x9a, 0xc6, 0x43, 0x9e, 0x27, 0x67, 0x64, 0xcf, 0x4d, 0xcd, 0xfa, 0xc9, 0xc5, 0xd4,
    0xe8, 0xca, 0xa7, 0x5b, 0x0a, 0x1f, 0xbf, 0xef, 0x72, 0x1d, 0x78, 0x79, 0xd7, 0xe2, 0x07,
    0xd1, 0xbf, 0x2e, 0xc0, 0xdd, 0xec, 0x76, 0x11, 0xbe, 0xdc, 0x52, 0xb5, 0x88, 0x0a, 0x54,
    0x46, 0x25, 0x62, 0x69, 0xcf, 0x67, 0x8a, 0xff, 0x48, 0x71, 0x74, 0x76, 0x1f, 0x81, 0xbe,
    0x28, 0xd6, 0x68, 0xa7, 0xd7, 0xae, 0x57, 0x90, 0x6e, 0x84, 0x36, 0x01, 0x5d, 0x7a, 0xba,
    0x3d, 0x20, 0x9f, 0x8b, 0xca, 0x71, 0x8a, 0x33, 0x72, 0x4f, 0x71, 0x45, 0x07, 0x48, 0xd9,
    0x22, 0x8b, 0xa4, 0x6a, 0xbe, 0xf7, 0x02, 0xe0, 0x3d, 0x3b, 0x3d, 0x6b, 0xd7, 0x4e, 0xeb,
    0x77, 0x23, 0xf5, 0x9e, 0xbb, 0xd2, 0xba, 0x87, 0xb4, 0xe2, 0x98, 0x93, 0x9d, 0xeb, 0x1d,
    0x52, 0x7b, 0xdd, 0x04, 0xef, 0xad, 0xb6, 0x95, 0x10, 0x76, 0x48, 0xe5, 0xfd, 0x07, 0x84,
    0x0f, 0x6d, 0xec, 0xa8, 0x98, 0x2a, 0x8b, 0x99, 0x3a, 0xc5, 0xfd, 0xdd, 0x09, 0xea, 0x6f,
    0x59, 0x03, 0x0f, 0x06, 0xda, 0x9e, 0xb2, 0x14, 0x3e, 0x26, 0x99, 0xc6, 0xe3, 0x88, 0x7b,
    0xa4, 0x76, 0x79, 0xd8, 0x17, 0xba, 0x69, 0xbe, 0x53, 0x96, 0xba, 0x3a, 0x7a, 0x86, 0x5b,
    0xc7, 0x74, 0x73, 0xfa, 0xc3, 0x6e, 0xe5, 0xa9, 0x5b, 0xc8, 0x0c, 0x6a, 0xa1, 0x4a, 0xdb,
    0xea, 0xd4, 0x6d, 0x3f, 0x49, 0xd5, 0xe6, 0x9e, 0xea, 0xe8, 0xab, 0x2c, 0xab, 0x35, 0x5f,
    0xa6, 0x10, 0xf6, 0xd2, 0x0c, 0x7c, 0xc5, 0x42, 0x18, 0xde, 0x84, 0xbf, 0x2f, 0x77, 0x18,
    0x3a, 0x53, 0x0a, 0xdb, 0xb5, 0x91, 0x30, 0x4e, 0x4f, 0x74, 0x6b, 0xf5, 0x50, 0x17, 0x01,
    0x91, 0xee, 0xd8, 0xcd, 0xef, 0x66, 0xf5, 0xb0, 0xef, 0x56, 0x58, 0x40, 0x7d, 0xba, 0xde,
    0xb4, 0x08, 0x1e, 0x6f, 0xf1, 0xf1, 0x7e, 0xbd, 0xb8, 0xf5, 0x57, 0x0c, 0xc7, 0x0e, 0xf8,
    0x60, 0xa0, 0xcf, 0x99, 0x97, 0x60, 0x32, 0xe3, 0x3c, 0x49, 0x26, 0x99, 0xe8, 0x3b, 0x96,
    0x85, 0x9a, 0xe0, 0x94, 0xc5, 0xc8, 0x18, 0x8c, 0x40, 0xf9, 0x47, 0x02, 0x1d, 0x7a, 0xf1,
    0x52, 0xef, 0x7d, 0x56, 0x22, 0xdb, 0x65, 0x8c, 0xd8, 0x3f, 0x81, 0x55, 0xa2, 0xd3, 0xf9,
    0xf7, 0xd1, 0xfc, 0x3d, 0xc4, 0x14, 0x0f, 0x9e, 0xcc, 0xa6, 0x94, 0x00, 0xc1, 0x1f, 0xd3,
    0xbf, 0x73, 0x02, 0x9b, 0xd2, 0x56, 0xba, 0xa0, 0x66, 0x0c, 0xd5, 0xd4, 0xff, 0x9c, 0x1b,
    0x80, 0x89, 0xe6, 0x61, 0xee, 0xc0, 0x5f, 0xee, 0x68, 0xa7, 0x87, 0x0a, 0x62, 0x30, 0xdc,
    0x43, 0x1c, 0x11, 0x41, 0xf7, 0xb8, 0xa3, 0x1c, 0x7f, 0xa9, 0xb5, 0x6b, 0x29, 0xfa, 0x8d,
    0x81, 0xbb, 0x24, 0x54, 0x13, 0xce, 0xd7, 0x96, 0xe2, 0xd1, 0xee, 0xe5, 0xff, 0x4c, 0x08,
    0x7c, 0x92, 0x79, 0x4a, 0xbf, 0xb2, 0xb4, 0x30, 0xa7, 0x13, 0x9f, 0x82, 0x0c, 0xf3, 0x15,
    0xba, 0xf6, 0x1c, 0x3a, 0xd5, 0x9e, 0x91, 0x7f, 0xbe, 0xc7, 0x99, 0x6b, 0x33, 0x23, 0x2e,
    0x99, 0x7d, 0x67, 0x73, 0x54, 0x4a, 0x37, 0x05, 0x32, 0xc9, 0x75, 0xca, 0x8d, 0x7e, 0xf7,
    0x05, 0x26, 0x7a, 0xfa, 0xa6, 0x7a, 0xf9, 0x26, 0x86, 0x38, 0x74, 0xd1, 0xeb, 0x23, 0x14,
    0xf0, 0x2e, 0xd8, 0x46, 0xac, 0xab, 0xef, 0x6a, 0x0e, 0xdf, 0x2f, 0x57, 0xbe, 0xa6, 0x1f,
    0xf9, 0xb4, 0xef, 0x5a, 0xeb, 0x35, 0x0d, 0x07, 0x5c, 0xb6, 0xff, 0xce, 0x93, 0x90, 0x1e,
    0xe2, 0x4d, 0x02, 0xc1, 0xdb, 0x7e, 0xda, 0x65, 0x99, 0x7a, 0x55, 0x9b, 0xb4, 0x10, 0x23,
    0xc3, 0xef, 0x96, 0xe1, 0x6c, 0xdf, 0x50, 0x27, 0xb6, 0xa5, 0xd5, 0x2c, 0x90, 0x57, 0x06,
    0xe8, 0x8b, 0x47, 0xc6, 0x63, 0xfd, 0x5a, 0x37, 0xbf, 0xd3, 0x0c, 0x96, 0xe9, 0x14, 0x3f,
    0xf6, 0x5f, 0xc8, 0x25, 0xd8, 0x65, 0x56, 0x20, 0xf8, 0xef, 0x7c, 0x24, 0x80, 0x31, 0x4c,
    0x13, 0xf4, 0xf9, 0xc8, 0x3d, 0x8d, 0x1d, 0x34, 0x34, 0x93, 0xe4, 0xf0, 0x79, 0x62, 0x68,
    0x6b, 0xc1, 0x44, 0x51, 0x9d, 0x7a, 0xfc, 0x5e, 0x65, 0x05, 0xf2, 0x71, 0x7c, 0x8a, 0x95,
    0x64, 0xa1, 0x59, 0x6d, 0x24, 0xfe, 0xde, 0xab, 0xb1, 0x98, 0x1e, 0xfc, 0x76, 0x25, 0x8e,
    0x77, 0xb2, 0x22, 0x5b, 0xfa, 0x00, 0x1e, 0x3c, 0xbb, 0x25, 0x19, 0x49, 0xf6, 0xcb, 0x59,
    0xe1, 0x0b, 0xf4, 0xf8, 0x35, 0x99, 0x3c, 0x14, 0x7f, 0xf3, 0x45, 0x99, 0x01, 0xc9, 0x57,
    0xbe, 0xef, 0x64, 0x55, 0xb6, 0xed, 0xe9, 0xf3, 0x5a, 0x8f, 0x01, 0x82, 0xef, 0xb5, 0x12,
    0x36, 0x99, 0xbb, 0x48, 0xb3, 0xa7, 0x5c, 0xc9, 0x5b, 0xab, 0xec, 0xae, 0x71, 0x83, 0xf8,
    0x5e, 0xc3, 0x5b, 0xe9, 0x06, 0x24, 0x97, 0x0d, 0xdc, 0x13, 0xad, 0x5e, 0xee, 0x17, 0x09,
    0x94, 0xbd, 0x43, 0x6e, 0xcb, 0x9e, 0xcf, 0xee, 0x99, 0x04, 0x4a, 0x88, 0x55, 0x22, 0x46,
    0x87, 0x54, 0x89, 0xf6, 0x59, 0xff, 0x2c, 0x4d, 0x4c, 0x7f, 0x9a, 0x48, 0x82, 0xf2, 0x5e,
    0x51, 0x49, 0xcc, 0xa3, 0x73, 0x88, 0x06, 0xdc, 0xa5, 0x3d, 0x47, 0x97, 0xa9, 0x11, 0x7e,
    0xf3, 0x9b, 0xfb, 0xc4, 0x0d, 0x79, 0x58, 0x36, 0x24, 0xb9, 0x8a, 0x35, 0x37, 0xcd, 0x0f,
    0x4b, 0xd3, 0xaf, 0x0c, 0x8c, 0x8e, 0xc2, 0x34, 0x30, 0xc4, 0x6d, 0x14, 0x03, 0x0b, 0x58,
    0x14, 0xb7, 0x14, 0x88, 0x44, 0x67, 0xba, 0xee, 0x4a, 0x1c, 0xd7, 0xd0, 0x62, 0x7e, 0xe0,
    0xa1, 0x44, 0x35, 0x39, 0x13, 0xa1, 0x59, 0x56, 0x31, 0x71, 0xda, 0xcf, 0xbe, 0x84, 0x05,
    0x79, 0x53, 0x57, 0x47, 0xef, 0xa8, 0x2b, 0x95, 0xaa, 0xc0, 0x84, 0x9a, 0xe8, 0x7d, 0xa6,
    0x31, 0xea, 0xcc, 0x51, 0x26, 0x86, 0x83, 0x41, 0x20, 0x3f, 0xbe, 0x4d, 0x74, 0xf6, 0xc9,
    0x6f, 0x6e, 0xd9, 0x13, 0x5d, 0x39, 0x86, 0x1a, 0x91, 0x11, 0xe9, 0xc2, 0x71, 0xde, 0x29,
    0x75, 0xd9, 0xd7, 0xff, 0xfb, 0xfb, 0x12, 0x1d, 0xa5, 0x0c, 0x3a, 0x39, 0xa1, 0x1b, 0x7b,
    0xdd, 0xbc, 0x25, 0x45, 0xaf, 0xbc, 0x18, 0xc3, 0x57, 0x8c, 0xf9, 0xf3, 0xd9, 0x70, 0xe4,
    0x3a, 0x15, 0x18, 0x12, 0x7d, 0xd6, 0xa9, 0x17, 0xf0, 0x77, 0xcb, 0x9b, 0xe9, 0x38, 0xba,
    0xee, 0x10, 0x56, 0xca, 0xf7, 0xca, 0x9a, 0x51, 0xa1, 0x29, 0xeb, 0xb8, 0x1c, 0x49, 0xdb,
    0xed, 0xba, 0xed, 0x9e, 0x32, 0xc8, 0x34, 0x86, 0x90, 0x7d, 0xbf, 0xd8, 0xaf, 0x7b, 0x69,
    0x91, 0xd4, 0x08, 0xea, 0xf0, 0x8b, 0x70, 0xeb, 0xc9, 0x17, 0x76, 0xc2, 0x8e, 0xad, 0xcf,
    0x97, 0x2d, 0x4b, 0x8e, 0xae, 0xc1, 0x08, 0xe3, 0x3e, 0xd9, 0xc4, 0x72, 0x75, 0x93, 0xde,
    0x4a, 0xe5, 0xef, 0x02, 0x68, 0x64, 0xe9, 0x8b, 0x70, 0x4d, 0xa4, 0xc4, 0xfd, 0x36, 0x87,
    0x45, 0xf6, 0xbb, 0xcf, 0x47, 0x31, 0xd2, 0xff, 0xbb, 0x9f, 0xb2, 0x5c, 0xba, 0x14, 0x65,
    0xff, 0x27, 0x84, 0x3d, 0x23, 0xa6, 0xea, 0x15, 0xd6, 0x2b, 0x6d, 0x8c, 0xd3, 0x2f, 0x0a,
    0xa9, 0x0b, 0xe2, 0x3b, 0x00, 0xaa, 0x8a, 0x14, 0xcd, 0x49, 0xbb, 0x4a, 0x53, 0x1f, 0xd8,
    0x0b, 0x84, 0xf5, 0xae, 0xb5, 0xdc, 0x75, 0x4e, 0xfd, 0x7d, 0xf7, 0x21, 0xf6, 0x96, 0xe8,
    0x16, 0x56, 0xfa, 0x8f, 0xc2, 0xa7, 0xad, 0x9f, 0x41, 0x73, 0x22, 0x31, 0x2f, 0x33, 0x4e,
    0xf2, 0x05, 0xef, 0xb2, 0xbf, 0x6c, 0x28, 0x18, 0x16, 0x69, 0xf9, 0xa7, 0x2c, 0x9e, 0x6d,
    0xd3, 0x11, 0x2b, 0xa1, 0x97, 0x2f, 0x6e, 0xcf, 0x2a, 0x96, 0x5e, 0x5e, 0x32, 0x5c, 0xe8,
    0x06, 0x35, 0x92, 0x06, 0x9c, 0xde, 0x7b, 0x7f, 0xfa, 0x3a, 0x63, 0xae, 0x85, 0x41, 0x9f,
    0x52, 0x2a, 0xe3, 0x1e, 0x15, 0x01, 0x99, 0x17, 0xd8, 0xa0, 0xde, 0x65, 0xa4, 0x26, 0xce,
    0x84, 0x94, 0xba, 0x3b, 0xc2, 0xe9, 0x03, 0x53, 0x1b, 0x19, 0x9f, 0xbe, 0x3e, 0x82, 0xef,
    0x02, 0x24, 0x0b, 0xce, 0x18, 0x29, 0x11, 0x2b, 0x3e, 0x07, 0x73, 0x9a, 0x00, 0xe4, 0xfe,
    0x0c, 0x41, 0x2b, 0x98, 0xe1, 0x28, 0x34, 0xc7, 0xb0, 0x4a, 0x2c, 0x10, 0xf8, 0x77, 0xbb,
    0x0d, 0x2a, 0xb0, 0x60, 0x88, 0xe0, 0x53, 0x6a, 0x2e, 0x1e, 0xf9, 0x10, 0x01, 0xc1, 0x55,
    0xeb, 0x8b, 0x35, 0x99, 0x9b, 0xae, 0x81, 0x9e, 0x8d, 0xb8, 0x6a, 0x50, 0x5a, 0x6a, 0x8a,
    0x08, 0x17, 0xc2, 0x70, 0xa6, 0x4e, 0x47, 0xce, 0xe6, 0x17, 0x28, 0x7a, 0x12, 0x7e, 0x0e,
    0x55, 0x57, 0x1c, 0x1d, 0x1f, 0x60, 0xd8, 0x66, 0x7f, 0x89, 0xe2, 0x56, 0x9f, 0x4c, 0xdd,
    0xa9, 0x2f, 0x3e, 0x7f, 0xb1, 0x13, 0x0c, 0xd0, 0x15, 0x05, 0xfb, 0xa1, 0x3e, 0xd3, 0x7f,
    0x3d, 0x21, 0xd7, 0x82, 0xa4, 0xae, 0xe8, 0xfe, 0x64, 0x12, 0xe4, 0xf2, 0x78, 0x3f, 0x37,
    0xad, 0x79, 0xf4, 0xc7, 0x08, 0xef, 0xb5, 0xc1, 0x40, 0x07, 0xb9, 0x89, 0x00, 0x2f, 0xc1,
    0xb2, 0x80, 0x99, 0xe6, 0x68, 0xa9, 0xb8, 0x9a, 0x19, 0xba, 0xa5, 0x99, 0x4b, 0x8c, 0x2e,
    0x89, 0x3d, 0x15, 0xaf, 0x09, 0x2c, 0x8d, 0x5a, 0x33, 0x69, 0x7e, 0x6b, 0xe8, 0xb2, 0x41,
    0x78, 0x61, 0x8c, 0x1c, 0xdb, 0x0a, 0xa5, 0x53, 0xf1, 0xb5, 0x9d, 0x8d, 0x5d, 0x66, 0x87,
    0xf6, 0x52, 0x1d, 0xf4, 0x8f, 0xa5, 0x0d, 0x33, 0x3d, 0xb6, 0xec, 0x85, 0xa3, 0xe0, 0x27,
    0x21, 0x66, 0x96, 0xce, 0xc4, 0x48, 0x41, 0x66, 0x3a, 0x40, 0x52, 0x95, 0x68, 0xca, 0xd6,
    0x23, 0xc5, 0xcd, 0x92, 0x38, 0x53, 0x19, 0x10, 0xda, 0xc8, 0xc0, 0xde, 0x7d, 0x3b, 0x8a,
    0xd7, 0xe0, 0x88, 0x20, 0xd2, 0x16, 0x1d, 0x01, 0x86, 0x5e, 0x40, 0x1a, 0x05, 0xc2, 0xd3,
    0x13, 0x12, 0x99, 0x7a, 0xc4, 0x69, 0xec, 0xde, 0xe8, 0xd9, 0xfe, 0xba, 0x3d, 0x60, 0x6d,
    0x97, 0xd7, 0x6b, 0x54, 0xaa, 0xb3, 0x63, 0x89, 0x3c, 0x3c, 0xa6, 0x52, 0x0b, 0xe4, 0xf5,
    0xfb, 0xbf, 0x87, 0xb6, 0xa9, 0xae, 0x15, 0x43, 0x29, 0x0b, 0xc7, 0x16, 0xd3, 0x39, 0x76,
    0x74, 0x65, 0x8a, 0xb2, 0x0e, 0x88, 0xe1, 0xd8, 0xdd, 0xd1, 0x72, 0xcb, 0xa8, 0xdd, 0xc1,
    0xb4, 0xdb, 0x07, 0xb1, 0xd3, 0x55, 0x67, 0x86, 0x0a, 0x0b, 0x77, 0xf7, 0xca, 0x15, 0xdc,
    0xff, 0x7f, 0xf6, 0xbe, 0xb4, 0xbb, 0x6d, 0x23, 0x4b, 0x74, 0x3e, 0xfb, 0x57, 0xa0, 0x95,
    0x26, 0x56, 0x9e, 0x25, 0x63, 0x25, 0x48, 0xf7, 0xeb, 0x99, 0x91, 0x97, 0xa4, 0x95, 0x8e,
    0x67, 0x39, 0xc9, 0x99, 0xd7, 0xce, 0xc4, 0x20, 0x50, 0x10, 0x11, 0x93, 0x00, 0x07, 0x00,
    0xb3, 0xe7, 0xf4, 0x7f, 0x7f, 0xf7, 0x56, 0x15, 0x76, 0x80, 0x28, 0x90, 0xe0, 0x6a, 0x79,
    0x63, 0x59, 0x2c, 0x02, 0xb7, 0x6e, 0xdd, 0xbd, 0xee, 0xb2, 0xbf, 0x18, 0x96, 0x10, 0x78,
    0xa6, 0x63, 0x5a, 0x1d, 0x04, 0xbd, 0xe6, 0x8e, 0xe7, 0xe8, 0x1d, 0x04, 0x5d, 0x80, 0xbc,
    0x4b, 0xda, 0x49, 0x8e, 0x7a, 0x73, 0x6f, 0x21, 0xa8, 0xcb, 0xe6, 0xa7, 0x2b, 0x76, 0x69,
    0x0a, 0x9a, 0xe7, 0xf4, 0x62, 0xb4, 0x8c, 0xc3, 0x8d, 0x41, 0xa9, 0x3c, 0xee, 0x2e, 0xc1,
    0xa9, 0xf3, 0x59, 0x19, 0xf0, 0x3e, 0xa5, 0x7c, 0xa7, 0xae, 0x56, 0x8d, 0x10, 0xae, 0x92,
    0x42, 0xd2, 0xa2, 0x51, 0x14, 0xe6, 0xab, 0x6b, 0xf6, 0x27, 0xf1, 0xf2, 0x50, 0xec, 0x50,
    0xb5, 0xa7, 0xc7, 0x5c, 0x7f, 0xcf, 0xed, 0xd1, 0xf7, 0xe0, 0xb6, 0x04, 0xb3, 0x1f, 0x88,
    0xc0, 0x0f, 0x09, 0x52, 0xb5, 0x5d, 0xcd, 0x6a, 0xd9, 0xaa, 0x90, 0xd4, 0x87, 0x75, 0xbd,
    0x76, 0xd6, 0x30, 0x13, 0xcd, 0x84, 0x09, 0x98, 0xcb, 0xc1, 0xce, 0x3b, 0x2d, 0xea, 0xa3,
    0xce, 0x5e, 0x14, 0xb2, 0xd2, 0x65, 0x5d, 0x32, 0xcb, 0x07, 0x3f, 0xaf, 0x2d, 0x29, 0x4a,
    0xf8, 0xb8, 0xa3, 0xd2, 0xcd, 0x67, 0x96, 0xcc, 0xab, 0x4e, 0x0a, 0x9e, 0x43, 0x4a, 0xc8,
    0x2b, 0xda, 0xf9, 0x1c, 0x48, 0x7d, 0xd8, 0x5e, 0xdb, 0xe9, 0x93, 0x2f, 0xe5, 0x74, 0x80,
    0x31, 0xe6, 0x98, 0x93, 0x31, 0x25, 0xeb, 0xf6, 0x97, 0xb1, 0xe6, 0x7e, 0x6c, 0xf4, 0x15,
    0xba, 0x52, 0xc1, 0x58, 0x15, 0xc4, 0xd8, 0x16, 0xe8, 0xa5, 0x17, 0xcd, 0x89, 0x1f, 0x6d,
    0x38, 0x56, 0xbb, 0x20, 0x2e, 0x42, 0xb1, 0x63, 0xd1, 0xb6, 0x03, 0xc9, 0xb6, 0x63, 0x62,
    0x04, 0x7a, 0xde, 0x51, 0x0a, 0xc6, 0x79, 0x70, 0xb7, 0x24, 0xfc, 0xc9, 0xfb, 0x4c, 0x0a,
    0xc2, 0xe8, 0xd2, 0xcd, 0xdb, 0xc4, 0x5e, 0x4d, 0xa7, 0x38, 0x9d, 0x2d, 0xca, 0x7a, 0x4f,
    0x40, 0x35, 0x02, 0xb8, 0xdd, 0xee, 0xbe, 0xbb, 0x96, 0x3a, 0xed, 0x42, 0x87, 0x1d, 0x04,
    0x0f, 0x6f, 0xeb, 0x1c, 0xd8, 0xd3, 0x7b, 0x38, 0x85, 0x46, 0x59, 0x53, 0x64, 0xe0, 0x26,
    0x13, 0x5a, 0x11, 0xf9, 0x39, 0x49, 0x1a, 0xfc, 0xab, 0x15, 0x4d, 0xe8, 0x85, 0xe1, 0xfe,
    0x36, 0x1a, 0x01, 0x3a, 0x39, 0x1f, 0x77, 0xa0, 0xf7, 0x76, 0x09, 0x96, 0x8b, 0xa4, 0xfe,
    0xfb, 0xd4, 0xdb, 0x13, 0x62, 0x7f, 0x66, 0x81, 0xce, 0x34, 0x27, 0xf4, 0x29, 0xa6, 0x88,
    0x13, 0xc0, 0x29, 0xeb, 0x99, 0x1f, 0x7d, 0xf4, 0x31, 0xa0, 0x3e, 0x26, 0x18, 0x5a, 0x25,
    0x6d, 0x71, 0x8f, 0x73, 0x97, 0xa5, 0x08, 0xac, 0x20, 0xfc, 0x1d, 0x5b, 0xc5, 0x9a, 0xa4,
    0x16, 0x6d, 0x3f, 0x60, 0x07, 0x0e, 0xc1, 0xe7, 0xff, 0x78, 0xd3, 0xcb, 0xe0, 0xea, 0xc4,
    0xf9, 0x84, 0x44, 0xfd, 0x49, 0xf2, 0x5c, 0xe9, 0xd3, 0x67, 0xb2, 0xfc, 0x44, 0x33, 0x69,
    0x22, 0xab, 0xe7, 0x4b, 0x9f, 0xc0, 0x4f, 0x8d, 0x3e, 0xed, 0xdc, 0x40, 0x81, 0x23, 0x6a,
    0x6f, 0x77, 0x02, 0x12, 0xfd, 0x8d, 0x2c, 0x5f, 0x7d, 0xa9, 0x24, 0x2e, 0xae, 0xe9, 0xaa,
    0xf2, 0x7d, 0x85, 0xf9, 0xe7, 0x2d, 0xef, 0x68, 0x59, 0x7a, 0xc4, 0x7a, 0x3e, 0x3a, 0x1c,
    0xee, 0x32, 0x63, 0x7a, 0x34, 0xe1, 0xda, 0xc7, 0x66, 0xef, 0x50, 0xef, 0x35, 0x33, 0xc5,
    0x44, 0xc2, 0x95, 0x76, 0x2c, 0x7d, 0xa4, 0xa9, 0xca, 0xca, 0xc7, 0x33, 0x1e, 0x3a, 0x67,
    0xba, 0x07, 0x46, 0x18, 0x88, 0x24, 0x9e, 0x00, 0xa4, 0xd7, 0xd1, 0x9b, 0x45, 0xe9, 0x0a,
    0xfb, 0x99, 0xb5, 0xcc, 0x87, 0x13, 0x98, 0x0e, 0x27, 0x30, 0x1b, 0xae, 0x12, 0x12, 0x92,
    0xce, 0x85, 0x6b, 0x26, 0xd0, 0xc3, 0xa4, 0x19, 0x75, 0xff, 0x34, 0x63, 0x88, 0xd1, 0x8c,
    0x1d, 0xa5, 0xf2, 0xea, 0x81, 0x70, 0xc4, 0xcd, 0xbb, 0x26, 0x43, 0xa9, 0xa3, 0xa5, 0x97,
    0x86, 0x43, 0x2b, 0x6c, 0x6b, 0x83, 0xb7, 0x62, 0xad, 0x6d, 0xbd, 0x84, 0x4c, 0x19, 0x68,
    0x11, 0x35, 0x6d, 0xc7, 0x51, 0x01, 0xf7, 0x6b, 0xae, 0x20, 0x03, 0x0c, 0x8a, 0xb6, 0x9b,
    0x4d, 0x60, 0xdb, 0xe6, 0xc4, 0xab, 0x06, 0xd9, 0x7c, 0xba, 0x87, 0xa0, 0xb7, 0xc7, 0x4f,
    0xbe, 0x0f, 0x67, 0xec, 0xd8, 0xab, 0x1c, 0x36, 0x37, 0xcf, 0x63, 0xda, 0x48, 0x2e, 0x55,
    0xd9, 0x9e, 0x67, 0x9a, 0x97, 0x41, 0x7d, 0x0f, 0x7b, 0x51, 0xd5, 0xda, 0xf7, 0x3c, 0x0c,
    0xa9, 0x85, 0xf1, 0xd0, 0x87, 0xbd, 0x28, 0xd5, 0x26, 0x3e, 0x87, 0x1c, 0x31, 0x15, 0xe8,
    0xae, 0xb6, 0x5b, 0x8f, 0xe2, 0xe3, 0x5b, 0x56, 0x30, 0xed, 0x31, 0x4f, 0x3c, 0x15, 0x19,
    0x23, 0x32, 0xa3, 0xfe, 0x60, 0x66, 0xad, 0x1c, 0x0c, 0xf1, 0x09, 0xcc, 0x0e, 0x3a, 0xd0,
    0x29, 0x79, 0x52, 0xdf, 0x78, 0x6c, 0x4a, 0x5f, 0x8a, 0x72, 0xe7, 0x83, 0x4f, 0xb4, 0xba,
    0xea, 0x5a, 0x73, 0x4f, 0xd6, 0x20, 0xc9, 0xbe, 0xc6, 0x98, 0x6c, 0xfe, 0x6a, 0xa1, 0x81,
    0x95, 0x83, 0x12, 0xa0, 0xac, 0x03, 0xed, 0x86, 0x52, 0x03, 0x62, 0xff, 0x7e, 0x62, 0x0b,
    0xe9, 0x15, 0x30, 0xeb, 0x10, 0xfd, 0xb5, 0x34, 0x16, 0x11, 0x10, 0xb6, 0x02, 0x17, 0x72,
    0x1c, 0x21, 0x02, 0xa7, 0x16, 0x84, 0x31, 0x71, 0xb0, 0x2b, 0xd5, 0xde, 0x5d, 0x8f, 0x12,
    0x07, 0xe9, 0x7a, 0x34, 0x3b, 0xa1, 0xa9, 0x51, 0x62, 0x28, 0x83, 0xda, 0x57, 0x75, 0xf5,
    0xa2, 0x85, 0x6d, 0x93, 0xa8, 0x42, 0x58, 0x3d, 0x5d, 0x06, 0xa4, 0x3f, 0x6f, 0xc9, 0xa6,
    0x0d, 0x38, 0x65, 0x83, 0x80, 0x6b, 0x85, 0x49, 0x13, 0x31, 0x1c, 0xb3, 0x49, 0x2b, 0x14,
    0xc8, 0x93, 0x4f, 0x93, 0xcc, 0xa8, 0x23, 0x8d, 0xcd, 0x1b, 0xc3, 0xb7, 0xca, 0x0a, 0xac,
    0x89, 0x30, 0x87, 0x23, 0x04, 0xf3, 0xef, 0x3a, 0x55, 0x35, 0x87, 0xa7, 0x28, 0x1b, 0x00,
    0x43, 0x58, 0xd5, 0x34, 0x9a, 0x47, 0x73, 0xb5, 0xc3, 0x79, 0xaa, 0x8a, 0x53, 0x88, 0x11,
    0x81, 0x3b, 0x16, 0x20, 0xe8, 0x59, 0xcf, 0x5c, 0xf0, 0xd5, 0x45, 0x4c, 0x47, 0x62, 0x57,
    0x3b, 0xb6, 0x4b, 0x18, 0x4f, 0x6c, 0x6e, 0x93, 0xd8, 0x8b, 0x28, 0x0e, 0x66, 0x25, 0x50,
    0x38, 0xd8, 0xf3, 0xf1, 0x31, 0x88, 0xe8, 0x7a, 0xe3, 0x60, 0x53, 0x21, 0x94, 0xed, 0x60,
    0x5b, 0xa6, 0x16, 0xf6, 0x95, 0xd0, 0xd7, 0x5c, 0xbc, 0xed, 0x35, 0x10, 0xab, 0xe4, 0xca,
    0x1e, 0x22, 0xb1, 0xad, 0x30, 0x1e, 0x7c, 0x24, 0x56, 0xed, 0x2d, 0x79, 0xb5, 0x81, 0xb6,
    0xa8, 0xbb, 0x72, 0x43, 0x7d, 0x30, 0x51, 0x35, 0x45, 0x6b, 0x37, 0xdb, 0xba, 0xc4, 0x74,
    0xa5, 0xc7, 0xfa, 0xc6, 0xef, 0x1e, 0xd1, 0xbd, 0x87, 0xb8, 0xb0, 0x40, 0xcb, 0xfa, 0x03,
    0x0c, 0x9f, 0x1c, 0x2b, 0xa8, 0xed, 0x17, 0xe1, 0x87, 0x1b, 0x61, 0x66, 0x18, 0xdf, 0x38,
    0xbc, 0x6f, 0xbb, 0x63, 0xf7, 0xe3, 0xb8, 0x6b, 0x46, 0xed, 0xad, 0x19, 0x96, 0xde, 0x23,
    0xf4, 0x15, 0xde, 0x3e, 0x9c, 0x2d, 0x08, 0x86, 0xc9, 0x73, 0x54, 0xd3, 0xc2, 0x1a, 0x5b,
    0x8f, 0xef, 0x9b, 0x69, 0xf6, 0x15, 0x56, 0x57, 0x94, 0xea, 0x95, 0x4e, 0xf9, 0x68, 0x76,
    0x54, 0xff, 0xba, 0xec, 0x04, 0xa5, 0x7d, 0xb0, 0xdf, 0x5e, 0xc3, 0xf3, 0x3f, 0xc0, 0x33,
    0x13, 0x76, 0xf2, 0xfb, 0x0b, 0xcd, 0x17, 0xa1, 0xd8, 0x5e, 0x58, 0xbe, 0x02, 0xc9, 0x4e,
    0xd1, 0x86, 0xb1, 0x83, 0xf4, 0x92, 0x32, 0x77, 0xe4, 0x06, 0x62, 0xda, 0x36, 0x99, 0xc7,
    0x64, 0x25, 0x33, 0x7c, 0xb1, 0x37, 0x13, 0x50, 0x95, 0x54, 0x18, 0x4f, 0x4b, 0x9b, 0x49,
    0x49, 0x85, 0x6b, 0x79, 0x69, 0x6e, 0xd6, 0xee, 0xce, 0x53, 0xa1, 0x0d, 0xb3, 0xbd, 0x33,
    0x1b, 0x48, 0xec, 0x7c, 0x08, 0x28, 0xa0, 0x9b, 0x17, 0x92, 0x38, 0xa5, 0x91, 0xce, 0xe9,
    0x0e, 0xb5, 0x24, 0xc5, 0xe9, 0xbf, 0xa5, 0x2f, 0x6c, 0xad, 0x62, 0x63, 0xd5, 0xd0, 0xc7,
    0x99, 0xc9, 0x55, 0x08, 0xf6, 0x51, 0x53, 0x8d, 0x2d, 0x9f, 0x78, 0xd4, 0x94, 0x4f, 0x95,
    0x91, 0x67, 0xb4, 0x27, 0xe2, 0x1b, 0x88, 0x39, 0x7a, 0x1c, 0xd8, 0x37, 0x8d, 0x43, 0x5a,
    0x4a, 0x2a, 0x14, 0x18, 0x3e, 0x7b, 0x18, 0xa4, 0x87, 0x2d, 0x48, 0xa9, 0x4f, 0xf7, 0xf1,
    0x21, 0xbf, 0x02, 0xb3, 0x70, 0xf2, 0xfb, 0xf3, 0xee, 0xc9, 0xaf, 0x3d, 0x95, 0x0a, 0xc9,
    0x82, 0x5a, 0x13, 0x34, 0x5c, 0x8b, 0xec, 0xdc, 0x8a, 0x0c, 0xa5, 0x1f, 0xaf, 0x37, 0x68,
    0x85, 0xcc, 0xd9, 0x22, 0xfd, 0xf5, 0xde, 0x7a, 0xa0, 0xc1, 0x42, 0x39, 0xf5, 0xbb, 0x62,
    0x6c, 0xbf, 0xba, 0x61, 0xac, 0xf1, 0x93, 0x07, 0x44, 0x56, 0x1e, 0x79, 0xbc, 0x72, 0x32,
    0x2d, 0xb9, 0x30, 0x0c, 0xff, 0xea, 0xc5, 0x93, 0xb7, 0x60, 0x12, 0x27, 0x4d, 0x77, 0xa2,
    0x8d, 0x5b, 0xde, 0x94, 0x6e, 0xb7, 0xd7, 0xc7, 0x79, 0x8f, 0xb1, 0xd0, 0xc7, 0x2f, 0x22,
    0x03, 0x27, 0x0e, 0x79, 0x48, 0x9a, 0x1b, 0x47, 0x74, 0xa0, 0x0d, 0x4e, 0x9b, 0x99, 0x03,
    0x58, 0x73, 0x66, 0x49, 0xcc, 0x36, 0x14, 0xe9, 0x96, 0xf9, 0x43, 0xa9, 0xb3, 0x5f, 0x7f,
    0x64, 0x5b, 0x1f, 0xcb, 0xb4, 0x12, 0xa5, 0xea, 0x4e, 0x56, 0x80, 0xda, 0x8e, 0x1f, 0xe9,
    0xd7, 0x5a, 0x4c, 0xf1, 0x0b, 0x67, 0xf7, 0x41, 0x38, 0x2d, 0x6b, 0xc9, 0x35, 0x27, 0x90,
    0x09, 0xb7, 0x91, 0xb4, 0x2f, 0xe5, 0x9d, 0x13, 0x77, 0x37, 0x88, 0x5c, 0xa4, 0xcd, 0x9f,
    0xac, 0x78, 0xfc, 0xbb, 0xcf, 0x80, 0xe7, 0x46, 0x2e, 0x26, 0x6f, 0x3f, 0x7a, 0xb5, 0xb8,
    0x5b, 0xdb, 0x5f, 0x53, 0x96, 0x2a, 0x24, 0x27, 0xe7, 0x6a, 0xa6, 0x83, 0x82, 0x8e, 0xa3,
    0x41, 0x48, 0x07, 0x69, 0xed, 0x73, 0xd3, 0xc6, 0x24, 0x86, 0xe3, 0x4c, 0xce, 0xb7, 0x07,
    0xa8, 0xae, 0x95, 0x15, 0x5d, 0xb1, 0x9e, 0x15, 0x94, 0xf5, 0xc6, 0xda, 0x8b, 0x05, 0xd4,
    0xd4, 0x81, 0x2a, 0xf3, 0x34, 0xf0, 0xfb, 0xf5, 0x95, 0x1f, 0xf8, 0xcb, 0x59, 0xb0, 0x88,
    0xe1, 0x70, 0x69, 0xc9, 0x30, 0xa5, 0x8a, 0x77, 0x61, 0x70, 0xe7, 0x39, 0x5b, 0x63, 0xff,
    0xb5, 0xfb, 0x2b, 0xa1, 0xca, 0x95, 0xa1, 0x0f, 0xfb, 0x5d, 0x5b, 0x09, 0x70, 0x52, 0xaa,
    0x25, 0xaf, 0x00, 0x27, 0x77, 0x00, 0x7c, 0x29, 0xe9, 0x95, 0x25, 0xdd, 0x83, 0x39, 0x82,
    0x95, 0xa7, 0x41, 0x84, 0x7d, 0x3d, 0x58, 0x7b, 0xe2, 0xe4, 0xcb, 0x0e, 0x01, 0x8e, 0x0e,
    0xe1, 0x69, 0x70, 0xad, 0xe8, 0xe9, 0x5f, 0x99, 0xb7, 0x0e, 0x85, 0x53, 0xe5, 0x6a, 0x69,
    0xab, 0xd8, 0xd8, 0x49, 0xbe, 0xd2, 0x96, 0x86, 0x56, 0xa9, 0x4a, 0xbb, 0x5f, 0x35, 0x67,
    0x72, 0x15, 0x15, 0xaf, 0xc8, 0xe9, 0x9a, 0xcd, 0x1d, 0xe2, 0xe2, 0xe1, 0x6f, 0xe2, 0x11,
    0xf5, 0x39, 0xc8, 0xed, 0x17, 0xb9, 0xe9, 0x39, 0x54, 0xd3, 0x17, 0xe9, 0xba, 0x1e, 0xce,
    0x65, 0xc9, 0xe9, 0x32, 0x3d, 0x97, 0xd7, 0x62, 0x61, 0x8a, 0x46, 0x79, 0xd9, 0xca, 0xe7,
    0xe2, 0xb3, 0x08, 0xcc, 0xbe, 0x8c, 0xa6, 0x26, 0x78, 0xf6, 0x21, 0xa6, 0xd4, 0x35, 0x86,
    0x1d, 0x35, 0x7b, 0x08, 0xe4, 0x39, 0x80, 0x92, 0x1a, 0x6f, 0xc8, 0x10, 0xbd, 0xdb, 0x0a,
    0x34, 0xf3, 0x35, 0xa7, 0x1d, 0xc3, 0xa9, 0xb6, 0x07, 0x55, 0xee, 0xaa, 0x83, 0xa7, 0xb6,
    0x97, 0x82, 0x67, 0x86, 0x6d, 0x4d, 0xdf, 0x2d, 0xc6, 0x53, 0xcf, 0x5e, 0x2b, 0xf7, 0xbe,
    0xb9, 0x53, 0x07, 0xcf, 0xee, 0xe5, 0x8e, 0x62, 0x9a, 0xcd, 0x9d, 0x4b, 0x5a, 0xc1, 0x3c,
    0x52, 0xdf, 0x56, 0x12, 0xbd, 0xd9, 0x2e, 0xa3, 0xac, 0x9d, 0xde, 0x69, 0x5f, 0x3f, 0xc7,
    0x24, 0x7b, 0xa3, 0xdb, 0xe7, 0xf9, 0x29, 0x28, 0x3b, 0xd4, 0x8e, 0xba, 0xf2, 0x95, 0x69,
    0x5d, 0xa4, 0x3a, 0xbf, 0x40, 0x45, 0x2b, 0x34, 0x16, 0x3d, 0xb5, 0x55, 0x04, 0xf5, 0x1e,
    0xb4, 0x63, 0xe7, 0xf5, 0x83, 0xf5, 0x99, 0xb0, 0xfb, 0xa9, 0x60, 0xfc, 0x07, 0x36, 0x27,
    0x43, 0x19, 0x7c, 0x56, 0x5e, 0x4a, 0x54, 0x42, 0x8e, 0x67, 0x6e, 0x17, 0xfb, 0x20, 0x4f,
    0x8d, 0x2c, 0x88, 0xa3, 0x26, 0x4f, 0xb9, 0xfd, 0xea, 0x78, 0x19, 0x2c, 0xc2, 0x0f, 0x60,
    0x6d, 0x1e, 0xb1, 0x1a, 0x57, 0x67, 0x2f, 0x35, 0x5b, 0x7c, 0xcd, 0x72, 0xab, 0xb4, 0x70,
    0x79, 0x6b, 0x79, 0x8a, 0x6b, 0x62, 0xad, 0x17, 0x81, 0x6f, 0x83, 0xc1, 0x4a, 0x0e, 0x93,
    0x24, 0x78, 0x5f, 0x24, 0x16, 0xd6, 0xa9, 0xd9, 0xc8, 0x5e, 0x94, 0xc0, 0x1a, 0x6d, 0x71,
    0x9a, 0xcb, 0x94, 0xf6, 0xec, 0xa0, 0x03, 0xe2, 0xb2, 0x2d, 0x30, 0x59, 0x0d, 0xe1, 0x35,
    0xdb, 0x4b, 0x32, 0x0f, 0x09, 0x9d, 0xaa, 0xd6, 0x8f, 0x7d, 0xef, 0xa4, 0xcf, 0xc3, 0xaf,
    0x22, 0x32, 0x25, 0x51, 0x2e, 0xb0, 0x5a, 0xe0, 0xb9, 0x3c, 0xc5, 0xe4, 0xbe, 0x27, 0xc0,
    0x75, 0x50, 0xf7, 0xcf, 0x5a, 0x2d, 0x09, 0xb4, 0xc3, 0x35, 0x2e, 0x56, 0xd6, 0xb9, 0xd4,
    0x23, 0x34, 0x22, 0xe1, 0x9d, 0x67, 0x83, 0x7c, 0xf2, 0x03, 0x69, 0xbe, 0x08, 0xe7, 0x41,
    0x9d, 0x9d, 0xb7, 0x1a, 0xad, 0x05, 0x80, 0xdb, 0x91, 0xd2, 0x05, 0x31, 0x05, 0xe4, 0xf4,
    0x99, 0xb4, 0xfa, 0xbc, 0xb7, 0x75, 0x99, 0x9c, 0xc7, 0xbb, 0x1d, 0x2c, 0xa6, 0x0e, 0x36,
    0x65, 0xd7, 0x4a, 0x07, 0x8a, 0x73, 0x81, 0x79, 0xb9, 0x07, 0x5a, 0x02, 0x73, 0x9d, 0x6f,
    0x72, 0x00, 0x91, 0x86, 0x7a, 0x70, 0x76, 0x2e, 0x62, 0xaa, 0x29, 0x15, 0xc7, 0xaa, 0xb9,
    0xaa, 0x19, 0xfb, 0x14, 0x19, 0x2d, 0x27, 0x78, 0xc4, 0x31, 0x18, 0xa1, 0x22, 0x83, 0x63,
    0x04, 0xb4, 0x43, 0x05, 0x9f, 0x62, 0x7f, 0x10, 0xb2, 0xa0, 0x1e, 0xa0, 0x7d, 0x84, 0x1d,
    0xcd, 0x49, 0x56, 0xed, 0x70, 0x1e, 0x0c, 0xcd, 0xef, 0xa5, 0xb3, 0x87, 0x29, 0xd0, 0x82,
    0x08, 0xc9, 0x87, 0xea, 0xb8, 0xc4, 0x06, 0x92, 0x5f, 0xd9, 0x1c, 0xbd, 0xb5, 0x35, 0xfa,
    0x53, 0x16, 0x13, 0x52, 0xb3, 0xc2, 0xd0, 0x5a, 0x0a, 0xdd, 0xc8, 0x3c, 0xd9, 0xe3, 0x39,
    0xad, 0x49, 0x4b, 0xbb, 0xa1, 0x33, 0x67, 0x5c, 0xb0, 0xdb, 0x28, 0x73, 0x52, 0x36, 0xd7,
    0xd0, 0xda, 0x57, 0x61, 0x62, 0xcd, 0x36, 0x76, 0x6e, 0xf8, 0x28, 0xca, 0x4e, 0xd2, 0x4f,
    0xaf, 0x0a, 0x5e, 0x6d, 0x7c, 0xe1, 0x5a, 0x36, 0xd4, 0x8e, 0xbb, 0x44, 0x9d, 0xde, 0x79,
    0x6f, 0xdf, 0xdb, 0x24, 0x41, 0xd1, 0xdb, 0x71, 0xfc, 0xf5, 0xd5, 0x1d, 0xc1, 0x84, 0xbb,
    0xdd, 0x12, 0xcd, 0x8e, 0x25, 0x11, 0x4d, 0xda, 0x4b, 0xd3, 0xf2, 0xa4, 0x78, 0xe2, 0x45,
    0x2f, 0x3b, 0x72, 0xfb, 0x49, 0x57, 0x35, 0x0d, 0xa9, 0x15, 0x4b, 0xd9, 0xfc, 0xad, 0x7f,
    0x88, 0x2f, 0x5b, 0x4c, 0x71, 0xd4, 0x66, 0x53, 0x37, 0x9c, 0x5d, 0xc8, 0xc5, 0x75, 0xe7,
    0xba, 0x56, 0x48, 0xee, 0xc9, 0x74, 0xda, 0x6f, 0x51, 0x5e, 0x03, 0x4a, 0xf2, 0x68, 0x11,
    0x7b, 0x09, 0x6c, 0x7b, 0xca, 0x8c, 0xe9, 0xcd, 0x0e, 0xcb, 0x20, 0x3e, 0xbb, 0x92, 0x6e,
    0xc0, 0x19, 0x2f, 0x89, 0x34, 0xc6, 0x30, 0x2b, 0x80, 0xd2, 0xcb, 0x0c, 0x39, 0x3c, 0x49,
    0xe0, 0x9d, 0x1f, 0xa4, 0xd2, 0x7e, 0x43, 0xc6, 0x41, 0x3b, 0xb8, 0x0c, 0xa7, 0x9c, 0x7c,
    0x11, 0xa9, 0x95, 0x81, 0xd7, 0x7b, 0xf3, 0x6d, 0x9b, 0x00, 0x6a, 0x15, 0x90, 0x1d, 0x06,
    0x1f, 0xae, 0x30, 0xd5, 0xaa, 0xf7, 0xcf, 0xe5, 0xd3, 0xac, 0x9f, 0x4d, 0x5e, 0x73, 0xb4,
    0x8d, 0x94, 0x66, 0xb7, 0x11, 0xe7, 0xf9, 0xf2, 0x8a, 0xb3, 0xf7, 0x36, 0xfb, 0x1c, 0xd7,
    0x51, 0xeb, 0x3e, 0x9a, 0x82, 0x70, 0xa1, 0x58, 0xff, 0x46, 0x55, 0x65, 0x29, 0x01, 0x25,
    0x7c, 0x47, 0xc6, 0x10, 0xd2, 0x9b, 0x22, 0x3b, 0xdb, 0x43, 0x2c, 0x44, 0xd5, 0xab, 0xaa,
    0x3d, 0xbd, 0x4e, 0x30, 0x7f, 0xd5, 0x71, 0x11, 0x55, 0x6f, 0x0f, 0xbb, 0x22, 0x82, 0xbe,
    0xd9, 0x28, 0xe5, 0x9a, 0x74, 0xeb, 0x6d, 0xbb, 0xd5, 0xe9, 0x6b, 0x3f, 0x4c, 0xac, 0xf8,
    0x82, 0x57, 0x31, 0x6f, 0x82, 0xf8, 0x39, 0xb9, 0x7a, 0x69, 0xc5, 0xd6, 0x87, 0xe2, 0xcb,
    0x64, 0x9f, 0x62, 0xf5, 0xc7, 0xed, 0xa4, 0x64, 0x85, 0xe2, 0x24, 0x58, 0x09, 0xfb, 0xb6,
    0x19, 0x45, 0x3d, 0x91, 0xbc, 0x98, 0x0e, 0x5f, 0xf5, 0xa2, 0xff, 0x5e, 0x58, 0x53, 0xcf,
    0x88, 0xc3, 0xca, 0x49, 0xd8, 0x94, 0x58, 0x4b, 0x4a, 0x0a, 0x4c, 0xe1, 0x17, 0xb6, 0xb5,
    0x08, 0xfd, 0x82, 0x3f, 0x01, 0x30, 0xe2, 0x28, 0x2d, 0x3c, 0xc9, 0xde, 0x41, 0x27, 0xd0,
    0x78, 0x01, 0x18, 0xe7, 0xbe, 0xdc, 0x8d, 0x91, 0x1b, 0xf1, 0xd8, 0x45, 0xec, 0xa7, 0x4f,
    0xd2, 0xdc, 0xd7, 0xdc, 0x06, 0xdd, 0xa2, 0x2c, 0x6f, 0x93, 0x07, 0x5a, 0xcd, 0x90, 0xf3,
    0x3c, 0x68, 0xdf, 0xfa, 0x57, 0x2d, 0x0d, 0x34, 0xbd, 0xdd, 0xfe, 0xa2, 0xc9, 0xad, 0xbf,
    0x95, 0x8d, 0xdc, 0x8f, 0x18, 0x40, 0x82, 0x4b, 0x1a, 0x58, 0xef, 0xcf, 0x74, 0xaa, 0x07,
    0x1f, 0x97, 0x02, 0xf2, 0xe9, 0x5c, 0x13, 0x8a, 0xc5, 0x7f, 0x05, 0x4a, 0xb5, 0xee, 0xbc,
    0x2b, 0xf4, 0x15, 0x59, 0x61, 0xb8, 0xd7, 0x9f, 0xa4, 0x10, 0x19, 0xbe, 0x4e, 0xf1, 0x7c,
    0x54, 0x98, 0x40, 0xb3, 0x0f, 0xe9, 0xab, 0xad, 0xd1, 0xa5, 0xf7, 0x98, 0x89, 0x50, 0xd3,
    0x46, 0x99, 0xf3, 0xdb, 0xa4, 0xce, 0x54, 0x58, 0x39, 0xc9, 0xaf, 0x5b, 0x2b, 0x09, 0xf4,
    0x5e, 0xaf, 0x3c, 0xa6, 0x3f, 0x85, 0x94, 0x34, 0x26, 0x61, 0x27, 0x77, 0x95, 0x34, 0xf3,
    0x9f, 0xcf, 0xa7, 0x98, 0x86, 0x94, 0x42, 0x88, 0x16, 0xe9, 0x17, 0x20, 0x1e, 0xe9, 0x31,
    0x75, 0x1b, 0x2f, 0xbc, 0xa9, 0x43, 0xc2, 0xe8, 0x5c, 0x72, 0x02, 0x6a, 0x48, 0x86, 0x24,
    0xa3, 0xae, 0x93, 0x70, 0x73, 0xae, 0x19, 0x89, 0xe7, 0xf3, 0xee, 0x23, 0x62, 0x39, 0xaf,
    0x38, 0xd9, 0x87, 0xb7, 0x98, 0x46, 0xe2, 0xbf, 0x12, 0xf9, 0xa4, 0xaa, 0xed, 0x39, 0x20,
    0x32, 0x9d, 0x06, 0x9b, 0xa7, 0xc0, 0x02, 0xb1, 0x28, 0x25, 0x30, 0x9a, 0xb8, 0x8f, 0xbd,
    0xe0, 0xe6, 0xbb, 0xf0, 0xef, 0xd2, 0xf5, 0xce, 0x2a, 0x40, 0xd4, 0x2a, 0x20, 0x2b, 0x7b,
    0x8b, 0x03, 0x5a, 0xd7, 0x33, 0x6a, 0xe3, 0x4c, 0x5d, 0x21, 0x76, 0x11, 0x92, 0x3f, 0xef,
    0x0a, 0xe2, 0x10, 0x8c, 0x91, 0x1c, 0x40, 0xbb, 0xe7, 0x77, 0x63, 0xb8, 0x22, 0xb4, 0xd7,
    0xe6, 0xd7, 0xac, 0x6c, 0x8d, 0xa1, 0x58, 0x7b, 0xc3, 0xb7, 0xf5, 0x93, 0x31, 0x8e, 0x7a,
    0xf8, 0xb6, 0x30, 0x2a, 0x36, 0x32, 0xf6, 0xd7, 0xd0, 0x8b, 0xc9, 0x36, 0x50, 0xda, 0xc9,
    0xc9, 0xf8, 0x81, 0xe6, 0x93, 0x45, 0xc5, 0xf4, 0xa6, 0xc3, 0x10, 0x28, 0x19, 0x64, 0x6b,
    0xac, 0x72, 0x6c, 0x5f, 0x91, 0xce, 0xbb, 0x93, 0x52, 0xa3, 0x6a, 0xfb, 0xfa, 0x36, 0x29,
    0xb3, 0xf7, 0x83, 0x11, 0x57, 0x5b, 0xe2, 0x9f, 0x51, 0x7b, 0x84, 0xda, 0x0d, 0x82, 0xce,
    0xb3, 0x51, 0x72, 0xc4, 0x8f, 0x37, 0xd7, 0xd7, 0xba, 0x62, 0xf2, 0x5e, 0xaa, 0xfb, 0xe3,
    0x12, 0x1c, 0x5d, 0xf8, 0x81, 0x7f, 0x95, 0x95, 0xa9, 0xe3, 0xd4, 0xc3, 0xb7, 0x2e, 0xfe,
    0x8b, 0xfc, 0x40, 0x42, 0x2b, 0x5a, 0x80, 0xaf, 0xd1, 0x30, 0xe7, 0xf5, 0x74, 0xea, 0xd4,
    0x37, 0x5a, 0xd8, 0x6c, 0xbb, 0x75, 0x3e, 0xb6, 0x72, 0xc4, 0x79, 0x64, 0x7a, 0x51, 0x00,
    0xed, 0x39, 0x9c, 0x63, 0xeb, 0x1f, 0x42, 0x91, 0x93, 0x26, 0x1e, 0x38, 0x18, 0xb9, 0xd8,
    0x19, 0x27, 0x80, 0x5c, 0xa1, 0x5e, 0x56, 0xbb, 0x9f, 0x2d, 0xd0, 0x28, 0x73, 0xf6, 0x2d,
    0x2b, 0x00, 0xed, 0x5a, 0xf8, 0xd5, 0xa4, 0x22, 0x9c, 0xae, 0xf0, 0xd3, 0xda, 0x5d, 0x0c,
    0xe8, 0x1d, 0x78, 0xbf, 0xf9, 0xfc, 0xbe, 0x5e, 0x21, 0xa0, 0xb5, 0x4b, 0xd8, 0x89, 0x15,
    0x0f, 0x82, 0xb8, 0xb3, 0x0c, 0xd8, 0x68, 0xa6, 0xef, 0xf5, 0x8f, 0xf0, 0xa3, 0x3e, 0x34,
    0x7d, 0xd9, 0xf7, 0x15, 0x5e, 0x19, 0x90, 0x5d, 0x33, 0xbd, 0xb1, 0x22, 0x83, 0xa5, 0x0c,
    0x20, 0x32, 0xd5, 0x83, 0xc1, 0xa6, 0xba, 0x7b, 0x74, 0xea, 0xc2, 0xe8, 0x54, 0x57, 0xe3,
    0x34, 0xd8, 0x33, 0x1a, 0x01, 0x80, 0x5d, 0x63, 0x6f, 0xd0, 0x86, 0x3d, 0x80, 0xa9, 0x09,
    0xaf, 0x99, 0x64, 0x7b, 0x4b, 0x1b, 0x66, 0x24, 0x7d, 0xdf, 0xf7, 0x86, 0xc1, 0x5a, 0x68,
    0x71, 0xe7, 0x30, 0x5c, 0x51, 0xad, 0xb7, 0x1a, 0xc8, 0x83, 0xd1, 0x5a, 0xdb, 0xba, 0x9d,
    0x09, 0x5c, 0xe1, 0xef, 0xfe, 0x46, 0xef, 0x0d, 0x6e, 0xb4, 0xcf, 0x1a, 0xae, 0x8d, 0xe8,
    0x16, 0x9a, 0x2e, 0x1e, 0x7e, 0x43, 0x23, 0xba, 0x8a, 0x35, 0xb5, 0xc3, 0x5c, 0x95, 0x61,
    0x68, 0xfa, 0x96, 0xfd, 0x9e, 0x3a, 0x4b, 0x98, 0x02, 0xed, 0x1b, 0xc6, 0xfd, 0xb2, 0xc3,
    0xc5, 0x14, 0x04, 0xb1, 0xd8, 0x1e, 0x6c, 0xb7, 0x77, 0x2b, 0x54, 0x98, 0x88, 0xcf, 0x45,
    0x97, 0x5b, 0x12, 0x29, 0x39, 0x7e, 0xcb, 0x25, 0x05, 0xbc, 0xb6, 0x3e, 0x13, 0x09, 0xf5,
    0x4b, 0x1d, 0x8d, 0x68, 0x03, 0x93, 0x88, 0xce, 0x1d, 0x61, 0x2c, 0x35, 0x5d, 0x62, 0x4f,
    0x29, 0x71, 0xa4, 0xc0, 0xe7, 0x3d, 0xaf, 0x22, 0xda, 0xe0, 0x3c, 0xcb, 0x3a, 0x15, 0xbb,
    0xaf, 0xd9, 0xe8, 0xee, 0x45, 0x8c, 0x6a, 0xd4, 0xe4, 0x85, 0x1f, 0xab, 0x2b, 0x2d, 0xd4,
    0xca, 0x10, 0x08, 0xa5, 0xdd, 0x5b, 0xd1, 0x0d, 0x29, 0xf9, 0x79, 0x9b, 0x95, 0xcc, 0xd4,
    0x80, 0x6b, 0xd4, 0xcc, 0xac, 0x22, 0x99, 0x13, 0x17, 0xf8, 0x70, 0x6e, 0x62, 0x99, 0xf7,
    0x8f, 0xd2, 0x15, 0x13, 0x11, 0x76, 0x2a, 0xad, 0x5e, 0x4c, 0x88, 0xfd, 0x39, 0x62, 0xa2,
    0xcd, 0x46, 0x02, 0x9f, 0x65, 0x31, 0x8d, 0x59, 0x32, 0x7c, 0x96, 0x09, 0xcf, 0x98, 0x5a,
    0x03, 0x87, 0x48, 0xb7, 0xac, 0x3e, 0x07, 0xcb, 0x44, 0x83, 0x30, 0x04, 0x92, 0x9a, 0x2e,
    0x44, 0x56, 0x71, 0xa7, 0x7b, 0x10, 0x57, 0xa6, 0x56, 0x37, 0xc2, 0xfa, 0x84, 0xc5, 0x95,
    0xb5, 0xd7, 0x6a, 0xa6, 0x29, 0x3b, 0x62, 0x02, 0x6b, 0x65, 0x86, 0xcf, 0x0e, 0x2b, 0x00,
    0xd4, 0xd4, 0xc4, 0x5e, 0xbc, 0x43, 0x4b, 0xae, 0x11, 0xfa, 0x3e, 0x6f, 0x10, 0x6b, 0xa1,
    0x83, 0x6b, 0x60, 0xd4, 0x94, 0x36, 0xa7, 0x98, 0x5d, 0x0d, 0xe4, 0xc1, 0x68, 0x8a, 0x7d,
    0xc7, 0x1a, 0x02, 0x7d, 0xb3, 0xa2, 0x85, 0x0d, 0x46, 0x9c, 0x50, 0x57, 0x9b, 0x1e, 0xe3,
    0x07, 0xd3, 0x37, 0xfe, 0x00, 0x1a, 0xc6, 0x1b, 0xc6, 0xd7, 0x35, 0x4f, 0x07, 0x36, 0xdc,
    0x04, 0xfe, 0x10, 0xab, 0xb8, 0x6b, 0x83, 0x25, 0xed, 0xc4, 0xbd, 0xc7, 0xb8, 0x7b, 0x05,
    0x7d, 0x90, 0xf7, 0xe0, 0xeb, 0x72, 0xba, 0x60, 0xc3, 0xed, 0x52, 0xd7, 0xf6, 0xac, 0xe0,
    0xe9, 0xbb, 0xf9, 0x22, 0xa4, 0xbe, 0xac, 0x7f, 0x97, 0xbe, 0xc0, 0x0f, 0xa9, 0x51, 0x1f,
    0x58, 0x24, 0x96, 0xb1, 0x25, 0x16, 0x8c, 0x58, 0xdd, 0x95, 0x60, 0x77, 0x3d, 0x06, 0xd4,
    0xc8, 0xfd, 0x42, 0x53, 0x90, 0x02, 0xb6, 0x7a, 0xe9, 0x08, 0x92, 0x0c, 0xc6, 0xb6, 0x58,
    0xb9, 0xfc, 0x86, 0x3e, 0x99, 0x4f, 0xa0, 0x47, 0x88, 0xc0, 0xf4, 0x47, 0x9f, 0x7c, 0xe9,
    0xda, 0xd1, 0xc7, 0xc0, 0xe8, 0x06, 0x92, 0x6c, 0xe4, 0x3f, 0x0a, 0x30, 0xde, 0xbc, 0x8d,
    0x6d, 0x5d, 0x47, 0xd6, 0xf3, 0x5d, 0x7a, 0xda, 0x52, 0xb4, 0x18, 0xd3, 0xf6, 0x4b, 0x38,
    0xd6, 0x92, 0x3e, 0xfb, 0xc1, 0xbd, 0xcf, 0xfa, 0x31, 0x49, 0xf7, 0x13, 0xcf, 0x9e, 0x64,
    0x98, 0xd6, 0x98, 0x3d, 0x51, 0xdc, 0xdf, 0x1e, 0x3c, 0x6f, 0xdd, 0xac, 0x26, 0x1c, 0x66,
    0x55, 0x0f, 0xdd, 0xd7, 0xec, 0x69, 0x00, 0xc2, 0xda, 0x03, 0x8d, 0x3b, 0x4f, 0xc4, 0xe5,
    0xca, 0x27, 0xdd, 0xef, 0xcd, 0x08, 0x2b, 0x82, 0xb1, 0x7b, 0x6a, 0x1e, 0xd4, 0x8c, 0xdf,
    0x65, 0x03, 0x6c, 0x20, 0x90, 0xe2, 0x18, 0x8c, 0x63, 0xcb, 0xf3, 0x4b, 0x47, 0x42, 0x57,
    0x3b, 0x20, 0xb2, 0xbe, 0x93, 0xd1, 0xcb, 0x00, 0x6c, 0x2a, 0xab, 0x50, 0x6d, 0x4e, 0x81,
    0xac, 0x1f, 0xea, 0x69, 0xe8, 0x6b, 0x96, 0x39, 0x03, 0xbd, 0x3d, 0x58, 0xc8, 0xc4, 0x07,
    0x1f, 0x88, 0x48, 0x9e, 0x55, 0x27, 0xf9, 0x66, 0x13, 0x41, 0x74, 0x43, 0x51, 0xb3, 0x85,
    0x47, 0x14, 0xe7, 0x69, 0x6b, 0x95, 0x10, 0x2a, 0x83, 0xd0, 0xbf, 0x18, 0x6a, 0x69, 0xdb,
    0xef, 0x3e, 0x8b, 0xb5, 0x88, 0x9d, 0xc2, 0xbb, 0xdb, 0xf7, 0xd7, 0x65, 0x8f, 0xf9, 0x7d,
    0x02, 0x6d, 0x3d, 0xc5, 0xdb, 0xac, 0x36, 0x1e, 0xdb, 0x0e, 0x38, 0x7f, 0x2f, 0xe8, 0xd3,
    0xef, 0xe8, 0x0f, 0xb6, 0x2b, 0xea, 0x0d, 0xbc, 0xd1, 0x8e, 0x99, 0xa8, 0x06, 0x6f, 0xfc,
    0x99, 0x92, 0x5b, 0x6c, 0x34, 0xbd, 0x4b, 0x03, 0xfd, 0x17, 0x58, 0xe0, 0x7a, 0x84, 0x5f,
    0x59, 0xd2, 0xc7, 0xb3, 0xf9, 0x22, 0x24, 0x1f, 0xcf, 0xca, 0x63, 0xcb, 0xd1, 0x6a, 0xcf,
    0x8e, 0xba, 0x0f, 0xc2, 0xcf, 0x5d, 0x6f, 0xc8, 0x9a, 0xf6, 0xbb, 0x07, 0x83, 0x7d, 0x30,
    0xba, 0x6a, 0xf8, 0x61, 0xc3, 0xed, 0x55, 0x42, 0xcc, 0x94, 0x61, 0xa7, 0xd4, 0x8f, 0x91,
    0x1d, 0x3e, 0x7b, 0xea, 0xf3, 0x0d, 0xcd, 0x9a, 0x26, 0x0a, 0x6a, 0xe2, 0xb0, 0x84, 0x86,
    0x28, 0x13, 0xaf, 0x19, 0xa4, 0xf4, 0x4b, 0x9e, 0x0f, 0xf2, 0xc5, 0x9a, 0x7a, 0xff, 0x28,
    0x21, 0xf5, 0x44, 0x26, 0x42, 0x62, 0xff, 0xac, 0x80, 0x95, 0x30, 0x9a, 0x5d, 0xec, 0x5e,
    0xfb, 0x88, 0x89, 0x15, 0x35, 0xa9, 0x02, 0x78, 0x10, 0xd1, 0x59, 0x07, 0xce, 0x77, 0x80,
    0x76, 0xab, 0x73, 0x2e, 0x68, 0x6f, 0xf6, 0x97, 0x95, 0x51, 0x90, 0xed, 0xfb, 0xe7, 0x05,
    0xc6, 0xa9, 0xd1, 0xbf, 0xaa, 0xaa, 0x2b, 0xf2, 0xe0, 0x1b, 0xf6, 0xbe, 0x53, 0x9a, 0xdf,
    0x7c, 0x72, 0xa3, 0x11, 0x9e, 0xcd, 0xd2, 0xb5, 0x37, 0xb2, 0xc5, 0xd2, 0xe8, 0xe3, 0x81,
    0x06, 0x6c, 0x81, 0x6b, 0x87, 0x3c, 0xd3, 0xb5, 0x2d, 0x42, 0xb1, 0xfb, 0x5d, 0x5d, 0x8e,
    0x96, 0xb5, 0x8f, 0xb2, 0x86, 0x07, 0x79, 0xf0, 0xea, 0x44, 0xa0, 0xa9, 0x79, 0xd2, 0xaf,
    0xe8, 0xe7, 0xdc, 0x91, 0x30, 0xf4, 0x1c, 0x7a, 0x78, 0xc2, 0x47, 0xb6, 0xd2, 0x16, 0x6b,
    0xcc, 0xf5, 0x18, 0xed, 0x86, 0xdf, 0x12, 0x74, 0x60, 0xb8, 0x31, 0x2b, 0xfa, 0x5d, 0x87,
    0x76, 0xca, 0xab, 0xe9, 0xd6, 0x4e, 0x4d, 0xcf, 0x29, 0x66, 0x4d, 0xc3, 0x46, 0x41, 0x32,
    0x91, 0xd2, 0x4a, 0x2e, 0x87, 0x33, 0xc4, 0xad, 0x19, 0xa4, 0xd3, 0x3b, 0xd9, 0x81, 0xc8,
    0x6e, 0x36, 0x26, 0xee, 0xe0, 0x45, 0xee, 0xa0, 0xbd, 0x63, 0xe4, 0x5e, 0x46, 0x84, 0x21,
    0xe0, 0x52, 0xaf, 0xd5, 0xf9, 0x80, 0xf7, 0xfa, 0x2e, 0xd9, 0x7d, 0x5b, 0xe0, 0x94, 0x22,
    0xad, 0xc6, 0x44, 0x25, 0x96, 0x8e, 0xd2, 0xfd, 0x12, 0xbf, 0x8b, 0xe1, 0xbb, 0xbd, 0x36,
    0x07, 0x42, 0x58, 0xc9, 0x0b, 0x0d, 0x3b, 0xfd, 0x9a, 0xaf, 0x5c, 0x00, 0x67, 0x42, 0x33,
    0x3a, 0xf3, 0x8d, 0x93, 0x06, 0x7d, 0xf8, 0x93, 0xc5, 0xb9, 0xc6, 0x1f, 0x93, 0xf8, 0x9e,
    0xbf, 0xeb, 0x18, 0x8d, 0xaa, 0x99, 0xc1, 0xd2, 0x9f, 0x4a, 0x03, 0x20, 0x7a, 0xe6, 0xa0,
    0xb4, 0x87, 0x65, 0xed, 0xd7, 0xa7, 0x7f, 0xed, 0xde, 0xd0, 0x37, 0x6a, 0x94, 0xd4, 0xd1,
    0xfa, 0x86, 0x80, 0xd6, 0xa9, 0x26, 0x05, 0x36, 0x59, 0xf9, 0x8d, 0x79, 0x9d, 0xf4, 0x5b,
    0x90, 0x4a, 0x58, 0xa4, 0xf3, 0x46, 0xde, 0xe5, 0xf0, 0xbf, 0x48, 0xc7, 0xa5, 0x6e, 0xd6,
    0x34, 0x24, 0x33, 0x2b, 0xfc, 0x4c, 0x91, 0x75, 0x43, 0xc8, 0x33, 0x69, 0x12, 0xc7, 0xf3,
    0xd9, 0xd3, 0xa7, 0xb7, 0x60, 0xa1, 0x2e, 0xc6, 0x97, 0x70, 0x50, 0x4f, 0xad, 0x7b, 0xd6,
    0xf9, 0xa9, 0x17, 0x45, 0x0b, 0x12, 0x3d, 0x55, 0x94, 0x5c, 0x3f, 0x85, 0x95, 0x14, 0x23,
    0xdf, 0x92, 0xcd, 0x7d, 0xa5, 0x79, 0x51, 0x19, 0xd3, 0x49, 0x41, 0x28, 0x45, 0x34, 0xd8,
    0xca, 0x2b, 0xd3, 0x8b, 0x16, 0x69, 0x62, 0xf9, 0xce, 0x94, 0x38, 0x42, 0x17, 0x2e, 0x75,
    0xda, 0x71, 0x0c, 0x6c, 0x30, 0xaa, 0xc6, 0xc0, 0x8e, 0x9d, 0x39, 0x55, 0x53, 0x6e, 0x8f,
    0x4d, 0xbd, 0x28, 0x7e, 0xeb, 0x5e, 0x67, 0x62, 0x74, 0x33, 0x96, 0x5b, 0x39, 0x21, 0x58,
    0x9f, 0x11, 0x5c, 0x4b, 0x1f, 0xcf, 0x71, 0x86, 0x5d, 0x65, 0xe9, 0x3f, 0x9f, 0x54, 0x1f,
    0x62, 0x58, 0x70, 0x91, 0xdb, 0x4b, 0xbc, 0x5f, 0xd8, 0x74, 0x84, 0xc1, 0x4e, 0x9b, 0x9b,
    0x8f, 0x6a, 0xd6, 0x1c, 0x15, 0x11, 0x0c, 0x46, 0xa2, 0x44, 0xc0, 0x6e, 0xad, 0x0e, 0x91,
    0x18, 0x64, 0x57, 0x0f, 0x34, 0xb0, 0xae, 0x20, 0x50, 0xda, 0x69, 0x60, 0x66, 0xcd, 0x4f,
    0x0e, 0xc0, 0xa6, 0x1e, 0x28, 0x80, 0x49, 0x81, 0xf6, 0xda, 0x24, 0x4a, 0x01, 0x27, 0x26,
    0xfa, 0x27, 0x80, 0x15, 0xc6, 0x61, 0x8d, 0x19, 0xd3, 0x66, 0x22, 0x5e, 0xfb, 0x6f, 0xe0,
    0xd1, 0x9c, 0xfe, 0x68, 0x4f, 0x17, 0x60, 0x13, 0xbf, 0x60, 0xd3, 0x7f, 0x2f, 0xbf, 0x07,
    0x73, 0x6f, 0xc1, 0x43, 0x41, 0xf8, 0x4e, 0x2e, 0x92, 0xa8, 0xca, 0xcd, 0xdd, 0x7a, 0x0a,
    0xf6, 0x13, 0xb4, 0x14, 0x8e, 0xbe, 0x19, 0x5d, 0xa7, 0x15, 0x6c, 0x54, 0xe5, 0xf6, 0x7c,
    0x6c, 0xe6, 0x5b, 0xf4, 0xfa, 0x36, 0xcb, 0x61, 0xdb, 0x28, 0x08, 0x29, 0x40, 0xcf, 0x7f,
    0xa3, 0x41, 0x0e, 0x2e, 0x38, 0x29, 0x0c, 0xf9, 0x1e, 0x62, 0x8d, 0xaa, 0xd2, 0x9c, 0x39,
    0x02, 0x6a, 0xbb, 0xfc, 0x72, 0xb2, 0x91, 0x49, 0x55, 0x11, 0x18, 0xf3, 0xbd, 0xeb, 0x02,
    0x9a, 0xd3, 0xc3, 0xd9, 0x18, 0xe9, 0xef, 0x8f, 0x88, 0x95, 0xea, 0xe0, 0xde, 0x07, 0x23,
    0xfd, 0x31, 0x52, 0x61, 0x4b, 0x0f, 0x6c, 0xc4, 0xf1, 0x7b, 0xc0, 0x6c, 0x14, 0x61, 0xbf,
    0xdd, 0xd6, 0x19, 0xff, 0x4a, 0x24, 0xdb, 0xf2, 0x93, 0xb9, 0xd8, 0xd4, 0x53, 0x2e, 0x47,
    0x6e, 0x08, 0x91, 0x30, 0xaa, 0x08, 0xff, 0xbb, 0xb0, 0x9d, 0xcf, 0xdf, 0xa8, 0xda, 0x40,
    0x14, 0xcd, 0xe3, 0xdb, 0xda, 0x71, 0x20, 0x4f, 0x1e, 0x9d, 0x5e, 0x3a, 0x0d, 0x6c, 0xaa,
    0x7e, 0x6a, 0x06, 0xd8, 0x6e, 0x72, 0xdf, 0xd7, 0x19, 0x71, 0x66, 0x07, 0x0b, 0x3f, 0x2e,
    0xd4, 0xec, 0xf1, 0xb5, 0x33, 0x06, 0x85, 0xfc, 0x51, 0xd3, 0xbf, 0x7e, 0x2b, 0xc0, 0xbb,
    0x7f, 0xb3, 0x53, 0xbd, 0x1b, 0xdd, 0xc5, 0x8e, 0x43, 0x50, 0x89, 0x54, 0x69, 0xf6, 0x3f,
    0xe3, 0x35, 0x89, 0x9d, 0x28, 0x98, 0x05, 0xe1, 0x7c, 0xe2, 0x45, 0xb3, 0x82, 0xc8, 0xa9,
    0xfd, 0x1b, 0x5d, 0x56, 0xbc, 0x08, 0x89, 0x15, 0x93, 0x52, 0x51, 0x35, 0x0e, 0x10, 0x7f,
    0xe1, 0x4c, 0x46, 0x7c, 0x74, 0x18, 0xb3, 0x1b, 0x86, 0x4f, 0xf8, 0xeb, 0xcb, 0xd9, 0x32,
    0x53, 0xf7, 0xf1, 0xf9, 0x27, 0x09, 0x20, 0x59, 0x58, 0xd3, 0xe9, 0x92, 0x8b, 0xa8, 0xe8,
    0x4f, 0x57, 0x7c, 0x62, 0x1d, 0xd1, 0xb0, 0x55, 0xa3, 0x87, 0x23, 0xc9, 0xf1, 0xc6, 0xc1,
    0x17, 0x10, 0x41, 0xa1, 0xee, 0x7f, 0xfd, 0x2e, 0x6c, 0x44, 0xfa, 0x78, 0x16, 0x01, 0x4a,
    0x16, 0xc2, 0x33, 0x80, 0x2f, 0xb1, 0xc8, 0x24, 0xc3, 0x19, 0x0e, 0x22, 0x9f, 0x87, 0x04,
    0xbf, 0x23, 0x4e, 0x23, 0x20, 0x02, 0x62, 0x32, 0x77, 0x0c, 0xa7, 0xe6, 0x45, 0xab, 0xa6,
    0x46, 0x87, 0xb7, 0x43, 0x17, 0xc2, 0xa6, 0x40, 0x61, 0x26, 0x23, 0xe0, 0xbe, 0x8b, 0x52,
    0xb4, 0xd2, 0x2c, 0x3c, 0x44, 0x44, 0x44, 0xf9, 0x41, 0x55, 0xf1, 0xb0, 0xf6, 0x94, 0xa7,
    0xe2, 0x41, 0xeb, 0xa0, 0x8a, 0x7e, 0xcd, 0xfb, 0xe6, 0xb9, 0x50, 0x3d, 0x33, 0x55, 0x9e,
    0x57, 0x93, 0x9a, 0xf0, 0x08, 0x8b, 0x2c, 0x8b, 0xab, 0xf6, 0x35, 0x8d, 0xfa, 0xbb, 0x44,
    0x2b, 0x7b, 0x68, 0xae, 0xa0, 0xb8, 0x35, 0x2f, 0xca, 0x7f, 0xab, 0x1c, 0x4a, 0x2f, 0xe2,
    0x75, 0xd3, 0xfe, 0x9a, 0x62, 0x85, 0x43, 0x16, 0x2d, 0xed, 0x43, 0x4b, 0x04, 0x0a, 0x0d,
    0xe6, 0x62, 0x1d, 0xf6, 0x26, 0x45, 0xe2, 0x85, 0x42, 0xb3, 0xaf, 0x36, 0x19, 0x7d, 0x75,
    0x3e, 0x6c, 0x3b, 0xfe, 0x04, 0xf2, 0xe9, 0xeb, 0x1b, 0xe7, 0xc2, 0x6f, 0x63, 0xb0, 0x8c,
    0x28, 0xdf, 0x75, 0xd4, 0xf5, 0xd0, 0x46, 0x5f, 0xb5, 0x2a, 0xa4, 0x23, 0xb1, 0xbf, 0x56,
    0xc8, 0x35, 0xba, 0x6f, 0x1d, 0xb4, 0xe8, 0x10, 0xb9, 0xb8, 0x44, 0xd7, 0x97, 0x59, 0xeb,
    0xdb, 0x5e, 0x2d, 0x23, 0x23, 0x39, 0x58, 0x8d, 0x20, 0x1e, 0xcd, 0x2d, 0xb2, 0x80, 0x08,
    0x0b, 0xa1, 0x89, 0x8b, 0xf0, 0xcd, 0x26, 0x98, 0x1d, 0xaf, 0x2c, 0x6f, 0xcf, 0x98, 0xdc,
    0x90, 0xb2, 0x1f, 0x6f, 0x0a, 0x93, 0x79, 0xbe, 0x0f, 0xc2, 0xfd, 0x17, 0xb1, 0xac, 0x82,
    0xd8, 0xa4, 0x76, 0xeb, 0x68, 0x64, 0xa5, 0x7a, 0xf5, 0x7c, 0xc8, 0x92, 0x5b, 0x68, 0x90,
    0xd2, 0x6e, 0xf7, 0xdd, 0x02, 0xf1, 0xbe, 0x26, 0xdf, 0x87, 0x1e, 0xf1, 0x9d, 0xe9, 0xb2,
    0xf9, 0x5d, 0x1f, 0xc5, 0x4b, 0xdf, 0xd1, 0x2c, 0xbc, 0x0f, 0x59, 0x44, 0x0b, 0x21, 0x5c,
    0x6f, 0x58, 0x57, 0x44, 0x78, 0xb5, 0x53, 0x28, 0x5d, 0xdc, 0x43, 0xd4, 0x22, 0x79, 0x03,
    0x02, 0x59, 0x6a, 0xff, 0x58, 0xc5, 0xb8, 0x58, 0x08, 0x63, 0x95, 0x44, 0x10, 0x13, 0x6c,
    0x82, 0x37, 0x16, 0x17, 0x98, 0x07, 0x21, 0xd4, 0x52, 0x78, 0x4e, 0x4d, 0xa0, 0xa9, 0xfa,
    0x09, 0x34, 0x55, 0xa0, 0x91, 0x13, 0x63, 0x9d, 0xf2, 0x80, 0x3b, 0xba, 0xa4, 0x0f, 0x7b,
    0x96, 0x78, 0x72, 0x05, 0x09, 0x29, 0x70, 0x9b, 0x71, 0x56, 0x4a, 0x96, 0xdd, 0xb8, 0xaa,
    0xbd, 0xd2, 0x4e, 0x58, 0x6b, 0xe7, 0x65, 0x49, 0xbb, 0xe1, 0x2f, 0xa3, 0xb9, 0xd2, 0x4f,
    0x11, 0x27, 0x90, 0x8a, 0xa6, 0x1a, 0x62, 0x91, 0x91, 0xab, 0x7e, 0x8b, 0x5e, 0x8f, 0xd3,
    0x50, 0x8d, 0x76, 0xe9, 0x85, 0xc8, 0x7a, 0xbe, 0xd3, 0x44, 0x88, 0x1f, 0xad, 0x3b, 0xeb,
    0xbf, 0x51, 0xfb, 0x35, 0x08, 0x9d, 0x3d, 0x8a, 0x8f, 0x0a, 0x24, 0xa7, 0x26, 0x33, 0x4c,
    0xf4, 0x8a, 0x10, 0x4d, 0xbd, 0xdd, 0xa3, 0x4e, 0xaf, 0xb7, 0x8f, 0x9d, 0x85, 0x4d, 0x81,
    0x9c, 0xec, 0x62, 0xfd, 0x04, 0xb6, 0x2a, 0x30, 0x1e, 0xb4, 0x1c, 0xf1, 0x38, 0xda, 0xbd,
    0x5c, 0x90, 0x84, 0xc4, 0xfa, 0x7c, 0xfc, 0x3b, 0x15, 0xe8, 0x34, 0x37, 0x5e, 0xe6, 0xeb,
    0x8f, 0x76, 0xa3, 0x02, 0xa5, 0xd1, 0x85, 0x50, 0xf2, 0xb1, 0x6e, 0xd4, 0x6c, 0x17, 0x49,
    0x5e, 0x7b, 0x72, 0x02, 0x3b, 0x6d, 0x97, 0x48, 0xf6, 0xe4, 0xc0, 0x2f, 0x6b, 0xc5, 0x36,
    0x30, 0x53, 0xb8, 0xe8, 0x72, 0x1e, 0xeb, 0x4e, 0x87, 0xed, 0xe2, 0x88, 0xa6, 0x76, 0x9d,
    0x4e, 0x05, 0xe4, 0x51, 0xe0, 0xc7, 0x9e, 0xbf, 0x38, 0x01, 0x99, 0x34, 0x6a, 0x97, 0x49,
    0x71, 0xad, 0xc5, 0xf4, 0x04, 0x0e, 0x76, 0xd4, 0xce, 0xac, 0x4e, 0x70, 0x02, 0xdb, 0x6c,
    0xbe, 0x0e, 0xe6, 0xe9, 0x1e, 0x3f, 0xf5, 0x0e, 0x05, 0xca, 0x15, 0xc8, 0xf4, 0x04, 0x4c,
    0xa1, 0xdc, 0x2e, 0x93, 0x88, 0xbf, 0x98, 0x1d, 0xff, 0x46, 0x95, 0x76, 0x79, 0x44, 0xbe,
    0xc4, 0x77, 0x8e, 0x5f, 0xa5, 0x0e, 0x15, 0x81, 0xa1, 0x49, 0xd6, 0x49, 0x90, 0xaf, 0xc0,
    0xa6, 0xeb, 0x15, 0x3b, 0x95, 0x1e, 0xe9, 0x4e, 0x55, 0x81, 0xec, 0x0f, 0xdc, 0x69, 0xfe,
    0xf5, 0x68, 0xf7, 0xda, 0x2e, 0x94, 0xdc, 0x69, 0x60, 0x1d, 0xbf, 0xe5, 0x30, 0xd4, 0xda,
    0x92, 0x1b, 0x1c, 0xbf, 0x3b, 0x33, 0xd4, 0x04, 0x6e, 0xc5, 0x83, 0xf8, 0xf8, 0x6d, 0xa4,
    0xd6, 0x2e, 0x90, 0x3c, 0xf7, 0xf8, 0xb7, 0x29, 0x50, 0x8a, 0x91, 0x0d, 0x6a, 0x3c, 0x81,
    0xb6, 0x0b, 0x24, 0xd8, 0x6e, 0x70, 0x02, 0x31, 0xdf, 0xa1, 0x40, 0x78, 0x3b, 0x29, 0xcc,
    0x4e, 0x80, 0x90, 0x05, 0x42, 0xdc, 0x9e, 0x7f, 0x0a, 0xc7, 0x2a, 0x20, 0x97, 0x8a, 0x79,
    0xc7, 0xbc, 0x5b, 0x81, 0x10, 0xf7, 0x34, 0xc8, 0xdf, 0x2d, 0x1f, 0xed, 0x46, 0xdb, 0x05,
    0x9f, 0xcb, 0x22, 0x39, 0xe6, 0xad, 0x0a, 0x04, 0xb9, 0x7d, 0x72, 0x7f, 0x02, 0xfb, 0x6c,
    0x48, 0xfe, 0x62, 0x7a, 0x02, 0x1e, 0x8d, 0x40, 0x88, 0x7b, 0x6e, 0xd9, 0x9f, 0xad, 0xdb,
    0x20, 0x5e, 0x81, 0x20, 0x77, 0xd2, 0x1b, 0xfe, 0xf8, 0xf7, 0x2a, 0xd2, 0x07, 0x3f, 0x29,
    0x3a, 0xfa, 0xdd, 0x0a, 0xc4, 0xb9, 0xe7, 0xb4, 0xce, 0xe2, 0x04, 0xb6, 0xda, 0x2e, 0x99,
    0x7e, 0xe5, 0x09, 0x6c, 0xb5, 0x5d, 0x36, 0x45, 0x93, 0x53, 0xb0, 0xf7, 0x47, 0x02, 0x91,
    0x5e, 0x43, 0x75, 0xfc, 0x5b, 0x6d, 0x17, 0x4c, 0x98, 0x73, 0x68, 0xc7, 0xee, 0xfc, 0xf8,
    0x2b, 0x10, 0xef, 0x8e, 0x16, 0x73, 0x72, 0xfc, 0xb1, 0xa5, 0x91, 0x40, 0xb4, 0x3b, 0xba,
    0x4e, 0x21, 0xfd, 0x61, 0x24, 0x10, 0xee, 0x8e, 0x96, 0xbe, 0x3d, 0x09, 0x03, 0xdf, 0xfb,
    0x09, 0x68, 0xd7, 0x91, 0x40, 0xd4, 0x1b, 0xdb, 0xd2, 0x9c, 0xc0, 0x46, 0xdb, 0x65, 0x53,
    0xc7, 0x7a, 0xfc, 0xfe, 0xcd, 0x48, 0x20, 0xe4, 0x4d, 0x77, 0x7a, 0x02, 0x87, 0x2a, 0x10,
    0x8e, 0x43, 0xcb, 0x8f, 0x3c, 0x72, 0x02, 0x21, 0xa6, 0x91, 0x40, 0xe8, 0x1b, 0xcb, 0x7b,
    0x7f, 0xa3, 0x02, 0xc1, 0xef, 0x38, 0x3c, 0xfe, 0x6b, 0xb8, 0x91, 0x40, 0xd4, 0xfb, 0x2e,
    0x4e, 0x40, 0xcb, 0x08, 0xc4, 0xbc, 0xef, 0x82, 0x29, 0xbc, 0xb9, 0x90, 0xda, 0xc2, 0x7f,
    0x2d, 0x59, 0x9f, 0xd5, 0xfe, 0x34, 0x57, 0x31, 0x9c, 0x40, 0xc1, 0xcf, 0x48, 0x20, 0x64,
    0x3f, 0xf1, 0xca, 0x83, 0x45, 0xb7, 0xdd, 0xea, 0x04, 0x7e, 0xd2, 0x87, 0x6b, 0xb4, 0xcd,
    0xb9, 0x80, 0xa5, 0x08, 0x46, 0xba, 0xf0, 0x20, 0x06, 0x71, 0x71, 0xe0, 0x5e, 0x7d, 0x61,
    0x35, 0xf3, 0xd3, 0x9d, 0x56, 0x2c, 0x3b, 0xab, 0xd0, 0xf9, 0x0e, 0x7a, 0xa8, 0xac, 0xaa,
    0x2b, 0xa2, 0x78, 0x15, 0x3d, 0x8c, 0x06, 0x07, 0x41, 0x0f, 0x19, 0x18, 0x07, 0x48, 0x0f,
    0xc1, 0x5e, 0x0e, 0x78, 0xd0, 0x72, 0xc0, 0x19, 0xce, 0x56, 0x1c, 0xf0, 0xd5, 0x2d, 0x1a,
    0xdb, 0x39, 0xdb, 0x1c, 0xc8, 0xb9, 0x2e, 0x95, 0x7f, 0x0d, 0xa2, 0x58, 0x0a, 0x17, 0x7e,
    0xcb, 0xa4, 0x3b, 0x12, 0x46, 0x80, 0x0e, 0x29, 0x9a, 0x04, 0x8b, 0xa9, 0x23, 0x8d, 0x89,
    0x91, 0x58, 0xba, 0xf3, 0x2c, 0x09, 0x1b, 0xac, 0xfc, 0x7e, 0xf5, 0xc3, 0xab, 0x37, 0x1f,
    0x5a, 0x51, 0x66, 0x5b, 0xd9, 0x21, 0x7d, 0xec, 0x68, 0xe6, 0x9e, 0x5a, 0xed, 0x86, 0x94,
    0xe7, 0xd2, 0xb6, 0xb7, 0xa1, 0x1e, 0x4b, 0x5a, 0x2c, 0x77, 0x98, 0xef, 0x59, 0x31, 0x38,
    0x1e, 0x4a, 0x47, 0xc9, 0xb3, 0xf6, 0xa8, 0x24, 0x77, 0x7c, 0x12, 0xf1, 0xef, 0x3c, 0xf0,
    0xf1, 0x59, 0xb0, 0x26, 0xf4, 0xb0, 0x4f, 0xcd, 0x65, 0xb3, 0xca, 0xdd, 0x47, 0x6f, 0x6d,
    0x6b, 0xb7, 0x47, 0xff, 0xa8, 0xe0, 0x9a, 0x7e, 0xbc, 0x6a, 0x22, 0x44, 0xa1, 0x73, 0xd2,
    0x55, 0x79, 0xe0, 0x7f, 0x1f, 0x84, 0x33, 0x2b, 0x8e, 0x37, 0xed, 0xca, 0x4d, 0x28, 0x30,
    0xe3, 0xfa, 0x78, 0x63, 0xed, 0x64, 0x62, 0x9f, 0x21, 0x0f, 0x36, 0x9a, 0xd8, 0x87, 0x4d,
    0x25, 0x94, 0x78, 0x85, 0x81, 0x7c, 0x0b, 0xff, 0xc2, 0x21, 0x76, 0x10, 0x5a, 0x31, 0x71,
    0x80, 0x75, 0xaa, 0xbd, 0xb7, 0x96, 0x92, 0xe7, 0x8b, 0x49, 0x86, 0x3c, 0x2a, 0x76, 0xcb,
    0xaa, 0x61, 0x9e, 0x5e, 0xa9, 0xaa, 0x3a, 0x50, 0x05, 0xca, 0x37, 0xfd, 0xe5, 0x15, 0x6d,
    0x5d, 0xf8, 0x74, 0xb3, 0xe9, 0x97, 0xf0, 0xcc, 0xb3, 0xc2, 0x82, 0x13, 0x68, 0x59, 0x26,
    0x70, 0x45, 0xa0, 0x38, 0xd8, 0x5f, 0x3e, 0x67, 0x75, 0xa4, 0xdf, 0xd3, 0xb4, 0xe4, 0x07,
    0x17, 0x1e, 0xba, 0x26, 0xde, 0xdb, 0xb5, 0x42, 0x86, 0xf7, 0x0f, 0x18, 0x98, 0x79, 0x40,
    0xe1, 0xa1, 0xeb, 0x35, 0x78, 0x18, 0x09, 0xa1, 0xfd, 0x65, 0x65, 0x0a, 0xfc, 0x03, 0xbe,
    0x23, 0x73, 0x81, 0x41, 0x58, 0x80, 0x9c, 0x57, 0xb3, 0x79, 0xbc, 0xbc, 0x61, 0x46, 0xc9,
    0xda, 0x0b, 0x0f, 0x5d, 0xb3, 0x8f, 0x89, 0x10, 0xda, 0xbf, 0x5f, 0xf8, 0x6c, 0x28, 0xc4,
    0xce, 0x0b, 0x0f, 0x5d, 0xd3, 0x74, 0x69, 0x0f, 0xbc, 0x01, 0x72, 0xfe, 0x6a, 0x45, 0x93,
    0x7c, 0xf7, 0x42, 0xe3, 0x42, 0xa6, 0xe2, 0x1b, 0x4c, 0xc6, 0x7b, 0xc0, 0x77, 0xe1, 0xa1,
    0xaa, 0x4e, 0x21, 0x4b, 0xf1, 0x0d, 0xeb, 0x74, 0xf4, 0x80, 0xf1, 0xc2, 0x43, 0xd7, 0x94,
    0x42, 0x52, 0xfc, 0x3d, 0xd9, 0x74, 0xa2, 0xc6, 0x03, 0xba, 0x99, 0xad, 0x22, 0x24, 0xc0,
    0xcc, 0x94, 0x1e, 0x45, 0xb8, 0x10, 0xc6, 0x7f, 0xf6, 0x1d, 0xe2, 0xc2, 0x57, 0x9c, 0x07,
    0xf7, 0x42, 0xe6, 0x42, 0x7a, 0xf3, 0xff, 0x91, 0x30, 0x78, 0xc0, 0x77, 0x1f, 0x44, 0x6e,
    0xe5, 0x35, 0xfa, 0xb7, 0x9e, 0x5b, 0x1e, 0x4e, 0xb1, 0xc6, 0x5c, 0x3a, 0x1a, 0x29, 0x2f,
    0x22, 0xad, 0x0c, 0x25, 0xd3, 0xcf, 0x05, 0xe7, 0xd6, 0x55, 0x4e, 0xb1, 0x78, 0x8e, 0xc5,
    0xfd, 0x26, 0x46, 0x3e, 0x2b, 0x41, 0xeb, 0x69, 0x26, 0x8f, 0x08, 0x7d, 0x3d, 0x2a, 0x41,
    0xbb, 0x09, 0xc9, 0x87, 0x79, 0x1f, 0xe5, 0x1e, 0x98, 0x8b, 0x05, 0xff, 0x14, 0x58, 0xce,
    0x6b, 0x8a, 0xc4, 0xe0, 0x7c, 0x6f, 0x85, 0xb7, 0x56, 0x4c, 0x6e, 0x48, 0x78, 0xe7, 0xd9,
    0x5d, 0x18, 0xcc, 0x3b, 0xf5, 0x6c, 0xec, 0x61, 0xda, 0x6b, 0x7d, 0x0c, 0x1c, 0x5f, 0xf6,
    0x3a, 0x1a, 0x3e, 0xc3, 0x3b, 0xb1, 0x7b, 0x89, 0x37, 0x78, 0x61, 0x97, 0x2b, 0x91, 0xe4,
    0x52, 0x34, 0x9f, 0x78, 0xfe, 0x17, 0x09, 0xde, 0xb4, 0xa0, 0x0f, 0xc2, 0x83, 0x61, 0xc3,
    0x42, 0x12, 0xcd, 0x89, 0x1d, 0x4b, 0x3e, 0xb9, 0x47, 0xc2, 0x8e, 0x44, 0xc2, 0xe3, 0x6d,
    0xa9, 0x04, 0xcc, 0xb7, 0x3f, 0x48, 0x56, 0xd7, 0x46, 0x15, 0xb8, 0x93, 0x07, 0x08, 0x83,
    0x9d, 0x51, 0xb1, 0x49, 0xbb, 0x1d, 0x80, 0x64, 0x28, 0x97, 0x85, 0x49, 0x7e, 0x6a, 0x60,
    0xe2, 0x61, 0x04, 0xbe, 0x13, 0x49, 0x71, 0x80, 0x73, 0xf5, 0x62, 0x0b, 0x76, 0x17, 0x4a,
    0xe0, 0x2a, 0xcd, 0xac, 0xf9, 0x1c, 0x58, 0xe1, 0xb2, 0xfc, 0x80, 0x75, 0x2e, 0xe0, 0x3e,
    0xb1, 0x7d, 0xf9, 0xc7, 0xf3, 0x1b, 0x38, 0x78, 0xc9, 0xd4, 0x63, 0x07, 0x23, 0x4d, 0x01,
    0xd2, 0x98, 0xe1, 0x2d, 0x94, 0x80, 0x47, 0x2c, 0x7b, 0x42, 0x1c, 0x04, 0x6d, 0x19, 0x2c,
    0x89, 0x63, 0x52, 0x8a, 0x18, 0x2a, 0x0f, 0xec, 0x72, 0x4e, 0x17, 0x6b, 0x6f, 0xc5, 0x50,
    0x0e, 0x2b, 0x0a, 0x84, 0x2f, 0xe8, 0x36, 0xed, 0x0a, 0xdb, 0xa0, 0xee, 0x36, 0x22, 0x2c,
    0x18, 0xac, 0xa0, 0xac, 0x5f, 0xac, 0xa9, 0xe7, 0x70, 0x69, 0xf0, 0x44, 0xba, 0x9f, 0x78,
    0x04, 0x64, 0x04, 0xb0, 0xe4, 0x0c, 0x39, 0x9e, 0x1d, 0x67, 0x68, 0xf9, 0xb7, 0xf4, 0x22,
    0x2e, 0xb7, 0x58, 0x72, 0x83, 0x90, 0xd2, 0xc5, 0x8c, 0xcc, 0x82, 0x70, 0x29, 0xa5, 0x7a,
    0xd9, 0x47, 0x1f, 0x5e, 0x29, 0x3d, 0xbe, 0x54, 0x0d, 0xe9, 0xee, 0xc5, 0xbb, 0x9f, 0xcf,
    0x0b, 0xe9, 0xea, 0xce, 0xf2, 0xe8, 0xac, 0xd0, 0x64, 0x35, 0x7b, 0xc6, 0x33, 0x49, 0xbe,
    0x7e, 0x78, 0xfe, 0x44, 0x52, 0xf0, 0x3f, 0xea, 0x0f, 0xcf, 0x3f, 0xfa, 0x86, 0xa2, 0xc2,
    0x05, 0xbe, 0x99, 0x7c, 0xe5, 0x89, 0xa4, 0xe1, 0x7f, 0x74, 0xfc, 0xb2, 0x22, 0xab, 0xba,
    0x58, 0x69, 0xff, 0x72, 0xe1, 0x7b, 0x4f, 0x24, 0x0a, 0xc3, 0x00, 0xff, 0x63, 0xe2, 0x7f,
    0xf8, 0x2c, 0x55, 0xd6, 0x87, 0xd2, 0x63, 0xb5, 0xfd, 0x59, 0xcf, 0x49, 0x7c, 0x4f, 0x88,
    0x4f, 0xa2, 0x52, 0x53, 0x81, 0x07, 0xa1, 0x5c, 0x55, 0xe8, 0x5f, 0x76, 0xc8, 0x0a, 0xee,
    0xfa, 0xba, 0x3c, 0x02, 0xac, 0xe8, 0xe2, 0x0f, 0x1c, 0xf2, 0x07, 0x6a, 0x72, 0xfd, 0x03,
    0xfa, 0x1f, 0x26, 0x5e, 0x94, 0x4a, 0x74, 0xf8, 0x11, 0x73, 0x1d, 0xf8, 0xe8, 0xcd, 0x05,
    0xcf, 0xe1, 0x74, 0x09, 0x62, 0x21, 0xe1, 0xc6, 0x0f, 0x56, 0xf4, 0xf9, 0x25, 0xda, 0xd4,
    0x65, 0xe1, 0x74, 0x36, 0x67, 0x6f, 0x62, 0x83, 0x51, 0x36, 0xd2, 0x89, 0x3d, 0x5f, 0x00,
    0x5e, 0x1c, 0x49, 0x8b, 0x08, 0xc4, 0xc2, 0x78, 0x49, 0x41, 0x8a, 0x01, 0x80, 0x43, 0x13,
    0x86, 0xd6, 0x2e, 0x0a, 0xe6, 0x8b, 0x5e, 0x05, 0xc0, 0x3a, 0x3d, 0xb4, 0x37, 0x12, 0x00,
    0x52, 0x2b, 0x04, 0x00, 0xa5, 0x21, 0xd7, 0x23, 0x53, 0x07, 0x29, 0x28, 0x24, 0xff, 0xbd,
    0x42, 0x38, 0x33, 0x24, 0x3c, 0x60, 0x7e, 0x69, 0xb6, 0x88, 0x62, 0x3c, 0x45, 0x29, 0xf0,
    0x5c, 0x0c, 0x37, 0x98, 0x4e, 0x83, 0x7b, 0x24, 0xad, 0x35, 0xe4, 0xc6, 0x47, 0x3f, 0x11,
    0x48, 0x25, 0x79, 0xa9, 0xf1, 0xd1, 0x2f, 0x49, 0x83, 0x02, 0x93, 0xe0, 0xea, 0x94, 0x7d,
    0xf2, 0x05, 0xbf, 0x59, 0x95, 0x06, 0x8d, 0x5f, 0x2e, 0x48, 0x18, 0xfc, 0x6e, 0xab, 0x30,
    0x7c, 0x54, 0x41, 0xde, 0xe0, 0xa3, 0xc4, 0x64, 0x41, 0xf3, 0xbe, 0xf2, 0x32, 0x27, 0xff,
    0xd5, 0xa2, 0xa0, 0xf1, 0x79, 0x05, 0x91, 0x73, 0x78, 0x02, 0xc3, 0x9a, 0xe1, 0x3c, 0x6d,
    0x31, 0x40, 0xf0, 0xda, 0x7b, 0x7e, 0x8e, 0x94, 0xc2, 0x45, 0xe1, 0xa1, 0x8b, 0x0d, 0xb3,
    0x3e, 0x25, 0xdb, 0x09, 0xec, 0xeb, 0xb8, 0x85, 0x47, 0x5c, 0xbe, 0x85, 0x5e, 0xf3, 0xbc,
    0x66, 0xb2, 0xe1, 0x7e, 0x42, 0xe0, 0x5c, 0x99, 0x0c, 0xb8, 0xca, 0x19, 0x95, 0x68, 0x8b,
    0xcf, 0x13, 0xa3, 0xf2, 0xde, 0x9b, 0x4e, 0x31, 0x7f, 0x8f, 0xfa, 0x07, 0x3e, 0x89, 0x2f,
    0x47, 0xa0, 0x46, 0xee, 0x61, 0x51, 0xc2, 0xb0, 0x7d, 0x14, 0x1f, 0xab, 0x35, 0xce, 0x79,
    0x61, 0xaf, 0x24, 0xb1, 0x7a, 0xc0, 0xd9, 0x36, 0x68, 0xc2, 0xad, 0x64, 0x84, 0xf4, 0x47,
    0x05, 0xff, 0x81, 0xbb, 0x62, 0x29, 0x2d, 0x80, 0x13, 0xed, 0xdd, 0xfa, 0xa8, 0x9d, 0x24,
    0x54, 0xe9, 0xfa, 0x9d, 0x64, 0x39, 0x0e, 0xf8, 0x46, 0xd1, 0xa1, 0x11, 0x86, 0xc0, 0xcd,
    0xdb, 0x03, 0x8a, 0xd9, 0x68, 0x87, 0x14, 0x91, 0x84, 0x3c, 0x1a, 0x62, 0x1a, 0xaf, 0x69,
    0xd9, 0x1b, 0x00, 0xd1, 0x79, 0x97, 0x4c, 0x4f, 0xdd, 0x57, 0xaa, 0x76, 0x1d, 0x2c, 0xe9,
    0x63, 0xc9, 0xc7, 0x85, 0x8d, 0x2c, 0xa6, 0x38, 0xe4, 0xab, 0x3e, 0x3c, 0xa1, 0x8d, 0xaa,
    0xd7, 0x07, 0x9d, 0xd2, 0xd7, 0xb0, 0x9f, 0xe2, 0x9e, 0xd6, 0x1d, 0xcd, 0xbb, 0x59, 0xbc,
    0x7c, 0x4c, 0x77, 0x73, 0xe0, 0x6f, 0x25, 0xcd, 0x1d, 0xf3, 0x10, 0x4e, 0x91, 0x83, 0xd3,
    0xa5, 0xf5, 0xe0, 0x08, 0xec, 0xa2, 0x7b, 0x21, 0xd1, 0x26, 0xc3, 0x70, 0x5e, 0x83, 0xde,
    0xe6, 0xd3, 0x2e, 0x72, 0x68, 0xcc, 0x66, 0x2a, 0xe7, 0x1e, 0xf2, 0xdc, 0xf3, 0x41, 0xeb,
    0x9d, 0xe3, 0xc0, 0xbd, 0x7c, 0xfa, 0x4b, 0x0f, 0x21, 0x56, 0xb4, 0x65, 0x3f, 0x9e, 0x7d,
    0xf1, 0x4c, 0x1a, 0xd3, 0x97, 0x48, 0x41, 0xf2, 0x16, 0x91, 0x88, 0x69, 0xba, 0xbb, 0xbe,
    0x5b, 0x31, 0xfe, 0x9d, 0x81, 0xfb, 0x22, 0x24, 0xa0, 0x5c, 0x23, 0x50, 0xa2, 0x25, 0x9c,
    0x54, 0xe8, 0x3f, 0xf3, 0x82, 0x6a, 0x35, 0xa9, 0x75, 0x20, 0xb4, 0x94, 0xcc, 0x46, 0xb5,
    0x6a, 0xbc, 0xfa, 0x28, 0x9b, 0x22, 0x75, 0x1c, 0x56, 0xdc, 0xe3, 0x4f, 0xc4, 0x8d, 0x2f,
    0xe8, 0x32, 0x45, 0x9e, 0x43, 0xd8, 0x81, 0xf8, 0xce, 0x65, 0x49, 0x34, 0x94, 0x98, 0x20,
    0xc4, 0xa4, 0xc2, 0x1f, 0xeb, 0xcc, 0xd6, 0xfc, 0x85, 0xde, 0xca, 0x34, 0x0b, 0xa3, 0x27,
    0xed, 0xf0, 0xbd, 0x77, 0x3b, 0x59, 0x7f, 0x8b, 0xe1, 0x6e, 0xb6, 0x98, 0xfe, 0xfc, 0x5b,
    0x0f, 0x04, 0x8a, 0xa1, 0xf8, 0xb0, 0x4c, 0xaf, 0x60, 0x30, 0xe7, 0x17, 0xb0, 0x29, 0x9a,
    0xfb, 0xa4, 0x32, 0x4b, 0xb3, 0xe7, 0xda, 0xa9, 0x36, 0x3d, 0x9e, 0xf6, 0x08, 0xdb, 0xa2,
    0x6f, 0xb6, 0xa4, 0x6f, 0xac, 0xa5, 0xe4, 0x5a, 0x21, 0xb9, 0x27, 0xd3, 0xe9, 0x0a, 0x4b,
    0x3b, 0x5a, 0x43, 0x20, 0xf1, 0x30, 0x81, 0xad, 0x64, 0xe7, 0xde, 0x91, 0x30, 0x04, 0xe2,
    0x8a, 0x12, 0xb1, 0xfe, 0xe0, 0x77, 0x69, 0x1d, 0xf4, 0x74, 0xed, 0xbc, 0xfa, 0xbc, 0x6e,
    0xc0, 0x19, 0x2f, 0x57, 0xdd, 0x8e, 0x6c, 0xe9, 0xb8, 0x44, 0x1a, 0xff, 0x52, 0xd0, 0x1e,
    0xab, 0x58, 0x95, 0x66, 0xf9, 0x01, 0x75, 0x52, 0x43, 0x2a, 0x77, 0x78, 0xc0, 0x7b, 0xe7,
    0x27, 0x90, 0xce, 0xee, 0x93, 0x2f, 0xe5, 0x5b, 0xab, 0x86, 0xc3, 0xab, 0x17, 0xa1, 0x3d,
    0x63, 0xd5, 0xf0, 0xdb, 0x23, 0xd7, 0x51, 0x9a, 0x92, 0x42, 0x32, 0x0f, 0x49, 0x94, 0xdc,
    0x27, 0x51, 0x6d, 0x1a, 0x34, 0xdd, 0x3d, 0x33, 0x0a, 0xb4, 0x5e, 0x09, 0xea, 0xd2, 0xcf,
    0x07, 0x5a, 0xab, 0x9c, 0xab, 0xb6, 0x2e, 0xfd, 0xe2, 0x01, 0xb8, 0x58, 0x15, 0x8b, 0x77,
    0x45, 0xa6, 0x1f, 0x04, 0x4e, 0x7b, 0x0f, 0xce, 0x97, 0x40, 0xce, 0x50, 0x35, 0xd1, 0x47,
    0x0e, 0x7e, 0xa9, 0x7e, 0x69, 0xcb, 0x0e, 0xdb, 0x1b, 0x82, 0xe1, 0xbb, 0x8d, 0xdc, 0xb5,
    0xb7, 0xea, 0xad, 0xf9, 0x08, 0x20, 0xe5, 0xfd, 0xe4, 0x0d, 0xd2, 0xe3, 0x8f, 0x67, 0x17,
    0xbd, 0x1f, 0xcf, 0xce, 0x45, 0xdc, 0x36, 0xbe, 0xc7, 0xed, 0x85, 0xa3, 0xb6, 0xea, 0x81,
    0x39, 0x47, 0x7f, 0x1d, 0x17, 0x2c, 0x79, 0x1b, 0xf7, 0x3a, 0x8e, 0xca, 0x97, 0xd8, 0x8f,
    0xa0, 0xc8, 0xd5, 0x2c, 0xa4, 0xaf, 0xc5, 0x41, 0x50, 0x44, 0xa6, 0x87, 0x3c, 0x78, 0x08,
    0xe3, 0x21, 0x28, 0x02, 0x3d, 0xfe, 0x1e, 0x5c, 0x84, 0xca, 0x71, 0x4d, 0x80, 0x7c, 0x83,
    0xed, 0xfc, 0xb0, 0x04, 0x3a, 0x50, 0x52, 0xc8, 0xba, 0xda, 0x0d, 0xc9, 0xa9, 0xed, 0x2b,
    0xff, 0x35, 0xba, 0x03, 0x8a, 0x40, 0xe7, 0xd4, 0x93, 0xf3, 0x07, 0xca, 0xa6, 0xd4, 0x83,
    0x40, 0x29, 0x41, 0xa0, 0x03, 0xde, 0xb1, 0xb8, 0x03, 0x51, 0x4c, 0x9c, 0x17, 0x68, 0x5d,
    0xf3, 0x39, 0x35, 0x1d, 0x7c, 0x83, 0x7e, 0xaf, 0x94, 0xeb, 0x60, 0xe9, 0xd7, 0x10, 0xf4,
    0x1b, 0x2e, 0xe8, 0x33, 0x1a, 0xae, 0x7c, 0xb7, 0x6f, 0x08, 0xf6, 0x28, 0xb6, 0x9a, 0xf7,
    0xdf, 0x53, 0xbb, 0xd8, 0x9a, 0x59, 0x9f, 0x49, 0x05, 0xe5, 0x74, 0x45, 0x67, 0x09, 0xb4,
    0x8d, 0x88, 0x16, 0xe3, 0x19, 0xdd, 0x19, 0x3d, 0x6a, 0x90, 0x4d, 0xf4, 0xac, 0xf3, 0xe7,
    0xad, 0x92, 0x91, 0x3a, 0xd2, 0x5a, 0xc9, 0x11, 0x37, 0x34, 0x9d, 0xae, 0x0b, 0x2b, 0xf4,
    0x25, 0x22, 0xca, 0x22, 0x1c, 0xb8, 0x0a, 0x6f, 0x6c, 0xbd, 0x5e, 0x43, 0xd5, 0xf5, 0xe6,
    0x8d, 0x7a, 0xd8, 0xb6, 0x53, 0x9c, 0xb1, 0x8e, 0x32, 0xf9, 0x75, 0x42, 0x7c, 0x09, 0xc0,
    0x03, 0x11, 0xec, 0x3c, 0x61, 0xd9, 0xb3, 0x63, 0x22, 0xfd, 0x9b, 0x24, 0x1f, 0x56, 0x7e,
    0x2a, 0x92, 0xf9, 0xcc, 0x64, 0x3e, 0x66, 0x41, 0xec, 0x56, 0x5d, 0x04, 0x0e, 0xb9, 0x01,
    0x71, 0xac, 0xd0, 0xf9, 0xc9, 0x1b, 0x87, 0x0c, 0xb5, 0xdb, 0x50, 0x17, 0x0d, 0x01, 0x22,
    0x31, 0xc9, 0xf5, 0xbe, 0xc4, 0xd8, 0x38, 0x2c, 0x0e, 0xb0, 0xa7, 0xa0, 0xe7, 0x62, 0x2e,
    0x15, 0x4b, 0xf8, 0x42, 0x89, 0xc9, 0x97, 0x48, 0xb2, 0x2d, 0x9f, 0xa6, 0x46, 0xa3, 0xb9,
    0x03, 0xd0, 0x52, 0xc4, 0xa1, 0x96, 0xa6, 0x0c, 0x6c, 0xa1, 0x38, 0x52, 0xcd, 0x6e, 0xb7,
    0x54, 0xaa, 0xc0, 0xb3, 0x9b, 0x9e, 0x83, 0x59, 0x00, 0x60, 0x63, 0x9d, 0x97, 0x29, 0x8b,
    0x8f, 0x67, 0x03, 0x4b, 0x75, 0x2c, 0x55, 0x1e, 0xe9, 0xda, 0x48, 0x53, 0xc8, 0x68, 0xa8,
    0xae, 0xad, 0xa8, 0xb6, 0x4b, 0x8c, 0xf1, 0x58, 0x37, 0xc7, 0x63, 0x67, 0x64, 0x11, 0x5d,
    0x87, 0x23, 0x4b, 0x93, 0x4d, 0x75, 0x30, 0x1a, 0xa8, 0x63, 0xc3, 0x1c, 0xb8, 0x3a, 0xd1,
    0x23, 0x8d, 0x18, 0xf2, 0xc7, 0xb3, 0x3e, 0xd2, 0x18, 0x7f, 0x8e, 0x80, 0x18, 0x90, 0x00,
    0xff, 0x88, 0xa4, 0x8f, 0x67, 0x76, 0xb8, 0x9c, 0xc7, 0xc1, 0xc7, 0x33, 0x4e, 0x27, 0xb4,
    0x8b, 0x1b, 0x7c, 0x40, 0x22, 0x13, 0x0b, 0xb3, 0xd7, 0xc1, 0xc9, 0xb0, 0x24, 0x66, 0x3b,
    0xeb, 0x63, 0x88, 0xe4, 0x26, 0x2a, 0x46, 0x7b, 0x7a, 0x16, 0xdb, 0xc4, 0x0d, 0x85, 0xf6,
    0xfc, 0x3f, 0x0b, 0xc7, 0x29, 0x88, 0x4b, 0xf1, 0x02, 0xbd, 0xfc, 0x15, 0xfd, 0xe0, 0x27,
    0xd8, 0x18, 0x2c, 0x42, 0x9b, 0xfc, 0xa9, 0x9f, 0xf3, 0x7f, 0x4f, 0x2c, 0x07, 0xd3, 0x69,
    0xb8, 0xa6, 0xe9, 0xc3, 0x25, 0x3c, 0x1b, 0xe9, 0x71, 0xf2, 0xcf, 0xcb, 0xf8, 0x4b, 0x7c,
    0x59, 0xc9, 0x2c, 0x88, 0x60, 0x11, 0x4d, 0x97, 0x7b, 0x38, 0x7a, 0xad, 0x3d, 0xc1, 0xcb,
    0x70, 0x43, 0xdf, 0x57, 0xda, 0x45, 0xef, 0xfb, 0xe0, 0xd7, 0x38, 0x5f, 0xe9, 0xe6, 0x3f,
    0xbc, 0xe8, 0xe9, 0x94, 0x6f, 0xe0, 0xe4, 0xd2, 0xfe, 0xb2, 0xc0, 0xbf, 0x19, 0x9a, 0xf6,
    0x8c, 0xba, 0xc0, 0x90, 0xe2, 0x14, 0x3e, 0x84, 0xfc, 0xe0, 0x7c, 0xfe, 0x55, 0x6a, 0x6f,
    0x3d, 0x67, 0xed, 0x45, 0x18, 0x62, 0x5f, 0xd9, 0x20, 0xba, 0x9c, 0x83, 0xbc, 0x76, 0x83,
    0xf6, 0xf8, 0x5c, 0x72, 0xc3, 0x60, 0x46, 0x3f, 0xfe, 0x78, 0x16, 0x44, 0x20, 0xd8, 0xa9,
    0xe7, 0x5e, 0xc6, 0x41, 0x99, 0x75, 0x40, 0x18, 0xed, 0xf5, 0x08, 0x41, 0xf4, 0x8e, 0x6f,
    0xb3, 0x59, 0xb7, 0x49, 0x0f, 0x59, 0x6c, 0xca, 0x74, 0x43, 0xdb, 0x32, 0x3f, 0x27, 0x1f,
    0x0a, 0xa2, 0x73, 0x15, 0x65, 0x6d, 0x3e, 0x76, 0x69, 0xe1, 0xb1, 0x9a, 0xf8, 0xa1, 0xfa,
    0xe2, 0x0d, 0x67, 0xbf, 0x01, 0x95, 0xf8, 0x4c, 0xc2, 0x19, 0x8e, 0xb9, 0xce, 0xd1, 0x31,
    0x12, 0x64, 0x36, 0x9c, 0xfb, 0x22, 0x01, 0xf4, 0xe3, 0x99, 0x90, 0x55, 0xb7, 0x7a, 0xb3,
    0x79, 0x6b, 0xd8, 0x48, 0x60, 0x29, 0x79, 0x69, 0x83, 0xcd, 0x32, 0x37, 0x93, 0xd7, 0xfd,
    0xbf, 0xa0, 0x88, 0x5e, 0x1b, 0xae, 0xdf, 0xf7, 0xa1, 0xf1, 0xda, 0x92, 0x17, 0x58, 0x94,
    0xe8, 0xa1, 0x2d, 0xc5, 0xea, 0x9e, 0x27, 0xe9, 0xcf, 0xd5, 0x4b, 0xcc, 0xdd, 0x58, 0xe2,
    0x4d, 0x97, 0xf7, 0x43, 0x8e, 0x3e, 0x09, 0x49, 0x3d, 0xcd, 0x6c, 0x37, 0x68, 0x6f, 0xe1,
    0x5e, 0x93, 0x86, 0xb6, 0x42, 0xc7, 0xde, 0x74, 0x65, 0x4d, 0xdb, 0xe9, 0x80, 0x4e, 0x70,
    0xf9, 0x04, 0xaf, 0x7d, 0xcc, 0x7b, 0xbe, 0xf2, 0xdf, 0x8e, 0xff, 0x20, 0x76, 0xbc, 0xf9,
    0x7a, 0xfe, 0x7c, 0x11, 0x57, 0xcf, 0xb3, 0xf9, 0xbc, 0x3a, 0x0a, 0xfd, 0x97, 0x56, 0x6c,
    0x4d, 0x47, 0xaa, 0x0b, 0x74, 0x99, 0x66, 0xa1, 0x95, 0xa4, 0xce, 0xe6, 0x3a, 0xa7, 0x21,
    0x4c, 0x48, 0x41, 0x1d, 0x7b, 0x02, 0x03, 0x7e, 0x40, 0x6c, 0x0b, 0xb8, 0xec, 0x13, 0xac,
    0x7f, 0x4d, 0x3e, 0x04, 0x0d, 0x52, 0x6e, 0x9b, 0xb5, 0xc7, 0x1b, 0x19, 0x7f, 0x94, 0x35,
    0x2e, 0x0c, 0xde, 0x0e, 0xf2, 0xee, 0x83, 0xe3, 0x8a, 0xae, 0x56, 0x27, 0x00, 0x88, 0x31,
    0x11, 0xe2, 0x5d, 0x87, 0xcc, 0x1b, 0xa9, 0x77, 0x2f, 0xc5, 0xb9, 0x6a, 0x3b, 0x37, 0x59,
    0x6e, 0xe0, 0x57, 0x2f, 0x9e, 0x7c, 0x98, 0x84, 0x84, 0xbc, 0x9a, 0xb2, 0x56, 0x0b, 0x57,
    0x93, 0x22, 0xf4, 0x2a, 0xba, 0x21, 0x76, 0xe0, 0x3b, 0x57, 0xe1, 0x2d, 0xed, 0x9c, 0x25,
    0x4d, 0xd9, 0xc1, 0x74, 0x4a, 0x58, 0xff, 0xe5, 0x1a, 0x43, 0x92, 0xb0, 0xb7, 0x6c, 0x60,
    0x54, 0xd4, 0x57, 0x42, 0x99, 0x74, 0x3b, 0x1b, 0x85, 0xdd, 0x4e, 0x97, 0x18, 0x44, 0xe6,
    0x7a, 0x51, 0xc2, 0x59, 0xdb, 0x11, 0xae, 0xa5, 0xc3, 0xec, 0x22, 0x59, 0x8b, 0xa9, 0xfb,
    0xbd, 0x29, 0xc1, 0x76, 0x22, 0x16, 0x36, 0x83, 0xc1, 0x4e, 0x3f, 0x18, 0xe8, 0x8e, 0xf1,
    0x84, 0xde, 0x94, 0x58, 0x52, 0x48, 0x5c, 0x12, 0x12, 0x40, 0x3e, 0xbd, 0x28, 0xc1, 0x51,
    0x00, 0x1f, 0xf8, 0xd3, 0xd8, 0xff, 0x25, 0xa0, 0x46, 0x5b, 0xc4, 0x96, 0x7a, 0x70, 0x4a,
    0xf0, 0xa5, 0x2c, 0x91, 0x53, 0xcc, 0xc9, 0xae, 0xaf, 0x5a, 0x38, 0x32, 0xaf, 0xda, 0xc8,
    0xc1, 0xde, 0xc4, 0xa9, 0xbe, 0xad, 0x2d, 0xdf, 0x58, 0xe1, 0xb7, 0x56, 0x10, 0xba, 0xba,
    0x8e, 0x43, 0x58, 0x4b, 0xa5, 0x7b, 0x72, 0x67, 0x0d, 0xf9, 0xf4, 0xe6, 0xe1, 0x18, 0x02,
    0x42, 0x40, 0x1a, 0xc1, 0x4f, 0x0d, 0xf5, 0x3a, 0xeb, 0x38, 0x3f, 0x40, 0x3b, 0x1b, 0xb9,
    0x22, 0x94, 0xb3, 0xd2, 0xdd, 0xe9, 0x31, 0x3c, 0x5d, 0xd3, 0xfe, 0x62, 0xdb, 0x39, 0x86,
    0x26, 0x11, 0x81, 0x09, 0x1b, 0x58, 0x02, 0xf6, 0x01, 0xe0, 0x8b, 0x14, 0xb9, 0xd8, 0x59,
    0x77, 0xf5, 0x5c, 0x89, 0xe6, 0xaa, 0x31, 0x54, 0x1b, 0x04, 0xf7, 0x09, 0xb8, 0x6a, 0x79,
    0xde, 0x18, 0xc9, 0xa8, 0x67, 0xdc, 0x7a, 0x33, 0x61, 0x0d, 0x5e, 0x13, 0xb7, 0x1e, 0x58,
    0xe4, 0x3d, 0x71, 0xa3, 0x6b, 0xff, 0x45, 0x6a, 0x9b, 0x76, 0xea, 0x5c, 0xbb, 0xb1, 0x15,
    0x4b, 0x2e, 0xbf, 0x82, 0xd9, 0x05, 0x99, 0xe9, 0x10, 0x25, 0xb6, 0xc3, 0x1c, 0xc1, 0x70,
    0x40, 0xa0, 0xc5, 0xee, 0x99, 0x19, 0x2d, 0x64, 0x28, 0x34, 0xed, 0x72, 0x7b, 0x06, 0xc3,
    0xd4, 0xa1, 0x3a, 0xd8, 0x6b, 0x11, 0x7a, 0xfe, 0x22, 0x0d, 0x7e, 0x4d, 0x93, 0x1c, 0xa6,
    0xde, 0x8d, 0x6e, 0xe7, 0x97, 0xa4, 0xea, 0xa0, 0x5d, 0x48, 0x02, 0x94, 0xdf, 0x87, 0xc1,
    0x66, 0xb4, 0xdc, 0xda, 0x11, 0xe1, 0x32, 0x38, 0x2b, 0xf5, 0xe8, 0x4a, 0x77, 0x90, 0xae,
    0x73, 0x09, 0x19, 0x7a, 0xba, 0x95, 0x55, 0xd5, 0x60, 0x24, 0x7d, 0xd4, 0x0a, 0x7f, 0x91,
    0x69, 0x2f, 0x1a, 0xfd, 0x90, 0x6a, 0x88, 0x57, 0x12, 0x39, 0x36, 0x53, 0xb4, 0xb0, 0x1f,
    0xee, 0xa9, 0xdd, 0x6c, 0xbf, 0xf8, 0xe5, 0xd4, 0xfe, 0xda, 0x9a, 0x3f, 0xd0, 0xba, 0x94,
    0x75, 0x38, 0xaf, 0x23, 0xa4, 0xf4, 0x46, 0xeb, 0xaa, 0x49, 0xdb, 0xad, 0x34, 0x01, 0x30,
    0x95, 0xc4, 0xe1, 0xdf, 0xb1, 0xfc, 0xd5, 0x6d, 0xc5, 0x12, 0x44, 0xf5, 0x75, 0x2d, 0x48,
    0x56, 0xa8, 0x86, 0x7e, 0x7a, 0xd7, 0xa5, 0xb0, 0x29, 0xa1, 0xf6, 0x6c, 0x88, 0xf0, 0x7e,
    0xf5, 0x73, 0xb6, 0x6b, 0xf5, 0x68, 0xb7, 0x95, 0x8e, 0xbf, 0x82, 0x88, 0x9a, 0x38, 0x61,
    0x59, 0x1a, 0x8a, 0x83, 0x85, 0x64, 0x36, 0x86, 0xdd, 0xcf, 0x58, 0x56, 0x28, 0xcb, 0x0c,
    0xf7, 0x52, 0x91, 0x48, 0xcb, 0xc4, 0x90, 0xfb, 0x5e, 0xbd, 0x85, 0x0c, 0x80, 0xb1, 0x47,
    0x19, 0xbb, 0xd3, 0x9d, 0x0e, 0xb5, 0xef, 0x85, 0x0f, 0x93, 0xe1, 0x13, 0xc4, 0x69, 0x88,
    0x6c, 0xa7, 0x64, 0xa6, 0x16, 0xf1, 0x65, 0xe4, 0xbf, 0x0c, 0x02, 0xe9, 0x3e, 0x98, 0x33,
    0x24, 0x9e, 0xf4, 0x9d, 0xb1, 0xdb, 0xb4, 0xf5, 0xc2, 0xf6, 0xdb, 0xf9, 0xd5, 0x09, 0xae,
    0x4c, 0x0a, 0xd7, 0x73, 0x2b, 0x38, 0x63, 0xea, 0x34, 0xb2, 0x00, 0x8f, 0x62, 0x27, 0x77,
    0xd7, 0xfe, 0x5d, 0xf0, 0x79, 0x9f, 0x9a, 0xa0, 0x01, 0x9e, 0x23, 0x0d, 0xf5, 0x2a, 0x6a,
    0x60, 0xe4, 0x26, 0xb1, 0x5e, 0x07, 0x6c, 0xa5, 0xdb, 0xf2, 0xc0, 0xda, 0x4e, 0x82, 0xf8,
    0x09, 0xb5, 0xa3, 0x84, 0x4c, 0xd0, 0xcc, 0x9a, 0x5f, 0x26, 0xc8, 0x5e, 0x55, 0x29, 0x95,
    0xbc, 0xaf, 0x44, 0x26, 0x55, 0x3d, 0xae, 0x32, 0x3a, 0xa1, 0xbb, 0x28, 0x55, 0x13, 0x88,
    0x52, 0x16, 0xc8, 0x9f, 0x5a, 0x2d, 0xf5, 0x1e, 0xd7, 0xbe, 0x05, 0xa6, 0x1e, 0x66, 0xfb,
    0x16, 0x71, 0xcd, 0xd6, 0x9b, 0xc5, 0x5d, 0x83, 0x0c, 0x69, 0x11, 0x81, 0x2f, 0x92, 0x7e,
    0x41, 0x98, 0xde, 0xf0, 0xee, 0x5b, 0x0c, 0xd6, 0xc1, 0x74, 0xa4, 0xa2, 0x50, 0xcb, 0xd5,
    0x6f, 0x22, 0x09, 0xad, 0xf0, 0x76, 0xbd, 0x3c, 0xd2, 0x56, 0x57, 0xeb, 0x89, 0xd0, 0xcb,
    0xb3, 0x35, 0x76, 0x96, 0xc4, 0x0a, 0x2f, 0xd7, 0xb6, 0x90, 0xc0, 0xea, 0xa0, 0x5a, 0x39,
    0xc1, 0xaf, 0xd5, 0xf4, 0xd1, 0x29, 0x73, 0xfa, 0x4a, 0x36, 0x39, 0xea, 0x1e, 0xce, 0x02,
    0x54, 0x53, 0xda, 0x4b, 0x7c, 0x2a, 0x4c, 0xb3, 0xad, 0xc9, 0x55, 0xc7, 0x8d, 0xc8, 0x76,
    0x5c, 0x11, 0x00, 0xdb, 0x1a, 0xe2, 0x71, 0xdc, 0x88, 0x6c, 0xaf, 0x35, 0xae, 0x08, 0xb3,
    0x13, 0x6a, 0xca, 0x62, 0xac, 0xc3, 0x9d, 0x18, 0x7f, 0xf1, 0x81, 0x96, 0xe7, 0x97, 0xc0,
    0x48, 0xdf, 0xed, 0xe7, 0x20, 0x0e, 0xd3, 0x64, 0xd4, 0x66, 0x11, 0xbc, 0xef, 0x12, 0xfd,
    0xa2, 0x7f, 0x40, 0x98, 0x40, 0x87, 0x64, 0x1c, 0xc1, 0x75, 0x30, 0xf9, 0xba, 0xc5, 0x63,
    0x7d, 0x0a, 0x5a, 0x74, 0xff, 0x61, 0x80, 0x12, 0x38, 0x47, 0x6a, 0xfa, 0x02, 0x3d, 0xa8,
    0xaf, 0xea, 0xde, 0x7d, 0xb1, 0x96, 0xd9, 0xf8, 0xaa, 0xf5, 0x6c, 0xc1, 0x36, 0x79, 0x73,
    0x96, 0xa1, 0x32, 0x34, 0x86, 0x95, 0x37, 0xd7, 0xcb, 0xa5, 0x2a, 0x05, 0x9d, 0xba, 0x55,
    0xc8, 0x11, 0x98, 0x54, 0x95, 0xd0, 0xdf, 0xaf, 0x56, 0x4d, 0x21, 0x05, 0x5d, 0xba, 0xad,
    0x54, 0xc7, 0x8d, 0xdb, 0x81, 0x40, 0x39, 0x36, 0xca, 0xf7, 0x9a, 0xde, 0x5b, 0xfb, 0x14,
    0xac, 0x57, 0x18, 0x22, 0xeb, 0x5d, 0x18, 0xc4, 0xc4, 0x8e, 0x89, 0xf3, 0x9a, 0x50, 0x23,
    0x23, 0x41, 0x4f, 0x28, 0x64, 0x93, 0x38, 0x9e, 0x47, 0xcf, 0x9e, 0x3e, 0xbd, 0xf5, 0xe2,
    0x62, 0x7c, 0x09, 0x88, 0x7c, 0x6a, 0xdd, 0x47, 0xf4, 0xc6, 0xf6, 0xa9, 0x17, 0x45, 0x0b,
    0x3d, 0x1d, 0xc9, 0x79, 0x9b, 0x6f, 0x33, 0x0d, 0xd1, 0xbc, 0x97, 0x63, 0xbb, 0x0c, 0x69,
    0x94, 0x54, 0xb4, 0xd3, 0xcb, 0x7a, 0x55, 0x15, 0x81, 0x4b, 0xc9, 0xa4, 0xb9, 0xdd, 0xeb,
    0x0f, 0xcd, 0x93, 0x13, 0xaf, 0x63, 0xa2, 0xc3, 0x6c, 0x5b, 0x71, 0x48, 0x88, 0x6f, 0xf7,
    0xa2, 0x7b, 0x2f, 0xb6, 0x27, 0xf0, 0x5a, 0x12, 0x1d, 0x7d, 0xb0, 0x19, 0xd8, 0xa7, 0x5d,
    0xd2, 0xf4, 0x16, 0x4c, 0x96, 0x49, 0x85, 0xc9, 0xa1, 0x35, 0xd0, 0x10, 0x11, 0x78, 0xa7,
    0xd4, 0xc0, 0x51, 0xb6, 0x27, 0xdb, 0x26, 0x42, 0x03, 0xbb, 0xa1, 0xbc, 0xf5, 0xcb, 0xdd,
    0x57, 0x8a, 0x8e, 0x43, 0x8f, 0xe5, 0x6c, 0x0d, 0xab, 0xe2, 0xa2, 0x18, 0xb1, 0xfa, 0x6b,
    0x99, 0x08, 0xb7, 0x55, 0xb4, 0x8a, 0x99, 0x35, 0x84, 0x67, 0xea, 0xf1, 0xfa, 0xf0, 0xbd,
    0xae, 0xb5, 0xd0, 0x9c, 0x9a, 0x4d, 0x32, 0xd0, 0x4f, 0xcf, 0x24, 0x19, 0xe8, 0x02, 0x85,
    0x24, 0xea, 0xa1, 0xf5, 0x40, 0x30, 0xfe, 0x63, 0xc3, 0xea, 0x1b, 0x46, 0x5c, 0x6f, 0x6a,
    0xb4, 0x8e, 0x2a, 0x73, 0xb1, 0x96, 0x57, 0x1a, 0xd8, 0xfc, 0x9d, 0x85, 0x9d, 0x9a, 0x98,
    0x3f, 0x1a, 0xaa, 0x5d, 0x18, 0xbc, 0x87, 0x38, 0x6d, 0xde, 0x6d, 0xc9, 0x72, 0x85, 0x44,
    0x9e, 0xa1, 0x2a, 0x92, 0xc5, 0x55, 0xde, 0xdd, 0xee, 0xc3, 0xbc, 0xaa, 0x3e, 0x6a, 0x0e,
    0x34, 0x82, 0xf7, 0x35, 0xc7, 0x79, 0x01, 0x63, 0xed, 0x96, 0xa5, 0x1b, 0x04, 0x9d, 0x23,
    0x9b, 0x68, 0x43, 0x38, 0x29, 0x54, 0x30, 0xd3, 0xe5, 0x75, 0xaa, 0x69, 0x1c, 0xac, 0xdb,
    0x8d, 0xe9, 0xd6, 0x1f, 0xcc, 0x6e, 0x15, 0x66, 0x2b, 0xc0, 0xa7, 0xa6, 0x3b, 0x95, 0xa1,
    0x46, 0x2a, 0xd3, 0x4e, 0x98, 0x68, 0x5b, 0xf1, 0x32, 0xad, 0xbd, 0x5d, 0xb8, 0xcd, 0x8e,
    0x89, 0x1a, 0xf6, 0xaf, 0x74, 0x73, 0x49, 0x06, 0xef, 0x90, 0x41, 0x22, 0x04, 0xeb, 0xed,
    0x6e, 0x51, 0xbf, 0x4f, 0xc4, 0xa0, 0x73, 0x3a, 0xb5, 0x22, 0x6a, 0x49, 0xe0, 0x58, 0x17,
    0x72, 0xb7, 0x11, 0x86, 0xae, 0xa6, 0xd3, 0x0f, 0xb0, 0x3a, 0x7a, 0x05, 0xb6, 0xc1, 0x7e,
    0x92, 0x3e, 0x1c, 0xed, 0x56, 0x79, 0xd4, 0x24, 0x78, 0x83, 0xe9, 0x72, 0x16, 0x84, 0x73,
    0x3a, 0xdb, 0x9b, 0xf7, 0x51, 0x00, 0xe2, 0xd4, 0x04, 0xa7, 0x3e, 0x3a, 0x3d, 0xa7, 0x43,
    0xb5, 0x3b, 0x1d, 0x91, 0xb5, 0xfc, 0x6b, 0x75, 0xa0, 0xcf, 0x3a, 0x32, 0xd0, 0xad, 0x9b,
    0x43, 0x57, 0xb4, 0xb2, 0x79, 0xcb, 0xc8, 0xa0, 0xe3, 0x65, 0xf7, 0x3c, 0xc7, 0x34, 0xb2,
    0x7d, 0xa7, 0x3b, 0x92, 0xea, 0x78, 0x43, 0x24, 0x85, 0x20, 0xf2, 0xe8, 0xd4, 0xf5, 0x17,
    0x67, 0xb2, 0xb5, 0x71, 0x87, 0x73, 0x84, 0xb7, 0xdb, 0x54, 0x7a, 0xb6, 0xc5, 0xbe, 0x25,
    0xe1, 0xac, 0x6b, 0x47, 0xd2, 0xbf, 0x6b, 0x00, 0x75, 0xc3, 0x3b, 0xf9, 0xd6, 0x81, 0x88,
    0xae, 0x25, 0xd4, 0x3a, 0x57, 0xf2, 0x02, 0x13, 0xdb, 0xf1, 0x24, 0x90, 0x12, 0x92, 0x09,
    0xf4, 0x54, 0x04, 0xe7, 0xb5, 0x53, 0x0a, 0x7a, 0x22, 0xc6, 0x12, 0xfb, 0x9b, 0x49, 0x4f,
    0x6b, 0xd2, 0x38, 0x00, 0xdd, 0x23, 0x76, 0x9f, 0xc0, 0xa6, 0x40, 0x33, 0x3e, 0xef, 0x55,
    0xaf, 0x80, 0x97, 0x5d, 0x6c, 0x35, 0xfd, 0x79, 0x5b, 0xe9, 0x0a, 0x2d, 0x03, 0x21, 0x55,
    0xa9, 0xbc, 0x38, 0x13, 0x42, 0xf7, 0xdb, 0x8e, 0xe3, 0x97, 0x30, 0xdc, 0x89, 0x4e, 0xb7,
    0x69, 0x0b, 0x0c, 0xc7, 0x52, 0x05, 0x1a, 0xb8, 0x55, 0x58, 0x66, 0x75, 0x7f, 0x0d, 0x31,
    0x5a, 0xbf, 0x4b, 0x3d, 0x60, 0xf7, 0x33, 0xed, 0x52, 0xff, 0x9a, 0xcf, 0x84, 0x49, 0xbb,
    0x11, 0x47, 0x1a, 0x2f, 0x25, 0x07, 0x8e, 0xe6, 0x8e, 0xf0, 0x3a, 0x3f, 0x6c, 0x97, 0x50,
    0xa0, 0x35, 0x4f, 0x12, 0x96, 0x86, 0x24, 0xa2, 0x4d, 0xeb, 0x93, 0x0a, 0xb6, 0x28, 0x37,
    0x16, 0xdd, 0x2c, 0x2f, 0x8a, 0xe1, 0x57, 0xee, 0x81, 0x1d, 0xb1, 0xc0, 0xa4, 0x82, 0x6c,
    0xa5, 0x9c, 0x8a, 0xfa, 0x31, 0x94, 0x82, 0x4a, 0x97, 0x3e, 0x62, 0x8f, 0xb4, 0xb2, 0xee,
    0x8b, 0x4a, 0xde, 0xfd, 0x1f, 0xad, 0x00, 0xf7, 0x96, 0x95, 0x40, 0xcf, 0x07, 0x92, 0x98,
    0x4d, 0x06, 0x1e, 0xaf, 0x18, 0x7e, 0x03, 0xd0, 0x38, 0x69, 0xa1, 0xf2, 0x76, 0x9c, 0xb8,
    0xb3, 0xed, 0x3d, 0x01, 0xa1, 0xef, 0x2c, 0x68, 0xe9, 0x3e, 0xed, 0x98, 0x27, 0x10, 0x5a,
    0x14, 0x45, 0x93, 0x7e, 0x9d, 0x90, 0x90, 0x60, 0x13, 0x0a, 0xea, 0x08, 0x49, 0xf0, 0x4d,
    0x3d, 0x96, 0x12, 0xe2, 0xd6, 0x91, 0x3e, 0x26, 0xea, 0x64, 0xf9, 0xf1, 0x4c, 0xba, 0xa7,
    0xee, 0x81, 0x89, 0x80, 0x50, 0xb0, 0x79, 0x85, 0x87, 0x5c, 0x11, 0x79, 0x63, 0x36, 0xb6,
    0x1a, 0x58, 0x8e, 0xf4, 0x6e, 0x09, 0x0f, 0x42, 0x41, 0xe1, 0x10, 0x21, 0xc3, 0xb1, 0x16,
    0x47, 0xe7, 0x7a, 0xb6, 0x28, 0x6f, 0x6d, 0xa4, 0x56, 0x5e, 0x9c, 0x2a, 0xef, 0xd5, 0x18,
    0xea, 0x4b, 0x79, 0x01, 0xee, 0xd6, 0x46, 0xed, 0xf9, 0x24, 0xf3, 0x32, 0x56, 0xe8, 0xa7,
    0x7e, 0xdd, 0xbe, 0x17, 0x64, 0xb6, 0x47, 0x4a, 0x97, 0x24, 0xbe, 0xf2, 0x03, 0x70, 0x51,
    0xfa, 0xdd, 0xe7, 0x7a, 0xae, 0x4e, 0xd6, 0x6c, 0x13, 0x93, 0x8b, 0xf1, 0xd4, 0xb3, 0xd9,
    0xc5, 0xbd, 0x45, 0xb8, 0x72, 0x30, 0x1c, 0x9d, 0x94, 0x69, 0xbb, 0x19, 0x30, 0xb6, 0xd4,
    0x60, 0xaf, 0xd1, 0x7f, 0xc3, 0x68, 0xa7, 0x69, 0x36, 0xb0, 0xba, 0x4a, 0x88, 0x55, 0x61,
    0x3b, 0xfe, 0x26, 0x2a, 0xa5, 0x0a, 0xec, 0x3d, 0x89, 0x48, 0x08, 0x06, 0xf6, 0xaf, 0x41,
    0xec, 0x91, 0x5a, 0x6b, 0x60, 0x39, 0x35, 0xaa, 0x1d, 0x19, 0xd5, 0xf2, 0xa0, 0x63, 0x27,
    0x91, 0xd1, 0x5e, 0xc1, 0x63, 0xf9, 0x4e, 0x6d, 0xb4, 0xea, 0xa8, 0xf6, 0x39, 0x10, 0xa8,
    0x3c, 0xfe, 0x1c, 0xd0, 0xd1, 0xa0, 0x3d, 0xca, 0x8e, 0x72, 0x21, 0x8c, 0x8f, 0x7f, 0xab,
    0x7b, 0x6d, 0x02, 0x1b, 0xa9, 0x78, 0xfc, 0x3b, 0x6d, 0xd7, 0x2b, 0xd6, 0xbd, 0xe5, 0x9d,
    0x99, 0xb6, 0x4b, 0xa3, 0x71, 0x48, 0xac, 0xcf, 0xc7, 0xbf, 0xd3, 0x61, 0xbb, 0x3c, 0xb2,
    0x43, 0xbd, 0x8f, 0x76, 0xa7, 0xed, 0x22, 0xc9, 0x0e, 0xfc, 0xd8, 0xf3, 0xf3, 0x41, 0x8d,
    0xdd, 0xec, 0xa8, 0x5d, 0x28, 0x39, 0xc4, 0x3d, 0x81, 0x7d, 0xb6, 0x8b, 0x24, 0x87, 0x1c,
    0x03, 0x9f, 0xd1, 0xa8, 0x5d, 0x20, 0x91, 0xa9, 0x77, 0xfc, 0x07, 0xaa, 0xc8, 0x72, 0xbb,
    0x22, 0xd3, 0xe8, 0xf8, 0x59, 0x14, 0x76, 0xda, 0x2e, 0x90, 0xc8, 0x17, 0x9b, 0xcc, 0x8f,
    0x9f, 0x2a, 0xb2, 0x22, 0x52, 0xc0, 0xe9, 0x63, 0x16, 0xd0, 0x29, 0x6c, 0xb6, 0x5d, 0x28,
    0xf9, 0x86, 0xf2, 0xc7, 0xbb, 0x51, 0x81, 0xb6, 0x0b, 0x61, 0x30, 0x3b, 0x81, 0x9d, 0xaa,
    0x52, 0xe9, 0x76, 0x1a, 0x8c, 0x4f, 0xa1, 0x57, 0x9c, 0x2c, 0x30, 0xaf, 0xe9, 0x24, 0x34,
    0xd6, 0x2e, 0x93, 0xf0, 0xba, 0xe6, 0x04, 0x7c, 0x54, 0xd8, 0x6b, 0xbb, 0x48, 0xf2, 0xfc,
    0xd8, 0xa7, 0x40, 0x9f, 0xc3, 0xe3, 0xf7, 0x65, 0x14, 0x59, 0x6f, 0x97, 0x47, 0x53, 0x6b,
    0x76, 0xac, 0x53, 0xd8, 0x6b, 0xbb, 0x3c, 0xf2, 0x03, 0x1f, 0xdf, 0x7e, 0x0a, 0xd2, 0xd7,
    0x97, 0x4a, 0x7e, 0x70, 0x0a, 0x22, 0x49, 0xe0, 0x96, 0xe2, 0x24, 0x8c, 0x24, 0x81, 0xc8,
    0xfc, 0x14, 0x02, 0x2c, 0x8a, 0x2c, 0x10, 0xdb, 0x0e, 0x2d, 0xef, 0x24, 0x7c, 0x37, 0x81,
    0x36, 0x4b, 0xb5, 0x3e, 0x81, 0xbd, 0x0a, 0x04, 0xb8, 0xe3, 0xf0, 0x14, 0xfc, 0x36, 0x81,
    0xf6, 0xfd, 0x04, 0x9e, 0x7c, 0x0a, 0x5b, 0x6d, 0x17, 0x4a, 0xf7, 0x5e, 0x3c, 0x39, 0x81,
    0x0a, 0x04, 0xb8, 0x97, 0xb4, 0x35, 0x60, 0xb6, 0x55, 0xfe, 0x53, 0xcd, 0x65, 0x78, 0xcd,
    0xf2, 0xa3, 0xdc, 0x73, 0x2b, 0x17, 0xd1, 0x37, 0x64, 0xea, 0x5e, 0xd2, 0xcb, 0x73, 0xec,
    0x8d, 0xff, 0xca, 0x6d, 0x6b, 0x1f, 0x37, 0xe3, 0x35, 0x00, 0xa5, 0x5f, 0x39, 0xb2, 0x26,
    0xf2, 0xa8, 0x9f, 0x26, 0x7f, 0x51, 0x1e, 0x09, 0xfc, 0xb3, 0x9e, 0xab, 0x61, 0xf6, 0xd5,
    0x4f, 0x1e, 0x55, 0x53, 0xe0, 0x8f, 0x3d, 0x53, 0x00, 0x36, 0xd5, 0x2e, 0xa6, 0xd9, 0x26,
    0xaf, 0xdf, 0xaa, 0xa1, 0x8d, 0x66, 0xea, 0x28, 0xd3, 0x47, 0x5d, 0xc7, 0x06, 0xe9, 0x88,
    0xb5, 0x1a, 0xc4, 0x04, 0x7e, 0x1c, 0xcd, 0xb1, 0x31, 0x42, 0x2a, 0x11, 0x8b, 0x0b, 0x8e,
    0x01, 0x53, 0x8c, 0x02, 0xdb, 0x75, 0x4a, 0x85, 0x72, 0xb6, 0xde, 0x87, 0xa0, 0x41, 0xbe,
    0xed, 0xde, 0x0a, 0x6f, 0x0f, 0x4e, 0xeb, 0x30, 0xa8, 0x8e, 0x55, 0xf5, 0x28, 0x72, 0x3f,
    0x15, 0x90, 0x53, 0x2a, 0x54, 0x26, 0xdc, 0x38, 0x36, 0x87, 0x5b, 0xd6, 0x28, 0x24, 0xe5,
    0x83, 0x56, 0x49, 0xcd, 0xe3, 0x05, 0x56, 0x51, 0xc8, 0x83, 0xd4, 0xc9, 0x13, 0x5d, 0x63,
    0xa1, 0x42, 0x50, 0xa2, 0x43, 0x8f, 0x85, 0x88, 0x69, 0x2d, 0x69, 0x54, 0x9c, 0x84, 0x74,
    0x36, 0x70, 0x0d, 0x54, 0x15, 0x4e, 0xd8, 0x7e, 0xa7, 0x77, 0x70, 0xc4, 0xba, 0x1b, 0x68,
    0xdc, 0x99, 0x44, 0x11, 0x98, 0xac, 0xfe, 0x60, 0xbc, 0xf5, 0x60, 0xbc, 0xad, 0xa2, 0xef,
    0x59, 0xda, 0xce, 0xcb, 0x25, 0xd1, 0xd0, 0x81, 0x8f, 0x77, 0x32, 0xba, 0xa1, 0x19, 0xd2,
    0xf0, 0x76, 0xb5, 0xb6, 0x20, 0x79, 0x40, 0x13, 0x74, 0xbd, 0x68, 0xb9, 0x53, 0x6d, 0xff,
    0x18, 0x6d, 0xf7, 0xfc, 0x76, 0x6e, 0x77, 0xbf, 0x27, 0x2e, 0x09, 0x09, 0x00, 0x8e, 0x5d,
    0xb0, 0xa3, 0xed, 0x0d, 0x96, 0x4a, 0x3a, 0xef, 0x2c, 0xfb, 0xb3, 0x75, 0x4b, 0xba, 0xb0,
    0xc6, 0x35, 0x8d, 0x37, 0x84, 0x48, 0xd6, 0x7d, 0x34, 0x05, 0x02, 0xa0, 0x75, 0x8b, 0xdf,
    0xda, 0x50, 0xa4, 0xa4, 0xb0, 0x65, 0x0b, 0xdb, 0xb3, 0xd2, 0xf7, 0x64, 0x83, 0x2a, 0xc3,
    0xac, 0xfa, 0x51, 0x04, 0xf2, 0x5b, 0xb1, 0xde, 0xf4, 0xfb, 0x72, 0x7f, 0xbc, 0x46, 0x5d,
    0xd1, 0x7c, 0x8b, 0xda, 0x8a, 0xe1, 0x22, 0x7d, 0xf1, 0xed, 0x8b, 0xa8, 0xb9, 0x23, 0x0d,
    0x2b, 0x02, 0x69, 0xb8, 0x91, 0x75, 0x47, 0x2a, 0x67, 0xb2, 0xf6, 0xc4, 0xf8, 0xbe, 0x1a,
    0xb5, 0x9f, 0xd4, 0x4a, 0x63, 0x48, 0xc0, 0x40, 0x11, 0x15, 0x3a, 0x3b, 0xf5, 0xeb, 0xb6,
    0x9b, 0x22, 0x19, 0x81, 0x25, 0x1a, 0xe8, 0x3e, 0xb8, 0x62, 0x93, 0x03, 0xed, 0xa2, 0xf0,
    0xbc, 0x78, 0x17, 0x7a, 0x77, 0x56, 0x4c, 0xae, 0x93, 0x2e, 0x1b, 0x14, 0x6f, 0x6f, 0xdd,
    0xec, 0xdc, 0x48, 0xf3, 0x65, 0x32, 0xe9, 0xcc, 0xf2, 0x25, 0xcf, 0x87, 0xa3, 0x04, 0x0c,
    0xeb, 0x05, 0xf8, 0xe7, 0xc2, 0xbf, 0x80, 0xd3, 0x0c, 0xc2, 0x38, 0xe9, 0xe6, 0xc1, 0x1a,
    0x90, 0x2f, 0x31, 0xf1, 0x9d, 0x48, 0xfa, 0xf4, 0x8a, 0x7f, 0xf8, 0xdc, 0x8a, 0x08, 0x0d,
    0x7c, 0x7a, 0x22, 0x39, 0x04, 0x56, 0x86, 0xf0, 0x05, 0x0b, 0x16, 0x5c, 0x73, 0xd8, 0xa7,
    0x14, 0x7a, 0xe2, 0x7c, 0xba, 0x2c, 0x68, 0x55, 0xe1, 0x19, 0x1b, 0x9a, 0x2a, 0x17, 0xbe,
    0x51, 0x67, 0xff, 0x95, 0x4c, 0xe7, 0x91, 0x44, 0xfc, 0x68, 0x11, 0xb2, 0x71, 0xe6, 0x3f,
    0x5c, 0x5f, 0x4b, 0x9f, 0x49, 0xe8, 0x93, 0xa9, 0xf4, 0xaf, 0x52, 0xb8, 0xf0, 0xb1, 0xd9,
    0x64, 0x07, 0xac, 0xa5, 0x08, 0xfe, 0x14, 0x86, 0xc4, 0x8e, 0xa7, 0x4b, 0xe9, 0x7e, 0x42,
    0x32, 0x3e, 0x0a, 0xa8, 0xe2, 0xd8, 0xf1, 0x22, 0x89, 0xe1, 0x13, 0x3e, 0xc7, 0x4b, 0x3d,
    0x20, 0x45, 0x07, 0x12, 0x12, 0x43, 0x1f, 0xac, 0x82, 0x67, 0xe5, 0x1e, 0xc4, 0xcf, 0xf1,
    0xfc, 0xda, 0xa1, 0x90, 0xa5, 0xcf, 0xf6, 0xfc, 0x09, 0x6c, 0x2b, 0x8e, 0x24, 0x4c, 0xee,
    0x7c, 0x4b, 0x78, 0x88, 0xba, 0x28, 0x11, 0x9d, 0x9c, 0xed, 0x61, 0xd4, 0x78, 0xfc, 0x99,
    0xec, 0x88, 0x94, 0x93, 0x8f, 0x79, 0x19, 0x02, 0xe1, 0x82, 0x79, 0x1d, 0xba, 0xd6, 0x8a,
    0xd5, 0xca, 0x85, 0x35, 0x85, 0x64, 0x10, 0xc4, 0x5b, 0x9c, 0x6f, 0x98, 0x6b, 0x77, 0x84,
    0x32, 0x91, 0x79, 0xed, 0x09, 0x81, 0x9d, 0xfb, 0xb7, 0x8c, 0xc5, 0x91, 0x5f, 0x1f, 0xdb,
    0x10, 0xbb, 0x48, 0x9f, 0x17, 0xd9, 0x3d, 0x7a, 0x22, 0x8d, 0x17, 0xbc, 0x4f, 0x91, 0x17,
    0x95, 0x1f, 0xcf, 0x66, 0x41, 0x48, 0x3e, 0xfa, 0x9e, 0xe3, 0x05, 0x33, 0x78, 0x8a, 0x8d,
    0x4b, 0xac, 0x25, 0xed, 0x8b, 0xc2, 0xbc, 0x50, 0x6c, 0x61, 0x74, 0xb9, 0x89, 0x9c, 0x4b,
    0xa4, 0xdd, 0x53, 0xe2, 0x00, 0xc1, 0xb5, 0x3f, 0x33, 0xc9, 0x73, 0x0f, 0x42, 0x0d, 0x84,
    0x26, 0x41, 0x81, 0x68, 0xf2, 0x49, 0x84, 0x92, 0x84, 0xb5, 0x7e, 0x45, 0x31, 0x14, 0xc0,
    0x3f, 0x63, 0x30, 0x38, 0xc2, 0x36, 0x4e, 0xd1, 0x9c, 0xd8, 0x9e, 0xbb, 0xc4, 0x8d, 0x7a,
    0x4a, 0x73, 0xaa, 0x1f, 0x2e, 0x90, 0x60, 0x24, 0xc7, 0xa3, 0xed, 0x5c, 0xe0, 0x8d, 0x42,
    0x28, 0x3b, 0xa2, 0xdd, 0x47, 0x07, 0x54, 0x5d, 0x6f, 0x6e, 0x70, 0x52, 0x07, 0xd9, 0xae,
    0xff, 0x12, 0x43, 0xe6, 0x4e, 0xf2, 0x35, 0x10, 0x86, 0x1f, 0xd0, 0x16, 0x5b, 0x64, 0x36,
    0x77, 0xd9, 0xfb, 0x48, 0xa8, 0x47, 0xb8, 0x40, 0xba, 0x28, 0xf3, 0xf7, 0xb1, 0x75, 0xcc,
    0x1a, 0xa4, 0x9c, 0x6a, 0x40, 0x06, 0x70, 0xdd, 0xde, 0x68, 0x8a, 0xf1, 0x73, 0xcd, 0x04,
    0xf5, 0x0d, 0xdc, 0x8c, 0x87, 0xdf, 0xe4, 0x1f, 0xbe, 0xa1, 0xa0, 0xfe, 0x05, 0xac, 0x0b,
    0xbb, 0xc5, 0x6c, 0x29, 0x66, 0xd3, 0x45, 0x22, 0x65, 0xb0, 0xec, 0xd6, 0x3c, 0x51, 0x75,
    0xf4, 0x5a, 0xfe, 0xc2, 0xa6, 0xda, 0x45, 0xc2, 0x1d, 0xc3, 0x78, 0x79, 0xcc, 0xce, 0x3a,
    0x0e, 0x75, 0xc3, 0x42, 0x45, 0x1c, 0xf1, 0x5a, 0xd5, 0x54, 0x5a, 0x2d, 0x7a, 0x01, 0x11,
    0x19, 0x64, 0x73, 0xce, 0xaa, 0x32, 0xc3, 0x0a, 0x95, 0x93, 0x91, 0x5e, 0x13, 0xc7, 0x30,
    0x04, 0x3b, 0x8f, 0xbf, 0x40, 0x25, 0x8e, 0xe2, 0x70, 0x6f, 0x1c, 0x53, 0x03, 0xcb, 0xa9,
    0x0c, 0xea, 0xb0, 0x3a, 0x26, 0xe4, 0xe8, 0x59, 0x52, 0xa0, 0x0b, 0x37, 0xdb, 0x23, 0xde,
    0xbc, 0x24, 0xae, 0xb5, 0x98, 0x82, 0xa0, 0xbf, 0x0a, 0x6f, 0x17, 0x08, 0x70, 0x0f, 0xd3,
    0xc0, 0x9e, 0x54, 0xaa, 0x3c, 0xba, 0x32, 0xe4, 0xb9, 0x92, 0x87, 0xbb, 0x5f, 0x1e, 0x3e,
    0x06, 0x54, 0xdd, 0x1a, 0xa0, 0x75, 0x37, 0x8d, 0x1b, 0x00, 0xaa, 0x6d, 0x0d, 0x50, 0x81,
    0x0b, 0x79, 0x59, 0xd8, 0x6a, 0x92, 0x1d, 0x38, 0x7f, 0x68, 0x02, 0x37, 0x5d, 0x19, 0x7f,
    0xb3, 0x97, 0xaf, 0xfc, 0x65, 0xc2, 0x21, 0xbd, 0x30, 0xc8, 0xd6, 0x4e, 0xd3, 0xf2, 0xbb,
    0xb0, 0xef, 0xfd, 0x30, 0x9b, 0x7d, 0x9b, 0x9f, 0x23, 0x74, 0x92, 0x03, 0xe9, 0x0e, 0x16,
    0x4b, 0xf6, 0x97, 0xc7, 0x0e, 0x18, 0x23, 0x6a, 0x59, 0x07, 0x58, 0xde, 0xfd, 0xd3, 0x4a,
    0xd2, 0x0a, 0x27, 0x68, 0x5b, 0x12, 0xb4, 0x3d, 0x07, 0xb1, 0x86, 0x42, 0xb6, 0x2d, 0x40,
    0x46, 0x40, 0x3e, 0x08, 0xc0, 0xe2, 0x6f, 0x6b, 0x4c, 0xbe, 0x1a, 0xdb, 0xa9, 0xc1, 0xe4,
    0x21, 0x76, 0xe0, 0x3b, 0x3f, 0x91, 0x3b, 0x32, 0xdd, 0x62, 0x50, 0x6b, 0x13, 0x43, 0xb0,
    0xe1, 0x1e, 0x62, 0x3a, 0x59, 0xe3, 0x87, 0x9a, 0x8c, 0x8f, 0x66, 0x00, 0x0f, 0x27, 0xb4,
    0x1d, 0x7f, 0x1b, 0x49, 0xd3, 0xc0, 0xbf, 0xa5, 0x31, 0xff, 0x90, 0xfc, 0xf7, 0xc2, 0x0b,
    0x73, 0x60, 0x01, 0x1e, 0x91, 0xae, 0x13, 0x0e, 0x21, 0xb0, 0xe1, 0xf7, 0x7c, 0x03, 0x47,
    0xe8, 0x11, 0x38, 0x25, 0x16, 0xc8, 0x5d, 0x06, 0x8b, 0x6f, 0xa7, 0x53, 0xc9, 0x9a, 0xce,
    0x28, 0x96, 0x7c, 0xa0, 0xb0, 0x90, 0xc5, 0x52, 0xbd, 0xf8, 0xd0, 0x4e, 0x4e, 0x6d, 0xef,
    0xcc, 0x4e, 0x2e, 0xd1, 0x57, 0xd5, 0x93, 0xeb, 0x1e, 0x34, 0xea, 0x2d, 0xd3, 0xe7, 0x06,
    0x39, 0x25, 0xd7, 0xfc, 0x16, 0xec, 0xc3, 0x7d, 0x40, 0x87, 0x6f, 0x6d, 0xe4, 0xfb, 0xe6,
    0xf8, 0xf4, 0xde, 0xcf, 0x9e, 0x7a, 0xa8, 0x9d, 0x69, 0x3c, 0x9c, 0x5d, 0xb7, 0x81, 0x07,
    0x13, 0x49, 0x95, 0x1c, 0xcf, 0xa5, 0xf7, 0xe5, 0x31, 0x46, 0xc6, 0xe1, 0xec, 0xa7, 0xcb,
    0xdc, 0xae, 0x23, 0xdd, 0x87, 0xd6, 0x1c, 0x30, 0x16, 0xd1, 0x60, 0x3d, 0x06, 0xf3, 0x23,
    0xe4, 0x47, 0x3f, 0xa0, 0xb3, 0x3d, 0x2f, 0xa5, 0x9f, 0x7d, 0xf8, 0x7d, 0xbc, 0xf0, 0xe9,
    0xc6, 0x13, 0x16, 0xf5, 0xbf, 0xf7, 0x80, 0x5e, 0x68, 0xff, 0x3a, 0x89, 0x2d, 0x93, 0x80,
    0x2c, 0xa4, 0x42, 0x46, 0x51, 0x9e, 0x8b, 0x31, 0x79, 0xc7, 0x73, 0xfc, 0x6f, 0x63, 0xc9,
    0x3e, 0xfa, 0xec, 0xae, 0x20, 0xe6, 0xdd, 0xcc, 0xd9, 0x37, 0x93, 0x9b, 0x49, 0x7a, 0x83,
    0xa3, 0xf9, 0x11, 0x36, 0x38, 0xa7, 0x57, 0x98, 0xbf, 0xbc, 0xc6, 0xbe, 0xe8, 0x2f, 0x7e,
    0xbf, 0xd9, 0x95, 0x01, 0x89, 0x62, 0x76, 0x43, 0x60, 0x49, 0x11, 0xc5, 0x7d, 0x76, 0x05,
    0x08, 0x1a, 0x93, 0xec, 0x5e, 0x73, 0xe1, 0x3b, 0x40, 0xf6, 0xf1, 0x7d, 0x90, 0x43, 0xd4,
    0xff, 0xf7, 0x8d, 0xd0, 0x5d, 0x64, 0xc3, 0xb9, 0x9e, 0x5a, 0x1c, 0x41, 0x19, 0xa8, 0x55,
    0x74, 0xec, 0x81, 0x04, 0xd8, 0x54, 0x7b, 0x08, 0x3a, 0xd5, 0xfc, 0x45, 0x83, 0xb5, 0x7b,
    0x6e, 0xf5, 0xc6, 0xd0, 0x1f, 0x93, 0xf8, 0x9e, 0x10, 0xff, 0x45, 0xb1, 0x47, 0x22, 0x85,
    0x93, 0xea, 0x38, 0x78, 0x3c, 0x0b, 0x8c, 0x0b, 0x49, 0xf1, 0xac, 0xf6, 0x8e, 0x67, 0xd6,
    0x3a, 0xbb, 0x02, 0x17, 0xc1, 0x74, 0xa3, 0xe5, 0xdb, 0xc0, 0xf0, 0x2b, 0xc5, 0x7e, 0x8c,
    0xdd, 0x6c, 0xca, 0x79, 0x4e, 0xd8, 0x0b, 0xe4, 0x95, 0xa8, 0x9a, 0xb2, 0x89, 0xf0, 0xfc,
    0xba, 0xae, 0x84, 0xe7, 0xc6, 0x44, 0xc9, 0x1e, 0x24, 0x02, 0xae, 0x57, 0x04, 0x7e, 0x2b,
    0x26, 0x60, 0xe3, 0x4d, 0x31, 0x67, 0x23, 0x49, 0x28, 0x11, 0x97, 0x95, 0x1c, 0x19, 0x3b,
    0x5f, 0x59, 0x53, 0xe1, 0x13, 0x92, 0x5f, 0xa3, 0x81, 0x48, 0xc7, 0xa2, 0x5a, 0xb4, 0xd3,
    0x3b, 0xc9, 0x14, 0x3c, 0x98, 0xca, 0x88, 0x9a, 0x69, 0x0a, 0xeb, 0xb2, 0x3f, 0x47, 0xa6,
    0xd3, 0xd3, 0xf1, 0xaa, 0xbb, 0xcc, 0xe3, 0xbe, 0xca, 0xf1, 0x2b, 0xca, 0xd4, 0xdb, 0xdc,
    0x30, 0x41, 0xde, 0xa4, 0x30, 0x57, 0xf8, 0x93, 0x14, 0x7e, 0xdb, 0x37, 0x7b, 0x9a, 0x75,
    0xd5, 0x48, 0x2b, 0x3b, 0x99, 0xaa, 0xf6, 0x0a, 0xd6, 0x93, 0x3f, 0x35, 0xf3, 0x6f, 0x7a,
    0xd7, 0x6f, 0x7e, 0xf8, 0xe9, 0xd5, 0x87, 0xb7, 0x6f, 0x7e, 0xbf, 0x7e, 0xf3, 0x41, 0xa4,
    0x43, 0x05, 0xad, 0x6d, 0x24, 0x73, 0xc3, 0x7c, 0x8c, 0x07, 0x55, 0x51, 0xc4, 0xc7, 0xae,
    0x85, 0x5e, 0x2d, 0x34, 0x3d, 0x7e, 0x6d, 0x61, 0xb4, 0x47, 0x7d, 0x73, 0xda, 0xa2, 0x84,
    0xba, 0x6c, 0xf7, 0x0a, 0x43, 0x28, 0xc6, 0x7a, 0x14, 0x0a, 0xe3, 0x26, 0xb7, 0x93, 0x56,
    0xb0, 0x57, 0xb5, 0xc1, 0x70, 0xbe, 0x06, 0x9b, 0xee, 0x43, 0x71, 0xd4, 0xce, 0x33, 0xd9,
    0xe2, 0x50, 0x34, 0xcd, 0x5c, 0x11, 0x28, 0xab, 0xea, 0x8d, 0x9b, 0x0f, 0xef, 0xe1, 0xe7,
    0xaa, 0x23, 0x87, 0xdb, 0x26, 0xe2, 0x99, 0x91, 0xe9, 0x74, 0x79, 0xa8, 0xd1, 0xf5, 0x3c,
    0x5b, 0x08, 0xac, 0xb7, 0x0c, 0x83, 0xd3, 0x57, 0x55, 0x52, 0xd6, 0x82, 0x76, 0xb2, 0x65,
    0x02, 0x23, 0xcd, 0x74, 0x81, 0xbb, 0xe3, 0x9d, 0xce, 0x87, 0x3b, 0x5d, 0x44, 0x1b, 0xad,
    0xde, 0xdf, 0xec, 0xb8, 0x9b, 0x80, 0xdd, 0xed, 0xfd, 0x08, 0xbf, 0x19, 0x99, 0x83, 0x2d,
    0x22, 0x01, 0xd9, 0x51, 0x82, 0xe3, 0xd4, 0xc2, 0xaa, 0xaa, 0x6e, 0x9e, 0x9e, 0xa1, 0xa9,
    0xc3, 0xf6, 0xb0, 0x04, 0xb3, 0xcc, 0x80, 0xbc, 0xfd, 0xe5, 0x2c, 0x58, 0x94, 0x52, 0x0a,
    0x33, 0xdb, 0x2a, 0x09, 0x22, 0x8d, 0x43, 0xd4, 0x9b, 0x32, 0x1d, 0x8f, 0x33, 0xcc, 0x0a,
    0x6f, 0xaf, 0x18, 0x65, 0xa8, 0x65, 0xc5, 0x42, 0xbd, 0x07, 0x5a, 0xd9, 0x63, 0x13, 0x66,
    0xec, 0x0c, 0x9a, 0xed, 0xa2, 0x92, 0x4c, 0x68, 0x12, 0x61, 0x54, 0xa0, 0xf7, 0x3c, 0xfe,
    0x62, 0x5a, 0x42, 0x40, 0x70, 0xe5, 0xde, 0xde, 0x83, 0xd0, 0x2a, 0xbe, 0xb7, 0x80, 0xc1,
    0x2d, 0xaa, 0xd2, 0x07, 0x37, 0x75, 0xa8, 0x32, 0x46, 0xb5, 0xef, 0xe9, 0xda, 0x9f, 0x2a,
    0x96, 0x13, 0xf8, 0xd4, 0xbc, 0x2a, 0xfb, 0x91, 0xa2, 0x9c, 0xdc, 0xda, 0xcb, 0xe4, 0x49,
    0x18, 0x5c, 0xb3, 0xbf, 0x61, 0x81, 0xc7, 0x12, 0x14, 0xeb, 0x55, 0xa9, 0xb7, 0x46, 0x34,
    0xda, 0x35, 0xab, 0xe1, 0x3c, 0xd3, 0xd3, 0xdc, 0x4e, 0xbb, 0x82, 0x32, 0x45, 0x6e, 0x2e,
    0x1a, 0xe9, 0x32, 0xdb, 0xcb, 0x40, 0xb8, 0x79, 0xa3, 0x88, 0x1c, 0xa9, 0x63, 0xd1, 0x9e,
    0x22, 0xdb, 0xb0, 0xd3, 0xb3, 0xc1, 0x29, 0x80, 0x3a, 0xa3, 0xdd, 0xdc, 0x4c, 0x18, 0xb6,
    0x15, 0x9b, 0xae, 0xda, 0xdf, 0xfc, 0xe7, 0xbd, 0x90, 0x9a, 0xd1, 0x7e, 0x33, 0xcc, 0x8f,
    0x1e, 0x5d, 0x1b, 0xa6, 0x9a, 0x54, 0xa5, 0x4a, 0x07, 0xe3, 0x9d, 0x82, 0xd5, 0x6f, 0x04,
    0xa3, 0xe2, 0xeb, 0x3f, 0x10, 0xd4, 0x22, 0xe5, 0x06, 0x75, 0x66, 0xf4, 0xe6, 0x51, 0xa0,
    0xd2, 0x4b, 0x20, 0x7c, 0xfb, 0xee, 0xc3, 0xf5, 0xdb, 0x37, 0xbf, 0x5f, 0xf5, 0xd2, 0xf2,
    0xe3, 0x4b, 0x9f, 0x8b, 0x0b, 0xbb, 0x95, 0x31, 0x24, 0xba, 0x62, 0x57, 0x31, 0xa4, 0x8e,
    0xb4, 0xb5, 0xe8, 0x51, 0x0b, 0x59, 0xe9, 0xd5, 0x16, 0xc8, 0x45, 0x8c, 0xee, 0x21, 0x76,
    0x78, 0xba, 0x45, 0x6f, 0xcf, 0xcc, 0xdb, 0xae, 0x6e, 0x69, 0x17, 0x88, 0xe0, 0x61, 0xbc,
    0x80, 0x58, 0xbe, 0x6c, 0x39, 0x0b, 0x83, 0xb6, 0xcf, 0x82, 0xbf, 0x2f, 0x6c, 0xe7, 0x73,
    0xc3, 0x26, 0xeb, 0x1b, 0xa5, 0xb2, 0xf1, 0xea, 0xf7, 0x45, 0x52, 0x5f, 0xc0, 0xab, 0x0d,
    0xba, 0x1c, 0x7f, 0x14, 0xfe, 0x1e, 0x3e, 0x97, 0x3e, 0x61, 0xb6, 0xdd, 0x27, 0xd6, 0x5b,
    0x6b, 0xf9, 0x3d, 0x1f, 0xf3, 0xdf, 0xe8, 0xfe, 0x25, 0x9b, 0x21, 0x40, 0x28, 0xae, 0x5f,
    0xd8, 0x8e, 0x2f, 0xdf, 0x86, 0xa3, 0x6a, 0x75, 0xfb, 0xb1, 0xc7, 0x44, 0x60, 0x53, 0xed,
    0x98, 0x6d, 0xf9, 0x57, 0xb6, 0x4d, 0xa2, 0xa8, 0x1e, 0xfd, 0x74, 0xed, 0xb6, 0x6f, 0xb4,
    0x73, 0xcd, 0xeb, 0xc9, 0xe6, 0x14, 0xba, 0x30, 0x8d, 0xe4, 0x76, 0x21, 0xc7, 0xd0, 0xf5,
    0x15, 0x7a, 0x54, 0xfc, 0x36, 0xa3, 0x72, 0xb7, 0xb1, 0x5c, 0xfa, 0xe6, 0x1e, 0x83, 0x20,
    0x63, 0xb8, 0xfc, 0xfd, 0xdb, 0x8b, 0xdd, 0x6e, 0x10, 0x0c, 0x69, 0xef, 0xd7, 0x3d, 0x18,
    0xd3, 0xae, 0xbb, 0xee, 0x1a, 0xfc, 0x44, 0x46, 0x45, 0x0c, 0x86, 0x3b, 0x08, 0x62, 0x97,
    0x97, 0xd3, 0x8f, 0x3f, 0x46, 0xf8, 0x2c, 0x9a, 0xc2, 0xce, 0x35, 0x1d, 0x7b, 0xf9, 0xce,
    0xea, 0x06, 0x02, 0x85, 0xc9, 0x0c, 0xc2, 0xd7, 0x1b, 0x76, 0x29, 0xae, 0x45, 0x5e, 0x19,
    0x1f, 0xc0, 0x3c, 0xc0, 0xd7, 0x62, 0xc9, 0x21, 0x9a, 0x0a, 0x98, 0xe8, 0x1f, 0xf8, 0x68,
    0x44, 0xd6, 0x52, 0x9a, 0x90, 0xe9, 0x34, 0x80, 0x7f, 0x5c, 0x9e, 0x95, 0x1e, 0x52, 0xaa,
    0xcb, 0xc1, 0x4e, 0xff, 0xae, 0x7c, 0x7a, 0x04, 0x89, 0x1c, 0x9d, 0xe2, 0x88, 0xa7, 0x75,
    0x60, 0x0a, 0x34, 0x7e, 0xff, 0x63, 0x11, 0xc5, 0x75, 0x14, 0xb9, 0xff, 0x46, 0xd4, 0x15,
    0x21, 0x62, 0x4a, 0x80, 0x9d, 0x1b, 0x6d, 0xb9, 0x8a, 0xea, 0x45, 0xc0, 0xea, 0x6b, 0x22,
    0x06, 0xac, 0x64, 0x4d, 0x23, 0x66, 0x7d, 0x5b, 0xd3, 0x29, 0xe8, 0xbc, 0xf9, 0xaa, 0x82,
    0x3d, 0x94, 0x4e, 0x99, 0x4a, 0x7b, 0xde, 0xd7, 0xf3, 0xab, 0xf7, 0x3d, 0xda, 0x2b, 0x2b,
    0x57, 0x0d, 0x7c, 0xd4, 0xdb, 0xa9, 0x1d, 0x14, 0xea, 0xf5, 0xf6, 0xc2, 0x07, 0x4a, 0x4b,
    0xc7, 0x7f, 0x6c, 0x86, 0xff, 0x8a, 0xd9, 0xf5, 0x32, 0x58, 0xc0, 0x56, 0x3f, 0x84, 0xf4,
    0x3d, 0x1d, 0x45, 0x17, 0x9d, 0x9d, 0x64, 0x95, 0x1c, 0x18, 0xef, 0xc8, 0xed, 0x71, 0xe0,
    0x03, 0xde, 0x8d, 0x78, 0x67, 0x9d, 0x20, 0xfa, 0x4e, 0x25, 0x1e, 0x56, 0xcf, 0xa5, 0x12,
    0x06, 0x1c, 0x4c, 0x5f, 0x58, 0x11, 0x39, 0xb0, 0x63, 0x53, 0xda, 0x8f, 0xed, 0x1f, 0x41,
    0xdc, 0x0a, 0x37, 0x3b, 0x39, 0x3b, 0x98, 0x4e, 0x09, 0xed, 0x1b, 0x58, 0xa7, 0x0e, 0x09,
    0x03, 0xb9, 0x99, 0x81, 0x54, 0xb1, 0xb7, 0x12, 0x93, 0x7e, 0x66, 0xcd, 0xfb, 0xaf, 0x19,
    0xd7, 0x94, 0x56, 0x58, 0x34, 0x22, 0x71, 0x8c, 0xd5, 0x04, 0x65, 0x2a, 0xe9, 0x85, 0xff,
    0xf9, 0xc3, 0x77, 0x6d, 0x1f, 0x89, 0x0c, 0xac, 0xe7, 0xc5, 0x5e, 0x3d, 0x4b, 0xe8, 0xc4,
    0xe9, 0xe1, 0xd8, 0x0e, 0xc7, 0xdc, 0xd4, 0x45, 0x26, 0x50, 0xfb, 0x54, 0x9a, 0xb0, 0xfd,
    0xd9, 0xec, 0x38, 0x66, 0xeb, 0x62, 0x20, 0xd0, 0x21, 0xbe, 0x1a, 0x76, 0xd8, 0x7e, 0xb4,
    0xcb, 0x09, 0xec, 0x8f, 0x4a, 0xfb, 0xad, 0xe3, 0xac, 0xfd, 0x64, 0xa3, 0x6b, 0xdb, 0xb9,
    0x14, 0x23, 0xc0, 0x04, 0xd0, 0x7e, 0x2e, 0x21, 0xbb, 0xbd, 0xf3, 0xf9, 0x1e, 0xde, 0xf9,
    0xec, 0xde, 0xb3, 0x35, 0x77, 0x1e, 0x56, 0xcc, 0x69, 0x6d, 0x30, 0xbb, 0xad, 0xdf, 0x1f,
    0x66, 0x50, 0x6c, 0x2f, 0x54, 0x5a, 0x81, 0x64, 0x47, 0xdd, 0x03, 0xcc, 0xe6, 0xc6, 0xe5,
    0x5b, 0x3f, 0x85, 0x4b, 0x83, 0x81, 0xc0, 0xa4, 0xec, 0x65, 0xb0, 0xb8, 0x21, 0xe4, 0xf5,
    0x65, 0xf4, 0xc2, 0x8e, 0xaf, 0xba, 0x90, 0x7b, 0x0f, 0xb5, 0x22, 0x39, 0xc2, 0xc8, 0x99,
    0xbf, 0xb2, 0x86, 0x1c, 0x11, 0xac, 0xa3, 0x94, 0x4e, 0xdb, 0x07, 0x39, 0x24, 0xfb, 0x37,
    0x89, 0x1a, 0xd1, 0xfb, 0xcc, 0x60, 0x81, 0x45, 0x86, 0x70, 0x14, 0x38, 0xc3, 0xc0, 0xbb,
    0x03, 0xc4, 0x81, 0x94, 0x24, 0xdb, 0x48, 0x2e, 0x0e, 0xe3, 0x16, 0xeb, 0xdb, 0xc1, 0x31,
    0x61, 0x84, 0xed, 0x77, 0x7a, 0x52, 0x53, 0x1b, 0xa9, 0x96, 0x19, 0x8a, 0x60, 0x9d, 0x6c,
    0x8a, 0x48, 0x42, 0xb3, 0x2a, 0x10, 0x3e, 0x49, 0x1a, 0x4d, 0xd5, 0x95, 0x2b, 0x3e, 0xd4,
    0x74, 0xc5, 0x77, 0xfb, 0x25, 0x67, 0xc2, 0x6b, 0x35, 0x09, 0xb5, 0x5b, 0x4d, 0x7a, 0xfb,
    0xce, 0xa2, 0x3d, 0x6a, 0x9b, 0xe0, 0xbb, 0x8e, 0xf6, 0xf7, 0xd9, 0xeb, 0x8a, 0x0a, 0xb1,
    0x07, 0xa1, 0x5d, 0x58, 0xf2, 0x0c, 0xc8, 0x74, 0x9f, 0xa1, 0x03, 0xd4, 0x46, 0x70, 0x47,
    0xa9, 0x35, 0x67, 0x0a, 0x45, 0xe2, 0x12, 0x57, 0x7a, 0x7c, 0x4f, 0xa7, 0x4b, 0x60, 0x92,
    0x54, 0x94, 0x29, 0x98, 0x7b, 0x03, 0x62, 0xf8, 0xce, 0x73, 0x88, 0x73, 0x8e, 0xd7, 0x67,
    0xf6, 0x96, 0x9a, 0x00, 0xc4, 0xf4, 0x5a, 0x8d, 0x8f, 0xdb, 0x61, 0x82, 0x1a, 0xbe, 0xec,
    0x91, 0x35, 0x1b, 0x7b, 0xb7, 0x0b, 0x2b, 0xa6, 0x65, 0xf1, 0x41, 0x2e, 0x38, 0xd6, 0xaa,
    0x9e, 0xef, 0x47, 0x21, 0x35, 0x8f, 0x55, 0xae, 0x80, 0xf5, 0x75, 0x2b, 0x24, 0x43, 0xa4,
    0xe6, 0x41, 0x21, 0xf5, 0x87, 0xef, 0x76, 0x03, 0x20, 0x11, 0x74, 0xcf, 0x79, 0x92, 0x4c,
    0x52, 0x70, 0x75, 0xe2, 0xcd, 0xd7, 0x77, 0x1a, 0x9d, 0x54, 0x52, 0xc1, 0x90, 0xa5, 0x8b,
    0x18, 0xda, 0x91, 0x3c, 0x77, 0x03, 0xc5, 0xf4, 0x2e, 0x49, 0xb4, 0xf8, 0x50, 0x7c, 0xe5,
    0x26, 0x2c, 0x81, 0x6f, 0xf7, 0x4c, 0x6a, 0x68, 0xc3, 0x52, 0xca, 0x13, 0xd5, 0x35, 0x59,
    0x68, 0xb1, 0x4d, 0x5a, 0xb1, 0x3c, 0xc1, 0x7e, 0x8a, 0x53, 0xcb, 0x07, 0x35, 0x74, 0x9b,
    0x67, 0x71, 0x02, 0x50, 0x56, 0xcb, 0xfb, 0x20, 0x74, 0xa4, 0xa9, 0xe7, 0xd2, 0x79, 0x4f,
    0xc9, 0xe5, 0xed, 0x33, 0x3e, 0xa6, 0xe9, 0xfc, 0x89, 0x34, 0xb1, 0xee, 0xf0, 0xb7, 0x56,
    0x41, 0x89, 0x45, 0xaf, 0xb2, 0xa9, 0x50, 0xd8, 0x1e, 0x92, 0xe5, 0x94, 0xe0, 0xf0, 0x24,
    0x1e, 0x44, 0x1e, 0xf7, 0xbc, 0xd2, 0xec, 0x15, 0x50, 0x9e, 0xd1, 0x62, 0x1a, 0xa7, 0xfd,
    0x79, 0xdb, 0x17, 0xf8, 0xdb, 0x21, 0xd2, 0x98, 0xe0, 0xe3, 0x09, 0x30, 0x58, 0x9c, 0x6b,
    0xdb, 0xaa, 0x15, 0x8b, 0x27, 0xb6, 0x07, 0x0d, 0x99, 0x39, 0xf2, 0x4d, 0x1a, 0xb2, 0x01,
    0xaf, 0x5a, 0x5b, 0x0e, 0xcc, 0x51, 0x23, 0x3c, 0x69, 0x3e, 0x14, 0x8e, 0x94, 0x7c, 0x50,
    0x1b, 0xa1, 0x59, 0xa0, 0xec, 0x17, 0xe9, 0x30, 0xda, 0xa1, 0x6a, 0x14, 0x14, 0xc4, 0x51,
    0xf3, 0x00, 0x98, 0x52, 0x14, 0xb1, 0x28, 0x20, 0x7f, 0x5c, 0x44, 0x38, 0x79, 0xcc, 0xb6,
    0xe6, 0x9a, 0x0d, 0x8e, 0xeb, 0x22, 0x83, 0x18, 0xb0, 0xa7, 0x16, 0x9b, 0x55, 0x65, 0x73,
    0xe9, 0xf6, 0xfc, 0x30, 0x1a, 0x89, 0x73, 0x5b, 0x9d, 0xa2, 0x05, 0x06, 0xe6, 0x4e, 0x82,
    0xd7, 0x96, 0xbf, 0xfc, 0xc5, 0x0a, 0xaf, 0xc2, 0xdb, 0xe8, 0xa5, 0xe7, 0x5c, 0xbf, 0xcb,
    0x98, 0xae, 0x5d, 0xa7, 0xd9, 0xd5, 0xef, 0x99, 0x4a, 0x5c, 0x3b, 0x53, 0xb2, 0xcf, 0xf9,
    0x9e, 0x3f, 0x5f, 0x54, 0x30, 0xb5, 0x12, 0x94, 0x0a, 0xf9, 0x7f, 0x08, 0xe6, 0xf9, 0xce,
    0x65, 0xb0, 0x2a, 0x8f, 0xbe, 0xc3, 0xfc, 0x77, 0xa7, 0x9a, 0x40, 0x59, 0xde, 0x44, 0x9f,
    0x9e, 0xad, 0x45, 0xd8, 0x85, 0x77, 0x35, 0x5f, 0x32, 0x37, 0xc1, 0xbe, 0xd1, 0xa5, 0xd6,
    0xd8, 0xc0, 0x14, 0x28, 0xcb, 0x0a, 0x16, 0xbe, 0xf3, 0x21, 0xf4, 0xe6, 0x27, 0x4a, 0xf9,
    0x24, 0xfc, 0x6d, 0x11, 0x76, 0x27, 0x38, 0xfa, 0xac, 0xdd, 0xc9, 0x6b, 0xb9, 0x95, 0x7a,
    0x67, 0xdf, 0x63, 0x29, 0x1c, 0x8b, 0x19, 0xd9, 0xdf, 0xc0, 0xc3, 0x3a, 0x58, 0x76, 0xac,
    0x55, 0xe3, 0xf4, 0x9a, 0xa2, 0xc3, 0xa6, 0xda, 0x2b, 0xd5, 0xbc, 0xa8, 0xd6, 0xbf, 0xdf,
    0xc4, 0xc3, 0x85, 0x5f, 0x9f, 0x6f, 0x97, 0x7e, 0xad, 0xfa, 0xf6, 0x26, 0x28, 0xd2, 0xaf,
    0xc4, 0x19, 0xb2, 0x3f, 0x15, 0xa5, 0xb7, 0xde, 0xd3, 0x9f, 0x37, 0x3c, 0xbd, 0xe6, 0xb7,
    0x55, 0x7e, 0x57, 0x5e, 0x75, 0x28, 0x2d, 0x31, 0x45, 0x84, 0xd0, 0x26, 0xda, 0x74, 0x9f,
    0x61, 0x0a, 0xe4, 0x0a, 0x46, 0xe5, 0x88, 0x39, 0x43, 0xe2, 0x03, 0x67, 0x74, 0x79, 0xfa,
    0xcb, 0x19, 0x2d, 0xea, 0xb9, 0xa8, 0xed, 0x56, 0x2a, 0x69, 0x9c, 0xdc, 0xf6, 0xa3, 0x75,
    0xbd, 0xc7, 0x4c, 0x8a, 0x3b, 0xe2, 0xfc, 0x1a, 0x84, 0x4e, 0xa7, 0x22, 0xd0, 0xdd, 0x34,
    0x5d, 0x01, 0xeb, 0x1e, 0xe2, 0x7c, 0xb2, 0x5e, 0x9d, 0x12, 0x50, 0x3c, 0x81, 0x16, 0x50,
    0xea, 0x78, 0x9f, 0x2c, 0x30, 0xd1, 0xdb, 0x61, 0xe3, 0x58, 0x1f, 0x22, 0x7e, 0x9b, 0x21,
    0x3d, 0xaf, 0x0c, 0xd9, 0x3b, 0xdc, 0x78, 0x68, 0xfa, 0xc3, 0x19, 0x34, 0x9e, 0x81, 0xc0,
    0x24, 0xbb, 0x0a, 0x79, 0x38, 0x83, 0xed, 0x9d, 0x41, 0xfb, 0x85, 0x24, 0xde, 0x7c, 0x1d,
    0x66, 0x4c, 0xa7, 0xa4, 0xf8, 0xb1, 0x15, 0x91, 0xa2, 0xba, 0x44, 0xac, 0xf0, 0x30, 0xcb,
    0x0b, 0xfe, 0x33, 0x79, 0x0b, 0xc7, 0x43, 0xb1, 0xbb, 0x9e, 0xa7, 0x5d, 0x1f, 0x2b, 0xbf,
    0xa5, 0x20, 0x79, 0x2e, 0x9f, 0xed, 0x80, 0x03, 0x1d, 0x66, 0x40, 0xcf, 0xde, 0x7c, 0x4a,
    0x5a, 0x57, 0x20, 0x96, 0x69, 0x99, 0xcf, 0xb7, 0x3f, 0xa8, 0xde, 0x0f, 0x8d, 0x6d, 0x9a,
    0x04, 0x56, 0x39, 0xda, 0xbe, 0xc3, 0xf3, 0x2d, 0xed, 0xcb, 0x95, 0xd1, 0x8a, 0xcc, 0xe9,
    0x66, 0xd7, 0xcf, 0x97, 0xce, 0xdd, 0x56, 0xbf, 0x66, 0x37, 0x24, 0x92, 0x07, 0xcc, 0x47,
    0xd7, 0x88, 0x23, 0x8d, 0x97, 0x92, 0x03, 0x98, 0xbf, 0xc3, 0x11, 0x1e, 0xb8, 0x53, 0x3c,
    0x12, 0x3f, 0xae, 0x53, 0x01, 0x86, 0xdd, 0x09, 0x60, 0x29, 0x88, 0xc8, 0x28, 0x25, 0x31,
    0x2a, 0x30, 0x23, 0x3b, 0x2c, 0x6b, 0xf4, 0xa2, 0x18, 0x7e, 0xe5, 0xee, 0xb0, 0xbc, 0x50,
    0x79, 0xb7, 0x2a, 0xb7, 0x5f, 0x6c, 0x66, 0x7b, 0x2b, 0x49, 0x9f, 0x3b, 0x12, 0x86, 0x9e,
    0x8f, 0xa9, 0x3b, 0x67, 0xd3, 0x47, 0xac, 0x4c, 0x95, 0xf8, 0x0f, 0x7a, 0xa3, 0xfa, 0x34,
    0xf2, 0x05, 0x6c, 0xea, 0xf2, 0x17, 0x5a, 0x05, 0xd4, 0x49, 0x69, 0xf4, 0x57, 0x3a, 0x8a,
    0x0d, 0xfe, 0x2f, 0x9c, 0x23, 0xb6, 0x9e, 0x58, 0xcc, 0xfa, 0xad, 0xf1, 0x13, 0x3a, 0xae,
    0x55, 0x4d, 0x01, 0x14, 0x41, 0xf3, 0x86, 0x25, 0x9f, 0x9d, 0x4e, 0xa9, 0x02, 0x2e, 0x7d,
    0x22, 0x77, 0xac, 0x30, 0xb4, 0x56, 0x75, 0xba, 0xee, 0xa0, 0x95, 0xe6, 0xf3, 0x00, 0xb6,
    0xc6, 0xb3, 0x09, 0xfa, 0x36, 0xcf, 0x17, 0xde, 0xd4, 0xe9, 0x14, 0xd9, 0xad, 0x6a, 0xaa,
    0x67, 0xa2, 0xfb, 0x94, 0x9f, 0xac, 0x1b, 0xad, 0xa7, 0xb3, 0x44, 0xb4, 0x4e, 0xfd, 0x9e,
    0x53, 0x13, 0xb5, 0x76, 0x21, 0x52, 0x95, 0xa1, 0x52, 0xfb, 0x2a, 0xd1, 0x36, 0x44, 0x0d,
    0x63, 0xf2, 0x7c, 0x1a, 0x05, 0x33, 0x90, 0xfc, 0x0e, 0x66, 0xca, 0xba, 0x5e, 0xa9, 0x14,
    0x42, 0x87, 0x59, 0xc0, 0xcb, 0x29, 0x73, 0x5d, 0xff, 0x37, 0x76, 0xdd, 0xf7, 0x82, 0x99,
    0xdc, 0xd5, 0x64, 0xa6, 0x0a, 0x36, 0xc1, 0xf9, 0x34, 0xb6, 0xc2, 0x4f, 0x82, 0xdb, 0xe2,
    0x2e, 0x57, 0x88, 0xaf, 0x36, 0x1f, 0x0f, 0x64, 0xf3, 0xf4, 0x20, 0x69, 0xc6, 0x87, 0x14,
    0xf3, 0x6e, 0x79, 0x02, 0xb3, 0xe0, 0xee, 0xab, 0xe9, 0x22, 0x6b, 0x6f, 0x5c, 0x94, 0x33,
    0x34, 0xd8, 0x16, 0x4a, 0x2c, 0x29, 0xb9, 0xda, 0xa5, 0x6d, 0x10, 0x3d, 0x7f, 0x41, 0x19,
    0x10, 0x1d, 0xa0, 0xc8, 0xcb, 0x71, 0xd8, 0x0d, 0x7a, 0xe0, 0x94, 0x1e, 0xd4, 0x7c, 0x5f,
    0x6b, 0xec, 0x95, 0xe3, 0xf8, 0xfa, 0xf5, 0xbb, 0xce, 0x1a, 0x51, 0xcc, 0x15, 0xad, 0x51,
    0x64, 0xef, 0x36, 0x6a, 0xfb, 0x9a, 0xed, 0x8f, 0x55, 0x72, 0x6d, 0xff, 0x3e, 0xac, 0x32,
    0x98, 0xca, 0xe6, 0x08, 0xd9, 0x90, 0x9d, 0x75, 0x2e, 0x7d, 0xd8, 0x43, 0x61, 0x7d, 0xcd,
    0x98, 0xed, 0x87, 0x52, 0x11, 0x0a, 0x07, 0xd8, 0x23, 0x64, 0xdb, 0x26, 0x22, 0x23, 0xa7,
    0xbb, 0x54, 0x58, 0x05, 0xec, 0x1e, 0x6e, 0x15, 0x94, 0x51, 0x67, 0x59, 0x59, 0x82, 0x75,
    0xd7, 0x0a, 0xcd, 0xc2, 0x14, 0xa7, 0xaf, 0x48, 0x4c, 0x1e, 0x3c, 0x91, 0xa6, 0xde, 0x67,
    0xe9, 0xea, 0x81, 0x49, 0x54, 0x11, 0x77, 0x6f, 0x5c, 0xee, 0xfc, 0x73, 0x30, 0xe5, 0x89,
    0x68, 0xcc, 0xf3, 0x45, 0x2c, 0xd1, 0xa2, 0xb4, 0x7b, 0x82, 0x93, 0x54, 0x9f, 0x48, 0x4e,
    0xcb, 0xd1, 0x62, 0x86, 0x78, 0xf8, 0xad, 0xe3, 0x39, 0xfe, 0xb7, 0x31, 0x18, 0x78, 0x21,
    0x25, 0x28, 0x73, 0xe5, 0x4b, 0x9f, 0x3c, 0xe7, 0x13, 0xab, 0xa3, 0x66, 0xef, 0xf6, 0xc0,
    0x47, 0x6d, 0x03, 0x67, 0x28, 0x5d, 0xbd, 0xbb, 0xc6, 0xca, 0x6c, 0xef, 0xd6, 0x7f, 0x92,
    0xd1, 0xb2, 0x1c, 0x7f, 0x9f, 0x5d, 0x56, 0x07, 0x21, 0xb5, 0xb3, 0x1b, 0x88, 0xfa, 0x93,
    0x4d, 0xb1, 0x11, 0xf8, 0x52, 0x9a, 0xb0, 0xf2, 0x81, 0xb4, 0x66, 0x00, 0x8f, 0xc5, 0xa1,
    0x3e, 0x30, 0x5a, 0x52, 0x04, 0x5a, 0x7a, 0x56, 0xb4, 0xf3, 0x3e, 0xe3, 0xcb, 0x82, 0x16,
    0x76, 0x92, 0xb6, 0xea, 0x43, 0xc9, 0xbc, 0xc0, 0xff, 0x96, 0xf8, 0x18, 0xcd, 0x22, 0x92,
    0x38, 0x5f, 0x4a, 0x63, 0x06, 0x1a, 0xad, 0x13, 0x41, 0x50, 0x69, 0x2f, 0x28, 0x1e, 0x60,
    0xee, 0x27, 0x9e, 0x3d, 0x91, 0x62, 0x0b, 0xa8, 0xdc, 0x92, 0x66, 0xde, 0x17, 0xa4, 0xaa,
    0xb1, 0xc9, 0xbf, 0x26, 0xf5, 0x29, 0x99, 0xf7, 0x2b, 0x16, 0x89, 0xee, 0x1a, 0x93, 0x38,
    0x20, 0xc1, 0x40, 0xab, 0x7d, 0xd5, 0xf6, 0x82, 0x04, 0x78, 0x30, 0xcb, 0x60, 0x01, 0x27,
    0x09, 0x00, 0xab, 0x47, 0x1d, 0x33, 0x48, 0xdd, 0x66, 0xa6, 0x69, 0x37, 0x71, 0x95, 0xb7,
    0x0c, 0xa7, 0x3f, 0xef, 0xa9, 0xe3, 0xb3, 0xaa, 0xa4, 0x49, 0x82, 0xc2, 0x26, 0xcd, 0x0a,
    0xdb, 0x69, 0xaf, 0x97, 0xbd, 0xa8, 0x11, 0x81, 0x71, 0x42, 0xbb, 0x32, 0x49, 0xb6, 0xe6,
    0xaf, 0x92, 0x05, 0x07, 0x70, 0x04, 0x02, 0xc3, 0xc3, 0xca, 0x9a, 0xfc, 0x40, 0x4e, 0xe0,
    0xf0, 0x68, 0xb4, 0x5b, 0x44, 0xc8, 0xcf, 0xd7, 0x07, 0x64, 0x15, 0x2d, 0x7d, 0xfb, 0x17,
    0x8c, 0x17, 0xd6, 0xf4, 0x75, 0x9a, 0x9d, 0xbd, 0x0d, 0xfb, 0x47, 0xc0, 0x04, 0xa9, 0x82,
    0x3d, 0x63, 0x63, 0x3f, 0xba, 0x41, 0x33, 0xab, 0x39, 0x74, 0xad, 0x49, 0xf1, 0x56, 0x04,
    0xe9, 0xc3, 0x73, 0x6d, 0xa4, 0xcd, 0xed, 0xb0, 0x83, 0x36, 0x6c, 0xbf, 0x09, 0x86, 0x83,
    0x92, 0xf0, 0x3a, 0xba, 0xa2, 0x7b, 0x2c, 0x2c, 0xd9, 0x72, 0xd5, 0xd3, 0xee, 0x24, 0xd1,
    0xb0, 0x6b, 0xb6, 0xab, 0xcd, 0x04, 0xbb, 0xfd, 0x37, 0xb0, 0x3f, 0x79, 0xf4, 0xea, 0x6a,
    0xf1, 0xce, 0x02, 0xc7, 0x73, 0x97, 0x6f, 0xc1, 0xcb, 0x0f, 0xeb, 0x67, 0x77, 0xad, 0x93,
    0x5e, 0x37, 0x0b, 0xa5, 0xf9, 0x54, 0xda, 0x55, 0x01, 0x05, 0xbf, 0xf1, 0x9c, 0x7e, 0x3b,
    0x73, 0x12, 0x08, 0x68, 0xb1, 0x73, 0xa2, 0x19, 0x04, 0x6f, 0xdd, 0x0f, 0x93, 0x86, 0xa9,
    0x0f, 0x87, 0x95, 0xfb, 0xca, 0x96, 0x0e, 0x4b, 0xa0, 0x6f, 0x17, 0x06, 0xc1, 0xae, 0x1e,
    0x55, 0x17, 0xac, 0x6a, 0x22, 0x33, 0x06, 0x81, 0xd6, 0xc8, 0x1d, 0x59, 0x21, 0xac, 0x76,
    0xd1, 0xe4, 0x48, 0xb1, 0xac, 0x88, 0x63, 0xf9, 0x3d, 0xd0, 0xf0, 0xdb, 0xc6, 0x89, 0x8e,
    0x88, 0x6e, 0x91, 0xe8, 0x22, 0xe3, 0x98, 0x19, 0xa2, 0xdb, 0x64, 0xfa, 0x03, 0xaa, 0x57,
    0x90, 0xa3, 0x76, 0x9a, 0xbe, 0xcb, 0x7b, 0x64, 0x9b, 0x6b, 0x4c, 0x7f, 0x6d, 0x6d, 0x29,
    0x00, 0x9f, 0xd7, 0x96, 0x0f, 0x3a, 0xa4, 0x8b, 0x66, 0x6e, 0x8f, 0x5c, 0xdc, 0x87, 0x5e,
    0x7a, 0xa8, 0x6a, 0xde, 0xcc, 0x68, 0xea, 0x4c, 0x06, 0x8f, 0xca, 0xbf, 0xad, 0x29, 0x20,
    0x11, 0x79, 0x38, 0xf5, 0xf8, 0xab, 0xae, 0x88, 0xd4, 0xea, 0x6c, 0x73, 0x42, 0xf1, 0xb1,
    0x4c, 0x7b, 0x67, 0x29, 0xeb, 0xb8, 0x42, 0xa6, 0xdb, 0x0a, 0x03, 0xb5, 0x13, 0x58, 0x12,
    0x58, 0x9b, 0xc0, 0x4e, 0x10, 0x6f, 0xba, 0xd2, 0x1e, 0x81, 0x08, 0x9a, 0xcd, 0xf9, 0xaf,
    0x2b, 0xb5, 0x51, 0x3b, 0xd2, 0xe2, 0x26, 0x6b, 0xf1, 0xeb, 0x44, 0x99, 0xae, 0xb6, 0x07,
    0xef, 0x98, 0x9d, 0xbd, 0xc2, 0x7b, 0xdc, 0xf2, 0x35, 0xc5, 0x87, 0x49, 0x18, 0xdc, 0xef,
    0xa1, 0x4e, 0xf2, 0xfe, 0x53, 0xbb, 0x90, 0x18, 0x18, 0xd5, 0xf4, 0xbb, 0x63, 0xef, 0xd2,
    0x10, 0xaa, 0x7c, 0x85, 0xf3, 0x7c, 0x15, 0x86, 0x41, 0x58, 0x3d, 0x82, 0xaa, 0x7d, 0x98,
    0x7e, 0x13, 0x71, 0x16, 0x9b, 0x50, 0x1d, 0x5a, 0xca, 0x67, 0x09, 0xbc, 0x0a, 0x81, 0x6d,
    0xc9, 0x53, 0x19, 0xad, 0x28, 0xd4, 0x6c, 0x82, 0xee, 0x70, 0xd2, 0x3a, 0x59, 0x9b, 0x7c,
    0xca, 0x4b, 0xda, 0x97, 0xb3, 0x1c, 0xc0, 0x03, 0xbb, 0xc4, 0x97, 0x05, 0x22, 0xe1, 0xc9,
    0x8e, 0xae, 0xc5, 0x44, 0xf3, 0xe9, 0x5c, 0x49, 0xb4, 0xb3, 0x0f, 0xd6, 0x4f, 0x82, 0x9b,
    0x33, 0x0c, 0xe0, 0xad, 0x24, 0x8a, 0xd8, 0x24, 0x02, 0x4c, 0xb9, 0x48, 0xa6, 0xe5, 0x54,
    0x5a, 0x0e, 0xe0, 0xd0, 0x04, 0xbc, 0xaf, 0x88, 0xd8, 0x81, 0xef, 0x50, 0x26, 0x11, 0x39,
    0xa6, 0x46, 0x47, 0x2b, 0x9a, 0x1c, 0x55, 0x7d, 0x6e, 0x31, 0xaf, 0xbb, 0x92, 0xf9, 0xd5,
    0xb0, 0xea, 0x65, 0x7f, 0xb6, 0xa9, 0xfa, 0x1e, 0x82, 0x65, 0x9f, 0xbe, 0xdc, 0xcd, 0xa8,
    0xf8, 0x65, 0x37, 0xb4, 0xf8, 0x9f, 0xc1, 0x42, 0x02, 0x47, 0xf9, 0xdb, 0x18, 0x9b, 0x85,
    0x24, 0xc9, 0xb9, 0x85, 0x94, 0x08, 0x02, 0xe4, 0xd0, 0xe8, 0x4e, 0x6e, 0x8f, 0xf7, 0xa4,
    0x29, 0x85, 0x4f, 0xf7, 0x98, 0xab, 0xf2, 0xf3, 0xcc, 0x8a, 0x3e, 0xbf, 0x98, 0x10, 0xfb,
    0x66, 0x76, 0x20, 0xa1, 0x90, 0x34, 0x34, 0x9e, 0xc7, 0x47, 0x24, 0x5d, 0xe7, 0x15, 0x73,
    0x14, 0x12, 0x77, 0x3b, 0x66, 0xf7, 0x52, 0x58, 0x23, 0x96, 0x06, 0xbe, 0x08, 0x43, 0x58,
    0xe1, 0x69, 0x49, 0xf0, 0xc5, 0x99, 0x47, 0xeb, 0xdf, 0x23, 0x4c, 0x5e, 0x97, 0xec, 0x20,
    0x4a, 0x8f, 0xfd, 0x40, 0x72, 0x17, 0xfe, 0xe7, 0xa5, 0xf4, 0xf3, 0xeb, 0xab, 0x9b, 0xbf,
    0x21, 0xdd, 0xfb, 0x17, 0x58, 0x0a, 0x8d, 0x79, 0xed, 0x13, 0x6b, 0x3e, 0x27, 0x3e, 0x71,
    0x45, 0x72, 0x79, 0x73, 0x78, 0xda, 0xad, 0x35, 0xa9, 0x9a, 0xc6, 0xb6, 0xfa, 0x25, 0x8b,
    0xea, 0x68, 0x12, 0x2c, 0xa6, 0x8e, 0xc4, 0x02, 0xbe, 0x92, 0x1c, 0x0c, 0x74, 0x5d, 0x7a,
    0x11, 0xde, 0x5f, 0x84, 0x17, 0xf8, 0xff, 0xe7, 0x3b, 0x1f, 0xa3, 0x0b, 0x58, 0x69, 0x67,
    0x59, 0xe0, 0x94, 0x5a, 0xbd, 0xef, 0xad, 0xeb, 0xaf, 0x80, 0x41, 0x9c, 0xa3, 0xb0, 0x26,
    0xf5, 0xe1, 0x4c, 0xb2, 0x1e, 0x0d, 0x79, 0x7e, 0xad, 0x17, 0xc5, 0xa2, 0x65, 0xf4, 0xb5,
    0x01, 0xb6, 0xdf, 0xe6, 0x05, 0xfe, 0xdf, 0x92, 0xb0, 0xfd, 0x2b, 0xb0, 0x2f, 0xfd, 0xad,
    0x34, 0xa3, 0xa1, 0x84, 0x86, 0xed, 0xb9, 0x8f, 0x79, 0x66, 0xec, 0xbd, 0xd7, 0x8b, 0x22,
    0x56, 0x60, 0x9f, 0x69, 0x14, 0x8a, 0xb8, 0x8e, 0x19, 0xe1, 0xa2, 0xfd, 0x20, 0x76, 0x9b,
    0xde, 0xd6, 0x9b, 0x46, 0x6e, 0x1e, 0x64, 0xd8, 0x44, 0x14, 0x47, 0x7d, 0xd5, 0x20, 0xd0,
    0x44, 0x11, 0xf0, 0x50, 0xea, 0x48, 0xa4, 0xe7, 0xa6, 0x2e, 0x6d, 0x56, 0x06, 0xda, 0xcf,
    0xf2, 0x47, 0x71, 0x58, 0xee, 0x7c, 0x19, 0xbe, 0x3d, 0xf8, 0xf3, 0x8a, 0x52, 0x55, 0xf3,
    0x71, 0x37, 0x80, 0xf7, 0x35, 0xb7, 0x7f, 0x04, 0x8c, 0xb5, 0x67, 0xd8, 0x0b, 0x16, 0x39,
    0xc5, 0xbf, 0xab, 0x4f, 0x45, 0x13, 0xf7, 0xef, 0xb6, 0xeb, 0x2c, 0x5e, 0x4d, 0xa7, 0x1f,
    0xe6, 0xaa, 0x8f, 0x2c, 0xfd, 0xe6, 0x50, 0x7c, 0xc4, 0x03, 0x23, 0xbe, 0xf6, 0x34, 0x0f,
    0x08, 0x36, 0xf5, 0xf3, 0x8e, 0x98, 0x30, 0xd7, 0xa1, 0xa2, 0x36, 0x35, 0x32, 0xb7, 0x2d,
    0x17, 0xdf, 0x13, 0x17, 0x5b, 0x1c, 0xf0, 0x23, 0xdf, 0xc6, 0xed, 0x45, 0xbd, 0xf5, 0xfa,
    0x8f, 0x16, 0x21, 0x01, 0x77, 0x68, 0x31, 0x9e, 0x51, 0x62, 0xba, 0xf0, 0x66, 0x58, 0x7a,
    0x1c, 0x89, 0x9e, 0x87, 0xe4, 0x86, 0xc1, 0x4c, 0x72, 0x08, 0xb8, 0x95, 0x0e, 0xf1, 0x6d,
    0x8d, 0x86, 0x95, 0xa8, 0x63, 0x22, 0x2d, 0x22, 0x6c, 0x67, 0xc7, 0x46, 0x93, 0x4d, 0x97,
    0x56, 0x6e, 0xcd, 0x5e, 0x0f, 0xd2, 0xd4, 0x4d, 0x91, 0x11, 0x35, 0x99, 0xba, 0xa3, 0xda,
    0x74, 0x35, 0x74, 0x1d, 0x32, 0x25, 0xb7, 0x56, 0x5c, 0xce, 0x72, 0x69, 0xb4, 0x74, 0x57,
    0xc1, 0x90, 0xda, 0x3b, 0x61, 0x94, 0x09, 0xdd, 0xf2, 0x97, 0x42, 0x2c, 0x93, 0xda, 0x0c,
    0x6b, 0x2e, 0x9e, 0x52, 0xb3, 0xca, 0xb8, 0x4e, 0x8d, 0x8f, 0x22, 0xa6, 0xea, 0xad, 0xb4,
    0x38, 0x2e, 0xaf, 0xf3, 0xa4, 0x93, 0x70, 0x56, 0xbf, 0x16, 0x7b, 0xd3, 0xd9, 0xa7, 0xd7,
    0xcd, 0x26, 0xcd, 0x2a, 0xf2, 0x16, 0x31, 0x6b, 0x68, 0x0f, 0x80, 0x63, 0x52, 0x2b, 0xcd,
    0x92, 0xe1, 0xab, 0xfd, 0xd6, 0x38, 0x64, 0xf8, 0x0a, 0x4a, 0x66, 0x4d, 0xf3, 0x88, 0xa1,
    0x76, 0x7e, 0x46, 0x41, 0xef, 0xd3, 0x97, 0x75, 0x52, 0xfa, 0xc7, 0x7c, 0x02, 0x02, 0x77,
    0x00, 0x74, 0x98, 0xb7, 0xc2, 0xe9, 0x87, 0x85, 0x16, 0x49, 0x5d, 0x18, 0x53, 0xe0, 0xb0,
    0xd8, 0x02, 0xb2, 0x72, 0xd6, 0x08, 0xd3, 0x2b, 0xd8, 0x60, 0x45, 0xd6, 0x55, 0x24, 0x5d,
    0x4d, 0x7f, 0x7e, 0x8e, 0xc8, 0xf3, 0x85, 0xef, 0x4c, 0x89, 0xf3, 0x32, 0x51, 0xa1, 0xcb,
    0xe9, 0x77, 0x01, 0xfd, 0x5b, 0x07, 0xcc, 0xf6, 0x14, 0x70, 0x05, 0xa0, 0x9d, 0x04, 0x97,
    0x8c, 0xad, 0xde, 0x22, 0x1f, 0x7b, 0xae, 0x02, 0x6c, 0xaa, 0xbd, 0x5d, 0x7d, 0x35, 0x61,
    0xc3, 0xe0, 0x70, 0xc5, 0x3c, 0x68, 0xe1, 0x81, 0xaa, 0x46, 0xac, 0x23, 0xb8, 0x66, 0x4e,
    0x01, 0x7f, 0x3f, 0x67, 0xf1, 0xdb, 0xdd, 0x19, 0xc0, 0x0c, 0x32, 0x16, 0xb8, 0x45, 0xac,
    0x83, 0x37, 0x13, 0x29, 0x18, 0x50, 0x66, 0xa3, 0x7a, 0xe9, 0x4d, 0x31, 0xb6, 0x58, 0xb1,
    0xa3, 0x29, 0x78, 0x81, 0x54, 0xee, 0x7c, 0xa3, 0xa8, 0x43, 0x21, 0xdb, 0x37, 0xb7, 0xbd,
    0x63, 0xb9, 0x41, 0x75, 0xb6, 0xef, 0xf1, 0xb3, 0xdc, 0xa0, 0x3d, 0x47, 0x70, 0x42, 0xa6,
    0x60, 0x43, 0x96, 0x6b, 0xd2, 0x65, 0x48, 0x78, 0x97, 0x94, 0x5e, 0x36, 0xe5, 0xc1, 0x94,
    0x9a, 0x59, 0x2f, 0xba, 0x4e, 0x0c, 0x72, 0xec, 0x31, 0xb2, 0x5e, 0x58, 0xb3, 0x6f, 0x5d,
    0x08, 0xd3, 0x41, 0xfa, 0x8c, 0xed, 0xbd, 0x85, 0x8c, 0x91, 0x59, 0xfb, 0xa6, 0xce, 0xd7,
    0xe3, 0x3f, 0x3a, 0x5e, 0x8d, 0x64, 0x68, 0xbd, 0x6e, 0xc2, 0xa9, 0x00, 0x8d, 0xed, 0xa9,
    0x8e, 0x31, 0x5a, 0xa3, 0x19, 0xc2, 0x81, 0x0b, 0x17, 0x43, 0x20, 0xff, 0xf8, 0x8f, 0x45,
    0x63, 0x85, 0xe0, 0x43, 0xa9, 0x5a, 0x07, 0xc4, 0x0e, 0xe4, 0x76, 0x3b, 0x09, 0xcb, 0x54,
    0x28, 0x22, 0xae, 0x7c, 0xe7, 0x0d, 0x8b, 0xf5, 0x15, 0x16, 0xae, 0x53, 0xad, 0x44, 0xbe,
    0x36, 0x29, 0xb5, 0x89, 0x31, 0x5f, 0x7d, 0x89, 0x89, 0x4f, 0x47, 0x20, 0x94, 0x1e, 0xb2,
    0x8a, 0xb6, 0xaf, 0x80, 0x60, 0xda, 0x83, 0xde, 0xac, 0xa2, 0xcd, 0x77, 0xaa, 0xdc, 0x78,
    0xcd, 0x00, 0xf6, 0x43, 0x0c, 0xab, 0xcc, 0x91, 0x76, 0xbd, 0x7e, 0xd4, 0x37, 0xdc, 0x42,
    0xbf, 0x3d, 0x2a, 0x56, 0xd6, 0xf2, 0xab, 0xa3, 0x5e, 0xdd, 0x34, 0xbc, 0x78, 0xfc, 0xe2,
    0xde, 0x29, 0xfd, 0xda, 0xbf, 0x0b, 0x3e, 0xef, 0xb1, 0xb0, 0xa2, 0x0c, 0xc7, 0x91, 0x9a,
    0x83, 0x0d, 0x47, 0x50, 0xa4, 0x69, 0x60, 0xd5, 0x32, 0xeb, 0x2e, 0x56, 0x60, 0x82, 0x4d,
    0xad, 0x7d, 0xb8, 0xb6, 0xdf, 0x60, 0x58, 0x4d, 0x8f, 0x39, 0x76, 0xdb, 0x6f, 0x30, 0x6c,
    0x38, 0x56, 0x74, 0x45, 0x23, 0x90, 0xfd, 0x28, 0x9b, 0x32, 0x24, 0xe2, 0xda, 0xa6, 0xa1,
    0xba, 0xf2, 0xb8, 0xe6, 0x01, 0x0c, 0xbd, 0x6a, 0xa3, 0xbe, 0xef, 0xbf, 0x3a, 0x64, 0x20,
    0x0a, 0x0d, 0xaf, 0xbc, 0x04, 0x2b, 0xec, 0xb8, 0x09, 0x4f, 0xcd, 0xfa, 0xb2, 0x2c, 0xf8,
    0xe4, 0x34, 0xe7, 0xe8, 0x7d, 0x8b, 0xe9, 0x52, 0x1b, 0x88, 0x63, 0x93, 0xd2, 0x83, 0xcd,
    0x75, 0xa1, 0x61, 0x2a, 0xf3, 0x90, 0xb8, 0xde, 0x17, 0x36, 0xb4, 0xed, 0xde, 0x9b, 0x4e,
    0x95, 0x3a, 0x0b, 0x30, 0xc2, 0x3f, 0x19, 0xe7, 0xf2, 0xfc, 0x64, 0x36, 0x43, 0xee, 0xd3,
    0x5c, 0x2e, 0x88, 0x4e, 0xe0, 0x61, 0xef, 0x10, 0x55, 0x13, 0xed, 0x89, 0xc1, 0xa5, 0x07,
    0xe5, 0xd8, 0x95, 0xc1, 0xe0, 0x04, 0x4b, 0x19, 0xcd, 0xf6, 0x5e, 0x38, 0x1b, 0xab, 0x94,
    0xaa, 0x2e, 0xd2, 0x35, 0xd6, 0x30, 0xb8, 0x5e, 0x18, 0xc5, 0x12, 0x97, 0xc5, 0xd8, 0xd1,
    0x7f, 0x49, 0xc5, 0x26, 0x96, 0xba, 0x00, 0x99, 0xa7, 0x34, 0xfd, 0xd8, 0x72, 0xb1, 0x75,
    0x7e, 0xfe, 0x89, 0xd1, 0xea, 0xa7, 0x64, 0xca, 0x92, 0x23, 0x01, 0x5f, 0xa4, 0x4d, 0xf1,
    0xe5, 0x16, 0x20, 0xf7, 0xfc, 0xb2, 0x5d, 0x17, 0xa5, 0xa9, 0x4a, 0x08, 0xc6, 0x76, 0xfb,
    0x3c, 0xe9, 0x01, 0x63, 0xb4, 0x36, 0x3f, 0xc1, 0x56, 0xc4, 0x31, 0xe4, 0xf9, 0xf6, 0x74,
    0x48, 0xf0, 0xfc, 0x0c, 0x7b, 0x1d, 0xf6, 0x4e, 0x1f, 0xfa, 0xa0, 0xf6, 0x3b, 0x6d, 0xef,
    0xd5, 0x7e, 0xde, 0x42, 0xaf, 0xd1, 0xfa, 0xf9, 0x66, 0x34, 0xef, 0xa6, 0xd6, 0xf2, 0x36,
    0x16, 0xfe, 0x1e, 0xd5, 0x7f, 0x03, 0x3c, 0xa7, 0x76, 0xe1, 0xa5, 0xaf, 0x53, 0x0e, 0x7f,
    0xfd, 0x79, 0x75, 0x53, 0xa0, 0x06, 0x90, 0xa7, 0x8a, 0xbc, 0x26, 0x35, 0x1d, 0x7a, 0xd7,
    0x5b, 0xe0, 0x14, 0x49, 0xd9, 0x70, 0xe9, 0x59, 0x78, 0xf7, 0x27, 0x9f, 0xbe, 0xb2, 0x1e,
    0xc3, 0xf6, 0x8e, 0x46, 0x19, 0x3d, 0xdc, 0x3c, 0x90, 0xc3, 0x86, 0xe4, 0x70, 0xb4, 0x72,
    0x68, 0xbf, 0x8a, 0x41, 0x5a, 0x00, 0xdd, 0x3e, 0xbd, 0x59, 0xcc, 0x7a, 0x12, 0x1c, 0x36,
    0x9c, 0x2d, 0x5b, 0x7d, 0x0f, 0x94, 0xd2, 0x3b, 0xa5, 0xb4, 0x77, 0x62, 0x61, 0xdd, 0x19,
    0xe8, 0xe4, 0x6b, 0x50, 0x30, 0x83, 0x76, 0xc1, 0x01, 0x0e, 0x54, 0x3f, 0x9a, 0xe5, 0xab,
    0x83, 0x47, 0xa5, 0xb7, 0x67, 0x6e, 0x46, 0x83, 0xc1, 0x4e, 0xd7, 0xd5, 0xf8, 0x1b, 0x81,
    0xbc, 0x00, 0x81, 0x3d, 0xb6, 0x4a, 0xbd, 0x15, 0xd6, 0xab, 0xd5, 0xae, 0x3a, 0x1f, 0xb9,
    0x7d, 0x17, 0xd2, 0x35, 0x90, 0x0a, 0x8b, 0x21, 0x7c, 0xca, 0xec, 0x89, 0x4f, 0xd2, 0x63,
    0x69, 0x4b, 0x4e, 0x40, 0x22, 0xc9, 0x0f, 0xb2, 0x26, 0x1a, 0x4e, 0x20, 0x59, 0xfe, 0x32,
    0x78, 0xfe, 0xed, 0xf9, 0xe5, 0x47, 0x1f, 0x1e, 0x40, 0x63, 0xa6, 0xd2, 0x27, 0x6c, 0x1b,
    0xdf, 0xc4, 0x5f, 0xfd, 0x02, 0x54, 0xed, 0x2e, 0x59, 0xd4, 0xed, 0x13, 0x7b, 0xd0, 0xaf,
    0x84, 0x7b, 0x22, 0xce, 0x27, 0xec, 0xde, 0xf3, 0x09, 0x37, 0xf0, 0x29, 0x3f, 0x09, 0xb0,
    0x46, 0x21, 0x6d, 0x2f, 0x40, 0x93, 0x05, 0xe1, 0x6f, 0x5a, 0x25, 0x03, 0xc0, 0xdd, 0x81,
    0xe3, 0xe0, 0xe8, 0x36, 0x74, 0xe7, 0x43, 0xa0, 0x39, 0x78, 0x06, 0x2b, 0xa5, 0xe1, 0x1d,
    0xd2, 0x4a, 0x1a, 0x96, 0x80, 0x68, 0x49, 0x77, 0x80, 0x6c, 0xc9, 0xe6, 0xd8, 0x16, 0x49,
    0x2c, 0x9c, 0xce, 0xa9, 0xb9, 0x5c, 0xca, 0x48, 0x3d, 0xbd, 0xb8, 0x1d, 0x6c, 0xaa, 0xdd,
    0x62, 0xd4, 0x5b, 0x1b, 0xfb, 0x2e, 0x6a, 0xff, 0x5d, 0xd4, 0x25, 0x6e, 0x0b, 0x0f, 0x5a,
    0x9f, 0xa2, 0x24, 0xf5, 0xc3, 0x20, 0x06, 0xc6, 0x21, 0x4e, 0x87, 0xe8, 0x4a, 0x2d, 0xa7,
    0x7a, 0xd6, 0x01, 0x50, 0x5b, 0xfb, 0xcd, 0x63, 0x49, 0x26, 0x76, 0xee, 0x00, 0x36, 0x0e,
    0x29, 0xb1, 0x0a, 0xd9, 0x4a, 0xe2, 0xd9, 0x06, 0x2c, 0x63, 0xc1, 0xbb, 0x03, 0x39, 0x99,
    0x8f, 0xbc, 0xf6, 0x5f, 0x64, 0x93, 0x51, 0xb7, 0x14, 0xd8, 0xaa, 0x17, 0xe3, 0x54, 0x55,
    0xbd, 0x23, 0x55, 0x16, 0x73, 0x06, 0x56, 0x32, 0xdc, 0x70, 0x29, 0x39, 0x04, 0xe4, 0x1d,
    0xcd, 0x40, 0x07, 0x70, 0xe6, 0x07, 0xb8, 0x5a, 0xe1, 0xed, 0x82, 0x85, 0x73, 0xb1, 0x6d,
    0xc4, 0x73, 0x1c, 0xe2, 0x8b, 0x48, 0xf0, 0xd6, 0xfd, 0x1f, 0xe9, 0x85, 0x1a, 0xf0, 0x77,
    0xa9, 0xaf, 0xfc, 0x14, 0xbe, 0xc7, 0xbe, 0x7a, 0x65, 0x2a, 0x5f, 0x51, 0x89, 0x2c, 0x6a,
    0x89, 0x27, 0x38, 0xed, 0x29, 0x1f, 0x02, 0x10, 0xd9, 0x5c, 0x7f, 0x28, 0x4e, 0x3d, 0xa7,
    0xe9, 0xb4, 0xf6, 0xfc, 0xda, 0x68, 0x61, 0xdb, 0x24, 0x8a, 0x76, 0x2b, 0xe1, 0x10, 0x7a,
    0x84, 0xf7, 0xf2, 0x05, 0xff, 0x99, 0x1c, 0x79, 0xff, 0x23, 0x0e, 0x68, 0xae, 0x0b, 0x12,
    0x25, 0x36, 0xc0, 0xa4, 0xa6, 0xac, 0x2f, 0xc1, 0x63, 0xb0, 0xd9, 0x22, 0xed, 0x90, 0xe4,
    0xec, 0xca, 0x2b, 0x5d, 0x2e, 0x34, 0x78, 0xb8, 0x05, 0x71, 0x4d, 0x82, 0xb1, 0x6f, 0xfe,
    0x6b, 0xe7, 0xa3, 0xed, 0xa0, 0x10, 0xa6, 0x44, 0xf3, 0xf9, 0xc9, 0xf2, 0x54, 0x7e, 0x81,
    0x81, 0xd8, 0xc6, 0xc5, 0x31, 0xc7, 0x38, 0x3a, 0x1d, 0x34, 0xa1, 0xa0, 0xdf, 0xae, 0x66,
    0xcd, 0x7c, 0x04, 0x66, 0x86, 0xc6, 0x01, 0x03, 0xbc, 0x6b, 0xf9, 0x69, 0xf5, 0xf8, 0xe9,
    0xf7, 0x9f, 0xe4, 0xba, 0x8a, 0x40, 0x71, 0x4d, 0x34, 0xc7, 0xb6, 0x3b, 0x34, 0xfa, 0x90,
    0xf5, 0xb6, 0x3b, 0xe0, 0xe4, 0x5c, 0xeb, 0xd7, 0x0b, 0xf0, 0x4d, 0xf1, 0x96, 0x39, 0x71,
    0x59, 0x7a, 0x89, 0x03, 0x24, 0x76, 0x87, 0x3d, 0x1d, 0xd8, 0x04, 0xf1, 0xcb, 0x0a, 0xa1,
    0xd5, 0x6a, 0x8f, 0xe4, 0x99, 0x9f, 0x9a, 0x52, 0xd8, 0xe7, 0xb2, 0x20, 0x2c, 0xfc, 0xc8,
    0xc0, 0x56, 0x0a, 0xdc, 0x1d, 0x76, 0xbf, 0x14, 0x22, 0xdd, 0xf6, 0xb0, 0x64, 0xb6, 0xb7,
    0xb6, 0xa2, 0xea, 0x29, 0x8e, 0xb7, 0xfa, 0x98, 0xda, 0xe4, 0xc3, 0x3e, 0x4e, 0xc0, 0x68,
    0x1e, 0x35, 0x55, 0xaf, 0xed, 0x92, 0xe3, 0x97, 0xea, 0x97, 0x0e, 0x64, 0x7a, 0x44, 0xf3,
    0x5d, 0x49, 0x11, 0xa1, 0xe9, 0x34, 0x20, 0x31, 0x62, 0xd7, 0xfb, 0x42, 0x68, 0xb2, 0x08,
    0x14, 0x41, 0x0f, 0xc4, 0x42, 0x9f, 0x24, 0x00, 0xae, 0x02, 0x1e, 0xbe, 0x4c, 0x64, 0xea,
    0x9e, 0x1b, 0x59, 0x0a, 0x9d, 0x5a, 0x3b, 0xdf, 0x70, 0x48, 0xb1, 0x07, 0x58, 0xb2, 0x9b,
    0xb4, 0x0d, 0x10, 0xa9, 0xa4, 0xa8, 0x84, 0x82, 0xbb, 0xf7, 0x04, 0xd8, 0x21, 0x29, 0xd0,
    0xa9, 0xc3, 0xa5, 0x04, 0xbd, 0xbd, 0xce, 0x21, 0x47, 0x09, 0x7c, 0x33, 0x0f, 0x84, 0xd0,
    0x6e, 0xe7, 0x0e, 0x58, 0x8a, 0xe2, 0xe5, 0x74, 0x0f, 0x36, 0x9e, 0xc0, 0xbc, 0x4e, 0x86,
    0x1b, 0x84, 0x6f, 0xad, 0xb2, 0x96, 0xd5, 0xf6, 0x7f, 0xfa, 0x2b, 0xf8, 0xf9, 0x26, 0xf7,
    0x2d, 0xf8, 0x68, 0x4d, 0xaf, 0xda, 0x65, 0x68, 0x8a, 0xbe, 0x11, 0xf9, 0x3f, 0x7f, 0xf6,
    0x22, 0x9e, 0x2f, 0x58, 0x83, 0x82, 0x1a, 0xa8, 0x37, 0x76, 0xb1, 0x9a, 0xf6, 0x5d, 0x71,
    0x08, 0xa8, 0xc9, 0xad, 0xf9, 0x57, 0x43, 0xbd, 0xb2, 0x8f, 0x19, 0x41, 0xad, 0xbc, 0x13,
    0xea, 0x4d, 0x10, 0xce, 0xac, 0xa9, 0xc4, 0x68, 0x39, 0x67, 0xd7, 0xae, 0xe0, 0xb8, 0x64,
    0x6f, 0xde, 0xbe, 0x7f, 0x7d, 0xf5, 0x53, 0x7b, 0x14, 0xbf, 0x3f, 0x60, 0x5f, 0xa6, 0x2a,
    0x1d, 0x78, 0x5f, 0xbe, 0x7a, 0xf1, 0xf6, 0xfd, 0xd5, 0x87, 0x57, 0x2f, 0xab, 0x37, 0x3f,
    0xfe, 0x4e, 0x13, 0x69, 0x34, 0xf9, 0x3c, 0x75, 0x9e, 0x7c, 0x03, 0x53, 0x66, 0x5d, 0x7d,
    0x2f, 0x5f, 0x50, 0x17, 0x7e, 0x5f, 0x49, 0x8e, 0x55, 0x48, 0x0e, 0x32, 0x2a, 0x9b, 0x82,
    0x74, 0xb6, 0xbc, 0xa0, 0x2e, 0x5d, 0x63, 0x74, 0xb6, 0x9f, 0x9a, 0x34, 0x74, 0x5b, 0x2b,
    0x42, 0xb8, 0x24, 0x2d, 0xc3, 0xaa, 0x3d, 0xf1, 0xa6, 0xce, 0xe5, 0x4d, 0x30, 0x23, 0x75,
    0x1f, 0x36, 0x6d, 0x30, 0x57, 0xf7, 0x46, 0x9f, 0x44, 0xc0, 0x26, 0xbf, 0x67, 0xbf, 0x70,
    0x99, 0x4f, 0x97, 0x6f, 0xe8, 0xaf, 0x2f, 0xaf, 0xdf, 0x24, 0xd4, 0x9b, 0x56, 0xca, 0xfd,
    0x11, 0x7a, 0xfd, 0xb4, 0x9c, 0x6b, 0x38, 0xaa, 0xb4, 0x6c, 0xb4, 0xb2, 0xcb, 0xe4, 0x29,
    0x4a, 0x2c, 0x70, 0x5c, 0xfa, 0xfc, 0xd3, 0x88, 0x00, 0xb7, 0x53, 0x76, 0x86, 0xb2, 0xf6,
    0x12, 0xeb, 0x9e, 0x44, 0x40, 0x6b, 0xbe, 0x60, 0x28, 0xb8, 0x95, 0x70, 0xaf, 0x72, 0xcf,
    0xaa, 0x55, 0x78, 0x88, 0xe8, 0x6e, 0xbf, 0xcd, 0x76, 0xc0, 0xc6, 0xf7, 0x89, 0x73, 0x15,
    0x70, 0xd9, 0x37, 0xe3, 0xd1, 0xae, 0x5e, 0xfd, 0x5e, 0x67, 0xf5, 0xed, 0xf1, 0xac, 0xda,
    0xb3, 0xdb, 0x20, 0x70, 0x7a, 0xe3, 0x8b, 0x1f, 0x92, 0x87, 0x7d, 0x75, 0x88, 0x16, 0xe8,
    0x58, 0xd5, 0x9d, 0xeb, 0xa2, 0xb9, 0x5e, 0x6f, 0x1e, 0x74, 0x4e, 0x60, 0x17, 0x5c, 0xb6,
    0xeb, 0x59, 0x49, 0x13, 0xf0, 0xa2, 0x7c, 0xe9, 0xdc, 0xa6, 0x5a, 0xa8, 0xbb, 0xb8, 0xb8,
    0x99, 0x9d, 0x13, 0x26, 0x9d, 0xfc, 0x1e, 0x12, 0x97, 0x84, 0xc4, 0x07, 0xf3, 0x24, 0xb1,
    0xdf, 0x27, 0xbf, 0xe9, 0x62, 0xd8, 0xee, 0x64, 0x92, 0x40, 0x07, 0xd0, 0x2b, 0x76, 0xd1,
    0x43, 0x06, 0x32, 0xe2, 0xa0, 0xef, 0x8d, 0x2e, 0xe2, 0xe0, 0x02, 0x2c, 0x53, 0x80, 0xfd,
    0x2d, 0x0a, 0xa8, 0xb7, 0x94, 0xb4, 0xca, 0xae, 0x4a, 0x96, 0x52, 0x0d, 0xc8, 0xf5, 0x26,
    0x79, 0xcf, 0xdb, 0xbe, 0xa6, 0x39, 0x24, 0xd1, 0x26, 0x82, 0xf1, 0x3c, 0xd6, 0xdb, 0x83,
    0x61, 0x05, 0xed, 0xf4, 0xe3, 0xce, 0xb2, 0x2e, 0xb1, 0x77, 0x37, 0x64, 0xc5, 0xaa, 0xc5,
    0x7f, 0xa7, 0xb2, 0x0a, 0x53, 0xaf, 0x11, 0x96, 0xec, 0x74, 0xe9, 0x8b, 0x56, 0x31, 0x91,
    0xf5, 0x37, 0x76, 0x18, 0x6b, 0xb9, 0x8e, 0xa5, 0x7b, 0x6c, 0xbb, 0xc9, 0x10, 0xf1, 0xa7,
    0x88, 0xc5, 0xd5, 0xaf, 0xaf, 0x6e, 0xde, 0xbe, 0x7e, 0x25, 0x12, 0xaf, 0xa8, 0xc5, 0x6e,
    0xff, 0x53, 0x34, 0xb5, 0x47, 0x25, 0x4a, 0x46, 0xce, 0xa1, 0xd0, 0xd1, 0x0f, 0x65, 0x13,
    0xd7, 0x44, 0xb4, 0x67, 0x1a, 0xfa, 0x36, 0xc2, 0x3b, 0x92, 0x38, 0x5e, 0x4a, 0x68, 0xcc,
    0xc4, 0xbd, 0xde, 0xbd, 0x7f, 0xf5, 0xe1, 0xc3, 0x7f, 0xfe, 0xfe, 0xc3, 0xdb, 0xb7, 0x2f,
    0x19, 0xac, 0xa3, 0x90, 0xf2, 0xc1, 0xa4, 0x82, 0x90, 0xbe, 0x7f, 0x75, 0xf5, 0xd3, 0x4f,
    0x82, 0xd4, 0x9a, 0x59, 0xff, 0xc0, 0x21, 0x67, 0xc2, 0xc0, 0x5e, 0xbd, 0xbe, 0xfa, 0x7f,
    0x6f, 0x7e, 0xa8, 0xc2, 0xdb, 0xc8, 0xa3, 0x55, 0xca, 0xed, 0x83, 0x41, 0xaf, 0x7d, 0x9f,
    0x87, 0x12, 0x3f, 0xac, 0x80, 0xb4, 0xbd, 0x40, 0x62, 0x05, 0xac, 0x9e, 0x03, 0x57, 0xad,
    0x40, 0x6b, 0x1e, 0xed, 0x5c, 0x87, 0x80, 0x95, 0x67, 0xdd, 0xc9, 0x04, 0x3b, 0xde, 0xa1,
    0xcd, 0x48, 0x2d, 0x20, 0x56, 0xa0, 0x58, 0x8a, 0x4e, 0x52, 0xc0, 0x9c, 0xd0, 0xa2, 0xd9,
    0xe6, 0x84, 0x85, 0x0d, 0x9c, 0xcf, 0x8e, 0x96, 0xd9, 0xdf, 0xee, 0xad, 0xf0, 0x36, 0x7a,
    0x9d, 0xe3, 0xc3, 0xf5, 0x8a, 0xaa, 0xb0, 0xae, 0x15, 0x85, 0x6e, 0x42, 0x61, 0x35, 0xd8,
    0xa3, 0x53, 0xd5, 0xca, 0xb7, 0x7a, 0xb5, 0xea, 0x26, 0x79, 0x52, 0xed, 0x8e, 0xfb, 0x63,
    0xe3, 0xf6, 0x9d, 0x84, 0x78, 0x57, 0xe0, 0xde, 0x9c, 0x7c, 0x01, 0x24, 0x6c, 0x1a, 0xcb,
    0x6d, 0xb4, 0x72, 0x99, 0x5a, 0xdf, 0x2e, 0xe2, 0x5e, 0xd4, 0x29, 0x1b, 0xb5, 0xfc, 0x4c,
    0x35, 0x6c, 0x79, 0xbe, 0x98, 0x4e, 0x9f, 0x2a, 0xa6, 0x3c, 0xd8, 0xa4, 0x36, 0x2f, 0x1d,
    0x8c, 0xdd, 0x85, 0x58, 0x9e, 0x23, 0x2d, 0xc2, 0x8b, 0xc8, 0xd4, 0xbd, 0x48, 0xbd, 0x53,
    0x59, 0xd0, 0x1b, 0xd3, 0x54, 0x0d, 0x0b, 0xdf, 0xa1, 0xaf, 0x40, 0xd0, 0x81, 0xdf, 0x12,
    0x20, 0xd8, 0x6c, 0x42, 0xf1, 0x01, 0x19, 0x14, 0x6a, 0x35, 0x13, 0x20, 0x79, 0x52, 0x1d,
    0xfb, 0x93, 0x4b, 0x27, 0x22, 0x7b, 0xd4, 0xf6, 0x96, 0x61, 0x5e, 0xd5, 0x30, 0xa3, 0x9f,
    0x69, 0x1d, 0xe4, 0xec, 0xbc, 0x5e, 0x84, 0x0f, 0xaa, 0xca, 0x57, 0xe8, 0xc5, 0x1e, 0x8a,
    0x9f, 0x02, 0xb4, 0x2f, 0x67, 0x5b, 0xab, 0x2b, 0x91, 0xed, 0xd9, 0xdb, 0x6e, 0xa5, 0x1a,
    0x20, 0x4c, 0x15, 0x5b, 0x7d, 0x38, 0x78, 0x39, 0xfb, 0xe9, 0xd0, 0x2d, 0xc6, 0x1c, 0xa8,
    0x35, 0xf1, 0xb4, 0x66, 0x49, 0x5a, 0x07, 0xe2, 0x83, 0x85, 0xd7, 0xc5, 0x3b, 0x6b, 0x97,
    0xf3, 0x8a, 0x5f, 0xb6, 0x81, 0xf7, 0x45, 0x19, 0xaa, 0x1f, 0xe9, 0x4a, 0x8f, 0x7d, 0x11,
    0xf2, 0x7d, 0x54, 0x19, 0xd2, 0xbd, 0xb2, 0x51, 0xb3, 0xa3, 0x54, 0x03, 0xe0, 0x03, 0x13,
    0x31, 0x55, 0x5a, 0x79, 0x08, 0x6b, 0x32, 0x77, 0x5b, 0xc8, 0x99, 0x9d, 0x99, 0x17, 0x05,
    0x4c, 0xb3, 0xe4, 0x11, 0x80, 0x2d, 0x59, 0x23, 0xf5, 0xee, 0x4c, 0x32, 0xbd, 0x97, 0xcd,
    0x65, 0xe5, 0xe6, 0x59, 0x23, 0x91, 0x90, 0xdc, 0x7a, 0x11, 0x30, 0x00, 0x16, 0x62, 0x06,
    0xf4, 0x99, 0xc2, 0x27, 0x4d, 0x3d, 0x17, 0x93, 0x42, 0x33, 0xda, 0x62, 0x55, 0x9a, 0xd1,
    0xfe, 0x79, 0xc1, 0x6a, 0x85, 0x85, 0x2a, 0x32, 0x9b, 0x31, 0xb0, 0x2d, 0x9f, 0x20, 0x7d,
    0x2d, 0xff, 0x1d, 0xd7, 0xd4, 0xbf, 0xb6, 0x5d, 0xe5, 0x77, 0xd6, 0x1e, 0xe1, 0xab, 0x99,
    0xb0, 0x56, 0x37, 0xa4, 0xba, 0x1c, 0xce, 0xd5, 0x11, 0x07, 0xfa, 0x79, 0x87, 0x39, 0x37,
    0xc2, 0x66, 0xa5, 0xaf, 0xef, 0xa6, 0x8d, 0x52, 0x8d, 0x14, 0x28, 0x65, 0x99, 0x36, 0xc7,
    0x05, 0xac, 0xdc, 0x32, 0x4b, 0x34, 0x08, 0xfe, 0x84, 0x08, 0xda, 0xcd, 0xdc, 0x4a, 0x22,
    0x2e, 0xf5, 0x6d, 0xf3, 0xf2, 0xf1, 0x6d, 0x69, 0xea, 0x55, 0x50, 0xaf, 0x15, 0x2d, 0x3d,
    0x9c, 0xdd, 0x0a, 0x24, 0xf5, 0xd6, 0x81, 0x5a, 0x41, 0x57, 0x5a, 0x1a, 0x50, 0x83, 0x8a,
    0x32, 0x29, 0xbf, 0xeb, 0xd4, 0x22, 0x17, 0xab, 0x71, 0x59, 0xc0, 0x67, 0x7b, 0x2b, 0x9b,
    0x48, 0x35, 0x3d, 0x6e, 0xfb, 0xae, 0xc3, 0x81, 0xb6, 0x67, 0x0f, 0xed, 0x32, 0x1f, 0x55,
    0xfc, 0x13, 0xa7, 0x96, 0xfd, 0x87, 0xa9, 0xba, 0x53, 0xf6, 0x36, 0x3c, 0x29, 0x31, 0x81,
    0xe2, 0xbe, 0x78, 0x03, 0x81, 0x59, 0xd8, 0xf1, 0xd7, 0xe4, 0x68, 0x89, 0x33, 0x62, 0xbb,
    0xd9, 0x20, 0x58, 0xfb, 0xbd, 0x7b, 0x7a, 0xc4, 0xdf, 0x7e, 0x06, 0xe2, 0x3a, 0x62, 0x75,
    0x67, 0xf2, 0x25, 0xfc, 0x1f, 0x7d, 0x29, 0xec, 0xd4, 0xbf, 0x25, 0x21, 0x3c, 0xdc, 0xc7,
    0x39, 0x53, 0xff, 0xf7, 0x2f, 0xd1, 0x0b, 0xcf, 0x95, 0xe5, 0xc1, 0x3b, 0x6b, 0xf4, 0xc7,
    0xd8, 0xf8, 0x12, 0xde, 0x5d, 0x1b, 0xf3, 0xc8, 0xfa, 0xa0, 0xce, 0x26, 0xea, 0x17, 0x63,
    0xf3, 0xfd, 0xcf, 0x9a, 0xf2, 0x7c, 0xf9, 0xc6, 0x78, 0xf5, 0x97, 0xb3, 0x47, 0xff, 0x7c,
    0x2f, 0x0f, 0x7f, 0x0e, 0xe5, 0x0f, 0x30, 0xed, 0x67, 0xeb, 0x96, 0x3c, 0xbd, 0x44, 0x89,
    0x89, 0xc4, 0x0f, 0x3f, 0x05, 0x7e, 0xaf, 0xef, 0x90, 0x81, 0x30, 0x74, 0x5d, 0xaa, 0xfb,
    0x7e, 0xa4, 0xa8, 0x03, 0xe9, 0x5f, 0x34, 0x63, 0x20, 0x2b, 0xca, 0x60, 0x20, 0xc3, 0x3a,
    0x51, 0x15, 0xc5, 0x80, 0xbf, 0x7b, 0x85, 0xa2, 0xe1, 0xcf, 0x02, 0xe4, 0x44, 0x08, 0xa0,
    0xfa, 0x1c, 0xb6, 0x19, 0x29, 0xfd, 0xfb, 0x48, 0xfe, 0xfc, 0x4f, 0x89, 0xc9, 0x15, 0xc6,
    0x31, 0xf8, 0x65, 0xbf, 0xd4, 0xb2, 0x7e, 0xe4, 0x7b, 0xf3, 0x39, 0x89, 0x33, 0x81, 0x7b,
    0xb9, 0x96, 0xea, 0x0c, 0x5d, 0x6d, 0x20, 0x13, 0x7b, 0xac, 0x9a, 0x9a, 0xad, 0x6b, 0x43,
    0xa9, 0xaa, 0xea, 0x98, 0x96, 0x26, 0x0f, 0x95, 0xa1, 0x33, 0x70, 0x0d, 0x47, 0xc1, 0x39,
    0x8e, 0x6c, 0x29, 0x43, 0xcd, 0x19, 0x0f, 0x95, 0x91, 0x35, 0xd4, 0x87, 0x16, 0x7c, 0x41,
    0xe6, 0x55, 0x33, 0xc8, 0x78, 0x3f, 0x9a, 0xb2, 0xc6, 0x54, 0x45, 0x8d, 0xf6, 0xbf, 0x4a,
    0xed, 0x2c, 0x0a, 0x16, 0x61, 0x52, 0xd3, 0xea, 0x47, 0xb1, 0x94, 0x55, 0x2f, 0x4b, 0x7f,
    0x7c, 0x72, 0x4f, 0x7f, 0x71, 0xf9, 0x22, 0xfd, 0xed, 0xe3, 0xf3, 0x3f, 0xd7, 0xdf, 0xda,
    0x97, 0xe0, 0xbe, 0x97, 0x3b, 0x19, 0xe4, 0x1f, 0x9f, 0x7f, 0x70, 0xe5, 0xa1, 0xf5, 0xcf,
    0xa3, 0x89, 0x15, 0xce, 0x9b, 0x9f, 0x99, 0x3d, 0xa1, 0x0a, 0xb7, 0x00, 0xc8, 0x7f, 0x58,
    0x56, 0xbf, 0x0f, 0xaf, 0xe8, 0x7b, 0xc7, 0x73, 0xb0, 0x3e, 0xd8, 0xab, 0x28, 0xc3, 0xb3,
    0x09, 0xa1, 0x71, 0xe9, 0xcc, 0xc8, 0xb9, 0x78, 0xff, 0xea, 0xea, 0x65, 0x72, 0xef, 0x94,
    0x6b, 0xb6, 0xae, 0x12, 0x42, 0x4c, 0x73, 0xe8, 0xb8, 0x8e, 0xe6, 0x5a, 0x26, 0x31, 0x86,
    0xaa, 0xdb, 0xfa, 0x58, 0x53, 0x34, 0x43, 0x55, 0x4c, 0xc5, 0xb0, 0x1c, 0x73, 0xe0, 0x0c,
    0x93, 0x0c, 0xc8, 0x90, 0x8c, 0x75, 0x75, 0xa8, 0xca, 0x26, 0x71, 0x64, 0xd7, 0x1c, 0x68,
    0x31, 0xda, 0x9c, 0x2c, 0xb2, 0x72, 0x76, 0xcb, 0x71, 0x1e, 0x2b, 0xf2, 0xe6, 0x04, 0x90,
    0x68, 0xbd, 0x43, 0xcf, 0x3d, 0xe7, 0x6a, 0x25, 0x40, 0xab, 0x8f, 0x77, 0xf5, 0xbe, 0xfa,
    0xc8, 0x0b, 0xce, 0xe4, 0x6a, 0xf1, 0x44, 0x35, 0xc3, 0x30, 0x88, 0x66, 0x0c, 0x1d, 0xc3,
    0x46, 0x23, 0x60, 0x77, 0x4d, 0x53, 0x14, 0x67, 0x6c, 0x0f, 0x75, 0x77, 0x2c, 0xeb, 0x44,
    0x0d, 0xd3, 0x18, 0x9a, 0xae, 0xa9, 0x0c, 0x55, 0x53, 0x96, 0x35, 0x45, 0x76, 0x1d, 0xc5,
    0x74, 0x38, 0x73, 0x57, 0xb7, 0x0d, 0xdb, 0xdd, 0xf8, 0x44, 0x9f, 0x7e, 0x27, 0xd1, 0xf6,
    0xd8, 0xe1, 0x39, 0x88, 0x49, 0x24, 0x59, 0xd2, 0xcc, 0xba, 0xf5, 0x6c, 0x6c, 0x79, 0x47,
    0x55, 0x7b, 0xbe, 0x84, 0x7b, 0x7a, 0x22, 0xe1, 0xf8, 0x6e, 0x69, 0x19, 0x2c, 0xa4, 0x7b,
    0x8b, 0xff, 0x24, 0x7d, 0xf7, 0xf4, 0xa3, 0xcf, 0xa4, 0x84, 0x1b, 0x04, 0xc0, 0x09, 0xdf,
    0xad, 0xf0, 0xdb, 0x35, 0xa9, 0xe1, 0x9b, 0xf5, 0x60, 0xf8, 0xe8, 0xb3, 0x57, 0x7f, 0x3c,
    0x77, 0x7f, 0x3c, 0x5b, 0x8f, 0x82, 0x36, 0x42, 0x00, 0x6f, 0x44, 0x50, 0x00, 0x63, 0x2d,
    0xdc, 0x08, 0x8a, 0x9b, 0x16, 0x28, 0xfa, 0xa4, 0x5f, 0xad, 0x48, 0xbf, 0x16, 0xf6, 0xe0,
    0x81, 0x16, 0x4d, 0x65, 0x40, 0xc6, 0xe6, 0x50, 0x77, 0x4c, 0xd3, 0xd4, 0x0d, 0x79, 0x38,
    0x75, 0x45, 0xd1, 0x1c, 0x65, 0x6c, 0x0e, 0x4c, 0x73, 0xe4, 0xda, 0x23, 0x43, 0x25, 0x43,
    0x55, 0xe0, 0xbf, 0xb6, 0x6b, 0x0d, 0x89, 0xa1, 0x3a, 0xc4, 0xd1, 0x76, 0xa8, 0xa8, 0x80,
    0x8b, 0x4c, 0x6e, 0x94, 0x7e, 0x37, 0x5b, 0x4c, 0x1f, 0x6b, 0xf4, 0x77, 0xf0, 0xc8, 0x00,
    0x8a, 0x69, 0x70, 0xfb, 0x38, 0xf7, 0x79, 0xae, 0xdb, 0x04, 0x6d, 0xd1, 0xb5, 0x1d, 0xdd,
    0x03, 0x66, 0x0d, 0x94, 0x1f, 0x7d, 0xea, 0x28, 0xac, 0x04, 0x6f, 0xcb, 0x5a, 0xb4, 0x00,
    0x55, 0x0d, 0x3e, 0x5f, 0x27, 0xf8, 0x7c, 0xc1, 0xf1, 0xf9, 0x2b, 0x4e, 0x1d, 0xff, 0x09,
    0xad, 0x3c, 0xd8, 0xaf, 0x32, 0xb0, 0x7f, 0x59, 0x85, 0xd5, 0x9e, 0xd4, 0xb3, 0x38, 0x15,
    0x2c, 0xc1, 0xbf, 0x9c, 0x5d, 0x06, 0x8b, 0xf8, 0x92, 0xe2, 0x7a, 0xea, 0x37, 0x60, 0xfb,
    0xc4, 0x14, 0xf2, 0xc7, 0xe7, 0xfd, 0x29, 0x8d, 0x1c, 0x49, 0x14, 0xf9, 0x6d, 0xec, 0x1a,
    0xe9, 0x10, 0x4b, 0xb6, 0xe5, 0xb1, 0x33, 0x1c, 0x98, 0x96, 0xe5, 0x90, 0x91, 0x0d, 0x06,
    0xac, 0x8e, 0x1d, 0x6b, 0xac, 0x68, 0xe3, 0xb1, 0x3b, 0x56, 0xc0, 0x42, 0xd0, 0x54, 0x07,
    0x00, 0xd7, 0x19, 0x99, 0x03, 0x9b, 0xb8, 0x26, 0x70, 0x9d, 0xad, 0x90, 0x91, 0xb2, 0x31,
    0xb9, 0x0b, 0x9f, 0x4d, 0x2f, 0xb4, 0xfc, 0x57, 0x5f, 0x2c, 0xec, 0xb7, 0xf8, 0xf8, 0x5c,
    0x9f, 0x8f, 0xfe, 0x3f, 0xd7, 0x63, 0x06, 0xf0, 0xbc, 0xe1, 0x49, 0xbf, 0x93, 0xe4, 0x51,
    0x3e, 0xfa, 0xb8, 0x62, 0x5e, 0xc8, 0xa9, 0xea, 0x42, 0xbf, 0xf3, 0xc5, 0x78, 0x0a, 0x62,
    0xce, 0x1a, 0xb8, 0xca, 0x40, 0xfc, 0xe8, 0x37, 0xc3, 0xb8, 0x9a, 0xb4, 0xf2, 0x0f, 0x5c,
    0xe7, 0x0d, 0x8f, 0x1b, 0x23, 0xf7, 0xd8, 0xee, 0xf8, 0x65, 0x60, 0x47, 0x17, 0x1c, 0x1b,
    0x59, 0xdc, 0xe0, 0xc1, 0xc1, 0x3f, 0xa2, 0x3f, 0x89, 0xff, 0xef, 0x07, 0x0e, 0xf9, 0x9d,
    0xa7, 0xa2, 0xa7, 0xff, 0xe1, 0x7a, 0x5f, 0x30, 0x63, 0x22, 0xca, 0x35, 0x6e, 0x1c, 0x2f,
    0x67, 0x4a, 0x9c, 0xa7, 0xfc, 0x0b, 0x5d, 0xa2, 0x04, 0xab, 0xfd, 0x7f, 0x45, 0x56, 0xb4,
    0xff, 0xaf, 0x2a, 0xba, 0x2e, 0x3f, 0xf8, 0xff, 0xbb, 0xf8, 0x43, 0xfd, 0xff, 0x24, 0xb4,
    0xe2, 0xdc, 0xcf, 0xaa, 0xd1, 0x40, 0x65, 0x94, 0xc4, 0x04, 0x78, 0x63, 0xf8, 0x9c, 0xec,
    0x03, 0x31, 0x44, 0x7c, 0xd6, 0x0c, 0xfb, 0x0a, 0x48, 0x66, 0x42, 0x2e, 0xd4, 0x64, 0xb5,
    0x00, 0x31, 0x9b, 0x25, 0x5f, 0x67, 0x55, 0x6a, 0x33, 0xeb, 0x1f, 0x20, 0xab, 0x7f, 0x25,
    0xe9, 0x86, 0x84, 0x77, 0x5e, 0x56, 0xef, 0x7d, 0xb6, 0x08, 0xf1, 0xf6, 0xfb, 0x2c, 0x49,
    0xb7, 0xee, 0xa3, 0x4b, 0x8b, 0xae, 0xc6, 0x24, 0xf5, 0xb3, 0x34, 0x58, 0x39, 0x09, 0x66,
    0x0e, 0xc4, 0x99, 0x5f, 0x5b, 0x93, 0xcc, 0xce, 0xc0, 0x18, 0x2f, 0x72, 0xe9, 0x22, 0xe5,
    0xd4, 0xa5, 0xc0, 0x7b, 0x51, 0xb4, 0x60, 0x0d, 0x08, 0xd8, 0xdb, 0x42, 0x42, 0xbb, 0x67,
    0x34, 0x19, 0x84, 0x3f, 0x86, 0x47, 0x61, 0xcf, 0xe0, 0xfb, 0x0d, 0xb0, 0xd7, 0x3c, 0xf9,
    0xb7, 0xda, 0xf1, 0x30, 0x7d, 0x84, 0x3d, 0xf3, 0x8c, 0xf3, 0xda, 0x4a, 0x86, 0xcc, 0xe0,
    0xfe, 0x2d, 0xd8, 0x2b, 0xb9, 0x3d, 0x21, 0x4f, 0xe3, 0x63, 0xfe, 0xed, 0x2f, 0x92, 0x22,
    0x6a, 0x80, 0xff, 0x74, 0xed, 0xcc, 0xf2, 0x7c, 0x76, 0xb1, 0x80, 0xb9, 0x3f, 0x7f, 0x44,
    0x51, 0xd9, 0xaf, 0xf4, 0x4f, 0x22, 0xff, 0xd7, 0x10, 0xeb, 0xc2, 0x7f, 0x56, 0xcb, 0x7f,
    0xd4, 0x94, 0x72, 0xfc, 0x57, 0x31, 0x0c, 0xfd, 0x41, 0xfe, 0xef, 0xe2, 0x4f, 0x41, 0xfe,
    0x2f, 0x43, 0x1b, 0xee, 0x7e, 0x6a, 0x84, 0xbd, 0x43, 0x22, 0x3b, 0xf4, 0xe6, 0xbc, 0x21,
    0xd9, 0x95, 0x14, 0xd1, 0xe6, 0xe6, 0xcc, 0xbd, 0xa1, 0xde, 0xcd, 0x78, 0xe1, 0x4d, 0x63,
    0xa4, 0xfb, 0x8f, 0x37, 0xd7, 0xd7, 0x97, 0x3c, 0x92, 0xbc, 0x32, 0xdd, 0x6e, 0xa7, 0x1a,
    0x2f, 0x0a, 0xc2, 0x5b, 0xcb, 0xe7, 0xf5, 0x46, 0x67, 0x69, 0x92, 0xd1, 0x89, 0xeb, 0x96,
    0xd0, 0xd3, 0xb7, 0x7f, 0x26, 0xcb, 0xfb, 0x20, 0xcc, 0xe5, 0xee, 0x9d, 0xc1, 0xe3, 0x92,
    0xa4, 0xbb, 0x44, 0x90, 0x48, 0x44, 0x2b, 0x25, 0x7f, 0x5b, 0x5b, 0x01, 0xe1, 0x3d, 0x69,
    0x84, 0xd8, 0xd5, 0x03, 0x6d, 0xf3, 0x53, 0xf8, 0x28, 0xcd, 0xce, 0x3b, 0x63, 0x74, 0x96,
    0x05, 0x12, 0x96, 0x93, 0xd0, 0xae, 0x74, 0x71, 0x31, 0x0f, 0x83, 0x3f, 0x60, 0x93, 0x59,
    0x59, 0x04, 0xbf, 0x8c, 0xf0, 0x62, 0xd6, 0x26, 0x17, 0xf7, 0x56, 0xe8, 0x7b, 0xfe, 0x2d,
    0xfa, 0x47, 0x40, 0x1f, 0xc4, 0xb9, 0xc0, 0x6d, 0x4a, 0xff, 0xfa, 0xaf, 0x92, 0x3f, 0x9f,
    0x5c, 0x38, 0x69, 0x0a, 0xce, 0x33, 0xfe, 0x9b, 0x22, 0x25, 0x0c, 0x22, 0x12, 0xc7, 0x16,
    0xc0, 0xe6, 0xce, 0x11, 0xdf, 0xf6, 0xbd, 0x15, 0xdb, 0x93, 0x96, 0x97, 0xde, 0x27, 0x8b,
    0xfc, 0x92, 0x94, 0x44, 0xf4, 0xe1, 0x97, 0xb0, 0x9e, 0x7c, 0x81, 0xbf, 0xff, 0x88, 0x9e,
    0xb6, 0xe0, 0x5f, 0xde, 0xad, 0x1f, 0x84, 0xe4, 0x62, 0x6e, 0xc5, 0x93, 0xbf, 0xe0, 0x71,
    0x7f, 0xe7, 0xbf, 0xfe, 0x0c, 0xd4, 0x3f, 0x3e, 0x62, 0x09, 0xf0, 0x33, 0x10, 0x2f, 0x2e,
    0x57, 0xf9, 0x53, 0x78, 0xc6, 0xd0, 0x4d, 0x47, 0xdf, 0x3d, 0xc5, 0xff, 0x5c, 0x52, 0x67,
    0x8f, 0x08, 0xb7, 0xe3, 0x78, 0xae, 0x7b, 0x41, 0x87, 0xe2, 0xd1, 0x8f, 0x93, 0x04, 0x08,
    0xe9, 0x27, 0x5d, 0x96, 0x4f, 0xf4, 0xd9, 0x62, 0xee, 0x30, 0x0e, 0x3f, 0x4b, 0xf0, 0x42,
    0x8c, 0x4f, 0xfa, 0xf9, 0xdd, 0xcb, 0xab, 0x0f, 0xaf, 0x7e, 0x7f, 0x79, 0xfd, 0xfd, 0xf7,
    0x51, 0x52, 0xb4, 0x25, 0x74, 0xf0, 0x4f, 0x2e, 0x0e, 0xe6, 0x04, 0xce, 0xcd, 0xb7, 0xbd,
    0x31, 0xac, 0xb2, 0x61, 0x9e, 0xb1, 0xcb, 0xf3, 0x67, 0x97, 0x97, 0x2b, 0x4d, 0x1d, 0x0e,
    0xa5, 0xa9, 0x7c, 0x32, 0x76, 0xe5, 0xbf, 0x32, 0x31, 0xd5, 0xb4, 0xec, 0x22, 0x70, 0x45,
    0x03, 0xfd, 0xe5, 0x56, 0xa5, 0xbb, 0x9b, 0x13, 0x12, 0xbe, 0xac, 0xdf, 0xe1, 0x5e, 0xe1,
    0xc8, 0x5d, 0x03, 0x58, 0x94, 0xa3, 0x9e, 0x26, 0xcc, 0xf8, 0x5f, 0xc0, 0x8a, 0x8a, 0x79,
    0x0e, 0x93, 0x17, 0x30, 0xc2, 0xa4, 0x1f, 0x99, 0x97, 0x66, 0xf6, 0x62, 0x4a, 0x16, 0x15,
    0x28, 0x1c, 0x94, 0x1c, 0x2e, 0xf0, 0x92, 0x30, 0x6a, 0x58, 0xc1, 0x79, 0xa7, 0xfa, 0x29,
    0x08, 0xe2, 0xd1, 0xe2, 0xcb, 0xb3, 0xff, 0x02, 0x89, 0x7e, 0x69, 0x64, 0x5b, 0xe0, 0x6f,
    0x70, 0x07, 0x8b, 0x18, 0x24, 0x16, 0x0d, 0xbc, 0x78, 0x51, 0x2a, 0xc4, 0x40, 0x5b, 0xdf,
    0xaf, 0x1f, 0x25, 0xcc, 0x4c, 0xc2, 0x7f, 0x65, 0xd1, 0x8c, 0x4a, 0x8c, 0x24, 0x11, 0x76,
    0xac, 0x28, 0x70, 0x63, 0x90, 0x03, 0x24, 0x11, 0xff, 0xec, 0xde, 0x1b, 0xe8, 0x37, 0xba,
    0x42, 0x66, 0xf9, 0x8c, 0x98, 0x99, 0x75, 0x47, 0x2a, 0x41, 0x21, 0x9c, 0xd4, 0x39, 0xbf,
    0x56, 0x3f, 0xb0, 0x98, 0xa0, 0x61, 0x85, 0xb1, 0xe7, 0x5a, 0x76, 0xcc, 0xbe, 0x65, 0x97,
    0x66, 0x49, 0xf4, 0x84, 0xfe, 0x9d, 0x4b, 0x45, 0x8a, 0x7d, 0x12, 0x17, 0xf7, 0x52, 0xc8,
    0x61, 0x1a, 0xef, 0x92, 0x6a, 0xd5, 0x0f, 0x74, 0x13, 0x59, 0x30, 0x2e, 0x4d, 0xd4, 0xc9,
    0x86, 0x63, 0x82, 0x01, 0xb1, 0xea, 0xdb, 0xef, 0xd2, 0x85, 0xb9, 0x6f, 0x7b, 0x76, 0xe0,
    0x5c, 0xd4, 0x39, 0x91, 0xf3, 0xf9, 0xc2, 0x0d, 0xc2, 0x0b, 0x80, 0x93, 0x63, 0xe0, 0x9e,
    0x23, 0xae, 0x7d, 0xa9, 0x2a, 0xf2, 0x66, 0x54, 0xcf, 0x5c, 0xfd, 0x7a, 0xf3, 0x53, 0x70,
    0x28, 0xea, 0xf0, 0x0b, 0xfc, 0xef, 0x72, 0x9e, 0x65, 0xa2, 0x64, 0xfb, 0xad, 0x89, 0xc0,
    0xc3, 0x7f, 0x53, 0x6b, 0xa0, 0x24, 0x07, 0x94, 0xa4, 0xe3, 0xd0, 0x8f, 0x7f, 0x2f, 0x7f,
    0x13, 0x4d, 0x71, 0x96, 0x5c, 0x25, 0x15, 0xfb, 0x0c, 0xf7, 0x2c, 0x3d, 0x7b, 0x26, 0xbd,
    0x97, 0xe0, 0xbf, 0xae, 0x23, 0xe9, 0xe5, 0x62, 0x36, 0xcb, 0x35, 0x99, 0x4f, 0x1b, 0xdc,
    0xc2, 0x9b, 0x33, 0x12, 0x5b, 0x58, 0x73, 0x93, 0x27, 0x45, 0x84, 0xe0, 0x59, 0x92, 0xd4,
    0x0a, 0xa5, 0xd1, 0xcf, 0xf8, 0x14, 0x0b, 0x4c, 0xa1, 0xd4, 0xcc, 0xe2, 0x47, 0xc1, 0x18,
    0x48, 0x71, 0xf3, 0x3c, 0x65, 0x07, 0x65, 0x3f, 0x89, 0xd2, 0x36, 0x4c, 0x45, 0x38, 0xb8,
    0xf6, 0x3d, 0xb6, 0xc7, 0xa6, 0x6c, 0x1c, 0x81, 0x71, 0x94, 0x13, 0xc7, 0x5c, 0x7a, 0x96,
    0xc3, 0xdf, 0xdb, 0xa5, 0x72, 0xaa, 0xd8, 0xe1, 0xd4, 0x01, 0x8e, 0xf1, 0x02, 0xc8, 0x22,
    0x6a, 0xba, 0xe7, 0xc4, 0xfa, 0x7a, 0x35, 0xb5, 0x1c, 0xe9, 0x39, 0xf1, 0x2f, 0xae, 0xa3,
    0x22, 0x59, 0xd1, 0xc4, 0x0a, 0x2b, 0x85, 0xc0, 0x57, 0xc6, 0xd9, 0xc2, 0x10, 0xf0, 0x56,
    0x3e, 0x46, 0x3b, 0x21, 0x86, 0xff, 0x65, 0x93, 0x3f, 0x0a, 0x49, 0x81, 0x15, 0x20, 0xde,
    0x89, 0x4a, 0x7f, 0x5d, 0x78, 0x7f, 0xd0, 0xba, 0x4b, 0x01, 0x10, 0x42, 0xef, 0x8b, 0x1c,
    0x61, 0xbf, 0x40, 0x04, 0xf8, 0x0d, 0xe9, 0xb5, 0x15, 0xda, 0x96, 0x03, 0x54, 0x75, 0xf1,
    0x31, 0x9d, 0x92, 0x50, 0x04, 0x1c, 0xf6, 0xd5, 0xf2, 0xfa, 0x2e, 0x30, 0xe1, 0xa9, 0x89,
    0xf3, 0x89, 0xff, 0xf7, 0xe2, 0xaf, 0x57, 0x6f, 0x7e, 0x78, 0xf5, 0xd3, 0xdb, 0x1f, 0x2e,
    0x4e, 0xdf, 0x3e, 0xc6, 0x4a, 0xff, 0xcf, 0x54, 0x0c, 0x53, 0xae, 0xf8, 0x7f, 0x8a, 0xac,
    0xf8, 0x7f, 0xbb, 0xf8, 0xf3, 0x8d, 0xf4, 0x62, 0x62, 0xf9, 0xb7, 0x44, 0x02, 0xd9, 0xfc,
    0xd1, 0xd5, 0x74, 0x8a, 0x43, 0x9d, 0x31, 0x05, 0x52, 0xb2, 0xe9, 0xef, 0xe9, 0x70, 0x13,
    0x33, 0x8a, 0x1b, 0xb9, 0xd2, 0xbd, 0x07, 0x8b, 0xc6, 0x44, 0x72, 0x02, 0x7b, 0xc1, 0xc7,
    0x79, 0x3e, 0x5b, 0x82, 0x36, 0xdc, 0xe5, 0xa3, 0x1b, 0x42, 0xa4, 0xbf, 0xbf, 0x08, 0x7c,
    0x9b, 0xac, 0x70, 0x05, 0x27, 0x22, 0xcc, 0xbc, 0x38, 0xfa, 0xed, 0x71, 0x42, 0xf0, 0x76,
    0x53, 0x9b, 0x7d, 0x78, 0x09, 0xce, 0xd7, 0x39, 0xad, 0x94, 0x62, 0xbf, 0x90, 0x6e, 0x17,
    0x43, 0x30, 0x2b, 0x32, 0xba, 0x7c, 0xf4, 0xe8, 0x1b, 0xe9, 0xef, 0xca, 0xa5, 0x72, 0x29,
    0x8f, 0xa8, 0xf3, 0xa2, 0xd0, 0x4c, 0x07, 0x4d, 0xfc, 0xf4, 0x4e, 0x41, 0x8b, 0xe3, 0xf2,
    0xf2, 0x8e, 0x7e, 0xe9, 0x5c, 0x7a, 0xac, 0xca, 0xaa, 0x7c, 0x21, 0x6b, 0x17, 0x8a, 0x7c,
    0x08, 0x9e, 0xf6, 0xcd, 0x37, 0xd2, 0xf3, 0xc5, 0xad, 0xf4, 0x3d, 0x0e, 0x3c, 0x79, 0xf4,
    0x3b, 0xe9, 0xbb, 0xef, 0x98, 0xa6, 0x7d, 0xf6, 0xdd, 0x77, 0xd2, 0x0c, 0x7c, 0x31, 0xbc,
    0xfe, 0x77, 0x74, 0x57, 0x7d, 0x60, 0x44, 0x8a, 0x8d, 0x34, 0x03, 0x57, 0xe2, 0x35, 0xdd,
    0xe3, 0xbf, 0x7f, 0x03, 0x7a, 0xcc, 0x5c, 0x0d, 0x11, 0xf3, 0xeb, 0x9e, 0xe2, 0xc2, 0x73,
    0xe3, 0xef, 0x23, 0x75, 0x34, 0x72, 0xc6, 0x6a, 0xeb, 0x36, 0x00, 0x01, 0x4f, 0xf9, 0x5a,
    0xd3, 0x87, 0x86, 0xac, 0x5b, 0x3a, 0xd1, 0x15, 0xcd, 0x92, 0x75, 0xd3, 0x26, 0xa3, 0xb1,
    0x52, 0x30, 0xe9, 0xc2, 0x1d, 0x0e, 0x8d, 0xc1, 0xf9, 0xf9, 0x13, 0xc9, 0x9e, 0x06, 0xd8,
    0x83, 0x82, 0x64, 0x88, 0x82, 0x64, 0x20, 0x2e, 0x1e, 0x71, 0xe4, 0xca, 0xc2, 0xc8, 0x95,
    0x55, 0x35, 0xc1, 0xae, 0x9c, 0xc3, 0xae, 0x7a, 0xa1, 0x98, 0xf0, 0xc4, 0xef, 0xbe, 0x7b,
    0xc4, 0x04, 0x31, 0xc9, 0x13, 0xc8, 0xc0, 0x79, 0x98, 0xcd, 0x01, 0x99, 0x38, 0x5c, 0x1b,
    0x97, 0x4b, 0x1c, 0x29, 0xd5, 0x37, 0x29, 0x10, 0xec, 0xc1, 0xe2, 0x50, 0x28, 0x97, 0x2a,
    0xc1, 0xbe, 0x96, 0x03, 0x43, 0x1e, 0x34, 0x1c, 0x32, 0x1a, 0x86, 0x08, 0x98, 0xe7, 0xd3,
    0xe0, 0x52, 0x36, 0xc7, 0x26, 0xe2, 0x83, 0xc0, 0x81, 0x98, 0xef, 0xe1, 0xad, 0xc0, 0x04,
    0x6b, 0x86, 0x2b, 0xf1, 0x69, 0x36, 0xec, 0xbc, 0x95, 0x91, 0xe0, 0x79, 0xc3, 0x42, 0x7a,
    0xe3, 0xb1, 0xad, 0x6a, 0xb2, 0xd8, 0x79, 0xf3, 0xb5, 0x23, 0x53, 0x1f, 0xc8, 0xda, 0x90,
    0xba, 0xeb, 0x38, 0x86, 0xa9, 0x6a, 0x8a, 0x6a, 0x13, 0x5b, 0x55, 0x86, 0x9a, 0xae, 0x5b,
    0x60, 0x68, 0x15, 0xcf, 0x5b, 0x19, 0x0d, 0x44, 0x41, 0x1a, 0x24, 0xe7, 0xcd, 0x70, 0x0d,
    0xeb, 0x82, 0x6b, 0x85, 0xe3, 0x1a, 0xbe, 0x96, 0xe2, 0x5a, 0xb9, 0x50, 0xd5, 0x0d, 0x8e,
    0x81, 0x43, 0xe9, 0x02, 0x87, 0x9c, 0xc2, 0xa1, 0xe4, 0xe0, 0x90, 0xb5, 0x4d, 0x49, 0x4f,
    0xba, 0xc0, 0x62, 0x70, 0xa1, 0x32, 0x7c, 0xc8, 0x79, 0x38, 0xd4, 0x15, 0xb4, 0xf7, 0x24,
    0x32, 0x49, 0x3e, 0x7b, 0xbe, 0x12, 0x74, 0x02, 0x9e, 0x06, 0x0e, 0xe4, 0xb3, 0x81, 0x16,
    0xf3, 0x01, 0xf9, 0x94, 0x63, 0x4a, 0x7f, 0xea, 0x50, 0xf0, 0xb0, 0xd5, 0x21, 0xa5, 0x3f,
    0xa4, 0x19, 0x8a, 0xa5, 0x09, 0xd1, 0x1f, 0x5f, 0x6b, 0xeb, 0xa6, 0x89, 0x69, 0x7b, 0xc4,
    0x5a, 0xb2, 0x4d, 0x14, 0x20, 0x44, 0x47, 0x1d, 0xa8, 0xae, 0x36, 0x32, 0x06, 0x1a, 0xd1,
    0x4e, 0x81, 0xfe, 0x54, 0xbd, 0x05, 0x6b, 0x1c, 0x22, 0x58, 0x77, 0x8e, 0xe4, 0x0a, 0xba,
    0x6c, 0x07, 0xb0, 0xf0, 0x9c, 0x22, 0x0e, 0x0e, 0x6d, 0x66, 0x7d, 0x46, 0x9c, 0xdd, 0x12,
    0xb0, 0x99, 0x2a, 0xf9, 0x08, 0x03, 0x2d, 0xbb, 0x05, 0xa5, 0x95, 0x8c, 0x32, 0xc4, 0x04,
    0xca, 0xc3, 0xec, 0x5a, 0x9c, 0xc6, 0x28, 0x98, 0x8b, 0xc0, 0x50, 0xa8, 0x0b, 0x02, 0x00,
    0x29, 0x0a, 0x65, 0x4d, 0x55, 0x15, 0x97, 0x08, 0xa1, 0x90, 0xaf, 0x1d, 0xd8, 0xea, 0x58,
    0xe8, 0x8a, 0x6e, 0xd9, 0xba, 0xe1, 0x8e, 0x07, 0x80, 0x58, 0x55, 0x37, 0x65, 0x85, 0xd8,
    0x61, 0xc8, 0x23, 0xc7, 0x2e, 0xa0, 0x70, 0x60, 0x8a, 0x71, 0x30, 0xac, 0xa3, 0x28, 0x54,
    0x51, 0x21, 0xa4, 0x99, 0x09, 0x31, 0x7e, 0x4f, 0x2c, 0x6a, 0xe5, 0x73, 0x5a, 0x44, 0x77,
    0x10, 0x1a, 0x01, 0x9e, 0xec, 0x09, 0x6a, 0x78, 0x70, 0xb2, 0xa8, 0x9a, 0x4b, 0x02, 0x63,
    0x8d, 0xff, 0x49, 0x69, 0xc0, 0x0c, 0x31, 0x27, 0x0b, 0xc2, 0x89, 0x0b, 0x29, 0xe6, 0x0c,
    0x38, 0x72, 0x88, 0x2b, 0x84, 0x39, 0xbe, 0xd6, 0x18, 0x6a, 0xca, 0x40, 0x76, 0x06, 0x44,
    0x8c, 0xc7, 0xda, 0x68, 0x64, 0xca, 0xba, 0xeb, 0xea, 0x36, 0xa8, 0x3c, 0x7b, 0x48, 0x5c,
    0x7f, 0x45, 0xe1, 0x27, 0x9b, 0x2d, 0xa4, 0x9d, 0x81, 0xa4, 0x31, 0x6a, 0xe2, 0x71, 0x09,
    0x7d, 0x92, 0x52, 0x82, 0x33, 0x32, 0x69, 0x0e, 0x03, 0xb5, 0x75, 0x7e, 0x04, 0x3e, 0x95,
    0xdf, 0x91, 0x5e, 0x7c, 0x83, 0xbb, 0x1e, 0x09, 0xaa, 0x53, 0x58, 0x47, 0xf7, 0xec, 0x18,
    0x65, 0xdc, 0xf6, 0x1d, 0xbe, 0x67, 0xbe, 0x76, 0x44, 0x14, 0x17, 0x24, 0xbb, 0xab, 0x8f,
    0x43, 0x1b, 0x8f, 0x14, 0xc7, 0x34, 0x54, 0x22, 0x93, 0x81, 0xa1, 0xeb, 0x60, 0x1e, 0x8f,
    0x72, 0x5e, 0x94, 0xdb, 0x28, 0x7b, 0x3a, 0x49, 0xaa, 0x44, 0x62, 0xe2, 0x17, 0xa9, 0xa8,
    0x46, 0x17, 0x0a, 0x68, 0xeb, 0x4d, 0x44, 0x66, 0x0a, 0x4a, 0x27, 0xa1, 0x39, 0xca, 0x20,
    0xfb, 0x86, 0x64, 0xd4, 0x05, 0x90, 0x61, 0x0a, 0xc8, 0x28, 0x0f, 0x87, 0xd2, 0x62, 0x38,
    0xb6, 0x21, 0x1f, 0xe7, 0x8a, 0x86, 0x2f, 0x0d, 0x85, 0x91, 0x30, 0x35, 0x87, 0xd9, 0x58,
    0x2a, 0x69, 0x44, 0x45, 0x1d, 0xfc, 0xa1, 0xb4, 0xa3, 0x69, 0x64, 0xa8, 0xca, 0xb6, 0x10,
    0xf0, 0xb5, 0x23, 0xd5, 0x50, 0x1d, 0xc7, 0x1c, 0x29, 0x96, 0xa2, 0x10, 0xe2, 0x82, 0xb9,
    0x06, 0x96, 0x33, 0xd0, 0xdd, 0x81, 0x86, 0xc6, 0xaa, 0xeb, 0x94, 0xf8, 0x65, 0xa4, 0x0b,
    0xcb, 0x48, 0x3f, 0x2f, 0xec, 0x1c, 0x76, 0x1c, 0x80, 0x76, 0xfa, 0x11, 0x0e, 0x21, 0x62,
    0x63, 0xdd, 0x05, 0x3d, 0x24, 0x2a, 0x6a, 0x6d, 0xd0, 0x60, 0xe8, 0xf1, 0xce, 0xad, 0x18,
    0x64, 0x3f, 0x91, 0x17, 0x62, 0xaa, 0x01, 0x17, 0x32, 0xe3, 0x98, 0x58, 0xf6, 0x98, 0x88,
    0x2b, 0xbe, 0x56, 0x37, 0x07, 0xa0, 0xaf, 0x94, 0xb1, 0x2b, 0x1b, 0x60, 0xcf, 0x1a, 0xa3,
    0x78, 0x20, 0xab, 0x63, 0x7b, 0xac, 0x10, 0x87, 0xc8, 0x23, 0x59, 0x1f, 0x17, 0xf6, 0x3f,
    0x34, 0xd7, 0x61, 0x1d, 0x48, 0x5a, 0xfc, 0x2d, 0xfc, 0xef, 0xc2, 0x76, 0x3e, 0x7f, 0xa3,
    0xc3, 0xe6, 0xcd, 0xf0, 0x45, 0xc9, 0xb7, 0x71, 0x2d, 0x57, 0x5d, 0x34, 0x9c, 0x85, 0xe8,
    0xda, 0x42, 0x10, 0xf4, 0x6d, 0xa2, 0xa9, 0x77, 0x8b, 0xf1, 0x26, 0x47, 0x4a, 0x86, 0x71,
    0x97, 0x44, 0xfb, 0x43, 0x50, 0xc4, 0x0d, 0x45, 0x75, 0xe4, 0x90, 0x11, 0xce, 0xc0, 0x1d,
    0x03, 0x73, 0x2c, 0x84, 0x38, 0xbe, 0x16, 0x0c, 0x4a, 0xd7, 0x31, 0x54, 0x53, 0x77, 0x74,
    0xda, 0x06, 0x01, 0x61, 0x03, 0x96, 0xa7, 0xe6, 0x98, 0xba, 0xe9, 0x9a, 0x8e, 0x03, 0xc7,
    0x43, 0x5c, 0x01, 0x13, 0xab, 0xcc, 0xd9, 0x32, 0x26, 0x34, 0x34, 0x87, 0x9a, 0x30, 0x01,
    0xa5, 0x03, 0x2a, 0x87, 0x37, 0xbd, 0xc0, 0x09, 0x7a, 0x38, 0x54, 0x0f, 0x38, 0x7b, 0x8a,
    0xff, 0x39, 0x2a, 0xe4, 0x16, 0xb6, 0x4e, 0x51, 0x21, 0x8f, 0x28, 0x2a, 0x86, 0x8a, 0xea,
    0x6d, 0x31, 0x83, 0x9b, 0xaf, 0x75, 0x89, 0x3d, 0xd2, 0x87, 0x96, 0x21, 0x03, 0x56, 0x5c,
    0x38, 0x04, 0x7e, 0xd2, 0x86, 0xa6, 0x3d, 0x00, 0xdb, 0x07, 0xa4, 0xf1, 0x58, 0x29, 0xeb,
    0x59, 0x54, 0xe7, 0x80, 0x4d, 0x8a, 0x44, 0x27, 0xe8, 0x33, 0xc0, 0xba, 0x35, 0x96, 0x77,
    0xa7, 0x74, 0x16, 0x89, 0x2b, 0x8b, 0x71, 0xab, 0xb4, 0x27, 0x09, 0x76, 0x2e, 0x89, 0x16,
    0x98, 0x4a, 0xb7, 0xcc, 0x53, 0x72, 0xb8, 0xf9, 0xa4, 0x08, 0x4a, 0x10, 0x58, 0xc8, 0x3d,
    0x31, 0x31, 0x9c, 0x96, 0x3d, 0xa5, 0x1e, 0x2f, 0x5d, 0xeb, 0x82, 0xc7, 0xe3, 0xda, 0xf6,
    0x70, 0x4d, 0x57, 0x1b, 0x5b, 0xa6, 0xa2, 0x8f, 0x4d, 0xcd, 0xd2, 0x9d, 0xf1, 0x68, 0x00,
    0xa9, 0xa9, 0xa3, 0x92, 0x07, 0xa4, 0x08, 0x62, 0x40, 0xa1, 0x7a, 0xa6, 0x62, 0x0f, 0x2d,
    0xb7, 0xa1, 0x85, 0x37, 0x67, 0x81, 0x44, 0x6f, 0x4a, 0xe8, 0x15, 0xa3, 0xa4, 0x5d, 0x9a,
    0xff, 0x8b, 0x59, 0xdc, 0xb0, 0x8e, 0xb1, 0x22, 0x91, 0x2d, 0x93, 0xb4, 0x18, 0x4a, 0x09,
    0xb2, 0xb5, 0xa3, 0x21, 0x01, 0x0b, 0x00, 0x2c, 0x46, 0x90, 0x61, 0x83, 0x01, 0xf0, 0xe6,
    0x51, 0x55, 0x95, 0x20, 0x32, 0xc6, 0x23, 0x02, 0x66, 0x78, 0x45, 0xff, 0xb7, 0x80, 0x54,
    0x75, 0x66, 0xaa, 0xea, 0x86, 0xa9, 0xaa, 0x03, 0xbf, 0x4d, 0xef, 0x41, 0xe5, 0xb6, 0x9f,
    0x0e, 0x0e, 0x23, 0x85, 0xc3, 0xcc, 0xc1, 0xa1, 0x0c, 0x5b, 0x54, 0x2e, 0x97, 0x12, 0x18,
    0xb9, 0x60, 0x71, 0xa9, 0x9c, 0xd3, 0x9e, 0x09, 0x13, 0x7a, 0x54, 0x62, 0xf6, 0x29, 0xac,
    0x47, 0x45, 0x86, 0x43, 0x62, 0x10, 0x31, 0x51, 0xc1, 0xd7, 0x3a, 0xb6, 0xe6, 0x8c, 0x4d,
    0xb1, 0x47, 0xf6, 0xd8, 0x02, 0x5f, 0x48, 0x57, 0x86, 0x86, 0x05, 0x96, 0x1a, 0x30, 0x97,
    0xd4, 0x40, 0x86, 0x36, 0x4b, 0x4d, 0xa5, 0x19, 0xb8, 0x8a, 0xd4, 0x54, 0x06, 0x8c, 0x53,
    0x83, 0x2e, 0x25, 0x53, 0x2a, 0x35, 0x2d, 0x1f, 0x5d, 0x1c, 0x4c, 0x35, 0xce, 0x4d, 0x17,
    0x44, 0x27, 0x50, 0x2e, 0x5b, 0x2a, 0x59, 0x91, 0x74, 0x66, 0xf9, 0xcb, 0x33, 0x8a, 0x8f,
    0x92, 0x04, 0xf1, 0xa1, 0x8e, 0x1d, 0x4d, 0x19, 0x8a, 0xa9, 0x5f, 0xbe, 0xd6, 0x18, 0x9a,
    0xc5, 0x1e, 0xa8, 0x23, 0x79, 0x68, 0x80, 0x3a, 0x36, 0x46, 0xba, 0xe3, 0x3a, 0xb2, 0x0d,
    0x8f, 0x61, 0xe8, 0xae, 0x26, 0x0f, 0x9b, 0xf0, 0x61, 0xc8, 0x03, 0x61, 0x7c, 0xe0, 0xda,
    0x3f, 0x26, 0x67, 0xcc, 0xd3, 0x4e, 0xbd, 0xe0, 0x4e, 0xa3, 0xe5, 0xce, 0x6f, 0xeb, 0xa5,
    0x5b, 0xf5, 0x9e, 0x0f, 0x08, 0x3a, 0xa3, 0x51, 0xcd, 0x38, 0x62, 0xa8, 0x51, 0x05, 0xad,
    0x95, 0x59, 0xf5, 0xc0, 0x85, 0xba, 0x4e, 0xda, 0xad, 0x6e, 0x4a, 0x2a, 0x6c, 0xad, 0x3c,
    0xe8, 0x3b, 0x3b, 0x2a, 0xfc, 0x4f, 0xd6, 0x5c, 0x53, 0x26, 0xba, 0x33, 0x34, 0x41, 0x8a,
    0x84, 0xc8, 0xe3, 0xf1, 0xd8, 0xaa, 0x70, 0x75, 0xbb, 0xd0, 0xa8, 0xe5, 0xa6, 0x41, 0x9e,
    0xf4, 0x06, 0x6e, 0xca, 0x64, 0xbe, 0xb3, 0x04, 0x69, 0xef, 0xd9, 0x28, 0xed, 0xbf, 0xb0,
    0x03, 0xf0, 0x17, 0xda, 0xb4, 0xa0, 0x7b, 0x11, 0x9b, 0x2c, 0xb4, 0x09, 0x9b, 0x18, 0x0d,
    0x5c, 0xfb, 0x6c, 0xc3, 0xb8, 0x56, 0x73, 0x89, 0xa5, 0x90, 0x91, 0x2e, 0x8f, 0x4d, 0xd8,
    0x2e, 0x3b, 0x06, 0x38, 0x35, 0x86, 0xa1, 0x19, 0x63, 0x73, 0x30, 0x18, 0x1a, 0x8a, 0xd3,
    0x0b, 0x9a, 0xb0, 0x45, 0x81, 0x6b, 0xcb, 0x78, 0x6b, 0x77, 0xb6, 0x72, 0x78, 0xd3, 0x53,
    0x19, 0x79, 0xbc, 0x69, 0xad, 0x61, 0x61, 0x30, 0x4b, 0x82, 0x7b, 0xb0, 0xf2, 0xef, 0x7d,
    0x84, 0x51, 0x8c, 0x18, 0x03, 0xaa, 0x62, 0xa3, 0x79, 0x72, 0xd1, 0x61, 0xd4, 0x20, 0x4c,
    0x89, 0x29, 0x25, 0x58, 0xc7, 0xec, 0x16, 0x4b, 0x1b, 0xc9, 0x44, 0xcc, 0x6f, 0xe4, 0x6b,
    0x91, 0x65, 0xda, 0x16, 0x51, 0xc7, 0x60, 0x07, 0x0f, 0x07, 0xc4, 0x22, 0xee, 0x58, 0xb1,
    0x0b, 0x78, 0x51, 0x57, 0x15, 0xd0, 0x2c, 0x6e, 0xc9, 0xf6, 0x6d, 0x91, 0x74, 0x29, 0x40,
    0x26, 0x5b, 0xb6, 0x5d, 0x90, 0x45, 0x53, 0x2b, 0xe4, 0x11, 0x2a, 0xd0, 0x1f, 0x69, 0x14,
    0x5d, 0x66, 0x46, 0x0c, 0x15, 0x62, 0x7e, 0x00, 0xac, 0x63, 0x31, 0x2b, 0xd5, 0x01, 0xf6,
    0xa3, 0x3d, 0xbe, 0x96, 0xd8, 0x0e, 0x48, 0x1b, 0xc7, 0xb2, 0xdd, 0xb1, 0x05, 0xb6, 0xab,
    0xd6, 0x5d, 0x57, 0x36, 0x15, 0x97, 0x8c, 0x55, 0xd0, 0xab, 0xae, 0xad, 0x72, 0x66, 0x4b,
    0xa6, 0xc5, 0x88, 0x29, 0xd2, 0x8c, 0x96, 0xd2, 0x8c, 0x9e, 0xa7, 0x99, 0xa6, 0x48, 0xdf,
    0xc4, 0xb1, 0x3e, 0x10, 0x89, 0xdc, 0xbe, 0xb0, 0xa2, 0x0b, 0xc7, 0x03, 0xa1, 0x85, 0x48,
    0x8c, 0x64, 0xc0, 0x3a, 0x66, 0x56, 0xb9, 0x8e, 0xaa, 0x8f, 0xda, 0x7d, 0x5e, 0x6a, 0x56,
    0xb5, 0x1a, 0xd6, 0xb9, 0x19, 0x36, 0xb8, 0x86, 0x8e, 0x32, 0xd2, 0x2d, 0xdd, 0x1c, 0xbb,
    0x6e, 0xa2, 0x5a, 0xd3, 0x5d, 0xdd, 0x32, 0x9d, 0x71, 0x45, 0x22, 0xb5, 0xeb, 0x82, 0x1c,
    0xd4, 0x14, 0x4b, 0x5a, 0x1e, 0x4b, 0x4a, 0x0f, 0x76, 0x46, 0x87, 0x38, 0xb5, 0x9c, 0xc6,
    0x65, 0x1e, 0xa7, 0x66, 0x70, 0xc8, 0x4d, 0x76, 0x46, 0xc6, 0xe1, 0xae, 0xf7, 0x25, 0xf5,
    0x24, 0x86, 0x6e, 0x7a, 0x32, 0x86, 0xe0, 0xc9, 0x18, 0x9c, 0x93, 0xf5, 0x91, 0x2d, 0xcb,
    0x04, 0x46, 0x39, 0x99, 0xad, 0x75, 0x1c, 0x97, 0xb8, 0x96, 0x39, 0x56, 0x0d, 0x43, 0x19,
    0x8e, 0xe5, 0xc2, 0x6f, 0x1c, 0x7b, 0x48, 0x06, 0xae, 0x61, 0xd8, 0x03, 0xc7, 0xae, 0x9e,
    0xa7, 0x00, 0x50, 0x2e, 0xfe, 0x93, 0xc7, 0x48, 0xd3, 0x2d, 0x49, 0x66, 0x75, 0x84, 0xe4,
    0x1c, 0x02, 0x69, 0x4c, 0x26, 0xd6, 0x9d, 0x87, 0x37, 0x73, 0xec, 0xaa, 0xd0, 0x0a, 0x83,
    0xa8, 0xd9, 0x4f, 0x60, 0x68, 0x7c, 0x02, 0x9d, 0x11, 0x66, 0x4d, 0xda, 0x29, 0xbe, 0x56,
    0xf3, 0x02, 0xbe, 0x40, 0x92, 0x53, 0xb3, 0xc3, 0xd5, 0x4d, 0x43, 0x17, 0x34, 0x3b, 0xd8,
    0x73, 0x08, 0xc4, 0xab, 0xc8, 0x9a, 0x09, 0xd4, 0x0b, 0x2e, 0x9a, 0x6d, 0xeb, 0x60, 0x8f,
    0x86, 0xea, 0x80, 0x19, 0x4d, 0xe4, 0x81, 0x5d, 0x30, 0xc3, 0xbe, 0x19, 0x0a, 0x2a, 0x7b,
    0x57, 0x46, 0xb3, 0x78, 0x70, 0x0b, 0x8b, 0x21, 0x52, 0x34, 0x67, 0xb1, 0x2d, 0xf9, 0x42,
    0xba, 0x71, 0x4c, 0x0c, 0xdc, 0x4c, 0x48, 0x44, 0xc4, 0x0a, 0xed, 0x09, 0xe3, 0x88, 0x10,
    0xc6, 0x46, 0x59, 0x91, 0x34, 0xcc, 0xaa, 0xbb, 0x0f, 0x18, 0xc9, 0x82, 0x66, 0x8c, 0xcc,
    0x18, 0xcd, 0x95, 0xdd, 0x81, 0x58, 0x80, 0x89, 0xaf, 0x1d, 0xeb, 0xc4, 0x04, 0xd2, 0x54,
    0x1d, 0x9c, 0x32, 0x4b, 0x31, 0x86, 0xa0, 0xe3, 0xd5, 0xa1, 0xac, 0x11, 0x07, 0xf1, 0x6c,
    0x72, 0x51, 0xc9, 0x08, 0x3a, 0xa3, 0xa3, 0xc4, 0x17, 0xcd, 0x59, 0xb8, 0x0c, 0x0d, 0xa0,
    0x8a, 0x14, 0x85, 0x66, 0x09, 0x37, 0x73, 0xc1, 0x1f, 0x5d, 0xf8, 0x1e, 0x8b, 0x3e, 0xc5,
    0xf0, 0x31, 0x1c, 0x28, 0x62, 0x11, 0x02, 0x58, 0xc7, 0xb4, 0x8b, 0xec, 0x6a, 0xda, 0x50,
    0x9c, 0xcf, 0xd7, 0xaa, 0xc3, 0x91, 0x3b, 0x30, 0x54, 0xcd, 0x55, 0x65, 0x70, 0xce, 0x1c,
    0x73, 0x46, 0x20, 0x4f, 0xad, 0xd1, 0x68, 0x38, 0xb6, 0x35, 0x53, 0x1e, 0x8f, 0x4a, 0xe4,
    0x46, 0xff, 0xb0, 0xae, 0x14, 0x64, 0xd2, 0x46, 0x4a, 0xb3, 0xc5, 0x5e, 0x32, 0x84, 0x70,
    0xe9, 0xeb, 0x40, 0x71, 0xcd, 0xd8, 0x2f, 0x7d, 0x1d, 0xd7, 0x36, 0xdc, 0x0d, 0x70, 0xb2,
    0x5c, 0x97, 0x84, 0x40, 0xb3, 0x34, 0xba, 0x19, 0xb1, 0x8b, 0x79, 0x1e, 0xe5, 0xa3, 0x21,
    0x64, 0x7e, 0x03, 0x1c, 0xc1, 0x70, 0x24, 0xc8, 0x60, 0x23, 0x46, 0x86, 0xee, 0xc8, 0x56,
    0x4d, 0xcc, 0xd6, 0xe1, 0x6b, 0x6d, 0x38, 0x0a, 0xd5, 0xb4, 0x87, 0xca, 0x70, 0xe0, 0x80,
    0xe9, 0x98, 0x96, 0xa2, 0x0f, 0x89, 0x6b, 0xba, 0xae, 0x6b, 0x1b, 0x63, 0xc5, 0x2a, 0xc6,
    0x74, 0x41, 0xa7, 0x1d, 0xd6, 0x95, 0xc9, 0x90, 0xfa, 0x59, 0x56, 0xfe, 0xfa, 0x8d, 0xe6,
    0x24, 0xad, 0x11, 0xd1, 0xc6, 0x39, 0x7b, 0x3b, 0xfe, 0xe3, 0x3d, 0x71, 0xcf, 0xd8, 0xde,
    0x08, 0x17, 0xdc, 0xbb, 0xa5, 0x13, 0x55, 0x6e, 0xc3, 0x17, 0xdf, 0x3b, 0x5f, 0x0b, 0x47,
    0x92, 0xc1, 0xbb, 0x52, 0x8c, 0x81, 0x3e, 0x50, 0xb5, 0x81, 0xee, 0xaa, 0x03, 0xc5, 0x24,
    0x4b, 0x36, 0x6c, 0xc3, 0x18, 0x8e, 0xec, 0xf3, 0xf2, 0x45, 0x19, 0xcb, 0xd6, 0x05, 0x55,
    0xe1, 0x69, 0x4a, 0x3c, 0x65, 0x52, 0xb2, 0x30, 0x03, 0xdf, 0xa6, 0xe6, 0x29, 0x28, 0x1e,
    0xb0, 0x75, 0xc6, 0x35, 0x86, 0x63, 0x0e, 0x55, 0xdd, 0x11, 0xbb, 0xca, 0x61, 0x6b, 0x0d,
    0xb6, 0xc0, 0x01, 0x18, 0xa8, 0x06, 0x1c, 0xd1, 0x60, 0x3c, 0xd4, 0x64, 0x65, 0x6c, 0xab,
    0x70, 0xc4, 0x18, 0x8c, 0x14, 0x47, 0x1f, 0x9c, 0x67, 0xe9, 0x07, 0x4c, 0x7e, 0x8a, 0x0b,
    0x61, 0x22, 0x6c, 0xf1, 0x6b, 0x39, 0x61, 0xab, 0x6c, 0x12, 0xd5, 0xa0, 0x60, 0x0c, 0xbb,
    0x61, 0x26, 0xc6, 0x06, 0x7e, 0x2d, 0x07, 0x86, 0xac, 0xd4, 0xf1, 0x16, 0xc6, 0xcc, 0xbd,
    0xf8, 0x97, 0xf4, 0x89, 0x67, 0xca, 0x7f, 0x62, 0xd1, 0xf3, 0x4f, 0x34, 0x71, 0x3b, 0x4d,
    0xff, 0x84, 0x07, 0x64, 0x0a, 0xf2, 0x94, 0xc9, 0x79, 0x6a, 0xa0, 0x0c, 0xf4, 0xf1, 0x40,
    0x04, 0xcc, 0xd6, 0x16, 0x58, 0xc6, 0x14, 0xbc, 0x19, 0x30, 0xd9, 0xc5, 0x40, 0xb6, 0x97,
    0x5f, 0x6f, 0xa4, 0x69, 0x70, 0x1b, 0x50, 0xd4, 0xbe, 0x59, 0xfc, 0x40, 0xe2, 0x04, 0xc1,
    0xdb, 0x87, 0x58, 0x10, 0xc2, 0xe4, 0x41, 0x08, 0x59, 0xd7, 0x80, 0xac, 0x05, 0x6f, 0x5b,
    0xda, 0xa2, 0x71, 0x84, 0x87, 0xd2, 0xe5, 0x04, 0x13, 0x42, 0x32, 0x33, 0xe3, 0x48, 0x1e,
    0xad, 0xbd, 0x11, 0x21, 0x99, 0x5d, 0x08, 0x69, 0x90, 0x03, 0x43, 0xce, 0x81, 0x91, 0x45,
    0xea, 0x85, 0xf4, 0x22, 0x42, 0x41, 0xc5, 0x9b, 0xd6, 0x31, 0x66, 0x2f, 0x9b, 0x09, 0xa0,
    0x31, 0xbf, 0x57, 0x4a, 0x3b, 0xc1, 0xe5, 0x02, 0x68, 0x2c, 0xde, 0x09, 0xf6, 0x5c, 0x68,
    0x69, 0xe4, 0x64, 0x66, 0xcd, 0xe9, 0xa1, 0x0d, 0x04, 0x89, 0x6f, 0xc0, 0x88, 0xcf, 0x20,
    0xa2, 0x09, 0x5e, 0xdc, 0xf0, 0xb5, 0x45, 0xe6, 0x1f, 0x74, 0x41, 0x96, 0x91, 0x72, 0xdd,
    0x87, 0xac, 0xe1, 0x85, 0x3a, 0x6a, 0x35, 0x68, 0xf3, 0xb6, 0x16, 0x33, 0x32, 0x88, 0x84,
    0x41, 0x24, 0xda, 0x85, 0x82, 0x11, 0xac, 0x21, 0xc8, 0x08, 0x06, 0x8b, 0x6f, 0xeb, 0x0a,
    0x54, 0x43, 0x4c, 0x32, 0xf2, 0xb5, 0x45, 0xc6, 0x13, 0x74, 0x2f, 0x60, 0x5d, 0x91, 0xce,
    0x2e, 0x74, 0x6e, 0xa4, 0x04, 0x66, 0xe4, 0xe8, 0x7c, 0xd8, 0x1c, 0x7e, 0xcd, 0x05, 0x3e,
    0x27, 0xbd, 0xf7, 0x04, 0xee, 0xbe, 0x4e, 0x74, 0x21, 0x8e, 0xe3, 0x66, 0x99, 0x7f, 0x44,
    0x7c, 0xf3, 0xea, 0x03, 0x16, 0x82, 0xc4, 0xde, 0x8c, 0xaa, 0x17, 0x53, 0xd0, 0x0e, 0x84,
    0x8c, 0x80, 0x06, 0xa0, 0xd1, 0xc6, 0x62, 0xf1, 0x35, 0xbe, 0x36, 0x8f, 0xc4, 0xa7, 0xd8,
    0xf2, 0xd2, 0x2a, 0xd4, 0x74, 0x3d, 0x45, 0x6b, 0xc7, 0x9a, 0x7b, 0x4f, 0xf1, 0x86, 0x3f,
    0x9f, 0xb2, 0x0d, 0xd1, 0xdf, 0xf0, 0xb4, 0xf7, 0x17, 0x2f, 0xff, 0x76, 0x09, 0xd2, 0xeb,
    0xd5, 0x0b, 0xf5, 0xf2, 0x97, 0xb9, 0x7d, 0x39, 0x89, 0x67, 0xd3, 0x6f, 0xd8, 0x67, 0xbf,
    0x67, 0xbf, 0xc3, 0x67, 0xbf, 0xc3, 0x67, 0xb5, 0x40, 0xf5, 0xf7, 0xc6, 0x04, 0x15, 0xd5,
    0x97, 0xcd, 0x3b, 0x6d, 0x20, 0x1c, 0x26, 0xc3, 0xb5, 0xab, 0x25, 0x87, 0x43, 0xd0, 0xbf,
    0xfe, 0x15, 0x7c, 0x3c, 0xbc, 0xfd, 0x29, 0x5d, 0x05, 0x59, 0x2e, 0x1c, 0x72, 0x39, 0x19,
    0x9e, 0xab, 0xa0, 0x60, 0xe0, 0x0e, 0x87, 0xa6, 0x8e, 0x6d, 0x65, 0x85, 0x51, 0x5b, 0xb8,
    0x66, 0x6b, 0xcf, 0xcb, 0x54, 0xde, 0x41, 0x32, 0xe8, 0x49, 0xa8, 0x06, 0xbf, 0x96, 0xa7,
    0xa6, 0x50, 0x4d, 0x46, 0xe5, 0x51, 0x1c, 0xcc, 0x25, 0x14, 0xa4, 0x34, 0xb2, 0xf7, 0xd2,
    0xf2, 0xd1, 0x0a, 0x97, 0xd2, 0xfd, 0x84, 0xf8, 0x92, 0x17, 0x63, 0xe2, 0x11, 0x8d, 0x92,
    0x3f, 0x10, 0x15, 0x60, 0xc3, 0x88, 0x65, 0xed, 0x8c, 0x14, 0x1e, 0xe0, 0x23, 0x8e, 0x6b,
    0x05, 0x6c, 0xf8, 0xda, 0x62, 0x96, 0xd0, 0x48, 0x2c, 0x8a, 0x06, 0xeb, 0x5a, 0x0c, 0x7b,
    0x28, 0x27, 0xd6, 0x62, 0x9a, 0xbb, 0x3f, 0x60, 0x29, 0x8f, 0x16, 0xd5, 0x0e, 0x45, 0xfd,
    0x24, 0xc9, 0x6f, 0x88, 0x9e, 0x48, 0x80, 0x5a, 0x89, 0xed, 0x5c, 0x4c, 0x42, 0x0e, 0x46,
    0x42, 0x8e, 0xe5, 0xb1, 0xe6, 0x3a, 0x82, 0x39, 0x90, 0x6c, 0x6d, 0x61, 0xe7, 0x86, 0xa0,
    0x6d, 0x94, 0xfc, 0x77, 0x24, 0x87, 0x2e, 0xb4, 0xc3, 0x03, 0x58, 0xf8, 0xb5, 0x1c, 0xed,
    0x1b, 0x07, 0xb0, 0xf0, 0xd1, 0x5d, 0xe0, 0x50, 0x52, 0x38, 0xd2, 0x00, 0x96, 0x6c, 0x5e,
    0xf5, 0xda, 0x0d, 0x83, 0x56, 0x8b, 0x08, 0xdf, 0x0d, 0x8a, 0x1e, 0xe7, 0x15, 0x82, 0xae,
    0xa6, 0x67, 0x52, 0x5a, 0x5c, 0x4b, 0x4f, 0x4c, 0x13, 0xb3, 0xf6, 0x61, 0x1d, 0x63, 0x5b,
    0x21, 0x56, 0x5b, 0xae, 0x44, 0xc2, 0xb6, 0x6c, 0xed, 0x79, 0x19, 0xf5, 0x1d, 0x94, 0x93,
    0x2a, 0x27, 0x3d, 0xa7, 0x9c, 0x4c, 0x96, 0x4e, 0xbc, 0x5a, 0xa1, 0xd3, 0xdb, 0x69, 0x74,
    0xb0, 0xc3, 0x11, 0x1d, 0x1e, 0x08, 0x68, 0x08, 0xc9, 0x7f, 0x2f, 0xbc, 0x30, 0xa5, 0xef,
    0x8a, 0x25, 0x20, 0xc3, 0x10, 0x64, 0x5c, 0x83, 0x33, 0xee, 0x08, 0x5c, 0x65, 0xc3, 0x15,
    0xb4, 0xb2, 0xb5, 0x45, 0xe3, 0x46, 0xef, 0x22, 0xc2, 0xb4, 0xe4, 0x86, 0x02, 0xbf, 0x96,
    0x85, 0xdc, 0x60, 0x09, 0x66, 0xc1, 0x66, 0xcf, 0xf1, 0x82, 0x19, 0x8e, 0x47, 0x90, 0x6c,
    0x39, 0x71, 0x16, 0x41, 0x41, 0x02, 0x4d, 0x38, 0x1d, 0xf7, 0x2f, 0x78, 0x4d, 0x6a, 0xf0,
    0x52, 0x03, 0xbb, 0xb1, 0x5a, 0x62, 0xe1, 0x78, 0xbe, 0xb6, 0xc8, 0xbe, 0x82, 0xe9, 0x8a,
    0x0e, 0x13, 0x1a, 0x0c, 0x53, 0x70, 0xb9, 0xc9, 0x97, 0x8b, 0xb9, 0xfa, 0xb0, 0x8e, 0x2e,
    0x8c, 0x0c, 0x18, 0xc3, 0x61, 0x91, 0xa0, 0xb5, 0x0e, 0x57, 0x06, 0xb0, 0x38, 0xd1, 0x43,
    0x76, 0x65, 0x80, 0x87, 0xb8, 0x71, 0x9e, 0x1b, 0x3e, 0xba, 0x0b, 0x1c, 0x6a, 0x0a, 0x87,
    0x87, 0xa3, 0x29, 0xcf, 0xed, 0x92, 0x6b, 0xc3, 0xc0, 0xb6, 0xad, 0x88, 0x65, 0x25, 0x79,
    0x12, 0x99, 0xa3, 0x23, 0x4d, 0xd8, 0x05, 0x17, 0xde, 0x80, 0x51, 0x5a, 0x1a, 0x08, 0xa2,
    0xc0, 0xd3, 0x91, 0x87, 0x23, 0x47, 0x76, 0x2d, 0xb1, 0xe0, 0x1b, 0x5b, 0x5b, 0xba, 0x35,
    0x5a, 0xe3, 0x5c, 0xc0, 0x4c, 0x1e, 0x35, 0x62, 0x23, 0xbf, 0x30, 0x0d, 0x9a, 0xc1, 0xfa,
    0xb1, 0x76, 0x10, 0xcd, 0x6a, 0x2a, 0x9a, 0xb5, 0x82, 0x68, 0xae, 0x77, 0xf7, 0xf3, 0x01,
    0x68, 0x31, 0xc7, 0x11, 0x41, 0x68, 0x4b, 0xa3, 0x11, 0x61, 0xc1, 0x2f, 0x5c, 0x94, 0xdc,
    0xbe, 0x69, 0x72, 0xe6, 0xbc, 0x94, 0x8f, 0xa2, 0xd6, 0x10, 0x0b, 0x23, 0xc2, 0x3a, 0x96,
    0xea, 0x3a, 0x44, 0x33, 0xc5, 0x50, 0xcb, 0xd7, 0x56, 0xe2, 0x46, 0x25, 0x30, 0x33, 0x20,
    0x7d, 0x5f, 0x02, 0x92, 0x09, 0x13, 0x43, 0x90, 0x5b, 0x0d, 0x5e, 0xff, 0x32, 0xb2, 0x1c,
    0x2d, 0x62, 0x9b, 0x08, 0x53, 0xb6, 0xb6, 0xa4, 0x59, 0xd4, 0x2e, 0x9a, 0x45, 0x4d, 0x35,
    0x9a, 0xd3, 0x2c, 0x83, 0x0b, 0x6a, 0x29, 0x6c, 0xe4, 0xde, 0x77, 0x29, 0x54, 0x51, 0x94,
    0x1e, 0xa8, 0x39, 0xa1, 0x3e, 0x60, 0x49, 0x38, 0x2b, 0xf2, 0xb3, 0x89, 0x0f, 0x70, 0xd8,
    0x45, 0x65, 0x16, 0x3a, 0x35, 0xd0, 0x69, 0xc6, 0xc7, 0x98, 0x48, 0x57, 0x3f, 0xfd, 0xf4,
    0x8b, 0xab, 0x77, 0x37, 0xf4, 0x24, 0x04, 0xf3, 0xda, 0x0d, 0x9e, 0xd6, 0x6e, 0x0f, 0x87,
    0x50, 0x16, 0xf3, 0x5b, 0xf9, 0xda, 0x55, 0xac, 0xa8, 0xae, 0x28, 0x85, 0xaa, 0x63, 0x45,
    0x9f, 0x0a, 0xa1, 0xf7, 0xaf, 0xae, 0xfe, 0x76, 0xfd, 0xe6, 0x07, 0x89, 0x15, 0x21, 0xde,
    0x91, 0xf0, 0x2a, 0xdb, 0x7c, 0x92, 0xeb, 0x7f, 0x2f, 0x61, 0xbb, 0x10, 0x7a, 0x3d, 0xc2,
    0xf1, 0x29, 0xc1, 0xc4, 0xa7, 0x02, 0xad, 0x28, 0x5d, 0x84, 0x65, 0x5a, 0x4d, 0x84, 0x5f,
    0x1d, 0x52, 0x73, 0x86, 0x12, 0x07, 0xf0, 0x45, 0x25, 0xa3, 0x11, 0x98, 0x67, 0x4a, 0x62,
    0x28, 0x3c, 0x38, 0xc6, 0x27, 0x6d, 0xe1, 0xee, 0x54, 0x09, 0x32, 0xc7, 0x49, 0x56, 0xc0,
    0x68, 0x73, 0xa2, 0x93, 0x30, 0x18, 0x5b, 0x5b, 0x2c, 0xcb, 0xd0, 0xc4, 0xa8, 0x01, 0xd6,
    0x37, 0x6c, 0x86, 0xb5, 0xa1, 0x90, 0x78, 0xbb, 0x97, 0xca, 0xc4, 0x32, 0x6c, 0x24, 0xc2,
    0x26, 0x48, 0x77, 0x9a, 0xc2, 0xb3, 0xae, 0x64, 0xdd, 0xb6, 0xc4, 0x02, 0x95, 0x7c, 0x6d,
    0x02, 0x74, 0xa9, 0x5b, 0x52, 0xd2, 0xba, 0x25, 0x45, 0xc9, 0xc9, 0xec, 0x01, 0x88, 0xed,
    0x6b, 0xb9, 0x57, 0x11, 0x98, 0x51, 0x40, 0x59, 0xdf, 0x3d, 0xfd, 0x24, 0xd1, 0xcc, 0x66,
    0x0c, 0x2e, 0x3c, 0x60, 0xc9, 0x4b, 0x1a, 0x68, 0xc3, 0xbd, 0xab, 0x82, 0xa6, 0x94, 0xca,
    0x29, 0x9d, 0x98, 0xc4, 0x1a, 0xb5, 0x67, 0xef, 0xd1, 0x58, 0x11, 0x5b, 0x5b, 0xd9, 0x7b,
    0xe9, 0x97, 0xd6, 0x4a, 0x29, 0x4a, 0x41, 0xfa, 0xc9, 0xb5, 0x65, 0x21, 0xef, 0xf9, 0xbc,
    0x5e, 0x2c, 0x73, 0x31, 0x25, 0x77, 0x64, 0x5a, 0xf4, 0x23, 0x0c, 0x45, 0x90, 0x8a, 0x15,
    0xdf, 0xe8, 0x5a, 0x44, 0xd7, 0xc5, 0xfc, 0x08, 0xbe, 0xb6, 0x4e, 0xc6, 0x80, 0xd8, 0xb8,
    0xe6, 0xd1, 0x37, 0xda, 0x60, 0xb5, 0x88, 0xe1, 0xeb, 0x52, 0x6d, 0x3f, 0x30, 0x8b, 0xb4,
    0x73, 0xce, 0xac, 0x5b, 0x24, 0xe6, 0x6c, 0x57, 0x20, 0x3f, 0x72, 0x05, 0x9d, 0x86, 0xe0,
    0x1d, 0xac, 0x63, 0x77, 0xd7, 0xb2, 0x21, 0x8b, 0x66, 0x7b, 0xf2, 0xb5, 0xe7, 0x19, 0x4c,
    0x11, 0x08, 0x31, 0x04, 0xec, 0xca, 0x71, 0xa4, 0x64, 0xca, 0x9b, 0x94, 0xb4, 0x15, 0x00,
    0x8e, 0x4c, 0x1d, 0x86, 0x76, 0x41, 0xa8, 0x14, 0x06, 0x95, 0x22, 0x13, 0x75, 0x2c, 0x58,
    0xc4, 0xd7, 0x16, 0x3d, 0x96, 0x2e, 0xa5, 0x70, 0x4a, 0x9a, 0x8b, 0xa6, 0x28, 0x39, 0xe5,
    0x5c, 0xa8, 0x8d, 0xc5, 0x14, 0xfc, 0x38, 0x1c, 0xe2, 0x2c, 0xe6, 0x53, 0xcf, 0xa6, 0xb7,
    0xd9, 0x0d, 0x1b, 0x6c, 0x58, 0x17, 0xbc, 0x34, 0xd0, 0x93, 0x4b, 0x03, 0xc3, 0x35, 0x94,
    0x98, 0x55, 0xc1, 0xd7, 0x16, 0xef, 0x0b, 0x05, 0x6b, 0x28, 0xf5, 0x52, 0x09, 0xa5, 0xd2,
    0xf9, 0x4c, 0x49, 0x93, 0xcf, 0x94, 0x5c, 0xf2, 0x19, 0x20, 0xaa, 0xb9, 0x5c, 0x95, 0x23,
    0x46, 0x42, 0xcc, 0xba, 0x98, 0x4e, 0x71, 0x42, 0x0d, 0x8f, 0xce, 0x44, 0x67, 0xc5, 0xdc,
    0x8a, 0x35, 0xb1, 0xb8, 0x8c, 0xce, 0xe3, 0x32, 0x06, 0x91, 0x07, 0x23, 0x4b, 0xcc, 0x62,
    0x6b, 0x4b, 0x58, 0x13, 0x0b, 0xf2, 0xea, 0x65, 0xa3, 0xbb, 0x4b, 0xfa, 0x95, 0x92, 0xa6,
    0x29, 0xb9, 0xf4, 0x2b, 0xc4, 0x9a, 0xd1, 0x82, 0x35, 0x5a, 0x0e, 0x88, 0x95, 0x39, 0x39,
    0xa2, 0x9a, 0x8b, 0x84, 0x56, 0x04, 0x96, 0x03, 0x76, 0xdb, 0xc9, 0xdf, 0x62, 0xeb, 0x82,
    0x01, 0x9d, 0xc7, 0x05, 0xc6, 0xb2, 0x66, 0x28, 0x8a, 0x98, 0x22, 0xe3, 0x6b, 0x4b, 0x97,
    0x82, 0x44, 0xce, 0x0c, 0xa5, 0x3c, 0xfa, 0x3a, 0x58, 0x35, 0x69, 0x5e, 0x96, 0x92, 0xcb,
    0x92, 0xf5, 0x1e, 0xf2, 0xbf, 0x95, 0x2e, 0x79, 0x59, 0x4a, 0x9a, 0x97, 0xa5, 0xe4, 0xf2,
    0x00, 0x0e, 0x81, 0x0b, 0x88, 0x8a, 0x7d, 0xf5, 0x2d, 0xf6, 0x37, 0xfe, 0x36, 0xcb, 0xd5,
    0xea, 0x15, 0xf0, 0x10, 0x4d, 0xc1, 0x43, 0x34, 0x79, 0x54, 0x56, 0x21, 0xba, 0x32, 0x16,
    0x82, 0xf9, 0xda, 0xf3, 0xf2, 0x69, 0x74, 0xd0, 0xc8, 0x69, 0x2e, 0x96, 0x92, 0xcb, 0xc5,
    0x2c, 0x6c, 0x5a, 0x38, 0xaf, 0x74, 0xc9, 0x55, 0x1a, 0xe5, 0xa0, 0x90, 0xf3, 0x50, 0x34,
    0xa2, 0x62, 0x8e, 0x9c, 0x13, 0x64, 0x9d, 0xfe, 0xc1, 0x56, 0x00, 0x23, 0x01, 0x1e, 0x4c,
    0x87, 0xc0, 0x4e, 0xa2, 0x9e, 0x22, 0x2f, 0xd4, 0x65, 0x06, 0xa2, 0x6e, 0x88, 0x19, 0x0d,
    0x8e, 0x65, 0x48, 0x90, 0xa1, 0x61, 0x59, 0x82, 0x19, 0x12, 0x6c, 0xed, 0x79, 0x51, 0xcf,
    0x53, 0x2c, 0x43, 0xf3, 0x69, 0x45, 0x51, 0x5a, 0x29, 0xbc, 0x94, 0xa6, 0x1e, 0x0b, 0x5a,
    0x82, 0x37, 0x7c, 0x3a, 0xbf, 0xe1, 0x23, 0x63, 0xc7, 0x51, 0x04, 0x3d, 0x25, 0xbe, 0xb6,
    0xe8, 0x82, 0x37, 0x7c, 0xba, 0x51, 0x49, 0x8a, 0xba, 0x21, 0xb1, 0xf4, 0x09, 0x5b, 0x6b,
    0x1b, 0x94, 0x4d, 0x3f, 0x2d, 0x64, 0x3f, 0xe9, 0x03, 0xb1, 0x5b, 0x01, 0x58, 0xc7, 0xbd,
    0x65, 0xac, 0xdb, 0x62, 0x17, 0x6d, 0x7c, 0xed, 0x4a, 0xaf, 0x4f, 0x6b, 0x4e, 0x74, 0xac,
    0xfa, 0x60, 0x7d, 0xb3, 0xcb, 0x9b, 0xda, 0x43, 0xaf, 0x13, 0xaa, 0x62, 0x23, 0x74, 0x53,
    0x88, 0x9b, 0xa1, 0xba, 0x60, 0x86, 0xa1, 0x9e, 0x64, 0x18, 0x02, 0xe3, 0x02, 0x9d, 0x88,
    0x69, 0x6c, 0x6d, 0xd1, 0x99, 0x12, 0x34, 0x0f, 0x60, 0x1d, 0xc6, 0x18, 0x75, 0xc1, 0x12,
    0x3d, 0x97, 0xad, 0xdf, 0xe8, 0x01, 0xa7, 0x38, 0xa1, 0x97, 0xf8, 0xbc, 0x71, 0x1f, 0x3a,
    0x59, 0x31, 0xfc, 0x78, 0x29, 0x05, 0xb4, 0x04, 0x35, 0x0d, 0xcc, 0x04, 0x2e, 0xbd, 0x95,
    0xfe, 0x6c, 0x8f, 0x68, 0xbb, 0x16, 0xd7, 0xf2, 0xa6, 0xd2, 0x34, 0xb0, 0x68, 0x58, 0x87,
    0xf6, 0xd0, 0x7e, 0x2d, 0x38, 0x71, 0x80, 0x7f, 0xe9, 0x09, 0xbd, 0xff, 0xc7, 0xa6, 0x5d,
    0xf8, 0x1b, 0xeb, 0x12, 0xfc, 0x81, 0xa4, 0xed, 0x21, 0x4e, 0xf0, 0x08, 0x1f, 0xf1, 0xfe,
    0x34, 0x0d, 0x2f, 0x08, 0xf1, 0x7d, 0x60, 0x3b, 0xd3, 0xf8, 0x10, 0x3c, 0xea, 0x32, 0x27,
    0xba, 0x64, 0xf2, 0x0c, 0x13, 0xf5, 0x34, 0x2a, 0x48, 0x22, 0xb9, 0xa9, 0x8e, 0x21, 0x67,
    0x4f, 0xbc, 0xb1, 0x17, 0x4b, 0xb0, 0x3b, 0x72, 0x0b, 0x56, 0xf3, 0x02, 0x8f, 0x2a, 0x97,
    0xf8, 0xd8, 0xfa, 0x6c, 0x49, 0xd4, 0x8c, 0xa6, 0x39, 0x0e, 0xe7, 0x94, 0x6e, 0x14, 0xc1,
    0x30, 0x85, 0x45, 0x2b, 0x87, 0xae, 0x3b, 0x6a, 0x2d, 0xb6, 0x4f, 0x94, 0x03, 0x5b, 0x5b,
    0x1b, 0x41, 0x0d, 0x9f, 0x0b, 0x85, 0xd4, 0xc7, 0x81, 0x5e, 0xa1, 0xc5, 0x22, 0x2d, 0xfc,
    0xf2, 0x05, 0xe3, 0x73, 0x65, 0xe3, 0xc5, 0xf3, 0xc1, 0x6f, 0xb3, 0x1c, 0xdc, 0xfe, 0x9c,
    0x85, 0x96, 0x27, 0x4c, 0x00, 0x0e, 0xba, 0x6f, 0xc1, 0x0b, 0x34, 0x9d, 0xe7, 0xa8, 0x39,
    0x3c, 0x70, 0x0d, 0xb1, 0x34, 0x51, 0xbe, 0xb6, 0x28, 0xf0, 0xda, 0x6e, 0x7c, 0x53, 0x3c,
    0x1c, 0xb4, 0x86, 0x7d, 0xe6, 0x0c, 0xb8, 0xf6, 0xad, 0x0a, 0x5a, 0xf2, 0xdc, 0x23, 0xb7,
    0xb1, 0x35, 0x76, 0xc5, 0x5a, 0x14, 0xf0, 0xb5, 0xfd, 0x6c, 0x35, 0xc4, 0x22, 0x2e, 0x27,
    0x51, 0x91, 0xcc, 0x96, 0xa4, 0xcc, 0x95, 0x74, 0xe7, 0x64, 0xfb, 0x11, 0xbb, 0xb9, 0xd3,
    0x76, 0x73, 0x47, 0x06, 0xb2, 0x62, 0x0b, 0x96, 0x90, 0xf3, 0xb5, 0x25, 0xe5, 0xf9, 0xc1,
    0xa5, 0xc2, 0x03, 0xff, 0x9d, 0x54, 0x52, 0xa5, 0xa2, 0x25, 0xcd, 0xf7, 0xa0, 0x9f, 0xe6,
    0x11, 0x05, 0x55, 0x50, 0x15, 0xa9, 0x4c, 0x15, 0xe9, 0x2a, 0x38, 0x30, 0x82, 0x35, 0x55,
    0x6d, 0x09, 0xf5, 0x82, 0x5a, 0x40, 0x51, 0x73, 0x2e, 0x37, 0x76, 0x42, 0x65, 0xf7, 0xfd,
    0xef, 0xac, 0xd0, 0xc1, 0x0c, 0xa0, 0x9c, 0x41, 0x13, 0x3d, 0xa1, 0xf9, 0x2e, 0x57, 0xef,
    0xe9, 0xde, 0xe1, 0x50, 0xd2, 0x38, 0x41, 0x30, 0x65, 0x32, 0x44, 0x90, 0x97, 0x78, 0x08,
    0x64, 0xbb, 0x38, 0xfa, 0x44, 0x2c, 0xe0, 0xcd, 0xd6, 0x9e, 0x97, 0xad, 0x80, 0x37, 0xd8,
    0x8f, 0xe5, 0x2a, 0xcd, 0xe6, 0x00, 0x4b, 0xae, 0xec, 0x6f, 0xe1, 0xf3, 0x71, 0xa0, 0x0c,
    0x41, 0xe2, 0x57, 0x38, 0xf1, 0x0f, 0x09, 0x19, 0xb5, 0x19, 0x43, 0x09, 0xf1, 0xb3, 0xb5,
    0x13, 0x10, 0x34, 0xb6, 0x59, 0x5f, 0x85, 0xd4, 0x66, 0x1e, 0x76, 0x70, 0x1c, 0x86, 0x89,
    0x30, 0xcc, 0xb9, 0x0d, 0xda, 0x85, 0x3a, 0xdc, 0xd4, 0x7d, 0x19, 0x76, 0xb0, 0xdb, 0xd3,
    0xd3, 0x61, 0xce, 0x6a, 0xe7, 0x40, 0xac, 0xbe, 0x9f, 0x9e, 0x59, 0x9f, 0x79, 0x4d, 0x58,
    0xab, 0x1d, 0x04, 0xdc, 0xd4, 0xb3, 0x3d, 0x56, 0xaf, 0x08, 0xb2, 0x60, 0x01, 0xf0, 0xdf,
    0x09, 0x26, 0x0b, 0x22, 0x55, 0xe6, 0xed, 0x69, 0xac, 0xa1, 0xe6, 0xb4, 0xdd, 0x15, 0x25,
    0x0f, 0xb6, 0x76, 0x95, 0x45, 0xa7, 0x8c, 0x9a, 0x9b, 0x0f, 0xd4, 0x59, 0x74, 0xb8, 0x9e,
    0x56, 0x61, 0xe9, 0x5f, 0x54, 0x3b, 0x5b, 0x2c, 0x5d, 0xec, 0x5b, 0x34, 0x0d, 0xbe, 0x45,
    0xb5, 0x32, 0x6f, 0x8d, 0x45, 0x8f, 0x71, 0x12, 0x16, 0x52, 0x31, 0xf3, 0x11, 0x34, 0xc1,
    0x57, 0x8d, 0x67, 0xbb, 0x0e, 0x0d, 0xd9, 0xd5, 0x55, 0x31, 0xdf, 0x9b, 0xaf, 0x2d, 0x44,
    0xba, 0x64, 0xf9, 0x9a, 0x98, 0x4d, 0xc4, 0x4f, 0x5f, 0xce, 0x9f, 0x7e, 0x7d, 0x61, 0x87,
    0xcc, 0x97, 0xb4, 0x7d, 0xd8, 0xc4, 0x73, 0xc0, 0xef, 0xa0, 0x1a, 0x2c, 0x62, 0x59, 0x44,
    0x78, 0x40, 0xb4, 0xf0, 0x4f, 0x8a, 0x31, 0x2f, 0x6d, 0x24, 0x26, 0xce, 0x60, 0x1d, 0x8b,
    0x58, 0xee, 0x50, 0x1f, 0x8b, 0x85, 0x1e, 0xf9, 0xda, 0x02, 0xf3, 0x6a, 0x82, 0xf9, 0x44,
    0x7d, 0x3e, 0x11, 0x86, 0x2c, 0xdf, 0xd1, 0xdc, 0x03, 0xe9, 0x86, 0xdf, 0x1a, 0x82, 0x77,
    0x6b, 0xc4, 0x16, 0xcc, 0x1b, 0xe1, 0x6b, 0xa9, 0xb0, 0xa3, 0x98, 0xa0, 0x2d, 0x30, 0x6c,
    0x07, 0x55, 0x65, 0x11, 0xe7, 0x2e, 0x50, 0x52, 0xfd, 0xa7, 0x6a, 0xaa, 0x3d, 0x16, 0x73,
    0xf9, 0xda, 0xb5, 0x4d, 0x36, 0x44, 0xa2, 0x60, 0x3a, 0x81, 0xc6, 0x0a, 0x0d, 0x58, 0xf9,
    0x6a, 0x94, 0x4a, 0x8f, 0xb9, 0x24, 0x3f, 0x07, 0x1b, 0xfe, 0x82, 0xa6, 0xa0, 0xe6, 0x0d,
    0xf8, 0x5d, 0x48, 0x5c, 0x8a, 0x05, 0xc1, 0xce, 0x4b, 0x1a, 0x6f, 0xbc, 0xe4, 0x8c, 0x35,
    0x76, 0xc4, 0xac, 0x1a, 0xbe, 0x76, 0x95, 0x4c, 0x18, 0x35, 0xa7, 0x03, 0xd7, 0x89, 0x04,
    0x4e, 0x71, 0x63, 0x0a, 0xf2, 0xb4, 0x69, 0xac, 0x72, 0x83, 0x30, 0xec, 0x99, 0xbb, 0x7b,
    0x0a, 0x7c, 0x73, 0x3f, 0xf1, 0xec, 0x09, 0xc8, 0x4f, 0x96, 0xfd, 0x13, 0xe7, 0x71, 0x3b,
    0xd1, 0x83, 0x63, 0x22, 0x61, 0xa3, 0x1e, 0xcc, 0x68, 0x8c, 0xa4, 0x4f, 0x21, 0x20, 0x16,
    0xc3, 0xa7, 0x4b, 0xe9, 0x2d, 0x58, 0x31, 0xe1, 0xbd, 0x17, 0xe1, 0x8c, 0xc2, 0xcc, 0xd0,
    0xb2, 0x39, 0xf5, 0x98, 0x2e, 0x1f, 0x7d, 0x57, 0xba, 0x75, 0x9d, 0x58, 0xf8, 0xcc, 0x5b,
    0xb7, 0xbd, 0x41, 0xed, 0x1b, 0x46, 0x76, 0xc0, 0x2f, 0x25, 0xab, 0xaf, 0x3c, 0xfb, 0x8f,
    0xb4, 0xcf, 0xb8, 0xe9, 0xe4, 0x85, 0xf0, 0x42, 0x4c, 0x1e, 0x7d, 0xc2, 0x81, 0xa7, 0x6f,
    0x2d, 0xcc, 0xe4, 0x86, 0x8f, 0x67, 0x49, 0x33, 0xae, 0xf9, 0x9c, 0x58, 0x21, 0x93, 0x95,
    0x7d, 0xe4, 0x82, 0xbd, 0xb4, 0xcd, 0x66, 0x44, 0x35, 0x07, 0x85, 0x1d, 0x8c, 0x95, 0xc4,
    0xfa, 0x3f, 0x16, 0x85, 0xf4, 0x2f, 0x67, 0x4c, 0x6c, 0x9d, 0xfd, 0xdb, 0xff, 0x79, 0x6a,
    0x1b, 0x57, 0x78, 0xf8, 0x8b, 0x2e, 0x42, 0x8f, 0x07, 0xab, 0xf1, 0x6b, 0xa9, 0xd4, 0x53,
    0x54, 0x1e, 0x8c, 0x5c, 0x43, 0xf7, 0x16, 0x81, 0xd3, 0xcb, 0xc0, 0x89, 0xc7, 0x84, 0x4d,
    0xc0, 0x48, 0x80, 0xd3, 0x73, 0xc0, 0x35, 0xba, 0x8d, 0x99, 0x42, 0xbe, 0x9e, 0x01, 0x31,
    0xa6, 0x8d, 0xad, 0xdb, 0x5b, 0xbc, 0x3e, 0x46, 0xdc, 0x02, 0xaf, 0xdd, 0x7b, 0x70, 0x86,
    0x12, 0xb8, 0xa6, 0x0b, 0x32, 0x9c, 0xce, 0x18, 0x6e, 0x48, 0x2c, 0x6d, 0x64, 0x89, 0x99,
    0x7c, 0x6d, 0x51, 0x18, 0xeb, 0x82, 0xbc, 0xa2, 0x1b, 0xab, 0x3d, 0xc5, 0x24, 0x83, 0x63,
    0x98, 0xc6, 0x1e, 0x1d, 0xc1, 0x31, 0xe5, 0x2d, 0x23, 0x52, 0xea, 0x89, 0xbc, 0x38, 0xd9,
    0xa0, 0xf0, 0xd2, 0x87, 0xfc, 0xf6, 0xd2, 0x76, 0xd5, 0xa1, 0xd8, 0x26, 0xf9, 0x5a, 0xae,
    0x8b, 0x27, 0xaf, 0x95, 0x4f, 0x5e, 0x3c, 0x9c, 0x6d, 0x62, 0x06, 0x45, 0x72, 0xf2, 0x59,
    0x9b, 0xb7, 0x7f, 0xec, 0x83, 0x2c, 0xd5, 0x32, 0x70, 0xe2, 0xa6, 0xaa, 0x99, 0xf6, 0x84,
    0xaf, 0x31, 0xe0, 0x86, 0x2b, 0xdb, 0x8a, 0x65, 0x64, 0x99, 0xc5, 0xb8, 0x59, 0x05, 0x3d,
    0x03, 0x16, 0x9d, 0x24, 0x01, 0xd4, 0x99, 0xf7, 0x88, 0xb9, 0xe6, 0x80, 0xe3, 0x53, 0xc5,
    0x45, 0x58, 0xc7, 0x3d, 0x11, 0x03, 0xc8, 0x4e, 0xec, 0xf8, 0xf8, 0xda, 0xf3, 0x3a, 0x62,
    0x40, 0xd4, 0xef, 0x57, 0x3f, 0xbc, 0x7a, 0xf3, 0x81, 0x41, 0x21, 0x48, 0xb9, 0x3c, 0xb6,
    0xbb, 0x8a, 0x23, 0xdb, 0x82, 0x0d, 0x29, 0xd9, 0xda, 0x22, 0xa7, 0xa8, 0x62, 0xc1, 0x35,
    0xe5, 0xd6, 0x94, 0x8f, 0x57, 0x29, 0x1f, 0xaf, 0xb8, 0x13, 0x60, 0xa6, 0x8d, 0xf4, 0xcc,
    0x8f, 0xde, 0x70, 0x75, 0x0b, 0x1b, 0xea, 0x70, 0xd2, 0xd8, 0xf9, 0x45, 0xde, 0x3a, 0x0e,
    0x2f, 0xcb, 0x2c, 0xba, 0x19, 0x49, 0xd1, 0x24, 0x58, 0x4c, 0x1d, 0xda, 0xc3, 0x32, 0x9e,
    0x34, 0xbb, 0xc5, 0x26, 0x34, 0xe4, 0x79, 0x49, 0x51, 0x2c, 0x18, 0x63, 0xd0, 0x14, 0x76,
    0x0a, 0x07, 0x37, 0x74, 0xdb, 0x2e, 0xb2, 0x13, 0xb7, 0x8e, 0xad, 0x2d, 0xa2, 0x58, 0xd0,
    0xd4, 0x94, 0x41, 0x1d, 0x8a, 0xe5, 0x32, 0x8a, 0xbb, 0x98, 0xda, 0xa3, 0x14, 0xc3, 0x72,
    0xc3, 0x6a, 0x3f, 0xdc, 0x3d, 0x2a, 0x81, 0x26, 0xde, 0x32, 0xd0, 0x4c, 0x3a, 0x06, 0x9a,
    0xc3, 0xc0, 0xe1, 0xca, 0x1e, 0x10, 0xa8, 0xe1, 0x69, 0x52, 0x2e, 0x57, 0x37, 0xf8, 0x6f,
    0xb5, 0x00, 0x7b, 0x01, 0x3d, 0x00, 0x3c, 0x55, 0xc1, 0x12, 0x19, 0x8d, 0x97, 0xc8, 0xc8,
    0xdd, 0x52, 0x05, 0x34, 0x38, 0xf5, 0xf3, 0xd8, 0xda, 0xe2, 0xa9, 0x0a, 0xfa, 0x95, 0xb0,
    0x9c, 0xc6, 0xbc, 0xc5, 0x94, 0x03, 0xac, 0xa3, 0xc6, 0x5e, 0x5b, 0x8f, 0xe3, 0xf4, 0xe9,
    0x5b, 0x2e, 0x68, 0xd6, 0xcb, 0x32, 0x03, 0x46, 0x2c, 0x0a, 0x06, 0xeb, 0x8a, 0xc1, 0x2c,
    0xa0, 0x5c, 0x85, 0x06, 0x19, 0xef, 0x8b, 0x04, 0x54, 0x72, 0xb6, 0xf0, 0x3f, 0x83, 0xb9,
    0x9f, 0xa1, 0x85, 0x96, 0xa6, 0x5d, 0x3c, 0x5e, 0xf8, 0x60, 0x55, 0x81, 0xc9, 0xf6, 0xef,
    0x34, 0x58, 0xac, 0x0a, 0xba, 0xa4, 0x2a, 0x77, 0x49, 0xc1, 0x86, 0x36, 0xac, 0xb6, 0x9b,
    0x44, 0xb0, 0xb1, 0xb5, 0x25, 0xcf, 0x43, 0x4c, 0xb0, 0xc1, 0xba, 0x5c, 0x38, 0x2b, 0x27,
    0x62, 0x30, 0x6f, 0x63, 0xe9, 0x0c, 0x1b, 0x65, 0xd1, 0x9d, 0x9d, 0xa5, 0xb1, 0xa1, 0x33,
    0x1f, 0x41, 0xcf, 0x86, 0xe7, 0x54, 0xe8, 0x9a, 0x3b, 0x56, 0x06, 0x62, 0x97, 0x26, 0x7c,
    0xca, 0xb8, 0x42, 0x73, 0xa2, 0x68, 0x6d, 0x58, 0xc1, 0xa0, 0xfe, 0x95, 0x2a, 0xd8, 0xb4,
    0x4d, 0x9a, 0xd6, 0x70, 0x7c, 0x3c, 0xad, 0xdc, 0x1e, 0x4b, 0x20, 0x07, 0xe8, 0xe8, 0x0d,
    0x39, 0x82, 0x56, 0xdf, 0x0c, 0x6c, 0xec, 0xa4, 0xb7, 0xad, 0x2a, 0x78, 0xf7, 0xaf, 0xf2,
    0x7f, 0xd9, 0x31, 0x46, 0x8e, 0x60, 0x12, 0x1b, 0x5f, 0x5b, 0xba, 0x51, 0x12, 0xec, 0x9a,
    0x92, 0xcf, 0x6b, 0x70, 0x29, 0xab, 0xdd, 0x90, 0x29, 0xab, 0x34, 0xfa, 0x8c, 0xde, 0xf5,
    0x06, 0x33, 0x37, 0xf4, 0x2c, 0xc7, 0xb3, 0xb1, 0xe1, 0xe4, 0x82, 0xf5, 0x36, 0x67, 0xf5,
    0x29, 0x2f, 0x64, 0x1f, 0x50, 0x41, 0x25, 0xa8, 0x7e, 0x64, 0x46, 0x38, 0xb6, 0x62, 0x81,
    0x16, 0x0b, 0x4c, 0xf0, 0xb5, 0xb5, 0x76, 0x46, 0x35, 0x0d, 0x16, 0x27, 0x2f, 0x15, 0x5b,
    0xd3, 0xa3, 0x13, 0xe4, 0x1b, 0x9e, 0xf5, 0xa2, 0x98, 0x58, 0x50, 0x2f, 0x56, 0xce, 0xc0,
    0xae, 0xf4, 0x8d, 0xcd, 0x46, 0xd1, 0x54, 0xeb, 0x1b, 0x9b, 0xa3, 0x1a, 0x9d, 0x39, 0x2c,
    0x25, 0xf1, 0xfe, 0x7e, 0x66, 0xd2, 0xde, 0xcf, 0x4c, 0xba, 0xfb, 0x0d, 0xb1, 0x00, 0x5d,
    0xea, 0x67, 0x95, 0xa0, 0x14, 0xdd, 0xcd, 0xf2, 0xdd, 0x0a, 0x6a, 0xd0, 0x6f, 0xd1, 0x83,
    0xf6, 0xf8, 0x36, 0x6b, 0x07, 0x89, 0x48, 0x16, 0x2c, 0x08, 0x56, 0x79, 0x41, 0xb0, 0x62,
    0x83, 0x91, 0x60, 0xdb, 0x7b, 0xbe, 0xb6, 0xc8, 0x1f, 0x03, 0xc1, 0x43, 0x1d, 0x50, 0x61,
    0xc3, 0x79, 0x6c, 0x69, 0x9b, 0x1a, 0x5a, 0xb4, 0x90, 0xf6, 0xe3, 0x0a, 0xa4, 0x6f, 0xaf,
    0xbd, 0x98, 0x87, 0x04, 0xaf, 0x2a, 0x71, 0x2b, 0x82, 0x19, 0x22, 0xaa, 0x99, 0xb4, 0xff,
    0x64, 0xcd, 0x15, 0xcc, 0xc4, 0x65, 0x6b, 0xeb, 0xbc, 0x1e, 0xb3, 0x74, 0xc4, 0xe2, 0xad,
    0xcd, 0xcb, 0x41, 0x72, 0xc4, 0x66, 0xee, 0x88, 0x1b, 0x27, 0x59, 0x94, 0x5d, 0x41, 0x89,
    0x05, 0xb7, 0x16, 0x71, 0x50, 0x0c, 0xa4, 0x24, 0xa9, 0xbd, 0xa5, 0x60, 0xac, 0x6a, 0x08,
    0x77, 0x1b, 0xcc, 0xf9, 0x55, 0x86, 0x8a, 0xac, 0xa8, 0x82, 0xe9, 0x86, 0x6c, 0x6d, 0xe5,
    0xe3, 0x3d, 0xf3, 0x7a, 0x58, 0xd7, 0x30, 0x69, 0x4a, 0xeb, 0x2d, 0xa7, 0x11, 0xaa, 0xb1,
    0x4c, 0x3d, 0x84, 0x4d, 0xb0, 0x6f, 0x85, 0xca, 0xfb, 0x56, 0x0c, 0x14, 0x7b, 0xac, 0x59,
    0x57, 0x1c, 0x7c, 0x6d, 0xa9, 0xbd, 0xbd, 0xa0, 0x19, 0xa4, 0x0f, 0x6b, 0x04, 0xb5, 0x69,
    0xca, 0x8e, 0x80, 0xe5, 0x35, 0x94, 0x33, 0x28, 0x51, 0x8e, 0x78, 0x9b, 0x40, 0x33, 0xc9,
    0x34, 0x93, 0x26, 0x81, 0x43, 0x6c, 0x2a, 0xd0, 0x10, 0xb8, 0xce, 0x28, 0xe7, 0x25, 0x71,
    0xc5, 0x14, 0x9d, 0xcd, 0x9c, 0x93, 0x72, 0x4f, 0x78, 0x9b, 0x7d, 0x66, 0xc5, 0xb2, 0xf8,
    0x66, 0x3d, 0x61, 0xca, 0xb9, 0x20, 0xcf, 0x6a, 0x3c, 0xfd, 0xd0, 0x1c, 0x8e, 0xdd, 0x91,
    0x3f, 0xca, 0xd7, 0x96, 0x52, 0xdc, 0xc5, 0x0c, 0x68, 0x58, 0x57, 0x34, 0x0a, 0xdf, 0x26,
    0xb3, 0x06, 0x56, 0x69, 0xf4, 0x90, 0x6d, 0x29, 0x2d, 0x1e, 0xa4, 0x5b, 0x12, 0xb4, 0x99,
    0x5e, 0xdd, 0xa2, 0xc8, 0xa6, 0x2e, 0x28, 0x2b, 0xf8, 0xda, 0xd2, 0x96, 0x04, 0xcd, 0x02,
    0xa1, 0xc6, 0x37, 0x9a, 0x4f, 0x3c, 0xff, 0x4b, 0xd6, 0xae, 0x10, 0x23, 0x9e, 0x33, 0x42,
    0x86, 0x34, 0xb0, 0x48, 0xed, 0x41, 0x89, 0xad, 0x92, 0x26, 0xf0, 0x21, 0x28, 0x54, 0x76,
    0xc5, 0x47, 0x9f, 0xe2, 0xb2, 0x39, 0x08, 0x0b, 0xdc, 0xbc, 0xe0, 0xd5, 0xb3, 0xca, 0xaf,
    0x75, 0xd9, 0x70, 0x2c, 0xc1, 0xf3, 0xe4, 0x6b, 0x8b, 0x9b, 0x17, 0x9c, 0x6d, 0x01, 0xeb,
    0xe3, 0x63, 0xd1, 0x39, 0x37, 0xc9, 0x98, 0x9b, 0x02, 0x53, 0x95, 0x43, 0xa3, 0x5d, 0x22,
    0x69, 0x60, 0xd4, 0xc8, 0x31, 0x55, 0x63, 0x07, 0xc9, 0xa4, 0x9e, 0x20, 0xad, 0xad, 0x4a,
    0x7f, 0xf0, 0x40, 0x4f, 0x1a, 0xcf, 0x51, 0x05, 0x23, 0x1b, 0xb0, 0x8e, 0xd7, 0xd6, 0x1b,
    0xaa, 0x8a, 0x11, 0x1b, 0x5f, 0x5b, 0xc2, 0xb7, 0x20, 0xb1, 0xa9, 0xcc, 0x07, 0x6b, 0x7b,
    0xba, 0x5c, 0xab, 0x91, 0x84, 0x83, 0xe6, 0x1e, 0x90, 0x75, 0x92, 0x70, 0x30, 0x94, 0x6b,
    0xad, 0x1c, 0x32, 0xee, 0x12, 0x31, 0x4e, 0x03, 0xc6, 0x7a, 0xfe, 0xd0, 0xe4, 0x7e, 0xe2,
    0xe5, 0x88, 0x66, 0x97, 0x80, 0x66, 0x1a, 0xcf, 0xd4, 0x72, 0x80, 0xc9, 0x83, 0x7e, 0x00,
    0x47, 0x33, 0x3b, 0x05, 0x33, 0x13, 0xc0, 0xd4, 0x0a, 0x60, 0x15, 0x32, 0x7f, 0xcd, 0xfb,
    0x30, 0x62, 0xf6, 0xfc, 0x42, 0xb6, 0xda, 0xf2, 0x49, 0xda, 0x46, 0x9c, 0x75, 0x0e, 0x0b,
    0xf2, 0x24, 0x99, 0x20, 0x00, 0x5f, 0xa2, 0xb1, 0x11, 0x64, 0x00, 0x59, 0x50, 0x00, 0xc8,
    0x1e, 0x3d, 0xd6, 0x4c, 0x30, 0x26, 0xc4, 0x6e, 0xb9, 0xf8, 0xda, 0x62, 0xe3, 0x70, 0xc1,
    0x2a, 0xc5, 0x6c, 0x09, 0xba, 0xbf, 0x27, 0x17, 0xf9, 0x6e, 0x61, 0xf4, 0x52, 0x06, 0xa4,
    0xc2, 0xf1, 0x17, 0x17, 0x74, 0x5e, 0x30, 0x15, 0xb4, 0x60, 0x80, 0x39, 0x0b, 0x30, 0x4b,
    0xb4, 0xd3, 0xae, 0x44, 0xc2, 0x30, 0xc0, 0x3e, 0x1b, 0xb8, 0x8e, 0xc7, 0x85, 0x14, 0xc1,
    0x45, 0x85, 0x37, 0x1c, 0x37, 0x07, 0xba, 0xa9, 0x8e, 0xc5, 0xac, 0x2f, 0xbe, 0xb6, 0x36,
    0x5f, 0x8e, 0xda, 0x75, 0xa0, 0x94, 0x2c, 0x2c, 0x9a, 0x52, 0xca, 0x90, 0x27, 0x47, 0x6c,
    0xc2, 0x69, 0x38, 0x91, 0xc1, 0x25, 0x1e, 0x4c, 0x1c, 0x64, 0x82, 0x5a, 0xce, 0xc3, 0xd5,
    0xac, 0x9b, 0x1c, 0xe6, 0xf7, 0x8b, 0x10, 0xef, 0x06, 0xc1, 0xd4, 0x49, 0x92, 0x6e, 0xd2,
    0xac, 0x60, 0x11, 0xcf, 0x17, 0x7c, 0x12, 0x98, 0x60, 0x95, 0x3a, 0xac, 0x63, 0x37, 0xb2,
    0x4e, 0x71, 0x45, 0xff, 0x96, 0xc2, 0x8d, 0x2c, 0x5b, 0x5b, 0xec, 0xfe, 0x21, 0xd8, 0xfc,
    0x4e, 0x6c, 0x3e, 0x60, 0x70, 0x33, 0x0c, 0x0e, 0x4a, 0x8a, 0x67, 0xd0, 0x41, 0xf1, 0x0c,
    0xc5, 0x33, 0xc8, 0x29, 0x9e, 0x21, 0xef, 0xe6, 0xb0, 0x29, 0x73, 0x0c, 0x4a, 0x8a, 0x67,
    0x41, 0xf1, 0x0c, 0x12, 0xc5, 0x33, 0xc8, 0x29, 0x9e, 0xfe, 0x00, 0xcb, 0x29, 0x1e, 0xfa,
    0xdc, 0x1b, 0xea, 0x0b, 0x2f, 0xcf, 0x5e, 0x5b, 0x53, 0x78, 0x30, 0x36, 0x1f, 0xca, 0x1a,
    0x9d, 0xb1, 0xbc, 0x19, 0xa6, 0x26, 0xfe, 0xce, 0x06, 0x61, 0xd7, 0xe7, 0xe1, 0xb3, 0x8f,
    0x0b, 0xad, 0xe7, 0x14, 0xc1, 0xae, 0x27, 0x0a, 0xef, 0x7a, 0xa2, 0x13, 0x53, 0x56, 0xdb,
    0x8d, 0xa4, 0xf7, 0x9b, 0x74, 0x6d, 0x51, 0x9f, 0x68, 0x82, 0x92, 0x5b, 0x03, 0x24, 0xef,
    0xee, 0x67, 0xf2, 0x27, 0x99, 0xff, 0xfa, 0xfe, 0xd5, 0xd5, 0xcb, 0xd7, 0xaf, 0xb6, 0x30,
    0xf5, 0x5f, 0x5a, 0xe6, 0xbf, 0xc2, 0x67, 0xf2, 0xa0, 0x3c, 0xff, 0x55, 0x36, 0x74, 0xe5,
    0xfe, 0xeb, 0x2e, 0xfe, 0x7c, 0xc3, 0xcc, 0x95, 0x6c, 0xee, 0xf7, 0xa3, 0x47, 0x1f, 0xb0,
    0x60, 0xea, 0x8d, 0x43, 0x6c, 0x7f, 0x05, 0x3f, 0x2e, 0x22, 0x56, 0x67, 0xef, 0x90, 0x19,
    0x14, 0x61, 0xc8, 0x08, 0x6d, 0x19, 0x6c, 0x72, 0x46, 0xb3, 0x81, 0x5d, 0xae, 0x06, 0x92,
    0x83, 0x34, 0xc5, 0xf2, 0xaf, 0xe0, 0x7e, 0x62, 0x82, 0x6a, 0x44, 0xb0, 0x31, 0x9c, 0xcf,
    0x49, 0xcc, 0x30, 0x59, 0xe5, 0xd9, 0xa3, 0x47, 0xdf, 0x7b, 0x61, 0x14, 0x03, 0xeb, 0xe0,
    0x05, 0x61, 0xc9, 0x81, 0xfc, 0xf5, 0xf0, 0xe1, 0xa7, 0x4f, 0x9f, 0xe2, 0xe8, 0x11, 0x0d,
    0xe5, 0x3e, 0x90, 0xfe, 0x42, 0xcb, 0x15, 0xf0, 0x17, 0xb9, 0x29, 0xe5, 0x8f, 0xcf, 0xff,
    0xeb, 0x11, 0x68, 0x10, 0x14, 0x98, 0x63, 0x28, 0x45, 0x01, 0x78, 0xbc, 0x18, 0xe6, 0x62,
    0xd5, 0xf0, 0x40, 0xf6, 0x44, 0x89, 0x4f, 0xba, 0xfe, 0x0b, 0xa6, 0xee, 0x5c, 0x64, 0x0f,
    0x94, 0xfd, 0x78, 0x69, 0x39, 0xce, 0x63, 0x70, 0x0a, 0xf8, 0x33, 0x61, 0x17, 0x2f, 0xb0,
    0xe7, 0x0d, 0x9b, 0x23, 0x91, 0x40, 0xf6, 0xf4, 0x3b, 0x89, 0xa2, 0xc8, 0xc3, 0x0c, 0x5c,
    0xa5, 0xb0, 0xa4, 0x99, 0x75, 0xeb, 0x65, 0x45, 0x51, 0x60, 0xff, 0x82, 0xfe, 0xc3, 0xd4,
    0x4c, 0x08, 0x5a, 0x06, 0x0b, 0xe9, 0xde, 0xf2, 0xe2, 0x3f, 0x49, 0xdf, 0x3d, 0xe5, 0xbb,
    0x83, 0x00, 0xb6, 0xf3, 0xed, 0xd8, 0x0a, 0xbf, 0x65, 0xaf, 0xda, 0xdf, 0xf9, 0x27, 0xfc,
    0xe7, 0xfd, 0x34, 0x87, 0x08, 0xe7, 0x32, 0x8e, 0x7a, 0x7b, 0xc7, 0x4a, 0xfe, 0x57, 0x74,
    0x60, 0x96, 0xf9, 0x5f, 0x35, 0x71, 0x26, 0xf4, 0x03, 0xff, 0x6f, 0xff, 0x0f, 0x38, 0x2e,
    0xa3, 0xfc, 0x8f, 0xf4, 0x36, 0xe1, 0x98, 0x27, 0xd2, 0x2f, 0xa8, 0x7b, 0x9f, 0x48, 0xd7,
    0x87, 0x1e, 0xf1, 0x1d, 0xd0, 0xf8, 0xff, 0x64, 0x89, 0x68, 0xdf, 0x32, 0x0d, 0xfc, 0x34,
    0xfa, 0x17, 0x40, 0x35, 0x40, 0xc1, 0x4f, 0xbf, 0xfb, 0xee, 0x91, 0xf4, 0x9d, 0xf4, 0xea,
    0x58, 0xd0, 0x65, 0xdf, 0xf1, 0xc0, 0xfe, 0x4b, 0xca, 0x53, 0x6c, 0xcb, 0xcf, 0xba, 0xca,
    0xc2, 0xa3, 0x34, 0x3e, 0x7f, 0xf9, 0x08, 0xb9, 0x82, 0x25, 0xb7, 0xe4, 0xa2, 0xf6, 0xc9,
    0xf1, 0x31, 0xd8, 0xd3, 0xcc, 0x77, 0xa2, 0x1c, 0x38, 0x6c, 0xde, 0x3a, 0x7d, 0x2b, 0xfe,
    0x0e, 0x18, 0x74, 0x29, 0xdd, 0x06, 0x81, 0x33, 0x5e, 0xe2, 0x03, 0xd9, 0xef, 0xfe, 0x83,
    0x57, 0x22, 0xe9, 0x2a, 0xf9, 0x48, 0x1a, 0xe3, 0x05, 0x2f, 0x08, 0xa2, 0x64, 0xcd, 0x53,
    0x37, 0xff, 0xf4, 0xf1, 0xf9, 0x33, 0x4c, 0xac, 0x87, 0x8f, 0xff, 0x5c, 0xf7, 0x78, 0x17,
    0xa6, 0x7b, 0x32, 0x9d, 0x16, 0xbf, 0x9b, 0xfc, 0x36, 0xff, 0xe5, 0x7f, 0x26, 0xf8, 0xf8,
    0x57, 0x68, 0x45, 0x52, 0x08, 0xe2, 0x12, 0xf0, 0xc7, 0x2e, 0x20, 0xa3, 0xa6, 0x3d, 0xbf,
    0xab, 0xde, 0xd0, 0x45, 0x3f, 0xa4, 0x15, 0x94, 0x95, 0xcd, 0xbe, 0xe7, 0xfb, 0xb2, 0xfc,
    0x9a, 0xd9, 0x85, 0x87, 0xd7, 0x6d, 0xbf, 0x76, 0x01, 0x83, 0xdf, 0x07, 0xe4, 0x22, 0xec,
    0x33, 0x84, 0xbd, 0xf1, 0x28, 0x96, 0x0c, 0xbc, 0x0c, 0xb0, 0xf4, 0x5c, 0x6a, 0xe1, 0x7e,
    0x38, 0xaf, 0x14, 0x27, 0xef, 0x93, 0x60, 0x2b, 0xc2, 0x9f, 0x49, 0x69, 0x5e, 0x93, 0x76,
    0xb0, 0x5f, 0xc1, 0x63, 0x0b, 0x48, 0x62, 0xe9, 0x6b, 0x24, 0x8b, 0x9d, 0xb1, 0xac, 0xb6,
    0x1e, 0x76, 0x68, 0x4c, 0x09, 0x37, 0x85, 0x28, 0xfb, 0x4d, 0x56, 0x2e, 0x5f, 0x21, 0x9f,
    0x19, 0x54, 0x9a, 0x4e, 0xa2, 0x67, 0x8c, 0xe4, 0xff, 0x5c, 0xfc, 0x20, 0x2c, 0x7d, 0x90,
    0x83, 0x17, 0x54, 0x71, 0xa1, 0xe4, 0x2f, 0xc1, 0x90, 0xa2, 0x9f, 0x35, 0xcb, 0x82, 0x67,
    0x3f, 0x11, 0x37, 0xbe, 0xc0, 0xca, 0x65, 0x09, 0xcb, 0xd1, 0x93, 0x0d, 0x96, 0x16, 0xc2,
    0xa4, 0xf7, 0xde, 0xed, 0xa4, 0x79, 0x25, 0x3b, 0xb0, 0xdc, 0x55, 0xcd, 0xe3, 0x0c, 0xf0,
    0x39, 0x58, 0xcf, 0x19, 0xb0, 0x13, 0xa0, 0xca, 0xa0, 0x96, 0x2c, 0x41, 0x53, 0x4a, 0x67,
    0xfb, 0x4c, 0x1a, 0x53, 0xc8, 0xb3, 0x33, 0xa8, 0xc5, 0x38, 0x43, 0x34, 0x26, 0x7b, 0x27,
    0x2d, 0x23, 0x9d, 0x61, 0xf3, 0x96, 0xc4, 0xcc, 0x64, 0xcf, 0x53, 0x13, 0x7e, 0x10, 0x07,
    0x14, 0x80, 0x66, 0x50, 0xbe, 0xeb, 0x04, 0xca, 0x6b, 0x96, 0xd8, 0xb8, 0x6c, 0x84, 0xa7,
    0xc8, 0x41, 0x8a, 0x3c, 0x59, 0xcd, 0x5e, 0x9d, 0xc0, 0x5f, 0x21, 0x34, 0xea, 0xe4, 0x41,
    0x9f, 0x71, 0x0c, 0x5c, 0xe5, 0x99, 0x00, 0xfe, 0xdf, 0xe2, 0xcd, 0x83, 0x92, 0xc3, 0x17,
    0x83, 0x9f, 0xdb, 0xb8, 0xa0, 0x44, 0xf0, 0xfc, 0xd1, 0x05, 0xda, 0xce, 0xd3, 0x55, 0xf1,
    0xf3, 0xd2, 0x79, 0xf9, 0xe4, 0x96, 0x43, 0x9b, 0x3e, 0xff, 0xf1, 0x19, 0x4b, 0x5e, 0x3f,
    0x6f, 0x3e, 0xb7, 0x37, 0xe4, 0x96, 0x4d, 0xda, 0x65, 0xc0, 0xfd, 0x2c, 0x72, 0x68, 0xeb,
    0x4e, 0x85, 0xf6, 0x3b, 0x9e, 0x58, 0xba, 0xdf, 0x9f, 0x63, 0x2c, 0x44, 0xf0, 0xf8, 0xdd,
    0x7a, 0xcf, 0x01, 0x75, 0x45, 0xd3, 0xec, 0xda, 0xcc, 0xcc, 0xac, 0x3d, 0x28, 0x9a, 0x35,
    0x47, 0x29, 0xca, 0xbf, 0x9b, 0x3b, 0x8e, 0x9c, 0x34, 0xb9, 0x4a, 0xce, 0x33, 0x43, 0x29,
    0x0f, 0x76, 0x37, 0x55, 0xbc, 0x16, 0x2d, 0x18, 0x0a, 0x51, 0x7b, 0xb1, 0x89, 0x18, 0x4c,
    0x17, 0xde, 0x9e, 0x13, 0x12, 0x25, 0xfa, 0x78, 0xc1, 0xdf, 0x4d, 0xda, 0x69, 0xa4, 0x00,
    0x03, 0x0e, 0xcf, 0xfc, 0x32, 0xc3, 0x34, 0x20, 0x69, 0x39, 0x4d, 0xb4, 0x6c, 0xee, 0x9d,
    0x87, 0xe1, 0xef, 0x06, 0x17, 0x3c, 0xab, 0x79, 0xeb, 0xe5, 0x8b, 0x0c, 0x09, 0x37, 0xd9,
    0x3f, 0x37, 0xbd, 0xf9, 0x0a, 0xe7, 0x91, 0xb1, 0x4a, 0x4f, 0xbc, 0xbc, 0x67, 0x5d, 0xcf,
    0xdf, 0x9e, 0x2e, 0x1c, 0xda, 0x78, 0xda, 0xca, 0x4d, 0xc2, 0xcb, 0x41, 0x58, 0x0f, 0x1b,
    0x0a, 0xaf, 0x7e, 0xc7, 0x9f, 0x96, 0x9c, 0xf7, 0xdf, 0x7f, 0x13, 0x80, 0x20, 0x88, 0xe2,
    0x41, 0x48, 0x1e, 0x57, 0x07, 0x43, 0x23, 0xb9, 0x37, 0x1c, 0x4e, 0x8e, 0x32, 0x68, 0x7d,
    0x35, 0xb0, 0xf2, 0x94, 0x44, 0xa7, 0xa2, 0xa3, 0x73, 0x96, 0x07, 0x0b, 0x04, 0x29, 0x2b,
    0xc8, 0x47, 0xae, 0xc7, 0x4b, 0x09, 0x13, 0x14, 0xb1, 0xe5, 0x33, 0x37, 0xde, 0xea, 0x77,
    0xbb, 0xc3, 0xe2, 0x32, 0x25, 0x03, 0xa2, 0x20, 0x56, 0xf0, 0x4f, 0x13, 0x97, 0xfe, 0x93,
    0xc6, 0x94, 0x45, 0x6a, 0xc8, 0xb4, 0x91, 0x28, 0x29, 0xe1, 0xe0, 0xc1, 0xe4, 0x29, 0x93,
    0x17, 0x29, 0xab, 0xd6, 0x10, 0x5f, 0xed, 0x46, 0x68, 0xa8, 0xa9, 0x9e, 0x2c, 0x73, 0x2f,
    0x00, 0xf0, 0x3a, 0x4c, 0xbe, 0x89, 0x3c, 0xde, 0x73, 0x4f, 0xc4, 0x3f, 0x6f, 0xde, 0xbe,
    0x7d, 0xf5, 0x13, 0x78, 0x78, 0xf2, 0x93, 0xca, 0x33, 0x5e, 0xe6, 0x87, 0x37, 0xae, 0x7e,
    0xcb, 0x57, 0x2f, 0xde, 0xbe, 0xbf, 0xfa, 0xf0, 0xea, 0x25, 0x3c, 0x49, 0x49, 0x3f, 0xf9,
    0x47, 0x5e, 0xbd, 0x0a, 0xa1, 0x14, 0x10, 0x61, 0xd3, 0xb9, 0x54, 0x46, 0xb1, 0xaa, 0x86,
    0x2a, 0xf5, 0x06, 0x70, 0x90, 0x08, 0x84, 0x9c, 0x9c, 0xba, 0x6c, 0x3c, 0x90, 0x9c, 0xe8,
    0x02, 0x04, 0x0b, 0x86, 0x15, 0xa3, 0xc2, 0x7b, 0x8b, 0x82, 0x88, 0x7e, 0xc2, 0x09, 0x22,
    0xf1, 0xbc, 0xa6, 0xe1, 0xb6, 0x0a, 0x52, 0x7c, 0x86, 0x06, 0xa4, 0x13, 0x4e, 0x42, 0x05,
    0x33, 0x0f, 0xee, 0xf3, 0x32, 0x6f, 0xc5, 0x86, 0xde, 0xd1, 0x95, 0x9d, 0xb6, 0x94, 0x12,
    0x26, 0x45, 0xd5, 0x9b, 0x83, 0xf0, 0xfe, 0x76, 0x73, 0xf0, 0x5d, 0x05, 0x48, 0xb6, 0x82,
    0x79, 0x34, 0xe5, 0x0a, 0x37, 0x43, 0x7f, 0xe0, 0x6d, 0x1a, 0xe8, 0xc6, 0x4a, 0x0b, 0xe1,
    0x4c, 0xdb, 0x66, 0x39, 0x8b, 0x1e, 0xef, 0xfb, 0xc8, 0x0f, 0x76, 0xd9, 0x68, 0x17, 0xe6,
    0xf0, 0x24, 0x07, 0xb5, 0x30, 0xb2, 0xdf, 0xe5, 0x3a, 0xfd, 0x21, 0x2f, 0x65, 0x51, 0x81,
    0xc7, 0x25, 0x5b, 0x80, 0xdf, 0x8c, 0xea, 0x89, 0xc4, 0xf3, 0xe1, 0x04, 0x80, 0x79, 0x58,
    0x1b, 0xdf, 0xb9, 0x9d, 0x7f, 0x34, 0x5d, 0x9b, 0x7c, 0xe5, 0xcd, 0xdb, 0x0f, 0xaf, 0x9e,
    0x69, 0x2f, 0x13, 0x0c, 0xdc, 0x07, 0x38, 0x6f, 0x9d, 0x85, 0x55, 0xbc, 0xf8, 0x5b, 0x8c,
    0xf8, 0xa4, 0xfc, 0xad, 0xff, 0x70, 0x58, 0xe6, 0x8a, 0x24, 0x17, 0x90, 0x93, 0x1e, 0x21,
    0x82, 0x6e, 0xf8, 0xdf, 0x8b, 0xc2, 0xb5, 0x04, 0xee, 0xcc, 0xfa, 0xe2, 0xcd, 0x92, 0x30,
    0x09, 0x56, 0xea, 0xd0, 0x46, 0xf0, 0x43, 0xf3, 0xfb, 0xfd, 0xc0, 0x27, 0xf5, 0x20, 0xf0,
    0x97, 0x41, 0xc8, 0xb8, 0x39, 0xff, 0x22, 0x56, 0x21, 0x36, 0xb3, 0x00, 0xd7, 0xf0, 0x3f,
    0x2f, 0x7b, 0x11, 0xd2, 0x81, 0x93, 0x0c, 0x2e, 0x74, 0x15, 0x68, 0xa2, 0x47, 0x94, 0xb4,
    0x2d, 0x1a, 0x24, 0xf8, 0xc0, 0xbf, 0x02, 0xca, 0x00, 0x5d, 0x13, 0x20, 0x28, 0x8c, 0x44,
    0x89, 0x21, 0xf1, 0x33, 0xfe, 0x21, 0x0b, 0x68, 0x49, 0xac, 0x59, 0x96, 0x58, 0xb4, 0x0d,
    0x17, 0x03, 0x66, 0x46, 0xe5, 0xb7, 0x40, 0xa2, 0x8f, 0x35, 0xfe, 0x5b, 0x78, 0x70, 0x00,
    0xc3, 0x34, 0xb8, 0x7d, 0x9c, 0x5b, 0x91, 0x51, 0xe0, 0xe5, 0x5d, 0x42, 0x9c, 0x14, 0x1c,
    0xd8, 0x35, 0xab, 0x8b, 0x0b, 0xc9, 0xff, 0x6f, 0xef, 0x5b, 0xbb, 0xda, 0x38, 0xb2, 0x45,
    0x73, 0x7e, 0x45, 0x87, 0x59, 0xeb, 0x04, 0x66, 0x09, 0x59, 0x12, 0x18, 0x6c, 0x3c, 0x13,
    0xc0, 0xd8, 0x51, 0xc6, 0x3c, 0x2e, 0xc2, 0xce, 0xcd, 0x39, 0x6b, 0x96, 0x69, 0x49, 0x2d,
    0x41, 0xea, 0xd6, 0x51, 0x4b, 0x60, 0xe5, 0xf1, 0x63, 0xee, 0x5f, 0xb9, 0xbf, 0xec, 0xee,
    0xbd, 0xbb, 0xaa, 0x25, 0x6c, 0x42, 0x26, 0x73, 0xe9, 0x95, 0x15, 0xa3, 0xee, 0xaa, 0x5d,
    0xaa, 0x76, 0x55, 0xed, 0xda, 0xcf, 0x49, 0x22, 0x8f, 0xb4, 0xe4, 0x13, 0x89, 0xe1, 0xa2,
    0x0a, 0xc6, 0x02, 0xe3, 0xd2, 0x93, 0xa0, 0x0d, 0xa6, 0xe2, 0x3f, 0xe5, 0x97, 0x59, 0x7c,
    0x7b, 0x2d, 0xdf, 0x89, 0x9f, 0xff, 0x12, 0xdd, 0x0b, 0xec, 0x56, 0xba, 0xfd, 0xcf, 0xde,
    0xf5, 0xfe, 0x63, 0x00, 0x63, 0x5b, 0x3a, 0x77, 0x07, 0x9a, 0xd0, 0x12, 0xed, 0xf0, 0x42,
    0xde, 0xe8, 0xda, 0x2c, 0xb0, 0x1e, 0xdc, 0x55, 0xa8, 0x22, 0x50, 0xac, 0xb3, 0xda, 0x37,
    0xcb, 0xc7, 0x22, 0x53, 0x07, 0x26, 0x7c, 0x0a, 0xed, 0xa3, 0x6d, 0x4a, 0x40, 0x83, 0xfc,
    0xb9, 0x89, 0x12, 0x8f, 0x80, 0x6f, 0x51, 0xba, 0xab, 0x09, 0x1c, 0x0b, 0xb1, 0xc6, 0xa8,
    0x5f, 0x6a, 0xba, 0xe8, 0x71, 0x3c, 0xd9, 0x33, 0xce, 0xf3, 0xff, 0xce, 0x27, 0x92, 0x15,
    0x87, 0x73, 0x3a, 0xfd, 0xea, 0xc1, 0x09, 0xe6, 0xb6, 0xdc, 0xfa, 0xd2, 0x36, 0xdf, 0xe5,
    0x0e, 0xec, 0xca, 0x2d, 0x46, 0x2c, 0x63, 0x72, 0x12, 0x4d, 0x0b, 0xcf, 0xce, 0xc8, 0x0d,
    0xa5, 0x25, 0xbb, 0x17, 0xdc, 0xd5, 0x0b, 0x6d, 0xec, 0x8e, 0x39, 0xcd, 0xab, 0xe7, 0x03,
    0x9c, 0x5e, 0x4b, 0x88, 0x70, 0x22, 0x60, 0x7c, 0xb5, 0x12, 0x60, 0x71, 0xf3, 0x4e, 0xc9,
    0xd6, 0x01, 0x89, 0x9c, 0x63, 0xec, 0x95, 0x30, 0xe1, 0x5a, 0x59, 0x09, 0xfc, 0x79, 0x9c,
    0x61, 0xd0, 0x74, 0x46, 0x3a, 0xcc, 0x45, 0x7e, 0xb7, 0x1a, 0x64, 0xbe, 0x7a, 0x7a, 0x40,
    0xb2, 0x30, 0x62, 0x51, 0xfd, 0xc8, 0x09, 0x61, 0xda, 0xcc, 0xe2, 0xb7, 0x1d, 0x39, 0x62,
    0x60, 0x75, 0x60, 0x1d, 0x89, 0xdd, 0x0a, 0x49, 0x4a, 0x1b, 0x59, 0x13, 0xe3, 0xc6, 0x06,
    0x38, 0x7d, 0x9c, 0xe7, 0x50, 0xb8, 0x2a, 0x38, 0xc4, 0x46, 0xdf, 0xc4, 0x21, 0xbd, 0x00,
    0x40, 0xe9, 0xcc, 0x2f, 0x5a, 0x30, 0xf2, 0x0b, 0x33, 0x21, 0xe1, 0x3e, 0x24, 0xd7, 0xf6,
    0xcc, 0x6d, 0x69, 0x73, 0xef, 0x74, 0x28, 0x0c, 0x05, 0x07, 0x1b, 0x65, 0x2a, 0x7f, 0x8f,
    0x3f, 0xf8, 0xae, 0x27, 0xd2, 0x9a, 0x18, 0x08, 0x4a, 0x6d, 0x55, 0xaf, 0x6c, 0xc9, 0x1f,
    0xbe, 0xa8, 0x94, 0x04, 0xab, 0x68, 0x4a, 0x9b, 0xcd, 0x2d, 0xac, 0xfb, 0x03, 0x9e, 0xfb,
    0x66, 0x49, 0x66, 0xd7, 0xf9, 0x20, 0xe2, 0xfc, 0x98, 0x8c, 0x2d, 0xe7, 0xab, 0x59, 0x93,
    0xd7, 0x80, 0x51, 0x40, 0x5f, 0x3a, 0x0e, 0x09, 0x48, 0xde, 0xe2, 0xb8, 0x7d, 0x16, 0x69,
    0x2c, 0x20, 0x11, 0x18, 0x86, 0xc1, 0x92, 0xa1, 0x0b, 0xd0, 0x14, 0xa9, 0x8a, 0x91, 0x14,
    0x4f, 0xb0, 0x11, 0xf9, 0xc3, 0xe5, 0x18, 0x65, 0xd3, 0xf6, 0xed, 0x46, 0x7d, 0x5e, 0x24,
    0x76, 0x96, 0x03, 0xaf, 0x74, 0x9a, 0x01, 0xa5, 0xf6, 0x72, 0x38, 0x2d, 0xe2, 0xcc, 0x90,
    0x3a, 0xe2, 0x2d, 0xea, 0xa1, 0xaf, 0x3d, 0xd9, 0x8c, 0x7b, 0x8d, 0xd2, 0x57, 0x30, 0xb4,
    0xc6, 0xab, 0xc2, 0xd6, 0xd6, 0xae, 0x57, 0x92, 0xdb, 0x1d, 0x27, 0xa3, 0xd1, 0xa2, 0xcb,
    0x31, 0x1e, 0xa8, 0x13, 0x52, 0xf4, 0x9f, 0x15, 0xa4, 0x00, 0x54, 0x17, 0x43, 0x19, 0x53,
    0xcd, 0x46, 0xd6, 0x37, 0xfc, 0x5c, 0x45, 0xb8, 0x61, 0x99, 0xe0, 0x94, 0x36, 0x3f, 0xf4,
    0xc9, 0xe7, 0x45, 0x34, 0x8a, 0xb3, 0xab, 0x39, 0x2a, 0xf2, 0x57, 0x11, 0x80, 0x49, 0xf9,
    0x77, 0x8e, 0x23, 0xa0, 0x86, 0x4b, 0x24, 0x50, 0x55, 0x85, 0xfd, 0x7d, 0xf4, 0x14, 0x44,
    0x22, 0x4f, 0x04, 0x06, 0x68, 0x90, 0xc5, 0x2b, 0xf4, 0x03, 0x98, 0x5c, 0xf1, 0xb2, 0x48,
    0xc1, 0x25, 0x6e, 0xb8, 0x14, 0xb0, 0xaf, 0x2e, 0x5b, 0xbb, 0xac, 0xe1, 0x22, 0x63, 0xdd,
    0x96, 0x52, 0xb0, 0x65, 0xf2, 0x3f, 0xbb, 0xb4, 0x30, 0xc7, 0xd5, 0xdb, 0x0d, 0x53, 0xb2,
    0x8c, 0x63, 0x63, 0xb0, 0x20, 0x2e, 0x19, 0xa3, 0x4b, 0x7b, 0x9d, 0x22, 0xaf, 0xdc, 0x99,
    0x47, 0xa3, 0x75, 0x2c, 0xe6, 0xc1, 0xff, 0x57, 0xad, 0x70, 0xb4, 0xf4, 0x7f, 0xc0, 0x6a,
    0x52, 0xf4, 0x3a, 0x7e, 0x3c, 0xfd, 0x5f, 0xb3, 0xf9, 0xbc, 0xb9, 0xdd, 0x28, 0xeb, 0xff,
    0xb6, 0x9f, 0xf4, 0x7f, 0x8f, 0xf1, 0x28, 0xfd, 0x1f, 0x86, 0xd9, 0x7f, 0x33, 0xcd, 0xc7,
    0xb2, 0xa4, 0x39, 0xa6, 0x18, 0xe0, 0xb5, 0xa8, 0xf3, 0x3a, 0x9f, 0xf7, 0x46, 0x98, 0x5d,
    0x50, 0xe8, 0xd4, 0xa2, 0xe3, 0x05, 0x69, 0xf0, 0x79, 0x2f, 0xa9, 0x45, 0x2c, 0x54, 0x47,
    0xf9, 0x77, 0x69, 0x8f, 0x7f, 0xd4, 0x22, 0xfe, 0xf8, 0x03, 0xd0, 0xf8, 0x29, 0x6c, 0x21,
    0xe8, 0xbe, 0x10, 0xea, 0xc5, 0x65, 0x3a, 0x45, 0x85, 0x57, 0x48, 0xff, 0x14, 0x92, 0xe8,
    0xf4, 0x49, 0x28, 0x9b, 0xa8, 0x1b, 0x9a, 0x6d, 0x0d, 0xfa, 0x2f, 0x88, 0x2f, 0xdd, 0xc3,
    0x88, 0xe0, 0x37, 0x28, 0xee, 0xec, 0x3d, 0x24, 0x32, 0x82, 0xb5, 0x85, 0xe9, 0xef, 0x0a,
    0x4d, 0xc0, 0x1b, 0xce, 0xf1, 0x8f, 0x1f, 0x8f, 0x4e, 0xde, 0x1f, 0x7f, 0xfc, 0xd0, 0x7e,
    0xfe, 0x48, 0xcb, 0x7e, 0x7e, 0x3c, 0x7d, 0x7f, 0x6e, 0x7f, 0x68, 0x36, 0xc4, 0xa7, 0x8b,
    0x3a, 0xdd, 0x8f, 0xf0, 0xdf, 0xdb, 0xf3, 0xa3, 0xf6, 0x05, 0x7d, 0x68, 0x96, 0x8f, 0x05,
    0x8e, 0xc5, 0x52, 0x46, 0x63, 0x6d, 0x28, 0xbe, 0xd6, 0xfe, 0x7a, 0x8d, 0x01, 0x1d, 0xe0,
    0x83, 0x7d, 0xf1, 0xeb, 0x10, 0x7f, 0x1d, 0xd6, 0xd7, 0x42, 0x47, 0x0c, 0x82, 0x79, 0x9d,
    0x93, 0x24, 0x2b, 0x94, 0x88, 0x5d, 0x44, 0x16, 0x65, 0x4d, 0x21, 0xb7, 0xf6, 0x2e, 0xbd,
    0xb0, 0x28, 0x9e, 0x37, 0xba, 0xfd, 0x57, 0xe5, 0xe2, 0x98, 0x10, 0xf0, 0x2a, 0x99, 0x9a,
    0xcd, 0xe1, 0xb1, 0x99, 0x03, 0x47, 0xfa, 0x63, 0x08, 0x78, 0x90, 0xe9, 0x25, 0xfc, 0x84,
    0xb5, 0xd0, 0x67, 0x3c, 0x72, 0x0b, 0xc8, 0x7d, 0xb3, 0x75, 0xb1, 0x30, 0xab, 0x65, 0x71,
    0xce, 0x56, 0x9d, 0xd8, 0xe9, 0x82, 0x2c, 0x6a, 0x0b, 0xbe, 0x37, 0xca, 0xb4, 0x50, 0x08,
    0x08, 0x45, 0x85, 0x20, 0x8c, 0x24, 0xba, 0xa9, 0x0a, 0x91, 0xa9, 0xf3, 0x48, 0xa0, 0x4b,
    0x59, 0xb5, 0x90, 0x07, 0x7e, 0x2e, 0xe3, 0xc3, 0x54, 0x69, 0xc5, 0x44, 0x2f, 0xd5, 0x89,
    0x5d, 0xc4, 0xd3, 0xd1, 0xe0, 0xfc, 0x90, 0x2d, 0x14, 0x07, 0xe6, 0x99, 0x71, 0x84, 0xab,
    0x94, 0xc6, 0xd3, 0x53, 0x46, 0xb0, 0xb6, 0xe2, 0xf5, 0x86, 0x3d, 0x8c, 0xbc, 0x91, 0x3b,
    0xf0, 0xcb, 0xb3, 0x00, 0x9f, 0x50, 0x94, 0x4b, 0x88, 0x26, 0xc4, 0xf1, 0x60, 0xb7, 0xc0,
    0x9d, 0xd3, 0x02, 0xbf, 0x34, 0x5b, 0x30, 0x19, 0xc0, 0xa2, 0x5c, 0xc2, 0xe6, 0xcf, 0xed,
    0x70, 0x7e, 0x1c, 0xf8, 0xf8, 0xca, 0x84, 0xfe, 0x1a, 0x7e, 0x6b, 0xd8, 0xd6, 0x57, 0x01,
    0x4b, 0x38, 0x70, 0xff, 0x59, 0x08, 0x06, 0x55, 0xc3, 0xc5, 0x57, 0x26, 0x5c, 0xbe, 0x1a,
    0xc8, 0xd6, 0x77, 0x01, 0x99, 0xcb, 0x38, 0xb0, 0xe1, 0x7a, 0xea, 0x80, 0x86, 0x37, 0x26,
    0xe3, 0x92, 0x79, 0x93, 0x2c, 0x8c, 0x5b, 0xa6, 0xda, 0x18, 0xad, 0x7b, 0x66, 0xe1, 0x40,
    0x6d, 0xaf, 0x0c, 0xc5, 0x41, 0x8f, 0x12, 0xb9, 0x3a, 0x08, 0xd2, 0xbb, 0x32, 0x51, 0xc8,
    0x69, 0x51, 0x2a, 0x62, 0x51, 0xc5, 0x7f, 0xff, 0x43, 0x34, 0x11, 0x67, 0xaa, 0xc4, 0x1e,
    0x50, 0x6f, 0xdb, 0x66, 0x65, 0xfa, 0x24, 0x41, 0xc3, 0x9f, 0xc7, 0xba, 0x6f, 0x15, 0xbd,
    0xe0, 0xc4, 0xa8, 0x08, 0xff, 0x7c, 0x5d, 0x53, 0xbc, 0xb0, 0xbe, 0x3a, 0xed, 0x8a, 0xb7,
    0x6d, 0xf1, 0x73, 0xb5, 0xf6, 0x2d, 0xf0, 0x0a, 0x07, 0xe3, 0x92, 0x25, 0xcb, 0xc2, 0xdd,
    0xdc, 0xab, 0x7f, 0xd1, 0x53, 0x61, 0xdc, 0xbd, 0x8c, 0xaa, 0x0e, 0x7a, 0xf4, 0xf3, 0xaf,
    0xf2, 0x49, 0x20, 0xdf, 0x1a, 0xc5, 0x57, 0x43, 0xd4, 0x6c, 0x53, 0x21, 0x62, 0xe9, 0x54,
    0x1f, 0xe9, 0x96, 0x87, 0xfb, 0xaf, 0x14, 0x17, 0xb8, 0x7b, 0xb8, 0xa4, 0x99, 0x44, 0x96,
    0xc4, 0xc3, 0xf0, 0xca, 0xa4, 0x98, 0xf2, 0x76, 0x5e, 0xb8, 0xa5, 0x04, 0xd1, 0x98, 0x25,
    0xfc, 0x00, 0xbd, 0x77, 0x47, 0x2c, 0x20, 0x38, 0x6e, 0x01, 0x49, 0xa3, 0xeb, 0x39, 0x7f,
    0x60, 0x4e, 0xe7, 0xa4, 0x50, 0x37, 0x29, 0xb1, 0x93, 0xad, 0xa7, 0xd9, 0x84, 0xde, 0xa9,
    0x7c, 0xe0, 0x0c, 0xfc, 0xbe, 0x7b, 0x4a, 0xcb, 0xfb, 0x1d, 0x3b, 0x9a, 0x5e, 0xe4, 0x27,
    0xfc, 0x52, 0xde, 0x8a, 0x90, 0xfd, 0x16, 0xdf, 0xb0, 0x95, 0x40, 0xf1, 0x43, 0x84, 0x75,
    0x36, 0xa8, 0x92, 0x71, 0xa7, 0x6b, 0x97, 0xae, 0x23, 0x93, 0x03, 0x8f, 0x5c, 0xf8, 0x43,
    0x4d, 0x87, 0x42, 0x4c, 0x20, 0xbc, 0x64, 0x0d, 0xcf, 0x58, 0x94, 0x48, 0xf7, 0x12, 0x8a,
    0x47, 0xe9, 0xea, 0xc9, 0x7e, 0x44, 0xe7, 0x79, 0xae, 0xd2, 0xfe, 0x30, 0x92, 0xe7, 0xc9,
    0xe8, 0x64, 0x87, 0xba, 0x46, 0xd8, 0xee, 0x08, 0x8f, 0x4d, 0xb4, 0xe4, 0x14, 0x22, 0x31,
    0x2f, 0x59, 0xf7, 0x8f, 0x82, 0x39, 0x49, 0xa2, 0x79, 0x9e, 0x4f, 0xad, 0x04, 0xda, 0x08,
    0xae, 0x2a, 0xe1, 0xb3, 0xb2, 0x15, 0xb6, 0x4a, 0x5f, 0x43, 0xb0, 0x78, 0x54, 0x33, 0xc1,
    0x63, 0xd0, 0xf8, 0xaf, 0x3e, 0x8b, 0x27, 0x7b, 0x54, 0xce, 0x39, 0x8e, 0x04, 0x12, 0xf3,
    0x75, 0xd2, 0xbf, 0xc1, 0xc5, 0x5f, 0x1a, 0x91, 0xf7, 0xc2, 0x30, 0xf6, 0x96, 0xe7, 0x86,
    0x49, 0xfb, 0xc2, 0x3a, 0x62, 0x68, 0xe8, 0x6e, 0x84, 0xdc, 0x42, 0x85, 0x55, 0x70, 0x44,
    0xf4, 0x95, 0x18, 0x65, 0xb1, 0x6e, 0xdb, 0xb2, 0xe0, 0x3a, 0x54, 0x69, 0x4a, 0x64, 0x6b,
    0xa0, 0x25, 0xbb, 0x44, 0xbf, 0xb6, 0xf6, 0xc5, 0x11, 0x68, 0xca, 0xad, 0x34, 0x3c, 0xe5,
    0x6b, 0x03, 0xdc, 0xb7, 0x21, 0xee, 0xdf, 0x07, 0xa4, 0x42, 0x11, 0x77, 0x7e, 0x06, 0x8a,
    0xf7, 0x57, 0x5a, 0x76, 0xb2, 0xf2, 0xa1, 0xe6, 0x02, 0x25, 0x10, 0x57, 0x20, 0x61, 0x76,
    0x55, 0xe9, 0x53, 0x2b, 0x20, 0xa7, 0x30, 0xf0, 0x87, 0x9d, 0x51, 0x05, 0x40, 0x29, 0x6b,
    0x57, 0x1c, 0x57, 0x13, 0xc8, 0x46, 0xb0, 0x5b, 0x6a, 0x98, 0xbf, 0xbc, 0x5f, 0xfb, 0xc6,
    0xe3, 0xa0, 0x6f, 0x75, 0xd2, 0xe4, 0x8d, 0xdc, 0x7e, 0x85, 0xa6, 0xd7, 0x04, 0x69, 0x4f,
    0xa7, 0x67, 0x5a, 0x2f, 0xff, 0x9a, 0x2d, 0x02, 0x68, 0xdf, 0xfa, 0x2e, 0x2e, 0x4e, 0x72,
    0x3f, 0xc8, 0x9d, 0x13, 0xd6, 0x78, 0x78, 0x95, 0xd2, 0xcb, 0x0f, 0x37, 0x32, 0x9f, 0xc2,
    0x0e, 0x19, 0x9b, 0x19, 0x28, 0x2b, 0x2e, 0x5d, 0xf9, 0xd7, 0xd0, 0x30, 0xb7, 0x8b, 0x45,
    0xff, 0x90, 0x4e, 0x67, 0xf3, 0x78, 0xc4, 0x87, 0x85, 0x42, 0x00, 0x36, 0x8a, 0x63, 0x3a,
    0x00, 0xb7, 0x31, 0x70, 0xed, 0x7f, 0xb5, 0x4e, 0x58, 0x29, 0x61, 0x82, 0x22, 0xa8, 0x3c,
    0xe4, 0xc5, 0x4b, 0x8a, 0x5f, 0xe4, 0x79, 0x10, 0xa8, 0xb1, 0x0f, 0x7c, 0x3f, 0x67, 0xe5,
    0xa8, 0x88, 0xd6, 0xac, 0xca, 0x6b, 0xd6, 0x3a, 0x67, 0x2c, 0x5b, 0xab, 0x40, 0xa4, 0xeb,
    0xd8, 0x35, 0x18, 0x30, 0xee, 0x8a, 0x6b, 0x0c, 0x01, 0xa3, 0xfb, 0xc0, 0x48, 0xc8, 0xef,
    0x36, 0x48, 0x59, 0xa6, 0x66, 0x85, 0x94, 0x44, 0xa1, 0x93, 0x04, 0x97, 0x66, 0xb7, 0xf9,
    0x0a, 0x50, 0x6f, 0x79, 0xf4, 0x44, 0xd5, 0xba, 0xb2, 0x63, 0x8f, 0xa3, 0xb5, 0x01, 0x5e,
    0x29, 0xcd, 0x1b, 0x62, 0xb6, 0x86, 0x61, 0x02, 0xe7, 0xc2, 0x1e, 0x98, 0xa0, 0x4a, 0x58,
    0xb8, 0x8d, 0x88, 0x48, 0x98, 0x32, 0xa4, 0xaf, 0x4c, 0xcb, 0x37, 0x8b, 0xae, 0x72, 0xf2,
    0xa5, 0x9c, 0x7c, 0xf1, 0x6d, 0x9c, 0x92, 0xe4, 0x20, 0x4a, 0xc7, 0xe3, 0x64, 0x90, 0x02,
    0xb1, 0xd6, 0x0e, 0x89, 0x58, 0x42, 0xe3, 0xc0, 0x33, 0x70, 0x7a, 0xad, 0xa9, 0x42, 0xc5,
    0xd4, 0x5f, 0xf4, 0x47, 0xae, 0xda, 0x88, 0xba, 0x4e, 0xd2, 0x88, 0x44, 0x8c, 0x5e, 0x70,
    0x61, 0x99, 0xcc, 0x4e, 0xf5, 0x9c, 0x2f, 0xdf, 0xed, 0xbb, 0x55, 0x84, 0x95, 0x4c, 0x3b,
    0xe0, 0x4d, 0x9c, 0xc3, 0x0b, 0x59, 0x1b, 0x59, 0xa2, 0xea, 0x52, 0x54, 0x2a, 0xf3, 0xc9,
    0x12, 0xc9, 0x02, 0x44, 0xe1, 0xc1, 0x6e, 0xdd, 0x9a, 0x18, 0xae, 0x67, 0x06, 0x19, 0x5b,
    0x71, 0xd7, 0x89, 0xcb, 0xb6, 0x8a, 0x3d, 0x3c, 0x1f, 0xc0, 0x29, 0x45, 0xc7, 0xe0, 0xe9,
    0xe2, 0xba, 0x74, 0x95, 0x52, 0x52, 0x42, 0xbd, 0xed, 0x03, 0x23, 0x34, 0x4d, 0x93, 0xdb,
    0x53, 0x29, 0x24, 0x85, 0x96, 0x7f, 0xf8, 0x71, 0x90, 0x00, 0xcf, 0xa1, 0xd4, 0xa9, 0x51,
    0x64, 0xac, 0x87, 0x66, 0x57, 0x78, 0x05, 0xaf, 0xba, 0xcd, 0xda, 0x05, 0x7c, 0x97, 0xd9,
    0xc6, 0xfb, 0xd4, 0x2c, 0xe8, 0x1b, 0x94, 0xd3, 0x0a, 0x48, 0xbe, 0xf1, 0x38, 0xad, 0x42,
    0x2e, 0x6f, 0xef, 0x6d, 0x97, 0x2a, 0xee, 0xa6, 0xc0, 0x14, 0xb6, 0x03, 0xea, 0xab, 0x00,
    0x5a, 0x04, 0x7a, 0x36, 0x8a, 0x17, 0x57, 0xd3, 0x1c, 0xf6, 0x73, 0x29, 0xc1, 0xa1, 0xf0,
    0xdd, 0xf9, 0x98, 0x69, 0xa8, 0x0f, 0x9f, 0x96, 0x6e, 0x74, 0x28, 0x4a, 0x06, 0xc2, 0xbb,
    0x2d, 0x60, 0xba, 0xba, 0xbe, 0xc2, 0x66, 0xff, 0xf4, 0x2e, 0xc8, 0x80, 0x61, 0x8f, 0x4a,
    0xad, 0xbe, 0xef, 0x76, 0x7d, 0x75, 0x96, 0xac, 0x61, 0xde, 0x1a, 0x2e, 0xa6, 0xbc, 0x8d,
    0x0c, 0xbf, 0x5d, 0x03, 0x76, 0x1e, 0x38, 0xd7, 0x34, 0x17, 0xdf, 0x79, 0x8c, 0xa7, 0x03,
    0x46, 0xa3, 0xc5, 0x38, 0x9f, 0x4e, 0x60, 0x17, 0x95, 0x92, 0xb9, 0x22, 0x5e, 0x7c, 0x47,
    0x85, 0x23, 0x04, 0xd0, 0x9b, 0x42, 0xc0, 0x6f, 0x02, 0x8d, 0xdb, 0x2f, 0x2b, 0x7f, 0xe7,
    0xdf, 0x23, 0xdc, 0xaa, 0x50, 0x1d, 0xa8, 0x59, 0x7c, 0xc9, 0xe1, 0x93, 0xd9, 0xc9, 0x80,
    0x62, 0x7c, 0x0b, 0xe0, 0xad, 0x18, 0x21, 0x69, 0x17, 0x0b, 0x1d, 0xd3, 0xa9, 0x82, 0xef,
    0x19, 0x42, 0x8b, 0xdf, 0x7b, 0x01, 0xf1, 0x6a, 0x99, 0xe5, 0x58, 0x5a, 0x45, 0x2c, 0x46,
    0xe8, 0x0b, 0x34, 0x62, 0x6a, 0x36, 0x1a, 0xee, 0x80, 0xa7, 0x45, 0x17, 0xf8, 0x0d, 0x55,
    0x61, 0x06, 0xa1, 0x2d, 0x57, 0xa2, 0x39, 0x37, 0xaf, 0x37, 0xf9, 0xb4, 0xa3, 0x94, 0x60,
    0x9b, 0xc0, 0x7c, 0x1c, 0x27, 0x72, 0x5e, 0x10, 0x1b, 0x35, 0x49, 0xaf, 0x3c, 0x05, 0x34,
    0x66, 0x49, 0x87, 0x9e, 0x82, 0xe8, 0xbc, 0x9d, 0x26, 0x09, 0x7a, 0xf7, 0xb7, 0xe7, 0x57,
    0x67, 0x29, 0xc7, 0x9a, 0x63, 0x00, 0xc8, 0xaf, 0xab, 0x12, 0x4c, 0x5b, 0x66, 0xb5, 0xe7,
    0x9e, 0xed, 0x35, 0x0b, 0x69, 0x27, 0xcc, 0x86, 0xc1, 0x5c, 0x22, 0x60, 0xae, 0x25, 0x58,
    0xa1, 0x07, 0x94, 0x0c, 0x98, 0x25, 0xd1, 0xf7, 0x98, 0x28, 0x67, 0xca, 0xfe, 0x86, 0xf4,
    0x19, 0x69, 0x8c, 0xd3, 0x71, 0x4a, 0xd7, 0x66, 0x29, 0xa9, 0x0d, 0x18, 0x45, 0x64, 0x28,
    0x11, 0x65, 0xf7, 0xec, 0x85, 0xea, 0x9c, 0x1e, 0x38, 0xb3, 0x8e, 0x6c, 0x54, 0xb3, 0xbd,
    0xb9, 0x73, 0x11, 0x9f, 0xc7, 0xe4, 0x80, 0x0d, 0xf3, 0x0b, 0x79, 0x81, 0x82, 0xab, 0xe7,
    0x2b, 0xeb, 0x2a, 0x17, 0xcb, 0x16, 0xfb, 0x86, 0x0c, 0xc1, 0x65, 0xc0, 0x52, 0x1d, 0xe0,
    0xd0, 0x33, 0x81, 0x93, 0xbc, 0xd7, 0xec, 0xaf, 0x78, 0xff, 0x0c, 0x93, 0x0a, 0x91, 0x5d,
    0xe4, 0xf7, 0xa8, 0xbc, 0x82, 0xaf, 0xc5, 0xbc, 0x80, 0xd6, 0xc4, 0xd4, 0x3b, 0x33, 0xc8,
    0xf0, 0xaa, 0x84, 0x36, 0x95, 0xe1, 0x25, 0xb5, 0x3e, 0xc4, 0xbf, 0xf7, 0xec, 0x8a, 0xab,
    0xcf, 0xc5, 0x0c, 0xc9, 0xa6, 0x6d, 0x92, 0x52, 0xd4, 0xe7, 0x34, 0x2d, 0x4a, 0x9d, 0x18,
    0xb0, 0x2e, 0xcc, 0x8d, 0xf7, 0x6c, 0x10, 0x1b, 0x5e, 0x2a, 0x31, 0xc9, 0x51, 0x19, 0x4a,
    0xc5, 0x20, 0x83, 0x3a, 0xda, 0x98, 0x98, 0xba, 0xd4, 0x52, 0x51, 0xa3, 0xd3, 0x36, 0xae,
    0xa7, 0x8b, 0x9c, 0x4a, 0x84, 0x51, 0xb4, 0xc6, 0xcd, 0x12, 0xc3, 0xcf, 0xd5, 0xde, 0x23,
    0x27, 0x3e, 0x45, 0x98, 0xdf, 0xdb, 0x4a, 0xed, 0x54, 0x58, 0xbe, 0x74, 0xd3, 0xb2, 0xd8,
    0x84, 0xc6, 0x92, 0xb1, 0x32, 0x2f, 0xf6, 0x03, 0x32, 0x18, 0xee, 0xc7, 0x7b, 0xb4, 0x77,
    0xdb, 0x42, 0x61, 0xba, 0x0a, 0x2c, 0xc1, 0x6c, 0x98, 0xe7, 0x4b, 0x8f, 0xe8, 0xf7, 0x45,
    0xac, 0xd8, 0x3f, 0x38, 0xdc, 0xf6, 0x82, 0x4d, 0x96, 0xcf, 0xa0, 0xca, 0xe2, 0xe2, 0xfc,
    0x67, 0x5c, 0xe4, 0x3b, 0x5d, 0x7e, 0x8d, 0x79, 0xb1, 0x6c, 0x40, 0xdf, 0x5c, 0xde, 0xcf,
    0x57, 0x1e, 0x52, 0x28, 0x2d, 0x96, 0x10, 0x8c, 0x4e, 0xb8, 0x61, 0x35, 0x88, 0xcb, 0x39,
    0x36, 0x72, 0x00, 0xc9, 0x40, 0x9b, 0x7f, 0x78, 0x56, 0x3f, 0x10, 0xd7, 0xff, 0xfe, 0xf4,
    0x7d, 0x03, 0xf7, 0x25, 0xbc, 0x6c, 0xc5, 0x5c, 0x27, 0x42, 0x2d, 0xbf, 0x70, 0xcb, 0x81,
    0x60, 0x83, 0x2f, 0x59, 0xa2, 0x70, 0x5c, 0x8b, 0xea, 0xf5, 0x3a, 0x55, 0xc9, 0x6f, 0xe2,
    0xc9, 0x62, 0xe9, 0x0d, 0xdc, 0x70, 0xd1, 0x0c, 0xe1, 0x0c, 0xad, 0x0a, 0x02, 0xfd, 0x86,
    0x07, 0xf1, 0x74, 0xfd, 0xe3, 0xa4, 0xa9, 0x65, 0x24, 0x1f, 0x27, 0xad, 0x65, 0x66, 0x57,
    0x43, 0xff, 0xb4, 0x1a, 0xbe, 0x85, 0xc2, 0xb7, 0x57, 0x85, 0xb2, 0x00, 0xfa, 0xf1, 0x93,
    0xca, 0xc2, 0x8b, 0x49, 0x21, 0xb0, 0xf6, 0x96, 0x84, 0xbf, 0x7f, 0xd2, 0xba, 0xb5, 0x12,
    0x6d, 0x3a, 0x65, 0xf2, 0xf6, 0x21, 0xc4, 0xee, 0x3c, 0x27, 0x79, 0x0f, 0xcd, 0x71, 0x05,
    0x20, 0x47, 0xa0, 0x94, 0xe4, 0xce, 0x39, 0xa3, 0xb5, 0x61, 0x96, 0xea, 0x26, 0x24, 0x1d,
    0xfc, 0xaf, 0x68, 0x92, 0x79, 0x18, 0xd1, 0x24, 0x32, 0x85, 0x82, 0xca, 0x2d, 0x8c, 0x96,
    0xc5, 0x17, 0xa8, 0xcf, 0x54, 0xa8, 0x93, 0x76, 0xf3, 0x08, 0xa3, 0x0e, 0xd9, 0xb6, 0x6e,
    0x29, 0x97, 0x5f, 0xa8, 0x12, 0xe1, 0x9b, 0x88, 0x08, 0x20, 0xcb, 0xd4, 0xea, 0xa8, 0x3f,
    0x93, 0x22, 0xf4, 0xb3, 0x29, 0x91, 0x85, 0xb2, 0x43, 0xa5, 0x80, 0x9c, 0xb1, 0xfc, 0x83,
    0x5e, 0x12, 0x5c, 0x00, 0x97, 0x8b, 0x46, 0xca, 0x52, 0xe9, 0x2b, 0xe4, 0xbf, 0xbc, 0x8d,
    0xd2, 0xf7, 0xf2, 0xcf, 0x71, 0x41, 0x27, 0xfc, 0x65, 0xd8, 0x5c, 0x15, 0x48, 0x88, 0x21,
    0x01, 0x52, 0x9a, 0xac, 0x32, 0x2e, 0x74, 0x0e, 0x46, 0x1c, 0xca, 0x80, 0xfe, 0x4c, 0x04,
    0x2d, 0x94, 0xc4, 0xa4, 0x1f, 0x13, 0x52, 0x0d, 0x85, 0xc7, 0x3a, 0x8b, 0x2e, 0xf0, 0xfb,
    0xb7, 0x74, 0x89, 0x7c, 0xd0, 0x2d, 0x4c, 0xe0, 0x20, 0x42, 0xe1, 0x88, 0x44, 0x86, 0xdc,
    0x80, 0xef, 0xdd, 0x70, 0x6d, 0x78, 0x88, 0x75, 0x28, 0x84, 0x2f, 0x57, 0x22, 0xaf, 0x2b,
    0x8c, 0x50, 0x82, 0x0f, 0x64, 0xc2, 0x35, 0x42, 0xc1, 0x31, 0xdc, 0xe4, 0x31, 0x90, 0xa7,
    0x24, 0x6c, 0xe8, 0x38, 0x03, 0x36, 0x3a, 0xae, 0xff, 0x5c, 0x3a, 0xa7, 0x1d, 0x12, 0x15,
    0x43, 0x93, 0xca, 0x82, 0xa3, 0xf2, 0x06, 0xcc, 0xef, 0xf7, 0x1c, 0xd2, 0x90, 0xba, 0x43,
    0x29, 0x06, 0x9c, 0x11, 0x62, 0xfa, 0xfb, 0xa0, 0xd6, 0x25, 0x6b, 0x83, 0xd2, 0x11, 0x61,
    0xd5, 0x65, 0x8c, 0x7c, 0xf2, 0x00, 0x53, 0x66, 0x47, 0x49, 0x58, 0x88, 0xca, 0x84, 0x35,
    0x77, 0xc1, 0x99, 0x23, 0x32, 0x3d, 0x26, 0x47, 0x0c, 0x61, 0x83, 0x4c, 0x0e, 0x1b, 0x30,
    0x38, 0xa9, 0x39, 0xde, 0xf6, 0xf8, 0xb2, 0x48, 0xb6, 0x85, 0xe6, 0x3e, 0xc5, 0x30, 0xf9,
    0x29, 0xb1, 0x01, 0x10, 0x81, 0x2d, 0x16, 0xcf, 0x26, 0x2d, 0x63, 0x0a, 0x98, 0x99, 0x95,
    0xf6, 0xf3, 0xdd, 0xd2, 0x3a, 0x43, 0x0e, 0xd4, 0x1b, 0x8a, 0x36, 0xb1, 0x46, 0x78, 0xae,
    0xa0, 0x92, 0xcc, 0x3a, 0x46, 0xca, 0x1b, 0x43, 0x67, 0x80, 0x2f, 0xe1, 0x98, 0x1d, 0xb0,
    0x36, 0xfb, 0xf1, 0xa4, 0xa8, 0x06, 0x7d, 0xd0, 0x3e, 0x47, 0xc3, 0x95, 0xd6, 0xd6, 0x76,
    0x5c, 0xbc, 0xba, 0x2a, 0xb8, 0x7d, 0x18, 0x84, 0xd1, 0x61, 0x5c, 0x24, 0xd5, 0x80, 0x7f,
    0x73, 0xd8, 0xbd, 0x2d, 0x76, 0xda, 0x1c, 0xbe, 0x7f, 0x38, 0x92, 0x65, 0x7b, 0x13, 0x13,
    0x3e, 0xca, 0x1c, 0x1a, 0xfb, 0x2b, 0x0c, 0xe5, 0x15, 0x5d, 0xc6, 0xbc, 0x48, 0x21, 0x53,
    0x41, 0x31, 0x3f, 0x47, 0xf4, 0xe8, 0x02, 0x2d, 0xc3, 0x2c, 0xc2, 0x30, 0x0b, 0x13, 0x26,
    0xaa, 0x82, 0x2a, 0x28, 0x55, 0x14, 0x83, 0x9b, 0x13, 0x8d, 0x23, 0x7f, 0x74, 0x24, 0x8b,
    0x90, 0x51, 0xc1, 0x53, 0x3c, 0x22, 0x1c, 0xde, 0x39, 0x74, 0x4b, 0x8e, 0x6f, 0xe3, 0xf3,
    0x48, 0xa6, 0xc0, 0xd3, 0xfe, 0x90, 0x4f, 0x95, 0xcc, 0x53, 0x9a, 0x41, 0xda, 0x07, 0x04,
    0x16, 0xa7, 0xce, 0x3b, 0x71, 0x7e, 0x3a, 0x2f, 0x01, 0xa1, 0x1b, 0xe7, 0xd5, 0x62, 0x96,
    0x6f, 0xfa, 0x71, 0x51, 0x7a, 0x33, 0xeb, 0x5f, 0x3b, 0xaf, 0xae, 0x63, 0xe7, 0x94, 0x22,
    0x9d, 0x57, 0xd8, 0xeb, 0xd2, 0x2b, 0xb8, 0x50, 0xcf, 0x9d, 0x06, 0x84, 0x6b, 0x8e, 0xf3,
    0x86, 0xc8, 0x7d, 0x67, 0xff, 0x4e, 0x46, 0x2e, 0xae, 0x89, 0x30, 0x73, 0x32, 0xde, 0x30,
    0x6c, 0xbf, 0x1c, 0xc6, 0xa5, 0x9a, 0xc3, 0x34, 0xe3, 0x3b, 0x81, 0xf3, 0x8a, 0x65, 0x10,
    0xcb, 0x51, 0x1e, 0x3b, 0xa8, 0x0e, 0xdd, 0x23, 0xfb, 0x2a, 0x9f, 0x39, 0x98, 0xa6, 0x43,
    0xb7, 0x12, 0x82, 0x95, 0xde, 0xe7, 0xee, 0x5c, 0x4a, 0x62, 0xcc, 0x5d, 0x18, 0x59, 0xa9,
    0xe0, 0x8d, 0xec, 0xd7, 0xa3, 0x3c, 0x73, 0xcc, 0xe7, 0x33, 0xe2, 0xef, 0x9c, 0x77, 0xc9,
    0xf3, 0x62, 0x3e, 0x72, 0xc6, 0x43, 0x18, 0xa4, 0x7a, 0xd9, 0x13, 0xf7, 0xa5, 0xb0, 0xdc,
    0x5e, 0x53, 0xb8, 0x6b, 0xfb, 0x1d, 0x9f, 0xda, 0xf6, 0xbb, 0xe2, 0xba, 0x34, 0x08, 0xbc,
    0xdc, 0x77, 0xd3, 0xb4, 0x3f, 0x1b, 0x4e, 0x9c, 0xb7, 0xf3, 0x49, 0xe2, 0xcc, 0x47, 0x01,
    0xb4, 0x4b, 0xc2, 0x28, 0xfc, 0x04, 0x7e, 0x0a, 0x03, 0xeb, 0x3a, 0x58, 0xa2, 0xd5, 0xaf,
    0x06, 0x18, 0x2f, 0xcf, 0x2b, 0xb7, 0xd8, 0x34, 0x86, 0x3b, 0x45, 0xe2, 0x4e, 0x0b, 0x1c,
    0x89, 0xfb, 0xc6, 0x21, 0x2a, 0xfc, 0xcb, 0x7d, 0x83, 0x29, 0xcf, 0xdc, 0x05, 0x70, 0x77,
    0x8e, 0x92, 0xe5, 0xb2, 0x4f, 0xb2, 0xa0, 0xf7, 0x6e, 0x20, 0x99, 0xd3, 0x4c, 0x5c, 0xb8,
    0xcb, 0x7b, 0x49, 0x2c, 0x55, 0x1f, 0xc6, 0x2b, 0x8c, 0x9a, 0xb4, 0x74, 0x73, 0xf1, 0xef,
    0xfe, 0x0d, 0xc0, 0x7d, 0xe1, 0x90, 0x5e, 0x32, 0x72, 0x57, 0x90, 0x67, 0xed, 0x53, 0x6a,
    0x55, 0x96, 0xb0, 0xbb, 0x5e, 0x51, 0x56, 0xe2, 0xac, 0xe0, 0x51, 0xde, 0x73, 0xb7, 0x03,
    0x1a, 0xf6, 0xac, 0x55, 0xe7, 0xb7, 0xd3, 0xff, 0x51, 0x3c, 0xee, 0x0d, 0x62, 0x67, 0xa1,
    0x19, 0x91, 0xf7, 0xdd, 0xd6, 0xe0, 0x5a, 0x66, 0xbf, 0x28, 0xdd, 0x0b, 0x4a, 0x83, 0x3b,
    0x53, 0x77, 0x4c, 0x7c, 0xab, 0xab, 0x44, 0x7d, 0x44, 0x55, 0xce, 0x2b, 0xb8, 0x78, 0xda,
    0x16, 0x69, 0x32, 0x32, 0x88, 0xa7, 0x42, 0x2b, 0xcd, 0xe4, 0xd7, 0x4d, 0x46, 0x43, 0x4b,
    0x4d, 0x5a, 0x6a, 0xbc, 0x85, 0x1b, 0x5f, 0x18, 0x45, 0x71, 0x4a, 0x16, 0xf0, 0xde, 0x66,
    0x04, 0xc5, 0x28, 0xc6, 0xd1, 0x2c, 0xb1, 0xa1, 0x8b, 0x8c, 0x85, 0x43, 0x00, 0x7d, 0x55,
    0xcd, 0x90, 0x7e, 0xdb, 0xc2, 0xe3, 0xef, 0x77, 0xf1, 0xf4, 0xca, 0x87, 0x0c, 0xf9, 0xd4,
    0x02, 0x22, 0x2c, 0xed, 0xc7, 0xca, 0x5b, 0x74, 0xc3, 0x6c, 0xd8, 0x70, 0xf4, 0xb0, 0x0a,
    0x36, 0x0a, 0x2e, 0x0c, 0x5b, 0xa6, 0xe1, 0xc0, 0x59, 0x65, 0x2c, 0x3c, 0x97, 0xe9, 0xf7,
    0x4d, 0x9d, 0x47, 0xe6, 0x33, 0xcc, 0x73, 0xd3, 0x56, 0xc1, 0x6b, 0x23, 0xd1, 0x43, 0xa6,
    0x19, 0xde, 0xfe, 0x52, 0x2e, 0x1d, 0x16, 0x3d, 0x1d, 0xcc, 0xb3, 0xc1, 0x28, 0x19, 0xbc,
    0xf9, 0x43, 0xa4, 0x63, 0x8d, 0x8a, 0xb5, 0x40, 0x72, 0x60, 0xad, 0x98, 0x41, 0x35, 0x8c,
    0x19, 0x67, 0x18, 0xf9, 0xd0, 0x3d, 0x95, 0x42, 0xe6, 0x8d, 0xc9, 0x44, 0x9e, 0xd9, 0x5b,
    0xbd, 0x11, 0xd6, 0xd3, 0x20, 0x51, 0xa9, 0xa5, 0x65, 0x0c, 0xbd, 0x2a, 0x25, 0x0c, 0x94,
    0x8a, 0xe2, 0xef, 0x44, 0xc4, 0xbd, 0x9f, 0x5d, 0x66, 0x15, 0x05, 0x53, 0x28, 0xbf, 0xa4,
    0x8b, 0xfe, 0x20, 0x9c, 0x33, 0x9c, 0x82, 0xba, 0xaf, 0xcb, 0x9f, 0xf5, 0xd9, 0xa7, 0xd9,
    0xef, 0xa2, 0x78, 0xe0, 0xe4, 0xf3, 0x62, 0xb4, 0xd0, 0x17, 0x4e, 0x29, 0x04, 0x5d, 0x23,
    0x54, 0x4d, 0x01, 0xf9, 0xda, 0xb6, 0x50, 0x18, 0x16, 0xe7, 0x24, 0x22, 0x1e, 0x59, 0xba,
    0x1e, 0xe3, 0xb2, 0x91, 0x02, 0x6a, 0xe9, 0x54, 0x62, 0x70, 0xb8, 0x1a, 0xe9, 0xda, 0x2b,
    0x1c, 0x75, 0x7f, 0x3c, 0x39, 0x0c, 0x36, 0xdf, 0x15, 0x87, 0x41, 0xe0, 0x26, 0x64, 0x8a,
    0xa5, 0x47, 0x5f, 0x5e, 0xd4, 0x27, 0x70, 0x9a, 0xa1, 0x47, 0xe8, 0xfa, 0x86, 0x48, 0x9c,
    0x62, 0xf2, 0xbc, 0x58, 0xe3, 0x69, 0xe1, 0xf9, 0x2a, 0xfb, 0xec, 0xe5, 0xc5, 0x99, 0xaa,
    0x6c, 0x11, 0x45, 0x97, 0x04, 0xa6, 0xfe, 0x4f, 0xe8, 0x4c, 0x7f, 0xba, 0x98, 0xcc, 0xf2,
    0x01, 0x12, 0xa9, 0x43, 0x3a, 0x18, 0xc0, 0xec, 0x5f, 0xc7, 0xad, 0xe7, 0x3b, 0xac, 0x25,
    0x60, 0x9e, 0xd1, 0xd8, 0x89, 0x5b, 0x83, 0xb8, 0xd5, 0x78, 0xb9, 0xbd, 0xf5, 0x72, 0xab,
    0xbc, 0x7c, 0xb1, 0xb5, 0x3d, 0xec, 0x37, 0x5b, 0xfd, 0x61, 0xf2, 0xbc, 0xd7, 0xdb, 0xde,
    0xf5, 0x06, 0x2f, 0xe3, 0x64, 0x7b, 0x6b, 0xfb, 0xc5, 0xcb, 0x78, 0xab, 0xb1, 0xdb, 0xda,
    0xb9, 0xd3, 0xea, 0x3d, 0xdf, 0xdd, 0x19, 0x6e, 0x27, 0x5b, 0x2f, 0x5f, 0x6e, 0x25, 0xcf,
    0x8e, 0x61, 0x09, 0xa1, 0xd3, 0xa5, 0x86, 0x6d, 0xad, 0xa5, 0xa0, 0x65, 0xa6, 0x79, 0x8e,
    0x44, 0xb2, 0x6f, 0x1a, 0x1e, 0xdb, 0xd3, 0x01, 0xbd, 0x21, 0x62, 0x56, 0x3e, 0x92, 0xe8,
    0x04, 0x66, 0xc7, 0x42, 0x7f, 0x6e, 0xb6, 0x5e, 0x84, 0x69, 0x18, 0x86, 0x06, 0x7d, 0x82,
    0x0b, 0x1e, 0xa5, 0x3e, 0x45, 0xb8, 0x75, 0xfc, 0xe0, 0x97, 0xad, 0xa1, 0xb7, 0x51, 0x7f,
    0xdf, 0x4f, 0x87, 0x54, 0x5d, 0xca, 0x9a, 0x55, 0x3d, 0x33, 0xa0, 0x80, 0xda, 0x03, 0xae,
    0xd4, 0xcc, 0xca, 0x1f, 0xd5, 0xc3, 0x6e, 0x92, 0x38, 0x28, 0x6f, 0x55, 0xa0, 0x7c, 0x2e,
    0xaa, 0xb6, 0xd3, 0xcb, 0x99, 0x08, 0x6a, 0xfb, 0xb3, 0x38, 0xc0, 0x71, 0x3b, 0xf2, 0xb9,
    0x48, 0x8e, 0x17, 0x68, 0x95, 0x0d, 0x84, 0x7c, 0x85, 0xca, 0x06, 0x5c, 0x45, 0x7c, 0x9b,
    0x05, 0x21, 0x99, 0xf0, 0x55, 0x32, 0x4e, 0x3e, 0xd1, 0x31, 0xab, 0x53, 0xad, 0xc6, 0x0b,
    0x8e, 0x57, 0x43, 0x88, 0x27, 0x28, 0x59, 0x46, 0xaa, 0x83, 0xb1, 0x3a, 0x0c, 0x91, 0xaa,
    0xc9, 0x4e, 0xe4, 0x4b, 0x54, 0x23, 0xb8, 0xfa, 0x51, 0x3d, 0x49, 0xb4, 0x6e, 0x7d, 0x47,
    0x25, 0xf0, 0x77, 0xb6, 0xfc, 0xd5, 0x1a, 0xee, 0x08, 0x47, 0x8f, 0x43, 0x11, 0x27, 0xd0,
    0xc7, 0x51, 0x66, 0xa1, 0x1b, 0x85, 0x5d, 0x7f, 0xbf, 0xfa, 0xb8, 0xba, 0x1f, 0x9a, 0xbe,
    0x6d, 0xee, 0x3e, 0xb7, 0xc7, 0x16, 0x4e, 0xdc, 0x4f, 0x94, 0x63, 0x0a, 0xb5, 0x48, 0xbd,
    0x3a, 0xc2, 0x5c, 0xbf, 0x1b, 0x32, 0xa5, 0x1c, 0x6c, 0x64, 0xe8, 0x39, 0xe2, 0xcb, 0x99,
    0x13, 0xc2, 0x07, 0x64, 0x11, 0x08, 0xf4, 0x67, 0x1d, 0xad, 0x52, 0x1f, 0xc4, 0xe2, 0x1f,
    0xa8, 0x69, 0x2d, 0x25, 0x36, 0x1a, 0x34, 0xec, 0x13, 0x5b, 0xfb, 0xab, 0x5a, 0x8d, 0xb8,
    0xa5, 0x4b, 0xe4, 0x7b, 0xc0, 0x13, 0x93, 0xb7, 0xb4, 0x71, 0xb9, 0x16, 0x0c, 0x88, 0xfc,
    0xaa, 0x3b, 0x02, 0xf8, 0x6f, 0x48, 0x56, 0x15, 0x9b, 0xc3, 0x72, 0xf9, 0x7c, 0x26, 0x8b,
    0xdc, 0xac, 0x2c, 0x52, 0xfe, 0x1e, 0x58, 0x06, 0xad, 0xc6, 0x57, 0x66, 0xd8, 0x2c, 0x23,
    0xc6, 0xb2, 0x11, 0xef, 0xe8, 0x68, 0x47, 0x07, 0x0b, 0x09, 0xc0, 0x34, 0xc9, 0xb6, 0x78,
    0x5c, 0x9e, 0xaa, 0x6a, 0xc5, 0x8d, 0x28, 0xe0, 0x8f, 0x4a, 0x70, 0x8d, 0x7d, 0xb1, 0x1c,
    0x49, 0xbe, 0x29, 0x1b, 0x27, 0xdd, 0xab, 0x0d, 0xb5, 0x71, 0x96, 0x5b, 0x36, 0x0d, 0x61,
    0x1f, 0x05, 0xb8, 0x2d, 0xc8, 0xd7, 0x7e, 0xd3, 0x37, 0x85, 0x4d, 0x6c, 0x17, 0xab, 0x90,
    0xe2, 0x59, 0x5b, 0x1a, 0xd4, 0x15, 0x8c, 0x6c, 0x2c, 0xfc, 0xf8, 0xe4, 0xd7, 0xa1, 0xe1,
    0x5f, 0xde, 0x36, 0x24, 0x56, 0x56, 0xe9, 0x57, 0x46, 0x21, 0xab, 0xc9, 0x55, 0x86, 0x42,
    0xcd, 0xf4, 0x25, 0x3f, 0x22, 0xfe, 0x96, 0x77, 0x84, 0x3b, 0xe6, 0xfe, 0xc3, 0xee, 0x78,
    0x43, 0x0d, 0x91, 0x65, 0x99, 0x62, 0x72, 0xa0, 0x4b, 0xc7, 0x41, 0x5d, 0x29, 0x7c, 0x90,
    0x67, 0xf1, 0xb1, 0x59, 0x64, 0xcf, 0xdf, 0x78, 0x85, 0x25, 0xd5, 0x49, 0xae, 0xec, 0x27,
    0x78, 0x87, 0x70, 0x9d, 0xdc, 0xc4, 0xbf, 0xc7, 0x86, 0x3a, 0xc0, 0xf9, 0x24, 0x31, 0xb2,
    0x72, 0x79, 0xe5, 0x02, 0x62, 0x3b, 0x3e, 0x58, 0xd5, 0xbc, 0x65, 0xfa, 0xd7, 0x71, 0x76,
    0x51, 0xb2, 0x4b, 0x66, 0xc9, 0xdd, 0x07, 0xaf, 0xdd, 0x9e, 0xda, 0x42, 0x98, 0xbe, 0x89,
    0x37, 0x16, 0x45, 0x6a, 0xee, 0xf7, 0xf2, 0x62, 0x82, 0xa9, 0xd2, 0xc6, 0x28, 0x0a, 0xc2,
    0x3d, 0xeb, 0x27, 0x39, 0x06, 0x7d, 0xec, 0x73, 0x64, 0xac, 0x08, 0xed, 0x22, 0xa7, 0x4c,
    0x6c, 0xda, 0x87, 0x67, 0x83, 0xb6, 0x6c, 0xc5, 0xb8, 0x12, 0x79, 0x97, 0xeb, 0x6f, 0x60,
    0x40, 0xfc, 0x08, 0x0b, 0x90, 0x39, 0x08, 0xf7, 0xba, 0x1f, 0x4c, 0x2d, 0x04, 0x02, 0xc6,
    0xde, 0xbd, 0xb3, 0xe9, 0xa4, 0xe4, 0x0a, 0xba, 0xe4, 0xa0, 0xb4, 0x2d, 0x73, 0xab, 0xd4,
    0xa8, 0xc4, 0x84, 0x1f, 0x85, 0xe7, 0x1c, 0xa1, 0x18, 0xc5, 0x78, 0x18, 0x5d, 0x5d, 0x3b,
    0x88, 0xa3, 0x6b, 0xcc, 0x67, 0x66, 0xc4, 0x42, 0x00, 0x84, 0x31, 0xd4, 0x14, 0xea, 0xa1,
    0x69, 0xf1, 0x3f, 0xf3, 0x78, 0x94, 0x0e, 0x53, 0x19, 0x91, 0xb1, 0x97, 0x30, 0x39, 0xc8,
    0x89, 0x08, 0xbb, 0x97, 0xf4, 0x63, 0x0e, 0xaf, 0x04, 0x50, 0xaf, 0xe1, 0xba, 0x38, 0x53,
    0x59, 0x66, 0x42, 0x42, 0x22, 0x40, 0xa1, 0x11, 0x57, 0xf5, 0x43, 0x31, 0x81, 0xd5, 0x08,
    0x40, 0xb5, 0x2e, 0xe5, 0x89, 0x86, 0xc5, 0x79, 0x90, 0xb4, 0x81, 0xff, 0x8d, 0xf1, 0x12,
    0xb0, 0xcf, 0x08, 0x0c, 0x16, 0x69, 0x06, 0x3f, 0xb8, 0xdb, 0x8d, 0x18, 0x1b, 0x3e, 0x5b,
    0x6c, 0xef, 0x69, 0x1e, 0xa7, 0x9f, 0x5f, 0x51, 0x52, 0x30, 0xce, 0x9d, 0x1b, 0x8b, 0xa0,
    0x0e, 0xc7, 0x13, 0xa6, 0x7f, 0xda, 0x49, 0xce, 0x25, 0x14, 0x74, 0x19, 0x29, 0x54, 0xf2,
    0xb1, 0x51, 0xf1, 0xb1, 0xf1, 0x51, 0x66, 0x5d, 0x83, 0x32, 0x74, 0x11, 0xaf, 0x45, 0x1f,
    0x46, 0x5a, 0xc6, 0x3b, 0xa6, 0xc5, 0xfd, 0xf0, 0x62, 0x17, 0x7d, 0x69, 0xd5, 0x22, 0x23,
    0xed, 0x1e, 0x89, 0x9b, 0x65, 0xba, 0xed, 0x5e, 0xc2, 0x29, 0x73, 0x39, 0xed, 0x9b, 0x91,
    0xb7, 0xca, 0x66, 0x72, 0x34, 0xe2, 0x49, 0x38, 0x48, 0x2e, 0xb8, 0x6e, 0xbb, 0x78, 0x2f,
    0x4a, 0x06, 0x96, 0x36, 0x29, 0xb4, 0xff, 0x57, 0x5f, 0x2a, 0xbc, 0x3a, 0xcc, 0x55, 0xf0,
    0x74, 0x8e, 0x06, 0xa7, 0x97, 0x6b, 0xbb, 0x32, 0xf4, 0xae, 0x31, 0x8f, 0x33, 0x05, 0x9b,
    0x13, 0x8e, 0xff, 0x8d, 0xa7, 0x5c, 0x87, 0x9c, 0xc2, 0xda, 0x19, 0x9f, 0x01, 0xe8, 0x29,
    0x87, 0x93, 0xa1, 0xba, 0x47, 0x48, 0x64, 0xb6, 0xc0, 0x98, 0x84, 0x20, 0x72, 0xe7, 0xed,
    0x92, 0x1e, 0x99, 0x9d, 0xa6, 0xe2, 0xe5, 0x8d, 0xb8, 0x74, 0x8a, 0x4b, 0x53, 0xd6, 0x30,
    0x51, 0x99, 0xea, 0x19, 0xce, 0x30, 0xd3, 0x78, 0x81, 0x14, 0x7f, 0x71, 0x3d, 0x4d, 0x92,
    0xb1, 0x79, 0xc2, 0xfe, 0xa3, 0xaa, 0xb5, 0x8b, 0x2e, 0x50, 0x60, 0xa6, 0x58, 0x53, 0xe5,
    0x1a, 0x3c, 0xfe, 0xb2, 0x19, 0x06, 0xdd, 0x1a, 0xc5, 0x29, 0x9c, 0xf9, 0xc0, 0xb6, 0x4a,
    0x76, 0x1b, 0x15, 0xfe, 0x0e, 0xfd, 0x6a, 0x22, 0x1d, 0xc8, 0x62, 0xeb, 0xc6, 0xac, 0xc9,
    0xac, 0xd7, 0xeb, 0x33, 0xda, 0x92, 0x0c, 0xbf, 0xda, 0xe0, 0x0a, 0x7c, 0xf9, 0x62, 0x0f,
    0xf4, 0x4e, 0xaa, 0xac, 0x0c, 0x17, 0x38, 0x91, 0xb9, 0x6f, 0x90, 0xf7, 0xe7, 0x2a, 0xa8,
    0x4d, 0x98, 0xb9, 0xf1, 0x7d, 0x04, 0xce, 0xc1, 0x11, 0xf4, 0x9a, 0x2c, 0x7f, 0x7d, 0x3b,
    0x3b, 0xb8, 0xb5, 0x1e, 0xc4, 0x23, 0x54, 0xf5, 0x0c, 0xde, 0xc0, 0x0a, 0x86, 0xc9, 0xe8,
    0xd3, 0xdb, 0xb4, 0x6f, 0xdd, 0xb5, 0x9d, 0x50, 0x55, 0xda, 0x93, 0xad, 0x3f, 0x99, 0xa3,
    0xea, 0x4c, 0x64, 0x85, 0xe8, 0x2d, 0x48, 0xc8, 0x32, 0x8b, 0x8b, 0x1b, 0x25, 0xe5, 0xf8,
    0x99, 0xbe, 0x18, 0xe7, 0x9a, 0xb2, 0x52, 0x85, 0xf6, 0xc7, 0x88, 0x17, 0x06, 0xa1, 0xa3,
    0xe5, 0x57, 0xa4, 0x4e, 0xbf, 0x35, 0x0a, 0x93, 0xdc, 0x01, 0xc1, 0x8d, 0x93, 0x71, 0x3e,
    0xe8, 0xe4, 0x93, 0x7b, 0x12, 0x34, 0x0a, 0x56, 0xd6, 0xeb, 0xad, 0xe7, 0xd1, 0xed, 0xe1,
    0xfb, 0x8d, 0x68, 0x33, 0x6a, 0x2b, 0x1f, 0x13, 0x51, 0x47, 0xda, 0x17, 0x34, 0xea, 0xcf,
    0x1e, 0xd4, 0xa2, 0x26, 0xfe, 0xaf, 0xf5, 0xf6, 0x40, 0x02, 0x78, 0xde, 0x6c, 0x01, 0x80,
    0xea, 0xcb, 0x8a, 0xb5, 0x68, 0x0b, 0xff, 0xb7, 0xad, 0x41, 0x34, 0x1b, 0xad, 0xed, 0x68,
    0xb9, 0x1c, 0x84, 0x55, 0xbb, 0x16, 0x11, 0x3e, 0x3b, 0xf8, 0xbf, 0x5d, 0xfc, 0xdf, 0x0b,
    0xb1, 0xd5, 0xd8, 0x7e, 0x11, 0xad, 0xb7, 0x96, 0x43, 0x3c, 0x48, 0x66, 0x77, 0x09, 0x9c,
    0x00, 0x8f, 0xe6, 0xbc, 0x09, 0xe0, 0x90, 0x2a, 0x9a, 0xf4, 0x0f, 0x9c, 0xe3, 0x44, 0xfb,
    0xec, 0x76, 0xe3, 0x25, 0x8c, 0xd6, 0xf6, 0xea, 0x60, 0x5f, 0x08, 0xb0, 0x5b, 0x8d, 0x0a,
    0x9a, 0x2c, 0xf0, 0x5c, 0x14, 0x04, 0x0a, 0x7f, 0xb2, 0x42, 0x5b, 0xc4, 0x93, 0x82, 0x9b,
    0x68, 0x81, 0xdb, 0x9d, 0xa0, 0xb0, 0x0b, 0xa0, 0x8f, 0xd7, 0xb8, 0x1a, 0x53, 0x15, 0x92,
    0xb2, 0xbb, 0x54, 0x02, 0x32, 0x09, 0x10, 0x26, 0xda, 0x92, 0x70, 0xa9, 0xe5, 0x0e, 0xf4,
    0x1f, 0x14, 0xd2, 0x21, 0xa9, 0xc6, 0x63, 0x74, 0x4b, 0x88, 0x60, 0x7f, 0x8b, 0x8e, 0xd3,
    0x0d, 0xf6, 0xbe, 0xa4, 0xee, 0x86, 0x08, 0xd6, 0xea, 0xd1, 0x10, 0x15, 0x10, 0xd8, 0x1f,
    0x06, 0x14, 0x47, 0x04, 0x03, 0x27, 0x8e, 0xd1, 0xc9, 0x0b, 0x8f, 0xf7, 0x3c, 0x53, 0x86,
    0xc3, 0x1c, 0x4d, 0xda, 0xb0, 0xa3, 0x9f, 0x41, 0xee, 0xb2, 0x5d, 0x49, 0xf5, 0xb8, 0xb4,
    0x24, 0x2f, 0x0b, 0x39, 0xf4, 0x6c, 0x4d, 0x27, 0x56, 0x54, 0x44, 0x67, 0xad, 0x10, 0x07,
    0x99, 0xa8, 0x83, 0x70, 0xac, 0x85, 0xe2, 0x80, 0x59, 0x4a, 0xd8, 0x41, 0xa8, 0xd6, 0xda,
    0xa0, 0xae, 0x46, 0xdc, 0xe1, 0x8e, 0x9b, 0x8b, 0x28, 0x00, 0xba, 0x9a, 0xc0, 0x83, 0xa0,
    0x85, 0xf4, 0xa8, 0xcb, 0x00, 0x66, 0xc1, 0xbf, 0x0c, 0x98, 0xa4, 0x81, 0xc0, 0xab, 0x17,
    0x2a, 0x42, 0xe1, 0x14, 0x83, 0xad, 0x9b, 0x4e, 0x01, 0x69, 0xce, 0x36, 0x41, 0xb9, 0x2b,
    0x29, 0x53, 0x30, 0xb4, 0x1e, 0x9f, 0x07, 0xd3, 0x28, 0x9e, 0xcd, 0xe2, 0xfe, 0x35, 0x3b,
    0x13, 0xe1, 0x0a, 0xc4, 0xd1, 0xbb, 0x08, 0x8f, 0x88, 0x7a, 0x74, 0x88, 0xf1, 0xbb, 0x8a,
    0x8e, 0x1c, 0x27, 0x8a, 0xbd, 0xed, 0x06, 0xc6, 0x00, 0xda, 0x10, 0x78, 0x97, 0xfa, 0xf3,
    0x10, 0x97, 0x55, 0x81, 0x39, 0x03, 0x28, 0xe1, 0xd0, 0x86, 0xaf, 0xf5, 0xb2, 0xba, 0xbb,
    0xc8, 0x6c, 0x0e, 0xfb, 0xd3, 0x36, 0xfa, 0x83, 0xc7, 0x5b, 0x74, 0x20, 0xfb, 0x23, 0xed,
    0xe9, 0xf8, 0xcb, 0x92, 0xd9, 0x26, 0x1c, 0x81, 0x80, 0x5f, 0x08, 0x3d, 0xd4, 0xa1, 0xfb,
    0x64, 0x9b, 0x02, 0xe3, 0xec, 0x44, 0x79, 0xa4, 0xe5, 0xa6, 0x50, 0x8d, 0xa6, 0x35, 0x98,
    0xbc, 0x55, 0xd8, 0x01, 0xd3, 0x91, 0x5e, 0x65, 0x14, 0xcf, 0x4b, 0xa4, 0xea, 0xee, 0x9c,
    0x14, 0x3d, 0x8c, 0x24, 0x18, 0x1c, 0x4a, 0x32, 0x2e, 0xa9, 0x42, 0x16, 0x89, 0xad, 0xd8,
    0x05, 0x6b, 0xfb, 0x2e, 0x19, 0xc1, 0x41, 0x9f, 0x50, 0xc8, 0x36, 0x1a, 0x40, 0x4a, 0xd6,
    0xb9, 0xb8, 0xa3, 0xff, 0xc0, 0x6c, 0x4d, 0x68, 0xae, 0x08, 0x93, 0xc2, 0xc1, 0x2c, 0x13,
    0x68, 0x1b, 0xa5, 0x63, 0x43, 0x7d, 0x57, 0xb6, 0xc9, 0x9c, 0x05, 0x47, 0x1b, 0x20, 0xcb,
    0x56, 0x79, 0x88, 0x18, 0x3e, 0x86, 0xc1, 0x26, 0xca, 0xa8, 0x49, 0x84, 0x27, 0xf9, 0x2c,
    0x6c, 0x47, 0x5e, 0x84, 0x38, 0xb8, 0xbd, 0x84, 0x25, 0xf8, 0x94, 0x9a, 0x88, 0xc5, 0x93,
    0xf0, 0xa5, 0x3b, 0x95, 0xaa, 0x45, 0x6d, 0xaa, 0xc8, 0xaf, 0xca, 0xe0, 0x3f, 0xb3, 0x51,
    0xb1, 0xee, 0x6b, 0x69, 0x80, 0xbc, 0x41, 0x5d, 0x1e, 0x89, 0x8f, 0x28, 0xc4, 0xa1, 0xcb,
    0x65, 0x4d, 0xe3, 0x0c, 0x77, 0x84, 0xcb, 0x8e, 0xb8, 0xe9, 0x8e, 0x16, 0x86, 0xd8, 0xe8,
    0xb5, 0x8c, 0x76, 0xcd, 0x2b, 0x44, 0x35, 0xdc, 0x22, 0xf1, 0x65, 0x50, 0x35, 0x41, 0xd8,
    0x86, 0x3a, 0x56, 0xf8, 0xbc, 0xd3, 0x61, 0xc9, 0x8f, 0x89, 0x64, 0x6a, 0x9e, 0xa2, 0x24,
    0xf2, 0x61, 0xeb, 0xbf, 0x68, 0xfb, 0x4a, 0xba, 0x3c, 0x79, 0x31, 0xef, 0xf7, 0x81, 0x22,
    0xbb, 0x5f, 0x95, 0x86, 0x71, 0x39, 0x24, 0xfc, 0x6c, 0xe9, 0xe0, 0x9d, 0x12, 0x66, 0xa8,
    0xef, 0x72, 0x38, 0x88, 0x25, 0x91, 0x4a, 0xf5, 0xa3, 0xbe, 0xd3, 0xe1, 0x0e, 0x7c, 0x9b,
    0x44, 0xd4, 0x1f, 0xdb, 0x6f, 0x8f, 0x4e, 0x2e, 0xc2, 0x83, 0xfd, 0x3d, 0xcc, 0x4a, 0xfb,
    0x7b, 0xe9, 0x07, 0x54, 0x8c, 0x56, 0xb4, 0x4c, 0x0d, 0x17, 0x96, 0xd0, 0x6d, 0x3a, 0xcd,
    0x31, 0x07, 0x14, 0x05, 0xee, 0xbf, 0xe7, 0xea, 0x17, 0x0d, 0x0b, 0xc2, 0x7f, 0xca, 0xb6,
    0x50, 0xcb, 0xbe, 0x0d, 0x86, 0xc4, 0x9f, 0xec, 0x35, 0x86, 0xb0, 0xcd, 0xc1, 0xe4, 0x8b,
    0x69, 0x96, 0x54, 0xde, 0xbc, 0x2a, 0x2b, 0x5f, 0xdc, 0xe5, 0x15, 0xa6, 0x16, 0xc2, 0xca,
    0xf6, 0x12, 0xb3, 0xae, 0x52, 0xee, 0x85, 0x6d, 0xe6, 0xb9, 0x92, 0x4b, 0xab, 0x4e, 0xf2,
    0x15, 0x2a, 0xb6, 0xe4, 0x8d, 0x3a, 0x8d, 0x57, 0xf1, 0xc6, 0xec, 0x64, 0x3d, 0x3e, 0xe8,
    0x99, 0xb8, 0xd9, 0x05, 0x53, 0xbc, 0xf6, 0x65, 0x8d, 0x19, 0xc2, 0x2e, 0x39, 0x32, 0xd2,
    0x38, 0xbe, 0xe1, 0xc1, 0x26, 0x1d, 0xba, 0x6e, 0xfc, 0x95, 0x5b, 0xc8, 0x96, 0x48, 0x3b,
    0x84, 0x4b, 0xb7, 0x7c, 0xc5, 0x5b, 0xe1, 0xf2, 0x85, 0xaf, 0xbc, 0x0a, 0xff, 0xc4, 0x15,
    0xd3, 0xc1, 0x20, 0xc9, 0x56, 0x47, 0xc8, 0x29, 0xbf, 0x7a, 0x13, 0xdd, 0x79, 0x6f, 0x79,
    0xdb, 0x06, 0x43, 0xb8, 0xc2, 0x8a, 0xbc, 0x38, 0x6a, 0x4b, 0x17, 0x0e, 0xb1, 0xea, 0x98,
    0x76, 0x8b, 0x52, 0x48, 0x0d, 0xd2, 0x21, 0xa9, 0x77, 0x67, 0xd1, 0x9b, 0xff, 0x75, 0x52,
    0xcd, 0x99, 0xce, 0xb8, 0xfe, 0x28, 0x4d, 0xa4, 0x45, 0x32, 0x03, 0x9a, 0x61, 0xc4, 0x81,
    0x65, 0xd4, 0x81, 0x59, 0xcd, 0xa1, 0xa5, 0xc5, 0x26, 0x1e, 0x52, 0x70, 0x7a, 0x4d, 0x81,
    0x41, 0x33, 0x7d, 0xc9, 0xa6, 0x17, 0xc0, 0xa0, 0x23, 0x40, 0x11, 0x5e, 0x3b, 0x7a, 0x9f,
    0x97, 0xd9, 0x3c, 0xa3, 0xed, 0xb3, 0xc6, 0x42, 0x45, 0x3e, 0xd9, 0xd1, 0x56, 0x4d, 0xc6,
    0x49, 0x48, 0x7e, 0x38, 0x13, 0xc2, 0xe4, 0x74, 0x18, 0xdd, 0x25, 0xd0, 0xe6, 0x20, 0xfb,
    0xe8, 0x2a, 0xe7, 0x28, 0x75, 0x28, 0x8c, 0x9c, 0x89, 0xf0, 0xb5, 0x5c, 0x57, 0x6e, 0x72,
    0x5c, 0xf6, 0x31, 0x0c, 0x4d, 0x21, 0x99, 0xcb, 0xef, 0x3f, 0x1c, 0x63, 0x18, 0xdc, 0xc3,
    0xe7, 0x55, 0x89, 0x1d, 0x68, 0xc8, 0x3a, 0x62, 0xc4, 0x60, 0xb9, 0xfb, 0xc2, 0xd5, 0x19,
    0xf1, 0xb9, 0x9c, 0xd4, 0xca, 0x89, 0x09, 0x69, 0xd2, 0x2c, 0x59, 0x4b, 0xcb, 0x29, 0xe1,
    0x48, 0xef, 0x02, 0x3f, 0x9a, 0xc2, 0x91, 0xa0, 0x04, 0x33, 0xdf, 0xc5, 0xc5, 0x35, 0xc9,
    0x85, 0x50, 0xb0, 0x2c, 0xad, 0xa4, 0xd7, 0xcd, 0xfd, 0xb2, 0x4c, 0xdb, 0xf8, 0xdc, 0xda,
    0xba, 0x56, 0x43, 0xcd, 0x86, 0x77, 0xfd, 0x4b, 0x64, 0x05, 0x2f, 0x71, 0x9e, 0x2e, 0x6f,
    0xc5, 0x65, 0xc4, 0x4c, 0x3e, 0x09, 0xf9, 0x60, 0x02, 0x2e, 0xa1, 0xe5, 0xe2, 0xb2, 0xae,
    0xff, 0xd0, 0xd4, 0x30, 0x9d, 0xaa, 0xfd, 0xfc, 0x19, 0x89, 0x1a, 0xaf, 0xa1, 0x2d, 0xe7,
    0x87, 0x68, 0xb1, 0xf4, 0x38, 0x41, 0xb4, 0x06, 0xcc, 0x53, 0x15, 0xb0, 0x55, 0xe9, 0x7b,
    0xb3, 0x38, 0x6c, 0x40, 0x4b, 0x31, 0x8a, 0xb1, 0x95, 0xef, 0xbb, 0xde, 0xb3, 0x65, 0x90,
    0xc5, 0xdf, 0x93, 0xc5, 0xd1, 0xa7, 0x14, 0x3d, 0x84, 0x26, 0x98, 0x6f, 0x63, 0xc9, 0x30,
    0x22, 0xc3, 0x33, 0x75, 0x23, 0xcc, 0xc7, 0xfe, 0x20, 0xc3, 0x23, 0x72, 0x78, 0xe5, 0xd6,
    0xf0, 0x4d, 0x61, 0xbc, 0x7d, 0xb8, 0x50, 0x31, 0x47, 0x2a, 0xa8, 0x75, 0xf2, 0x4b, 0xa2,
    0x85, 0x5b, 0x6e, 0xae, 0xd6, 0x72, 0xb3, 0x53, 0x9c, 0x08, 0x73, 0xe2, 0x95, 0x1a, 0x0d,
    0x9b, 0x4c, 0xd3, 0x09, 0xd1, 0xb1, 0x16, 0xf3, 0x01, 0xff, 0xde, 0x4d, 0x92, 0x63, 0x9f,
    0x2e, 0xa4, 0xae, 0x70, 0x20, 0xdc, 0xa6, 0x14, 0x83, 0x7a, 0xe9, 0x81, 0xab, 0x18, 0xb0,
    0x0f, 0x2d, 0xa8, 0x20, 0xfa, 0x6d, 0xda, 0x83, 0xfd, 0xba, 0x6f, 0x9d, 0xa6, 0xcb, 0xf0,
    0x5c, 0x7f, 0x65, 0xc6, 0xd2, 0xe5, 0x05, 0xc4, 0xe6, 0x53, 0x39, 0x9c, 0x47, 0xdc, 0xa2,
    0xac, 0x41, 0x28, 0x54, 0x4a, 0x5f, 0x9c, 0xfd, 0x03, 0x08, 0x7b, 0xbc, 0x9c, 0x5d, 0x55,
    0x2a, 0xc3, 0x33, 0x07, 0x3b, 0xd0, 0x98, 0x1d, 0xe6, 0x68, 0xe9, 0x20, 0x97, 0xc6, 0xc3,
    0x48, 0x3e, 0x7f, 0xb0, 0x3a, 0x62, 0xb4, 0x4a, 0x20, 0xd4, 0x60, 0x05, 0x80, 0x6b, 0x91,
    0x3e, 0x4d, 0x2e, 0x1c, 0x19, 0xb5, 0xbf, 0xa9, 0x36, 0x3b, 0xbd, 0xfb, 0xb9, 0xbc, 0xb8,
    0xcd, 0x93, 0x3c, 0xab, 0x98, 0x50, 0x01, 0x39, 0x34, 0xd6, 0x7d, 0x13, 0x76, 0x05, 0x91,
    0xae, 0x4c, 0x8c, 0xc7, 0xc5, 0x75, 0x62, 0x34, 0x09, 0xec, 0xb2, 0x6e, 0xcc, 0x8b, 0x0a,
    0xb4, 0xa2, 0x32, 0x1e, 0xdb, 0xd1, 0x53, 0x0b, 0x4d, 0x55, 0x53, 0x50, 0xe9, 0x6b, 0x15,
    0xb5, 0x4a, 0x04, 0x63, 0xfb, 0x48, 0xec, 0x39, 0x6a, 0x72, 0x47, 0x1d, 0xfa, 0x99, 0xbd,
    0x17, 0xad, 0x56, 0x8e, 0xf9, 0x67, 0x20, 0xbd, 0xc2, 0x14, 0xc0, 0x51, 0x36, 0x1f, 0x03,
    0x86, 0x81, 0x89, 0xd2, 0xe2, 0x70, 0x1a, 0xff, 0xb4, 0x40, 0x06, 0xa7, 0xbb, 0x28, 0x66,
    0x0c, 0xc7, 0xd2, 0xe7, 0x42, 0x7e, 0x92, 0x15, 0x0e, 0xb5, 0xfe, 0x8f, 0xae, 0xe9, 0x01,
    0xf2, 0xcd, 0x89, 0x00, 0xe3, 0xfb, 0xa4, 0xad, 0x8a, 0xab, 0xad, 0x79, 0xce, 0xe2, 0x29,
    0x63, 0x41, 0x43, 0x3c, 0x91, 0x98, 0x25, 0x19, 0x50, 0xa7, 0x44, 0x1f, 0x5d, 0x03, 0x22,
    0x4d, 0xa8, 0x1a, 0x63, 0x64, 0x5c, 0x51, 0xce, 0xc8, 0xc2, 0x0e, 0x3f, 0x9d, 0xce, 0x67,
    0x68, 0x30, 0x63, 0x03, 0xca, 0x5a, 0x94, 0xdc, 0x3a, 0x41, 0x3b, 0xef, 0x73, 0xf1, 0xb1,
    0x1a, 0x03, 0x2e, 0x6f, 0xf1, 0x02, 0xcb, 0xe9, 0xde, 0xd2, 0xfe, 0x85, 0x63, 0xeb, 0x9d,
    0x8d, 0x2f, 0x00, 0x75, 0xc6, 0x43, 0x8b, 0xbc, 0xa4, 0xdc, 0xfc, 0x87, 0x58, 0x73, 0x1f,
    0x40, 0x22, 0x24, 0xe3, 0x97, 0x61, 0x51, 0x43, 0xee, 0xa3, 0xb9, 0xd5, 0x2e, 0x14, 0xb4,
    0xf1, 0x1b, 0x2c, 0xd8, 0x65, 0x4a, 0xf6, 0xed, 0xd8, 0xee, 0xbe, 0x47, 0xed, 0x67, 0x04,
    0x46, 0x23, 0x04, 0x74, 0x23, 0x94, 0x32, 0x25, 0x94, 0xe2, 0x92, 0x5b, 0x21, 0x8e, 0xc8,
    0xea, 0x4e, 0x29, 0xda, 0xf5, 0xe2, 0x1b, 0xca, 0x87, 0xd1, 0x9b, 0x67, 0xfd, 0x6b, 0x12,
    0xc4, 0x57, 0x5a, 0x00, 0x66, 0xa7, 0x3e, 0x1a, 0x42, 0x19, 0x12, 0x8d, 0xc6, 0x99, 0xc8,
    0xb2, 0xbe, 0x81, 0x98, 0xfd, 0x05, 0x6d, 0x28, 0xcb, 0x72, 0xab, 0xf8, 0xae, 0xa8, 0xc7,
    0xf8, 0xa7, 0x3c, 0x23, 0xd9, 0x15, 0x7d, 0xef, 0xcf, 0x8b, 0x59, 0x3e, 0x6e, 0xcf, 0x00,
    0xb8, 0xbd, 0x90, 0xa5, 0x44, 0x9b, 0xc6, 0x8f, 0x6b, 0x93, 0x78, 0x61, 0x05, 0x23, 0x98,
    0x39, 0x39, 0xf1, 0xda, 0xdd, 0x36, 0xf2, 0xcb, 0xcb, 0xa0, 0xdd, 0x2c, 0xa4, 0xee, 0x61,
    0xcd, 0x85, 0x4c, 0x21, 0x4f, 0x59, 0x12, 0x2e, 0x99, 0x2f, 0x56, 0x46, 0xaf, 0xd2, 0x80,
    0x87, 0x09, 0xf8, 0x34, 0x93, 0xfd, 0xf7, 0x4b, 0xe0, 0xc8, 0x7a, 0x50, 0xd8, 0x02, 0x48,
    0x5c, 0x6b, 0xab, 0xb1, 0x5d, 0x71, 0x7b, 0x22, 0xe8, 0x87, 0x0c, 0xdc, 0xb9, 0x34, 0x49,
    0x53, 0xfe, 0xf7, 0x83, 0x90, 0xfd, 0xd8, 0x66, 0x35, 0x71, 0xd6, 0x26, 0x21, 0x96, 0x05,
    0xdd, 0xe5, 0xb7, 0x1d, 0x88, 0x85, 0x59, 0x58, 0xa9, 0x23, 0x2c, 0xc0, 0x1c, 0x63, 0xc4,
    0xb7, 0x04, 0xd4, 0x70, 0x32, 0x75, 0x4a, 0x56, 0x46, 0x15, 0xaf, 0x0c, 0xce, 0x4e, 0x96,
    0xa1, 0xd9, 0x12, 0x37, 0x55, 0xbe, 0x59, 0x0b, 0x73, 0x4c, 0x2d, 0x35, 0x16, 0x51, 0x62,
    0x0f, 0x55, 0x31, 0x03, 0xe5, 0x6c, 0x6d, 0x6a, 0xe6, 0x08, 0xee, 0x55, 0x2a, 0x02, 0xd8,
    0x24, 0x5c, 0xca, 0xe9, 0x7e, 0x43, 0xd6, 0x28, 0xd7, 0xf1, 0x2d, 0xdd, 0x83, 0x06, 0x39,
    0xa9, 0xa4, 0x4e, 0x47, 0x97, 0x7a, 0x02, 0xc1, 0xf1, 0x0d, 0x2f, 0x39, 0x48, 0xe0, 0x25,
    0x34, 0x23, 0xe6, 0x5e, 0x8a, 0x00, 0xa6, 0x71, 0x71, 0x88, 0x11, 0xcf, 0x06, 0x74, 0xa3,
    0x4b, 0xde, 0x2a, 0x09, 0x46, 0x3e, 0x00, 0xe6, 0x87, 0x02, 0x71, 0x87, 0x12, 0x3e, 0x3a,
    0xb5, 0xd5, 0xa0, 0xf3, 0xa1, 0x34, 0x49, 0x3a, 0x68, 0xa5, 0xc7, 0xa5, 0x51, 0x63, 0x90,
    0x81, 0x0c, 0x1d, 0x33, 0x17, 0xea, 0x23, 0x67, 0x64, 0x8a, 0x67, 0x86, 0x05, 0x9e, 0x30,
    0xe4, 0xee, 0x88, 0xd4, 0x2b, 0x69, 0x66, 0x4e, 0xb0, 0x61, 0xaf, 0x8c, 0x1d, 0x66, 0xe9,
    0x85, 0x2c, 0xc1, 0xb0, 0xf3, 0x52, 0xe6, 0x1f, 0x99, 0x71, 0x16, 0x84, 0xa3, 0x40, 0xd0,
    0x37, 0xb8, 0xf7, 0x95, 0x77, 0x59, 0xf3, 0xab, 0xb6, 0xe6, 0xd1, 0x63, 0x28, 0xe4, 0xc0,
    0xd8, 0x05, 0x3a, 0xcf, 0xf2, 0xa1, 0x19, 0x46, 0xac, 0xc9, 0x30, 0xff, 0x25, 0xf5, 0x2a,
    0x97, 0x1f, 0x4d, 0x8a, 0x95, 0x5b, 0x84, 0x25, 0xa4, 0x6f, 0x6d, 0x35, 0x97, 0x09, 0x56,
    0x32, 0x5f, 0xa8, 0xd3, 0x77, 0x4f, 0x86, 0xcb, 0xb4, 0x70, 0xaa, 0x94, 0x02, 0xcd, 0xd8,
    0xc3, 0x28, 0x5f, 0xaa, 0x3f, 0x42, 0x58, 0x5c, 0x46, 0x86, 0x73, 0x43, 0xd8, 0x80, 0x8d,
    0x11, 0x08, 0x07, 0x93, 0x01, 0xc9, 0xab, 0x72, 0xb7, 0x73, 0xf2, 0xf6, 0xdd, 0xd1, 0xc5,
    0xc9, 0xc7, 0xee, 0xc5, 0x39, 0xfc, 0x8d, 0x41, 0x01, 0xb6, 0xde, 0x35, 0x2f, 0xb6, 0xbe,
    0xfb, 0x97, 0x1a, 0xd4, 0x4e, 0xe6, 0x6e, 0xb7, 0xd5, 0x23, 0x0a, 0xe5, 0x4b, 0x91, 0x14,
    0x86, 0x13, 0x8f, 0xeb, 0xab, 0x64, 0x5a, 0x5f, 0x3a, 0xa0, 0x00, 0xd7, 0x19, 0xcd, 0x23,
    0xb1, 0xf4, 0x75, 0x79, 0x3c, 0x3b, 0x27, 0x17, 0x22, 0xf1, 0x92, 0x67, 0x20, 0x79, 0x35,
    0x10, 0x8f, 0xc6, 0x0e, 0x27, 0x13, 0x3d, 0x7b, 0xd1, 0x06, 0x71, 0xb0, 0xc8, 0xe2, 0x31,
    0xd5, 0x2a, 0x09, 0x52, 0xc5, 0x12, 0x44, 0x43, 0xa9, 0x73, 0xf4, 0x5d, 0x9b, 0x1a, 0x0c,
    0xfe, 0x5c, 0x47, 0x2b, 0xc2, 0xfd, 0x72, 0x20, 0x2f, 0x5b, 0x6a, 0x86, 0x25, 0xdb, 0xd3,
    0x3a, 0x43, 0x2f, 0x33, 0xaa, 0xb2, 0x92, 0x9c, 0xc4, 0x0b, 0x07, 0x23, 0x6e, 0x8f, 0x9d,
    0x7a, 0x2b, 0x00, 0xf0, 0xb0, 0x4c, 0x17, 0xf9, 0xe4, 0x5d, 0x72, 0x9b, 0xd8, 0x2c, 0x93,
    0x10, 0x5b, 0xac, 0x2d, 0x32, 0x88, 0x8f, 0xf2, 0xab, 0x3e, 0xa7, 0x2a, 0x38, 0x5c, 0x40,
    0xfe, 0x63, 0x3e, 0xc7, 0xf0, 0xb0, 0xdf, 0xe8, 0xe3, 0x64, 0xc2, 0x7a, 0xc0, 0xb4, 0xf0,
    0x2c, 0x19, 0x73, 0x95, 0x40, 0xb6, 0x45, 0x02, 0x35, 0x80, 0x05, 0xb5, 0x46, 0xa8, 0xdf,
    0xa1, 0xea, 0x96, 0x4f, 0x4c, 0x54, 0xfc, 0x72, 0x6c, 0x4e, 0x91, 0x6c, 0xd1, 0xdf, 0x4c,
    0x26, 0x6a, 0x34, 0x12, 0x7b, 0x51, 0x57, 0xff, 0x10, 0xc3, 0xe2, 0xf1, 0x6f, 0x34, 0xdc,
    0x4b, 0xc5, 0x4b, 0xa3, 0xd8, 0xc1, 0x8c, 0xa9, 0xe8, 0xa2, 0x2f, 0x6c, 0xc5, 0x78, 0x94,
    0xa8, 0x0c, 0x92, 0x64, 0xa2, 0xc3, 0xec, 0x9d, 0x95, 0xc2, 0x38, 0xfb, 0xc0, 0xb2, 0x58,
    0x91, 0xcf, 0xbf, 0x19, 0x8d, 0xa2, 0x78, 0x34, 0x46, 0x15, 0x5d, 0x06, 0x08, 0x4d, 0x79,
    0x53, 0x4f, 0x34, 0x38, 0xa3, 0x2d, 0xc9, 0x36, 0x63, 0x5b, 0x3e, 0x69, 0xae, 0xee, 0xea,
    0x34, 0x1e, 0x43, 0x5f, 0x3b, 0xac, 0x0a, 0x46, 0x69, 0x35, 0x2a, 0x19, 0xcb, 0x5d, 0xb7,
    0xf9, 0xd2, 0xe7, 0x0a, 0x0f, 0x8b, 0x2a, 0xf0, 0xb4, 0xa0, 0x8e, 0x53, 0x6b, 0x74, 0xa5,
    0xe1, 0xde, 0xc8, 0x0c, 0x4d, 0x60, 0x9f, 0x89, 0x10, 0x4f, 0xf6, 0x43, 0x61, 0x54, 0x58,
    0x3e, 0x13, 0x25, 0x67, 0x09, 0x87, 0x91, 0xf1, 0x0c, 0x66, 0x6d, 0xd5, 0x2e, 0xba, 0x06,
    0xa2, 0xcd, 0x95, 0x50, 0xee, 0x2a, 0x7f, 0xe8, 0x50, 0xcc, 0x13, 0x83, 0x20, 0xc9, 0xbc,
    0x14, 0x5e, 0x9e, 0x02, 0x17, 0x84, 0xf4, 0x11, 0x9c, 0xa9, 0x2d, 0xf4, 0x15, 0xcf, 0xd3,
    0xaa, 0x0a, 0x75, 0x59, 0x5a, 0x8a, 0x69, 0x9a, 0xcd, 0xc2, 0xb7, 0x57, 0xe3, 0xa3, 0x3c,
    0x39, 0x8e, 0x00, 0xf7, 0xc0, 0xe3, 0xa1, 0xa3, 0xce, 0xad, 0xef, 0x39, 0x2f, 0x3c, 0x9b,
    0xdf, 0x91, 0x9e, 0x4d, 0x1b, 0x38, 0xcc, 0xe4, 0xb5, 0x0c, 0x27, 0x19, 0x25, 0x1d, 0x55,
    0x27, 0xc4, 0x05, 0x45, 0x04, 0x9a, 0x43, 0x92, 0x21, 0x6b, 0x30, 0x6e, 0xf1, 0xc5, 0x34,
    0xac, 0x7f, 0x94, 0x69, 0x6e, 0x31, 0x02, 0x8e, 0x8c, 0x60, 0x25, 0x4c, 0x93, 0x6d, 0xb2,
    0x70, 0x5f, 0xd8, 0xca, 0xc5, 0xfc, 0xee, 0x18, 0x4e, 0x1c, 0xb8, 0xe6, 0xb4, 0xa7, 0x57,
    0xeb, 0x74, 0xd0, 0xc1, 0x86, 0xfd, 0xe0, 0xeb, 0xf5, 0x3a, 0xb5, 0x50, 0xb8, 0x10, 0xad,
    0x14, 0x6a, 0x3c, 0x7e, 0x48, 0xcc, 0x4b, 0x0d, 0x99, 0x1b, 0x53, 0xf6, 0x28, 0x45, 0x5e,
    0xe1, 0x7f, 0x2a, 0x6f, 0x98, 0x7f, 0x6e, 0x6d, 0xed, 0xb4, 0xc2, 0x63, 0xa3, 0x55, 0xa0,
    0xf1, 0x8d, 0x9b, 0x84, 0xcb, 0x51, 0xde, 0xba, 0x61, 0x96, 0x75, 0xb0, 0x39, 0xa9, 0x60,
    0xe6, 0x50, 0x11, 0xa0, 0xb0, 0x72, 0xb2, 0x8f, 0xea, 0x13, 0xdd, 0xa4, 0x35, 0xa1, 0xb2,
    0xd1, 0x70, 0xa3, 0xac, 0xda, 0xa1, 0xaf, 0xee, 0x0b, 0xd2, 0xaa, 0xdd, 0xf6, 0xc1, 0xb7,
    0x8e, 0xad, 0x0e, 0xbe, 0xe6, 0x62, 0x6b, 0x47, 0x5a, 0x62, 0x2f, 0x98, 0xf6, 0xbb, 0xb4,
    0x0c, 0x34, 0x9c, 0x2e, 0x89, 0x32, 0xc8, 0xfc, 0x54, 0xe9, 0x98, 0x9c, 0x5e, 0x29, 0x4a,
    0xd5, 0x3e, 0xe8, 0x65, 0x63, 0xab, 0x22, 0x5d, 0x0b, 0x33, 0x8a, 0x31, 0x87, 0xc1, 0xe7,
    0xe2, 0x71, 0x62, 0x04, 0x27, 0xd4, 0x57, 0x48, 0xcd, 0xc3, 0xa8, 0xc0, 0x82, 0xec, 0xe2,
    0x3a, 0x5e, 0xc9, 0x0a, 0x66, 0x39, 0x72, 0xf9, 0xb1, 0x0b, 0x12, 0x8f, 0x2d, 0xbc, 0xdf,
    0xe0, 0x1d, 0xb3, 0x04, 0x87, 0xc0, 0x39, 0xce, 0x07, 0x49, 0x11, 0xba, 0xd7, 0xda, 0xd7,
    0xd2, 0xee, 0x23, 0x56, 0x9b, 0x88, 0x29, 0x9d, 0x44, 0xc3, 0x18, 0x03, 0x35, 0x48, 0xef,
    0xbc, 0xc3, 0xe2, 0xc6, 0x48, 0xca, 0xf8, 0xbe, 0x70, 0x1b, 0x66, 0x93, 0xdb, 0x59, 0x4c,
    0x0e, 0xc6, 0xe9, 0x27, 0xca, 0x1f, 0xad, 0xd6, 0x7d, 0xf4, 0x1f, 0x11, 0x53, 0x8b, 0x96,
    0x16, 0x15, 0x9b, 0x16, 0xe7, 0x96, 0x2b, 0x4e, 0xd2, 0x7e, 0x82, 0x0d, 0x1d, 0x70, 0xc3,
    0x5c, 0x4c, 0x86, 0xa8, 0xbc, 0x19, 0x0f, 0x02, 0x39, 0x3d, 0x90, 0xf9, 0xef, 0x0c, 0x42,
    0x02, 0x45, 0xb3, 0x08, 0x18, 0x3b, 0x8a, 0x00, 0x74, 0xe9, 0x80, 0x06, 0x36, 0x1f, 0x27,
    0x27, 0x5c, 0xd7, 0xf1, 0x4e, 0x41, 0x96, 0xf8, 0x64, 0x52, 0xd8, 0xbf, 0xce, 0xd3, 0x7e,
    0x54, 0xa1, 0x50, 0x21, 0x5c, 0x45, 0xbb, 0x32, 0x59, 0xfc, 0x97, 0x75, 0x54, 0x0c, 0xf4,
    0x28, 0x83, 0x8c, 0xf8, 0x47, 0xe1, 0x4c, 0xe4, 0xfb, 0x0e, 0xe9, 0x4d, 0xfd, 0xb5, 0x14,
    0xf0, 0xe0, 0x63, 0x0b, 0xe7, 0xed, 0xcc, 0x5d, 0xa9, 0x7a, 0x00, 0xbd, 0xe3, 0x18, 0x79,
    0xd3, 0x29, 0x28, 0x38, 0x80, 0x83, 0x98, 0xcd, 0x3d, 0x2c, 0x1f, 0x0c, 0x1c, 0xf7, 0x4b,
    0xb4, 0x4b, 0xef, 0x88, 0x6b, 0xe0, 0xfc, 0x3b, 0x97, 0x66, 0x2a, 0x22, 0x2c, 0xa4, 0x53,
    0xd1, 0x17, 0x18, 0xc5, 0x6c, 0x3e, 0x36, 0x10, 0xc2, 0xcc, 0x34, 0x9b, 0x97, 0xaf, 0x0a,
    0x39, 0xd3, 0xf8, 0xee, 0x3b, 0x13, 0xb9, 0x5f, 0x3d, 0x93, 0x74, 0x12, 0xda, 0x63, 0xe8,
    0x6a, 0x57, 0x01, 0xf1, 0x46, 0x0a, 0xbf, 0x4c, 0x07, 0x97, 0xc2, 0x92, 0x9e, 0x12, 0x37,
    0xf4, 0x10, 0x56, 0x3d, 0x1a, 0x56, 0xb7, 0xcf, 0x3a, 0x80, 0x32, 0x1a, 0xbc, 0xd6, 0x14,
    0x31, 0xbb, 0xb6, 0x0e, 0x2f, 0x1a, 0xe5, 0x40, 0xa3, 0x97, 0x70, 0xbb, 0x40, 0x02, 0x58,
    0xa4, 0x3c, 0x96, 0x8d, 0xaa, 0xb5, 0x2d, 0xf2, 0x41, 0x23, 0x06, 0xf5, 0xe8, 0x00, 0xee,
    0x84, 0xc0, 0x1d, 0x06, 0xd0, 0x4c, 0x60, 0xac, 0x28, 0x3d, 0x49, 0x3a, 0x8b, 0x46, 0xe9,
    0x62, 0x98, 0xe0, 0xf4, 0xe1, 0x6b, 0xe0, 0x86, 0x92, 0xba, 0x8b, 0xd7, 0x0c, 0x80, 0x82,
    0x2d, 0x87, 0x9c, 0x40, 0x6e, 0xb7, 0x02, 0x60, 0xac, 0x95, 0x1e, 0xe2, 0x2d, 0xf0, 0xbf,
    0x5b, 0x8c, 0x31, 0x01, 0x72, 0x5a, 0xd6, 0xba, 0xb1, 0x85, 0xb3, 0xb4, 0x7e, 0x95, 0x1b,
    0x89, 0xc3, 0x73, 0xe8, 0xe9, 0x28, 0x2f, 0x58, 0xb2, 0x90, 0xe8, 0xca, 0xd8, 0x88, 0x29,
    0x0c, 0xb9, 0x19, 0xb6, 0x65, 0xbb, 0xb6, 0x15, 0xe9, 0x19, 0x13, 0xae, 0x71, 0xb4, 0xe0,
    0xb6, 0x56, 0xfd, 0x93, 0xe5, 0x8f, 0xaa, 0x6c, 0x98, 0x8f, 0x1e, 0x27, 0xaf, 0xec, 0x2a,
    0x22, 0xce, 0x6e, 0x21, 0x6c, 0xf6, 0xb8, 0x04, 0x23, 0x53, 0x17, 0xb9, 0x2a, 0xf6, 0x95,
    0x4f, 0xcb, 0x31, 0xfd, 0x8c, 0x21, 0x58, 0x66, 0x0f, 0xc0, 0x53, 0xea, 0x6c, 0x78, 0xbc,
    0x54, 0x24, 0xf2, 0x0e, 0x34, 0x17, 0xf0, 0x8c, 0x35, 0xf7, 0x4e, 0xa0, 0x99, 0x5e, 0xd5,
    0x2b, 0x25, 0x15, 0x9c, 0x0a, 0x75, 0x90, 0xe8, 0xdf, 0x85, 0x88, 0x49, 0x2f, 0xa9, 0xad,
    0x47, 0xd0, 0x28, 0x8e, 0xe2, 0x55, 0x96, 0x93, 0x7c, 0x52, 0xf9, 0x85, 0xd2, 0xca, 0x0f,
    0x1a, 0xb3, 0xda, 0xed, 0xb2, 0x13, 0x33, 0x9f, 0x00, 0xdd, 0x80, 0x13, 0xb3, 0x25, 0x8b,
    0xda, 0xde, 0x9f, 0x81, 0x52, 0x1c, 0x20, 0x79, 0xdf, 0xb3, 0xec, 0x2e, 0xa4, 0xe3, 0x6f,
    0x25, 0x05, 0x8b, 0x34, 0x8a, 0x27, 0xdc, 0x3f, 0x85, 0xe4, 0xfa, 0x1d, 0x6d, 0x1f, 0x1e,
    0x71, 0x4f, 0x93, 0xd1, 0x7e, 0x37, 0x54, 0xd6, 0x8e, 0xeb, 0x19, 0xa7, 0xe2, 0xc0, 0x35,
    0xec, 0xe9, 0xf9, 0x04, 0xc6, 0x9b, 0x65, 0x5a, 0xc4, 0xe3, 0x5e, 0x7a, 0x35, 0x27, 0x6f,
    0x18, 0xc4, 0x22, 0xe4, 0xf4, 0xcb, 0xad, 0x1f, 0x7c, 0xd1, 0x10, 0x1d, 0xb0, 0xfc, 0xd3,
    0x52, 0xf0, 0x0d, 0x25, 0xf6, 0x74, 0x5f, 0x46, 0x16, 0x6b, 0x57, 0x99, 0x45, 0xc1, 0x77,
    0xe1, 0xe5, 0x68, 0x61, 0x05, 0x77, 0x9c, 0x16, 0x02, 0xc4, 0x3a, 0xd3, 0x8a, 0x02, 0x19,
    0x22, 0xbb, 0xc4, 0x94, 0x87, 0xcc, 0x58, 0x5a, 0xe8, 0x06, 0x3d, 0x30, 0x0e, 0xee, 0x05,
    0x60, 0x45, 0x35, 0x56, 0x22, 0xd2, 0x74, 0xe1, 0xfc, 0x91, 0x2a, 0x87, 0x3d, 0x58, 0xd8,
    0xc0, 0x89, 0x0c, 0x60, 0xdf, 0xef, 0x28, 0x7e, 0x80, 0xb6, 0xf2, 0x4b, 0xd1, 0xd3, 0x81,
    0x4a, 0xe5, 0x50, 0x98, 0xfb, 0x91, 0x1c, 0x1f, 0x65, 0x18, 0x85, 0x60, 0x28, 0xc2, 0x3a,
    0x82, 0x5f, 0xd0, 0x52, 0x43, 0x44, 0x24, 0xad, 0x08, 0x55, 0x57, 0x2e, 0x63, 0x3d, 0x8b,
    0x71, 0x32, 0x73, 0x31, 0x69, 0x7b, 0x39, 0xb7, 0x23, 0x1c, 0xd9, 0x15, 0x9a, 0x56, 0xd1,
    0x61, 0x9c, 0x9d, 0x43, 0x1f, 0x0f, 0x92, 0xd1, 0xa8, 0x7c, 0x3e, 0xe3, 0xf5, 0x77, 0x68,
    0x12, 0x38, 0x92, 0xa9, 0x61, 0xf8, 0x2f, 0x62, 0x1d, 0x64, 0xd2, 0x78, 0x75, 0xc4, 0x01,
    0x5c, 0x5f, 0x14, 0x69, 0x2c, 0x69, 0xfa, 0xe2, 0xf4, 0xb0, 0xcd, 0x3b, 0x38, 0x9a, 0xa7,
    0xed, 0x07, 0xe4, 0x09, 0x89, 0x6c, 0x85, 0xdd, 0xb0, 0xc2, 0x52, 0xac, 0x23, 0x55, 0xa3,
    0x40, 0x07, 0xf1, 0x3f, 0xa7, 0x1f, 0x15, 0x46, 0x8a, 0xab, 0x77, 0x47, 0x3a, 0xd7, 0x48,
    0x11, 0x4f, 0x5f, 0xbe, 0xbc, 0x2b, 0x86, 0xbd, 0xf7, 0x6f, 0xd8, 0x11, 0x49, 0xe8, 0xbf,
    0x4f, 0x44, 0x50, 0x87, 0xcf, 0xe8, 0x4a, 0x47, 0x84, 0xc9, 0x56, 0x4c, 0x19, 0xc9, 0xef,
    0xa9, 0xc0, 0x05, 0x5a, 0xa2, 0x4d, 0xa7, 0x2f, 0xec, 0x46, 0xc2, 0x35, 0xc7, 0xe0, 0x58,
    0xaa, 0x37, 0x3f, 0x5c, 0x27, 0x19, 0xda, 0xb5, 0x0c, 0xe4, 0x91, 0xae, 0x3a, 0x71, 0x28,
    0x79, 0xe0, 0x79, 0x79, 0xe0, 0xf5, 0x92, 0xfe, 0xa1, 0x97, 0x48, 0xfa, 0x47, 0x5e, 0x15,
    0x1f, 0x7d, 0x21, 0xdc, 0x7d, 0x26, 0xed, 0xeb, 0xb3, 0x32, 0xbe, 0x49, 0xd8, 0xf9, 0x49,
    0xb4, 0xee, 0x43, 0x5c, 0x38, 0x78, 0x7a, 0x6f, 0x14, 0x1a, 0xbe, 0x36, 0xa1, 0x9e, 0x5e,
    0x98, 0x58, 0x44, 0x5b, 0x0c, 0x60, 0xd9, 0xa0, 0x61, 0x49, 0xbb, 0x78, 0x6a, 0x16, 0xa1,
    0x6a, 0xe5, 0xae, 0xf9, 0x9b, 0x76, 0x5a, 0xf6, 0xe3, 0x2e, 0xb9, 0xaf, 0xd4, 0x0c, 0x6b,
    0x60, 0x8d, 0xa8, 0xbc, 0xc9, 0x00, 0x98, 0x00, 0xe6, 0xc8, 0xab, 0xd9, 0x4c, 0x98, 0x03,
    0x31, 0x87, 0x22, 0x96, 0xd3, 0xf6, 0x2a, 0xb8, 0x13, 0x72, 0x04, 0x6c, 0x2c, 0x8e, 0x32,
    0x63, 0x80, 0xee, 0x25, 0x17, 0x94, 0x41, 0xd9, 0x38, 0xba, 0xc1, 0x18, 0xb3, 0x05, 0xfa,
    0x63, 0x1c, 0x88, 0x74, 0xb8, 0x10, 0x37, 0x5d, 0x9a, 0x2d, 0x4a, 0x0f, 0x97, 0x6d, 0x62,
    0x08, 0xe0, 0x43, 0x49, 0xe6, 0x8b, 0x71, 0x49, 0x55, 0x93, 0xd0, 0x54, 0x8c, 0x39, 0xc8,
    0xfb, 0xc5, 0xd1, 0x5f, 0x17, 0x61, 0x35, 0x37, 0x6c, 0xa7, 0xcd, 0x82, 0x15, 0x7d, 0x33,
    0x8f, 0x02, 0x6c, 0xa2, 0xe1, 0x30, 0x35, 0x30, 0x48, 0x39, 0xe0, 0xcf, 0x1a, 0x10, 0xe5,
    0x44, 0x74, 0x1c, 0xa4, 0x37, 0x2d, 0x66, 0xa1, 0xdb, 0xc0, 0x79, 0x9e, 0x07, 0x53, 0x8e,
    0xc7, 0x0b, 0xb2, 0xfb, 0x41, 0xbb, 0xff, 0xf1, 0x24, 0x98, 0x5c, 0x8c, 0xd9, 0xe0, 0xb2,
    0x52, 0x27, 0x61, 0xa1, 0xe1, 0x52, 0x76, 0x7c, 0x27, 0xc6, 0x4f, 0x7f, 0xb4, 0x12, 0xa3,
    0x19, 0x2b, 0x3c, 0x55, 0x14, 0xe7, 0x5f, 0xe3, 0xa8, 0x00, 0x80, 0xe1, 0xb7, 0x51, 0x23,
    0xfc, 0xcc, 0xc8, 0x01, 0xb3, 0x2c, 0xe9, 0xb4, 0x1a, 0x8d, 0x0f, 0x6c, 0x5c, 0x95, 0x3b,
    0xb6, 0xb4, 0xb9, 0x52, 0xdc, 0xb1, 0xae, 0xe1, 0x88, 0x5b, 0xab, 0x39, 0xe1, 0x73, 0x9d,
    0x4b, 0xda, 0xf7, 0x93, 0xf3, 0xee, 0x4d, 0x96, 0xdf, 0x65, 0x02, 0x19, 0x16, 0xab, 0x1a,
    0x6d, 0x2e, 0xfa, 0x90, 0x1c, 0x81, 0x01, 0xa3, 0x5b, 0xe5, 0xcb, 0xdd, 0x1d, 0x4f, 0x7c,
    0xa5, 0x43, 0x80, 0xfa, 0x4a, 0x5d, 0x3d, 0x74, 0x15, 0xc9, 0x39, 0x33, 0xb7, 0xdd, 0x8e,
    0x87, 0x80, 0x28, 0x9c, 0xab, 0x90, 0xd4, 0x36, 0x4e, 0xaf, 0xca, 0x45, 0xd5, 0x65, 0xda,
    0x01, 0xbc, 0x92, 0xa4, 0xfe, 0x45, 0xcb, 0x3b, 0x0e, 0xc0, 0xeb, 0xc3, 0x90, 0xf1, 0xc4,
    0x19, 0xdf, 0x40, 0x54, 0xe8, 0x2b, 0x0f, 0xaf, 0xd3, 0xd1, 0x40, 0xd7, 0x56, 0x8e, 0x8c,
    0x50, 0xfd, 0x22, 0xa6, 0x66, 0x9d, 0x6e, 0x1a, 0xd1, 0x9f, 0x51, 0x40, 0x4e, 0xb6, 0xc1,
    0xd1, 0xe6, 0xb7, 0x28, 0xa5, 0x53, 0x89, 0xdf, 0x95, 0x23, 0x3a, 0x91, 0x35, 0xba, 0xd3,
    0x0c, 0x93, 0xda, 0xf7, 0x75, 0x3d, 0x9d, 0x7d, 0xc3, 0x65, 0xa6, 0xc9, 0x26, 0x5a, 0x00,
    0xbd, 0x81, 0xc0, 0x5b, 0x2e, 0x70, 0x4a, 0x98, 0x8c, 0xf0, 0xd1, 0x6e, 0x55, 0x37, 0x20,
    0x66, 0x01, 0x4c, 0xe1, 0xf5, 0x9e, 0x25, 0x6c, 0x44, 0xd8, 0x43, 0xeb, 0xd6, 0xbb, 0x6c,
    0x1f, 0x0b, 0xab, 0x42, 0x6c, 0xd2, 0xed, 0xa7, 0x1b, 0xd7, 0xd1, 0x4d, 0xbe, 0x3d, 0x26,
    0x07, 0x7a, 0xd7, 0x83, 0xe2, 0x58, 0x55, 0xda, 0x22, 0x11, 0x75, 0x4c, 0xb3, 0xfd, 0xc2,
    0x83, 0x73, 0x4c, 0x73, 0x4e, 0xbe, 0x79, 0x05, 0x7b, 0xe9, 0x08, 0x06, 0xe0, 0x6b, 0x87,
    0xd4, 0xa3, 0xb7, 0xe7, 0x4c, 0xcf, 0x97, 0x40, 0x93, 0xf9, 0xa5, 0xed, 0x0e, 0x07, 0x4d,
    0xd0, 0xa5, 0xec, 0x99, 0xf2, 0x30, 0x2b, 0x79, 0x40, 0x52, 0x52, 0x50, 0x29, 0x84, 0xe9,
    0xed, 0x9e, 0xb6, 0x25, 0xc6, 0x00, 0x15, 0x1c, 0x3c, 0x1a, 0x43, 0xf9, 0x18, 0xfa, 0x3f,
    0x71, 0x16, 0x4f, 0x26, 0x79, 0x9a, 0xd1, 0x41, 0xb0, 0x19, 0xf1, 0x8c, 0xc7, 0xa3, 0x3b,
    0x77, 0x62, 0x2c, 0x29, 0x8a, 0x82, 0x82, 0xa6, 0xf2, 0xf8, 0x7d, 0x6f, 0xbd, 0x62, 0x46,
    0x48, 0x5a, 0xcb, 0xd8, 0xe5, 0x96, 0xb5, 0x35, 0x15, 0x89, 0x4f, 0x51, 0xe1, 0x86, 0xd8,
    0x72, 0x80, 0xf3, 0x65, 0x1c, 0x2f, 0x7a, 0xc9, 0x7e, 0xb4, 0x7e, 0x12, 0x5f, 0xd7, 0x28,
    0x0e, 0xda, 0x39, 0x03, 0xcd, 0xa0, 0xa0, 0x6c, 0x00, 0xc0, 0x62, 0xb8, 0xaa, 0x8f, 0xa1,
    0x0c, 0xe1, 0xd7, 0x1b, 0xa1, 0xf4, 0x31, 0x04, 0x04, 0x41, 0x97, 0x72, 0x40, 0xaa, 0x86,
    0xe3, 0x89, 0xd1, 0x2e, 0xce, 0x16, 0xaf, 0x9d, 0x07, 0x45, 0x01, 0x1a, 0xa9, 0xca, 0x09,
    0xc5, 0xa5, 0x5d, 0x6d, 0xeb, 0x46, 0x85, 0x71, 0x24, 0x22, 0x37, 0xc4, 0x33, 0x91, 0x62,
    0x0d, 0xf3, 0x94, 0xa8, 0x89, 0xd2, 0x49, 0x93, 0x38, 0x41, 0xe6, 0x88, 0xa5, 0x73, 0xdd,
    0x68, 0xf8, 0x76, 0x6f, 0x5e, 0xb0, 0x46, 0xb4, 0xc1, 0x85, 0x16, 0xfc, 0x7a, 0x72, 0x27,
    0xeb, 0xd9, 0x4d, 0x66, 0x8e, 0x6d, 0xa6, 0x5f, 0x69, 0x59, 0x02, 0xec, 0xc8, 0x66, 0xb5,
    0x1f, 0xbe, 0xa5, 0x6d, 0xbb, 0x5c, 0xe7, 0xbe, 0x03, 0x24, 0x45, 0x96, 0x88, 0xc7, 0x3c,
    0x04, 0x94, 0xf2, 0x29, 0x85, 0x7b, 0x13, 0x72, 0x16, 0xe4, 0x52, 0x52, 0xc3, 0xb8, 0x21,
    0x9d, 0x75, 0xec, 0xc6, 0x9f, 0x37, 0x76, 0x76, 0xaa, 0x82, 0x0a, 0xe4, 0xd9, 0x9b, 0x7c,
    0xac, 0xd0, 0xcc, 0xed, 0x1f, 0x8f, 0x1e, 0x30, 0x67, 0x4e, 0xd0, 0xb6, 0x22, 0x10, 0x1c,
    0x54, 0x83, 0x42, 0xd2, 0xb1, 0x51, 0x99, 0xd5, 0xe9, 0x4f, 0x96, 0xb7, 0xa5, 0xe7, 0xfb,
    0xe1, 0x00, 0x10, 0xf8, 0xfc, 0x5a, 0xe4, 0x55, 0xf1, 0x7c, 0xd2, 0x19, 0xee, 0x3c, 0x1f,
    0x0b, 0x76, 0xb9, 0xc0, 0x27, 0x61, 0xe2, 0xea, 0xff, 0x78, 0x84, 0xbc, 0x5c, 0x65, 0x09,
    0xbb, 0xbc, 0x98, 0xce, 0x43, 0x88, 0x89, 0x12, 0x6f, 0x64, 0x82, 0x1d, 0x4f, 0x11, 0xce,
    0xe6, 0xff, 0x86, 0x1e, 0xb1, 0x81, 0x4f, 0xe7, 0x9c, 0x24, 0x44, 0x7d, 0x59, 0xcd, 0x34,
    0x4a, 0x5b, 0x34, 0x09, 0x13, 0x87, 0xa8, 0xd0, 0xfa, 0x3e, 0xee, 0xdf, 0x60, 0x86, 0xb0,
    0xaa, 0xa9, 0x6e, 0x49, 0x38, 0x8e, 0xf2, 0xe5, 0x3c, 0xc6, 0x8c, 0x6e, 0xca, 0x3a, 0x5b,
    0xdd, 0xcf, 0x20, 0xc0, 0xed, 0xc6, 0x8b, 0x8a, 0x10, 0x22, 0x87, 0x84, 0x05, 0xb4, 0x7a,
    0x4b, 0x44, 0x3c, 0x06, 0x26, 0x3a, 0x9f, 0x55, 0xb9, 0xfc, 0x2b, 0xb7, 0x38, 0x9f, 0x4d,
    0x95, 0x4c, 0xb3, 0x9c, 0xb9, 0x91, 0xe9, 0x01, 0xa3, 0x37, 0xd2, 0x6c, 0xfc, 0x55, 0xe5,
    0x06, 0x4a, 0xb7, 0xa2, 0xe6, 0x7e, 0x0b, 0x2f, 0x9c, 0x04, 0xcc, 0xab, 0x47, 0x09, 0x0d,
    0xe2, 0xf2, 0x47, 0x5f, 0x86, 0x53, 0xe0, 0x48, 0x8e, 0xa3, 0xb5, 0x09, 0xec, 0x35, 0x6b,
    0x96, 0xce, 0xb9, 0xcc, 0x47, 0x77, 0xf9, 0xf4, 0xa6, 0xb0, 0x4c, 0xa6, 0x7d, 0x1b, 0x30,
    0xce, 0x0c, 0x2b, 0x74, 0xe8, 0xb5, 0x08, 0xb9, 0xad, 0x7a, 0x82, 0xef, 0xb9, 0x0c, 0x4e,
    0x12, 0x7e, 0x57, 0x3b, 0xc8, 0x9d, 0x01, 0x7e, 0x01, 0x97, 0xd2, 0x7b, 0xc6, 0xfd, 0x0e,
    0x27, 0x0c, 0x69, 0xb0, 0x8b, 0x9d, 0xd9, 0x41, 0xdc, 0x5b, 0x38, 0xc8, 0xf9, 0x06, 0x0e,
    0xbc, 0xa2, 0x11, 0xf0, 0x4a, 0xf3, 0xf8, 0x4a, 0x8e, 0xe5, 0x20, 0x47, 0xc7, 0x74, 0x00,
    0x99, 0x33, 0x86, 0xc4, 0x86, 0xac, 0x27, 0x75, 0xb8, 0x3d, 0xf3, 0x35, 0x72, 0xa3, 0x26,
    0x53, 0x8c, 0xe0, 0xc4, 0xf5, 0x77, 0xcc, 0xb6, 0x2f, 0xea, 0xe2, 0x8a, 0xe1, 0x19, 0x38,
    0x1f, 0xc9, 0x0b, 0x0c, 0x43, 0x10, 0x2d, 0x49, 0x60, 0x43, 0x3d, 0x19, 0x4b, 0x01, 0x81,
    0x89, 0x61, 0x5f, 0x7b, 0xe1, 0x9d, 0x3f, 0x4e, 0x61, 0x79, 0x0e, 0xe4, 0xea, 0xec, 0x26,
    0x02, 0x2b, 0xae, 0xce, 0xad, 0x46, 0xcb, 0x3f, 0xc1, 0xd2, 0x26, 0x4e, 0x20, 0x42, 0xf1,
    0x5d, 0x8b, 0x4c, 0xcc, 0x06, 0x10, 0xb8, 0xc9, 0x4a, 0xad, 0xfe, 0xb2, 0xe3, 0xb6, 0x4d,
    0x26, 0xe0, 0x41, 0x55, 0x4b, 0xe5, 0x10, 0x3c, 0xdc, 0x0c, 0x0a, 0x2a, 0x7c, 0x8d, 0xec,
    0x50, 0x2d, 0xd3, 0x86, 0x01, 0xa5, 0x56, 0x51, 0x71, 0x23, 0xb8, 0x7c, 0x4c, 0x1e, 0xd4,
    0xa9, 0x8b, 0xf2, 0xa9, 0x75, 0x7e, 0x6b, 0x67, 0x22, 0xe1, 0x7e, 0xb0, 0xca, 0xbc, 0x98,
    0xb5, 0x66, 0xf3, 0x65, 0xc5, 0x99, 0xad, 0xd6, 0x47, 0xd9, 0x28, 0x4e, 0xec, 0x82, 0x23,
    0xf7, 0x4e, 0x87, 0xdc, 0xb9, 0x42, 0x13, 0x78, 0xdb, 0x31, 0x11, 0x1b, 0xc7, 0x13, 0xab,
    0xc1, 0xfa, 0x39, 0xf9, 0x0b, 0x2d, 0xf5, 0x97, 0x6d, 0xfc, 0xc6, 0x6d, 0x39, 0x71, 0x52,
    0x90, 0x7d, 0x8d, 0xd9, 0xc5, 0xc2, 0xed, 0x75, 0xf4, 0x5c, 0xaf, 0xc8, 0x6a, 0x1e, 0x72,
    0x11, 0x9a, 0x28, 0x75, 0xaf, 0xe0, 0xb5, 0xc3, 0x37, 0x3a, 0x4d, 0xd8, 0x42, 0x81, 0x45,
    0x47, 0xda, 0x6e, 0x2d, 0xdf, 0xee, 0xec, 0xd4, 0x01, 0x4e, 0x44, 0xd5, 0x70, 0x98, 0x24,
    0xbd, 0x24, 0x5a, 0xa3, 0x55, 0x2f, 0xf5, 0xf9, 0xb0, 0x19, 0x17, 0xf9, 0x38, 0x9f, 0x4e,
    0x6c, 0x1e, 0xb3, 0xa2, 0x56, 0x18, 0xd2, 0x4a, 0xd7, 0x41, 0xc7, 0xe0, 0x44, 0xd2, 0xd2,
    0xd9, 0xf7, 0x39, 0x52, 0x11, 0x94, 0x75, 0x71, 0x34, 0x32, 0xb6, 0x9d, 0x15, 0x0e, 0x65,
    0xba, 0x3e, 0x5e, 0x60, 0x0a, 0xa4, 0xf5, 0x8d, 0xcb, 0x08, 0x4e, 0x8d, 0x39, 0x29, 0x92,
    0xf4, 0x31, 0x04, 0xe7, 0xf1, 0x59, 0xf4, 0x34, 0xbc, 0xcc, 0xf7, 0xac, 0x63, 0xf4, 0x45,
    0x69, 0x8a, 0x56, 0xf7, 0xcc, 0x6f, 0xfe, 0x81, 0x91, 0xc9, 0x71, 0x28, 0x57, 0xd0, 0x04,
    0xd2, 0x15, 0x05, 0xd1, 0x36, 0xaf, 0xa9, 0x7c, 0x14, 0xad, 0x67, 0x39, 0xba, 0x88, 0xde,
    0xa2, 0xf7, 0xc7, 0xed, 0xee, 0xdf, 0xf9, 0x3a, 0x8e, 0xeb, 0x1a, 0x07, 0xfe, 0x1a, 0x63,
    0xc0, 0xa8, 0x6f, 0xdc, 0x33, 0xc2, 0x59, 0x73, 0x77, 0xe7, 0x79, 0x78, 0xb1, 0xbd, 0x1f,
    0xc5, 0x0d, 0x6b, 0x53, 0x4b, 0xe2, 0x35, 0xbe, 0xa3, 0x72, 0x30, 0x2f, 0x61, 0x16, 0xd3,
    0x77, 0xb6, 0xb7, 0xa3, 0xf5, 0xcd, 0xe9, 0xdd, 0xe6, 0x74, 0x13, 0xff, 0x93, 0x31, 0x18,
    0x7b, 0xd7, 0x38, 0xe7, 0x7b, 0x83, 0x79, 0xa5, 0x5a, 0x46, 0xe0, 0xdd, 0x95, 0x19, 0xae,
    0x97, 0xbb, 0xbb, 0x2b, 0xcc, 0xd5, 0x01, 0x0c, 0x77, 0x8a, 0x41, 0xac, 0x85, 0x44, 0xc9,
    0xe1, 0x4c, 0xf2, 0xdc, 0x92, 0x17, 0xa0, 0xa9, 0x2d, 0x50, 0xba, 0x67, 0x92, 0xaf, 0x8a,
    0x85, 0x94, 0x47, 0xbe, 0x2a, 0xa9, 0x4a, 0x74, 0x91, 0xa2, 0xa0, 0x41, 0x1d, 0x67, 0xa5,
    0x81, 0x6c, 0x5e, 0xc6, 0x82, 0x1b, 0x2d, 0xc2, 0xe1, 0xeb, 0xa2, 0x0a, 0x93, 0x26, 0xa5,
    0xa5, 0xda, 0x32, 0x7c, 0xde, 0x25, 0x55, 0xbb, 0xb4, 0xc6, 0x5a, 0x75, 0x17, 0xe5, 0x01,
    0xd6, 0x43, 0x87, 0x84, 0x95, 0x09, 0x5f, 0x64, 0x6c, 0x67, 0xf7, 0x9f, 0x61, 0xa3, 0xf9,
    0xd3, 0xf3, 0x2f, 0xfd, 0x88, 0x74, 0x9b, 0xcf, 0x46, 0x69, 0xef, 0x99, 0x0c, 0x2b, 0x0d,
    0x31, 0xa8, 0xcf, 0x8a, 0x07, 0x6b, 0xa3, 0xd1, 0x68, 0xe0, 0x12, 0xf6, 0xbd, 0x87, 0xa7,
    0xbb, 0xdd, 0x88, 0xfe, 0xb4, 0xf5, 0x7c, 0xa7, 0xd1, 0x6c, 0xee, 0xec, 0x34, 0xa0, 0x5c,
    0xd9, 0xda, 0x7d, 0xde, 0x84, 0x7f, 0x1f, 0x0c, 0x83, 0x8a, 0x67, 0x0e, 0x1b, 0xc8, 0x14,
    0xf9, 0x52, 0x38, 0xdc, 0x99, 0x48, 0xfd, 0xfb, 0x07, 0x79, 0x54, 0x4c, 0xd0, 0x69, 0xf2,
    0x61, 0xa4, 0x40, 0x27, 0x5d, 0x91, 0x08, 0x79, 0x78, 0xd1, 0x7d, 0x9d, 0xa3, 0x65, 0xea,
    0x89, 0xc3, 0x92, 0x26, 0x0a, 0x1d, 0xd0, 0x38, 0x89, 0x67, 0xfe, 0xc2, 0x51, 0x67, 0x46,
    0xa5, 0x45, 0x84, 0x57, 0xac, 0x38, 0x06, 0xfe, 0x21, 0x85, 0x9d, 0x8e, 0x9a, 0x28, 0x68,
    0x53, 0xaf, 0x70, 0xeb, 0xba, 0x9a, 0xc6, 0x93, 0x6b, 0x75, 0x2b, 0x3e, 0x2e, 0x7f, 0xa2,
    0xab, 0x48, 0xf0, 0xc5, 0x8c, 0x43, 0x3a, 0x63, 0x30, 0x50, 0x14, 0x2b, 0x10, 0x48, 0xcb,
    0xa5, 0x2a, 0x30, 0xc1, 0x6b, 0x45, 0xee, 0x87, 0x46, 0x7c, 0x43, 0x63, 0x43, 0x7e, 0x3b,
    0x92, 0x99, 0x50, 0x3e, 0x0f, 0x30, 0xc2, 0x2c, 0xde, 0xde, 0x29, 0xf7, 0xb7, 0x37, 0x76,
    0x49, 0xb6, 0xe1, 0xcc, 0xc1, 0x64, 0x74, 0x73, 0xbc, 0x1a, 0x0e, 0xe5, 0xd5, 0xf2, 0x0a,
    0x91, 0x42, 0x0e, 0x8d, 0xce, 0x06, 0x2c, 0xab, 0x95, 0x75, 0x57, 0x81, 0x2f, 0xf6, 0x74,
    0x93, 0x70, 0x42, 0x72, 0x9d, 0x84, 0xbc, 0x97, 0x88, 0x0f, 0x6a, 0x33, 0xd7, 0xbb, 0x78,
    0xc6, 0x6e, 0xe7, 0x48, 0xa7, 0xb7, 0xc9, 0x74, 0x81, 0xf1, 0xab, 0x51, 0xd1, 0x53, 0xa0,
    0xe0, 0x22, 0xba, 0x4b, 0xd0, 0x0e, 0xc9, 0xd8, 0xe4, 0x09, 0xd6, 0xba, 0x68, 0x0a, 0x6e,
    0x6f, 0xf9, 0xaf, 0x8d, 0xa0, 0xa5, 0x7a, 0x17, 0xe6, 0xf7, 0xff, 0xfe, 0x9f, 0xef, 0xf2,
    0xfc, 0xb5, 0x8b, 0x36, 0x46, 0xf1, 0x9a, 0xa6, 0x74, 0x2d, 0xb6, 0x1b, 0xb9, 0x86, 0xd2,
    0x1d, 0x68, 0x52, 0x24, 0x3c, 0xbf, 0x28, 0xa3, 0xd5, 0x3e, 0xea, 0x28, 0x7b, 0x56, 0x2a,
    0x52, 0x78, 0xf2, 0xf1, 0x18, 0x50, 0x44, 0x09, 0x9c, 0x03, 0xd1, 0xec, 0x8d, 0x54, 0xee,
    0x9b, 0x2e, 0xde, 0xd2, 0xea, 0x1b, 0x2e, 0xa3, 0x21, 0x57, 0x53, 0x84, 0xe2, 0x0b, 0xe6,
    0x3a, 0x12, 0xc1, 0x65, 0x25, 0x19, 0x0e, 0x12, 0xe0, 0x3f, 0x79, 0x72, 0xdf, 0xcb, 0x34,
    0xc9, 0x9d, 0x2a, 0x13, 0xf2, 0xf3, 0x18, 0x0d, 0xca, 0xd8, 0xbf, 0xce, 0x73, 0x40, 0x69,
    0x0d, 0xc3, 0x52, 0x15, 0xca, 0x98, 0x71, 0x1b, 0xe4, 0x6d, 0x8a, 0xe0, 0x64, 0x0e, 0xec,
    0xf5, 0x6f, 0xee, 0xff, 0x18, 0x5e, 0x6d, 0x0e, 0xbc, 0xf2, 0xc3, 0xee, 0xfe, 0xcb, 0xf6,
    0xd6, 0x56, 0x73, 0xa7, 0xb4, 0xff, 0x6f, 0x3f, 0xdf, 0x7a, 0xda, 0xff, 0x1f, 0xe3, 0x71,
    0xd7, 0xdd, 0x4e, 0x67, 0xbb, 0xb9, 0x2b, 0x4c, 0x5e, 0x50, 0xbb, 0xec, 0x0a, 0x0e, 0xae,
    0x82, 0x5e, 0xff, 0x8d, 0xa2, 0x65, 0x87, 0x93, 0xcb, 0x0b, 0x40, 0x64, 0xf8, 0xe3, 0xc9,
    0x18, 0x6c, 0x28, 0x20, 0xa3, 0x0c, 0xc0, 0xe3, 0xbd, 0x68, 0x98, 0x5b, 0x01, 0x69, 0xab,
    0xe4, 0x45, 0xc2, 0x45, 0x32, 0xe8, 0x48, 0xe5, 0xd7, 0x83, 0xb8, 0x69, 0x7a, 0xcd, 0x12,
    0x36, 0xd6, 0x33, 0x33, 0xd9, 0x57, 0x0f, 0xd9, 0x6b, 0xd8, 0x30, 0xf1, 0xaa, 0xea, 0x1f,
    0x03, 0x3f, 0x0b, 0x26, 0xbf, 0xf8, 0xc9, 0x6c, 0xc4, 0xb8, 0x68, 0xaf, 0x3c, 0xad, 0x3e,
    0x92, 0x07, 0x4e, 0x68, 0x56, 0xc3, 0x0d, 0x39, 0x53, 0x14, 0xc4, 0xcd, 0x0f, 0xce, 0x3f,
    0x4b, 0xa6, 0xc5, 0x3f, 0xe6, 0xe5, 0x96, 0xdd, 0x01, 0xf7, 0x61, 0xf4, 0xb3, 0x6f, 0x80,
    0x10, 0xe1, 0x0e, 0xbc, 0xfd, 0x62, 0xf7, 0xe8, 0x93, 0x11, 0x0c, 0x71, 0x69, 0xa9, 0x16,
    0x2b, 0x07, 0xa6, 0x86, 0x22, 0xde, 0xa8, 0x8f, 0x15, 0x8d, 0x78, 0x81, 0x94, 0x08, 0x6a,
    0xd8, 0xad, 0xaa, 0x1e, 0xbc, 0xdc, 0x09, 0x21, 0xfe, 0x72, 0xa7, 0x94, 0x7a, 0xd0, 0xac,
    0x46, 0xf6, 0xe5, 0x8e, 0x17, 0xd9, 0xd5, 0xe0, 0x3d, 0xdd, 0x36, 0x3f, 0xe7, 0x31, 0xcf,
    0xe0, 0x42, 0x93, 0x4f, 0x0f, 0x7d, 0xf8, 0xff, 0x69, 0xd9, 0xf9, 0xdf, 0xd8, 0xda, 0xdd,
    0xcf, 0xff, 0xe6, 0xee, 0x56, 0xeb, 0xe9, 0xfc, 0x7f, 0x8c, 0x47, 0x2c, 0x9e, 0xbf, 0xb0,
    0xf2, 0x9b, 0xfa, 0x33, 0x99, 0xc9, 0x3a, 0x9f, 0x7e, 0xf3, 0xea, 0xab, 0xf2, 0x57, 0x4c,
    0x95, 0xe2, 0xa9, 0xec, 0xfb, 0xaa, 0x05, 0x08, 0xbe, 0xaf, 0x92, 0xbd, 0xf4, 0x7d, 0x63,
    0xbd, 0x4d, 0xda, 0x0b, 0x7c, 0xdf, 0x55, 0xe4, 0x01, 0xef, 0xc7, 0x79, 0x4f, 0x24, 0x63,
    0xbf, 0xc6, 0x45, 0xa4, 0x3e, 0x94, 0x8b, 0x7e, 0xf3, 0xb4, 0x59, 0xd0, 0x63, 0xae, 0x7f,
    0x38, 0xcf, 0xfa, 0x68, 0xe2, 0xf4, 0x60, 0xfb, 0xc1, 0x12, 0xf9, 0xcf, 0xf6, 0xf3, 0x92,
    0xe7, 0x39, 0xfc, 0xfd, 0xb4, 0xfe, 0x1f, 0xe3, 0x09, 0xe8, 0x28, 0xd1, 0x7e, 0xc6, 0xb5,
    0x04, 0xce, 0xb0, 0x4a, 0xf7, 0x48, 0xc1, 0xb3, 0xde, 0xe6, 0xf9, 0x20, 0x4b, 0x4c, 0x61,
    0x9b, 0xc5, 0xc1, 0x15, 0x78, 0x36, 0xa3, 0xd4, 0xed, 0x03, 0x79, 0x5b, 0x3d, 0x3b, 0x3f,
    0xb8, 0xf8, 0xf1, 0xe3, 0xdb, 0xd3, 0xd3, 0xd7, 0x70, 0x9b, 0x68, 0xd4, 0xec, 0x0a, 0x22,
    0x92, 0x59, 0xe1, 0xfc, 0xa8, 0xfd, 0xee, 0x9d, 0xaa, 0xd0, 0x74, 0x2a, 0x60, 0xd0, 0x4a,
    0xdc, 0x65, 0xd7, 0x69, 0x1f, 0xb7, 0xff, 0x0b, 0xc3, 0x74, 0xa9, 0x6a, 0xad, 0x00, 0xe2,
    0xbb, 0x04, 0x45, 0x0e, 0x25, 0xdc, 0xc9, 0xc0, 0x3e, 0xe6, 0x8f, 0xca, 0x8c, 0xaf, 0xfd,
    0x51, 0xf7, 0xf4, 0xf8, 0x08, 0xd1, 0xf6, 0xab, 0xcb, 0x64, 0x6c, 0x02, 0xf6, 0xa9, 0x1c,
    0x37, 0xa7, 0x32, 0xe3, 0x7c, 0x34, 0x98, 0xb3, 0xff, 0xa0, 0x0c, 0x84, 0x4a, 0xf6, 0x02,
    0xa9, 0x5d, 0xa9, 0xd6, 0x65, 0x4e, 0xd0, 0x00, 0xb0, 0xb9, 0xdb, 0xa8, 0xd0, 0x64, 0x9e,
    0x61, 0x22, 0x4d, 0x79, 0x96, 0xe1, 0xee, 0x9a, 0x89, 0x2f, 0x18, 0xcf, 0x5f, 0xfe, 0x5d,
    0xc2, 0xf8, 0x3c, 0xfc, 0x39, 0x30, 0x1a, 0x0c, 0x81, 0x11, 0x10, 0x4d, 0x8c, 0xc0, 0x1a,
    0xbb, 0xe6, 0xf5, 0x1b, 0x87, 0xf2, 0x7e, 0x53, 0x0c, 0x0e, 0x9a, 0x2d, 0xe1, 0x55, 0x24,
    0xc8, 0xec, 0xbe, 0xb8, 0x36, 0x76, 0xfc, 0xfb, 0x4c, 0x41, 0xab, 0xb0, 0xea, 0xfe, 0x3b,
    0xc7, 0xb3, 0xcf, 0xba, 0x8a, 0x48, 0x10, 0x44, 0x10, 0x4a, 0x4c, 0x63, 0x4b, 0xba, 0xf3,
    0xaf, 0xd3, 0xdf, 0xea, 0xf1, 0xef, 0xff, 0x0f, 0xcb, 0x09, 0x2e, 0xe3, 0xff, 0x1a, 0x4d,
    0xff, 0xdf, 0xda, 0x6d, 0x35, 0x9e, 0xf6, 0xff, 0xc7, 0x78, 0x4c, 0x76, 0x89, 0x4e, 0x7d,
    0xea, 0xe1, 0x2f, 0x87, 0xa1, 0x4a, 0x8b, 0x7c, 0x44, 0x92, 0x4c, 0x59, 0x48, 0xbe, 0xf0,
    0x65, 0xe3, 0x45, 0x98, 0x9f, 0x63, 0x7e, 0xef, 0xa3, 0xc9, 0x8e, 0x99, 0xed, 0xa0, 0x77,
    0x47, 0xb5, 0x67, 0x16, 0xaa, 0x1a, 0xbd, 0x2a, 0x36, 0x67, 0xf9, 0xe6, 0x84, 0x6c, 0xa6,
    0xb8, 0xb8, 0x2f, 0x7d, 0xfc, 0xeb, 0xdf, 0x1d, 0xe7, 0x2f, 0xdb, 0x10, 0x96, 0xac, 0x7f,
    0x00, 0xdd, 0xf5, 0xbf, 0xdb, 0x6c, 0x3d, 0xc9, 0x7f, 0x1f, 0xe5, 0xe1, 0xb8, 0x70, 0xd1,
    0xd1, 0xf1, 0x82, 0x4f, 0xda, 0x5f, 0xe5, 0x62, 0xab, 0xeb, 0x35, 0xa9, 0x8f, 0x51, 0x51,
    0x5c, 0xb1, 0x33, 0xa5, 0x20, 0x05, 0xe2, 0xc3, 0x9e, 0x2c, 0xfa, 0xef, 0x7c, 0x78, 0xfe,
    0x3c, 0x81, 0xf3, 0x5f, 0x6c, 0xeb, 0x0f, 0xc3, 0x02, 0xdc, 0x5f, 0xfe, 0xb3, 0xbd, 0xdd,
    0x79, 0x5a, 0xff, 0x8f, 0xf1, 0xa8, 0xf5, 0x6f, 0x32, 0xc8, 0xbf, 0x96, 0x98, 0x00, 0x71,
    0x39, 0xa2, 0xa4, 0xa1, 0x85, 0x88, 0x26, 0xe9, 0x9a, 0x66, 0x4e, 0x93, 0xab, 0x14, 0x8e,
    0xa9, 0xf0, 0x45, 0x12, 0x2e, 0xa9, 0x68, 0xcb, 0xab, 0xcd, 0xde, 0x53, 0x71, 0x9a, 0x93,
    0xef, 0x1c, 0xde, 0x6c, 0x0a, 0x33, 0xcf, 0x8a, 0xb8, 0x16, 0x8c, 0x9a, 0xa3, 0x20, 0x22,
    0xef, 0xba, 0x34, 0x89, 0x35, 0xb0, 0x0f, 0x45, 0xd8, 0x2f, 0xdd, 0x71, 0x7e, 0xef, 0xa1,
    0x97, 0x78, 0xfc, 0xeb, 0x5f, 0xb2, 0x6e, 0x8f, 0xb2, 0xfe, 0x77, 0x1b, 0xbb, 0xa5, 0xf5,
    0xf5, 0xa4, 0xff, 0x7d, 0x9c, 0x47, 0xad, 0x7f, 0x97, 0x23, 0x37, 0x36, 0x01, 0x0f, 0xb3,
    0xaa, 0x19, 0x72, 0x93, 0x9a, 0x92, 0xfe, 0xd4, 0xcc, 0xab, 0x75, 0x79, 0x33, 0xd1, 0x95,
    0xe6, 0x19, 0x2f, 0xd3, 0x61, 0xef, 0x01, 0x92, 0x3d, 0x31, 0x94, 0x40, 0x2e, 0x5a, 0x75,
    0x26, 0x3d, 0x5a, 0xb0, 0xff, 0x76, 0xbd, 0x73, 0x12, 0x8f, 0x93, 0x02, 0xc8, 0xbb, 0x9c,
    0x56, 0x5a, 0xaa, 0x1b, 0x12, 0x03, 0xeb, 0xbb, 0xb0, 0x35, 0x6e, 0x87, 0xc2, 0x00, 0x5f,
    0x21, 0xd7, 0xdf, 0x54, 0x8f, 0xeb, 0xb6, 0xa0, 0xc9, 0xa9, 0x10, 0x1b, 0xc2, 0xa5, 0xbf,
    0x43, 0x56, 0x17, 0x92, 0x24, 0x2e, 0x1f, 0x8b, 0xe1, 0xd8, 0xd7, 0x39, 0x79, 0xfc, 0x1a,
    0x0b, 0xf9, 0x2f, 0xdb, 0xcb, 0xfc, 0xeb, 0xbf, 0x3c, 0xb4, 0x5f, 0xb2, 0x0f, 0x2c, 0x59,
    0x3b, 0x8d, 0x96, 0xbb, 0xfe, 0x77, 0x9a, 0xcf, 0x9f, 0xce, 0xff, 0x47, 0x79, 0xd4, 0x5a,
    0x92, 0xdb, 0xf2, 0x7a, 0x75, 0x16, 0x64, 0x26, 0x17, 0x56, 0x79, 0xcf, 0xe0, 0x85, 0xa6,
    0x98, 0x2b, 0xd2, 0xf0, 0x4d, 0x30, 0x13, 0xc2, 0xb9, 0xab, 0x54, 0x3e, 0xcb, 0x56, 0x23,
    0xbf, 0x7e, 0xa5, 0xff, 0xef, 0x98, 0x62, 0x1b, 0x70, 0x8d, 0x2d, 0x63, 0xc9, 0x0e, 0xb1,
    0xbb, 0xaa, 0xad, 0xd2, 0x96, 0xb0, 0xa7, 0xc6, 0x51, 0x97, 0xae, 0xc8, 0x62, 0xf1, 0xeb,
    0xce, 0x86, 0x98, 0xeb, 0xdf, 0x54, 0xc2, 0x3d, 0xa4, 0x1a, 0x78, 0xc9, 0xfa, 0x6f, 0xed,
    0xe5, 0x7f, 0xad, 0xc6, 0xf3, 0xa7, 0xf5, 0xff, 0x18, 0x8f, 0x5a, 0xff, 0xe5, 0x83, 0xff,
    0xc9, 0xbd, 0x8b, 0x34, 0x0f, 0x9b, 0xa8, 0x15, 0xde, 0x04, 0x1a, 0x09, 0x1d, 0xcf, 0xbc,
    0xe8, 0x88, 0x96, 0x66, 0x5b, 0xd5, 0x06, 0x5d, 0xfa, 0x68, 0xc1, 0xaa, 0x18, 0x28, 0x80,
    0xce, 0x80, 0xf3, 0xc4, 0xbd, 0x3f, 0xc6, 0x63, 0x9d, 0xff, 0x52, 0xc9, 0xfe, 0xc0, 0x36,
    0xd5, 0xeb, 0x7f, 0xa7, 0xe9, 0xb1, 0xff, 0xdc, 0xd9, 0x7a, 0x92, 0xff, 0x3f, 0xca, 0x83,
    0x4e, 0xcb, 0x4c, 0xdb, 0x6b, 0x4f, 0x7d, 0x64, 0x14, 0x70, 0x23, 0x23, 0x95, 0xab, 0x3b,
    0x41, 0xfe, 0xc3, 0x97, 0xa9, 0x63, 0xb5, 0xc6, 0x3b, 0x66, 0xeb, 0xae, 0x27, 0x73, 0x10,
    0xf1, 0x7c, 0x26, 0x82, 0xe4, 0x4b, 0x87, 0x6f, 0xc7, 0x7c, 0x3d, 0x50, 0x8d, 0xe5, 0x0a,
    0x69, 0x7a, 0x10, 0x49, 0x27, 0xcf, 0xb8, 0x51, 0xc8, 0x71, 0x29, 0xf8, 0xec, 0x41, 0xfa,
    0xfa, 0x68, 0xee, 0xa5, 0xb2, 0x65, 0x3b, 0xaa, 0x6c, 0x4d, 0x82, 0x76, 0x82, 0xe8, 0x6e,
    0x26, 0xa3, 0x47, 0xda, 0x65, 0x73, 0xf0, 0x9c, 0xb4, 0x5b, 0xde, 0xa6, 0x4e, 0xcf, 0x2e,
    0xa7, 0x27, 0x1f, 0xdb, 0xb6, 0xed, 0x40, 0x55, 0xd1, 0x03, 0xb4, 0x1a, 0x90, 0x28, 0xb1,
    0x48, 0xc0, 0x4b, 0x1b, 0x3f, 0x95, 0xc9, 0x5c, 0x57, 0xb9, 0x1f, 0x81, 0x57, 0x34, 0xd5,
    0xb6, 0xbc, 0x44, 0x6d, 0x37, 0xb7, 0xc2, 0x54, 0x3b, 0x15, 0xfc, 0x53, 0x51, 0x42, 0xa6,
    0xf4, 0x12, 0x3e, 0x97, 0x88, 0xf7, 0xde, 0x5d, 0x7f, 0xa8, 0x5e, 0x3c, 0x0c, 0xa9, 0x7e,
    0xc8, 0xb0, 0xf1, 0x03, 0x7d, 0x75, 0x09, 0xd3, 0x06, 0x1c, 0x20, 0x49, 0x6f, 0x21, 0x8b,
    0x0d, 0x17, 0x91, 0x74, 0xc6, 0x11, 0x87, 0xee, 0xa6, 0x18, 0x8d, 0x3a, 0x96, 0x2e, 0xd0,
    0xe2, 0x79, 0xad, 0x6a, 0x95, 0x69, 0xd5, 0x80, 0x78, 0x47, 0xde, 0xf9, 0x8b, 0x24, 0xbe,
    0x3f, 0xe9, 0x1a, 0x60, 0xe6, 0x45, 0x32, 0x4a, 0x0a, 0x33, 0x30, 0xbd, 0x97, 0xa0, 0x35,
    0x5e, 0xa2, 0x36, 0x00, 0xf6, 0xa5, 0x2b, 0x6a, 0x8f, 0xe2, 0xa0, 0xdc, 0x83, 0x44, 0x0c,
    0xe8, 0xd7, 0x9d, 0xf6, 0x29, 0x43, 0x68, 0x34, 0x99, 0x4f, 0x27, 0x79, 0xb1, 0x6c, 0x9a,
    0xca, 0xb1, 0x34, 0x4b, 0xea, 0x71, 0x04, 0x73, 0x5e, 0x02, 0xe1, 0x40, 0x63, 0xb2, 0x62,
    0x79, 0x18, 0x30, 0x65, 0x68, 0x44, 0x8c, 0x5c, 0x28, 0x82, 0x67, 0xad, 0xdd, 0xc5, 0x3f,
    0xf9, 0x5a, 0x8d, 0xdd, 0x6e, 0x31, 0x77, 0x81, 0x88, 0x7c, 0xa6, 0xe2, 0x64, 0x25, 0x83,
    0x59, 0x5a, 0xe6, 0x30, 0x90, 0x5f, 0xaf, 0x4a, 0x6b, 0xd7, 0x4b, 0x92, 0x4c, 0x0e, 0xe4,
    0x8d, 0x2b, 0x75, 0xc3, 0xcc, 0xc9, 0x00, 0x3f, 0xd7, 0x90, 0x30, 0xd7, 0xa2, 0xfc, 0x26,
    0x3c, 0xec, 0xf2, 0xb4, 0xc9, 0x9f, 0x0c, 0xae, 0xa2, 0x5e, 0x3c, 0xc0, 0x1c, 0x1d, 0xf1,
    0xb3, 0x49, 0x09, 0x51, 0x2c, 0xd2, 0x10, 0x91, 0x1c, 0xd0, 0xd7, 0x0b, 0xc1, 0x71, 0x64,
    0xdf, 0x04, 0xd3, 0x0a, 0xd7, 0xf3, 0xeb, 0xae, 0x72, 0x03, 0x28, 0xc3, 0x88, 0xda, 0x72,
    0x29, 0x25, 0xf3, 0x92, 0xf5, 0x5f, 0xae, 0x7e, 0x80, 0xd5, 0x6f, 0xd2, 0x6c, 0x40, 0xfd,
    0x01, 0x3d, 0xe4, 0x55, 0xdb, 0x83, 0x4c, 0xb6, 0x15, 0x60, 0xcd, 0xf8, 0xa3, 0x8f, 0x2d,
    0xd5, 0xee, 0xcb, 0x92, 0x55, 0x34, 0xd8, 0x91, 0x2d, 0x06, 0x58, 0x31, 0xbb, 0xd1, 0x95,
    0x14, 0xa7, 0x4a, 0x88, 0x89, 0x28, 0x21, 0xe5, 0xb2, 0x5f, 0x5c, 0xc0, 0xc3, 0x7a, 0xdd,
    0x20, 0x1e, 0xb2, 0x3f, 0x0f, 0xc5, 0x6e, 0x7d, 0xe9, 0x28, 0x09, 0x36, 0x8b, 0xbf, 0x97,
    0x2c, 0x1b, 0x7c, 0x90, 0xbd, 0xf2, 0x16, 0x93, 0xe4, 0xfa, 0x7b, 0xdf, 0x66, 0x9e, 0x9e,
    0x3e, 0x5e, 0xf9, 0xff, 0x03, 0x7b, 0x80, 0x2e, 0x93, 0xff, 0x97, 0xef, 0xff, 0x5b, 0x8d,
    0xf9, 0xdf, 0xe3, 0x3c, 0xf7, 0x97, 0xff, 0x39, 0xa6, 0x00, 0xaa, 0xde, 0x26, 0x83, 0x92,
    0xa2, 0x19, 0x08, 0x9c, 0x7d, 0xe8, 0xf0, 0x9e, 0xf5, 0x53, 0x61, 0x0d, 0x0d, 0x7c, 0x0f,
    0x90, 0x57, 0x56, 0x03, 0x15, 0x7a, 0xff, 0xf7, 0x93, 0x7e, 0x8c, 0x81, 0xdd, 0xce, 0x93,
    0x1e, 0xe5, 0xc4, 0xcd, 0x18, 0xc2, 0x7c, 0x2d, 0x42, 0xec, 0x98, 0x25, 0x56, 0x8a, 0x70,
    0x5a, 0x12, 0x4f, 0x19, 0x40, 0x3e, 0x35, 0x25, 0x93, 0xe7, 0xf2, 0x65, 0x55, 0x54, 0xb4,
    0x0c, 0x2b, 0x39, 0xf8, 0xab, 0xdc, 0xc8, 0xe7, 0x19, 0x05, 0x51, 0xfe, 0xd6, 0x48, 0x62,
    0xc8, 0x62, 0x80, 0x40, 0x5b, 0xea, 0x69, 0x60, 0x7c, 0x04, 0xdf, 0x17, 0x18, 0xda, 0xe9,
    0xd8, 0x3f, 0xe5, 0xfa, 0xc7, 0xfc, 0x35, 0xf4, 0xbf, 0x3a, 0x4e, 0xf5, 0xa3, 0xae, 0x7f,
    0xee, 0xe5, 0xf8, 0x1f, 0x8d, 0x27, 0xfd, 0xff, 0xa3, 0x3c, 0x4f, 0xce, 0x93, 0xff, 0x7f,
    0x72, 0xfd, 0x4f, 0x73, 0x0c, 0x47, 0x1a, 0x3f, 0x13, 0x91, 0x2f, 0x60, 0xf9, 0x6f, 0x0e,
    0x4f, 0xe8, 0x07, 0xf4, 0xe5, 0x6d, 0x2c, 0x5b, 0xff, 0x65, 0xfb, 0xdf, 0xed, 0xed, 0x27,
    0xff, 0xc7, 0x79, 0xc4, 0xf9, 0xcf, 0xf6, 0xff, 0xb0, 0xf3, 0x4b, 0xe5, 0x3f, 0x1c, 0xf4,
    0x3d, 0x7b, 0xf6, 0x8c, 0xb2, 0x51, 0x3c, 0xed, 0x0c, 0xff, 0xbe, 0x8f, 0xbb, 0xfe, 0x31,
    0xe1, 0xa6, 0xf6, 0x01, 0x7e, 0x90, 0x7d, 0x60, 0x99, 0xfd, 0x7f, 0xb3, 0x64, 0xff, 0xb7,
    0xd8, 0x7d, 0xb2, 0xff, 0x79, 0x94, 0xa7, 0x62, 0xfd, 0x13, 0xbf, 0x1b, 0x69, 0x5a, 0x80,
    0x3e, 0x05, 0x2e, 0x42, 0xfe, 0xf0, 0x50, 0xbd, 0x45, 0x6d, 0xfc, 0xd3, 0x4e, 0xf1, 0x87,
    0xcc, 0xfb, 0x3f, 0x5c, 0xe7, 0x28, 0x47, 0x43, 0x7d, 0xf6, 0x69, 0xf6, 0x90, 0x6d, 0x2c,
    0xff, 0x5b, 0xe5, 0xf8, 0x7f, 0xdb, 0x8d, 0xa7, 0xf5, 0xff, 0x28, 0xcf, 0x77, 0xc9, 0x68,
    0xd7, 0x22, 0x39, 0xf5, 0x5f, 0xff, 0xde, 0xf8, 0x3c, 0x3d, 0x8f, 0xfb, 0xc8, 0xf5, 0x5f,
    0x8a, 0x51, 0x9a, 0xcd, 0xa6, 0xfd, 0xfa, 0x22, 0x1e, 0x8f, 0x1e, 0xb6, 0x8d, 0xa5, 0xfc,
    0xd9, 0xfe, 0x87, 0xee, 0x04, 0x4f, 0xeb, 0xff, 0xb7, 0x7f, 0x36, 0x37, 0x37, 0xbf, 0x12,
    0xf0, 0x7b, 0x51, 0xbd, 0xfe, 0x0c, 0xfe, 0x63, 0x4a, 0xd8, 0xc4, 0x64, 0x16, 0xe9, 0x15,
    0xc3, 0xd3, 0xb1, 0xfe, 0xf4, 0x3c, 0x3d, 0x4f, 0xcf, 0xd3, 0xf3, 0x6f, 0xf7, 0xfc, 0x3f,
    0x5b, 0x8b, 0x19, 0x00, 0xea, 0x10,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc.go 1`] = `
package jsiicalc

import (
    "github.com/aws-cdk/jsii/jsii"
)

type AbstractClassIface interface {
    GetPropFromInterface() string
    SetPropFromInterface()
    AbstractMethod() string
    NonAbstractMethod() float64
}

type AbstractClass struct {
    PropFromInterface string
}

func (a *AbstractClass) AbstractMethod() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AbstractClass",
        Method: "AbstractMethod",
        Args: []string{"string",},

    })
    return "NOOP_RETURN_STRING"
}

func (a *AbstractClass) NonAbstractMethod() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AbstractClass",
        Method: "NonAbstractMethod",
        Args: []string{},

    })
    return 0.0
}

type AbstractClassBaseIface interface {
    GetAbstractProperty() string
    SetAbstractProperty()
}

type AbstractClassBase struct {
    AbstractProperty string
}

type AbstractClassReturnerIface interface {
    GetReturnAbstractFromProperty() AbstractClassBase
    SetReturnAbstractFromProperty()
    GiveMeAbstract() AbstractClass
    GiveMeInterface() IInterfaceImplementedByAbstractClass
}

type AbstractClassReturner struct {
    ReturnAbstractFromProperty AbstractClassBase
}

func (a *AbstractClassReturner) GiveMeAbstract() AbstractClass  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AbstractClassReturner",
        Method: "GiveMeAbstract",
        Args: []string{},

    })
    return AbstractClass{}
}

func (a *AbstractClassReturner) GiveMeInterface() IInterfaceImplementedByAbstractClass  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AbstractClassReturner",
        Method: "GiveMeInterface",
        Args: []string{},

    })
    return nil
}

type AbstractSuiteIface interface {
    GetProperty() string
    SomeMethod() string
    WorkItAll() string
}

type AbstractSuite struct {
    Property string
}

func (a *AbstractSuite) SomeMethod() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AbstractSuite",
        Method: "SomeMethod",
        Args: []string{"string",},

    })
    return "NOOP_RETURN_STRING"
}

func (a *AbstractSuite) WorkItAll() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AbstractSuite",
        Method: "WorkItAll",
        Args: []string{"string",},

    })
    return "NOOP_RETURN_STRING"
}

type AddIface interface {
    GetValue() float64
    SetValue()
    ToString() string
}

type Add struct {
    Value float64
}

func (a *Add) ToString() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Add",
        Method: "ToString",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type AllTypesIface interface {
    GetEnumPropertyValue() float64
    SetEnumPropertyValue()
    GetAnyArrayProperty() []jsii.Any
    SetAnyArrayProperty()
    GetAnyMapProperty() map[string]jsii.Any
    SetAnyMapProperty()
    GetAnyProperty() jsii.Any
    SetAnyProperty()
    GetArrayProperty() []string
    SetArrayProperty()
    GetBooleanProperty() bool
    SetBooleanProperty()
    GetDateProperty() string
    SetDateProperty()
    GetEnumProperty() AllTypesEnum
    SetEnumProperty()
    GetJsonProperty() map[string]jsii.Any
    SetJsonProperty()
    GetMapProperty() map[string]jsii.Any
    SetMapProperty()
    GetNumberProperty() float64
    SetNumberProperty()
    GetStringProperty() string
    SetStringProperty()
    GetUnionArrayProperty() []jsii.Any
    SetUnionArrayProperty()
    GetUnionMapProperty() map[string]jsii.Any
    SetUnionMapProperty()
    GetUnionProperty() jsii.Any
    SetUnionProperty()
    GetUnknownArrayProperty() []jsii.Any
    SetUnknownArrayProperty()
    GetUnknownMapProperty() map[string]jsii.Any
    SetUnknownMapProperty()
    GetUnknownProperty() jsii.Any
    SetUnknownProperty()
    GetOptionalEnumValue() StringEnum
    SetOptionalEnumValue()
    AnyIn() jsii.Any
    AnyOut() jsii.Any
    EnumMethod() StringEnum
}

type AllTypes struct {
    EnumPropertyValue float64
    AnyArrayProperty []jsii.Any
    AnyMapProperty map[string]jsii.Any
    AnyProperty jsii.Any
    ArrayProperty []string
    BooleanProperty bool
    DateProperty string
    EnumProperty AllTypesEnum
    JsonProperty map[string]jsii.Any
    MapProperty map[string]jsii.Any
    NumberProperty float64
    StringProperty string
    UnionArrayProperty []jsii.Any
    UnionMapProperty map[string]jsii.Any
    UnionProperty jsii.Any
    UnknownArrayProperty []jsii.Any
    UnknownMapProperty map[string]jsii.Any
    UnknownProperty jsii.Any
    OptionalEnumValue StringEnum
}

func (a *AllTypes) AnyIn() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AllTypes",
        Method: "AnyIn",
        Args: []string{"any",},

    })
    return nil
}

func (a *AllTypes) AnyOut() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AllTypes",
        Method: "AnyOut",
        Args: []string{},

    })
    return nil
}

func (a *AllTypes) EnumMethod() StringEnum  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AllTypes",
        Method: "EnumMethod",
        Args: []string{"jsii-calc.StringEnum",},

    })
    return "ENUM_DUMMY"
}

type AllTypesEnum string

const (
    AllTypesEnumMyEnumValue AllTypesEnum = "MY_ENUM_VALUE"
    AllTypesEnumYourEnumValue AllTypesEnum = "YOUR_ENUM_VALUE"
    AllTypesEnumThisIsGreat AllTypesEnum = "THIS_IS_GREAT"
)

type AllowedMethodNamesIface interface {
    GetBar() jsii.Any
    GetFoo() string
    SetBar() jsii.Any
    SetFoo() jsii.Any
}

type AllowedMethodNames struct {
}

func (a *AllowedMethodNames) GetBar() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AllowedMethodNames",
        Method: "GetBar",
        Args: []string{"string", "number",},

    })
    return nil
}

func (a *AllowedMethodNames) GetFoo() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AllowedMethodNames",
        Method: "GetFoo",
        Args: []string{"string",},

    })
    return "NOOP_RETURN_STRING"
}

func (a *AllowedMethodNames) SetBar() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AllowedMethodNames",
        Method: "SetBar",
        Args: []string{"string", "number", "boolean",},

    })
    return nil
}

func (a *AllowedMethodNames) SetFoo() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AllowedMethodNames",
        Method: "SetFoo",
        Args: []string{"string", "number",},

    })
    return nil
}

type AmbiguousParametersIface interface {
    GetProps() StructParameterType
    SetProps()
    GetScope() Bell
    SetScope()
}

type AmbiguousParameters struct {
    Props StructParameterType
    Scope Bell
}

type AnonymousImplementationProviderIface interface {
    ProvideAsClass() Implementation
    ProvideAsInterface() IAnonymouslyImplementMe
}

type AnonymousImplementationProvider struct {
}

func (a *AnonymousImplementationProvider) ProvideAsClass() Implementation  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AnonymousImplementationProvider",
        Method: "ProvideAsClass",
        Args: []string{},

    })
    return Implementation{}
}

func (a *AnonymousImplementationProvider) ProvideAsInterface() IAnonymouslyImplementMe  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AnonymousImplementationProvider",
        Method: "ProvideAsInterface",
        Args: []string{},

    })
    return nil
}

type AsyncVirtualMethodsIface interface {
    CallMe() float64
    CallMe2() float64
    CallMeDoublePromise() float64
    DontOverrideMe() float64
    OverrideMe() float64
    OverrideMeToo() float64
}

type AsyncVirtualMethods struct {
}

func (a *AsyncVirtualMethods) CallMe() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AsyncVirtualMethods",
        Method: "CallMe",
        Args: []string{},

    })
    return 0.0
}

func (a *AsyncVirtualMethods) CallMe2() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AsyncVirtualMethods",
        Method: "CallMe2",
        Args: []string{},

    })
    return 0.0
}

func (a *AsyncVirtualMethods) CallMeDoublePromise() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AsyncVirtualMethods",
        Method: "CallMeDoublePromise",
        Args: []string{},

    })
    return 0.0
}

func (a *AsyncVirtualMethods) DontOverrideMe() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AsyncVirtualMethods",
        Method: "DontOverrideMe",
        Args: []string{},

    })
    return 0.0
}

func (a *AsyncVirtualMethods) OverrideMe() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AsyncVirtualMethods",
        Method: "OverrideMe",
        Args: []string{"number",},

    })
    return 0.0
}

func (a *AsyncVirtualMethods) OverrideMeToo() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AsyncVirtualMethods",
        Method: "OverrideMeToo",
        Args: []string{},

    })
    return 0.0
}

type AugmentableClassIface interface {
    MethodOne() jsii.Any
    MethodTwo() jsii.Any
}

type AugmentableClass struct {
}

func (a *AugmentableClass) MethodOne() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AugmentableClass",
        Method: "MethodOne",
        Args: []string{},

    })
    return nil
}

func (a *AugmentableClass) MethodTwo() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "AugmentableClass",
        Method: "MethodTwo",
        Args: []string{},

    })
    return nil
}

type BaseJsii976Iface interface {
}

type BaseJsii976 struct {
}

type BellIface interface {
    GetRung() bool
    SetRung()
    Ring() jsii.Any
}

type Bell struct {
    Rung bool
}

func (b *Bell) Ring() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Bell",
        Method: "Ring",
        Args: []string{},

    })
    return nil
}

type BinaryOperationIface interface {
    GetLhs() jsii.Any
    SetLhs()
    GetRhs() jsii.Any
    SetRhs()
    Hello() string
}

type BinaryOperation struct {
    Lhs jsii.Any
    Rhs jsii.Any
}

func (b *BinaryOperation) Hello() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "BinaryOperation",
        Method: "Hello",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type BurriedAnonymousObjectIface interface {
    Check() bool
    GiveItBack() jsii.Any
}

type BurriedAnonymousObject struct {
}

func (b *BurriedAnonymousObject) Check() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "BurriedAnonymousObject",
        Method: "Check",
        Args: []string{},

    })
    return true
}

func (b *BurriedAnonymousObject) GiveItBack() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "BurriedAnonymousObject",
        Method: "GiveItBack",
        Args: []string{"any",},

    })
    return nil
}

type CalculatorIface interface {
    GetExpression() jsii.Any
    SetExpression()
    GetOperationsLog() []jsii.Any
    SetOperationsLog()
    GetOperationsMap() map[string][]jsii.Any
    SetOperationsMap()
    GetCurr() jsii.Any
    SetCurr()
    GetMaxValue() float64
    SetMaxValue()
    GetUnionProperty() jsii.Any
    SetUnionProperty()
    Add() jsii.Any
    Mul() jsii.Any
    Neg() jsii.Any
    Pow() jsii.Any
    ReadUnionValue() float64
}

type Calculator struct {
    Expression jsii.Any
    OperationsLog []jsii.Any
    OperationsMap map[string][]jsii.Any
    Curr jsii.Any
    MaxValue float64
    UnionProperty jsii.Any
}

func (c *Calculator) Add() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Calculator",
        Method: "Add",
        Args: []string{"number",},

    })
    return nil
}

func (c *Calculator) Mul() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Calculator",
        Method: "Mul",
        Args: []string{"number",},

    })
    return nil
}

func (c *Calculator) Neg() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Calculator",
        Method: "Neg",
        Args: []string{},

    })
    return nil
}

func (c *Calculator) Pow() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Calculator",
        Method: "Pow",
        Args: []string{"number",},

    })
    return nil
}

func (c *Calculator) ReadUnionValue() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Calculator",
        Method: "ReadUnionValue",
        Args: []string{},

    })
    return 0.0
}

type CalculatorPropsIface interface {
    GetInitialValue() float64
    GetMaximumValue() float64
}

type CalculatorProps struct {
    InitialValue float64
    MaximumValue float64
}


func (c CalculatorProps) GetInitialValue() float64 {
    return c.InitialValue
}

func (c CalculatorProps) GetMaximumValue() float64 {
    return c.MaximumValue
}


type ChildStruct982Iface interface {
    GetBar() float64
}

type ChildStruct982 struct {
    Bar float64
}


func (c ChildStruct982) GetBar() float64 {
    return c.Bar
}


type ClassThatImplementsTheInternalInterfaceIface interface {
    GetA() string
    SetA()
    GetB() string
    SetB()
    GetC() string
    SetC()
    GetD() string
    SetD()
}

type ClassThatImplementsTheInternalInterface struct {
    A string
    B string
    C string
    D string
}

type ClassThatImplementsThePrivateInterfaceIface interface {
    GetA() string
    SetA()
    GetB() string
    SetB()
    GetC() string
    SetC()
    GetE() string
    SetE()
}

type ClassThatImplementsThePrivateInterface struct {
    A string
    B string
    C string
    E string
}

type ClassWithCollectionsIface interface {
    GetStaticArray() []string
    SetStaticArray()
    GetStaticMap() map[string]string
    SetStaticMap()
    GetArray() []string
    SetArray()
    GetMap() map[string]string
    SetMap()
    CreateAList() []string
    CreateAMap() map[string]string
}

type ClassWithCollections struct {
    StaticArray []string
    StaticMap map[string]string
    Array []string
    Map map[string]string
}

func (c *ClassWithCollections) CreateAList() []string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ClassWithCollections",
        Method: "CreateAList",
        Args: []string{},

    })
    return nil
}

func (c *ClassWithCollections) CreateAMap() map[string]string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ClassWithCollections",
        Method: "CreateAMap",
        Args: []string{},

    })
    return nil
}

type ClassWithDocsIface interface {
}

type ClassWithDocs struct {
}

type ClassWithJavaReservedWordsIface interface {
    GetInt() string
    SetInt()
    Import() string
}

type ClassWithJavaReservedWords struct {
    Int string
}

func (c *ClassWithJavaReservedWords) Import() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ClassWithJavaReservedWords",
        Method: "Import",
        Args: []string{"string",},

    })
    return "NOOP_RETURN_STRING"
}

type ClassWithMutableObjectLiteralPropertyIface interface {
    GetMutableObject() IMutableObjectLiteral
    SetMutableObject()
}

type ClassWithMutableObjectLiteralProperty struct {
    MutableObject IMutableObjectLiteral
}

type ClassWithPrivateConstructorAndAutomaticPropertiesIface interface {
    GetReadOnlyString() string
    SetReadOnlyString()
    GetReadWriteString() string
    SetReadWriteString()
    Create() ClassWithPrivateConstructorAndAutomaticProperties
}

type ClassWithPrivateConstructorAndAutomaticProperties struct {
    ReadOnlyString string
    ReadWriteString string
}

func (c *ClassWithPrivateConstructorAndAutomaticProperties) Create() ClassWithPrivateConstructorAndAutomaticProperties  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ClassWithPrivateConstructorAndAutomaticProperties",
        Method: "Create",
        Args: []string{"string", "string",},

    })
    return ClassWithPrivateConstructorAndAutomaticProperties{}
}

type ConfusingToJacksonIface interface {
    GetUnionProperty() jsii.Any
    SetUnionProperty()
    MakeInstance() ConfusingToJackson
    MakeStructInstance() ConfusingToJacksonStruct
}

type ConfusingToJackson struct {
    UnionProperty jsii.Any
}

func (c *ConfusingToJackson) MakeInstance() ConfusingToJackson  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConfusingToJackson",
        Method: "MakeInstance",
        Args: []string{},

    })
    return ConfusingToJackson{}
}

func (c *ConfusingToJackson) MakeStructInstance() ConfusingToJacksonStruct  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConfusingToJackson",
        Method: "MakeStructInstance",
        Args: []string{},

    })
    return nil
}

type ConfusingToJacksonStructIface interface {
    GetUnionProperty() jsii.Any
}

type ConfusingToJacksonStruct struct {
    UnionProperty jsii.Any
}


func (c ConfusingToJacksonStruct) GetUnionProperty() jsii.Any {
    return c.UnionProperty
}


type ConstructorPassesThisOutIface interface {
}

type ConstructorPassesThisOut struct {
}

type ConstructorsIface interface {
    HiddenInterface() IPublicInterface
    HiddenInterfaces() []IPublicInterface
    HiddenSubInterfaces() []IPublicInterface
    MakeClass() PublicClass
    MakeInterface() IPublicInterface
    MakeInterface2() IPublicInterface2
    MakeInterfaces() []IPublicInterface
}

type Constructors struct {
}

func (c *Constructors) HiddenInterface() IPublicInterface  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Constructors",
        Method: "HiddenInterface",
        Args: []string{},

    })
    return nil
}

func (c *Constructors) HiddenInterfaces() []IPublicInterface  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Constructors",
        Method: "HiddenInterfaces",
        Args: []string{},

    })
    return nil
}

func (c *Constructors) HiddenSubInterfaces() []IPublicInterface  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Constructors",
        Method: "HiddenSubInterfaces",
        Args: []string{},

    })
    return nil
}

func (c *Constructors) MakeClass() PublicClass  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Constructors",
        Method: "MakeClass",
        Args: []string{},

    })
    return PublicClass{}
}

func (c *Constructors) MakeInterface() IPublicInterface  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Constructors",
        Method: "MakeInterface",
        Args: []string{},

    })
    return nil
}

func (c *Constructors) MakeInterface2() IPublicInterface2  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Constructors",
        Method: "MakeInterface2",
        Args: []string{},

    })
    return nil
}

func (c *Constructors) MakeInterfaces() []IPublicInterface  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Constructors",
        Method: "MakeInterfaces",
        Args: []string{},

    })
    return nil
}

type ConsumePureInterfaceIface interface {
    WorkItBaby() StructB
}

type ConsumePureInterface struct {
}

func (c *ConsumePureInterface) WorkItBaby() StructB  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConsumePureInterface",
        Method: "WorkItBaby",
        Args: []string{},

    })
    return nil
}

type ConsumerCanRingBellIface interface {
    StaticImplementedByObjectLiteral() bool
    StaticImplementedByPrivateClass() bool
    StaticImplementedByPublicClass() bool
    StaticWhenTypedAsClass() bool
    ImplementedByObjectLiteral() bool
    ImplementedByPrivateClass() bool
    ImplementedByPublicClass() bool
    WhenTypedAsClass() bool
}

type ConsumerCanRingBell struct {
}

func (c *ConsumerCanRingBell) StaticImplementedByObjectLiteral() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConsumerCanRingBell",
        Method: "StaticImplementedByObjectLiteral",
        Args: []string{"jsii-calc.IBellRinger",},

    })
    return true
}

func (c *ConsumerCanRingBell) StaticImplementedByPrivateClass() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConsumerCanRingBell",
        Method: "StaticImplementedByPrivateClass",
        Args: []string{"jsii-calc.IBellRinger",},

    })
    return true
}

func (c *ConsumerCanRingBell) StaticImplementedByPublicClass() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConsumerCanRingBell",
        Method: "StaticImplementedByPublicClass",
        Args: []string{"jsii-calc.IBellRinger",},

    })
    return true
}

func (c *ConsumerCanRingBell) StaticWhenTypedAsClass() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConsumerCanRingBell",
        Method: "StaticWhenTypedAsClass",
        Args: []string{"jsii-calc.IConcreteBellRinger",},

    })
    return true
}

func (c *ConsumerCanRingBell) ImplementedByObjectLiteral() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConsumerCanRingBell",
        Method: "ImplementedByObjectLiteral",
        Args: []string{"jsii-calc.IBellRinger",},

    })
    return true
}

func (c *ConsumerCanRingBell) ImplementedByPrivateClass() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConsumerCanRingBell",
        Method: "ImplementedByPrivateClass",
        Args: []string{"jsii-calc.IBellRinger",},

    })
    return true
}

func (c *ConsumerCanRingBell) ImplementedByPublicClass() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConsumerCanRingBell",
        Method: "ImplementedByPublicClass",
        Args: []string{"jsii-calc.IBellRinger",},

    })
    return true
}

func (c *ConsumerCanRingBell) WhenTypedAsClass() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConsumerCanRingBell",
        Method: "WhenTypedAsClass",
        Args: []string{"jsii-calc.IConcreteBellRinger",},

    })
    return true
}

type ConsumersOfThisCrazyTypeSystemIface interface {
    ConsumeAnotherPublicInterface() string
    ConsumeNonInternalInterface() jsii.Any
}

type ConsumersOfThisCrazyTypeSystem struct {
}

func (c *ConsumersOfThisCrazyTypeSystem) ConsumeAnotherPublicInterface() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConsumersOfThisCrazyTypeSystem",
        Method: "ConsumeAnotherPublicInterface",
        Args: []string{"jsii-calc.IAnotherPublicInterface",},

    })
    return "NOOP_RETURN_STRING"
}

func (c *ConsumersOfThisCrazyTypeSystem) ConsumeNonInternalInterface() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ConsumersOfThisCrazyTypeSystem",
        Method: "ConsumeNonInternalInterface",
        Args: []string{"jsii-calc.INonInternalInterface",},

    })
    return nil
}

type DataRendererIface interface {
    Render() string
    RenderArbitrary() string
    RenderMap() string
}

type DataRenderer struct {
}

func (d *DataRenderer) Render() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DataRenderer",
        Method: "Render",
        Args: []string{"@scope/jsii-calc-lib.MyFirstStruct",},

    })
    return "NOOP_RETURN_STRING"
}

func (d *DataRenderer) RenderArbitrary() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DataRenderer",
        Method: "RenderArbitrary",
        Args: []string{"Map<string => any>",},

    })
    return "NOOP_RETURN_STRING"
}

func (d *DataRenderer) RenderMap() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DataRenderer",
        Method: "RenderMap",
        Args: []string{"Map<string => any>",},

    })
    return "NOOP_RETURN_STRING"
}

type DefaultedConstructorArgumentIface interface {
    GetArg1() float64
    SetArg1()
    GetArg3() string
    SetArg3()
    GetArg2() string
    SetArg2()
}

type DefaultedConstructorArgument struct {
    Arg1 float64
    Arg3 string
    Arg2 string
}

type Demonstrate982Iface interface {
    TakeThis() ChildStruct982
    TakeThisToo() ParentStruct982
}

type Demonstrate982 struct {
}

func (d *Demonstrate982) TakeThis() ChildStruct982  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Demonstrate982",
        Method: "TakeThis",
        Args: []string{},

    })
    return nil
}

func (d *Demonstrate982) TakeThisToo() ParentStruct982  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Demonstrate982",
        Method: "TakeThisToo",
        Args: []string{},

    })
    return nil
}

type DeprecatedClassIface interface {
    GetReadonlyProperty() string
    SetReadonlyProperty()
    GetMutableProperty() float64
    SetMutableProperty()
    Method() jsii.Any
}

type DeprecatedClass struct {
    ReadonlyProperty string
    MutableProperty float64
}

func (d *DeprecatedClass) Method() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DeprecatedClass",
        Method: "Method",
        Args: []string{},

    })
    return nil
}

type DeprecatedEnum string

const (
    DeprecatedEnumOptionA DeprecatedEnum = "OPTION_A"
    DeprecatedEnumOptionB DeprecatedEnum = "OPTION_B"
)

type DeprecatedStructIface interface {
    GetReadonlyProperty() string
}

type DeprecatedStruct struct {
    ReadonlyProperty string
}


func (d DeprecatedStruct) GetReadonlyProperty() string {
    return d.ReadonlyProperty
}


type DerivedStructIface interface {
    GetAnotherRequired() string
    GetBool() bool
    GetNonPrimitive() DoubleTrouble
    GetAnotherOptional() map[string]jsii.Any
    GetOptionalAny() jsii.Any
    GetOptionalArray() []string
}

type DerivedStruct struct {
    AnotherRequired string
    Bool bool
    NonPrimitive DoubleTrouble
    AnotherOptional map[string]jsii.Any
    OptionalAny jsii.Any
    OptionalArray []string
}


func (d DerivedStruct) GetAnotherRequired() string {
    return d.AnotherRequired
}

func (d DerivedStruct) GetBool() bool {
    return d.Bool
}

func (d DerivedStruct) GetNonPrimitive() DoubleTrouble {
    return d.NonPrimitive
}

func (d DerivedStruct) GetAnotherOptional() map[string]jsii.Any {
    return d.AnotherOptional
}

func (d DerivedStruct) GetOptionalAny() jsii.Any {
    return d.OptionalAny
}

func (d DerivedStruct) GetOptionalArray() []string {
    return d.OptionalArray
}


type DiamondInheritanceBaseLevelStructIface interface {
    GetBaseLevelProperty() string
}

type DiamondInheritanceBaseLevelStruct struct {
    BaseLevelProperty string
}


func (d DiamondInheritanceBaseLevelStruct) GetBaseLevelProperty() string {
    return d.BaseLevelProperty
}


type DiamondInheritanceFirstMidLevelStructIface interface {
    GetFirstMidLevelProperty() string
}

type DiamondInheritanceFirstMidLevelStruct struct {
    FirstMidLevelProperty string
}


func (d DiamondInheritanceFirstMidLevelStruct) GetFirstMidLevelProperty() string {
    return d.FirstMidLevelProperty
}


type DiamondInheritanceSecondMidLevelStructIface interface {
    GetSecondMidLevelProperty() string
}

type DiamondInheritanceSecondMidLevelStruct struct {
    SecondMidLevelProperty string
}


func (d DiamondInheritanceSecondMidLevelStruct) GetSecondMidLevelProperty() string {
    return d.SecondMidLevelProperty
}


type DiamondInheritanceTopLevelStructIface interface {
    GetTopLevelProperty() string
}

type DiamondInheritanceTopLevelStruct struct {
    TopLevelProperty string
}


func (d DiamondInheritanceTopLevelStruct) GetTopLevelProperty() string {
    return d.TopLevelProperty
}


type DisappointingCollectionSourceIface interface {
    GetMaybeList() []string
    SetMaybeList()
    GetMaybeMap() map[string]float64
    SetMaybeMap()
}

type DisappointingCollectionSource struct {
    MaybeList []string
    MaybeMap map[string]float64
}

type DoNotOverridePrivatesIface interface {
    ChangePrivatePropertyValue() jsii.Any
    PrivateMethodValue() string
    PrivatePropertyValue() string
}

type DoNotOverridePrivates struct {
}

func (d *DoNotOverridePrivates) ChangePrivatePropertyValue() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DoNotOverridePrivates",
        Method: "ChangePrivatePropertyValue",
        Args: []string{"string",},

    })
    return nil
}

func (d *DoNotOverridePrivates) PrivateMethodValue() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DoNotOverridePrivates",
        Method: "PrivateMethodValue",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (d *DoNotOverridePrivates) PrivatePropertyValue() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DoNotOverridePrivates",
        Method: "PrivatePropertyValue",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type DoNotRecognizeAnyAsOptionalIface interface {
    Method() jsii.Any
}

type DoNotRecognizeAnyAsOptional struct {
}

func (d *DoNotRecognizeAnyAsOptional) Method() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DoNotRecognizeAnyAsOptional",
        Method: "Method",
        Args: []string{"any", "any", "string",},

    })
    return nil
}

type DocumentedClassIface interface {
    Greet() float64
    Hola() jsii.Any
}

type DocumentedClass struct {
}

func (d *DocumentedClass) Greet() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DocumentedClass",
        Method: "Greet",
        Args: []string{"jsii-calc.Greetee",},

    })
    return 0.0
}

func (d *DocumentedClass) Hola() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DocumentedClass",
        Method: "Hola",
        Args: []string{},

    })
    return nil
}

type DontComplainAboutVariadicAfterOptionalIface interface {
    OptionalAndVariadic() string
}

type DontComplainAboutVariadicAfterOptional struct {
}

func (d *DontComplainAboutVariadicAfterOptional) OptionalAndVariadic() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DontComplainAboutVariadicAfterOptional",
        Method: "OptionalAndVariadic",
        Args: []string{"string", "string",},

    })
    return "NOOP_RETURN_STRING"
}

type DoubleTroubleIface interface {
    Hello() string
    Next() float64
}

type DoubleTrouble struct {
}

func (d *DoubleTrouble) Hello() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DoubleTrouble",
        Method: "Hello",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (d *DoubleTrouble) Next() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "DoubleTrouble",
        Method: "Next",
        Args: []string{},

    })
    return 0.0
}

type EnumDispenserIface interface {
    RandomIntegerLikeEnum() AllTypesEnum
    RandomStringLikeEnum() StringEnum
}

type EnumDispenser struct {
}

func (e *EnumDispenser) RandomIntegerLikeEnum() AllTypesEnum  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "EnumDispenser",
        Method: "RandomIntegerLikeEnum",
        Args: []string{},

    })
    return "ENUM_DUMMY"
}

func (e *EnumDispenser) RandomStringLikeEnum() StringEnum  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "EnumDispenser",
        Method: "RandomStringLikeEnum",
        Args: []string{},

    })
    return "ENUM_DUMMY"
}

type EraseUndefinedHashValuesIface interface {
    DoesKeyExist() bool
    Prop1IsNull() map[string]jsii.Any
    Prop2IsUndefined() map[string]jsii.Any
}

type EraseUndefinedHashValues struct {
}

func (e *EraseUndefinedHashValues) DoesKeyExist() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "EraseUndefinedHashValues",
        Method: "DoesKeyExist",
        Args: []string{"jsii-calc.EraseUndefinedHashValuesOptions", "string",},

    })
    return true
}

func (e *EraseUndefinedHashValues) Prop1IsNull() map[string]jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "EraseUndefinedHashValues",
        Method: "Prop1IsNull",
        Args: []string{},

    })
    return nil
}

func (e *EraseUndefinedHashValues) Prop2IsUndefined() map[string]jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "EraseUndefinedHashValues",
        Method: "Prop2IsUndefined",
        Args: []string{},

    })
    return nil
}

type EraseUndefinedHashValuesOptionsIface interface {
    GetOption1() string
    GetOption2() string
}

type EraseUndefinedHashValuesOptions struct {
    Option1 string
    Option2 string
}


func (e EraseUndefinedHashValuesOptions) GetOption1() string {
    return e.Option1
}

func (e EraseUndefinedHashValuesOptions) GetOption2() string {
    return e.Option2
}


type ExperimentalClassIface interface {
    GetReadonlyProperty() string
    SetReadonlyProperty()
    GetMutableProperty() float64
    SetMutableProperty()
    Method() jsii.Any
}

type ExperimentalClass struct {
    ReadonlyProperty string
    MutableProperty float64
}

func (e *ExperimentalClass) Method() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ExperimentalClass",
        Method: "Method",
        Args: []string{},

    })
    return nil
}

type ExperimentalEnum string

const (
    ExperimentalEnumOptionA ExperimentalEnum = "OPTION_A"
    ExperimentalEnumOptionB ExperimentalEnum = "OPTION_B"
)

type ExperimentalStructIface interface {
    GetReadonlyProperty() string
}

type ExperimentalStruct struct {
    ReadonlyProperty string
}


func (e ExperimentalStruct) GetReadonlyProperty() string {
    return e.ReadonlyProperty
}


type ExportedBaseClassIface interface {
    GetSuccess() bool
    SetSuccess()
}

type ExportedBaseClass struct {
    Success bool
}

type ExtendsInternalInterfaceIface interface {
    GetBoom() bool
    GetProp() string
}

type ExtendsInternalInterface struct {
    Boom bool
    Prop string
}


func (e ExtendsInternalInterface) GetBoom() bool {
    return e.Boom
}

func (e ExtendsInternalInterface) GetProp() string {
    return e.Prop
}


type ExternalClassIface interface {
    GetReadonlyProperty() string
    SetReadonlyProperty()
    GetMutableProperty() float64
    SetMutableProperty()
    Method() jsii.Any
}

type ExternalClass struct {
    ReadonlyProperty string
    MutableProperty float64
}

func (e *ExternalClass) Method() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ExternalClass",
        Method: "Method",
        Args: []string{},

    })
    return nil
}

type ExternalEnum string

const (
    ExternalEnumOptionA ExternalEnum = "OPTION_A"
    ExternalEnumOptionB ExternalEnum = "OPTION_B"
)

type ExternalStructIface interface {
    GetReadonlyProperty() string
}

type ExternalStruct struct {
    ReadonlyProperty string
}


func (e ExternalStruct) GetReadonlyProperty() string {
    return e.ReadonlyProperty
}


type GiveMeStructsIface interface {
    GetStructLiteral() jsii.Any
    SetStructLiteral()
    DerivedToFirst() jsii.Any
    ReadDerivedNonPrimitive() DoubleTrouble
    ReadFirstNumber() float64
}

type GiveMeStructs struct {
    StructLiteral jsii.Any
}

func (g *GiveMeStructs) DerivedToFirst() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "GiveMeStructs",
        Method: "DerivedToFirst",
        Args: []string{"jsii-calc.DerivedStruct",},

    })
    return nil
}

func (g *GiveMeStructs) ReadDerivedNonPrimitive() DoubleTrouble  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "GiveMeStructs",
        Method: "ReadDerivedNonPrimitive",
        Args: []string{"jsii-calc.DerivedStruct",},

    })
    return DoubleTrouble{}
}

func (g *GiveMeStructs) ReadFirstNumber() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "GiveMeStructs",
        Method: "ReadFirstNumber",
        Args: []string{"@scope/jsii-calc-lib.MyFirstStruct",},

    })
    return 0.0
}

type GreeteeIface interface {
    GetName() string
}

type Greetee struct {
    Name string
}


func (g Greetee) GetName() string {
    return g.Name
}


type GreetingAugmenterIface interface {
    BetterGreeting() string
}

type GreetingAugmenter struct {
}

func (g *GreetingAugmenter) BetterGreeting() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "GreetingAugmenter",
        Method: "BetterGreeting",
        Args: []string{"@scope/jsii-calc-lib.IFriendly",},

    })
    return "NOOP_RETURN_STRING"
}

type IAnonymousImplementationProvider interface {
    ProvideAsClass() Implementation
    ProvideAsInterface() IAnonymouslyImplementMe
}

type IAnonymouslyImplementMe interface {
    Verb() string
    GetValue() float64
}

type IAnotherPublicInterface interface {
    GetA() string
}

type IBell interface {
    Ring()
}

type IBellRinger interface {
    YourTurn()
}

type IConcreteBellRinger interface {
    YourTurn()
}

type IDeprecatedInterface interface {
    Method()
    GetMutableProperty() float64
}

type IExperimentalInterface interface {
    Method()
    GetMutableProperty() float64
}

type IExtendsPrivateInterface interface {
    GetMoreThings() []string
    GetPrivate() string
}

type IExternalInterface interface {
    Method()
    GetMutableProperty() float64
}

type IFriendlier interface {
    Farewell() string
    Goodbye() string
}

type IFriendlyRandomGenerator interface {
}

type IInterfaceImplementedByAbstractClass interface {
    GetPropFromInterface() string
}

type IInterfaceThatShouldNotBeADataType interface {
    GetOtherValue() string
}

type IInterfaceWithInternal interface {
    Visible()
}

type IInterfaceWithMethods interface {
    DoThings()
    GetValue() string
}

type IInterfaceWithOptionalMethodArguments interface {
    Hello()
}

type IInterfaceWithProperties interface {
    GetReadOnlyString() string
    GetReadWriteString() string
}

type IInterfaceWithPropertiesExtension interface {
    GetFoo() float64
}

type IJSII417Derived interface {
    Bar()
    Baz()
    GetProperty() string
}

type IJSII417PublicBaseOfBase interface {
    Foo()
    GetHasRoot() bool
}

type IJsii487External interface {
}

type IJsii487External2 interface {
}

type IJsii496 interface {
}

type IMutableObjectLiteral interface {
    GetValue() string
}

type INonInternalInterface interface {
    GetB() string
    GetC() string
}

type IObjectWithProperty interface {
    WasSet() bool
    GetProperty() string
}

type IOptionalMethod interface {
    Optional() string
}

type IPrivatelyImplemented interface {
    GetSuccess() bool
}

type IPublicInterface interface {
    Bye() string
}

type IPublicInterface2 interface {
    Ciao() string
}

type IRandomNumberGenerator interface {
    Next() float64
}

type IReturnJsii976 interface {
    GetFoo() float64
}

type IReturnsNumber interface {
    ObtainNumber() jsii.Any
    GetNumberProp() jsii.Any
}

type IStableInterface interface {
    Method()
    GetMutableProperty() float64
}

type IStructReturningDelegate interface {
    ReturnStruct() StructB
}

type ImplementInternalInterfaceIface interface {
    GetProp() string
    SetProp()
}

type ImplementInternalInterface struct {
    Prop string
}

type ImplementationIface interface {
    GetValue() float64
    SetValue()
}

type Implementation struct {
    Value float64
}

type ImplementsInterfaceWithInternalIface interface {
    Visible() jsii.Any
}

type ImplementsInterfaceWithInternal struct {
}

func (i *ImplementsInterfaceWithInternal) Visible() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ImplementsInterfaceWithInternal",
        Method: "Visible",
        Args: []string{},

    })
    return nil
}

type ImplementsInterfaceWithInternalSubclassIface interface {
}

type ImplementsInterfaceWithInternalSubclass struct {
}

type ImplementsPrivateInterfaceIface interface {
    GetPrivate() string
    SetPrivate()
}

type ImplementsPrivateInterface struct {
    Private string
}

type ImplictBaseOfBaseIface interface {
    GetGoo() string
}

type ImplictBaseOfBase struct {
    Goo string
}


func (i ImplictBaseOfBase) GetGoo() string {
    return i.Goo
}


type InbetweenClassIface interface {
    Ciao() string
}

type InbetweenClass struct {
}

func (i *InbetweenClass) Ciao() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "InbetweenClass",
        Method: "Ciao",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type InterfaceCollectionsIface interface {
    ListOfInterfaces() []IBell
    ListOfStructs() []StructA
    MapOfInterfaces() map[string]IBell
    MapOfStructs() map[string]StructA
}

type InterfaceCollections struct {
}

func (i *InterfaceCollections) ListOfInterfaces() []IBell  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "InterfaceCollections",
        Method: "ListOfInterfaces",
        Args: []string{},

    })
    return nil
}

func (i *InterfaceCollections) ListOfStructs() []StructA  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "InterfaceCollections",
        Method: "ListOfStructs",
        Args: []string{},

    })
    return nil
}

func (i *InterfaceCollections) MapOfInterfaces() map[string]IBell  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "InterfaceCollections",
        Method: "MapOfInterfaces",
        Args: []string{},

    })
    return nil
}

func (i *InterfaceCollections) MapOfStructs() map[string]StructA  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "InterfaceCollections",
        Method: "MapOfStructs",
        Args: []string{},

    })
    return nil
}

type InterfacesMakerIface interface {
    MakeInterfaces() []jsii.Any
}

type InterfacesMaker struct {
}

func (i *InterfacesMaker) MakeInterfaces() []jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "InterfacesMaker",
        Method: "MakeInterfaces",
        Args: []string{"number",},

    })
    return nil
}

type IsomorphismIface interface {
    Myself() Isomorphism
}

type Isomorphism struct {
}

func (i *Isomorphism) Myself() Isomorphism  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Isomorphism",
        Method: "Myself",
        Args: []string{},

    })
    return Isomorphism{}
}

type JSII417DerivedIface interface {
    GetProperty() string
    Bar() jsii.Any
    Baz() jsii.Any
}

type JSII417Derived struct {
    Property string
}

func (j *JSII417Derived) Bar() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JSII417Derived",
        Method: "Bar",
        Args: []string{},

    })
    return nil
}

func (j *JSII417Derived) Baz() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JSII417Derived",
        Method: "Baz",
        Args: []string{},

    })
    return nil
}

type JSII417PublicBaseOfBaseIface interface {
    GetHasRoot() bool
    SetHasRoot()
    MakeInstance() Jsii417PublicBaseOfBase
    Foo() jsii.Any
}

type JSII417PublicBaseOfBase struct {
    HasRoot bool
}

func (j *JSII417PublicBaseOfBase) MakeInstance() Jsii417PublicBaseOfBase  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JSII417PublicBaseOfBase",
        Method: "MakeInstance",
        Args: []string{},

    })
    return Jsii417PublicBaseOfBase{}
}

func (j *JSII417PublicBaseOfBase) Foo() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JSII417PublicBaseOfBase",
        Method: "Foo",
        Args: []string{},

    })
    return nil
}

type JSObjectLiteralForInterfaceIface interface {
    GiveMeFriendly() jsii.Any
    GiveMeFriendlyGenerator() IFriendlyRandomGenerator
}

type JSObjectLiteralForInterface struct {
}

func (j *JSObjectLiteralForInterface) GiveMeFriendly() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JSObjectLiteralForInterface",
        Method: "GiveMeFriendly",
        Args: []string{},

    })
    return nil
}

func (j *JSObjectLiteralForInterface) GiveMeFriendlyGenerator() IFriendlyRandomGenerator  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JSObjectLiteralForInterface",
        Method: "GiveMeFriendlyGenerator",
        Args: []string{},

    })
    return nil
}

type JSObjectLiteralToNativeIface interface {
    ReturnLiteral() JsObjectLiteralToNativeClass
}

type JSObjectLiteralToNative struct {
}

func (j *JSObjectLiteralToNative) ReturnLiteral() JsObjectLiteralToNativeClass  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JSObjectLiteralToNative",
        Method: "ReturnLiteral",
        Args: []string{},

    })
    return JsObjectLiteralToNativeClass{}
}

type JSObjectLiteralToNativeClassIface interface {
    GetPropA() string
    SetPropA()
    GetPropB() float64
    SetPropB()
}

type JSObjectLiteralToNativeClass struct {
    PropA string
    PropB float64
}

type JavaReservedWordsIface interface {
    GetWhile() string
    SetWhile()
    Abstract() jsii.Any
    Assert() jsii.Any
    Boolean() jsii.Any
    Break() jsii.Any
    Byte() jsii.Any
    Case() jsii.Any
    Catch() jsii.Any
    Char() jsii.Any
    Class() jsii.Any
    Const() jsii.Any
    Continue() jsii.Any
    Default() jsii.Any
    Do() jsii.Any
    Double() jsii.Any
    Else() jsii.Any
    Enum() jsii.Any
    Extends() jsii.Any
    False() jsii.Any
    Final() jsii.Any
    Finally() jsii.Any
    Float() jsii.Any
    For() jsii.Any
    Goto() jsii.Any
    If() jsii.Any
    Implements() jsii.Any
    Import() jsii.Any
    Instanceof() jsii.Any
    Int() jsii.Any
    Interface() jsii.Any
    Long() jsii.Any
    Native() jsii.Any
    New() jsii.Any
    Null() jsii.Any
    Package() jsii.Any
    Private() jsii.Any
    Protected() jsii.Any
    Public() jsii.Any
    Return() jsii.Any
    Short() jsii.Any
    Static() jsii.Any
    Strictfp() jsii.Any
    Super() jsii.Any
    Switch() jsii.Any
    Synchronized() jsii.Any
    This() jsii.Any
    Throw() jsii.Any
    Throws() jsii.Any
    Transient() jsii.Any
    True() jsii.Any
    Try() jsii.Any
    Void() jsii.Any
    Volatile() jsii.Any
}

type JavaReservedWords struct {
    While string
}

func (j *JavaReservedWords) Abstract() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Abstract",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Assert() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Assert",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Boolean() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Boolean",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Break() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Break",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Byte() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Byte",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Case() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Case",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Catch() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Catch",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Char() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Char",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Class() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Class",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Const() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Const",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Continue() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Continue",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Default() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Default",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Do() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Do",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Double() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Double",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Else() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Else",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Enum() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Enum",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Extends() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Extends",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) False() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "False",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Final() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Final",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Finally() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Finally",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Float() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Float",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) For() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "For",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Goto() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Goto",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) If() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "If",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Implements() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Implements",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Import() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Import",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Instanceof() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Instanceof",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Int() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Int",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Interface() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Interface",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Long() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Long",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Native() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Native",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) New() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "New",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Null() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Null",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Package() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Package",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Private() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Private",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Protected() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Protected",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Public() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Public",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Return() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Return",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Short() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Short",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Static() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Static",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Strictfp() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Strictfp",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Super() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Super",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Switch() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Switch",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Synchronized() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Synchronized",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) This() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "This",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Throw() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Throw",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Throws() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Throws",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Transient() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Transient",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) True() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "True",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Try() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Try",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Void() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Void",
        Args: []string{},

    })
    return nil
}

func (j *JavaReservedWords) Volatile() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JavaReservedWords",
        Method: "Volatile",
        Args: []string{},

    })
    return nil
}

type Jsii487DerivedIface interface {
}

type Jsii487Derived struct {
}

type Jsii496DerivedIface interface {
}

type Jsii496Derived struct {
}

type JsiiAgentIface interface {
    GetJsiiAgent() string
    SetJsiiAgent()
}

type JsiiAgent struct {
    JsiiAgent string
}

type JsonFormatterIface interface {
    AnyArray() jsii.Any
    AnyBooleanFalse() jsii.Any
    AnyBooleanTrue() jsii.Any
    AnyDate() jsii.Any
    AnyEmptyString() jsii.Any
    AnyFunction() jsii.Any
    AnyHash() jsii.Any
    AnyNull() jsii.Any
    AnyNumber() jsii.Any
    AnyRef() jsii.Any
    AnyString() jsii.Any
    AnyUndefined() jsii.Any
    AnyZero() jsii.Any
    Stringify() string
}

type JsonFormatter struct {
}

func (j *JsonFormatter) AnyArray() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyArray",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyBooleanFalse() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyBooleanFalse",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyBooleanTrue() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyBooleanTrue",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyDate() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyDate",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyEmptyString() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyEmptyString",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyFunction() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyFunction",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyHash() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyHash",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyNull() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyNull",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyNumber() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyNumber",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyRef() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyRef",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyString() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyString",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyUndefined() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyUndefined",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) AnyZero() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "AnyZero",
        Args: []string{},

    })
    return nil
}

func (j *JsonFormatter) Stringify() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "JsonFormatter",
        Method: "Stringify",
        Args: []string{"any",},

    })
    return "NOOP_RETURN_STRING"
}

type LoadBalancedFargateServicePropsIface interface {
    GetContainerPort() float64
    GetCpu() string
    GetMemoryMiB() string
    GetPublicLoadBalancer() bool
    GetPublicTasks() bool
}

type LoadBalancedFargateServiceProps struct {
    ContainerPort float64
    Cpu string
    MemoryMiB string
    PublicLoadBalancer bool
    PublicTasks bool
}


func (l LoadBalancedFargateServiceProps) GetContainerPort() float64 {
    return l.ContainerPort
}

func (l LoadBalancedFargateServiceProps) GetCpu() string {
    return l.Cpu
}

func (l LoadBalancedFargateServiceProps) GetMemoryMiB() string {
    return l.MemoryMiB
}

func (l LoadBalancedFargateServiceProps) GetPublicLoadBalancer() bool {
    return l.PublicLoadBalancer
}

func (l LoadBalancedFargateServiceProps) GetPublicTasks() bool {
    return l.PublicTasks
}


type MethodNamedPropertyIface interface {
    GetElite() float64
    SetElite()
    Property() string
}

type MethodNamedProperty struct {
    Elite float64
}

func (m *MethodNamedProperty) Property() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "MethodNamedProperty",
        Method: "Property",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type MultiplyIface interface {
    GetValue() float64
    SetValue()
    Farewell() string
    Goodbye() string
    Next() float64
    ToString() string
}

type Multiply struct {
    Value float64
}

func (m *Multiply) Farewell() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Multiply",
        Method: "Farewell",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (m *Multiply) Goodbye() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Multiply",
        Method: "Goodbye",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (m *Multiply) Next() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Multiply",
        Method: "Next",
        Args: []string{},

    })
    return 0.0
}

func (m *Multiply) ToString() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Multiply",
        Method: "ToString",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type NegateIface interface {
    GetValue() float64
    SetValue()
    Farewell() string
    Goodbye() string
    Hello() string
    ToString() string
}

type Negate struct {
    Value float64
}

func (n *Negate) Farewell() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Negate",
        Method: "Farewell",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (n *Negate) Goodbye() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Negate",
        Method: "Goodbye",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (n *Negate) Hello() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Negate",
        Method: "Hello",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (n *Negate) ToString() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Negate",
        Method: "ToString",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type NestedClassInstanceIface interface {
    MakeInstance() jsii.Any
}

type NestedClassInstance struct {
}

func (n *NestedClassInstance) MakeInstance() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "NestedClassInstance",
        Method: "MakeInstance",
        Args: []string{},

    })
    return nil
}

type NestedStructIface interface {
    GetNumberProp() float64
}

type NestedStruct struct {
    NumberProp float64
}


func (n NestedStruct) GetNumberProp() float64 {
    return n.NumberProp
}


type NodeStandardLibraryIface interface {
    GetOsPlatform() string
    SetOsPlatform()
    CryptoSha256() string
    FsReadFile() string
    FsReadFileSync() string
}

type NodeStandardLibrary struct {
    OsPlatform string
}

func (n *NodeStandardLibrary) CryptoSha256() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "NodeStandardLibrary",
        Method: "CryptoSha256",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (n *NodeStandardLibrary) FsReadFile() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "NodeStandardLibrary",
        Method: "FsReadFile",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (n *NodeStandardLibrary) FsReadFileSync() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "NodeStandardLibrary",
        Method: "FsReadFileSync",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type NullShouldBeTreatedAsUndefinedIface interface {
    GetChangeMeToUndefined() string
    SetChangeMeToUndefined()
    GiveMeUndefined() jsii.Any
    GiveMeUndefinedInsideAnObject() jsii.Any
    VerifyPropertyIsUndefined() jsii.Any
}

type NullShouldBeTreatedAsUndefined struct {
    ChangeMeToUndefined string
}

func (n *NullShouldBeTreatedAsUndefined) GiveMeUndefined() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "NullShouldBeTreatedAsUndefined",
        Method: "GiveMeUndefined",
        Args: []string{"any",},

    })
    return nil
}

func (n *NullShouldBeTreatedAsUndefined) GiveMeUndefinedInsideAnObject() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "NullShouldBeTreatedAsUndefined",
        Method: "GiveMeUndefinedInsideAnObject",
        Args: []string{"jsii-calc.NullShouldBeTreatedAsUndefinedData",},

    })
    return nil
}

func (n *NullShouldBeTreatedAsUndefined) VerifyPropertyIsUndefined() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "NullShouldBeTreatedAsUndefined",
        Method: "VerifyPropertyIsUndefined",
        Args: []string{},

    })
    return nil
}

type NullShouldBeTreatedAsUndefinedDataIface interface {
    GetArrayWithThreeElementsAndUndefinedAsSecondArgument() []jsii.Any
    GetThisShouldBeUndefined() jsii.Any
}

type NullShouldBeTreatedAsUndefinedData struct {
    ArrayWithThreeElementsAndUndefinedAsSecondArgument []jsii.Any
    ThisShouldBeUndefined jsii.Any
}


func (n NullShouldBeTreatedAsUndefinedData) GetArrayWithThreeElementsAndUndefinedAsSecondArgument() []jsii.Any {
    return n.ArrayWithThreeElementsAndUndefinedAsSecondArgument
}

func (n NullShouldBeTreatedAsUndefinedData) GetThisShouldBeUndefined() jsii.Any {
    return n.ThisShouldBeUndefined
}


type NumberGeneratorIface interface {
    GetGenerator() IRandomNumberGenerator
    SetGenerator()
    IsSameGenerator() bool
    NextTimes100() float64
}

type NumberGenerator struct {
    Generator IRandomNumberGenerator
}

func (n *NumberGenerator) IsSameGenerator() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "NumberGenerator",
        Method: "IsSameGenerator",
        Args: []string{"jsii-calc.IRandomNumberGenerator",},

    })
    return true
}

func (n *NumberGenerator) NextTimes100() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "NumberGenerator",
        Method: "NextTimes100",
        Args: []string{},

    })
    return 0.0
}

type ObjectRefsInCollectionsIface interface {
    SumFromArray() float64
    SumFromMap() float64
}

type ObjectRefsInCollections struct {
}

func (o *ObjectRefsInCollections) SumFromArray() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ObjectRefsInCollections",
        Method: "SumFromArray",
        Args: []string{"Array<@scope/jsii-calc-lib.Value>",},

    })
    return 0.0
}

func (o *ObjectRefsInCollections) SumFromMap() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ObjectRefsInCollections",
        Method: "SumFromMap",
        Args: []string{"Map<string => @scope/jsii-calc-lib.Value>",},

    })
    return 0.0
}

type ObjectWithPropertyProviderIface interface {
    Provide() IObjectWithProperty
}

type ObjectWithPropertyProvider struct {
}

func (o *ObjectWithPropertyProvider) Provide() IObjectWithProperty  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ObjectWithPropertyProvider",
        Method: "Provide",
        Args: []string{},

    })
    return nil
}

type OldIface interface {
    DoAThing() jsii.Any
}

type Old struct {
}

func (o *Old) DoAThing() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Old",
        Method: "DoAThing",
        Args: []string{},

    })
    return nil
}

type OptionalArgumentInvokerIface interface {
    InvokeWithOptional() jsii.Any
    InvokeWithoutOptional() jsii.Any
}

type OptionalArgumentInvoker struct {
}

func (o *OptionalArgumentInvoker) InvokeWithOptional() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "OptionalArgumentInvoker",
        Method: "InvokeWithOptional",
        Args: []string{},

    })
    return nil
}

func (o *OptionalArgumentInvoker) InvokeWithoutOptional() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "OptionalArgumentInvoker",
        Method: "InvokeWithoutOptional",
        Args: []string{},

    })
    return nil
}

type OptionalConstructorArgumentIface interface {
    GetArg1() float64
    SetArg1()
    GetArg2() string
    SetArg2()
    GetArg3() string
    SetArg3()
}

type OptionalConstructorArgument struct {
    Arg1 float64
    Arg2 string
    Arg3 string
}

type OptionalStructIface interface {
    GetField() string
}

type OptionalStruct struct {
    Field string
}


func (o OptionalStruct) GetField() string {
    return o.Field
}


type OptionalStructConsumerIface interface {
    GetParameterWasUndefined() bool
    SetParameterWasUndefined()
    GetFieldValue() string
    SetFieldValue()
}

type OptionalStructConsumer struct {
    ParameterWasUndefined bool
    FieldValue string
}

type OverridableProtectedMemberIface interface {
    GetOverrideReadOnly() string
    GetOverrideReadWrite() string
    OverrideMe() string
    SwitchModes() jsii.Any
    ValueFromProtected() string
}

type OverridableProtectedMember struct {
    OverrideReadOnly string
    OverrideReadWrite string
}

func (o *OverridableProtectedMember) OverrideMe() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "OverridableProtectedMember",
        Method: "OverrideMe",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (o *OverridableProtectedMember) SwitchModes() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "OverridableProtectedMember",
        Method: "SwitchModes",
        Args: []string{},

    })
    return nil
}

func (o *OverridableProtectedMember) ValueFromProtected() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "OverridableProtectedMember",
        Method: "ValueFromProtected",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type OverrideReturnsObjectIface interface {
    Test() float64
}

type OverrideReturnsObject struct {
}

func (o *OverrideReturnsObject) Test() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "OverrideReturnsObject",
        Method: "Test",
        Args: []string{"jsii-calc.IReturnsNumber",},

    })
    return 0.0
}

type ParentStruct982Iface interface {
    GetFoo() string
}

type ParentStruct982 struct {
    Foo string
}


func (p ParentStruct982) GetFoo() string {
    return p.Foo
}


type PartiallyInitializedThisConsumerIface interface {
    ConsumePartiallyInitializedThis() string
}

type PartiallyInitializedThisConsumer struct {
}

func (p *PartiallyInitializedThisConsumer) ConsumePartiallyInitializedThis() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PartiallyInitializedThisConsumer",
        Method: "ConsumePartiallyInitializedThis",
        Args: []string{"jsii-calc.ConstructorPassesThisOut", "date", "jsii-calc.AllTypesEnum",},

    })
    return "NOOP_RETURN_STRING"
}

type PolymorphismIface interface {
    SayHello() string
}

type Polymorphism struct {
}

func (p *Polymorphism) SayHello() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Polymorphism",
        Method: "SayHello",
        Args: []string{"@scope/jsii-calc-lib.IFriendly",},

    })
    return "NOOP_RETURN_STRING"
}

type PowerIface interface {
    GetBase() jsii.Any
    SetBase()
    GetExpression() jsii.Any
    SetExpression()
    GetPow() jsii.Any
    SetPow()
}

type Power struct {
    Base jsii.Any
    Expression jsii.Any
    Pow jsii.Any
}

type PropertyNamedPropertyIface interface {
    GetProperty() string
    SetProperty()
    GetYetAnoterOne() bool
    SetYetAnoterOne()
}

type PropertyNamedProperty struct {
    Property string
    YetAnoterOne bool
}

type PublicClassIface interface {
    Hello() jsii.Any
}

type PublicClass struct {
}

func (p *PublicClass) Hello() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PublicClass",
        Method: "Hello",
        Args: []string{},

    })
    return nil
}

type PythonReservedWordsIface interface {
    And() jsii.Any
    As() jsii.Any
    Assert() jsii.Any
    Async() jsii.Any
    Await() jsii.Any
    Break() jsii.Any
    Class() jsii.Any
    Continue() jsii.Any
    Def() jsii.Any
    Del() jsii.Any
    Elif() jsii.Any
    Else() jsii.Any
    Except() jsii.Any
    Finally() jsii.Any
    For() jsii.Any
    From() jsii.Any
    Global() jsii.Any
    If() jsii.Any
    Import() jsii.Any
    In() jsii.Any
    Is() jsii.Any
    Lambda() jsii.Any
    Nonlocal() jsii.Any
    Not() jsii.Any
    Or() jsii.Any
    Pass() jsii.Any
    Raise() jsii.Any
    Return() jsii.Any
    Try() jsii.Any
    While() jsii.Any
    With() jsii.Any
    Yield() jsii.Any
}

type PythonReservedWords struct {
}

func (p *PythonReservedWords) And() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "And",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) As() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "As",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Assert() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Assert",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Async() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Async",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Await() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Await",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Break() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Break",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Class() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Class",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Continue() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Continue",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Def() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Def",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Del() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Del",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Elif() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Elif",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Else() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Else",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Except() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Except",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Finally() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Finally",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) For() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "For",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) From() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "From",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Global() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Global",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) If() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "If",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Import() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Import",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) In() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "In",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Is() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Is",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Lambda() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Lambda",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Nonlocal() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Nonlocal",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Not() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Not",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Or() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Or",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Pass() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Pass",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Raise() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Raise",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Return() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Return",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Try() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Try",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) While() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "While",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) With() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "With",
        Args: []string{},

    })
    return nil
}

func (p *PythonReservedWords) Yield() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "PythonReservedWords",
        Method: "Yield",
        Args: []string{},

    })
    return nil
}

type ReferenceEnumFromScopedPackageIface interface {
    GetFoo() jsii.Any
    SetFoo()
    LoadFoo() jsii.Any
    SaveFoo() jsii.Any
}

type ReferenceEnumFromScopedPackage struct {
    Foo jsii.Any
}

func (r *ReferenceEnumFromScopedPackage) LoadFoo() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ReferenceEnumFromScopedPackage",
        Method: "LoadFoo",
        Args: []string{},

    })
    return nil
}

func (r *ReferenceEnumFromScopedPackage) SaveFoo() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ReferenceEnumFromScopedPackage",
        Method: "SaveFoo",
        Args: []string{"@scope/jsii-calc-lib.EnumFromScopedModule",},

    })
    return nil
}

type ReturnsPrivateImplementationOfInterfaceIface interface {
    GetPrivateImplementation() IPrivatelyImplemented
    SetPrivateImplementation()
}

type ReturnsPrivateImplementationOfInterface struct {
    PrivateImplementation IPrivatelyImplemented
}

type RootStructIface interface {
    GetStringProp() string
    GetNestedStruct() NestedStruct
}

type RootStruct struct {
    StringProp string
    NestedStruct NestedStruct
}


func (r RootStruct) GetStringProp() string {
    return r.StringProp
}

func (r RootStruct) GetNestedStruct() NestedStruct {
    return r.NestedStruct
}


type RootStructValidatorIface interface {
    Validate() jsii.Any
}

type RootStructValidator struct {
}

func (r *RootStructValidator) Validate() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "RootStructValidator",
        Method: "Validate",
        Args: []string{"jsii-calc.RootStruct",},

    })
    return nil
}

type RuntimeTypeCheckingIface interface {
    MethodWithDefaultedArguments() jsii.Any
    MethodWithOptionalAnyArgument() jsii.Any
    MethodWithOptionalArguments() jsii.Any
}

type RuntimeTypeChecking struct {
}

func (r *RuntimeTypeChecking) MethodWithDefaultedArguments() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "RuntimeTypeChecking",
        Method: "MethodWithDefaultedArguments",
        Args: []string{"number", "string", "date",},

    })
    return nil
}

func (r *RuntimeTypeChecking) MethodWithOptionalAnyArgument() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "RuntimeTypeChecking",
        Method: "MethodWithOptionalAnyArgument",
        Args: []string{"any",},

    })
    return nil
}

func (r *RuntimeTypeChecking) MethodWithOptionalArguments() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "RuntimeTypeChecking",
        Method: "MethodWithOptionalArguments",
        Args: []string{"number", "string", "date",},

    })
    return nil
}

type SecondLevelStructIface interface {
    GetDeeperRequiredProp() string
    GetDeeperOptionalProp() string
}

type SecondLevelStruct struct {
    DeeperRequiredProp string
    DeeperOptionalProp string
}


func (s SecondLevelStruct) GetDeeperRequiredProp() string {
    return s.DeeperRequiredProp
}

func (s SecondLevelStruct) GetDeeperOptionalProp() string {
    return s.DeeperOptionalProp
}


type SingleInstanceTwoTypesIface interface {
    Interface1() InbetweenClass
    Interface2() IPublicInterface
}

type SingleInstanceTwoTypes struct {
}

func (s *SingleInstanceTwoTypes) Interface1() InbetweenClass  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SingleInstanceTwoTypes",
        Method: "Interface1",
        Args: []string{},

    })
    return InbetweenClass{}
}

func (s *SingleInstanceTwoTypes) Interface2() IPublicInterface  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SingleInstanceTwoTypes",
        Method: "Interface2",
        Args: []string{},

    })
    return nil
}

type SingletonIntIface interface {
    IsSingletonInt() bool
}

type SingletonInt struct {
}

func (s *SingletonInt) IsSingletonInt() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SingletonInt",
        Method: "IsSingletonInt",
        Args: []string{"number",},

    })
    return true
}

type SingletonIntEnum string

const (
    SingletonIntEnumSingletonInt SingletonIntEnum = "SINGLETON_INT"
)

type SingletonStringIface interface {
    IsSingletonString() bool
}

type SingletonString struct {
}

func (s *SingletonString) IsSingletonString() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SingletonString",
        Method: "IsSingletonString",
        Args: []string{"string",},

    })
    return true
}

type SingletonStringEnum string

const (
    SingletonStringEnumSingletonString SingletonStringEnum = "SINGLETON_STRING"
)

type SmellyStructIface interface {
    GetProperty() string
    GetYetAnoterOne() bool
}

type SmellyStruct struct {
    Property string
    YetAnoterOne bool
}


func (s SmellyStruct) GetProperty() string {
    return s.Property
}

func (s SmellyStruct) GetYetAnoterOne() bool {
    return s.YetAnoterOne
}


type SomeTypeJsii976Iface interface {
    ReturnAnonymous() jsii.Any
    ReturnReturn() IReturnJsii976
}

type SomeTypeJsii976 struct {
}

func (s *SomeTypeJsii976) ReturnAnonymous() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SomeTypeJsii976",
        Method: "ReturnAnonymous",
        Args: []string{},

    })
    return nil
}

func (s *SomeTypeJsii976) ReturnReturn() IReturnJsii976  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SomeTypeJsii976",
        Method: "ReturnReturn",
        Args: []string{},

    })
    return nil
}

type StableClassIface interface {
    GetReadonlyProperty() string
    SetReadonlyProperty()
    GetMutableProperty() float64
    SetMutableProperty()
    Method() jsii.Any
}

type StableClass struct {
    ReadonlyProperty string
    MutableProperty float64
}

func (s *StableClass) Method() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "StableClass",
        Method: "Method",
        Args: []string{},

    })
    return nil
}

type StableEnum string

const (
    StableEnumOptionA StableEnum = "OPTION_A"
    StableEnumOptionB StableEnum = "OPTION_B"
)

type StableStructIface interface {
    GetReadonlyProperty() string
}

type StableStruct struct {
    ReadonlyProperty string
}


func (s StableStruct) GetReadonlyProperty() string {
    return s.ReadonlyProperty
}


type StaticContextIface interface {
    GetStaticVariable() bool
    SetStaticVariable()
    CanAccessStaticContext() bool
}

type StaticContext struct {
    StaticVariable bool
}

func (s *StaticContext) CanAccessStaticContext() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "StaticContext",
        Method: "CanAccessStaticContext",
        Args: []string{},

    })
    return true
}

type StaticsIface interface {
    GetBar() float64
    SetBar()
    GetConstObj() DoubleTrouble
    SetConstObj()
    GetFoo() string
    SetFoo()
    GetZooBar() map[string]string
    SetZooBar()
    GetInstance() Statics
    SetInstance()
    GetNonConstStatic() float64
    SetNonConstStatic()
    GetValue() string
    SetValue()
    StaticMethod() string
    JustMethod() string
}

type Statics struct {
    Bar float64
    ConstObj DoubleTrouble
    Foo string
    ZooBar map[string]string
    Instance *Statics
    NonConstStatic float64
    Value string
}

func (s *Statics) StaticMethod() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Statics",
        Method: "StaticMethod",
        Args: []string{"string",},

    })
    return "NOOP_RETURN_STRING"
}

func (s *Statics) JustMethod() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Statics",
        Method: "JustMethod",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type StringEnum string

const (
    StringEnumA StringEnum = "A"
    StringEnumB StringEnum = "B"
    StringEnumC StringEnum = "C"
)

type StripInternalIface interface {
    GetYouSeeMe() string
    SetYouSeeMe()
}

type StripInternal struct {
    YouSeeMe string
}

type StructAIface interface {
    GetRequiredString() string
    GetOptionalNumber() float64
    GetOptionalString() string
}

type StructA struct {
    RequiredString string
    OptionalNumber float64
    OptionalString string
}


func (s StructA) GetRequiredString() string {
    return s.RequiredString
}

func (s StructA) GetOptionalNumber() float64 {
    return s.OptionalNumber
}

func (s StructA) GetOptionalString() string {
    return s.OptionalString
}


type StructBIface interface {
    GetRequiredString() string
    GetOptionalBoolean() bool
    GetOptionalStructA() StructA
}

type StructB struct {
    RequiredString string
    OptionalBoolean bool
    OptionalStructA StructA
}


func (s StructB) GetRequiredString() string {
    return s.RequiredString
}

func (s StructB) GetOptionalBoolean() bool {
    return s.OptionalBoolean
}

func (s StructB) GetOptionalStructA() StructA {
    return s.OptionalStructA
}


type StructParameterTypeIface interface {
    GetScope() string
    GetProps() bool
}

type StructParameterType struct {
    Scope string
    Props bool
}


func (s StructParameterType) GetScope() string {
    return s.Scope
}

func (s StructParameterType) GetProps() bool {
    return s.Props
}


type StructPassingIface interface {
    HowManyVarArgsDidIPass() float64
    RoundTrip() TopLevelStruct
}

type StructPassing struct {
}

func (s *StructPassing) HowManyVarArgsDidIPass() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "StructPassing",
        Method: "HowManyVarArgsDidIPass",
        Args: []string{"number", "jsii-calc.TopLevelStruct",},

    })
    return 0.0
}

func (s *StructPassing) RoundTrip() TopLevelStruct  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "StructPassing",
        Method: "RoundTrip",
        Args: []string{"number", "jsii-calc.TopLevelStruct",},

    })
    return nil
}

type StructUnionConsumerIface interface {
    IsStructA() bool
    IsStructB() bool
}

type StructUnionConsumer struct {
}

func (s *StructUnionConsumer) IsStructA() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "StructUnionConsumer",
        Method: "IsStructA",
        Args: []string{"jsii-calc.StructA | jsii-calc.StructB",},

    })
    return true
}

func (s *StructUnionConsumer) IsStructB() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "StructUnionConsumer",
        Method: "IsStructB",
        Args: []string{"jsii-calc.StructA | jsii-calc.StructB",},

    })
    return true
}

type StructWithJavaReservedWordsIface interface {
    GetDefault() string
    GetAssert() string
    GetResult() string
    GetThat() string
}

type StructWithJavaReservedWords struct {
    Default string
    Assert string
    Result string
    That string
}


func (s StructWithJavaReservedWords) GetDefault() string {
    return s.Default
}

func (s StructWithJavaReservedWords) GetAssert() string {
    return s.Assert
}

func (s StructWithJavaReservedWords) GetResult() string {
    return s.Result
}

func (s StructWithJavaReservedWords) GetThat() string {
    return s.That
}


type SumIface interface {
    GetExpression() jsii.Any
    SetExpression()
    GetParts() []jsii.Any
    SetParts()
}

type Sum struct {
    Expression jsii.Any
    Parts []jsii.Any
}

type SupportsNiceJavaBuilderIface interface {
    GetId() float64
    SetId()
    GetRest() []string
    SetRest()
}

type SupportsNiceJavaBuilder struct {
    Id float64
    Rest []string
}

type SupportsNiceJavaBuilderPropsIface interface {
    GetBar() float64
    GetId() string
}

type SupportsNiceJavaBuilderProps struct {
    Bar float64
    Id string
}


func (s SupportsNiceJavaBuilderProps) GetBar() float64 {
    return s.Bar
}

func (s SupportsNiceJavaBuilderProps) GetId() string {
    return s.Id
}


type SupportsNiceJavaBuilderWithRequiredPropsIface interface {
    GetBar() float64
    SetBar()
    GetId() float64
    SetId()
    GetPropId() string
    SetPropId()
}

type SupportsNiceJavaBuilderWithRequiredProps struct {
    Bar float64
    Id float64
    PropId string
}

type SyncVirtualMethodsIface interface {
    GetReadonlyProperty() string
    SetReadonlyProperty()
    GetA() float64
    SetA()
    GetCallerIsProperty() float64
    SetCallerIsProperty()
    GetOtherProperty() string
    SetOtherProperty()
    GetTheProperty() string
    SetTheProperty()
    GetValueOfOtherProperty() string
    SetValueOfOtherProperty()
    CallerIsAsync() float64
    CallerIsMethod() float64
    ModifyOtherProperty() jsii.Any
    ModifyValueOfTheProperty() jsii.Any
    ReadA() float64
    RetrieveOtherProperty() string
    RetrieveReadOnlyProperty() string
    RetrieveValueOfTheProperty() string
    VirtualMethod() float64
    WriteA() jsii.Any
}

type SyncVirtualMethods struct {
    ReadonlyProperty string
    A float64
    CallerIsProperty float64
    OtherProperty string
    TheProperty string
    ValueOfOtherProperty string
}

func (s *SyncVirtualMethods) CallerIsAsync() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SyncVirtualMethods",
        Method: "CallerIsAsync",
        Args: []string{},

    })
    return 0.0
}

func (s *SyncVirtualMethods) CallerIsMethod() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SyncVirtualMethods",
        Method: "CallerIsMethod",
        Args: []string{},

    })
    return 0.0
}

func (s *SyncVirtualMethods) ModifyOtherProperty() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SyncVirtualMethods",
        Method: "ModifyOtherProperty",
        Args: []string{"string",},

    })
    return nil
}

func (s *SyncVirtualMethods) ModifyValueOfTheProperty() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SyncVirtualMethods",
        Method: "ModifyValueOfTheProperty",
        Args: []string{"string",},

    })
    return nil
}

func (s *SyncVirtualMethods) ReadA() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SyncVirtualMethods",
        Method: "ReadA",
        Args: []string{},

    })
    return 0.0
}

func (s *SyncVirtualMethods) RetrieveOtherProperty() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SyncVirtualMethods",
        Method: "RetrieveOtherProperty",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (s *SyncVirtualMethods) RetrieveReadOnlyProperty() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SyncVirtualMethods",
        Method: "RetrieveReadOnlyProperty",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (s *SyncVirtualMethods) RetrieveValueOfTheProperty() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SyncVirtualMethods",
        Method: "RetrieveValueOfTheProperty",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (s *SyncVirtualMethods) VirtualMethod() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SyncVirtualMethods",
        Method: "VirtualMethod",
        Args: []string{"number",},

    })
    return 0.0
}

func (s *SyncVirtualMethods) WriteA() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "SyncVirtualMethods",
        Method: "WriteA",
        Args: []string{"number",},

    })
    return nil
}

type ThrowerIface interface {
    ThrowError() jsii.Any
}

type Thrower struct {
}

func (t *Thrower) ThrowError() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Thrower",
        Method: "ThrowError",
        Args: []string{},

    })
    return nil
}

type TopLevelStructIface interface {
    GetRequired() string
    GetSecondLevel() jsii.Any
    GetOptional() string
}

type TopLevelStruct struct {
    Required string
    SecondLevel jsii.Any
    Optional string
}


func (t TopLevelStruct) GetRequired() string {
    return t.Required
}

func (t TopLevelStruct) GetSecondLevel() jsii.Any {
    return t.SecondLevel
}

func (t TopLevelStruct) GetOptional() string {
    return t.Optional
}


type UmaskCheckIface interface {
    Mode() float64
}

type UmaskCheck struct {
}

func (u *UmaskCheck) Mode() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "UmaskCheck",
        Method: "Mode",
        Args: []string{},

    })
    return 0.0
}

type UnaryOperationIface interface {
    GetOperand() jsii.Any
    SetOperand()
}

type UnaryOperation struct {
    Operand jsii.Any
}

type UnionPropertiesIface interface {
    GetBar() jsii.Any
    GetFoo() jsii.Any
}

type UnionProperties struct {
    Bar jsii.Any
    Foo jsii.Any
}


func (u UnionProperties) GetBar() jsii.Any {
    return u.Bar
}

func (u UnionProperties) GetFoo() jsii.Any {
    return u.Foo
}


type UpcasingReflectableIface interface {
    GetReflector() jsii.Any
    SetReflector()
    GetEntries() []jsii.Any
    SetEntries()
}

type UpcasingReflectable struct {
    Reflector jsii.Any
    Entries []jsii.Any
}

type UseBundledDependencyIface interface {
    Value() jsii.Any
}

type UseBundledDependency struct {
}

func (u *UseBundledDependency) Value() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "UseBundledDependency",
        Method: "Value",
        Args: []string{},

    })
    return nil
}

type UseCalcBaseIface interface {
    Hello() jsii.Any
}

type UseCalcBase struct {
}

func (u *UseCalcBase) Hello() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "UseCalcBase",
        Method: "Hello",
        Args: []string{},

    })
    return nil
}

type UsesInterfaceWithPropertiesIface interface {
    GetObj() IInterfaceWithProperties
    SetObj()
    JustRead() string
    ReadStringAndNumber() string
    WriteAndRead() string
}

type UsesInterfaceWithProperties struct {
    Obj IInterfaceWithProperties
}

func (u *UsesInterfaceWithProperties) JustRead() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "UsesInterfaceWithProperties",
        Method: "JustRead",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

func (u *UsesInterfaceWithProperties) ReadStringAndNumber() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "UsesInterfaceWithProperties",
        Method: "ReadStringAndNumber",
        Args: []string{"jsii-calc.IInterfaceWithPropertiesExtension",},

    })
    return "NOOP_RETURN_STRING"
}

func (u *UsesInterfaceWithProperties) WriteAndRead() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "UsesInterfaceWithProperties",
        Method: "WriteAndRead",
        Args: []string{"string",},

    })
    return "NOOP_RETURN_STRING"
}

type VariadicInvokerIface interface {
    AsArray() []float64
}

type VariadicInvoker struct {
}

func (v *VariadicInvoker) AsArray() []float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "VariadicInvoker",
        Method: "AsArray",
        Args: []string{"number",},

    })
    return nil
}

type VariadicMethodIface interface {
    AsArray() []float64
}

type VariadicMethod struct {
}

func (v *VariadicMethod) AsArray() []float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "VariadicMethod",
        Method: "AsArray",
        Args: []string{"number", "number",},

    })
    return nil
}

type VirtualMethodPlaygroundIface interface {
    OverrideMeAsync() float64
    OverrideMeSync() float64
    ParallelSumAsync() float64
    SerialSumAsync() float64
    SumSync() float64
}

type VirtualMethodPlayground struct {
}

func (v *VirtualMethodPlayground) OverrideMeAsync() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "VirtualMethodPlayground",
        Method: "OverrideMeAsync",
        Args: []string{"number",},

    })
    return 0.0
}

func (v *VirtualMethodPlayground) OverrideMeSync() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "VirtualMethodPlayground",
        Method: "OverrideMeSync",
        Args: []string{"number",},

    })
    return 0.0
}

func (v *VirtualMethodPlayground) ParallelSumAsync() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "VirtualMethodPlayground",
        Method: "ParallelSumAsync",
        Args: []string{"number",},

    })
    return 0.0
}

func (v *VirtualMethodPlayground) SerialSumAsync() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "VirtualMethodPlayground",
        Method: "SerialSumAsync",
        Args: []string{"number",},

    })
    return 0.0
}

func (v *VirtualMethodPlayground) SumSync() float64  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "VirtualMethodPlayground",
        Method: "SumSync",
        Args: []string{"number",},

    })
    return 0.0
}

type VoidCallbackIface interface {
    GetMethodWasCalled() bool
    SetMethodWasCalled()
    CallMe() jsii.Any
    OverrideMe() jsii.Any
}

type VoidCallback struct {
    MethodWasCalled bool
}

func (v *VoidCallback) CallMe() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "VoidCallback",
        Method: "CallMe",
        Args: []string{},

    })
    return nil
}

func (v *VoidCallback) OverrideMe() jsii.Any  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "VoidCallback",
        Method: "OverrideMe",
        Args: []string{},

    })
    return nil
}

type WithPrivatePropertyInConstructorIface interface {
    GetSuccess() bool
    SetSuccess()
}

type WithPrivatePropertyInConstructor struct {
    Success bool
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/DerivedClassHasNoProperties.go 1`] = `
package DerivedClassHasNoProperties

import (
    "github.com/aws-cdk/jsii/jsii"
)

type BaseIface interface {
    GetProp() string
    SetProp()
}

type Base struct {
    Prop string
}

type DerivedIface interface {
}

type Derived struct {
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/InterfaceInNamespaceIncludesClasses.go 1`] = `
package InterfaceInNamespaceIncludesClasses

import (
    "github.com/aws-cdk/jsii/jsii"
)

type FooIface interface {
    GetBar() string
    SetBar()
}

type Foo struct {
    Bar string
}

type HelloIface interface {
    GetFoo() float64
}

type Hello struct {
    Foo float64
}


func (h Hello) GetFoo() float64 {
    return h.Foo
}



`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/InterfaceInNamespaceOnlyInterface.go 1`] = `
package InterfaceInNamespaceOnlyInterface

import (
    "github.com/aws-cdk/jsii/jsii"
)

type HelloIface interface {
    GetFoo() float64
}

type Hello struct {
    Foo float64
}


func (h Hello) GetFoo() float64 {
    return h.Foo
}



`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/PythonSelf.go 1`] = `
package PythonSelf

import (
    "github.com/aws-cdk/jsii/jsii"
)

type ClassWithSelfIface interface {
    GetSelf() string
    SetSelf()
    Method() string
}

type ClassWithSelf struct {
    Self string
}

func (c *ClassWithSelf) Method() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "ClassWithSelf",
        Method: "Method",
        Args: []string{"number",},

    })
    return "NOOP_RETURN_STRING"
}

type ClassWithSelfKwargIface interface {
    GetProps() StructWithSelf
    SetProps()
}

type ClassWithSelfKwarg struct {
    Props StructWithSelf
}

type IInterfaceWithSelf interface {
    Method() string
}

type StructWithSelfIface interface {
    GetSelf() string
}

type StructWithSelf struct {
    Self string
}


func (s StructWithSelf) GetSelf() string {
    return s.Self
}



`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/composition.go 1`] = `
package composition

import (
    "github.com/aws-cdk/jsii/jsii"
)

type CompositeOperationIface interface {
    GetExpression() jsii.Any
    SetExpression()
    GetValue() float64
    SetValue()
    GetDecorationPostfixes() []string
    SetDecorationPostfixes()
    GetDecorationPrefixes() []string
    SetDecorationPrefixes()
    GetStringStyle() CompositionStringStyle
    SetStringStyle()
    ToString() string
}

type CompositeOperation struct {
    Expression jsii.Any
    Value float64
    DecorationPostfixes []string
    DecorationPrefixes []string
    StringStyle CompositionStringStyle
}

func (c *CompositeOperation) ToString() string  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "CompositeOperation",
        Method: "ToString",
        Args: []string{},

    })
    return "NOOP_RETURN_STRING"
}

type CompositionStringStyle string

const (
    CompositionStringStyleNormal CompositionStringStyle = "NORMAL"
    CompositionStringStyleDecorated CompositionStringStyle = "DECORATED"
)


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule.go 1`] = `
package submodule

import (
    "github.com/aws-cdk/jsii/jsii"
    "child"
    "jsiicalc"
)

type MyClassIface interface {
    GetAwesomeness() child.Awesomeness
    SetAwesomeness()
    GetDefinedAt() string
    SetDefinedAt()
    GetGoodness() child.Goodness
    SetGoodness()
    GetProps() child.SomeStruct
    SetProps()
    GetAllTypes() jsiicalc.AllTypes
    SetAllTypes()
}

type MyClass struct {
    Awesomeness child.Awesomeness
    DefinedAt string
    Goodness child.Goodness
    Props child.SomeStruct
    AllTypes jsiicalc.AllTypes
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule/backreferences.go 1`] = `
package backreferences

import (
    "github.com/aws-cdk/jsii/jsii"
)

type MyClassReferenceIface interface {
    GetReference() submodule.MyClass
}

type MyClassReference struct {
    Reference submodule.MyClass
}


func (m MyClassReference) GetReference() submodule.MyClass {
    return m.Reference
}



`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule/child.go 1`] = `
package child

import (
    "github.com/aws-cdk/jsii/jsii"
)

type Awesomeness string

const (
    AwesomenessAwesome Awesomeness = "AWESOME"
)

type Goodness string

const (
    GoodnessPrettyGood Goodness = "PRETTY_GOOD"
    GoodnessReallyGood Goodness = "REALLY_GOOD"
    GoodnessAmazinglyGood Goodness = "AMAZINGLY_GOOD"
)

type InnerClassIface interface {
    GetStaticProp() SomeStruct
    SetStaticProp()
}

type InnerClass struct {
    StaticProp SomeStruct
}

type KwargsPropsIface interface {
    GetExtra() string
}

type KwargsProps struct {
    Extra string
}


func (k KwargsProps) GetExtra() string {
    return k.Extra
}


type OuterClassIface interface {
    GetInnerClass() InnerClass
    SetInnerClass()
}

type OuterClass struct {
    InnerClass InnerClass
}

type SomeEnum string

const (
    SomeEnumSome SomeEnum = "SOME"
)

type SomeStructIface interface {
    GetProp() SomeEnum
}

type SomeStruct struct {
    Prop SomeEnum
}


func (s SomeStruct) GetProp() SomeEnum {
    return s.Prop
}


type StructureIface interface {
    GetBool() bool
}

type Structure struct {
    Bool bool
}


func (s Structure) GetBool() bool {
    return s.Bool
}



`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule/isolated.go 1`] = `
package isolated

import (
    "github.com/aws-cdk/jsii/jsii"
)

type KwargsIface interface {
    Method() bool
}

type Kwargs struct {
}

func (k *Kwargs) Method() bool  {
    jsii.NoOpRequest(jsii.NoOpApiRequest {

        Class: "Kwargs",
        Method: "Method",
        Args: []string{"jsii-calc.submodule.child.KwargsProps",},

    })
    return true
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule/nestedsubmodule.go 1`] = `
package nestedsubmodule

import (
    "github.com/aws-cdk/jsii/jsii"
    "child"
)

type NamespacedIface interface {
    GetDefinedAt() string
    SetDefinedAt()
    GetGoodness() child.Goodness
    SetGoodness()
}

type Namespaced struct {
    DefinedAt string
    Goodness child.Goodness
}


`;

exports[`Generated code for "jsii-calc": <outDir>/golang/jsiicalc/submodule/nestedsubmodule/deeplyNested.go 1`] = `
package deeplyNested

import (
    "github.com/aws-cdk/jsii/jsii"
)

type INamespaced interface {
    GetDefinedAt() string
}


`;

exports[`Generated code for "jsii-calc": <outDir>/java/pom.xml 1`] = `
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <name>\${project.groupId}:\${project.artifactId}</name>
  <description>A simple calcuator built on JSII.</description>
  <url>https://github.com/aws/jsii</url>
  <licenses>
    <license>
      <name>Apache License 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0</url>
      <distribution>repo</distribution>
      <comments>An OSI-approved license</comments>
    </license>
  </licenses>
  <developers>
    <developer>
      <organization>Amazon Web Services</organization>
      <roles>
        <role>author</role>
      </roles>
      <organizationUrl>https://aws.amazon.com</organizationUrl>
    </developer>
    <developer>
      <name>Elad Ben-Israel</name>
      <roles>
        <role>maintainer</role>
      </roles>
      <url>https://github.com/eladb</url>
    </developer>
    <developer>
      <name>Rico Huijbers</name>
      <roles>
        <role>maintainer</role>
      </roles>
      <url>https://github.com/rix0rrr</url>
    </developer>
    <developer>
      <name>Romain Marcadier-Muller</name>
      <roles>
        <role>maintainer</role>
      </roles>
      <url>https://github.com/RomainMuller</url>
    </developer>
  </developers>
  <scm>
    <connection>scm:git:https://github.com/aws/jsii.git</connection>
    <url>https://github.com/aws/jsii.git</url>
  </scm>
  <groupId>software.amazon.jsii.tests</groupId>
  <artifactId>calculator</artifactId>
  <version>0.0.0</version>
  <packaging>jar</packaging>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
    <dependency>
      <groupId>software.amazon.jsii.tests</groupId>
      <artifactId>calculator-base</artifactId>
      <version>[0.0.0,0.0.1)</version>
    </dependency>
    <dependency>
      <groupId>software.amazon.jsii.tests</groupId>
      <artifactId>calculator-base-of-base</artifactId>
      <version>[0.0.0,0.0.1)</version>
    </dependency>
    <dependency>
      <groupId>software.amazon.jsii.tests</groupId>
      <artifactId>calculator-lib</artifactId>
      <version>[0.0.0.DEVPREVIEW,0.0.1.DEVPREVIEW)</version>
    </dependency>
    <dependency>
      <groupId>software.amazon.jsii</groupId>
      <artifactId>jsii-runtime</artifactId>
      <version>[0.0.0,0.0.1)</version>
    </dependency>
    <dependency>
      <groupId>org.jetbrains</groupId>
      <artifactId>annotations</artifactId>
      <version>[16.0.3,20.0.0)</version>
    </dependency>
    <dependency>
      <!-- Provides @javax.annotation.Generated for JDKs >= 9 -->
      <groupId>javax.annotation</groupId>
      <artifactId>javax.annotation-api</artifactId>
      <version>[1.3.2,1.4.0)</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
          <archive>
            <index>true</index>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.1.1</version>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <failOnError>false</failOnError>
          <show>protected</show>
          <sourceFileExcludes>
            <exclude>**/$Module.java</exclude>
          </sourceFileExcludes>
          <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
          <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>3.6</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <generateBackupPoms>false</generateBackupPoms>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/$Module.java 1`] = `
package software.amazon.jsii.tests.calculator;

import static java.util.Arrays.asList;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.Reader;
import java.io.UncheckedIOException;

import java.nio.charset.StandardCharsets;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import software.amazon.jsii.JsiiModule;

public final class $Module extends JsiiModule {
    private static final Map<String, String> MODULE_TYPES = load();

    private static Map<String, String> load() {
        final Map<String, String> result = new HashMap<>();
        final ClassLoader cl = $Module.class.getClassLoader();
        try (final InputStream is = cl.getResourceAsStream("software/amazon/jsii/tests/calculator/$Module.txt");
             final Reader rd = new InputStreamReader(is, StandardCharsets.UTF_8);
             final BufferedReader br = new BufferedReader(rd)) {
            br.lines()
              .filter(line -> !line.trim().isEmpty())
              .forEach(line ->  {
                final String[] parts = line.split("=", 2);
                final String fqn = parts[0];
                final String className = parts[1];
                result.put(fqn, className);
            });
        }
        catch (final IOException exception) {
            throw new UncheckedIOException(exception);
        }
        return result;
    }

    private final Map<String, Class<?>> cache = new HashMap<>();

    public $Module() {
        super("jsii-calc", "0.0.0", $Module.class, "jsii-calc@0.0.0.jsii.tgz");
    }

    @Override
    public List<Class<? extends JsiiModule>> getDependencies() {
        return asList(software.amazon.jsii.tests.calculator.base.$Module.class, software.amazon.jsii.tests.calculator.baseofbase.$Module.class, software.amazon.jsii.tests.calculator.lib.$Module.class);
    }

    @Override
    protected Class<?> resolveClass(final String fqn) throws ClassNotFoundException {
        if (!MODULE_TYPES.containsKey(fqn)) {
            throw new ClassNotFoundException("Unknown JSII type: " + fqn);
        }
        String className = MODULE_TYPES.get(fqn);
        if (!this.cache.containsKey(className)) {
            this.cache.put(className, this.findClass(className));
        }
        return this.cache.get(className);
    }

    private Class<?> findClass(final String binaryName) {
        try {
            return Class.forName(binaryName);
        }
        catch (final ClassNotFoundException exception) {
            throw new RuntimeException(exception);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/AbstractClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.AbstractClass")
public abstract class AbstractClass extends software.amazon.jsii.tests.calculator.AbstractClassBase implements software.amazon.jsii.tests.calculator.IInterfaceImplementedByAbstractClass {

    protected AbstractClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected AbstractClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected AbstractClass() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param name This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public abstract @org.jetbrains.annotations.NotNull java.lang.String abstractMethod(final @org.jetbrains.annotations.NotNull java.lang.String name);

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number nonAbstractMethod() {
        return this.jsiiCall("nonAbstractMethod", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getPropFromInterface() {
        return this.jsiiGet("propFromInterface", java.lang.String.class);
    }

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.AbstractClass {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getPropFromInterface() {
            return this.jsiiGet("propFromInterface", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getAbstractProperty() {
            return this.jsiiGet("abstractProperty", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @param name This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String abstractMethod(final @org.jetbrains.annotations.NotNull java.lang.String name) {
            return this.jsiiCall("abstractMethod", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(name, "name is required") });
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/AbstractClassBase.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.AbstractClassBase")
public abstract class AbstractClassBase extends software.amazon.jsii.JsiiObject {

    protected AbstractClassBase(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected AbstractClassBase(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected AbstractClassBase() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public abstract @org.jetbrains.annotations.NotNull java.lang.String getAbstractProperty();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.AbstractClassBase {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getAbstractProperty() {
            return this.jsiiGet("abstractProperty", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/AbstractClassReturner.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.AbstractClassReturner")
public class AbstractClassReturner extends software.amazon.jsii.JsiiObject {

    protected AbstractClassReturner(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected AbstractClassReturner(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public AbstractClassReturner() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.AbstractClass giveMeAbstract() {
        return this.jsiiCall("giveMeAbstract", software.amazon.jsii.tests.calculator.AbstractClass.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IInterfaceImplementedByAbstractClass giveMeInterface() {
        return this.jsiiCall("giveMeInterface", software.amazon.jsii.tests.calculator.IInterfaceImplementedByAbstractClass.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.AbstractClassBase getReturnAbstractFromProperty() {
        return this.jsiiGet("returnAbstractFromProperty", software.amazon.jsii.tests.calculator.AbstractClassBase.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/AbstractSuite.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Ensures abstract members implementations correctly register overrides in various languages.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.AbstractSuite")
public abstract class AbstractSuite extends software.amazon.jsii.JsiiObject {

    protected AbstractSuite(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected AbstractSuite(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected AbstractSuite() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param str This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected abstract @org.jetbrains.annotations.NotNull java.lang.String someMethod(final @org.jetbrains.annotations.NotNull java.lang.String str);

    /**
     * Sets \`seed\` to \`this.property\`, then calls \`someMethod\` with \`this.property\` and returns the result.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param seed a \`string\`. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String workItAll(final @org.jetbrains.annotations.NotNull java.lang.String seed) {
        return this.jsiiCall("workItAll", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(seed, "seed is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected abstract @org.jetbrains.annotations.NotNull java.lang.String getProperty();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected abstract void setProperty(final @org.jetbrains.annotations.NotNull java.lang.String value);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.AbstractSuite {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        protected @org.jetbrains.annotations.NotNull java.lang.String getProperty() {
            return this.jsiiGet("property", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        protected void setProperty(final @org.jetbrains.annotations.NotNull java.lang.String value) {
            this.jsiiSet("property", java.util.Objects.requireNonNull(value, "property is required"));
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @param str This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        protected @org.jetbrains.annotations.NotNull java.lang.String someMethod(final @org.jetbrains.annotations.NotNull java.lang.String str) {
            return this.jsiiCall("someMethod", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(str, "str is required") });
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Add.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * The "+" binary operation.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Add")
public class Add extends software.amazon.jsii.tests.calculator.BinaryOperation {

    protected Add(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Add(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * Creates a BinaryOperation.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param lhs Left-hand side operand. This parameter is required.
     * @param rhs Right-hand side operand. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Add(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value lhs, final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value rhs) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(lhs, "lhs is required"), java.util.Objects.requireNonNull(rhs, "rhs is required") });
    }

    /**
     * String representation of the value.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String toString() {
        return this.jsiiCall("toString", java.lang.String.class);
    }

    /**
     * The value.
     * <p>
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
        return this.jsiiGet("value", java.lang.Number.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/AllTypes.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * This class includes property for all types supported by jsii.
 * <p>
 * The setters will validate
 * that the value set is of the expected type and throw otherwise.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.AllTypes")
public class AllTypes extends software.amazon.jsii.JsiiObject {

    protected AllTypes(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected AllTypes(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public AllTypes() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param inp This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void anyIn(final @org.jetbrains.annotations.NotNull java.lang.Object inp) {
        this.jsiiCall("anyIn", software.amazon.jsii.NativeType.VOID, new Object[] { inp });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Object anyOut() {
        return this.jsiiCall("anyOut", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.StringEnum enumMethod(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.StringEnum value) {
        return this.jsiiCall("enumMethod", software.amazon.jsii.tests.calculator.StringEnum.class, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getEnumPropertyValue() {
        return this.jsiiGet("enumPropertyValue", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<java.lang.Object> getAnyArrayProperty() {
        return java.util.Collections.unmodifiableList(this.jsiiGet("anyArrayProperty", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.Object.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setAnyArrayProperty(final @org.jetbrains.annotations.NotNull java.util.List<java.lang.Object> value) {
        this.jsiiSet("anyArrayProperty", java.util.Objects.requireNonNull(value, "anyArrayProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> getAnyMapProperty() {
        return java.util.Collections.unmodifiableMap(this.jsiiGet("anyMapProperty", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(java.lang.Object.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setAnyMapProperty(final @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> value) {
        this.jsiiSet("anyMapProperty", java.util.Objects.requireNonNull(value, "anyMapProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Object getAnyProperty() {
        return this.jsiiGet("anyProperty", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setAnyProperty(final @org.jetbrains.annotations.NotNull java.lang.Object value) {
        this.jsiiSet("anyProperty", java.util.Objects.requireNonNull(value, "anyProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> getArrayProperty() {
        return java.util.Collections.unmodifiableList(this.jsiiGet("arrayProperty", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setArrayProperty(final @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> value) {
        this.jsiiSet("arrayProperty", java.util.Objects.requireNonNull(value, "arrayProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean getBooleanProperty() {
        return this.jsiiGet("booleanProperty", java.lang.Boolean.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setBooleanProperty(final @org.jetbrains.annotations.NotNull java.lang.Boolean value) {
        this.jsiiSet("booleanProperty", java.util.Objects.requireNonNull(value, "booleanProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.time.Instant getDateProperty() {
        return this.jsiiGet("dateProperty", java.time.Instant.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setDateProperty(final @org.jetbrains.annotations.NotNull java.time.Instant value) {
        this.jsiiSet("dateProperty", java.util.Objects.requireNonNull(value, "dateProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.AllTypesEnum getEnumProperty() {
        return this.jsiiGet("enumProperty", software.amazon.jsii.tests.calculator.AllTypesEnum.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setEnumProperty(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.AllTypesEnum value) {
        this.jsiiSet("enumProperty", java.util.Objects.requireNonNull(value, "enumProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull com.fasterxml.jackson.databind.node.ObjectNode getJsonProperty() {
        return this.jsiiGet("jsonProperty", com.fasterxml.jackson.databind.node.ObjectNode.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setJsonProperty(final @org.jetbrains.annotations.NotNull com.fasterxml.jackson.databind.node.ObjectNode value) {
        this.jsiiSet("jsonProperty", java.util.Objects.requireNonNull(value, "jsonProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, software.amazon.jsii.tests.calculator.lib.Number> getMapProperty() {
        return java.util.Collections.unmodifiableMap(this.jsiiGet("mapProperty", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.lib.Number.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setMapProperty(final @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, software.amazon.jsii.tests.calculator.lib.Number> value) {
        this.jsiiSet("mapProperty", java.util.Objects.requireNonNull(value, "mapProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getNumberProperty() {
        return this.jsiiGet("numberProperty", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setNumberProperty(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        this.jsiiSet("numberProperty", java.util.Objects.requireNonNull(value, "numberProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getStringProperty() {
        return this.jsiiGet("stringProperty", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setStringProperty(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("stringProperty", java.util.Objects.requireNonNull(value, "stringProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<java.lang.Object> getUnionArrayProperty() {
        return java.util.Collections.unmodifiableList(this.jsiiGet("unionArrayProperty", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.Object.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnionArrayProperty(final @org.jetbrains.annotations.NotNull java.util.List<java.lang.Object> value) {
        this.jsiiSet("unionArrayProperty", java.util.Objects.requireNonNull(value, "unionArrayProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> getUnionMapProperty() {
        return java.util.Collections.unmodifiableMap(this.jsiiGet("unionMapProperty", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(java.lang.Object.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnionMapProperty(final @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> value) {
        this.jsiiSet("unionMapProperty", java.util.Objects.requireNonNull(value, "unionMapProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Object getUnionProperty() {
        return this.jsiiGet("unionProperty", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnionProperty(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("unionProperty", java.util.Objects.requireNonNull(value, "unionProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnionProperty(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        this.jsiiSet("unionProperty", java.util.Objects.requireNonNull(value, "unionProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnionProperty(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.Multiply value) {
        this.jsiiSet("unionProperty", java.util.Objects.requireNonNull(value, "unionProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnionProperty(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Number value) {
        this.jsiiSet("unionProperty", java.util.Objects.requireNonNull(value, "unionProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<java.lang.Object> getUnknownArrayProperty() {
        return java.util.Collections.unmodifiableList(this.jsiiGet("unknownArrayProperty", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.Object.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnknownArrayProperty(final @org.jetbrains.annotations.NotNull java.util.List<java.lang.Object> value) {
        this.jsiiSet("unknownArrayProperty", java.util.Objects.requireNonNull(value, "unknownArrayProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> getUnknownMapProperty() {
        return java.util.Collections.unmodifiableMap(this.jsiiGet("unknownMapProperty", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(java.lang.Object.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnknownMapProperty(final @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> value) {
        this.jsiiSet("unknownMapProperty", java.util.Objects.requireNonNull(value, "unknownMapProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Object getUnknownProperty() {
        return this.jsiiGet("unknownProperty", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnknownProperty(final @org.jetbrains.annotations.NotNull java.lang.Object value) {
        this.jsiiSet("unknownProperty", java.util.Objects.requireNonNull(value, "unknownProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.StringEnum getOptionalEnumValue() {
        return this.jsiiGet("optionalEnumValue", software.amazon.jsii.tests.calculator.StringEnum.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setOptionalEnumValue(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.StringEnum value) {
        this.jsiiSet("optionalEnumValue", value);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/AllTypesEnum.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.AllTypesEnum")
public enum AllTypesEnum {
    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    MY_ENUM_VALUE,
    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    YOUR_ENUM_VALUE,
    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    THIS_IS_GREAT,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/AllowedMethodNames.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.AllowedMethodNames")
public class AllowedMethodNames extends software.amazon.jsii.JsiiObject {

    protected AllowedMethodNames(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected AllowedMethodNames(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public AllowedMethodNames() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param _p1 This parameter is required.
     * @param _p2 This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void getBar(final @org.jetbrains.annotations.NotNull java.lang.String _p1, final @org.jetbrains.annotations.NotNull java.lang.Number _p2) {
        this.jsiiCall("getBar", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(_p1, "_p1 is required"), java.util.Objects.requireNonNull(_p2, "_p2 is required") });
    }

    /**
     * getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param withParam This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getFoo(final @org.jetbrains.annotations.NotNull java.lang.String withParam) {
        return this.jsiiCall("getFoo", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(withParam, "withParam is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param _x This parameter is required.
     * @param _y This parameter is required.
     * @param _z This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setBar(final @org.jetbrains.annotations.NotNull java.lang.String _x, final @org.jetbrains.annotations.NotNull java.lang.Number _y, final @org.jetbrains.annotations.NotNull java.lang.Boolean _z) {
        this.jsiiCall("setBar", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(_x, "_x is required"), java.util.Objects.requireNonNull(_y, "_y is required"), java.util.Objects.requireNonNull(_z, "_z is required") });
    }

    /**
     * setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param _x This parameter is required.
     * @param _y This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setFoo(final @org.jetbrains.annotations.NotNull java.lang.String _x, final @org.jetbrains.annotations.NotNull java.lang.Number _y) {
        this.jsiiCall("setFoo", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(_x, "_x is required"), java.util.Objects.requireNonNull(_y, "_y is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/AmbiguousParameters.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.AmbiguousParameters")
public class AmbiguousParameters extends software.amazon.jsii.JsiiObject {

    protected AmbiguousParameters(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected AmbiguousParameters(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param scope This parameter is required.
     * @param props This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public AmbiguousParameters(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.Bell scope, final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.StructParameterType props) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(scope, "scope is required"), java.util.Objects.requireNonNull(props, "props is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.StructParameterType getProps() {
        return this.jsiiGet("props", software.amazon.jsii.tests.calculator.StructParameterType.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.Bell getScope() {
        return this.jsiiGet("scope", software.amazon.jsii.tests.calculator.Bell.class);
    }

    /**
     * A fluent builder for {@link software.amazon.jsii.tests.calculator.AmbiguousParameters}.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<software.amazon.jsii.tests.calculator.AmbiguousParameters> {
        /**
         * EXPERIMENTAL
         * <p>
         * @return a new instance of {@link Builder}.
         * @param scope This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public static Builder create(final software.amazon.jsii.tests.calculator.Bell scope) {
            return new Builder(scope);
        }

        private final software.amazon.jsii.tests.calculator.Bell scope;
        private final software.amazon.jsii.tests.calculator.StructParameterType.Builder props;

        private Builder(final software.amazon.jsii.tests.calculator.Bell scope) {
            this.scope = scope;
            this.props = new software.amazon.jsii.tests.calculator.StructParameterType.Builder();
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @return {@code this}
         * @param scope This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder scope(final java.lang.String scope) {
            this.props.scope(scope);
            return this;
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @return {@code this}
         * @param props This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder props(final java.lang.Boolean props) {
            this.props.props(props);
            return this;
        }

        /**
         * @returns a newly built instance of {@link software.amazon.jsii.tests.calculator.AmbiguousParameters}.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public software.amazon.jsii.tests.calculator.AmbiguousParameters build() {
            return new software.amazon.jsii.tests.calculator.AmbiguousParameters(
                this.scope,
                this.props.build()
            );
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/AnonymousImplementationProvider.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.AnonymousImplementationProvider")
public class AnonymousImplementationProvider extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IAnonymousImplementationProvider {

    protected AnonymousImplementationProvider(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected AnonymousImplementationProvider(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public AnonymousImplementationProvider() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.Implementation provideAsClass() {
        return this.jsiiCall("provideAsClass", software.amazon.jsii.tests.calculator.Implementation.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IAnonymouslyImplementMe provideAsInterface() {
        return this.jsiiCall("provideAsInterface", software.amazon.jsii.tests.calculator.IAnonymouslyImplementMe.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/AsyncVirtualMethods.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.AsyncVirtualMethods")
public class AsyncVirtualMethods extends software.amazon.jsii.JsiiObject {

    protected AsyncVirtualMethods(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected AsyncVirtualMethods(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public AsyncVirtualMethods() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number callMe() {
        return this.jsiiAsyncCall("callMe", java.lang.Number.class);
    }

    /**
     * Just calls "overrideMeToo".
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number callMe2() {
        return this.jsiiAsyncCall("callMe2", java.lang.Number.class);
    }

    /**
     * This method calls the "callMe" async method indirectly, which will then invoke a virtual method.
     * <p>
     * This is a "double promise" situation, which
     * means that callbacks are not going to be available immediate, but only
     * after an "immediates" cycle.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number callMeDoublePromise() {
        return this.jsiiAsyncCall("callMeDoublePromise", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number dontOverrideMe() {
        return this.jsiiCall("dontOverrideMe", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param mult This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number overrideMe(final @org.jetbrains.annotations.NotNull java.lang.Number mult) {
        return this.jsiiAsyncCall("overrideMe", java.lang.Number.class, new Object[] { java.util.Objects.requireNonNull(mult, "mult is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number overrideMeToo() {
        return this.jsiiAsyncCall("overrideMeToo", java.lang.Number.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/AugmentableClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.AugmentableClass")
public class AugmentableClass extends software.amazon.jsii.JsiiObject {

    protected AugmentableClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected AugmentableClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public AugmentableClass() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void methodOne() {
        this.jsiiCall("methodOne", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void methodTwo() {
        this.jsiiCall("methodTwo", software.amazon.jsii.NativeType.VOID);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/BaseJsii976.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.BaseJsii976")
public class BaseJsii976 extends software.amazon.jsii.JsiiObject {

    protected BaseJsii976(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected BaseJsii976(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public BaseJsii976() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Bell.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Bell")
public class Bell extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IBell {

    protected Bell(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Bell(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Bell() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public void ring() {
        this.jsiiCall("ring", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean getRung() {
        return this.jsiiGet("rung", java.lang.Boolean.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setRung(final @org.jetbrains.annotations.NotNull java.lang.Boolean value) {
        this.jsiiSet("rung", java.util.Objects.requireNonNull(value, "rung is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/BinaryOperation.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Represents an operation with two operands.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.BinaryOperation")
public abstract class BinaryOperation extends software.amazon.jsii.tests.calculator.lib.Operation implements software.amazon.jsii.tests.calculator.lib.IFriendly {

    protected BinaryOperation(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected BinaryOperation(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * Creates a BinaryOperation.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param lhs Left-hand side operand. This parameter is required.
     * @param rhs Right-hand side operand. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected BinaryOperation(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value lhs, final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value rhs) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(lhs, "lhs is required"), java.util.Objects.requireNonNull(rhs, "rhs is required") });
    }

    /**
     * Say hello!
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String hello() {
        return this.jsiiCall("hello", java.lang.String.class);
    }

    /**
     * Left-hand side operand.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value getLhs() {
        return this.jsiiGet("lhs", software.amazon.jsii.tests.calculator.lib.Value.class);
    }

    /**
     * Right-hand side operand.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value getRhs() {
        return this.jsiiGet("rhs", software.amazon.jsii.tests.calculator.lib.Value.class);
    }

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.BinaryOperation {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * The value.
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
            return this.jsiiGet("value", java.lang.Number.class);
        }

        /**
         * Say hello!
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String hello() {
            return this.jsiiCall("hello", java.lang.String.class);
        }

        /**
         * String representation of the value.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String toString() {
            return this.jsiiCall("toString", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/BurriedAnonymousObject.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * See https://github.com/aws/aws-cdk/issues/7977.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.BurriedAnonymousObject")
public abstract class BurriedAnonymousObject extends software.amazon.jsii.JsiiObject {

    protected BurriedAnonymousObject(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected BurriedAnonymousObject(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected BurriedAnonymousObject() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean check() {
        return this.jsiiCall("check", java.lang.Boolean.class);
    }

    /**
     * Implement this method and have it return it's parameter.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @return \`value\`
     * @param value the value that should be returned. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public abstract @org.jetbrains.annotations.NotNull java.lang.Object giveItBack(final @org.jetbrains.annotations.NotNull java.lang.Object value);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.BurriedAnonymousObject {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * Implement this method and have it return it's parameter.
         * <p>
         * EXPERIMENTAL
         * <p>
         * @return \`value\`
         * @param value the value that should be returned. This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.Object giveItBack(final @org.jetbrains.annotations.NotNull java.lang.Object value) {
            return this.jsiiCall("giveItBack", java.lang.Object.class, new Object[] { value });
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Calculator.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * A calculator which maintains a current value and allows adding operations.
 * <p>
 * Here's how you use it:
 * <p>
 * <blockquote><pre>
 * // Example automatically generated. See https://github.com/aws/jsii/issues/826
 * Calculator calculator = new Calculator();
 * calculator.add(5);
 * calculator.mul(3);
 * System.out.println(calculator.expression.getValue());
 * </pre></blockquote>
 * <p>
 * I will repeat this example again, but in an &#64;example tag.
 * <p>
 * Example:
 * <p>
 * <blockquote><pre>{@code
 * // Example automatically generated. See https://github.com/aws/jsii/issues/826
 * Calculator calculator = new Calculator();
 * calculator.add(5);
 * calculator.mul(3);
 * System.out.println(calculator.expression.getValue());}</pre></blockquote>
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Calculator")
public class Calculator extends software.amazon.jsii.tests.calculator.composition.CompositeOperation {

    protected Calculator(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Calculator(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * Creates a Calculator object.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param props Initialization properties.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Calculator(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.CalculatorProps props) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { props });
    }

    /**
     * Creates a Calculator object.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Calculator() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * Adds a number to the current value.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void add(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        this.jsiiCall("add", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }

    /**
     * Multiplies the current value by a number.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void mul(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        this.jsiiCall("mul", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }

    /**
     * Negates the current value.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void neg() {
        this.jsiiCall("neg", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * Raises the current value by a power.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void pow(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        this.jsiiCall("pow", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }

    /**
     * Returns teh value of the union property (if defined).
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number readUnionValue() {
        return this.jsiiCall("readUnionValue", java.lang.Number.class);
    }

    /**
     * Returns the expression.
     * <p>
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value getExpression() {
        return this.jsiiGet("expression", software.amazon.jsii.tests.calculator.lib.Value.class);
    }

    /**
     * A log of all operations.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.lib.Value> getOperationsLog() {
        return java.util.Collections.unmodifiableList(this.jsiiGet("operationsLog", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.lib.Value.class))));
    }

    /**
     * A map of per operation name of all operations performed.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.util.List<software.amazon.jsii.tests.calculator.lib.Value>> getOperationsMap() {
        return java.util.Collections.unmodifiableMap(this.jsiiGet("operationsMap", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.lib.Value.class)))));
    }

    /**
     * The current value.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value getCurr() {
        return this.jsiiGet("curr", software.amazon.jsii.tests.calculator.lib.Value.class);
    }

    /**
     * The current value.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setCurr(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value value) {
        this.jsiiSet("curr", java.util.Objects.requireNonNull(value, "curr is required"));
    }

    /**
     * The maximum value allows in this calculator.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable java.lang.Number getMaxValue() {
        return this.jsiiGet("maxValue", java.lang.Number.class);
    }

    /**
     * The maximum value allows in this calculator.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setMaxValue(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
        this.jsiiSet("maxValue", value);
    }

    /**
     * Example of a property that accepts a union of types.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable java.lang.Object getUnionProperty() {
        return this.jsiiGet("unionProperty", java.lang.Object.class);
    }

    /**
     * Example of a property that accepts a union of types.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnionProperty(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.Add value) {
        this.jsiiSet("unionProperty", value);
    }

    /**
     * Example of a property that accepts a union of types.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnionProperty(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.Multiply value) {
        this.jsiiSet("unionProperty", value);
    }

    /**
     * Example of a property that accepts a union of types.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnionProperty(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.Power value) {
        this.jsiiSet("unionProperty", value);
    }

    /**
     * A fluent builder for {@link software.amazon.jsii.tests.calculator.Calculator}.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<software.amazon.jsii.tests.calculator.Calculator> {
        /**
         * EXPERIMENTAL
         * <p>
         * @return a new instance of {@link Builder}.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public static Builder create() {
            return new Builder();
        }

        private software.amazon.jsii.tests.calculator.CalculatorProps.Builder props;

        private Builder() {
        }

        /**
         * The initial value of the calculator.
         * <p>
         * NOTE: Any number works here, it's fine.
         * <p>
         * Default: 0
         * <p>
         * EXPERIMENTAL
         * <p>
         * @return {@code this}
         * @param initialValue The initial value of the calculator. This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder initialValue(final java.lang.Number initialValue) {
            this.props().initialValue(initialValue);
            return this;
        }

        /**
         * The maximum value the calculator can store.
         * <p>
         * Default: none
         * <p>
         * EXPERIMENTAL
         * <p>
         * @return {@code this}
         * @param maximumValue The maximum value the calculator can store. This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder maximumValue(final java.lang.Number maximumValue) {
            this.props().maximumValue(maximumValue);
            return this;
        }

        /**
         * @returns a newly built instance of {@link software.amazon.jsii.tests.calculator.Calculator}.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public software.amazon.jsii.tests.calculator.Calculator build() {
            return new software.amazon.jsii.tests.calculator.Calculator(
                this.props != null ? this.props.build() : null
            );
        }

        private software.amazon.jsii.tests.calculator.CalculatorProps.Builder props() {
            if (this.props == null) {
                this.props = new software.amazon.jsii.tests.calculator.CalculatorProps.Builder();
            }
            return this.props;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/CalculatorProps.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Properties for Calculator.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.CalculatorProps")
@software.amazon.jsii.Jsii.Proxy(CalculatorProps.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface CalculatorProps extends software.amazon.jsii.JsiiSerializable {

    /**
     * The initial value of the calculator.
     * <p>
     * NOTE: Any number works here, it's fine.
     * <p>
     * Default: 0
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Number getInitialValue() {
        return null;
    }

    /**
     * The maximum value the calculator can store.
     * <p>
     * Default: none
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Number getMaximumValue() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link CalculatorProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link CalculatorProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<CalculatorProps> {
        private java.lang.Number initialValue;
        private java.lang.Number maximumValue;

        /**
         * Sets the value of {@link CalculatorProps#getInitialValue}
         * @param initialValue The initial value of the calculator.
         *                     NOTE: Any number works here, it's fine.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder initialValue(java.lang.Number initialValue) {
            this.initialValue = initialValue;
            return this;
        }

        /**
         * Sets the value of {@link CalculatorProps#getMaximumValue}
         * @param maximumValue The maximum value the calculator can store.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder maximumValue(java.lang.Number maximumValue) {
            this.maximumValue = maximumValue;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link CalculatorProps}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public CalculatorProps build() {
            return new Jsii$Proxy(initialValue, maximumValue);
        }
    }

    /**
     * An implementation for {@link CalculatorProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements CalculatorProps {
        private final java.lang.Number initialValue;
        private final java.lang.Number maximumValue;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.initialValue = this.jsiiGet("initialValue", java.lang.Number.class);
            this.maximumValue = this.jsiiGet("maximumValue", java.lang.Number.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Number initialValue, final java.lang.Number maximumValue) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.initialValue = initialValue;
            this.maximumValue = maximumValue;
        }

        @Override
        public java.lang.Number getInitialValue() {
            return this.initialValue;
        }

        @Override
        public java.lang.Number getMaximumValue() {
            return this.maximumValue;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            if (this.getInitialValue() != null) {
                data.set("initialValue", om.valueToTree(this.getInitialValue()));
            }
            if (this.getMaximumValue() != null) {
                data.set("maximumValue", om.valueToTree(this.getMaximumValue()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.CalculatorProps"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            CalculatorProps.Jsii$Proxy that = (CalculatorProps.Jsii$Proxy) o;

            if (this.initialValue != null ? !this.initialValue.equals(that.initialValue) : that.initialValue != null) return false;
            return this.maximumValue != null ? this.maximumValue.equals(that.maximumValue) : that.maximumValue == null;
        }

        @Override
        public int hashCode() {
            int result = this.initialValue != null ? this.initialValue.hashCode() : 0;
            result = 31 * result + (this.maximumValue != null ? this.maximumValue.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ChildStruct982.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ChildStruct982")
@software.amazon.jsii.Jsii.Proxy(ChildStruct982.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface ChildStruct982 extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.ParentStruct982 {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Number getBar();

    /**
     * @return a {@link Builder} of {@link ChildStruct982}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link ChildStruct982}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<ChildStruct982> {
        private java.lang.Number bar;
        private java.lang.String foo;

        /**
         * Sets the value of {@link ChildStruct982#getBar}
         * @param bar the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder bar(java.lang.Number bar) {
            this.bar = bar;
            return this;
        }

        /**
         * Sets the value of {@link ChildStruct982#getFoo}
         * @param foo the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder foo(java.lang.String foo) {
            this.foo = foo;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link ChildStruct982}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public ChildStruct982 build() {
            return new Jsii$Proxy(bar, foo);
        }
    }

    /**
     * An implementation for {@link ChildStruct982}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements ChildStruct982 {
        private final java.lang.Number bar;
        private final java.lang.String foo;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.bar = this.jsiiGet("bar", java.lang.Number.class);
            this.foo = this.jsiiGet("foo", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Number bar, final java.lang.String foo) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.bar = java.util.Objects.requireNonNull(bar, "bar is required");
            this.foo = java.util.Objects.requireNonNull(foo, "foo is required");
        }

        @Override
        public java.lang.Number getBar() {
            return this.bar;
        }

        @Override
        public java.lang.String getFoo() {
            return this.foo;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("bar", om.valueToTree(this.getBar()));
            data.set("foo", om.valueToTree(this.getFoo()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.ChildStruct982"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ChildStruct982.Jsii$Proxy that = (ChildStruct982.Jsii$Proxy) o;

            if (!bar.equals(that.bar)) return false;
            return this.foo.equals(that.foo);
        }

        @Override
        public int hashCode() {
            int result = this.bar.hashCode();
            result = 31 * result + (this.foo.hashCode());
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ClassThatImplementsTheInternalInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ClassThatImplementsTheInternalInterface")
public class ClassThatImplementsTheInternalInterface extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.INonInternalInterface {

    protected ClassThatImplementsTheInternalInterface(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ClassThatImplementsTheInternalInterface(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ClassThatImplementsTheInternalInterface() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getA() {
        return this.jsiiGet("a", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setA(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("a", java.util.Objects.requireNonNull(value, "a is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getB() {
        return this.jsiiGet("b", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setB(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("b", java.util.Objects.requireNonNull(value, "b is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getC() {
        return this.jsiiGet("c", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setC(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("c", java.util.Objects.requireNonNull(value, "c is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getD() {
        return this.jsiiGet("d", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setD(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("d", java.util.Objects.requireNonNull(value, "d is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ClassThatImplementsThePrivateInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ClassThatImplementsThePrivateInterface")
public class ClassThatImplementsThePrivateInterface extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.INonInternalInterface {

    protected ClassThatImplementsThePrivateInterface(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ClassThatImplementsThePrivateInterface(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ClassThatImplementsThePrivateInterface() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getA() {
        return this.jsiiGet("a", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setA(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("a", java.util.Objects.requireNonNull(value, "a is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getB() {
        return this.jsiiGet("b", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setB(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("b", java.util.Objects.requireNonNull(value, "b is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getC() {
        return this.jsiiGet("c", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setC(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("c", java.util.Objects.requireNonNull(value, "c is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getE() {
        return this.jsiiGet("e", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setE(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("e", java.util.Objects.requireNonNull(value, "e is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ClassWithCollections.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ClassWithCollections")
public class ClassWithCollections extends software.amazon.jsii.JsiiObject {

    protected ClassWithCollections(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ClassWithCollections(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param map This parameter is required.
     * @param array This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ClassWithCollections(final @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.String> map, final @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> array) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(map, "map is required"), java.util.Objects.requireNonNull(array, "array is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> createAList() {
        return java.util.Collections.unmodifiableList(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.ClassWithCollections.class, "createAList", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.String> createAMap() {
        return java.util.Collections.unmodifiableMap(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.ClassWithCollections.class, "createAMap", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> getStaticArray() {
        return java.util.Collections.unmodifiableList(software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.ClassWithCollections.class, "staticArray", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static void setStaticArray(final @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> value) {
        software.amazon.jsii.JsiiObject.jsiiStaticSet(software.amazon.jsii.tests.calculator.ClassWithCollections.class, "staticArray", java.util.Objects.requireNonNull(value, "staticArray is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.String> getStaticMap() {
        return java.util.Collections.unmodifiableMap(software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.ClassWithCollections.class, "staticMap", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static void setStaticMap(final @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.String> value) {
        software.amazon.jsii.JsiiObject.jsiiStaticSet(software.amazon.jsii.tests.calculator.ClassWithCollections.class, "staticMap", java.util.Objects.requireNonNull(value, "staticMap is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> getArray() {
        return java.util.Collections.unmodifiableList(this.jsiiGet("array", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setArray(final @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> value) {
        this.jsiiSet("array", java.util.Objects.requireNonNull(value, "array is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.String> getMap() {
        return java.util.Collections.unmodifiableMap(this.jsiiGet("map", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setMap(final @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.String> value) {
        this.jsiiSet("map", java.util.Objects.requireNonNull(value, "map is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ClassWithDocs.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * This class has docs.
 * <p>
 * The docs are great. They're a bunch of tags.
 * <p>
 * Example:
 * <p>
 * <blockquote><pre>{@code
 * // Example automatically generated. See https://github.com/aws/jsii/issues/826
 * public void anExample() {
 * }}</pre></blockquote>
 * <p>
 * @see https://aws.amazon.com/
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ClassWithDocs")
public class ClassWithDocs extends software.amazon.jsii.JsiiObject {

    protected ClassWithDocs(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ClassWithDocs(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ClassWithDocs() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ClassWithJavaReservedWords.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ClassWithJavaReservedWords")
public class ClassWithJavaReservedWords extends software.amazon.jsii.JsiiObject {

    protected ClassWithJavaReservedWords(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ClassWithJavaReservedWords(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param int This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ClassWithJavaReservedWords(final @org.jetbrains.annotations.NotNull java.lang.String intValue) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(intValue, "intValue is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param assert This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String doImport(final @org.jetbrains.annotations.NotNull java.lang.String assertValue) {
        return this.jsiiCall("import", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(assertValue, "assertValue is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getIntValue() {
        return this.jsiiGet("int", java.lang.String.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ClassWithMutableObjectLiteralProperty.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ClassWithMutableObjectLiteralProperty")
public class ClassWithMutableObjectLiteralProperty extends software.amazon.jsii.JsiiObject {

    protected ClassWithMutableObjectLiteralProperty(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ClassWithMutableObjectLiteralProperty(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ClassWithMutableObjectLiteralProperty() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IMutableObjectLiteral getMutableObject() {
        return this.jsiiGet("mutableObject", software.amazon.jsii.tests.calculator.IMutableObjectLiteral.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setMutableObject(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IMutableObjectLiteral value) {
        this.jsiiSet("mutableObject", java.util.Objects.requireNonNull(value, "mutableObject is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ClassWithPrivateConstructorAndAutomaticProperties.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Class that implements interface properties automatically, but using a private constructor.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties")
public class ClassWithPrivateConstructorAndAutomaticProperties extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IInterfaceWithProperties {

    protected ClassWithPrivateConstructorAndAutomaticProperties(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ClassWithPrivateConstructorAndAutomaticProperties(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param readOnlyString This parameter is required.
     * @param readWriteString This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.ClassWithPrivateConstructorAndAutomaticProperties create(final @org.jetbrains.annotations.NotNull java.lang.String readOnlyString, final @org.jetbrains.annotations.NotNull java.lang.String readWriteString) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.ClassWithPrivateConstructorAndAutomaticProperties.class, "create", software.amazon.jsii.tests.calculator.ClassWithPrivateConstructorAndAutomaticProperties.class, new Object[] { java.util.Objects.requireNonNull(readOnlyString, "readOnlyString is required"), java.util.Objects.requireNonNull(readWriteString, "readWriteString is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getReadOnlyString() {
        return this.jsiiGet("readOnlyString", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getReadWriteString() {
        return this.jsiiGet("readWriteString", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setReadWriteString(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("readWriteString", java.util.Objects.requireNonNull(value, "readWriteString is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ConfusingToJackson.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * This tries to confuse Jackson by having overloaded property setters.
 * <p>
 * EXPERIMENTAL
 * <p>
 * @see https://github.com/aws/aws-cdk/issues/4080
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ConfusingToJackson")
public class ConfusingToJackson extends software.amazon.jsii.JsiiObject {

    protected ConfusingToJackson(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ConfusingToJackson(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.ConfusingToJackson makeInstance() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.ConfusingToJackson.class, "makeInstance", software.amazon.jsii.tests.calculator.ConfusingToJackson.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.ConfusingToJacksonStruct makeStructInstance() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.ConfusingToJackson.class, "makeStructInstance", software.amazon.jsii.tests.calculator.ConfusingToJacksonStruct.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable java.lang.Object getUnionProperty() {
        return this.jsiiGet("unionProperty", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnionProperty(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.lib.IFriendly value) {
        this.jsiiSet("unionProperty", value);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setUnionProperty(final @org.jetbrains.annotations.Nullable java.util.List<java.lang.Object> value) {
        this.jsiiSet("unionProperty", value);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ConfusingToJacksonStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ConfusingToJacksonStruct")
@software.amazon.jsii.Jsii.Proxy(ConfusingToJacksonStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface ConfusingToJacksonStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Object getUnionProperty() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link ConfusingToJacksonStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link ConfusingToJacksonStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<ConfusingToJacksonStruct> {
        private java.lang.Object unionProperty;

        /**
         * Sets the value of {@link ConfusingToJacksonStruct#getUnionProperty}
         * @param unionProperty the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder unionProperty(software.amazon.jsii.tests.calculator.lib.IFriendly unionProperty) {
            this.unionProperty = unionProperty;
            return this;
        }

        /**
         * Sets the value of {@link ConfusingToJacksonStruct#getUnionProperty}
         * @param unionProperty the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder unionProperty(java.util.List<java.lang.Object> unionProperty) {
            this.unionProperty = unionProperty;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link ConfusingToJacksonStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public ConfusingToJacksonStruct build() {
            return new Jsii$Proxy(unionProperty);
        }
    }

    /**
     * An implementation for {@link ConfusingToJacksonStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements ConfusingToJacksonStruct {
        private final java.lang.Object unionProperty;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.unionProperty = this.jsiiGet("unionProperty", java.lang.Object.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Object unionProperty) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.unionProperty = unionProperty;
        }

        @Override
        public java.lang.Object getUnionProperty() {
            return this.unionProperty;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            if (this.getUnionProperty() != null) {
                data.set("unionProperty", om.valueToTree(this.getUnionProperty()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.ConfusingToJacksonStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ConfusingToJacksonStruct.Jsii$Proxy that = (ConfusingToJacksonStruct.Jsii$Proxy) o;

            return this.unionProperty != null ? this.unionProperty.equals(that.unionProperty) : that.unionProperty == null;
        }

        @Override
        public int hashCode() {
            int result = this.unionProperty != null ? this.unionProperty.hashCode() : 0;
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ConstructorPassesThisOut.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ConstructorPassesThisOut")
public class ConstructorPassesThisOut extends software.amazon.jsii.JsiiObject {

    protected ConstructorPassesThisOut(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ConstructorPassesThisOut(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param consumer This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ConstructorPassesThisOut(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.PartiallyInitializedThisConsumer consumer) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(consumer, "consumer is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Constructors.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Constructors")
public class Constructors extends software.amazon.jsii.JsiiObject {

    protected Constructors(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Constructors(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Constructors() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IPublicInterface hiddenInterface() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.Constructors.class, "hiddenInterface", software.amazon.jsii.tests.calculator.IPublicInterface.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.IPublicInterface> hiddenInterfaces() {
        return java.util.Collections.unmodifiableList(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.Constructors.class, "hiddenInterfaces", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.IPublicInterface.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.IPublicInterface> hiddenSubInterfaces() {
        return java.util.Collections.unmodifiableList(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.Constructors.class, "hiddenSubInterfaces", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.IPublicInterface.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.PublicClass makeClass() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.Constructors.class, "makeClass", software.amazon.jsii.tests.calculator.PublicClass.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IPublicInterface makeInterface() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.Constructors.class, "makeInterface", software.amazon.jsii.tests.calculator.IPublicInterface.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IPublicInterface2 makeInterface2() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.Constructors.class, "makeInterface2", software.amazon.jsii.tests.calculator.IPublicInterface2.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.IPublicInterface> makeInterfaces() {
        return java.util.Collections.unmodifiableList(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.Constructors.class, "makeInterfaces", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.IPublicInterface.class))));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ConsumePureInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ConsumePureInterface")
public class ConsumePureInterface extends software.amazon.jsii.JsiiObject {

    protected ConsumePureInterface(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ConsumePureInterface(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param delegate This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ConsumePureInterface(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IStructReturningDelegate delegate) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(delegate, "delegate is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.StructB workItBaby() {
        return this.jsiiCall("workItBaby", software.amazon.jsii.tests.calculator.StructB.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ConsumerCanRingBell.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Test calling back to consumers that implement interfaces.
 * <p>
 * Check that if a JSII consumer implements IConsumerWithInterfaceParam, they can call
 * the method on the argument that they're passed...
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ConsumerCanRingBell")
public class ConsumerCanRingBell extends software.amazon.jsii.JsiiObject {

    protected ConsumerCanRingBell(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ConsumerCanRingBell(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ConsumerCanRingBell() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * ...if the interface is implemented using an object literal.
     * <p>
     * Returns whether the bell was rung.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param ringer This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Boolean staticImplementedByObjectLiteral(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IBellRinger ringer) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.ConsumerCanRingBell.class, "staticImplementedByObjectLiteral", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(ringer, "ringer is required") });
    }

    /**
     * ...if the interface is implemented using a private class.
     * <p>
     * Return whether the bell was rung.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param ringer This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Boolean staticImplementedByPrivateClass(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IBellRinger ringer) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.ConsumerCanRingBell.class, "staticImplementedByPrivateClass", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(ringer, "ringer is required") });
    }

    /**
     * ...if the interface is implemented using a public class.
     * <p>
     * Return whether the bell was rung.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param ringer This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Boolean staticImplementedByPublicClass(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IBellRinger ringer) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.ConsumerCanRingBell.class, "staticImplementedByPublicClass", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(ringer, "ringer is required") });
    }

    /**
     * If the parameter is a concrete class instead of an interface.
     * <p>
     * Return whether the bell was rung.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param ringer This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Boolean staticWhenTypedAsClass(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IConcreteBellRinger ringer) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.ConsumerCanRingBell.class, "staticWhenTypedAsClass", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(ringer, "ringer is required") });
    }

    /**
     * ...if the interface is implemented using an object literal.
     * <p>
     * Returns whether the bell was rung.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param ringer This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean implementedByObjectLiteral(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IBellRinger ringer) {
        return this.jsiiCall("implementedByObjectLiteral", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(ringer, "ringer is required") });
    }

    /**
     * ...if the interface is implemented using a private class.
     * <p>
     * Return whether the bell was rung.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param ringer This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean implementedByPrivateClass(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IBellRinger ringer) {
        return this.jsiiCall("implementedByPrivateClass", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(ringer, "ringer is required") });
    }

    /**
     * ...if the interface is implemented using a public class.
     * <p>
     * Return whether the bell was rung.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param ringer This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean implementedByPublicClass(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IBellRinger ringer) {
        return this.jsiiCall("implementedByPublicClass", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(ringer, "ringer is required") });
    }

    /**
     * If the parameter is a concrete class instead of an interface.
     * <p>
     * Return whether the bell was rung.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param ringer This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean whenTypedAsClass(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IConcreteBellRinger ringer) {
        return this.jsiiCall("whenTypedAsClass", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(ringer, "ringer is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ConsumersOfThisCrazyTypeSystem.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ConsumersOfThisCrazyTypeSystem")
public class ConsumersOfThisCrazyTypeSystem extends software.amazon.jsii.JsiiObject {

    protected ConsumersOfThisCrazyTypeSystem(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ConsumersOfThisCrazyTypeSystem(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ConsumersOfThisCrazyTypeSystem() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param obj This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String consumeAnotherPublicInterface(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IAnotherPublicInterface obj) {
        return this.jsiiCall("consumeAnotherPublicInterface", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(obj, "obj is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param obj This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Object consumeNonInternalInterface(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.INonInternalInterface obj) {
        return this.jsiiCall("consumeNonInternalInterface", java.lang.Object.class, new Object[] { java.util.Objects.requireNonNull(obj, "obj is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DataRenderer.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Verifies proper type handling through dynamic overrides.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DataRenderer")
public class DataRenderer extends software.amazon.jsii.JsiiObject {

    protected DataRenderer(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected DataRenderer(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public DataRenderer() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param data
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String render(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.lib.MyFirstStruct data) {
        return this.jsiiCall("render", java.lang.String.class, new Object[] { data });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String render() {
        return this.jsiiCall("render", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param data This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String renderArbitrary(final @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> data) {
        return this.jsiiCall("renderArbitrary", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(data, "data is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param map This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String renderMap(final @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> map) {
        return this.jsiiCall("renderMap", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(map, "map is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DefaultedConstructorArgument.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DefaultedConstructorArgument")
public class DefaultedConstructorArgument extends software.amazon.jsii.JsiiObject {

    protected DefaultedConstructorArgument(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected DefaultedConstructorArgument(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param arg1
     * @param arg2
     * @param arg3
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public DefaultedConstructorArgument(final @org.jetbrains.annotations.Nullable java.lang.Number arg1, final @org.jetbrains.annotations.Nullable java.lang.String arg2, final @org.jetbrains.annotations.Nullable java.time.Instant arg3) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { arg1, arg2, arg3 });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param arg1
     * @param arg2
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public DefaultedConstructorArgument(final @org.jetbrains.annotations.Nullable java.lang.Number arg1, final @org.jetbrains.annotations.Nullable java.lang.String arg2) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { arg1, arg2 });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param arg1
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public DefaultedConstructorArgument(final @org.jetbrains.annotations.Nullable java.lang.Number arg1) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { arg1 });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public DefaultedConstructorArgument() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getArg1() {
        return this.jsiiGet("arg1", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.time.Instant getArg3() {
        return this.jsiiGet("arg3", java.time.Instant.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable java.lang.String getArg2() {
        return this.jsiiGet("arg2", java.lang.String.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Demonstrate982.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * 1.
 * <p>
 * call #takeThis() -&gt; An ObjectRef will be provisioned for the value (it'll be re-used!)
 * 2. call #takeThisToo() -&gt; The ObjectRef from before will need to be down-cased to the ParentStruct982 type
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Demonstrate982")
public class Demonstrate982 extends software.amazon.jsii.JsiiObject {

    protected Demonstrate982(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Demonstrate982(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Demonstrate982() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * It's dangerous to go alone!
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.ChildStruct982 takeThis() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.Demonstrate982.class, "takeThis", software.amazon.jsii.tests.calculator.ChildStruct982.class);
    }

    /**
     * It's dangerous to go alone!
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.ParentStruct982 takeThisToo() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.Demonstrate982.class, "takeThisToo", software.amazon.jsii.tests.calculator.ParentStruct982.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DeprecatedClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * @deprecated a pretty boring class
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DeprecatedClass")
public class DeprecatedClass extends software.amazon.jsii.JsiiObject {

    protected DeprecatedClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected DeprecatedClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * @deprecated this constructor is "just" okay
     * @param readonlyString This parameter is required.
     * @param mutableNumber
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public DeprecatedClass(final @org.jetbrains.annotations.NotNull java.lang.String readonlyString, final @org.jetbrains.annotations.Nullable java.lang.Number mutableNumber) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(readonlyString, "readonlyString is required"), mutableNumber });
    }

    /**
     * @deprecated this constructor is "just" okay
     * @param readonlyString This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public DeprecatedClass(final @org.jetbrains.annotations.NotNull java.lang.String readonlyString) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(readonlyString, "readonlyString is required") });
    }

    /**
     * @deprecated it was a bad idea
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public void method() {
        this.jsiiCall("method", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * @deprecated this is not always "wazoo", be ready to be disappointed
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public @org.jetbrains.annotations.NotNull java.lang.String getReadonlyProperty() {
        return this.jsiiGet("readonlyProperty", java.lang.String.class);
    }

    /**
     * @deprecated shouldn't have been mutable
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
        return this.jsiiGet("mutableProperty", java.lang.Number.class);
    }

    /**
     * @deprecated shouldn't have been mutable
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
        this.jsiiSet("mutableProperty", value);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DeprecatedEnum.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * @deprecated your deprecated selection of bad options
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DeprecatedEnum")
public enum DeprecatedEnum {
    /**
     * @deprecated option A is not great
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    OPTION_A,
    /**
     * @deprecated option B is kinda bad, too
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    OPTION_B,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DeprecatedStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * @deprecated it just wraps a string
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DeprecatedStruct")
@software.amazon.jsii.Jsii.Proxy(DeprecatedStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
public interface DeprecatedStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * @deprecated well, yeah
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    @org.jetbrains.annotations.NotNull java.lang.String getReadonlyProperty();

    /**
     * @return a {@link Builder} of {@link DeprecatedStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link DeprecatedStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public static final class Builder implements software.amazon.jsii.Builder<DeprecatedStruct> {
        private java.lang.String readonlyProperty;

        /**
         * Sets the value of {@link DeprecatedStruct#getReadonlyProperty}
         * @param readonlyProperty the value to be set. This parameter is required.
         * @return {@code this}
         * @deprecated well, yeah
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder readonlyProperty(java.lang.String readonlyProperty) {
            this.readonlyProperty = readonlyProperty;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link DeprecatedStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public DeprecatedStruct build() {
            return new Jsii$Proxy(readonlyProperty);
        }
    }

    /**
     * An implementation for {@link DeprecatedStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements DeprecatedStruct {
        private final java.lang.String readonlyProperty;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.readonlyProperty = this.jsiiGet("readonlyProperty", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String readonlyProperty) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.readonlyProperty = java.util.Objects.requireNonNull(readonlyProperty, "readonlyProperty is required");
        }

        @Override
        public java.lang.String getReadonlyProperty() {
            return this.readonlyProperty;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("readonlyProperty", om.valueToTree(this.getReadonlyProperty()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.DeprecatedStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            DeprecatedStruct.Jsii$Proxy that = (DeprecatedStruct.Jsii$Proxy) o;

            return this.readonlyProperty.equals(that.readonlyProperty);
        }

        @Override
        public int hashCode() {
            int result = this.readonlyProperty.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DerivedStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * A struct which derives from another struct.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DerivedStruct")
@software.amazon.jsii.Jsii.Proxy(DerivedStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface DerivedStruct extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.lib.MyFirstStruct {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.time.Instant getAnotherRequired();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Boolean getBool();

    /**
     * An example of a non primitive property.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.DoubleTrouble getNonPrimitive();

    /**
     * This is optional.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.util.Map<java.lang.String, software.amazon.jsii.tests.calculator.lib.Value> getAnotherOptional() {
        return null;
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Object getOptionalAny() {
        return null;
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.util.List<java.lang.String> getOptionalArray() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link DerivedStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link DerivedStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<DerivedStruct> {
        private java.time.Instant anotherRequired;
        private java.lang.Boolean bool;
        private software.amazon.jsii.tests.calculator.DoubleTrouble nonPrimitive;
        private java.util.Map<java.lang.String, software.amazon.jsii.tests.calculator.lib.Value> anotherOptional;
        private java.lang.Object optionalAny;
        private java.util.List<java.lang.String> optionalArray;
        private java.lang.Number anumber;
        private java.lang.String astring;
        private java.util.List<java.lang.String> firstOptional;

        /**
         * Sets the value of {@link DerivedStruct#getAnotherRequired}
         * @param anotherRequired the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder anotherRequired(java.time.Instant anotherRequired) {
            this.anotherRequired = anotherRequired;
            return this;
        }

        /**
         * Sets the value of {@link DerivedStruct#getBool}
         * @param bool the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder bool(java.lang.Boolean bool) {
            this.bool = bool;
            return this;
        }

        /**
         * Sets the value of {@link DerivedStruct#getNonPrimitive}
         * @param nonPrimitive An example of a non primitive property. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder nonPrimitive(software.amazon.jsii.tests.calculator.DoubleTrouble nonPrimitive) {
            this.nonPrimitive = nonPrimitive;
            return this;
        }

        /**
         * Sets the value of {@link DerivedStruct#getAnotherOptional}
         * @param anotherOptional This is optional.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder anotherOptional(java.util.Map<java.lang.String, software.amazon.jsii.tests.calculator.lib.Value> anotherOptional) {
            this.anotherOptional = anotherOptional;
            return this;
        }

        /**
         * Sets the value of {@link DerivedStruct#getOptionalAny}
         * @param optionalAny the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder optionalAny(java.lang.Object optionalAny) {
            this.optionalAny = optionalAny;
            return this;
        }

        /**
         * Sets the value of {@link DerivedStruct#getOptionalArray}
         * @param optionalArray the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder optionalArray(java.util.List<java.lang.String> optionalArray) {
            this.optionalArray = optionalArray;
            return this;
        }

        /**
         * Sets the value of {@link DerivedStruct#getAnumber}
         * @param anumber An awesome number value. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder anumber(java.lang.Number anumber) {
            this.anumber = anumber;
            return this;
        }

        /**
         * Sets the value of {@link DerivedStruct#getAstring}
         * @param astring A string value. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder astring(java.lang.String astring) {
            this.astring = astring;
            return this;
        }

        /**
         * Sets the value of {@link DerivedStruct#getFirstOptional}
         * @param firstOptional the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public Builder firstOptional(java.util.List<java.lang.String> firstOptional) {
            this.firstOptional = firstOptional;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link DerivedStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public DerivedStruct build() {
            return new Jsii$Proxy(anotherRequired, bool, nonPrimitive, anotherOptional, optionalAny, optionalArray, anumber, astring, firstOptional);
        }
    }

    /**
     * An implementation for {@link DerivedStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements DerivedStruct {
        private final java.time.Instant anotherRequired;
        private final java.lang.Boolean bool;
        private final software.amazon.jsii.tests.calculator.DoubleTrouble nonPrimitive;
        private final java.util.Map<java.lang.String, software.amazon.jsii.tests.calculator.lib.Value> anotherOptional;
        private final java.lang.Object optionalAny;
        private final java.util.List<java.lang.String> optionalArray;
        private final java.lang.Number anumber;
        private final java.lang.String astring;
        private final java.util.List<java.lang.String> firstOptional;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.anotherRequired = this.jsiiGet("anotherRequired", java.time.Instant.class);
            this.bool = this.jsiiGet("bool", java.lang.Boolean.class);
            this.nonPrimitive = this.jsiiGet("nonPrimitive", software.amazon.jsii.tests.calculator.DoubleTrouble.class);
            this.anotherOptional = this.jsiiGet("anotherOptional", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.lib.Value.class)));
            this.optionalAny = this.jsiiGet("optionalAny", java.lang.Object.class);
            this.optionalArray = this.jsiiGet("optionalArray", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class)));
            this.anumber = this.jsiiGet("anumber", java.lang.Number.class);
            this.astring = this.jsiiGet("astring", java.lang.String.class);
            this.firstOptional = this.jsiiGet("firstOptional", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class)));
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.time.Instant anotherRequired, final java.lang.Boolean bool, final software.amazon.jsii.tests.calculator.DoubleTrouble nonPrimitive, final java.util.Map<java.lang.String, software.amazon.jsii.tests.calculator.lib.Value> anotherOptional, final java.lang.Object optionalAny, final java.util.List<java.lang.String> optionalArray, final java.lang.Number anumber, final java.lang.String astring, final java.util.List<java.lang.String> firstOptional) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.anotherRequired = java.util.Objects.requireNonNull(anotherRequired, "anotherRequired is required");
            this.bool = java.util.Objects.requireNonNull(bool, "bool is required");
            this.nonPrimitive = java.util.Objects.requireNonNull(nonPrimitive, "nonPrimitive is required");
            this.anotherOptional = anotherOptional;
            this.optionalAny = optionalAny;
            this.optionalArray = optionalArray;
            this.anumber = java.util.Objects.requireNonNull(anumber, "anumber is required");
            this.astring = java.util.Objects.requireNonNull(astring, "astring is required");
            this.firstOptional = firstOptional;
        }

        @Override
        public java.time.Instant getAnotherRequired() {
            return this.anotherRequired;
        }

        @Override
        public java.lang.Boolean getBool() {
            return this.bool;
        }

        @Override
        public software.amazon.jsii.tests.calculator.DoubleTrouble getNonPrimitive() {
            return this.nonPrimitive;
        }

        @Override
        public java.util.Map<java.lang.String, software.amazon.jsii.tests.calculator.lib.Value> getAnotherOptional() {
            return this.anotherOptional;
        }

        @Override
        public java.lang.Object getOptionalAny() {
            return this.optionalAny;
        }

        @Override
        public java.util.List<java.lang.String> getOptionalArray() {
            return this.optionalArray;
        }

        @Override
        public java.lang.Number getAnumber() {
            return this.anumber;
        }

        @Override
        public java.lang.String getAstring() {
            return this.astring;
        }

        @Override
        public java.util.List<java.lang.String> getFirstOptional() {
            return this.firstOptional;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("anotherRequired", om.valueToTree(this.getAnotherRequired()));
            data.set("bool", om.valueToTree(this.getBool()));
            data.set("nonPrimitive", om.valueToTree(this.getNonPrimitive()));
            if (this.getAnotherOptional() != null) {
                data.set("anotherOptional", om.valueToTree(this.getAnotherOptional()));
            }
            if (this.getOptionalAny() != null) {
                data.set("optionalAny", om.valueToTree(this.getOptionalAny()));
            }
            if (this.getOptionalArray() != null) {
                data.set("optionalArray", om.valueToTree(this.getOptionalArray()));
            }
            data.set("anumber", om.valueToTree(this.getAnumber()));
            data.set("astring", om.valueToTree(this.getAstring()));
            if (this.getFirstOptional() != null) {
                data.set("firstOptional", om.valueToTree(this.getFirstOptional()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.DerivedStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            DerivedStruct.Jsii$Proxy that = (DerivedStruct.Jsii$Proxy) o;

            if (!anotherRequired.equals(that.anotherRequired)) return false;
            if (!bool.equals(that.bool)) return false;
            if (!nonPrimitive.equals(that.nonPrimitive)) return false;
            if (this.anotherOptional != null ? !this.anotherOptional.equals(that.anotherOptional) : that.anotherOptional != null) return false;
            if (this.optionalAny != null ? !this.optionalAny.equals(that.optionalAny) : that.optionalAny != null) return false;
            if (this.optionalArray != null ? !this.optionalArray.equals(that.optionalArray) : that.optionalArray != null) return false;
            if (!anumber.equals(that.anumber)) return false;
            if (!astring.equals(that.astring)) return false;
            return this.firstOptional != null ? this.firstOptional.equals(that.firstOptional) : that.firstOptional == null;
        }

        @Override
        public int hashCode() {
            int result = this.anotherRequired.hashCode();
            result = 31 * result + (this.bool.hashCode());
            result = 31 * result + (this.nonPrimitive.hashCode());
            result = 31 * result + (this.anotherOptional != null ? this.anotherOptional.hashCode() : 0);
            result = 31 * result + (this.optionalAny != null ? this.optionalAny.hashCode() : 0);
            result = 31 * result + (this.optionalArray != null ? this.optionalArray.hashCode() : 0);
            result = 31 * result + (this.anumber.hashCode());
            result = 31 * result + (this.astring.hashCode());
            result = 31 * result + (this.firstOptional != null ? this.firstOptional.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DiamondInheritanceBaseLevelStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DiamondInheritanceBaseLevelStruct")
@software.amazon.jsii.Jsii.Proxy(DiamondInheritanceBaseLevelStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface DiamondInheritanceBaseLevelStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getBaseLevelProperty();

    /**
     * @return a {@link Builder} of {@link DiamondInheritanceBaseLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link DiamondInheritanceBaseLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<DiamondInheritanceBaseLevelStruct> {
        private java.lang.String baseLevelProperty;

        /**
         * Sets the value of {@link DiamondInheritanceBaseLevelStruct#getBaseLevelProperty}
         * @param baseLevelProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder baseLevelProperty(java.lang.String baseLevelProperty) {
            this.baseLevelProperty = baseLevelProperty;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link DiamondInheritanceBaseLevelStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public DiamondInheritanceBaseLevelStruct build() {
            return new Jsii$Proxy(baseLevelProperty);
        }
    }

    /**
     * An implementation for {@link DiamondInheritanceBaseLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements DiamondInheritanceBaseLevelStruct {
        private final java.lang.String baseLevelProperty;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.baseLevelProperty = this.jsiiGet("baseLevelProperty", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String baseLevelProperty) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.baseLevelProperty = java.util.Objects.requireNonNull(baseLevelProperty, "baseLevelProperty is required");
        }

        @Override
        public java.lang.String getBaseLevelProperty() {
            return this.baseLevelProperty;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("baseLevelProperty", om.valueToTree(this.getBaseLevelProperty()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.DiamondInheritanceBaseLevelStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            DiamondInheritanceBaseLevelStruct.Jsii$Proxy that = (DiamondInheritanceBaseLevelStruct.Jsii$Proxy) o;

            return this.baseLevelProperty.equals(that.baseLevelProperty);
        }

        @Override
        public int hashCode() {
            int result = this.baseLevelProperty.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DiamondInheritanceFirstMidLevelStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DiamondInheritanceFirstMidLevelStruct")
@software.amazon.jsii.Jsii.Proxy(DiamondInheritanceFirstMidLevelStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface DiamondInheritanceFirstMidLevelStruct extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.DiamondInheritanceBaseLevelStruct {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getFirstMidLevelProperty();

    /**
     * @return a {@link Builder} of {@link DiamondInheritanceFirstMidLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link DiamondInheritanceFirstMidLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<DiamondInheritanceFirstMidLevelStruct> {
        private java.lang.String firstMidLevelProperty;
        private java.lang.String baseLevelProperty;

        /**
         * Sets the value of {@link DiamondInheritanceFirstMidLevelStruct#getFirstMidLevelProperty}
         * @param firstMidLevelProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder firstMidLevelProperty(java.lang.String firstMidLevelProperty) {
            this.firstMidLevelProperty = firstMidLevelProperty;
            return this;
        }

        /**
         * Sets the value of {@link DiamondInheritanceFirstMidLevelStruct#getBaseLevelProperty}
         * @param baseLevelProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder baseLevelProperty(java.lang.String baseLevelProperty) {
            this.baseLevelProperty = baseLevelProperty;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link DiamondInheritanceFirstMidLevelStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public DiamondInheritanceFirstMidLevelStruct build() {
            return new Jsii$Proxy(firstMidLevelProperty, baseLevelProperty);
        }
    }

    /**
     * An implementation for {@link DiamondInheritanceFirstMidLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements DiamondInheritanceFirstMidLevelStruct {
        private final java.lang.String firstMidLevelProperty;
        private final java.lang.String baseLevelProperty;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.firstMidLevelProperty = this.jsiiGet("firstMidLevelProperty", java.lang.String.class);
            this.baseLevelProperty = this.jsiiGet("baseLevelProperty", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String firstMidLevelProperty, final java.lang.String baseLevelProperty) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.firstMidLevelProperty = java.util.Objects.requireNonNull(firstMidLevelProperty, "firstMidLevelProperty is required");
            this.baseLevelProperty = java.util.Objects.requireNonNull(baseLevelProperty, "baseLevelProperty is required");
        }

        @Override
        public java.lang.String getFirstMidLevelProperty() {
            return this.firstMidLevelProperty;
        }

        @Override
        public java.lang.String getBaseLevelProperty() {
            return this.baseLevelProperty;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("firstMidLevelProperty", om.valueToTree(this.getFirstMidLevelProperty()));
            data.set("baseLevelProperty", om.valueToTree(this.getBaseLevelProperty()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.DiamondInheritanceFirstMidLevelStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            DiamondInheritanceFirstMidLevelStruct.Jsii$Proxy that = (DiamondInheritanceFirstMidLevelStruct.Jsii$Proxy) o;

            if (!firstMidLevelProperty.equals(that.firstMidLevelProperty)) return false;
            return this.baseLevelProperty.equals(that.baseLevelProperty);
        }

        @Override
        public int hashCode() {
            int result = this.firstMidLevelProperty.hashCode();
            result = 31 * result + (this.baseLevelProperty.hashCode());
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DiamondInheritanceSecondMidLevelStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DiamondInheritanceSecondMidLevelStruct")
@software.amazon.jsii.Jsii.Proxy(DiamondInheritanceSecondMidLevelStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface DiamondInheritanceSecondMidLevelStruct extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.DiamondInheritanceBaseLevelStruct {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getSecondMidLevelProperty();

    /**
     * @return a {@link Builder} of {@link DiamondInheritanceSecondMidLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link DiamondInheritanceSecondMidLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<DiamondInheritanceSecondMidLevelStruct> {
        private java.lang.String secondMidLevelProperty;
        private java.lang.String baseLevelProperty;

        /**
         * Sets the value of {@link DiamondInheritanceSecondMidLevelStruct#getSecondMidLevelProperty}
         * @param secondMidLevelProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder secondMidLevelProperty(java.lang.String secondMidLevelProperty) {
            this.secondMidLevelProperty = secondMidLevelProperty;
            return this;
        }

        /**
         * Sets the value of {@link DiamondInheritanceSecondMidLevelStruct#getBaseLevelProperty}
         * @param baseLevelProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder baseLevelProperty(java.lang.String baseLevelProperty) {
            this.baseLevelProperty = baseLevelProperty;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link DiamondInheritanceSecondMidLevelStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public DiamondInheritanceSecondMidLevelStruct build() {
            return new Jsii$Proxy(secondMidLevelProperty, baseLevelProperty);
        }
    }

    /**
     * An implementation for {@link DiamondInheritanceSecondMidLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements DiamondInheritanceSecondMidLevelStruct {
        private final java.lang.String secondMidLevelProperty;
        private final java.lang.String baseLevelProperty;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.secondMidLevelProperty = this.jsiiGet("secondMidLevelProperty", java.lang.String.class);
            this.baseLevelProperty = this.jsiiGet("baseLevelProperty", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String secondMidLevelProperty, final java.lang.String baseLevelProperty) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.secondMidLevelProperty = java.util.Objects.requireNonNull(secondMidLevelProperty, "secondMidLevelProperty is required");
            this.baseLevelProperty = java.util.Objects.requireNonNull(baseLevelProperty, "baseLevelProperty is required");
        }

        @Override
        public java.lang.String getSecondMidLevelProperty() {
            return this.secondMidLevelProperty;
        }

        @Override
        public java.lang.String getBaseLevelProperty() {
            return this.baseLevelProperty;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("secondMidLevelProperty", om.valueToTree(this.getSecondMidLevelProperty()));
            data.set("baseLevelProperty", om.valueToTree(this.getBaseLevelProperty()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.DiamondInheritanceSecondMidLevelStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            DiamondInheritanceSecondMidLevelStruct.Jsii$Proxy that = (DiamondInheritanceSecondMidLevelStruct.Jsii$Proxy) o;

            if (!secondMidLevelProperty.equals(that.secondMidLevelProperty)) return false;
            return this.baseLevelProperty.equals(that.baseLevelProperty);
        }

        @Override
        public int hashCode() {
            int result = this.secondMidLevelProperty.hashCode();
            result = 31 * result + (this.baseLevelProperty.hashCode());
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DiamondInheritanceTopLevelStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DiamondInheritanceTopLevelStruct")
@software.amazon.jsii.Jsii.Proxy(DiamondInheritanceTopLevelStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface DiamondInheritanceTopLevelStruct extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.DiamondInheritanceFirstMidLevelStruct, software.amazon.jsii.tests.calculator.DiamondInheritanceSecondMidLevelStruct {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getTopLevelProperty();

    /**
     * @return a {@link Builder} of {@link DiamondInheritanceTopLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link DiamondInheritanceTopLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<DiamondInheritanceTopLevelStruct> {
        private java.lang.String topLevelProperty;
        private java.lang.String firstMidLevelProperty;
        private java.lang.String baseLevelProperty;
        private java.lang.String secondMidLevelProperty;

        /**
         * Sets the value of {@link DiamondInheritanceTopLevelStruct#getTopLevelProperty}
         * @param topLevelProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder topLevelProperty(java.lang.String topLevelProperty) {
            this.topLevelProperty = topLevelProperty;
            return this;
        }

        /**
         * Sets the value of {@link DiamondInheritanceTopLevelStruct#getFirstMidLevelProperty}
         * @param firstMidLevelProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder firstMidLevelProperty(java.lang.String firstMidLevelProperty) {
            this.firstMidLevelProperty = firstMidLevelProperty;
            return this;
        }

        /**
         * Sets the value of {@link DiamondInheritanceTopLevelStruct#getBaseLevelProperty}
         * @param baseLevelProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder baseLevelProperty(java.lang.String baseLevelProperty) {
            this.baseLevelProperty = baseLevelProperty;
            return this;
        }

        /**
         * Sets the value of {@link DiamondInheritanceTopLevelStruct#getSecondMidLevelProperty}
         * @param secondMidLevelProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder secondMidLevelProperty(java.lang.String secondMidLevelProperty) {
            this.secondMidLevelProperty = secondMidLevelProperty;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link DiamondInheritanceTopLevelStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public DiamondInheritanceTopLevelStruct build() {
            return new Jsii$Proxy(topLevelProperty, firstMidLevelProperty, baseLevelProperty, secondMidLevelProperty);
        }
    }

    /**
     * An implementation for {@link DiamondInheritanceTopLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements DiamondInheritanceTopLevelStruct {
        private final java.lang.String topLevelProperty;
        private final java.lang.String firstMidLevelProperty;
        private final java.lang.String baseLevelProperty;
        private final java.lang.String secondMidLevelProperty;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.topLevelProperty = this.jsiiGet("topLevelProperty", java.lang.String.class);
            this.firstMidLevelProperty = this.jsiiGet("firstMidLevelProperty", java.lang.String.class);
            this.baseLevelProperty = this.jsiiGet("baseLevelProperty", java.lang.String.class);
            this.secondMidLevelProperty = this.jsiiGet("secondMidLevelProperty", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String topLevelProperty, final java.lang.String firstMidLevelProperty, final java.lang.String baseLevelProperty, final java.lang.String secondMidLevelProperty) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.topLevelProperty = java.util.Objects.requireNonNull(topLevelProperty, "topLevelProperty is required");
            this.firstMidLevelProperty = java.util.Objects.requireNonNull(firstMidLevelProperty, "firstMidLevelProperty is required");
            this.baseLevelProperty = java.util.Objects.requireNonNull(baseLevelProperty, "baseLevelProperty is required");
            this.secondMidLevelProperty = java.util.Objects.requireNonNull(secondMidLevelProperty, "secondMidLevelProperty is required");
        }

        @Override
        public java.lang.String getTopLevelProperty() {
            return this.topLevelProperty;
        }

        @Override
        public java.lang.String getFirstMidLevelProperty() {
            return this.firstMidLevelProperty;
        }

        @Override
        public java.lang.String getBaseLevelProperty() {
            return this.baseLevelProperty;
        }

        @Override
        public java.lang.String getSecondMidLevelProperty() {
            return this.secondMidLevelProperty;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("topLevelProperty", om.valueToTree(this.getTopLevelProperty()));
            data.set("firstMidLevelProperty", om.valueToTree(this.getFirstMidLevelProperty()));
            data.set("baseLevelProperty", om.valueToTree(this.getBaseLevelProperty()));
            data.set("secondMidLevelProperty", om.valueToTree(this.getSecondMidLevelProperty()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.DiamondInheritanceTopLevelStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            DiamondInheritanceTopLevelStruct.Jsii$Proxy that = (DiamondInheritanceTopLevelStruct.Jsii$Proxy) o;

            if (!topLevelProperty.equals(that.topLevelProperty)) return false;
            if (!firstMidLevelProperty.equals(that.firstMidLevelProperty)) return false;
            if (!baseLevelProperty.equals(that.baseLevelProperty)) return false;
            return this.secondMidLevelProperty.equals(that.secondMidLevelProperty);
        }

        @Override
        public int hashCode() {
            int result = this.topLevelProperty.hashCode();
            result = 31 * result + (this.firstMidLevelProperty.hashCode());
            result = 31 * result + (this.baseLevelProperty.hashCode());
            result = 31 * result + (this.secondMidLevelProperty.hashCode());
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DisappointingCollectionSource.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Verifies that null/undefined can be returned for optional collections.
 * <p>
 * This source of collections is disappointing - it'll always give you nothing :(
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DisappointingCollectionSource")
public class DisappointingCollectionSource extends software.amazon.jsii.JsiiObject {

    protected DisappointingCollectionSource(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected DisappointingCollectionSource(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    static {
        MAYBE_LIST = java.util.Optional.ofNullable((java.util.List<java.lang.String>)(software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.DisappointingCollectionSource.class, "maybeList", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))))).map(java.util.Collections::unmodifiableList).orElse(null);
        MAYBE_MAP = java.util.Optional.ofNullable((java.util.Map<java.lang.String, java.lang.Number>)(software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.DisappointingCollectionSource.class, "maybeMap", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(java.lang.Number.class))))).map(java.util.Collections::unmodifiableMap).orElse(null);
    }

    /**
     * Some List of strings, maybe?
     * <p>
     * (Nah, just a billion dollars mistake!)
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public final static java.util.List<java.lang.String> MAYBE_LIST;

    /**
     * Some Map of strings to numbers, maybe?
     * <p>
     * (Nah, just a billion dollars mistake!)
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public final static java.util.Map<java.lang.String, java.lang.Number> MAYBE_MAP;
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DoNotOverridePrivates.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DoNotOverridePrivates")
public class DoNotOverridePrivates extends software.amazon.jsii.JsiiObject {

    protected DoNotOverridePrivates(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected DoNotOverridePrivates(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public DoNotOverridePrivates() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param newValue This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void changePrivatePropertyValue(final @org.jetbrains.annotations.NotNull java.lang.String newValue) {
        this.jsiiCall("changePrivatePropertyValue", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(newValue, "newValue is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String privateMethodValue() {
        return this.jsiiCall("privateMethodValue", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String privatePropertyValue() {
        return this.jsiiCall("privatePropertyValue", java.lang.String.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DoNotRecognizeAnyAsOptional.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * jsii#284: do not recognize "any" as an optional argument.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DoNotRecognizeAnyAsOptional")
public class DoNotRecognizeAnyAsOptional extends software.amazon.jsii.JsiiObject {

    protected DoNotRecognizeAnyAsOptional(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected DoNotRecognizeAnyAsOptional(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public DoNotRecognizeAnyAsOptional() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param _requiredAny This parameter is required.
     * @param _optionalAny
     * @param _optionalString
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void method(final @org.jetbrains.annotations.NotNull java.lang.Object _requiredAny, final @org.jetbrains.annotations.Nullable java.lang.Object _optionalAny, final @org.jetbrains.annotations.Nullable java.lang.String _optionalString) {
        this.jsiiCall("method", software.amazon.jsii.NativeType.VOID, new Object[] { _requiredAny, _optionalAny, _optionalString });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param _requiredAny This parameter is required.
     * @param _optionalAny
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void method(final @org.jetbrains.annotations.NotNull java.lang.Object _requiredAny, final @org.jetbrains.annotations.Nullable java.lang.Object _optionalAny) {
        this.jsiiCall("method", software.amazon.jsii.NativeType.VOID, new Object[] { _requiredAny, _optionalAny });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param _requiredAny This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void method(final @org.jetbrains.annotations.NotNull java.lang.Object _requiredAny) {
        this.jsiiCall("method", software.amazon.jsii.NativeType.VOID, new Object[] { _requiredAny });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DocumentedClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Here's the first line of the TSDoc comment.
 * <p>
 * This is the meat of the TSDoc comment. It may contain
 * multiple lines and multiple paragraphs.
 * <p>
 * Multiple paragraphs are separated by an empty line.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DocumentedClass")
public class DocumentedClass extends software.amazon.jsii.JsiiObject {

    protected DocumentedClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected DocumentedClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public DocumentedClass() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * Greet the indicated person.
     * <p>
     * This will print out a friendly greeting intended for
     * the indicated person.
     * <p>
     * @return A number that everyone knows very well
     * @param greetee The person to be greeted.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    public @org.jetbrains.annotations.NotNull java.lang.Number greet(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.Greetee greetee) {
        return this.jsiiCall("greet", java.lang.Number.class, new Object[] { greetee });
    }

    /**
     * Greet the indicated person.
     * <p>
     * This will print out a friendly greeting intended for
     * the indicated person.
     * <p>
     * @return A number that everyone knows very well
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    public @org.jetbrains.annotations.NotNull java.lang.Number greet() {
        return this.jsiiCall("greet", java.lang.Number.class);
    }

    /**
     * Say ¡Hola!
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void hola() {
        this.jsiiCall("hola", software.amazon.jsii.NativeType.VOID);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DontComplainAboutVariadicAfterOptional.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DontComplainAboutVariadicAfterOptional")
public class DontComplainAboutVariadicAfterOptional extends software.amazon.jsii.JsiiObject {

    protected DontComplainAboutVariadicAfterOptional(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected DontComplainAboutVariadicAfterOptional(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public DontComplainAboutVariadicAfterOptional() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param optional
     * @param things This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String optionalAndVariadic(final @org.jetbrains.annotations.Nullable java.lang.String optional, final @org.jetbrains.annotations.NotNull java.lang.String... things) {
        return this.jsiiCall("optionalAndVariadic", java.lang.String.class, java.util.stream.Stream.concat(java.util.Arrays.<Object>stream(new Object[] { optional }), java.util.Arrays.<Object>stream(things)).toArray(Object[]::new));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/DoubleTrouble.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DoubleTrouble")
public class DoubleTrouble extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IFriendlyRandomGenerator {

    protected DoubleTrouble(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected DoubleTrouble(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public DoubleTrouble() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * Say hello!
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String hello() {
        return this.jsiiCall("hello", java.lang.String.class);
    }

    /**
     * Returns another random number.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.Number next() {
        return this.jsiiCall("next", java.lang.Number.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/EnumDispenser.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.EnumDispenser")
public class EnumDispenser extends software.amazon.jsii.JsiiObject {

    protected EnumDispenser(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected EnumDispenser(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.AllTypesEnum randomIntegerLikeEnum() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.EnumDispenser.class, "randomIntegerLikeEnum", software.amazon.jsii.tests.calculator.AllTypesEnum.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.StringEnum randomStringLikeEnum() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.EnumDispenser.class, "randomStringLikeEnum", software.amazon.jsii.tests.calculator.StringEnum.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/EraseUndefinedHashValues.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.EraseUndefinedHashValues")
public class EraseUndefinedHashValues extends software.amazon.jsii.JsiiObject {

    protected EraseUndefinedHashValues(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected EraseUndefinedHashValues(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public EraseUndefinedHashValues() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * Returns \`true\` if \`key\` is defined in \`opts\`.
     * <p>
     * Used to check that undefined/null hash values
     * are being erased when sending values from native code to JS.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param opts This parameter is required.
     * @param key This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Boolean doesKeyExist(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.EraseUndefinedHashValuesOptions opts, final @org.jetbrains.annotations.NotNull java.lang.String key) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.EraseUndefinedHashValues.class, "doesKeyExist", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(opts, "opts is required"), java.util.Objects.requireNonNull(key, "key is required") });
    }

    /**
     * We expect "prop1" to be erased.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> prop1IsNull() {
        return java.util.Collections.unmodifiableMap(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.EraseUndefinedHashValues.class, "prop1IsNull", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(java.lang.Object.class))));
    }

    /**
     * We expect "prop2" to be erased.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> prop2IsUndefined() {
        return java.util.Collections.unmodifiableMap(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.EraseUndefinedHashValues.class, "prop2IsUndefined", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(java.lang.Object.class))));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/EraseUndefinedHashValuesOptions.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.EraseUndefinedHashValuesOptions")
@software.amazon.jsii.Jsii.Proxy(EraseUndefinedHashValuesOptions.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface EraseUndefinedHashValuesOptions extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getOption1() {
        return null;
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getOption2() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link EraseUndefinedHashValuesOptions}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link EraseUndefinedHashValuesOptions}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<EraseUndefinedHashValuesOptions> {
        private java.lang.String option1;
        private java.lang.String option2;

        /**
         * Sets the value of {@link EraseUndefinedHashValuesOptions#getOption1}
         * @param option1 the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder option1(java.lang.String option1) {
            this.option1 = option1;
            return this;
        }

        /**
         * Sets the value of {@link EraseUndefinedHashValuesOptions#getOption2}
         * @param option2 the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder option2(java.lang.String option2) {
            this.option2 = option2;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link EraseUndefinedHashValuesOptions}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public EraseUndefinedHashValuesOptions build() {
            return new Jsii$Proxy(option1, option2);
        }
    }

    /**
     * An implementation for {@link EraseUndefinedHashValuesOptions}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements EraseUndefinedHashValuesOptions {
        private final java.lang.String option1;
        private final java.lang.String option2;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.option1 = this.jsiiGet("option1", java.lang.String.class);
            this.option2 = this.jsiiGet("option2", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String option1, final java.lang.String option2) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.option1 = option1;
            this.option2 = option2;
        }

        @Override
        public java.lang.String getOption1() {
            return this.option1;
        }

        @Override
        public java.lang.String getOption2() {
            return this.option2;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            if (this.getOption1() != null) {
                data.set("option1", om.valueToTree(this.getOption1()));
            }
            if (this.getOption2() != null) {
                data.set("option2", om.valueToTree(this.getOption2()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.EraseUndefinedHashValuesOptions"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            EraseUndefinedHashValuesOptions.Jsii$Proxy that = (EraseUndefinedHashValuesOptions.Jsii$Proxy) o;

            if (this.option1 != null ? !this.option1.equals(that.option1) : that.option1 != null) return false;
            return this.option2 != null ? this.option2.equals(that.option2) : that.option2 == null;
        }

        @Override
        public int hashCode() {
            int result = this.option1 != null ? this.option1.hashCode() : 0;
            result = 31 * result + (this.option2 != null ? this.option2.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ExperimentalClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ExperimentalClass")
public class ExperimentalClass extends software.amazon.jsii.JsiiObject {

    protected ExperimentalClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ExperimentalClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param readonlyString This parameter is required.
     * @param mutableNumber
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ExperimentalClass(final @org.jetbrains.annotations.NotNull java.lang.String readonlyString, final @org.jetbrains.annotations.Nullable java.lang.Number mutableNumber) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(readonlyString, "readonlyString is required"), mutableNumber });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param readonlyString This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ExperimentalClass(final @org.jetbrains.annotations.NotNull java.lang.String readonlyString) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(readonlyString, "readonlyString is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void method() {
        this.jsiiCall("method", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getReadonlyProperty() {
        return this.jsiiGet("readonlyProperty", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
        return this.jsiiGet("mutableProperty", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
        this.jsiiSet("mutableProperty", value);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ExperimentalEnum.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ExperimentalEnum")
public enum ExperimentalEnum {
    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    OPTION_A,
    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    OPTION_B,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ExperimentalStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ExperimentalStruct")
@software.amazon.jsii.Jsii.Proxy(ExperimentalStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface ExperimentalStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getReadonlyProperty();

    /**
     * @return a {@link Builder} of {@link ExperimentalStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link ExperimentalStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<ExperimentalStruct> {
        private java.lang.String readonlyProperty;

        /**
         * Sets the value of {@link ExperimentalStruct#getReadonlyProperty}
         * @param readonlyProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder readonlyProperty(java.lang.String readonlyProperty) {
            this.readonlyProperty = readonlyProperty;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link ExperimentalStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public ExperimentalStruct build() {
            return new Jsii$Proxy(readonlyProperty);
        }
    }

    /**
     * An implementation for {@link ExperimentalStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements ExperimentalStruct {
        private final java.lang.String readonlyProperty;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.readonlyProperty = this.jsiiGet("readonlyProperty", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String readonlyProperty) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.readonlyProperty = java.util.Objects.requireNonNull(readonlyProperty, "readonlyProperty is required");
        }

        @Override
        public java.lang.String getReadonlyProperty() {
            return this.readonlyProperty;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("readonlyProperty", om.valueToTree(this.getReadonlyProperty()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.ExperimentalStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ExperimentalStruct.Jsii$Proxy that = (ExperimentalStruct.Jsii$Proxy) o;

            return this.readonlyProperty.equals(that.readonlyProperty);
        }

        @Override
        public int hashCode() {
            int result = this.readonlyProperty.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ExportedBaseClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ExportedBaseClass")
public class ExportedBaseClass extends software.amazon.jsii.JsiiObject {

    protected ExportedBaseClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ExportedBaseClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param success This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ExportedBaseClass(final @org.jetbrains.annotations.NotNull java.lang.Boolean success) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(success, "success is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean getSuccess() {
        return this.jsiiGet("success", java.lang.Boolean.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ExtendsInternalInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ExtendsInternalInterface")
@software.amazon.jsii.Jsii.Proxy(ExtendsInternalInterface.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface ExtendsInternalInterface extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Boolean getBoom();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getProp();

    /**
     * @return a {@link Builder} of {@link ExtendsInternalInterface}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link ExtendsInternalInterface}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<ExtendsInternalInterface> {
        private java.lang.Boolean boom;
        private java.lang.String prop;

        /**
         * Sets the value of {@link ExtendsInternalInterface#getBoom}
         * @param boom the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder boom(java.lang.Boolean boom) {
            this.boom = boom;
            return this;
        }

        /**
         * Sets the value of {@link ExtendsInternalInterface#getProp}
         * @param prop the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder prop(java.lang.String prop) {
            this.prop = prop;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link ExtendsInternalInterface}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public ExtendsInternalInterface build() {
            return new Jsii$Proxy(boom, prop);
        }
    }

    /**
     * An implementation for {@link ExtendsInternalInterface}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements ExtendsInternalInterface {
        private final java.lang.Boolean boom;
        private final java.lang.String prop;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.boom = this.jsiiGet("boom", java.lang.Boolean.class);
            this.prop = this.jsiiGet("prop", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Boolean boom, final java.lang.String prop) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.boom = java.util.Objects.requireNonNull(boom, "boom is required");
            this.prop = java.util.Objects.requireNonNull(prop, "prop is required");
        }

        @Override
        public java.lang.Boolean getBoom() {
            return this.boom;
        }

        @Override
        public java.lang.String getProp() {
            return this.prop;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("boom", om.valueToTree(this.getBoom()));
            data.set("prop", om.valueToTree(this.getProp()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.ExtendsInternalInterface"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ExtendsInternalInterface.Jsii$Proxy that = (ExtendsInternalInterface.Jsii$Proxy) o;

            if (!boom.equals(that.boom)) return false;
            return this.prop.equals(that.prop);
        }

        @Override
        public int hashCode() {
            int result = this.boom.hashCode();
            result = 31 * result + (this.prop.hashCode());
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ExternalClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ExternalClass")
public class ExternalClass extends software.amazon.jsii.JsiiObject {

    protected ExternalClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ExternalClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param readonlyString This parameter is required.
     * @param mutableNumber
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ExternalClass(final @org.jetbrains.annotations.NotNull java.lang.String readonlyString, final @org.jetbrains.annotations.Nullable java.lang.Number mutableNumber) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(readonlyString, "readonlyString is required"), mutableNumber });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param readonlyString This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ExternalClass(final @org.jetbrains.annotations.NotNull java.lang.String readonlyString) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(readonlyString, "readonlyString is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void method() {
        this.jsiiCall("method", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getReadonlyProperty() {
        return this.jsiiGet("readonlyProperty", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
        return this.jsiiGet("mutableProperty", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
        this.jsiiSet("mutableProperty", value);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ExternalEnum.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ExternalEnum")
public enum ExternalEnum {
    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    OPTION_A,
    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    OPTION_B,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ExternalStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ExternalStruct")
@software.amazon.jsii.Jsii.Proxy(ExternalStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface ExternalStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getReadonlyProperty();

    /**
     * @return a {@link Builder} of {@link ExternalStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link ExternalStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<ExternalStruct> {
        private java.lang.String readonlyProperty;

        /**
         * Sets the value of {@link ExternalStruct#getReadonlyProperty}
         * @param readonlyProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder readonlyProperty(java.lang.String readonlyProperty) {
            this.readonlyProperty = readonlyProperty;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link ExternalStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public ExternalStruct build() {
            return new Jsii$Proxy(readonlyProperty);
        }
    }

    /**
     * An implementation for {@link ExternalStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements ExternalStruct {
        private final java.lang.String readonlyProperty;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.readonlyProperty = this.jsiiGet("readonlyProperty", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String readonlyProperty) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.readonlyProperty = java.util.Objects.requireNonNull(readonlyProperty, "readonlyProperty is required");
        }

        @Override
        public java.lang.String getReadonlyProperty() {
            return this.readonlyProperty;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("readonlyProperty", om.valueToTree(this.getReadonlyProperty()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.ExternalStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ExternalStruct.Jsii$Proxy that = (ExternalStruct.Jsii$Proxy) o;

            return this.readonlyProperty.equals(that.readonlyProperty);
        }

        @Override
        public int hashCode() {
            int result = this.readonlyProperty.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/GiveMeStructs.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.GiveMeStructs")
public class GiveMeStructs extends software.amazon.jsii.JsiiObject {

    protected GiveMeStructs(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected GiveMeStructs(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public GiveMeStructs() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param derived This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.MyFirstStruct derivedToFirst(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.DerivedStruct derived) {
        return this.jsiiCall("derivedToFirst", software.amazon.jsii.tests.calculator.lib.MyFirstStruct.class, new Object[] { java.util.Objects.requireNonNull(derived, "derived is required") });
    }

    /**
     * Returns the boolean from a DerivedStruct struct.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param derived This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.DoubleTrouble readDerivedNonPrimitive(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.DerivedStruct derived) {
        return this.jsiiCall("readDerivedNonPrimitive", software.amazon.jsii.tests.calculator.DoubleTrouble.class, new Object[] { java.util.Objects.requireNonNull(derived, "derived is required") });
    }

    /**
     * Returns the "anumber" from a MyFirstStruct struct;
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param first This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number readFirstNumber(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.MyFirstStruct first) {
        return this.jsiiCall("readFirstNumber", java.lang.Number.class, new Object[] { java.util.Objects.requireNonNull(first, "first is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.StructWithOnlyOptionals getStructLiteral() {
        return this.jsiiGet("structLiteral", software.amazon.jsii.tests.calculator.lib.StructWithOnlyOptionals.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Greetee.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * These are some arguments you can pass to a method.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Greetee")
@software.amazon.jsii.Jsii.Proxy(Greetee.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface Greetee extends software.amazon.jsii.JsiiSerializable {

    /**
     * The name of the greetee.
     * <p>
     * Default: world
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getName() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link Greetee}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link Greetee}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<Greetee> {
        private java.lang.String name;

        /**
         * Sets the value of {@link Greetee#getName}
         * @param name The name of the greetee.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder name(java.lang.String name) {
            this.name = name;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link Greetee}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public Greetee build() {
            return new Jsii$Proxy(name);
        }
    }

    /**
     * An implementation for {@link Greetee}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements Greetee {
        private final java.lang.String name;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.name = this.jsiiGet("name", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String name) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.name = name;
        }

        @Override
        public java.lang.String getName() {
            return this.name;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            if (this.getName() != null) {
                data.set("name", om.valueToTree(this.getName()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.Greetee"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Greetee.Jsii$Proxy that = (Greetee.Jsii$Proxy) o;

            return this.name != null ? this.name.equals(that.name) : that.name == null;
        }

        @Override
        public int hashCode() {
            int result = this.name != null ? this.name.hashCode() : 0;
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/GreetingAugmenter.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.GreetingAugmenter")
public class GreetingAugmenter extends software.amazon.jsii.JsiiObject {

    protected GreetingAugmenter(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected GreetingAugmenter(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public GreetingAugmenter() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param friendly This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String betterGreeting(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.IFriendly friendly) {
        return this.jsiiCall("betterGreeting", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(friendly, "friendly is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IAnonymousImplementationProvider.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * We can return an anonymous interface implementation from an override without losing the interface declarations.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IAnonymousImplementationProvider")
@software.amazon.jsii.Jsii.Proxy(IAnonymousImplementationProvider.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IAnonymousImplementationProvider extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.Implementation provideAsClass();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IAnonymouslyImplementMe provideAsInterface();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IAnonymousImplementationProvider {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.Implementation provideAsClass() {
            return this.jsiiCall("provideAsClass", software.amazon.jsii.tests.calculator.Implementation.class);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IAnonymouslyImplementMe provideAsInterface() {
            return this.jsiiCall("provideAsInterface", software.amazon.jsii.tests.calculator.IAnonymouslyImplementMe.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IAnonymouslyImplementMe.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IAnonymouslyImplementMe")
@software.amazon.jsii.Jsii.Proxy(IAnonymouslyImplementMe.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IAnonymouslyImplementMe extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Number getValue();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String verb();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IAnonymouslyImplementMe {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
            return this.jsiiGet("value", java.lang.Number.class);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String verb() {
            return this.jsiiCall("verb", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IAnotherPublicInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IAnotherPublicInterface")
@software.amazon.jsii.Jsii.Proxy(IAnotherPublicInterface.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IAnotherPublicInterface extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getA();

    /**
     * EXPERIMENTAL
     */
    void setA(final @org.jetbrains.annotations.NotNull java.lang.String value);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IAnotherPublicInterface {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getA() {
            return this.jsiiGet("a", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setA(final @org.jetbrains.annotations.NotNull java.lang.String value) {
            this.jsiiSet("a", java.util.Objects.requireNonNull(value, "a is required"));
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IBell.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IBell")
@software.amazon.jsii.Jsii.Proxy(IBell.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IBell extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void ring();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IBell {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void ring() {
            this.jsiiCall("ring", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IBellRinger.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Takes the object parameter as an interface.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IBellRinger")
@software.amazon.jsii.Jsii.Proxy(IBellRinger.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IBellRinger extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     * <p>
     * @param bell This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void yourTurn(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IBell bell);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IBellRinger {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @param bell This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void yourTurn(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IBell bell) {
            this.jsiiCall("yourTurn", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(bell, "bell is required") });
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IConcreteBellRinger.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Takes the object parameter as a calss.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IConcreteBellRinger")
@software.amazon.jsii.Jsii.Proxy(IConcreteBellRinger.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IConcreteBellRinger extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     * <p>
     * @param bell This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void yourTurn(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.Bell bell);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IConcreteBellRinger {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @param bell This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void yourTurn(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.Bell bell) {
            this.jsiiCall("yourTurn", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(bell, "bell is required") });
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IDeprecatedInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * @deprecated useless interface
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IDeprecatedInterface")
@software.amazon.jsii.Jsii.Proxy(IDeprecatedInterface.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
public interface IDeprecatedInterface extends software.amazon.jsii.JsiiSerializable {

    /**
     * @deprecated could be better
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    default @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
        return null;
    }

    /**
     * @deprecated could be better
     */
    @software.amazon.jsii.Optional
    default void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
        throw new UnsupportedOperationException("'void " + getClass().getCanonicalName() + "#setMutableProperty(@org.jetbrains.annotations.Nullable java.lang.Number)' is not implemented!");
    }

    /**
     * @deprecated services no purpose
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    void method();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IDeprecatedInterface {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * @deprecated could be better
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
            return this.jsiiGet("mutableProperty", java.lang.Number.class);
        }

        /**
         * @deprecated could be better
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
            this.jsiiSet("mutableProperty", value);
        }

        /**
         * @deprecated services no purpose
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public void method() {
            this.jsiiCall("method", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IExperimentalInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IExperimentalInterface")
@software.amazon.jsii.Jsii.Proxy(IExperimentalInterface.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IExperimentalInterface extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
        return null;
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Optional
    default void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
        throw new UnsupportedOperationException("'void " + getClass().getCanonicalName() + "#setMutableProperty(@org.jetbrains.annotations.Nullable java.lang.Number)' is not implemented!");
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void method();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IExperimentalInterface {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
            return this.jsiiGet("mutableProperty", java.lang.Number.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
            this.jsiiSet("mutableProperty", value);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void method() {
            this.jsiiCall("method", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IExtendsPrivateInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IExtendsPrivateInterface")
@software.amazon.jsii.Jsii.Proxy(IExtendsPrivateInterface.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IExtendsPrivateInterface extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> getMoreThings();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getPrivateValue();

    /**
     * EXPERIMENTAL
     */
    void setPrivateValue(final @org.jetbrains.annotations.NotNull java.lang.String value);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IExtendsPrivateInterface {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> getMoreThings() {
            return java.util.Collections.unmodifiableList(this.jsiiGet("moreThings", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getPrivateValue() {
            return this.jsiiGet("private", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setPrivateValue(final @org.jetbrains.annotations.NotNull java.lang.String value) {
            this.jsiiSet("private", java.util.Objects.requireNonNull(value, "private is required"));
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IExternalInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IExternalInterface")
@software.amazon.jsii.Jsii.Proxy(IExternalInterface.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IExternalInterface extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
        return null;
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Optional
    default void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
        throw new UnsupportedOperationException("'void " + getClass().getCanonicalName() + "#setMutableProperty(@org.jetbrains.annotations.Nullable java.lang.Number)' is not implemented!");
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void method();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IExternalInterface {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
            return this.jsiiGet("mutableProperty", java.lang.Number.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
            this.jsiiSet("mutableProperty", value);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void method() {
            this.jsiiCall("method", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IFriendlier.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Even friendlier classes can implement this interface.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IFriendlier")
@software.amazon.jsii.Jsii.Proxy(IFriendlier.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IFriendlier extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.lib.IFriendly {

    /**
     * Say farewell.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String farewell();

    /**
     * Say goodbye.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @return A goodbye blessing.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String goodbye();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IFriendlier {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * Say farewell.
         * <p>
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String farewell() {
            return this.jsiiCall("farewell", java.lang.String.class);
        }

        /**
         * Say goodbye.
         * <p>
         * EXPERIMENTAL
         * <p>
         * @return A goodbye blessing.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String goodbye() {
            return this.jsiiCall("goodbye", java.lang.String.class);
        }

        /**
         * Say hello!
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String hello() {
            return this.jsiiCall("hello", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IFriendlyRandomGenerator.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IFriendlyRandomGenerator")
@software.amazon.jsii.Jsii.Proxy(IFriendlyRandomGenerator.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IFriendlyRandomGenerator extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.IRandomNumberGenerator, software.amazon.jsii.tests.calculator.lib.IFriendly {

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IFriendlyRandomGenerator {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * Returns another random number.
         * <p>
         * EXPERIMENTAL
         * <p>
         * @return A random number.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.Number next() {
            return this.jsiiCall("next", java.lang.Number.class);
        }

        /**
         * Say hello!
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String hello() {
            return this.jsiiCall("hello", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IInterfaceImplementedByAbstractClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * awslabs/jsii#220 Abstract return type.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IInterfaceImplementedByAbstractClass")
@software.amazon.jsii.Jsii.Proxy(IInterfaceImplementedByAbstractClass.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IInterfaceImplementedByAbstractClass extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getPropFromInterface();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IInterfaceImplementedByAbstractClass {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getPropFromInterface() {
            return this.jsiiGet("propFromInterface", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IInterfaceThatShouldNotBeADataType.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IInterfaceThatShouldNotBeADataType")
@software.amazon.jsii.Jsii.Proxy(IInterfaceThatShouldNotBeADataType.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IInterfaceThatShouldNotBeADataType extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.IInterfaceWithMethods {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getOtherValue();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IInterfaceThatShouldNotBeADataType {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getOtherValue() {
            return this.jsiiGet("otherValue", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getValue() {
            return this.jsiiGet("value", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void doThings() {
            this.jsiiCall("doThings", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IInterfaceWithInternal.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IInterfaceWithInternal")
@software.amazon.jsii.Jsii.Proxy(IInterfaceWithInternal.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IInterfaceWithInternal extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void visible();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IInterfaceWithInternal {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void visible() {
            this.jsiiCall("visible", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IInterfaceWithMethods.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IInterfaceWithMethods")
@software.amazon.jsii.Jsii.Proxy(IInterfaceWithMethods.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IInterfaceWithMethods extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getValue();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void doThings();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IInterfaceWithMethods {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getValue() {
            return this.jsiiGet("value", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void doThings() {
            this.jsiiCall("doThings", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IInterfaceWithOptionalMethodArguments.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IInterfaceWithOptionalMethodArguments")
@software.amazon.jsii.Jsii.Proxy(IInterfaceWithOptionalMethodArguments.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IInterfaceWithOptionalMethodArguments extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     * <p>
     * @param arg1 This parameter is required.
     * @param arg2
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void hello(final @org.jetbrains.annotations.NotNull java.lang.String arg1, final @org.jetbrains.annotations.Nullable java.lang.Number arg2);

    /**
     * EXPERIMENTAL
     * <p>
     * @param arg1 This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void hello(final @org.jetbrains.annotations.NotNull java.lang.String arg1);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IInterfaceWithOptionalMethodArguments {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @param arg1 This parameter is required.
         * @param arg2
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void hello(final @org.jetbrains.annotations.NotNull java.lang.String arg1, final @org.jetbrains.annotations.Nullable java.lang.Number arg2) {
            this.jsiiCall("hello", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(arg1, "arg1 is required"), arg2 });
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @param arg1 This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void hello(final @org.jetbrains.annotations.NotNull java.lang.String arg1) {
            this.jsiiCall("hello", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(arg1, "arg1 is required") });
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IInterfaceWithProperties.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IInterfaceWithProperties")
@software.amazon.jsii.Jsii.Proxy(IInterfaceWithProperties.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IInterfaceWithProperties extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getReadOnlyString();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getReadWriteString();

    /**
     * EXPERIMENTAL
     */
    void setReadWriteString(final @org.jetbrains.annotations.NotNull java.lang.String value);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IInterfaceWithProperties {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getReadOnlyString() {
            return this.jsiiGet("readOnlyString", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getReadWriteString() {
            return this.jsiiGet("readWriteString", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setReadWriteString(final @org.jetbrains.annotations.NotNull java.lang.String value) {
            this.jsiiSet("readWriteString", java.util.Objects.requireNonNull(value, "readWriteString is required"));
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IInterfaceWithPropertiesExtension.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IInterfaceWithPropertiesExtension")
@software.amazon.jsii.Jsii.Proxy(IInterfaceWithPropertiesExtension.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IInterfaceWithPropertiesExtension extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.IInterfaceWithProperties {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Number getFoo();

    /**
     * EXPERIMENTAL
     */
    void setFoo(final @org.jetbrains.annotations.NotNull java.lang.Number value);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IInterfaceWithPropertiesExtension {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.Number getFoo() {
            return this.jsiiGet("foo", java.lang.Number.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setFoo(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
            this.jsiiSet("foo", java.util.Objects.requireNonNull(value, "foo is required"));
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getReadOnlyString() {
            return this.jsiiGet("readOnlyString", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getReadWriteString() {
            return this.jsiiGet("readWriteString", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setReadWriteString(final @org.jetbrains.annotations.NotNull java.lang.String value) {
            this.jsiiSet("readWriteString", java.util.Objects.requireNonNull(value, "readWriteString is required"));
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IJSII417Derived.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IJSII417Derived")
@software.amazon.jsii.Jsii.Proxy(IJSII417Derived.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IJSII417Derived extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.IJSII417PublicBaseOfBase {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getProperty();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void bar();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void baz();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IJSII417Derived {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getProperty() {
            return this.jsiiGet("property", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.Boolean getHasRoot() {
            return this.jsiiGet("hasRoot", java.lang.Boolean.class);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void bar() {
            this.jsiiCall("bar", software.amazon.jsii.NativeType.VOID);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void baz() {
            this.jsiiCall("baz", software.amazon.jsii.NativeType.VOID);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void foo() {
            this.jsiiCall("foo", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IJSII417PublicBaseOfBase.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IJSII417PublicBaseOfBase")
@software.amazon.jsii.Jsii.Proxy(IJSII417PublicBaseOfBase.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IJSII417PublicBaseOfBase extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Boolean getHasRoot();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    void foo();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IJSII417PublicBaseOfBase {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.Boolean getHasRoot() {
            return this.jsiiGet("hasRoot", java.lang.Boolean.class);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public void foo() {
            this.jsiiCall("foo", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IJsii487External.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IJsii487External")
@software.amazon.jsii.Jsii.Proxy(IJsii487External.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IJsii487External extends software.amazon.jsii.JsiiSerializable {

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IJsii487External {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IJsii487External2.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IJsii487External2")
@software.amazon.jsii.Jsii.Proxy(IJsii487External2.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IJsii487External2 extends software.amazon.jsii.JsiiSerializable {

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IJsii487External2 {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IJsii496.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IJsii496")
@software.amazon.jsii.Jsii.Proxy(IJsii496.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IJsii496 extends software.amazon.jsii.JsiiSerializable {

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IJsii496 {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IMutableObjectLiteral.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IMutableObjectLiteral")
@software.amazon.jsii.Jsii.Proxy(IMutableObjectLiteral.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IMutableObjectLiteral extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getValue();

    /**
     * EXPERIMENTAL
     */
    void setValue(final @org.jetbrains.annotations.NotNull java.lang.String value);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IMutableObjectLiteral {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getValue() {
            return this.jsiiGet("value", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setValue(final @org.jetbrains.annotations.NotNull java.lang.String value) {
            this.jsiiSet("value", java.util.Objects.requireNonNull(value, "value is required"));
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/INonInternalInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.INonInternalInterface")
@software.amazon.jsii.Jsii.Proxy(INonInternalInterface.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface INonInternalInterface extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.IAnotherPublicInterface {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getB();

    /**
     * EXPERIMENTAL
     */
    void setB(final @org.jetbrains.annotations.NotNull java.lang.String value);

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getC();

    /**
     * EXPERIMENTAL
     */
    void setC(final @org.jetbrains.annotations.NotNull java.lang.String value);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.INonInternalInterface {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getB() {
            return this.jsiiGet("b", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setB(final @org.jetbrains.annotations.NotNull java.lang.String value) {
            this.jsiiSet("b", java.util.Objects.requireNonNull(value, "b is required"));
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getC() {
            return this.jsiiGet("c", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setC(final @org.jetbrains.annotations.NotNull java.lang.String value) {
            this.jsiiSet("c", java.util.Objects.requireNonNull(value, "c is required"));
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getA() {
            return this.jsiiGet("a", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setA(final @org.jetbrains.annotations.NotNull java.lang.String value) {
            this.jsiiSet("a", java.util.Objects.requireNonNull(value, "a is required"));
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IObjectWithProperty.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Make sure that setters are properly called on objects with interfaces.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IObjectWithProperty")
@software.amazon.jsii.Jsii.Proxy(IObjectWithProperty.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IObjectWithProperty extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getProperty();

    /**
     * EXPERIMENTAL
     */
    void setProperty(final @org.jetbrains.annotations.NotNull java.lang.String value);

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Boolean wasSet();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IObjectWithProperty {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getProperty() {
            return this.jsiiGet("property", java.lang.String.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public void setProperty(final @org.jetbrains.annotations.NotNull java.lang.String value) {
            this.jsiiSet("property", java.util.Objects.requireNonNull(value, "property is required"));
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.Boolean wasSet() {
            return this.jsiiCall("wasSet", java.lang.Boolean.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IOptionalMethod.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Checks that optional result from interface method code generates correctly.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IOptionalMethod")
@software.amazon.jsii.Jsii.Proxy(IOptionalMethod.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IOptionalMethod extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.Nullable java.lang.String optional();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IOptionalMethod {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.Nullable java.lang.String optional() {
            return this.jsiiCall("optional", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IPrivatelyImplemented.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IPrivatelyImplemented")
@software.amazon.jsii.Jsii.Proxy(IPrivatelyImplemented.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IPrivatelyImplemented extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Boolean getSuccess();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IPrivatelyImplemented {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.Boolean getSuccess() {
            return this.jsiiGet("success", java.lang.Boolean.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IPublicInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IPublicInterface")
@software.amazon.jsii.Jsii.Proxy(IPublicInterface.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IPublicInterface extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String bye();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IPublicInterface {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String bye() {
            return this.jsiiCall("bye", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IPublicInterface2.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IPublicInterface2")
@software.amazon.jsii.Jsii.Proxy(IPublicInterface2.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IPublicInterface2 extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String ciao();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IPublicInterface2 {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String ciao() {
            return this.jsiiCall("ciao", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IRandomNumberGenerator.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Generates random numbers.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IRandomNumberGenerator")
@software.amazon.jsii.Jsii.Proxy(IRandomNumberGenerator.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IRandomNumberGenerator extends software.amazon.jsii.JsiiSerializable {

    /**
     * Returns another random number.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @return A random number.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Number next();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IRandomNumberGenerator {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * Returns another random number.
         * <p>
         * EXPERIMENTAL
         * <p>
         * @return A random number.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.Number next() {
            return this.jsiiCall("next", java.lang.Number.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IReturnJsii976.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Returns a subclass of a known class which implements an interface.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IReturnJsii976")
@software.amazon.jsii.Jsii.Proxy(IReturnJsii976.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IReturnJsii976 extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Number getFoo();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IReturnJsii976 {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.Number getFoo() {
            return this.jsiiGet("foo", java.lang.Number.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IReturnsNumber.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IReturnsNumber")
@software.amazon.jsii.Jsii.Proxy(IReturnsNumber.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IReturnsNumber extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Number getNumberProp();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.IDoublable obtainNumber();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IReturnsNumber {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Number getNumberProp() {
            return this.jsiiGet("numberProp", software.amazon.jsii.tests.calculator.lib.Number.class);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.IDoublable obtainNumber() {
            return this.jsiiCall("obtainNumber", software.amazon.jsii.tests.calculator.lib.IDoublable.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IStableInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IStableInterface")
@software.amazon.jsii.Jsii.Proxy(IStableInterface.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
public interface IStableInterface extends software.amazon.jsii.JsiiSerializable {

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    default @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
        return null;
    }

    /**
     */
    @software.amazon.jsii.Optional
    default void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
        throw new UnsupportedOperationException("'void " + getClass().getCanonicalName() + "#setMutableProperty(@org.jetbrains.annotations.Nullable java.lang.Number)' is not implemented!");
    }

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    void method();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IStableInterface {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        public @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
            return this.jsiiGet("mutableProperty", java.lang.Number.class);
        }

        /**
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        public void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
            this.jsiiSet("mutableProperty", value);
        }

        /**
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        @Override
        public void method() {
            this.jsiiCall("method", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/IStructReturningDelegate.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Verifies that a "pure" implementation of an interface works correctly.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.IStructReturningDelegate")
@software.amazon.jsii.Jsii.Proxy(IStructReturningDelegate.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IStructReturningDelegate extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.StructB returnStruct();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IStructReturningDelegate {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.StructB returnStruct() {
            return this.jsiiCall("returnStruct", software.amazon.jsii.tests.calculator.StructB.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ImplementInternalInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ImplementInternalInterface")
public class ImplementInternalInterface extends software.amazon.jsii.JsiiObject {

    protected ImplementInternalInterface(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ImplementInternalInterface(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ImplementInternalInterface() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getProp() {
        return this.jsiiGet("prop", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setProp(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("prop", java.util.Objects.requireNonNull(value, "prop is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Implementation.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Implementation")
public class Implementation extends software.amazon.jsii.JsiiObject {

    protected Implementation(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Implementation(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Implementation() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
        return this.jsiiGet("value", java.lang.Number.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ImplementsInterfaceWithInternal.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ImplementsInterfaceWithInternal")
public class ImplementsInterfaceWithInternal extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IInterfaceWithInternal {

    protected ImplementsInterfaceWithInternal(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ImplementsInterfaceWithInternal(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ImplementsInterfaceWithInternal() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public void visible() {
        this.jsiiCall("visible", software.amazon.jsii.NativeType.VOID);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ImplementsInterfaceWithInternalSubclass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ImplementsInterfaceWithInternalSubclass")
public class ImplementsInterfaceWithInternalSubclass extends software.amazon.jsii.tests.calculator.ImplementsInterfaceWithInternal {

    protected ImplementsInterfaceWithInternalSubclass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ImplementsInterfaceWithInternalSubclass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ImplementsInterfaceWithInternalSubclass() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ImplementsPrivateInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ImplementsPrivateInterface")
public class ImplementsPrivateInterface extends software.amazon.jsii.JsiiObject {

    protected ImplementsPrivateInterface(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ImplementsPrivateInterface(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ImplementsPrivateInterface() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getPrivateValue() {
        return this.jsiiGet("private", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setPrivateValue(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("private", java.util.Objects.requireNonNull(value, "private is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ImplictBaseOfBase.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ImplictBaseOfBase")
@software.amazon.jsii.Jsii.Proxy(ImplictBaseOfBase.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface ImplictBaseOfBase extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.base.BaseProps {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.time.Instant getGoo();

    /**
     * @return a {@link Builder} of {@link ImplictBaseOfBase}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link ImplictBaseOfBase}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<ImplictBaseOfBase> {
        private java.time.Instant goo;
        private java.lang.String bar;
        private software.amazon.jsii.tests.calculator.baseofbase.Very foo;

        /**
         * Sets the value of {@link ImplictBaseOfBase#getGoo}
         * @param goo the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder goo(java.time.Instant goo) {
            this.goo = goo;
            return this;
        }

        /**
         * Sets the value of {@link ImplictBaseOfBase#getBar}
         * @param bar the value to be set. This parameter is required.
         * @return {@code this}
         */
        public Builder bar(java.lang.String bar) {
            this.bar = bar;
            return this;
        }

        /**
         * Sets the value of {@link ImplictBaseOfBase#getFoo}
         * @param foo the value to be set. This parameter is required.
         * @return {@code this}
         */
        public Builder foo(software.amazon.jsii.tests.calculator.baseofbase.Very foo) {
            this.foo = foo;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link ImplictBaseOfBase}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public ImplictBaseOfBase build() {
            return new Jsii$Proxy(goo, bar, foo);
        }
    }

    /**
     * An implementation for {@link ImplictBaseOfBase}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements ImplictBaseOfBase {
        private final java.time.Instant goo;
        private final java.lang.String bar;
        private final software.amazon.jsii.tests.calculator.baseofbase.Very foo;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.goo = this.jsiiGet("goo", java.time.Instant.class);
            this.bar = this.jsiiGet("bar", java.lang.String.class);
            this.foo = this.jsiiGet("foo", software.amazon.jsii.tests.calculator.baseofbase.Very.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.time.Instant goo, final java.lang.String bar, final software.amazon.jsii.tests.calculator.baseofbase.Very foo) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.goo = java.util.Objects.requireNonNull(goo, "goo is required");
            this.bar = java.util.Objects.requireNonNull(bar, "bar is required");
            this.foo = java.util.Objects.requireNonNull(foo, "foo is required");
        }

        @Override
        public java.time.Instant getGoo() {
            return this.goo;
        }

        @Override
        public java.lang.String getBar() {
            return this.bar;
        }

        @Override
        public software.amazon.jsii.tests.calculator.baseofbase.Very getFoo() {
            return this.foo;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("goo", om.valueToTree(this.getGoo()));
            data.set("bar", om.valueToTree(this.getBar()));
            data.set("foo", om.valueToTree(this.getFoo()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.ImplictBaseOfBase"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ImplictBaseOfBase.Jsii$Proxy that = (ImplictBaseOfBase.Jsii$Proxy) o;

            if (!goo.equals(that.goo)) return false;
            if (!bar.equals(that.bar)) return false;
            return this.foo.equals(that.foo);
        }

        @Override
        public int hashCode() {
            int result = this.goo.hashCode();
            result = 31 * result + (this.bar.hashCode());
            result = 31 * result + (this.foo.hashCode());
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/InbetweenClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.InbetweenClass")
public class InbetweenClass extends software.amazon.jsii.tests.calculator.PublicClass implements software.amazon.jsii.tests.calculator.IPublicInterface2 {

    protected InbetweenClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected InbetweenClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public InbetweenClass() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String ciao() {
        return this.jsiiCall("ciao", java.lang.String.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/InterfaceCollections.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Verifies that collections of interfaces or structs are correctly handled.
 * <p>
 * See: https://github.com/aws/jsii/issues/1196
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.InterfaceCollections")
public class InterfaceCollections extends software.amazon.jsii.JsiiObject {

    protected InterfaceCollections(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected InterfaceCollections(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.IBell> listOfInterfaces() {
        return java.util.Collections.unmodifiableList(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.InterfaceCollections.class, "listOfInterfaces", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.IBell.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.StructA> listOfStructs() {
        return java.util.Collections.unmodifiableList(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.InterfaceCollections.class, "listOfStructs", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.StructA.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, software.amazon.jsii.tests.calculator.IBell> mapOfInterfaces() {
        return java.util.Collections.unmodifiableMap(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.InterfaceCollections.class, "mapOfInterfaces", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.IBell.class))));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, software.amazon.jsii.tests.calculator.StructA> mapOfStructs() {
        return java.util.Collections.unmodifiableMap(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.InterfaceCollections.class, "mapOfStructs", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.StructA.class))));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/InterfacesMaker.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * We can return arrays of interfaces See aws/aws-cdk#2362.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.InterfacesMaker")
public class InterfacesMaker extends software.amazon.jsii.JsiiObject {

    protected InterfacesMaker(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected InterfacesMaker(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param count This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.lib.IDoublable> makeInterfaces(final @org.jetbrains.annotations.NotNull java.lang.Number count) {
        return java.util.Collections.unmodifiableList(software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.InterfacesMaker.class, "makeInterfaces", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.lib.IDoublable.class)), new Object[] { java.util.Objects.requireNonNull(count, "count is required") }));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Isomorphism.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Checks the "same instance" isomorphism is preserved within the constructor.
 * <p>
 * Create a subclass of this, and assert that <code>this.myself()</code> actually returns
 * <code>this</code> from within the constructor.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Isomorphism")
public abstract class Isomorphism extends software.amazon.jsii.JsiiObject {

    protected Isomorphism(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Isomorphism(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected Isomorphism() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.Isomorphism myself() {
        return this.jsiiCall("myself", software.amazon.jsii.tests.calculator.Isomorphism.class);
    }

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.Isomorphism {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/JSII417Derived.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.JSII417Derived")
public class JSII417Derived extends software.amazon.jsii.tests.calculator.JSII417PublicBaseOfBase {

    protected JSII417Derived(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected JSII417Derived(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param property This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public JSII417Derived(final @org.jetbrains.annotations.NotNull java.lang.String property) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(property, "property is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void bar() {
        this.jsiiCall("bar", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void baz() {
        this.jsiiCall("baz", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected @org.jetbrains.annotations.NotNull java.lang.String getProperty() {
        return this.jsiiGet("property", java.lang.String.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/JSII417PublicBaseOfBase.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.JSII417PublicBaseOfBase")
public class JSII417PublicBaseOfBase extends software.amazon.jsii.JsiiObject {

    protected JSII417PublicBaseOfBase(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected JSII417PublicBaseOfBase(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public JSII417PublicBaseOfBase() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.JSII417PublicBaseOfBase makeInstance() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JSII417PublicBaseOfBase.class, "makeInstance", software.amazon.jsii.tests.calculator.JSII417PublicBaseOfBase.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void foo() {
        this.jsiiCall("foo", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean getHasRoot() {
        return this.jsiiGet("hasRoot", java.lang.Boolean.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/JSObjectLiteralForInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.JSObjectLiteralForInterface")
public class JSObjectLiteralForInterface extends software.amazon.jsii.JsiiObject {

    protected JSObjectLiteralForInterface(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected JSObjectLiteralForInterface(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public JSObjectLiteralForInterface() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.IFriendly giveMeFriendly() {
        return this.jsiiCall("giveMeFriendly", software.amazon.jsii.tests.calculator.lib.IFriendly.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IFriendlyRandomGenerator giveMeFriendlyGenerator() {
        return this.jsiiCall("giveMeFriendlyGenerator", software.amazon.jsii.tests.calculator.IFriendlyRandomGenerator.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/JSObjectLiteralToNative.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.JSObjectLiteralToNative")
public class JSObjectLiteralToNative extends software.amazon.jsii.JsiiObject {

    protected JSObjectLiteralToNative(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected JSObjectLiteralToNative(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public JSObjectLiteralToNative() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.JSObjectLiteralToNativeClass returnLiteral() {
        return this.jsiiCall("returnLiteral", software.amazon.jsii.tests.calculator.JSObjectLiteralToNativeClass.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/JSObjectLiteralToNativeClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.JSObjectLiteralToNativeClass")
public class JSObjectLiteralToNativeClass extends software.amazon.jsii.JsiiObject {

    protected JSObjectLiteralToNativeClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected JSObjectLiteralToNativeClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public JSObjectLiteralToNativeClass() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getPropA() {
        return this.jsiiGet("propA", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setPropA(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("propA", java.util.Objects.requireNonNull(value, "propA is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getPropB() {
        return this.jsiiGet("propB", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setPropB(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        this.jsiiSet("propB", java.util.Objects.requireNonNull(value, "propB is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/JavaReservedWords.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.JavaReservedWords")
public class JavaReservedWords extends software.amazon.jsii.JsiiObject {

    protected JavaReservedWords(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected JavaReservedWords(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public JavaReservedWords() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doAbstract() {
        this.jsiiCall("abstract", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doAssert() {
        this.jsiiCall("assert", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doBoolean() {
        this.jsiiCall("boolean", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doBreak() {
        this.jsiiCall("break", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doByte() {
        this.jsiiCall("byte", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doCase() {
        this.jsiiCall("case", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doCatch() {
        this.jsiiCall("catch", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doChar() {
        this.jsiiCall("char", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doClass() {
        this.jsiiCall("class", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doConst() {
        this.jsiiCall("const", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doContinue() {
        this.jsiiCall("continue", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doDefault() {
        this.jsiiCall("default", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doDo() {
        this.jsiiCall("do", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doDouble() {
        this.jsiiCall("double", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doElse() {
        this.jsiiCall("else", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doEnum() {
        this.jsiiCall("enum", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doExtends() {
        this.jsiiCall("extends", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doFalse() {
        this.jsiiCall("false", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doFinal() {
        this.jsiiCall("final", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doFinally() {
        this.jsiiCall("finally", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doFloat() {
        this.jsiiCall("float", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doFor() {
        this.jsiiCall("for", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doGoto() {
        this.jsiiCall("goto", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doIf() {
        this.jsiiCall("if", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doImplements() {
        this.jsiiCall("implements", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doImport() {
        this.jsiiCall("import", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doInstanceof() {
        this.jsiiCall("instanceof", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doInt() {
        this.jsiiCall("int", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doInterface() {
        this.jsiiCall("interface", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doLong() {
        this.jsiiCall("long", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doNative() {
        this.jsiiCall("native", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doNew() {
        this.jsiiCall("new", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doNull() {
        this.jsiiCall("null", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doPackage() {
        this.jsiiCall("package", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doPrivate() {
        this.jsiiCall("private", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doProtected() {
        this.jsiiCall("protected", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doPublic() {
        this.jsiiCall("public", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doReturn() {
        this.jsiiCall("return", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doShort() {
        this.jsiiCall("short", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doStatic() {
        this.jsiiCall("static", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doStrictfp() {
        this.jsiiCall("strictfp", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doSuper() {
        this.jsiiCall("super", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doSwitch() {
        this.jsiiCall("switch", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doSynchronized() {
        this.jsiiCall("synchronized", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doThis() {
        this.jsiiCall("this", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doThrow() {
        this.jsiiCall("throw", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doThrows() {
        this.jsiiCall("throws", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doTransient() {
        this.jsiiCall("transient", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doTrue() {
        this.jsiiCall("true", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doTry() {
        this.jsiiCall("try", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doVoid() {
        this.jsiiCall("void", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doVolatile() {
        this.jsiiCall("volatile", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getWhileValue() {
        return this.jsiiGet("while", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setWhileValue(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("while", java.util.Objects.requireNonNull(value, "while is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Jsii487Derived.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Jsii487Derived")
public class Jsii487Derived extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IJsii487External2, software.amazon.jsii.tests.calculator.IJsii487External {

    protected Jsii487Derived(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Jsii487Derived(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Jsii487Derived() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Jsii496Derived.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Jsii496Derived")
public class Jsii496Derived extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.IJsii496 {

    protected Jsii496Derived(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Jsii496Derived(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Jsii496Derived() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/JsiiAgent.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Host runtime version should be set via JSII_AGENT.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.JsiiAgent")
public class JsiiAgent extends software.amazon.jsii.JsiiObject {

    protected JsiiAgent(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected JsiiAgent(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public JsiiAgent() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * Returns the value of the JSII_AGENT environment variable.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.Nullable java.lang.String getJsiiAgent() {
        return software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.JsiiAgent.class, "jsiiAgent", java.lang.String.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/JsonFormatter.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Make sure structs are un-decorated on the way in.
 * <p>
 * EXPERIMENTAL
 * <p>
 * @see https://github.com/aws/aws-cdk/issues/5066
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.JsonFormatter")
public class JsonFormatter extends software.amazon.jsii.JsiiObject {

    protected JsonFormatter(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected JsonFormatter(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyArray() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyArray", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyBooleanFalse() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyBooleanFalse", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyBooleanTrue() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyBooleanTrue", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyDate() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyDate", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyEmptyString() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyEmptyString", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyFunction() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyFunction", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyHash() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyHash", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyNull() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyNull", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyNumber() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyNumber", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyRef() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyRef", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyString() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyString", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyUndefined() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyUndefined", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object anyZero() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "anyZero", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param value
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.Nullable java.lang.String stringify(final @org.jetbrains.annotations.Nullable java.lang.Object value) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "stringify", java.lang.String.class, new Object[] { value });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.Nullable java.lang.String stringify() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.JsonFormatter.class, "stringify", java.lang.String.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/LoadBalancedFargateServiceProps.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * jsii#298: show default values in sphinx documentation, and respect newlines.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.LoadBalancedFargateServiceProps")
@software.amazon.jsii.Jsii.Proxy(LoadBalancedFargateServiceProps.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface LoadBalancedFargateServiceProps extends software.amazon.jsii.JsiiSerializable {

    /**
     * The container port of the application load balancer attached to your Fargate service.
     * <p>
     * Corresponds to container port mapping.
     * <p>
     * Default: 80
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Number getContainerPort() {
        return null;
    }

    /**
     * The number of cpu units used by the task.
     * <p>
     * Valid values, which determines your range of valid values for the memory parameter:
     * 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
     * 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
     * 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
     * 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
     * 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
     * <p>
     * This default is set in the underlying FargateTaskDefinition construct.
     * <p>
     * Default: 256
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getCpu() {
        return null;
    }

    /**
     * The amount (in MiB) of memory used by the task.
     * <p>
     * This field is required and you must use one of the following values, which determines your range of valid values
     * for the cpu parameter:
     * <p>
     * 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
     * <p>
     * 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
     * <p>
     * 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
     * <p>
     * Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
     * <p>
     * Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
     * <p>
     * This default is set in the underlying FargateTaskDefinition construct.
     * <p>
     * Default: 512
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getMemoryMiB() {
        return null;
    }

    /**
     * Determines whether the Application Load Balancer will be internet-facing.
     * <p>
     * Default: true
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Boolean getPublicLoadBalancer() {
        return null;
    }

    /**
     * Determines whether your Fargate Service will be assigned a public IP address.
     * <p>
     * Default: false
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Boolean getPublicTasks() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link LoadBalancedFargateServiceProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link LoadBalancedFargateServiceProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<LoadBalancedFargateServiceProps> {
        private java.lang.Number containerPort;
        private java.lang.String cpu;
        private java.lang.String memoryMiB;
        private java.lang.Boolean publicLoadBalancer;
        private java.lang.Boolean publicTasks;

        /**
         * Sets the value of {@link LoadBalancedFargateServiceProps#getContainerPort}
         * @param containerPort The container port of the application load balancer attached to your Fargate service.
         *                      Corresponds to container port mapping.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder containerPort(java.lang.Number containerPort) {
            this.containerPort = containerPort;
            return this;
        }

        /**
         * Sets the value of {@link LoadBalancedFargateServiceProps#getCpu}
         * @param cpu The number of cpu units used by the task.
         *            Valid values, which determines your range of valid values for the memory parameter:
         *            256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
         *            512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
         *            1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
         *            2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
         *            4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
         *            <p>
         *            This default is set in the underlying FargateTaskDefinition construct.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder cpu(java.lang.String cpu) {
            this.cpu = cpu;
            return this;
        }

        /**
         * Sets the value of {@link LoadBalancedFargateServiceProps#getMemoryMiB}
         * @param memoryMiB The amount (in MiB) of memory used by the task.
         *                  This field is required and you must use one of the following values, which determines your range of valid values
         *                  for the cpu parameter:
         *                  <p>
         *                  0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
         *                  <p>
         *                  1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
         *                  <p>
         *                  2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
         *                  <p>
         *                  Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
         *                  <p>
         *                  Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
         *                  <p>
         *                  This default is set in the underlying FargateTaskDefinition construct.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder memoryMiB(java.lang.String memoryMiB) {
            this.memoryMiB = memoryMiB;
            return this;
        }

        /**
         * Sets the value of {@link LoadBalancedFargateServiceProps#getPublicLoadBalancer}
         * @param publicLoadBalancer Determines whether the Application Load Balancer will be internet-facing.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder publicLoadBalancer(java.lang.Boolean publicLoadBalancer) {
            this.publicLoadBalancer = publicLoadBalancer;
            return this;
        }

        /**
         * Sets the value of {@link LoadBalancedFargateServiceProps#getPublicTasks}
         * @param publicTasks Determines whether your Fargate Service will be assigned a public IP address.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder publicTasks(java.lang.Boolean publicTasks) {
            this.publicTasks = publicTasks;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link LoadBalancedFargateServiceProps}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public LoadBalancedFargateServiceProps build() {
            return new Jsii$Proxy(containerPort, cpu, memoryMiB, publicLoadBalancer, publicTasks);
        }
    }

    /**
     * An implementation for {@link LoadBalancedFargateServiceProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements LoadBalancedFargateServiceProps {
        private final java.lang.Number containerPort;
        private final java.lang.String cpu;
        private final java.lang.String memoryMiB;
        private final java.lang.Boolean publicLoadBalancer;
        private final java.lang.Boolean publicTasks;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.containerPort = this.jsiiGet("containerPort", java.lang.Number.class);
            this.cpu = this.jsiiGet("cpu", java.lang.String.class);
            this.memoryMiB = this.jsiiGet("memoryMiB", java.lang.String.class);
            this.publicLoadBalancer = this.jsiiGet("publicLoadBalancer", java.lang.Boolean.class);
            this.publicTasks = this.jsiiGet("publicTasks", java.lang.Boolean.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Number containerPort, final java.lang.String cpu, final java.lang.String memoryMiB, final java.lang.Boolean publicLoadBalancer, final java.lang.Boolean publicTasks) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.containerPort = containerPort;
            this.cpu = cpu;
            this.memoryMiB = memoryMiB;
            this.publicLoadBalancer = publicLoadBalancer;
            this.publicTasks = publicTasks;
        }

        @Override
        public java.lang.Number getContainerPort() {
            return this.containerPort;
        }

        @Override
        public java.lang.String getCpu() {
            return this.cpu;
        }

        @Override
        public java.lang.String getMemoryMiB() {
            return this.memoryMiB;
        }

        @Override
        public java.lang.Boolean getPublicLoadBalancer() {
            return this.publicLoadBalancer;
        }

        @Override
        public java.lang.Boolean getPublicTasks() {
            return this.publicTasks;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            if (this.getContainerPort() != null) {
                data.set("containerPort", om.valueToTree(this.getContainerPort()));
            }
            if (this.getCpu() != null) {
                data.set("cpu", om.valueToTree(this.getCpu()));
            }
            if (this.getMemoryMiB() != null) {
                data.set("memoryMiB", om.valueToTree(this.getMemoryMiB()));
            }
            if (this.getPublicLoadBalancer() != null) {
                data.set("publicLoadBalancer", om.valueToTree(this.getPublicLoadBalancer()));
            }
            if (this.getPublicTasks() != null) {
                data.set("publicTasks", om.valueToTree(this.getPublicTasks()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.LoadBalancedFargateServiceProps"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            LoadBalancedFargateServiceProps.Jsii$Proxy that = (LoadBalancedFargateServiceProps.Jsii$Proxy) o;

            if (this.containerPort != null ? !this.containerPort.equals(that.containerPort) : that.containerPort != null) return false;
            if (this.cpu != null ? !this.cpu.equals(that.cpu) : that.cpu != null) return false;
            if (this.memoryMiB != null ? !this.memoryMiB.equals(that.memoryMiB) : that.memoryMiB != null) return false;
            if (this.publicLoadBalancer != null ? !this.publicLoadBalancer.equals(that.publicLoadBalancer) : that.publicLoadBalancer != null) return false;
            return this.publicTasks != null ? this.publicTasks.equals(that.publicTasks) : that.publicTasks == null;
        }

        @Override
        public int hashCode() {
            int result = this.containerPort != null ? this.containerPort.hashCode() : 0;
            result = 31 * result + (this.cpu != null ? this.cpu.hashCode() : 0);
            result = 31 * result + (this.memoryMiB != null ? this.memoryMiB.hashCode() : 0);
            result = 31 * result + (this.publicLoadBalancer != null ? this.publicLoadBalancer.hashCode() : 0);
            result = 31 * result + (this.publicTasks != null ? this.publicTasks.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/MethodNamedProperty.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.MethodNamedProperty")
public class MethodNamedProperty extends software.amazon.jsii.JsiiObject {

    protected MethodNamedProperty(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected MethodNamedProperty(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public MethodNamedProperty() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String property() {
        return this.jsiiCall("property", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getElite() {
        return this.jsiiGet("elite", java.lang.Number.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Multiply.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * The "*" binary operation.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Multiply")
public class Multiply extends software.amazon.jsii.tests.calculator.BinaryOperation implements software.amazon.jsii.tests.calculator.IFriendlier, software.amazon.jsii.tests.calculator.IRandomNumberGenerator {

    protected Multiply(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Multiply(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * Creates a BinaryOperation.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param lhs Left-hand side operand. This parameter is required.
     * @param rhs Right-hand side operand. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Multiply(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value lhs, final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value rhs) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(lhs, "lhs is required"), java.util.Objects.requireNonNull(rhs, "rhs is required") });
    }

    /**
     * Say farewell.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String farewell() {
        return this.jsiiCall("farewell", java.lang.String.class);
    }

    /**
     * Say goodbye.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String goodbye() {
        return this.jsiiCall("goodbye", java.lang.String.class);
    }

    /**
     * Returns another random number.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.Number next() {
        return this.jsiiCall("next", java.lang.Number.class);
    }

    /**
     * String representation of the value.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String toString() {
        return this.jsiiCall("toString", java.lang.String.class);
    }

    /**
     * The value.
     * <p>
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
        return this.jsiiGet("value", java.lang.Number.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Negate.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * The negation operation ("-value").
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Negate")
public class Negate extends software.amazon.jsii.tests.calculator.UnaryOperation implements software.amazon.jsii.tests.calculator.IFriendlier {

    protected Negate(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Negate(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param operand This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Negate(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value operand) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(operand, "operand is required") });
    }

    /**
     * Say farewell.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String farewell() {
        return this.jsiiCall("farewell", java.lang.String.class);
    }

    /**
     * Say goodbye.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String goodbye() {
        return this.jsiiCall("goodbye", java.lang.String.class);
    }

    /**
     * Say hello!
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String hello() {
        return this.jsiiCall("hello", java.lang.String.class);
    }

    /**
     * String representation of the value.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String toString() {
        return this.jsiiCall("toString", java.lang.String.class);
    }

    /**
     * The value.
     * <p>
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
        return this.jsiiGet("value", java.lang.Number.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/NestedClassInstance.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.NestedClassInstance")
public class NestedClassInstance extends software.amazon.jsii.JsiiObject {

    protected NestedClassInstance(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected NestedClassInstance(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.custom_submodule_name.NestingClass.NestedClass makeInstance() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.NestedClassInstance.class, "makeInstance", software.amazon.jsii.tests.calculator.custom_submodule_name.NestingClass.NestedClass.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/NestedStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.NestedStruct")
@software.amazon.jsii.Jsii.Proxy(NestedStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface NestedStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * When provided, must be > 0.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Number getNumberProp();

    /**
     * @return a {@link Builder} of {@link NestedStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link NestedStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<NestedStruct> {
        private java.lang.Number numberProp;

        /**
         * Sets the value of {@link NestedStruct#getNumberProp}
         * @param numberProp When provided, must be > 0. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder numberProp(java.lang.Number numberProp) {
            this.numberProp = numberProp;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link NestedStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public NestedStruct build() {
            return new Jsii$Proxy(numberProp);
        }
    }

    /**
     * An implementation for {@link NestedStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements NestedStruct {
        private final java.lang.Number numberProp;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.numberProp = this.jsiiGet("numberProp", java.lang.Number.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Number numberProp) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.numberProp = java.util.Objects.requireNonNull(numberProp, "numberProp is required");
        }

        @Override
        public java.lang.Number getNumberProp() {
            return this.numberProp;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("numberProp", om.valueToTree(this.getNumberProp()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.NestedStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            NestedStruct.Jsii$Proxy that = (NestedStruct.Jsii$Proxy) o;

            return this.numberProp.equals(that.numberProp);
        }

        @Override
        public int hashCode() {
            int result = this.numberProp.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/NodeStandardLibrary.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Test fixture to verify that jsii modules can use the node standard library.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.NodeStandardLibrary")
public class NodeStandardLibrary extends software.amazon.jsii.JsiiObject {

    protected NodeStandardLibrary(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected NodeStandardLibrary(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public NodeStandardLibrary() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * Uses node.js "crypto" module to calculate sha256 of a string.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @return "6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50"
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String cryptoSha256() {
        return this.jsiiCall("cryptoSha256", java.lang.String.class);
    }

    /**
     * Reads a local resource file (resource.txt) asynchronously.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @return "Hello, resource!"
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String fsReadFile() {
        return this.jsiiAsyncCall("fsReadFile", java.lang.String.class);
    }

    /**
     * Sync version of fsReadFile.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @return "Hello, resource! SYNC!"
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String fsReadFileSync() {
        return this.jsiiCall("fsReadFileSync", java.lang.String.class);
    }

    /**
     * Returns the current os.platform() from the "os" node module.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getOsPlatform() {
        return this.jsiiGet("osPlatform", java.lang.String.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/NullShouldBeTreatedAsUndefined.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * jsii#282, aws-cdk#157: null should be treated as "undefined".
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.NullShouldBeTreatedAsUndefined")
public class NullShouldBeTreatedAsUndefined extends software.amazon.jsii.JsiiObject {

    protected NullShouldBeTreatedAsUndefined(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected NullShouldBeTreatedAsUndefined(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param _param1 This parameter is required.
     * @param optional
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public NullShouldBeTreatedAsUndefined(final @org.jetbrains.annotations.NotNull java.lang.String _param1, final @org.jetbrains.annotations.Nullable java.lang.Object optional) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(_param1, "_param1 is required"), optional });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param _param1 This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public NullShouldBeTreatedAsUndefined(final @org.jetbrains.annotations.NotNull java.lang.String _param1) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(_param1, "_param1 is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param value
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void giveMeUndefined(final @org.jetbrains.annotations.Nullable java.lang.Object value) {
        this.jsiiCall("giveMeUndefined", software.amazon.jsii.NativeType.VOID, new Object[] { value });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void giveMeUndefined() {
        this.jsiiCall("giveMeUndefined", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param input This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void giveMeUndefinedInsideAnObject(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.NullShouldBeTreatedAsUndefinedData input) {
        this.jsiiCall("giveMeUndefinedInsideAnObject", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(input, "input is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void verifyPropertyIsUndefined() {
        this.jsiiCall("verifyPropertyIsUndefined", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable java.lang.String getChangeMeToUndefined() {
        return this.jsiiGet("changeMeToUndefined", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setChangeMeToUndefined(final @org.jetbrains.annotations.Nullable java.lang.String value) {
        this.jsiiSet("changeMeToUndefined", value);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/NullShouldBeTreatedAsUndefinedData.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.NullShouldBeTreatedAsUndefinedData")
@software.amazon.jsii.Jsii.Proxy(NullShouldBeTreatedAsUndefinedData.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface NullShouldBeTreatedAsUndefinedData extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.util.List<java.lang.Object> getArrayWithThreeElementsAndUndefinedAsSecondArgument();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Object getThisShouldBeUndefined() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link NullShouldBeTreatedAsUndefinedData}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link NullShouldBeTreatedAsUndefinedData}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<NullShouldBeTreatedAsUndefinedData> {
        private java.util.List<java.lang.Object> arrayWithThreeElementsAndUndefinedAsSecondArgument;
        private java.lang.Object thisShouldBeUndefined;

        /**
         * Sets the value of {@link NullShouldBeTreatedAsUndefinedData#getArrayWithThreeElementsAndUndefinedAsSecondArgument}
         * @param arrayWithThreeElementsAndUndefinedAsSecondArgument the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder arrayWithThreeElementsAndUndefinedAsSecondArgument(java.util.List<java.lang.Object> arrayWithThreeElementsAndUndefinedAsSecondArgument) {
            this.arrayWithThreeElementsAndUndefinedAsSecondArgument = arrayWithThreeElementsAndUndefinedAsSecondArgument;
            return this;
        }

        /**
         * Sets the value of {@link NullShouldBeTreatedAsUndefinedData#getThisShouldBeUndefined}
         * @param thisShouldBeUndefined the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder thisShouldBeUndefined(java.lang.Object thisShouldBeUndefined) {
            this.thisShouldBeUndefined = thisShouldBeUndefined;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link NullShouldBeTreatedAsUndefinedData}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public NullShouldBeTreatedAsUndefinedData build() {
            return new Jsii$Proxy(arrayWithThreeElementsAndUndefinedAsSecondArgument, thisShouldBeUndefined);
        }
    }

    /**
     * An implementation for {@link NullShouldBeTreatedAsUndefinedData}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements NullShouldBeTreatedAsUndefinedData {
        private final java.util.List<java.lang.Object> arrayWithThreeElementsAndUndefinedAsSecondArgument;
        private final java.lang.Object thisShouldBeUndefined;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.arrayWithThreeElementsAndUndefinedAsSecondArgument = this.jsiiGet("arrayWithThreeElementsAndUndefinedAsSecondArgument", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.Object.class)));
            this.thisShouldBeUndefined = this.jsiiGet("thisShouldBeUndefined", java.lang.Object.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.util.List<java.lang.Object> arrayWithThreeElementsAndUndefinedAsSecondArgument, final java.lang.Object thisShouldBeUndefined) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.arrayWithThreeElementsAndUndefinedAsSecondArgument = java.util.Objects.requireNonNull(arrayWithThreeElementsAndUndefinedAsSecondArgument, "arrayWithThreeElementsAndUndefinedAsSecondArgument is required");
            this.thisShouldBeUndefined = thisShouldBeUndefined;
        }

        @Override
        public java.util.List<java.lang.Object> getArrayWithThreeElementsAndUndefinedAsSecondArgument() {
            return this.arrayWithThreeElementsAndUndefinedAsSecondArgument;
        }

        @Override
        public java.lang.Object getThisShouldBeUndefined() {
            return this.thisShouldBeUndefined;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("arrayWithThreeElementsAndUndefinedAsSecondArgument", om.valueToTree(this.getArrayWithThreeElementsAndUndefinedAsSecondArgument()));
            if (this.getThisShouldBeUndefined() != null) {
                data.set("thisShouldBeUndefined", om.valueToTree(this.getThisShouldBeUndefined()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.NullShouldBeTreatedAsUndefinedData"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            NullShouldBeTreatedAsUndefinedData.Jsii$Proxy that = (NullShouldBeTreatedAsUndefinedData.Jsii$Proxy) o;

            if (!arrayWithThreeElementsAndUndefinedAsSecondArgument.equals(that.arrayWithThreeElementsAndUndefinedAsSecondArgument)) return false;
            return this.thisShouldBeUndefined != null ? this.thisShouldBeUndefined.equals(that.thisShouldBeUndefined) : that.thisShouldBeUndefined == null;
        }

        @Override
        public int hashCode() {
            int result = this.arrayWithThreeElementsAndUndefinedAsSecondArgument.hashCode();
            result = 31 * result + (this.thisShouldBeUndefined != null ? this.thisShouldBeUndefined.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/NumberGenerator.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * This allows us to test that a reference can be stored for objects that implement interfaces.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.NumberGenerator")
public class NumberGenerator extends software.amazon.jsii.JsiiObject {

    protected NumberGenerator(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected NumberGenerator(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param generator This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public NumberGenerator(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IRandomNumberGenerator generator) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(generator, "generator is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param gen This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean isSameGenerator(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IRandomNumberGenerator gen) {
        return this.jsiiCall("isSameGenerator", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(gen, "gen is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number nextTimes100() {
        return this.jsiiCall("nextTimes100", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IRandomNumberGenerator getGenerator() {
        return this.jsiiGet("generator", software.amazon.jsii.tests.calculator.IRandomNumberGenerator.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setGenerator(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IRandomNumberGenerator value) {
        this.jsiiSet("generator", java.util.Objects.requireNonNull(value, "generator is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ObjectRefsInCollections.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Verify that object references can be passed inside collections.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ObjectRefsInCollections")
public class ObjectRefsInCollections extends software.amazon.jsii.JsiiObject {

    protected ObjectRefsInCollections(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ObjectRefsInCollections(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ObjectRefsInCollections() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * Returns the sum of all values.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param values This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number sumFromArray(final @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.lib.Value> values) {
        return this.jsiiCall("sumFromArray", java.lang.Number.class, new Object[] { java.util.Objects.requireNonNull(values, "values is required") });
    }

    /**
     * Returns the sum of all values in a map.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param values This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number sumFromMap(final @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, software.amazon.jsii.tests.calculator.lib.Value> values) {
        return this.jsiiCall("sumFromMap", java.lang.Number.class, new Object[] { java.util.Objects.requireNonNull(values, "values is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ObjectWithPropertyProvider.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ObjectWithPropertyProvider")
public class ObjectWithPropertyProvider extends software.amazon.jsii.JsiiObject {

    protected ObjectWithPropertyProvider(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ObjectWithPropertyProvider(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IObjectWithProperty provide() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.ObjectWithPropertyProvider.class, "provide", software.amazon.jsii.tests.calculator.IObjectWithProperty.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Old.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Old class.
 * <p>
 * @deprecated Use the new class
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
@Deprecated
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Old")
public class Old extends software.amazon.jsii.JsiiObject {

    protected Old(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Old(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Old() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * Doo wop that thing.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    @Deprecated
    public void doAThing() {
        this.jsiiCall("doAThing", software.amazon.jsii.NativeType.VOID);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/OptionalArgumentInvoker.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.OptionalArgumentInvoker")
public class OptionalArgumentInvoker extends software.amazon.jsii.JsiiObject {

    protected OptionalArgumentInvoker(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected OptionalArgumentInvoker(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param delegate This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public OptionalArgumentInvoker(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IInterfaceWithOptionalMethodArguments delegate) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(delegate, "delegate is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void invokeWithOptional() {
        this.jsiiCall("invokeWithOptional", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void invokeWithoutOptional() {
        this.jsiiCall("invokeWithoutOptional", software.amazon.jsii.NativeType.VOID);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/OptionalConstructorArgument.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.OptionalConstructorArgument")
public class OptionalConstructorArgument extends software.amazon.jsii.JsiiObject {

    protected OptionalConstructorArgument(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected OptionalConstructorArgument(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param arg1 This parameter is required.
     * @param arg2 This parameter is required.
     * @param arg3
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public OptionalConstructorArgument(final @org.jetbrains.annotations.NotNull java.lang.Number arg1, final @org.jetbrains.annotations.NotNull java.lang.String arg2, final @org.jetbrains.annotations.Nullable java.time.Instant arg3) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(arg1, "arg1 is required"), java.util.Objects.requireNonNull(arg2, "arg2 is required"), arg3 });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param arg1 This parameter is required.
     * @param arg2 This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public OptionalConstructorArgument(final @org.jetbrains.annotations.NotNull java.lang.Number arg1, final @org.jetbrains.annotations.NotNull java.lang.String arg2) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(arg1, "arg1 is required"), java.util.Objects.requireNonNull(arg2, "arg2 is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getArg1() {
        return this.jsiiGet("arg1", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getArg2() {
        return this.jsiiGet("arg2", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable java.time.Instant getArg3() {
        return this.jsiiGet("arg3", java.time.Instant.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/OptionalStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.OptionalStruct")
@software.amazon.jsii.Jsii.Proxy(OptionalStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface OptionalStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getField() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link OptionalStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link OptionalStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<OptionalStruct> {
        private java.lang.String field;

        /**
         * Sets the value of {@link OptionalStruct#getField}
         * @param field the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder field(java.lang.String field) {
            this.field = field;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link OptionalStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public OptionalStruct build() {
            return new Jsii$Proxy(field);
        }
    }

    /**
     * An implementation for {@link OptionalStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements OptionalStruct {
        private final java.lang.String field;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.field = this.jsiiGet("field", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String field) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.field = field;
        }

        @Override
        public java.lang.String getField() {
            return this.field;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            if (this.getField() != null) {
                data.set("field", om.valueToTree(this.getField()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.OptionalStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            OptionalStruct.Jsii$Proxy that = (OptionalStruct.Jsii$Proxy) o;

            return this.field != null ? this.field.equals(that.field) : that.field == null;
        }

        @Override
        public int hashCode() {
            int result = this.field != null ? this.field.hashCode() : 0;
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/OptionalStructConsumer.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.OptionalStructConsumer")
public class OptionalStructConsumer extends software.amazon.jsii.JsiiObject {

    protected OptionalStructConsumer(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected OptionalStructConsumer(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param optionalStruct
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public OptionalStructConsumer(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.OptionalStruct optionalStruct) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { optionalStruct });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public OptionalStructConsumer() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean getParameterWasUndefined() {
        return this.jsiiGet("parameterWasUndefined", java.lang.Boolean.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable java.lang.String getFieldValue() {
        return this.jsiiGet("fieldValue", java.lang.String.class);
    }

    /**
     * A fluent builder for {@link software.amazon.jsii.tests.calculator.OptionalStructConsumer}.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<software.amazon.jsii.tests.calculator.OptionalStructConsumer> {
        /**
         * EXPERIMENTAL
         * <p>
         * @return a new instance of {@link Builder}.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public static Builder create() {
            return new Builder();
        }

        private software.amazon.jsii.tests.calculator.OptionalStruct.Builder optionalStruct;

        private Builder() {
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @return {@code this}
         * @param field This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder field(final java.lang.String field) {
            this.optionalStruct().field(field);
            return this;
        }

        /**
         * @returns a newly built instance of {@link software.amazon.jsii.tests.calculator.OptionalStructConsumer}.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public software.amazon.jsii.tests.calculator.OptionalStructConsumer build() {
            return new software.amazon.jsii.tests.calculator.OptionalStructConsumer(
                this.optionalStruct != null ? this.optionalStruct.build() : null
            );
        }

        private software.amazon.jsii.tests.calculator.OptionalStruct.Builder optionalStruct() {
            if (this.optionalStruct == null) {
                this.optionalStruct = new software.amazon.jsii.tests.calculator.OptionalStruct.Builder();
            }
            return this.optionalStruct;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/OverridableProtectedMember.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 * <p>
 * @see https://github.com/aws/jsii/issues/903
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.OverridableProtectedMember")
public class OverridableProtectedMember extends software.amazon.jsii.JsiiObject {

    protected OverridableProtectedMember(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected OverridableProtectedMember(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public OverridableProtectedMember() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected @org.jetbrains.annotations.NotNull java.lang.String overrideMe() {
        return this.jsiiCall("overrideMe", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void switchModes() {
        this.jsiiCall("switchModes", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String valueFromProtected() {
        return this.jsiiCall("valueFromProtected", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected @org.jetbrains.annotations.NotNull java.lang.String getOverrideReadOnly() {
        return this.jsiiGet("overrideReadOnly", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected @org.jetbrains.annotations.NotNull java.lang.String getOverrideReadWrite() {
        return this.jsiiGet("overrideReadWrite", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected void setOverrideReadWrite(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("overrideReadWrite", java.util.Objects.requireNonNull(value, "overrideReadWrite is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/OverrideReturnsObject.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.OverrideReturnsObject")
public class OverrideReturnsObject extends software.amazon.jsii.JsiiObject {

    protected OverrideReturnsObject(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected OverrideReturnsObject(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public OverrideReturnsObject() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param obj This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number test(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IReturnsNumber obj) {
        return this.jsiiCall("test", java.lang.Number.class, new Object[] { java.util.Objects.requireNonNull(obj, "obj is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ParentStruct982.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * https://github.com/aws/jsii/issues/982.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ParentStruct982")
@software.amazon.jsii.Jsii.Proxy(ParentStruct982.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface ParentStruct982 extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getFoo();

    /**
     * @return a {@link Builder} of {@link ParentStruct982}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link ParentStruct982}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<ParentStruct982> {
        private java.lang.String foo;

        /**
         * Sets the value of {@link ParentStruct982#getFoo}
         * @param foo the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder foo(java.lang.String foo) {
            this.foo = foo;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link ParentStruct982}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public ParentStruct982 build() {
            return new Jsii$Proxy(foo);
        }
    }

    /**
     * An implementation for {@link ParentStruct982}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements ParentStruct982 {
        private final java.lang.String foo;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.foo = this.jsiiGet("foo", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String foo) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.foo = java.util.Objects.requireNonNull(foo, "foo is required");
        }

        @Override
        public java.lang.String getFoo() {
            return this.foo;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("foo", om.valueToTree(this.getFoo()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.ParentStruct982"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ParentStruct982.Jsii$Proxy that = (ParentStruct982.Jsii$Proxy) o;

            return this.foo.equals(that.foo);
        }

        @Override
        public int hashCode() {
            int result = this.foo.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/PartiallyInitializedThisConsumer.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.PartiallyInitializedThisConsumer")
public abstract class PartiallyInitializedThisConsumer extends software.amazon.jsii.JsiiObject {

    protected PartiallyInitializedThisConsumer(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected PartiallyInitializedThisConsumer(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected PartiallyInitializedThisConsumer() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param obj This parameter is required.
     * @param dt This parameter is required.
     * @param ev This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public abstract @org.jetbrains.annotations.NotNull java.lang.String consumePartiallyInitializedThis(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.ConstructorPassesThisOut obj, final @org.jetbrains.annotations.NotNull java.time.Instant dt, final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.AllTypesEnum ev);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.PartiallyInitializedThisConsumer {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @param obj This parameter is required.
         * @param dt This parameter is required.
         * @param ev This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String consumePartiallyInitializedThis(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.ConstructorPassesThisOut obj, final @org.jetbrains.annotations.NotNull java.time.Instant dt, final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.AllTypesEnum ev) {
            return this.jsiiCall("consumePartiallyInitializedThis", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(obj, "obj is required"), java.util.Objects.requireNonNull(dt, "dt is required"), java.util.Objects.requireNonNull(ev, "ev is required") });
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Polymorphism.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Polymorphism")
public class Polymorphism extends software.amazon.jsii.JsiiObject {

    protected Polymorphism(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Polymorphism(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Polymorphism() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param friendly This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String sayHello(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.IFriendly friendly) {
        return this.jsiiCall("sayHello", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(friendly, "friendly is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Power.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * The power operation.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Power")
public class Power extends software.amazon.jsii.tests.calculator.composition.CompositeOperation {

    protected Power(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Power(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * Creates a Power operation.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param base The base of the power. This parameter is required.
     * @param pow The number of times to multiply. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Power(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value base, final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value pow) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(base, "base is required"), java.util.Objects.requireNonNull(pow, "pow is required") });
    }

    /**
     * The base of the power.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value getBase() {
        return this.jsiiGet("base", software.amazon.jsii.tests.calculator.lib.Value.class);
    }

    /**
     * The expression that this operation consists of.
     * <p>
     * Must be implemented by derived classes.
     * <p>
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value getExpression() {
        return this.jsiiGet("expression", software.amazon.jsii.tests.calculator.lib.Value.class);
    }

    /**
     * The number of times to multiply.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value getPow() {
        return this.jsiiGet("pow", software.amazon.jsii.tests.calculator.lib.Value.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/PropertyNamedProperty.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Reproduction for https://github.com/aws/jsii/issues/1113 Where a method or property named "property" would result in impossible to load Python code.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.PropertyNamedProperty")
public class PropertyNamedProperty extends software.amazon.jsii.JsiiObject {

    protected PropertyNamedProperty(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected PropertyNamedProperty(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public PropertyNamedProperty() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getProperty() {
        return this.jsiiGet("property", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean getYetAnoterOne() {
        return this.jsiiGet("yetAnoterOne", java.lang.Boolean.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/PublicClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.PublicClass")
public class PublicClass extends software.amazon.jsii.JsiiObject {

    protected PublicClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected PublicClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public PublicClass() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void hello() {
        this.jsiiCall("hello", software.amazon.jsii.NativeType.VOID);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/PythonReservedWords.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.PythonReservedWords")
public class PythonReservedWords extends software.amazon.jsii.JsiiObject {

    protected PythonReservedWords(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected PythonReservedWords(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public PythonReservedWords() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void and() {
        this.jsiiCall("and", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void as() {
        this.jsiiCall("as", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doAssert() {
        this.jsiiCall("assert", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void async() {
        this.jsiiCall("async", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void await() {
        this.jsiiCall("await", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doBreak() {
        this.jsiiCall("break", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doClass() {
        this.jsiiCall("class", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doContinue() {
        this.jsiiCall("continue", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void def() {
        this.jsiiCall("def", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void del() {
        this.jsiiCall("del", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void elif() {
        this.jsiiCall("elif", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doElse() {
        this.jsiiCall("else", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void except() {
        this.jsiiCall("except", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doFinally() {
        this.jsiiCall("finally", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doFor() {
        this.jsiiCall("for", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void from() {
        this.jsiiCall("from", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void global() {
        this.jsiiCall("global", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doIf() {
        this.jsiiCall("if", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doImport() {
        this.jsiiCall("import", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void in() {
        this.jsiiCall("in", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void is() {
        this.jsiiCall("is", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void lambda() {
        this.jsiiCall("lambda", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void nonlocal() {
        this.jsiiCall("nonlocal", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void not() {
        this.jsiiCall("not", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void or() {
        this.jsiiCall("or", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void pass() {
        this.jsiiCall("pass", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void raise() {
        this.jsiiCall("raise", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doReturn() {
        this.jsiiCall("return", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doTry() {
        this.jsiiCall("try", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void doWhile() {
        this.jsiiCall("while", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void with() {
        this.jsiiCall("with", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void yield() {
        this.jsiiCall("yield", software.amazon.jsii.NativeType.VOID);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ReferenceEnumFromScopedPackage.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * See awslabs/jsii#138.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ReferenceEnumFromScopedPackage")
public class ReferenceEnumFromScopedPackage extends software.amazon.jsii.JsiiObject {

    protected ReferenceEnumFromScopedPackage(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ReferenceEnumFromScopedPackage(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ReferenceEnumFromScopedPackage() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.lib.EnumFromScopedModule loadFoo() {
        return this.jsiiCall("loadFoo", software.amazon.jsii.tests.calculator.lib.EnumFromScopedModule.class);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void saveFoo(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.EnumFromScopedModule value) {
        this.jsiiCall("saveFoo", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.lib.EnumFromScopedModule getFoo() {
        return this.jsiiGet("foo", software.amazon.jsii.tests.calculator.lib.EnumFromScopedModule.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setFoo(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.lib.EnumFromScopedModule value) {
        this.jsiiSet("foo", value);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/ReturnsPrivateImplementationOfInterface.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Helps ensure the JSII kernel & runtime cooperate correctly when an un-exported instance of a class is returned with a declared type that is an exported interface, and the instance inherits from an exported class.
 * <p>
 * EXPERIMENTAL
 * <p>
 * @return an instance of an un-exported class that extends \`ExportedBaseClass\`, declared as \`IPrivatelyImplemented\`.
 * @see https://github.com/aws/jsii/issues/320
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.ReturnsPrivateImplementationOfInterface")
public class ReturnsPrivateImplementationOfInterface extends software.amazon.jsii.JsiiObject {

    protected ReturnsPrivateImplementationOfInterface(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ReturnsPrivateImplementationOfInterface(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ReturnsPrivateImplementationOfInterface() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IPrivatelyImplemented getPrivateImplementation() {
        return this.jsiiGet("privateImplementation", software.amazon.jsii.tests.calculator.IPrivatelyImplemented.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/RootStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.
 * <p>
 * This is cheating with the (current) declared types, but this is the "more
 * idiomatic" way for Pythonists.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.RootStruct")
@software.amazon.jsii.Jsii.Proxy(RootStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface RootStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * May not be empty.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getStringProp();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.NestedStruct getNestedStruct() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link RootStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link RootStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<RootStruct> {
        private java.lang.String stringProp;
        private software.amazon.jsii.tests.calculator.NestedStruct nestedStruct;

        /**
         * Sets the value of {@link RootStruct#getStringProp}
         * @param stringProp May not be empty. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder stringProp(java.lang.String stringProp) {
            this.stringProp = stringProp;
            return this;
        }

        /**
         * Sets the value of {@link RootStruct#getNestedStruct}
         * @param nestedStruct the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder nestedStruct(software.amazon.jsii.tests.calculator.NestedStruct nestedStruct) {
            this.nestedStruct = nestedStruct;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link RootStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public RootStruct build() {
            return new Jsii$Proxy(stringProp, nestedStruct);
        }
    }

    /**
     * An implementation for {@link RootStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements RootStruct {
        private final java.lang.String stringProp;
        private final software.amazon.jsii.tests.calculator.NestedStruct nestedStruct;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.stringProp = this.jsiiGet("stringProp", java.lang.String.class);
            this.nestedStruct = this.jsiiGet("nestedStruct", software.amazon.jsii.tests.calculator.NestedStruct.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String stringProp, final software.amazon.jsii.tests.calculator.NestedStruct nestedStruct) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.stringProp = java.util.Objects.requireNonNull(stringProp, "stringProp is required");
            this.nestedStruct = nestedStruct;
        }

        @Override
        public java.lang.String getStringProp() {
            return this.stringProp;
        }

        @Override
        public software.amazon.jsii.tests.calculator.NestedStruct getNestedStruct() {
            return this.nestedStruct;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("stringProp", om.valueToTree(this.getStringProp()));
            if (this.getNestedStruct() != null) {
                data.set("nestedStruct", om.valueToTree(this.getNestedStruct()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.RootStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            RootStruct.Jsii$Proxy that = (RootStruct.Jsii$Proxy) o;

            if (!stringProp.equals(that.stringProp)) return false;
            return this.nestedStruct != null ? this.nestedStruct.equals(that.nestedStruct) : that.nestedStruct == null;
        }

        @Override
        public int hashCode() {
            int result = this.stringProp.hashCode();
            result = 31 * result + (this.nestedStruct != null ? this.nestedStruct.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/RootStructValidator.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.RootStructValidator")
public class RootStructValidator extends software.amazon.jsii.JsiiObject {

    protected RootStructValidator(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected RootStructValidator(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param struct This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static void validate(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.RootStruct struct) {
        software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.RootStructValidator.class, "validate", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(struct, "struct is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/RuntimeTypeChecking.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.RuntimeTypeChecking")
public class RuntimeTypeChecking extends software.amazon.jsii.JsiiObject {

    protected RuntimeTypeChecking(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected RuntimeTypeChecking(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public RuntimeTypeChecking() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param arg1
     * @param arg2
     * @param arg3
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void methodWithDefaultedArguments(final @org.jetbrains.annotations.Nullable java.lang.Number arg1, final @org.jetbrains.annotations.Nullable java.lang.String arg2, final @org.jetbrains.annotations.Nullable java.time.Instant arg3) {
        this.jsiiCall("methodWithDefaultedArguments", software.amazon.jsii.NativeType.VOID, new Object[] { arg1, arg2, arg3 });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param arg1
     * @param arg2
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void methodWithDefaultedArguments(final @org.jetbrains.annotations.Nullable java.lang.Number arg1, final @org.jetbrains.annotations.Nullable java.lang.String arg2) {
        this.jsiiCall("methodWithDefaultedArguments", software.amazon.jsii.NativeType.VOID, new Object[] { arg1, arg2 });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param arg1
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void methodWithDefaultedArguments(final @org.jetbrains.annotations.Nullable java.lang.Number arg1) {
        this.jsiiCall("methodWithDefaultedArguments", software.amazon.jsii.NativeType.VOID, new Object[] { arg1 });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void methodWithDefaultedArguments() {
        this.jsiiCall("methodWithDefaultedArguments", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param arg
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void methodWithOptionalAnyArgument(final @org.jetbrains.annotations.Nullable java.lang.Object arg) {
        this.jsiiCall("methodWithOptionalAnyArgument", software.amazon.jsii.NativeType.VOID, new Object[] { arg });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void methodWithOptionalAnyArgument() {
        this.jsiiCall("methodWithOptionalAnyArgument", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * Used to verify verification of number of method arguments.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param arg1 This parameter is required.
     * @param arg2 This parameter is required.
     * @param arg3
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void methodWithOptionalArguments(final @org.jetbrains.annotations.NotNull java.lang.Number arg1, final @org.jetbrains.annotations.NotNull java.lang.String arg2, final @org.jetbrains.annotations.Nullable java.time.Instant arg3) {
        this.jsiiCall("methodWithOptionalArguments", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(arg1, "arg1 is required"), java.util.Objects.requireNonNull(arg2, "arg2 is required"), arg3 });
    }

    /**
     * Used to verify verification of number of method arguments.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param arg1 This parameter is required.
     * @param arg2 This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void methodWithOptionalArguments(final @org.jetbrains.annotations.NotNull java.lang.Number arg1, final @org.jetbrains.annotations.NotNull java.lang.String arg2) {
        this.jsiiCall("methodWithOptionalArguments", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(arg1, "arg1 is required"), java.util.Objects.requireNonNull(arg2, "arg2 is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SecondLevelStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SecondLevelStruct")
@software.amazon.jsii.Jsii.Proxy(SecondLevelStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface SecondLevelStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * It's long and required.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getDeeperRequiredProp();

    /**
     * It's long, but you'll almost never pass it.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getDeeperOptionalProp() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link SecondLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link SecondLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<SecondLevelStruct> {
        private java.lang.String deeperRequiredProp;
        private java.lang.String deeperOptionalProp;

        /**
         * Sets the value of {@link SecondLevelStruct#getDeeperRequiredProp}
         * @param deeperRequiredProp It's long and required. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder deeperRequiredProp(java.lang.String deeperRequiredProp) {
            this.deeperRequiredProp = deeperRequiredProp;
            return this;
        }

        /**
         * Sets the value of {@link SecondLevelStruct#getDeeperOptionalProp}
         * @param deeperOptionalProp It's long, but you'll almost never pass it.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder deeperOptionalProp(java.lang.String deeperOptionalProp) {
            this.deeperOptionalProp = deeperOptionalProp;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link SecondLevelStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public SecondLevelStruct build() {
            return new Jsii$Proxy(deeperRequiredProp, deeperOptionalProp);
        }
    }

    /**
     * An implementation for {@link SecondLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements SecondLevelStruct {
        private final java.lang.String deeperRequiredProp;
        private final java.lang.String deeperOptionalProp;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.deeperRequiredProp = this.jsiiGet("deeperRequiredProp", java.lang.String.class);
            this.deeperOptionalProp = this.jsiiGet("deeperOptionalProp", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String deeperRequiredProp, final java.lang.String deeperOptionalProp) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.deeperRequiredProp = java.util.Objects.requireNonNull(deeperRequiredProp, "deeperRequiredProp is required");
            this.deeperOptionalProp = deeperOptionalProp;
        }

        @Override
        public java.lang.String getDeeperRequiredProp() {
            return this.deeperRequiredProp;
        }

        @Override
        public java.lang.String getDeeperOptionalProp() {
            return this.deeperOptionalProp;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("deeperRequiredProp", om.valueToTree(this.getDeeperRequiredProp()));
            if (this.getDeeperOptionalProp() != null) {
                data.set("deeperOptionalProp", om.valueToTree(this.getDeeperOptionalProp()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.SecondLevelStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            SecondLevelStruct.Jsii$Proxy that = (SecondLevelStruct.Jsii$Proxy) o;

            if (!deeperRequiredProp.equals(that.deeperRequiredProp)) return false;
            return this.deeperOptionalProp != null ? this.deeperOptionalProp.equals(that.deeperOptionalProp) : that.deeperOptionalProp == null;
        }

        @Override
        public int hashCode() {
            int result = this.deeperRequiredProp.hashCode();
            result = 31 * result + (this.deeperOptionalProp != null ? this.deeperOptionalProp.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SingleInstanceTwoTypes.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Test that a single instance can be returned under two different FQNs.
 * <p>
 * JSII clients can instantiate 2 different strongly-typed wrappers for the same
 * object. Unfortunately, this will break object equality, but if we didn't do
 * this it would break runtime type checks in the JVM or CLR.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SingleInstanceTwoTypes")
public class SingleInstanceTwoTypes extends software.amazon.jsii.JsiiObject {

    protected SingleInstanceTwoTypes(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected SingleInstanceTwoTypes(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public SingleInstanceTwoTypes() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.InbetweenClass interface1() {
        return this.jsiiCall("interface1", software.amazon.jsii.tests.calculator.InbetweenClass.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IPublicInterface interface2() {
        return this.jsiiCall("interface2", software.amazon.jsii.tests.calculator.IPublicInterface.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SingletonInt.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Verifies that singleton enums are handled correctly.
 * <p>
 * https://github.com/aws/jsii/issues/231
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SingletonInt")
public class SingletonInt extends software.amazon.jsii.JsiiObject {

    protected SingletonInt(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected SingletonInt(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean isSingletonInt(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        return this.jsiiCall("isSingletonInt", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SingletonIntEnum.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * A singleton integer.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SingletonIntEnum")
public enum SingletonIntEnum {
    /**
     * Elite!
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    SINGLETON_INT,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SingletonString.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Verifies that singleton enums are handled correctly.
 * <p>
 * https://github.com/aws/jsii/issues/231
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SingletonString")
public class SingletonString extends software.amazon.jsii.JsiiObject {

    protected SingletonString(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected SingletonString(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean isSingletonString(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        return this.jsiiCall("isSingletonString", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SingletonStringEnum.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * A singleton string.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SingletonStringEnum")
public enum SingletonStringEnum {
    /**
     * 1337.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    SINGLETON_STRING,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SmellyStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SmellyStruct")
@software.amazon.jsii.Jsii.Proxy(SmellyStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface SmellyStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getProperty();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Boolean getYetAnoterOne();

    /**
     * @return a {@link Builder} of {@link SmellyStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link SmellyStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<SmellyStruct> {
        private java.lang.String property;
        private java.lang.Boolean yetAnoterOne;

        /**
         * Sets the value of {@link SmellyStruct#getProperty}
         * @param property the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder property(java.lang.String property) {
            this.property = property;
            return this;
        }

        /**
         * Sets the value of {@link SmellyStruct#getYetAnoterOne}
         * @param yetAnoterOne the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder yetAnoterOne(java.lang.Boolean yetAnoterOne) {
            this.yetAnoterOne = yetAnoterOne;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link SmellyStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public SmellyStruct build() {
            return new Jsii$Proxy(property, yetAnoterOne);
        }
    }

    /**
     * An implementation for {@link SmellyStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements SmellyStruct {
        private final java.lang.String property;
        private final java.lang.Boolean yetAnoterOne;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.property = this.jsiiGet("property", java.lang.String.class);
            this.yetAnoterOne = this.jsiiGet("yetAnoterOne", java.lang.Boolean.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String property, final java.lang.Boolean yetAnoterOne) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.property = java.util.Objects.requireNonNull(property, "property is required");
            this.yetAnoterOne = java.util.Objects.requireNonNull(yetAnoterOne, "yetAnoterOne is required");
        }

        @Override
        public java.lang.String getProperty() {
            return this.property;
        }

        @Override
        public java.lang.Boolean getYetAnoterOne() {
            return this.yetAnoterOne;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("property", om.valueToTree(this.getProperty()));
            data.set("yetAnoterOne", om.valueToTree(this.getYetAnoterOne()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.SmellyStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            SmellyStruct.Jsii$Proxy that = (SmellyStruct.Jsii$Proxy) o;

            if (!property.equals(that.property)) return false;
            return this.yetAnoterOne.equals(that.yetAnoterOne);
        }

        @Override
        public int hashCode() {
            int result = this.property.hashCode();
            result = 31 * result + (this.yetAnoterOne.hashCode());
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SomeTypeJsii976.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SomeTypeJsii976")
public class SomeTypeJsii976 extends software.amazon.jsii.JsiiObject {

    protected SomeTypeJsii976(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected SomeTypeJsii976(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public SomeTypeJsii976() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Object returnAnonymous() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.SomeTypeJsii976.class, "returnAnonymous", java.lang.Object.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IReturnJsii976 returnReturn() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.SomeTypeJsii976.class, "returnReturn", software.amazon.jsii.tests.calculator.IReturnJsii976.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StableClass.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StableClass")
public class StableClass extends software.amazon.jsii.JsiiObject {

    protected StableClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected StableClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * @param readonlyString This parameter is required.
     * @param mutableNumber
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    public StableClass(final @org.jetbrains.annotations.NotNull java.lang.String readonlyString, final @org.jetbrains.annotations.Nullable java.lang.Number mutableNumber) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(readonlyString, "readonlyString is required"), mutableNumber });
    }

    /**
     * @param readonlyString This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    public StableClass(final @org.jetbrains.annotations.NotNull java.lang.String readonlyString) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(readonlyString, "readonlyString is required") });
    }

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    public void method() {
        this.jsiiCall("method", software.amazon.jsii.NativeType.VOID);
    }

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    public @org.jetbrains.annotations.NotNull java.lang.String getReadonlyProperty() {
        return this.jsiiGet("readonlyProperty", java.lang.String.class);
    }

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    public @org.jetbrains.annotations.Nullable java.lang.Number getMutableProperty() {
        return this.jsiiGet("mutableProperty", java.lang.Number.class);
    }

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    public void setMutableProperty(final @org.jetbrains.annotations.Nullable java.lang.Number value) {
        this.jsiiSet("mutableProperty", value);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StableEnum.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StableEnum")
public enum StableEnum {
    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    OPTION_A,
    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    OPTION_B,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StableStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StableStruct")
@software.amazon.jsii.Jsii.Proxy(StableStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
public interface StableStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    @org.jetbrains.annotations.NotNull java.lang.String getReadonlyProperty();

    /**
     * @return a {@link Builder} of {@link StableStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link StableStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    public static final class Builder implements software.amazon.jsii.Builder<StableStruct> {
        private java.lang.String readonlyProperty;

        /**
         * Sets the value of {@link StableStruct#getReadonlyProperty}
         * @param readonlyProperty the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        public Builder readonlyProperty(java.lang.String readonlyProperty) {
            this.readonlyProperty = readonlyProperty;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link StableStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        @Override
        public StableStruct build() {
            return new Jsii$Proxy(readonlyProperty);
        }
    }

    /**
     * An implementation for {@link StableStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements StableStruct {
        private final java.lang.String readonlyProperty;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.readonlyProperty = this.jsiiGet("readonlyProperty", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String readonlyProperty) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.readonlyProperty = java.util.Objects.requireNonNull(readonlyProperty, "readonlyProperty is required");
        }

        @Override
        public java.lang.String getReadonlyProperty() {
            return this.readonlyProperty;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("readonlyProperty", om.valueToTree(this.getReadonlyProperty()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.StableStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            StableStruct.Jsii$Proxy that = (StableStruct.Jsii$Proxy) o;

            return this.readonlyProperty.equals(that.readonlyProperty);
        }

        @Override
        public int hashCode() {
            int result = this.readonlyProperty.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StaticContext.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * This is used to validate the ability to use \`this\` from within a static context.
 * <p>
 * https://github.com/awslabs/aws-cdk/issues/2304
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StaticContext")
public class StaticContext extends software.amazon.jsii.JsiiObject {

    protected StaticContext(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected StaticContext(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Boolean canAccessStaticContext() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.StaticContext.class, "canAccessStaticContext", java.lang.Boolean.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Boolean getStaticVariable() {
        return software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.StaticContext.class, "staticVariable", java.lang.Boolean.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static void setStaticVariable(final @org.jetbrains.annotations.NotNull java.lang.Boolean value) {
        software.amazon.jsii.JsiiObject.jsiiStaticSet(software.amazon.jsii.tests.calculator.StaticContext.class, "staticVariable", java.util.Objects.requireNonNull(value, "staticVariable is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Statics.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Statics")
public class Statics extends software.amazon.jsii.JsiiObject {

    protected Statics(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Statics(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    static {
        BAR = software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.Statics.class, "BAR", java.lang.Number.class);
        CONST_OBJ = software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.Statics.class, "ConstObj", software.amazon.jsii.tests.calculator.DoubleTrouble.class);
        FOO = software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.Statics.class, "Foo", java.lang.String.class);
        ZOO_BAR = java.util.Collections.unmodifiableMap(software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.Statics.class, "zooBar", software.amazon.jsii.NativeType.mapOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Statics(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }

    /**
     * Jsdocs for static method.
     * <p>
     * EXPERIMENTAL
     * <p>
     * @param name The name of the person to say hello to. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.String staticMethod(final @org.jetbrains.annotations.NotNull java.lang.String name) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.Statics.class, "staticMethod", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(name, "name is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String justMethod() {
        return this.jsiiCall("justMethod", java.lang.String.class);
    }

    /**
     * Constants may also use all-caps.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public final static java.lang.Number BAR;

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public final static software.amazon.jsii.tests.calculator.DoubleTrouble CONST_OBJ;

    /**
     * Jsdocs for static property.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public final static java.lang.String FOO;

    /**
     * Constants can also use camelCase.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public final static java.util.Map<java.lang.String, java.lang.String> ZOO_BAR;

    /**
     * Jsdocs for static getter.
     * <p>
     * Jsdocs for static setter.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.Statics getInstance() {
        return software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.Statics.class, "instance", software.amazon.jsii.tests.calculator.Statics.class);
    }

    /**
     * Jsdocs for static getter.
     * <p>
     * Jsdocs for static setter.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static void setInstance(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.Statics value) {
        software.amazon.jsii.JsiiObject.jsiiStaticSet(software.amazon.jsii.tests.calculator.Statics.class, "instance", java.util.Objects.requireNonNull(value, "instance is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Number getNonConstStatic() {
        return software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.Statics.class, "nonConstStatic", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static void setNonConstStatic(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        software.amazon.jsii.JsiiObject.jsiiStaticSet(software.amazon.jsii.tests.calculator.Statics.class, "nonConstStatic", java.util.Objects.requireNonNull(value, "nonConstStatic is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getValue() {
        return this.jsiiGet("value", java.lang.String.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StringEnum.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StringEnum")
public enum StringEnum {
    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    A,
    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    B,
    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    C,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StripInternal.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StripInternal")
public class StripInternal extends software.amazon.jsii.JsiiObject {

    protected StripInternal(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected StripInternal(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public StripInternal() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getYouSeeMe() {
        return this.jsiiGet("youSeeMe", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setYouSeeMe(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("youSeeMe", java.util.Objects.requireNonNull(value, "youSeeMe is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StructA.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * We can serialize and deserialize structs without silently ignoring optional fields.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StructA")
@software.amazon.jsii.Jsii.Proxy(StructA.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface StructA extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getRequiredString();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Number getOptionalNumber() {
        return null;
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getOptionalString() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link StructA}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link StructA}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<StructA> {
        private java.lang.String requiredString;
        private java.lang.Number optionalNumber;
        private java.lang.String optionalString;

        /**
         * Sets the value of {@link StructA#getRequiredString}
         * @param requiredString the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder requiredString(java.lang.String requiredString) {
            this.requiredString = requiredString;
            return this;
        }

        /**
         * Sets the value of {@link StructA#getOptionalNumber}
         * @param optionalNumber the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder optionalNumber(java.lang.Number optionalNumber) {
            this.optionalNumber = optionalNumber;
            return this;
        }

        /**
         * Sets the value of {@link StructA#getOptionalString}
         * @param optionalString the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder optionalString(java.lang.String optionalString) {
            this.optionalString = optionalString;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link StructA}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public StructA build() {
            return new Jsii$Proxy(requiredString, optionalNumber, optionalString);
        }
    }

    /**
     * An implementation for {@link StructA}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements StructA {
        private final java.lang.String requiredString;
        private final java.lang.Number optionalNumber;
        private final java.lang.String optionalString;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.requiredString = this.jsiiGet("requiredString", java.lang.String.class);
            this.optionalNumber = this.jsiiGet("optionalNumber", java.lang.Number.class);
            this.optionalString = this.jsiiGet("optionalString", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String requiredString, final java.lang.Number optionalNumber, final java.lang.String optionalString) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.requiredString = java.util.Objects.requireNonNull(requiredString, "requiredString is required");
            this.optionalNumber = optionalNumber;
            this.optionalString = optionalString;
        }

        @Override
        public java.lang.String getRequiredString() {
            return this.requiredString;
        }

        @Override
        public java.lang.Number getOptionalNumber() {
            return this.optionalNumber;
        }

        @Override
        public java.lang.String getOptionalString() {
            return this.optionalString;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("requiredString", om.valueToTree(this.getRequiredString()));
            if (this.getOptionalNumber() != null) {
                data.set("optionalNumber", om.valueToTree(this.getOptionalNumber()));
            }
            if (this.getOptionalString() != null) {
                data.set("optionalString", om.valueToTree(this.getOptionalString()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.StructA"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            StructA.Jsii$Proxy that = (StructA.Jsii$Proxy) o;

            if (!requiredString.equals(that.requiredString)) return false;
            if (this.optionalNumber != null ? !this.optionalNumber.equals(that.optionalNumber) : that.optionalNumber != null) return false;
            return this.optionalString != null ? this.optionalString.equals(that.optionalString) : that.optionalString == null;
        }

        @Override
        public int hashCode() {
            int result = this.requiredString.hashCode();
            result = 31 * result + (this.optionalNumber != null ? this.optionalNumber.hashCode() : 0);
            result = 31 * result + (this.optionalString != null ? this.optionalString.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StructB.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StructB")
@software.amazon.jsii.Jsii.Proxy(StructB.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface StructB extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getRequiredString();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Boolean getOptionalBoolean() {
        return null;
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.StructA getOptionalStructA() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link StructB}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link StructB}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<StructB> {
        private java.lang.String requiredString;
        private java.lang.Boolean optionalBoolean;
        private software.amazon.jsii.tests.calculator.StructA optionalStructA;

        /**
         * Sets the value of {@link StructB#getRequiredString}
         * @param requiredString the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder requiredString(java.lang.String requiredString) {
            this.requiredString = requiredString;
            return this;
        }

        /**
         * Sets the value of {@link StructB#getOptionalBoolean}
         * @param optionalBoolean the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder optionalBoolean(java.lang.Boolean optionalBoolean) {
            this.optionalBoolean = optionalBoolean;
            return this;
        }

        /**
         * Sets the value of {@link StructB#getOptionalStructA}
         * @param optionalStructA the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder optionalStructA(software.amazon.jsii.tests.calculator.StructA optionalStructA) {
            this.optionalStructA = optionalStructA;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link StructB}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public StructB build() {
            return new Jsii$Proxy(requiredString, optionalBoolean, optionalStructA);
        }
    }

    /**
     * An implementation for {@link StructB}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements StructB {
        private final java.lang.String requiredString;
        private final java.lang.Boolean optionalBoolean;
        private final software.amazon.jsii.tests.calculator.StructA optionalStructA;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.requiredString = this.jsiiGet("requiredString", java.lang.String.class);
            this.optionalBoolean = this.jsiiGet("optionalBoolean", java.lang.Boolean.class);
            this.optionalStructA = this.jsiiGet("optionalStructA", software.amazon.jsii.tests.calculator.StructA.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String requiredString, final java.lang.Boolean optionalBoolean, final software.amazon.jsii.tests.calculator.StructA optionalStructA) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.requiredString = java.util.Objects.requireNonNull(requiredString, "requiredString is required");
            this.optionalBoolean = optionalBoolean;
            this.optionalStructA = optionalStructA;
        }

        @Override
        public java.lang.String getRequiredString() {
            return this.requiredString;
        }

        @Override
        public java.lang.Boolean getOptionalBoolean() {
            return this.optionalBoolean;
        }

        @Override
        public software.amazon.jsii.tests.calculator.StructA getOptionalStructA() {
            return this.optionalStructA;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("requiredString", om.valueToTree(this.getRequiredString()));
            if (this.getOptionalBoolean() != null) {
                data.set("optionalBoolean", om.valueToTree(this.getOptionalBoolean()));
            }
            if (this.getOptionalStructA() != null) {
                data.set("optionalStructA", om.valueToTree(this.getOptionalStructA()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.StructB"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            StructB.Jsii$Proxy that = (StructB.Jsii$Proxy) o;

            if (!requiredString.equals(that.requiredString)) return false;
            if (this.optionalBoolean != null ? !this.optionalBoolean.equals(that.optionalBoolean) : that.optionalBoolean != null) return false;
            return this.optionalStructA != null ? this.optionalStructA.equals(that.optionalStructA) : that.optionalStructA == null;
        }

        @Override
        public int hashCode() {
            int result = this.requiredString.hashCode();
            result = 31 * result + (this.optionalBoolean != null ? this.optionalBoolean.hashCode() : 0);
            result = 31 * result + (this.optionalStructA != null ? this.optionalStructA.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StructParameterType.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.
 * <p>
 * See: https://github.com/aws/aws-cdk/issues/4302
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StructParameterType")
@software.amazon.jsii.Jsii.Proxy(StructParameterType.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface StructParameterType extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getScope();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Boolean getProps() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link StructParameterType}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link StructParameterType}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<StructParameterType> {
        private java.lang.String scope;
        private java.lang.Boolean props;

        /**
         * Sets the value of {@link StructParameterType#getScope}
         * @param scope the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder scope(java.lang.String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * Sets the value of {@link StructParameterType#getProps}
         * @param props the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder props(java.lang.Boolean props) {
            this.props = props;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link StructParameterType}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public StructParameterType build() {
            return new Jsii$Proxy(scope, props);
        }
    }

    /**
     * An implementation for {@link StructParameterType}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements StructParameterType {
        private final java.lang.String scope;
        private final java.lang.Boolean props;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.scope = this.jsiiGet("scope", java.lang.String.class);
            this.props = this.jsiiGet("props", java.lang.Boolean.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String scope, final java.lang.Boolean props) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.scope = java.util.Objects.requireNonNull(scope, "scope is required");
            this.props = props;
        }

        @Override
        public java.lang.String getScope() {
            return this.scope;
        }

        @Override
        public java.lang.Boolean getProps() {
            return this.props;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("scope", om.valueToTree(this.getScope()));
            if (this.getProps() != null) {
                data.set("props", om.valueToTree(this.getProps()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.StructParameterType"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            StructParameterType.Jsii$Proxy that = (StructParameterType.Jsii$Proxy) o;

            if (!scope.equals(that.scope)) return false;
            return this.props != null ? this.props.equals(that.props) : that.props == null;
        }

        @Override
        public int hashCode() {
            int result = this.scope.hashCode();
            result = 31 * result + (this.props != null ? this.props.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StructPassing.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Just because we can.
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StructPassing")
public class StructPassing extends software.amazon.jsii.JsiiObject {

    protected StructPassing(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected StructPassing(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public StructPassing() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * @param _positional This parameter is required.
     * @param inputs This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    public static @org.jetbrains.annotations.NotNull java.lang.Number howManyVarArgsDidIPass(final @org.jetbrains.annotations.NotNull java.lang.Number _positional, final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.TopLevelStruct... inputs) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.StructPassing.class, "howManyVarArgsDidIPass", java.lang.Number.class, java.util.stream.Stream.concat(java.util.Arrays.<Object>stream(new Object[] { java.util.Objects.requireNonNull(_positional, "_positional is required") }), java.util.Arrays.<Object>stream(inputs)).toArray(Object[]::new));
    }

    /**
     * @param _positional This parameter is required.
     * @param input This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    public static @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.TopLevelStruct roundTrip(final @org.jetbrains.annotations.NotNull java.lang.Number _positional, final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.TopLevelStruct input) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.StructPassing.class, "roundTrip", software.amazon.jsii.tests.calculator.TopLevelStruct.class, new Object[] { java.util.Objects.requireNonNull(_positional, "_positional is required"), java.util.Objects.requireNonNull(input, "input is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StructUnionConsumer.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StructUnionConsumer")
public class StructUnionConsumer extends software.amazon.jsii.JsiiObject {

    protected StructUnionConsumer(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected StructUnionConsumer(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param struct This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Boolean isStructA(final @org.jetbrains.annotations.NotNull java.lang.Object struct) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.StructUnionConsumer.class, "isStructA", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(struct, "struct is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param struct This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Boolean isStructB(final @org.jetbrains.annotations.NotNull java.lang.Object struct) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.StructUnionConsumer.class, "isStructB", java.lang.Boolean.class, new Object[] { java.util.Objects.requireNonNull(struct, "struct is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/StructWithJavaReservedWords.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.StructWithJavaReservedWords")
@software.amazon.jsii.Jsii.Proxy(StructWithJavaReservedWords.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface StructWithJavaReservedWords extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getDefaultValue();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getAssertValue() {
        return null;
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getResult() {
        return null;
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getThat() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link StructWithJavaReservedWords}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link StructWithJavaReservedWords}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<StructWithJavaReservedWords> {
        private java.lang.String defaultValue;
        private java.lang.String assertValue;
        private java.lang.String result;
        private java.lang.String that;

        /**
         * Sets the value of {@link StructWithJavaReservedWords#getDefaultValue}
         * @param defaultValue the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder defaultValue(java.lang.String defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }

        /**
         * Sets the value of {@link StructWithJavaReservedWords#getAssertValue}
         * @param assertValue the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder assertValue(java.lang.String assertValue) {
            this.assertValue = assertValue;
            return this;
        }

        /**
         * Sets the value of {@link StructWithJavaReservedWords#getResult}
         * @param result the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder result(java.lang.String result) {
            this.result = result;
            return this;
        }

        /**
         * Sets the value of {@link StructWithJavaReservedWords#getThat}
         * @param that the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder that(java.lang.String that) {
            this.that = that;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link StructWithJavaReservedWords}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public StructWithJavaReservedWords build() {
            return new Jsii$Proxy(defaultValue, assertValue, result, that);
        }
    }

    /**
     * An implementation for {@link StructWithJavaReservedWords}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements StructWithJavaReservedWords {
        private final java.lang.String defaultValue;
        private final java.lang.String assertValue;
        private final java.lang.String result;
        private final java.lang.String that;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.defaultValue = this.jsiiGet("default", java.lang.String.class);
            this.assertValue = this.jsiiGet("assert", java.lang.String.class);
            this.result = this.jsiiGet("result", java.lang.String.class);
            this.that = this.jsiiGet("that", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String defaultValue, final java.lang.String assertValue, final java.lang.String result, final java.lang.String that) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.defaultValue = java.util.Objects.requireNonNull(defaultValue, "defaultValue is required");
            this.assertValue = assertValue;
            this.result = result;
            this.that = that;
        }

        @Override
        public java.lang.String getDefaultValue() {
            return this.defaultValue;
        }

        @Override
        public java.lang.String getAssertValue() {
            return this.assertValue;
        }

        @Override
        public java.lang.String getResult() {
            return this.result;
        }

        @Override
        public java.lang.String getThat() {
            return this.that;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("default", om.valueToTree(this.getDefaultValue()));
            if (this.getAssertValue() != null) {
                data.set("assert", om.valueToTree(this.getAssertValue()));
            }
            if (this.getResult() != null) {
                data.set("result", om.valueToTree(this.getResult()));
            }
            if (this.getThat() != null) {
                data.set("that", om.valueToTree(this.getThat()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.StructWithJavaReservedWords"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            StructWithJavaReservedWords.Jsii$Proxy that = (StructWithJavaReservedWords.Jsii$Proxy) o;

            if (!defaultValue.equals(that.defaultValue)) return false;
            if (this.assertValue != null ? !this.assertValue.equals(that.assertValue) : that.assertValue != null) return false;
            if (this.result != null ? !this.result.equals(that.result) : that.result != null) return false;
            return this.that != null ? this.that.equals(that.that) : that.that == null;
        }

        @Override
        public int hashCode() {
            int result = this.defaultValue.hashCode();
            result = 31 * result + (this.assertValue != null ? this.assertValue.hashCode() : 0);
            result = 31 * result + (this.result != null ? this.result.hashCode() : 0);
            result = 31 * result + (this.that != null ? this.that.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Sum.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * An operation that sums multiple values.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Sum")
public class Sum extends software.amazon.jsii.tests.calculator.composition.CompositeOperation {

    protected Sum(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Sum(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Sum() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * The expression that this operation consists of.
     * <p>
     * Must be implemented by derived classes.
     * <p>
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value getExpression() {
        return this.jsiiGet("expression", software.amazon.jsii.tests.calculator.lib.Value.class);
    }

    /**
     * The parts to sum.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.lib.Value> getParts() {
        return java.util.Collections.unmodifiableList(this.jsiiGet("parts", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.lib.Value.class))));
    }

    /**
     * The parts to sum.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setParts(final @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.lib.Value> value) {
        this.jsiiSet("parts", java.util.Objects.requireNonNull(value, "parts is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SupportsNiceJavaBuilder.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SupportsNiceJavaBuilder")
public class SupportsNiceJavaBuilder extends software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderWithRequiredProps {

    protected SupportsNiceJavaBuilder(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected SupportsNiceJavaBuilder(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param id some identifier. This parameter is required.
     * @param defaultBar the default value of \`bar\`.
     * @param props some props once can provide.
     * @param rest a variadic continuation. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public SupportsNiceJavaBuilder(final @org.jetbrains.annotations.NotNull java.lang.Number id, final @org.jetbrains.annotations.Nullable java.lang.Number defaultBar, final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderProps props, final @org.jetbrains.annotations.NotNull java.lang.String... rest) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, java.util.stream.Stream.concat(java.util.Arrays.<Object>stream(new Object[] { java.util.Objects.requireNonNull(id, "id is required"), defaultBar, props }), java.util.Arrays.<Object>stream(rest)).toArray(Object[]::new));
    }

    /**
     * some identifier.
     * <p>
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getId() {
        return this.jsiiGet("id", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> getRest() {
        return java.util.Collections.unmodifiableList(this.jsiiGet("rest", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
    }

    /**
     * A fluent builder for {@link software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilder}.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilder> {
        /**
         * EXPERIMENTAL
         * <p>
         * @return a new instance of {@link Builder}.
         * @param id some identifier. This parameter is required.
         * @param defaultBar the default value of \`bar\`.
         * @param rest a variadic continuation. This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public static Builder create(final java.lang.Number id, final java.lang.Number defaultBar, final java.lang.String... rest) {
            return new Builder(id, defaultBar, rest);
        }
        /**
         * EXPERIMENTAL
         * <p>
         * @return a new instance of {@link Builder}.
         * @param id some identifier. This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public static Builder create(final java.lang.Number id) {
            return new Builder(id, null, null);
        }

        private final java.lang.Number id;
        private final java.lang.Number defaultBar;
        private final java.lang.String[] rest;
        private software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderProps.Builder props;

        private Builder(final java.lang.Number id, final java.lang.Number defaultBar, final java.lang.String... rest) {
            this.id = id;
            this.defaultBar = defaultBar;
            this.rest = rest;
        }

        /**
         * Some number, like 42.
         * <p>
         * EXPERIMENTAL
         * <p>
         * @return {@code this}
         * @param bar Some number, like 42. This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder bar(final java.lang.Number bar) {
            this.props().bar(bar);
            return this;
        }

        /**
         * An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
         * <p>
         * But here we are, doing it like we didn't care.
         * <p>
         * EXPERIMENTAL
         * <p>
         * @return {@code this}
         * @param id An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`. This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder id(final java.lang.String id) {
            this.props().id(id);
            return this;
        }

        /**
         * @returns a newly built instance of {@link software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilder}.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilder build() {
            return new software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilder(
                this.id,
                this.defaultBar,
                this.props != null ? this.props.build() : null,
                this.rest
            );
        }

        private software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderProps.Builder props() {
            if (this.props == null) {
                this.props = new software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderProps.Builder();
            }
            return this.props;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SupportsNiceJavaBuilderProps.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SupportsNiceJavaBuilderProps")
@software.amazon.jsii.Jsii.Proxy(SupportsNiceJavaBuilderProps.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface SupportsNiceJavaBuilderProps extends software.amazon.jsii.JsiiSerializable {

    /**
     * Some number, like 42.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Number getBar();

    /**
     * An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
     * <p>
     * But here we are, doing it like we didn't care.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getId() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link SupportsNiceJavaBuilderProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link SupportsNiceJavaBuilderProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<SupportsNiceJavaBuilderProps> {
        private java.lang.Number bar;
        private java.lang.String id;

        /**
         * Sets the value of {@link SupportsNiceJavaBuilderProps#getBar}
         * @param bar Some number, like 42. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder bar(java.lang.Number bar) {
            this.bar = bar;
            return this;
        }

        /**
         * Sets the value of {@link SupportsNiceJavaBuilderProps#getId}
         * @param id An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
         *           But here we are, doing it like we didn't care.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder id(java.lang.String id) {
            this.id = id;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link SupportsNiceJavaBuilderProps}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public SupportsNiceJavaBuilderProps build() {
            return new Jsii$Proxy(bar, id);
        }
    }

    /**
     * An implementation for {@link SupportsNiceJavaBuilderProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements SupportsNiceJavaBuilderProps {
        private final java.lang.Number bar;
        private final java.lang.String id;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.bar = this.jsiiGet("bar", java.lang.Number.class);
            this.id = this.jsiiGet("id", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Number bar, final java.lang.String id) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.bar = java.util.Objects.requireNonNull(bar, "bar is required");
            this.id = id;
        }

        @Override
        public java.lang.Number getBar() {
            return this.bar;
        }

        @Override
        public java.lang.String getId() {
            return this.id;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("bar", om.valueToTree(this.getBar()));
            if (this.getId() != null) {
                data.set("id", om.valueToTree(this.getId()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.SupportsNiceJavaBuilderProps"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            SupportsNiceJavaBuilderProps.Jsii$Proxy that = (SupportsNiceJavaBuilderProps.Jsii$Proxy) o;

            if (!bar.equals(that.bar)) return false;
            return this.id != null ? this.id.equals(that.id) : that.id == null;
        }

        @Override
        public int hashCode() {
            int result = this.bar.hashCode();
            result = 31 * result + (this.id != null ? this.id.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SupportsNiceJavaBuilderWithRequiredProps.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * We can generate fancy builders in Java for classes which take a mix of positional & struct parameters.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SupportsNiceJavaBuilderWithRequiredProps")
public class SupportsNiceJavaBuilderWithRequiredProps extends software.amazon.jsii.JsiiObject {

    protected SupportsNiceJavaBuilderWithRequiredProps(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected SupportsNiceJavaBuilderWithRequiredProps(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param id some identifier of your choice. This parameter is required.
     * @param props some properties. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public SupportsNiceJavaBuilderWithRequiredProps(final @org.jetbrains.annotations.NotNull java.lang.Number id, final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderProps props) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(id, "id is required"), java.util.Objects.requireNonNull(props, "props is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getBar() {
        return this.jsiiGet("bar", java.lang.Number.class);
    }

    /**
     * some identifier of your choice.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getId() {
        return this.jsiiGet("id", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable java.lang.String getPropId() {
        return this.jsiiGet("propId", java.lang.String.class);
    }

    /**
     * A fluent builder for {@link software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderWithRequiredProps}.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderWithRequiredProps> {
        /**
         * EXPERIMENTAL
         * <p>
         * @return a new instance of {@link Builder}.
         * @param id some identifier of your choice. This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public static Builder create(final java.lang.Number id) {
            return new Builder(id);
        }

        private final java.lang.Number id;
        private final software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderProps.Builder props;

        private Builder(final java.lang.Number id) {
            this.id = id;
            this.props = new software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderProps.Builder();
        }

        /**
         * Some number, like 42.
         * <p>
         * EXPERIMENTAL
         * <p>
         * @return {@code this}
         * @param bar Some number, like 42. This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder bar(final java.lang.Number bar) {
            this.props.bar(bar);
            return this;
        }

        /**
         * An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
         * <p>
         * But here we are, doing it like we didn't care.
         * <p>
         * EXPERIMENTAL
         * <p>
         * @return {@code this}
         * @param id An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`. This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder id(final java.lang.String id) {
            this.props.id(id);
            return this;
        }

        /**
         * @returns a newly built instance of {@link software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderWithRequiredProps}.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderWithRequiredProps build() {
            return new software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderWithRequiredProps(
                this.id,
                this.props.build()
            );
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/SyncVirtualMethods.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.SyncVirtualMethods")
public class SyncVirtualMethods extends software.amazon.jsii.JsiiObject {

    protected SyncVirtualMethods(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected SyncVirtualMethods(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public SyncVirtualMethods() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number callerIsAsync() {
        return this.jsiiAsyncCall("callerIsAsync", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number callerIsMethod() {
        return this.jsiiCall("callerIsMethod", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void modifyOtherProperty(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiCall("modifyOtherProperty", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void modifyValueOfTheProperty(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiCall("modifyValueOfTheProperty", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number readA() {
        return this.jsiiCall("readA", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String retrieveOtherProperty() {
        return this.jsiiCall("retrieveOtherProperty", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String retrieveReadOnlyProperty() {
        return this.jsiiCall("retrieveReadOnlyProperty", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String retrieveValueOfTheProperty() {
        return this.jsiiCall("retrieveValueOfTheProperty", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param n This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number virtualMethod(final @org.jetbrains.annotations.NotNull java.lang.Number n) {
        return this.jsiiCall("virtualMethod", java.lang.Number.class, new Object[] { java.util.Objects.requireNonNull(n, "n is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void writeA(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        this.jsiiCall("writeA", software.amazon.jsii.NativeType.VOID, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getReadonlyProperty() {
        return this.jsiiGet("readonlyProperty", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getA() {
        return this.jsiiGet("a", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setA(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        this.jsiiSet("a", java.util.Objects.requireNonNull(value, "a is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getCallerIsProperty() {
        return this.jsiiGet("callerIsProperty", java.lang.Number.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setCallerIsProperty(final @org.jetbrains.annotations.NotNull java.lang.Number value) {
        this.jsiiSet("callerIsProperty", java.util.Objects.requireNonNull(value, "callerIsProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getOtherProperty() {
        return this.jsiiGet("otherProperty", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setOtherProperty(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("otherProperty", java.util.Objects.requireNonNull(value, "otherProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getTheProperty() {
        return this.jsiiGet("theProperty", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setTheProperty(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("theProperty", java.util.Objects.requireNonNull(value, "theProperty is required"));
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getValueOfOtherProperty() {
        return this.jsiiGet("valueOfOtherProperty", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setValueOfOtherProperty(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("valueOfOtherProperty", java.util.Objects.requireNonNull(value, "valueOfOtherProperty is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/Thrower.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.Thrower")
public class Thrower extends software.amazon.jsii.JsiiObject {

    protected Thrower(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Thrower(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Thrower() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void throwError() {
        this.jsiiCall("throwError", software.amazon.jsii.NativeType.VOID);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/TopLevelStruct.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.TopLevelStruct")
@software.amazon.jsii.Jsii.Proxy(TopLevelStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface TopLevelStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * This is a required field.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getRequired();

    /**
     * A union to really stress test our serialization.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Object getSecondLevel();

    /**
     * You don't have to pass this.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getOptional() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link TopLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link TopLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<TopLevelStruct> {
        private java.lang.String required;
        private java.lang.Object secondLevel;
        private java.lang.String optional;

        /**
         * Sets the value of {@link TopLevelStruct#getRequired}
         * @param required This is a required field. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder required(java.lang.String required) {
            this.required = required;
            return this;
        }

        /**
         * Sets the value of {@link TopLevelStruct#getSecondLevel}
         * @param secondLevel A union to really stress test our serialization. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder secondLevel(java.lang.Number secondLevel) {
            this.secondLevel = secondLevel;
            return this;
        }

        /**
         * Sets the value of {@link TopLevelStruct#getSecondLevel}
         * @param secondLevel A union to really stress test our serialization. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder secondLevel(software.amazon.jsii.tests.calculator.SecondLevelStruct secondLevel) {
            this.secondLevel = secondLevel;
            return this;
        }

        /**
         * Sets the value of {@link TopLevelStruct#getOptional}
         * @param optional You don't have to pass this.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder optional(java.lang.String optional) {
            this.optional = optional;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link TopLevelStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public TopLevelStruct build() {
            return new Jsii$Proxy(required, secondLevel, optional);
        }
    }

    /**
     * An implementation for {@link TopLevelStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements TopLevelStruct {
        private final java.lang.String required;
        private final java.lang.Object secondLevel;
        private final java.lang.String optional;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.required = this.jsiiGet("required", java.lang.String.class);
            this.secondLevel = this.jsiiGet("secondLevel", java.lang.Object.class);
            this.optional = this.jsiiGet("optional", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String required, final java.lang.Object secondLevel, final java.lang.String optional) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.required = java.util.Objects.requireNonNull(required, "required is required");
            this.secondLevel = java.util.Objects.requireNonNull(secondLevel, "secondLevel is required");
            this.optional = optional;
        }

        @Override
        public java.lang.String getRequired() {
            return this.required;
        }

        @Override
        public java.lang.Object getSecondLevel() {
            return this.secondLevel;
        }

        @Override
        public java.lang.String getOptional() {
            return this.optional;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("required", om.valueToTree(this.getRequired()));
            data.set("secondLevel", om.valueToTree(this.getSecondLevel()));
            if (this.getOptional() != null) {
                data.set("optional", om.valueToTree(this.getOptional()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.TopLevelStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            TopLevelStruct.Jsii$Proxy that = (TopLevelStruct.Jsii$Proxy) o;

            if (!required.equals(that.required)) return false;
            if (!secondLevel.equals(that.secondLevel)) return false;
            return this.optional != null ? this.optional.equals(that.optional) : that.optional == null;
        }

        @Override
        public int hashCode() {
            int result = this.required.hashCode();
            result = 31 * result + (this.secondLevel.hashCode());
            result = 31 * result + (this.optional != null ? this.optional.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/UmaskCheck.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Checks the current file permissions are cool (no funky UMASK down-scoping happened).
 * <p>
 * EXPERIMENTAL
 * <p>
 * @see https://github.com/aws/jsii/issues/1765
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.UmaskCheck")
public class UmaskCheck extends software.amazon.jsii.JsiiObject {

    protected UmaskCheck(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected UmaskCheck(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * This should return 0o644 (-rw-r--r--).
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Number mode() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.UmaskCheck.class, "mode", java.lang.Number.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/UnaryOperation.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * An operation on a single operand.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.UnaryOperation")
public abstract class UnaryOperation extends software.amazon.jsii.tests.calculator.lib.Operation {

    protected UnaryOperation(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected UnaryOperation(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param operand This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected UnaryOperation(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value operand) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(operand, "operand is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value getOperand() {
        return this.jsiiGet("operand", software.amazon.jsii.tests.calculator.lib.Value.class);
    }

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.UnaryOperation {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * The value.
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
            return this.jsiiGet("value", java.lang.Number.class);
        }

        /**
         * String representation of the value.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String toString() {
            return this.jsiiCall("toString", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/UnionProperties.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.UnionProperties")
@software.amazon.jsii.Jsii.Proxy(UnionProperties.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface UnionProperties extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Object getBar();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.Object getFoo() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link UnionProperties}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link UnionProperties}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<UnionProperties> {
        private java.lang.Object bar;
        private java.lang.Object foo;

        /**
         * Sets the value of {@link UnionProperties#getBar}
         * @param bar the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder bar(java.lang.String bar) {
            this.bar = bar;
            return this;
        }

        /**
         * Sets the value of {@link UnionProperties#getBar}
         * @param bar the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder bar(java.lang.Number bar) {
            this.bar = bar;
            return this;
        }

        /**
         * Sets the value of {@link UnionProperties#getBar}
         * @param bar the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder bar(software.amazon.jsii.tests.calculator.AllTypes bar) {
            this.bar = bar;
            return this;
        }

        /**
         * Sets the value of {@link UnionProperties#getFoo}
         * @param foo the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder foo(java.lang.String foo) {
            this.foo = foo;
            return this;
        }

        /**
         * Sets the value of {@link UnionProperties#getFoo}
         * @param foo the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder foo(java.lang.Number foo) {
            this.foo = foo;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link UnionProperties}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public UnionProperties build() {
            return new Jsii$Proxy(bar, foo);
        }
    }

    /**
     * An implementation for {@link UnionProperties}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements UnionProperties {
        private final java.lang.Object bar;
        private final java.lang.Object foo;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.bar = this.jsiiGet("bar", java.lang.Object.class);
            this.foo = this.jsiiGet("foo", java.lang.Object.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Object bar, final java.lang.Object foo) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.bar = java.util.Objects.requireNonNull(bar, "bar is required");
            this.foo = foo;
        }

        @Override
        public java.lang.Object getBar() {
            return this.bar;
        }

        @Override
        public java.lang.Object getFoo() {
            return this.foo;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("bar", om.valueToTree(this.getBar()));
            if (this.getFoo() != null) {
                data.set("foo", om.valueToTree(this.getFoo()));
            }

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.UnionProperties"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            UnionProperties.Jsii$Proxy that = (UnionProperties.Jsii$Proxy) o;

            if (!bar.equals(that.bar)) return false;
            return this.foo != null ? this.foo.equals(that.foo) : that.foo == null;
        }

        @Override
        public int hashCode() {
            int result = this.bar.hashCode();
            result = 31 * result + (this.foo != null ? this.foo.hashCode() : 0);
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/UpcasingReflectable.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Ensures submodule-imported types from dependencies can be used correctly.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.UpcasingReflectable")
public class UpcasingReflectable extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.custom_submodule_name.IReflectable {

    protected UpcasingReflectable(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected UpcasingReflectable(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    static {
        REFLECTOR = software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.UpcasingReflectable.class, "reflector", software.amazon.jsii.tests.calculator.custom_submodule_name.Reflector.class);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param delegate This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public UpcasingReflectable(final @org.jetbrains.annotations.NotNull java.util.Map<java.lang.String, java.lang.Object> delegate) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(delegate, "delegate is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public final static software.amazon.jsii.tests.calculator.custom_submodule_name.Reflector REFLECTOR;

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<software.amazon.jsii.tests.calculator.custom_submodule_name.ReflectableEntry> getEntries() {
        return java.util.Collections.unmodifiableList(this.jsiiGet("entries", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(software.amazon.jsii.tests.calculator.custom_submodule_name.ReflectableEntry.class))));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/UseBundledDependency.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.UseBundledDependency")
public class UseBundledDependency extends software.amazon.jsii.JsiiObject {

    protected UseBundledDependency(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected UseBundledDependency(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public UseBundledDependency() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Object value() {
        return this.jsiiCall("value", java.lang.Object.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/UseCalcBase.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Depend on a type from jsii-calc-base as a test for awslabs/jsii#128.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.UseCalcBase")
public class UseCalcBase extends software.amazon.jsii.JsiiObject {

    protected UseCalcBase(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected UseCalcBase(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public UseCalcBase() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.base.Base hello() {
        return this.jsiiCall("hello", software.amazon.jsii.tests.calculator.base.Base.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/UsesInterfaceWithProperties.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.UsesInterfaceWithProperties")
public class UsesInterfaceWithProperties extends software.amazon.jsii.JsiiObject {

    protected UsesInterfaceWithProperties(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected UsesInterfaceWithProperties(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param obj This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public UsesInterfaceWithProperties(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IInterfaceWithProperties obj) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(obj, "obj is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String justRead() {
        return this.jsiiCall("justRead", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param ext This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String readStringAndNumber(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IInterfaceWithPropertiesExtension ext) {
        return this.jsiiCall("readStringAndNumber", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(ext, "ext is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param value This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String writeAndRead(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        return this.jsiiCall("writeAndRead", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(value, "value is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.IInterfaceWithProperties getObj() {
        return this.jsiiGet("obj", software.amazon.jsii.tests.calculator.IInterfaceWithProperties.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/VariadicInvoker.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.VariadicInvoker")
public class VariadicInvoker extends software.amazon.jsii.JsiiObject {

    protected VariadicInvoker(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected VariadicInvoker(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param method This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public VariadicInvoker(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.VariadicMethod method) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(method, "method is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param values This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<java.lang.Number> asArray(final @org.jetbrains.annotations.NotNull java.lang.Number... values) {
        return java.util.Collections.unmodifiableList(this.jsiiCall("asArray", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.Number.class)), java.util.Arrays.<Object>stream(values).toArray(Object[]::new)));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/VariadicMethod.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.VariadicMethod")
public class VariadicMethod extends software.amazon.jsii.JsiiObject {

    protected VariadicMethod(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected VariadicMethod(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param prefix a prefix that will be use for all values returned by \`#asArray\`. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public VariadicMethod(final @org.jetbrains.annotations.NotNull java.lang.Number... prefix) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, java.util.Arrays.<Object>stream(prefix).toArray(Object[]::new));
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param first the first element of the array to be returned (after the \`prefix\` provided at construction time). This parameter is required.
     * @param others other elements to be included in the array. This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<java.lang.Number> asArray(final @org.jetbrains.annotations.NotNull java.lang.Number first, final @org.jetbrains.annotations.NotNull java.lang.Number... others) {
        return java.util.Collections.unmodifiableList(this.jsiiCall("asArray", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.Number.class)), java.util.stream.Stream.concat(java.util.Arrays.<Object>stream(new Object[] { java.util.Objects.requireNonNull(first, "first is required") }), java.util.Arrays.<Object>stream(others)).toArray(Object[]::new)));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/VirtualMethodPlayground.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.VirtualMethodPlayground")
public class VirtualMethodPlayground extends software.amazon.jsii.JsiiObject {

    protected VirtualMethodPlayground(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected VirtualMethodPlayground(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public VirtualMethodPlayground() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param index This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number overrideMeAsync(final @org.jetbrains.annotations.NotNull java.lang.Number index) {
        return this.jsiiAsyncCall("overrideMeAsync", java.lang.Number.class, new Object[] { java.util.Objects.requireNonNull(index, "index is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param index This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number overrideMeSync(final @org.jetbrains.annotations.NotNull java.lang.Number index) {
        return this.jsiiCall("overrideMeSync", java.lang.Number.class, new Object[] { java.util.Objects.requireNonNull(index, "index is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param count This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number parallelSumAsync(final @org.jetbrains.annotations.NotNull java.lang.Number count) {
        return this.jsiiAsyncCall("parallelSumAsync", java.lang.Number.class, new Object[] { java.util.Objects.requireNonNull(count, "count is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param count This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number serialSumAsync(final @org.jetbrains.annotations.NotNull java.lang.Number count) {
        return this.jsiiAsyncCall("serialSumAsync", java.lang.Number.class, new Object[] { java.util.Objects.requireNonNull(count, "count is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param count This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number sumSync(final @org.jetbrains.annotations.NotNull java.lang.Number count) {
        return this.jsiiCall("sumSync", java.lang.Number.class, new Object[] { java.util.Objects.requireNonNull(count, "count is required") });
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/VoidCallback.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * This test is used to validate the runtimes can return correctly from a void callback.
 * <p>
 * <ul>
 * <li>Implement <code>overrideMe</code> (method does not have to do anything).</li>
 * <li>Invoke <code>callMe</code></li>
 * <li>Verify that <code>methodWasCalled</code> is <code>true</code>.</li>
 * </ul>
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.VoidCallback")
public abstract class VoidCallback extends software.amazon.jsii.JsiiObject {

    protected VoidCallback(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected VoidCallback(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected VoidCallback() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void callMe() {
        this.jsiiCall("callMe", software.amazon.jsii.NativeType.VOID);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    protected abstract void overrideMe();

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean getMethodWasCalled() {
        return this.jsiiGet("methodWasCalled", java.lang.Boolean.class);
    }

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.VoidCallback {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        protected void overrideMe() {
            this.jsiiCall("overrideMe", software.amazon.jsii.NativeType.VOID);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/WithPrivatePropertyInConstructor.java 1`] = `
package software.amazon.jsii.tests.calculator;

/**
 * Verifies that private property declarations in constructor arguments are hidden.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.WithPrivatePropertyInConstructor")
public class WithPrivatePropertyInConstructor extends software.amazon.jsii.JsiiObject {

    protected WithPrivatePropertyInConstructor(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected WithPrivatePropertyInConstructor(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param privateField
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public WithPrivatePropertyInConstructor(final @org.jetbrains.annotations.Nullable java.lang.String privateField) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { privateField });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public WithPrivatePropertyInConstructor() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Boolean getSuccess() {
        return this.jsiiGet("success", java.lang.Boolean.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/composition/CompositeOperation.java 1`] = `
package software.amazon.jsii.tests.calculator.composition;

/**
 * Abstract operation composed from an expression of other operations.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.composition.CompositeOperation")
public abstract class CompositeOperation extends software.amazon.jsii.tests.calculator.lib.Operation {

    protected CompositeOperation(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected CompositeOperation(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    protected CompositeOperation() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * String representation of the value.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @Override
    public @org.jetbrains.annotations.NotNull java.lang.String toString() {
        return this.jsiiCall("toString", java.lang.String.class);
    }

    /**
     * The expression that this operation consists of.
     * <p>
     * Must be implemented by derived classes.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public abstract @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value getExpression();

    /**
     * The value.
     * <p>
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
        return this.jsiiGet("value", java.lang.Number.class);
    }

    /**
     * A set of postfixes to include in a decorated .toString().
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> getDecorationPostfixes() {
        return java.util.Collections.unmodifiableList(this.jsiiGet("decorationPostfixes", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
    }

    /**
     * A set of postfixes to include in a decorated .toString().
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setDecorationPostfixes(final @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> value) {
        this.jsiiSet("decorationPostfixes", java.util.Objects.requireNonNull(value, "decorationPostfixes is required"));
    }

    /**
     * A set of prefixes to include in a decorated .toString().
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> getDecorationPrefixes() {
        return java.util.Collections.unmodifiableList(this.jsiiGet("decorationPrefixes", software.amazon.jsii.NativeType.listOf(software.amazon.jsii.NativeType.forClass(java.lang.String.class))));
    }

    /**
     * A set of prefixes to include in a decorated .toString().
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setDecorationPrefixes(final @org.jetbrains.annotations.NotNull java.util.List<java.lang.String> value) {
        this.jsiiSet("decorationPrefixes", java.util.Objects.requireNonNull(value, "decorationPrefixes is required"));
    }

    /**
     * The .toString() style.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.composition.CompositeOperation.CompositionStringStyle getStringStyle() {
        return this.jsiiGet("stringStyle", software.amazon.jsii.tests.calculator.composition.CompositeOperation.CompositionStringStyle.class);
    }

    /**
     * The .toString() style.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setStringStyle(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.composition.CompositeOperation.CompositionStringStyle value) {
        this.jsiiSet("stringStyle", java.util.Objects.requireNonNull(value, "stringStyle is required"));
    }
    /**
     * Style of .toString() output for CompositeOperation.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.composition.CompositeOperation.CompositionStringStyle")
    public enum CompositionStringStyle {
        /**
         * Normal string expression.
         * <p>
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        NORMAL,
        /**
         * Decorated string expression.
         * <p>
         * EXPERIMENTAL
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        DECORATED,
    }

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.composition.CompositeOperation {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * The expression that this operation consists of.
         * <p>
         * Must be implemented by derived classes.
         * <p>
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.lib.Value getExpression() {
            return this.jsiiGet("expression", software.amazon.jsii.tests.calculator.lib.Value.class);
        }

        /**
         * The value.
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        public @org.jetbrains.annotations.NotNull java.lang.Number getValue() {
            return this.jsiiGet("value", java.lang.Number.class);
        }

        /**
         * String representation of the value.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        @Deprecated
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String toString() {
            return this.jsiiCall("toString", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/derived_class_has_no_properties/Base.java 1`] = `
package software.amazon.jsii.tests.calculator.derived_class_has_no_properties;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DerivedClassHasNoProperties.Base")
public class Base extends software.amazon.jsii.JsiiObject {

    protected Base(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Base(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Base() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getProp() {
        return this.jsiiGet("prop", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setProp(final @org.jetbrains.annotations.NotNull java.lang.String value) {
        this.jsiiSet("prop", java.util.Objects.requireNonNull(value, "prop is required"));
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/derived_class_has_no_properties/Derived.java 1`] = `
package software.amazon.jsii.tests.calculator.derived_class_has_no_properties;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.DerivedClassHasNoProperties.Derived")
public class Derived extends software.amazon.jsii.tests.calculator.derived_class_has_no_properties.Base {

    protected Derived(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Derived(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Derived() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/interface_in_namespace_includes_classes/Foo.java 1`] = `
package software.amazon.jsii.tests.calculator.interface_in_namespace_includes_classes;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.InterfaceInNamespaceIncludesClasses.Foo")
public class Foo extends software.amazon.jsii.JsiiObject {

    protected Foo(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Foo(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public Foo() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable java.lang.String getBar() {
        return this.jsiiGet("bar", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setBar(final @org.jetbrains.annotations.Nullable java.lang.String value) {
        this.jsiiSet("bar", value);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/interface_in_namespace_includes_classes/Hello.java 1`] = `
package software.amazon.jsii.tests.calculator.interface_in_namespace_includes_classes;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.InterfaceInNamespaceIncludesClasses.Hello")
@software.amazon.jsii.Jsii.Proxy(Hello.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface Hello extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Number getFoo();

    /**
     * @return a {@link Builder} of {@link Hello}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link Hello}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<Hello> {
        private java.lang.Number foo;

        /**
         * Sets the value of {@link Hello#getFoo}
         * @param foo the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder foo(java.lang.Number foo) {
            this.foo = foo;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link Hello}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public Hello build() {
            return new Jsii$Proxy(foo);
        }
    }

    /**
     * An implementation for {@link Hello}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements Hello {
        private final java.lang.Number foo;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.foo = this.jsiiGet("foo", java.lang.Number.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Number foo) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.foo = java.util.Objects.requireNonNull(foo, "foo is required");
        }

        @Override
        public java.lang.Number getFoo() {
            return this.foo;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("foo", om.valueToTree(this.getFoo()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.InterfaceInNamespaceIncludesClasses.Hello"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Hello.Jsii$Proxy that = (Hello.Jsii$Proxy) o;

            return this.foo.equals(that.foo);
        }

        @Override
        public int hashCode() {
            int result = this.foo.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/interface_in_namespace_only_interface/Hello.java 1`] = `
package software.amazon.jsii.tests.calculator.interface_in_namespace_only_interface;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.InterfaceInNamespaceOnlyInterface.Hello")
@software.amazon.jsii.Jsii.Proxy(Hello.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface Hello extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Number getFoo();

    /**
     * @return a {@link Builder} of {@link Hello}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link Hello}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<Hello> {
        private java.lang.Number foo;

        /**
         * Sets the value of {@link Hello#getFoo}
         * @param foo the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder foo(java.lang.Number foo) {
            this.foo = foo;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link Hello}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public Hello build() {
            return new Jsii$Proxy(foo);
        }
    }

    /**
     * An implementation for {@link Hello}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements Hello {
        private final java.lang.Number foo;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.foo = this.jsiiGet("foo", java.lang.Number.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Number foo) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.foo = java.util.Objects.requireNonNull(foo, "foo is required");
        }

        @Override
        public java.lang.Number getFoo() {
            return this.foo;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("foo", om.valueToTree(this.getFoo()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.InterfaceInNamespaceOnlyInterface.Hello"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Hello.Jsii$Proxy that = (Hello.Jsii$Proxy) o;

            return this.foo.equals(that.foo);
        }

        @Override
        public int hashCode() {
            int result = this.foo.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/package-info.java 1`] = `
/**
 * <h1>jsii Calculator</h1>
 * <p>
 * This library is used to demonstrate and test the features of JSII
 * <p>
 * <h2>How to use running sum API:</h2>
 * <p>
 * First, create a calculator:
 * <p>
 * <blockquote><pre>
 * // Example automatically generated. See https://github.com/aws/jsii/issues/826
 * Calculator calculator = new Calculator();
 * </pre></blockquote>
 * <p>
 * Then call some operations:
 * <p>
 * <blockquote><pre>
 * // Example automatically generated. See https://github.com/aws/jsii/issues/826
 * calculator.add(10);
 * </pre></blockquote>
 * <p>
 * <h2>Code Samples</h2>
 * <p>
 * <blockquote><pre>
 * // Example automatically generated. See https://github.com/aws/jsii/issues/826
 * /* This is totes a magic comment in here, just you wait! *{@literal /}
 * String foo = "bar";
 * </pre></blockquote>
 */
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
package software.amazon.jsii.tests.calculator;

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/python_self/ClassWithSelf.java 1`] = `
package software.amazon.jsii.tests.calculator.python_self;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.PythonSelf.ClassWithSelf")
public class ClassWithSelf extends software.amazon.jsii.JsiiObject {

    protected ClassWithSelf(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ClassWithSelf(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param self This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ClassWithSelf(final @org.jetbrains.annotations.NotNull java.lang.String self) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(self, "self is required") });
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param self This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String method(final @org.jetbrains.annotations.NotNull java.lang.Number self) {
        return this.jsiiCall("method", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(self, "self is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getSelf() {
        return this.jsiiGet("self", java.lang.String.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/python_self/ClassWithSelfKwarg.java 1`] = `
package software.amazon.jsii.tests.calculator.python_self;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.PythonSelf.ClassWithSelfKwarg")
public class ClassWithSelfKwarg extends software.amazon.jsii.JsiiObject {

    protected ClassWithSelfKwarg(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected ClassWithSelfKwarg(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param props This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public ClassWithSelfKwarg(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.python_self.StructWithSelf props) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(props, "props is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.python_self.StructWithSelf getProps() {
        return this.jsiiGet("props", software.amazon.jsii.tests.calculator.python_self.StructWithSelf.class);
    }

    /**
     * A fluent builder for {@link software.amazon.jsii.tests.calculator.python_self.ClassWithSelfKwarg}.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<software.amazon.jsii.tests.calculator.python_self.ClassWithSelfKwarg> {
        /**
         * EXPERIMENTAL
         * <p>
         * @return a new instance of {@link Builder}.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public static Builder create() {
            return new Builder();
        }

        private final software.amazon.jsii.tests.calculator.python_self.StructWithSelf.Builder props;

        private Builder() {
            this.props = new software.amazon.jsii.tests.calculator.python_self.StructWithSelf.Builder();
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @return {@code this}
         * @param self This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder self(final java.lang.String self) {
            this.props.self(self);
            return this;
        }

        /**
         * @returns a newly built instance of {@link software.amazon.jsii.tests.calculator.python_self.ClassWithSelfKwarg}.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public software.amazon.jsii.tests.calculator.python_self.ClassWithSelfKwarg build() {
            return new software.amazon.jsii.tests.calculator.python_self.ClassWithSelfKwarg(
                this.props.build()
            );
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/python_self/IInterfaceWithSelf.java 1`] = `
package software.amazon.jsii.tests.calculator.python_self;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.PythonSelf.IInterfaceWithSelf")
@software.amazon.jsii.Jsii.Proxy(IInterfaceWithSelf.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface IInterfaceWithSelf extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     * <p>
     * @param self This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String method(final @org.jetbrains.annotations.NotNull java.lang.Number self);

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.python_self.IInterfaceWithSelf {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @param self This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public @org.jetbrains.annotations.NotNull java.lang.String method(final @org.jetbrains.annotations.NotNull java.lang.Number self) {
            return this.jsiiCall("method", java.lang.String.class, new Object[] { java.util.Objects.requireNonNull(self, "self is required") });
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/python_self/StructWithSelf.java 1`] = `
package software.amazon.jsii.tests.calculator.python_self;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.PythonSelf.StructWithSelf")
@software.amazon.jsii.Jsii.Proxy(StructWithSelf.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface StructWithSelf extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getSelf();

    /**
     * @return a {@link Builder} of {@link StructWithSelf}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link StructWithSelf}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<StructWithSelf> {
        private java.lang.String self;

        /**
         * Sets the value of {@link StructWithSelf#getSelf}
         * @param self the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder self(java.lang.String self) {
            this.self = self;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link StructWithSelf}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public StructWithSelf build() {
            return new Jsii$Proxy(self);
        }
    }

    /**
     * An implementation for {@link StructWithSelf}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements StructWithSelf {
        private final java.lang.String self;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.self = this.jsiiGet("self", java.lang.String.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String self) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.self = java.util.Objects.requireNonNull(self, "self is required");
        }

        @Override
        public java.lang.String getSelf() {
            return this.self;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("self", om.valueToTree(this.getSelf()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.PythonSelf.StructWithSelf"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            StructWithSelf.Jsii$Proxy that = (StructWithSelf.Jsii$Proxy) o;

            return this.self.equals(that.self);
        }

        @Override
        public int hashCode() {
            int result = this.self.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/MyClass.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.MyClass")
public class MyClass extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.submodule.nested_submodule.deeply_nested.INamespaced {

    protected MyClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected MyClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param props This parameter is required.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public MyClass(final @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.submodule.child.SomeStruct props) {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, new Object[] { java.util.Objects.requireNonNull(props, "props is required") });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.submodule.child.Awesomeness getAwesomeness() {
        return this.jsiiGet("awesomeness", software.amazon.jsii.tests.calculator.submodule.child.Awesomeness.class);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getDefinedAt() {
        return this.jsiiGet("definedAt", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.submodule.child.Goodness getGoodness() {
        return this.jsiiGet("goodness", software.amazon.jsii.tests.calculator.submodule.child.Goodness.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.submodule.child.SomeStruct getProps() {
        return this.jsiiGet("props", software.amazon.jsii.tests.calculator.submodule.child.SomeStruct.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.AllTypes getAllTypes() {
        return this.jsiiGet("allTypes", software.amazon.jsii.tests.calculator.AllTypes.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public void setAllTypes(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.AllTypes value) {
        this.jsiiSet("allTypes", value);
    }

    /**
     * A fluent builder for {@link software.amazon.jsii.tests.calculator.submodule.MyClass}.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<software.amazon.jsii.tests.calculator.submodule.MyClass> {
        /**
         * EXPERIMENTAL
         * <p>
         * @return a new instance of {@link Builder}.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public static Builder create() {
            return new Builder();
        }

        private final software.amazon.jsii.tests.calculator.submodule.child.SomeStruct.Builder props;

        private Builder() {
            this.props = new software.amazon.jsii.tests.calculator.submodule.child.SomeStruct.Builder();
        }

        /**
         * EXPERIMENTAL
         * <p>
         * @return {@code this}
         * @param prop This parameter is required.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder prop(final software.amazon.jsii.tests.calculator.submodule.child.SomeEnum prop) {
            this.props.prop(prop);
            return this;
        }

        /**
         * @returns a newly built instance of {@link software.amazon.jsii.tests.calculator.submodule.MyClass}.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public software.amazon.jsii.tests.calculator.submodule.MyClass build() {
            return new software.amazon.jsii.tests.calculator.submodule.MyClass(
                this.props.build()
            );
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/back_references/MyClassReference.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.back_references;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.back_references.MyClassReference")
@software.amazon.jsii.Jsii.Proxy(MyClassReference.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface MyClassReference extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.submodule.MyClass getReference();

    /**
     * @return a {@link Builder} of {@link MyClassReference}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link MyClassReference}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<MyClassReference> {
        private software.amazon.jsii.tests.calculator.submodule.MyClass reference;

        /**
         * Sets the value of {@link MyClassReference#getReference}
         * @param reference the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder reference(software.amazon.jsii.tests.calculator.submodule.MyClass reference) {
            this.reference = reference;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link MyClassReference}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public MyClassReference build() {
            return new Jsii$Proxy(reference);
        }
    }

    /**
     * An implementation for {@link MyClassReference}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements MyClassReference {
        private final software.amazon.jsii.tests.calculator.submodule.MyClass reference;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.reference = this.jsiiGet("reference", software.amazon.jsii.tests.calculator.submodule.MyClass.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final software.amazon.jsii.tests.calculator.submodule.MyClass reference) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.reference = java.util.Objects.requireNonNull(reference, "reference is required");
        }

        @Override
        public software.amazon.jsii.tests.calculator.submodule.MyClass getReference() {
            return this.reference;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("reference", om.valueToTree(this.getReference()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.submodule.back_references.MyClassReference"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            MyClassReference.Jsii$Proxy that = (MyClassReference.Jsii$Proxy) o;

            return this.reference.equals(that.reference);
        }

        @Override
        public int hashCode() {
            int result = this.reference.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/child/Awesomeness.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.child;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.child.Awesomeness")
public enum Awesomeness {
    /**
     * It was awesome!
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    AWESOME,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/child/Goodness.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.child;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.child.Goodness")
public enum Goodness {
    /**
     * It's pretty good.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    PRETTY_GOOD,
    /**
     * It's really good.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    REALLY_GOOD,
    /**
     * It's amazingly good.
     * <p>
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    AMAZINGLY_GOOD,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/child/InnerClass.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.child;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.child.InnerClass")
public class InnerClass extends software.amazon.jsii.JsiiObject {

    protected InnerClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected InnerClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    static {
        STATIC_PROP = software.amazon.jsii.JsiiObject.jsiiStaticGet(software.amazon.jsii.tests.calculator.submodule.child.InnerClass.class, "staticProp", software.amazon.jsii.tests.calculator.submodule.child.SomeStruct.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public InnerClass() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public final static software.amazon.jsii.tests.calculator.submodule.child.SomeStruct STATIC_PROP;
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/child/KwargsProps.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.child;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.child.KwargsProps")
@software.amazon.jsii.Jsii.Proxy(KwargsProps.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface KwargsProps extends software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.calculator.submodule.child.SomeStruct {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    default @org.jetbrains.annotations.Nullable java.lang.String getExtra() {
        return null;
    }

    /**
     * @return a {@link Builder} of {@link KwargsProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link KwargsProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<KwargsProps> {
        private java.lang.String extra;
        private software.amazon.jsii.tests.calculator.submodule.child.SomeEnum prop;

        /**
         * Sets the value of {@link KwargsProps#getExtra}
         * @param extra the value to be set.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder extra(java.lang.String extra) {
            this.extra = extra;
            return this;
        }

        /**
         * Sets the value of {@link KwargsProps#getProp}
         * @param prop the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder prop(software.amazon.jsii.tests.calculator.submodule.child.SomeEnum prop) {
            this.prop = prop;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link KwargsProps}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public KwargsProps build() {
            return new Jsii$Proxy(extra, prop);
        }
    }

    /**
     * An implementation for {@link KwargsProps}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements KwargsProps {
        private final java.lang.String extra;
        private final software.amazon.jsii.tests.calculator.submodule.child.SomeEnum prop;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.extra = this.jsiiGet("extra", java.lang.String.class);
            this.prop = this.jsiiGet("prop", software.amazon.jsii.tests.calculator.submodule.child.SomeEnum.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.String extra, final software.amazon.jsii.tests.calculator.submodule.child.SomeEnum prop) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.extra = extra;
            this.prop = java.util.Objects.requireNonNull(prop, "prop is required");
        }

        @Override
        public java.lang.String getExtra() {
            return this.extra;
        }

        @Override
        public software.amazon.jsii.tests.calculator.submodule.child.SomeEnum getProp() {
            return this.prop;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            if (this.getExtra() != null) {
                data.set("extra", om.valueToTree(this.getExtra()));
            }
            data.set("prop", om.valueToTree(this.getProp()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.submodule.child.KwargsProps"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            KwargsProps.Jsii$Proxy that = (KwargsProps.Jsii$Proxy) o;

            if (this.extra != null ? !this.extra.equals(that.extra) : that.extra != null) return false;
            return this.prop.equals(that.prop);
        }

        @Override
        public int hashCode() {
            int result = this.extra != null ? this.extra.hashCode() : 0;
            result = 31 * result + (this.prop.hashCode());
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/child/OuterClass.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.child;

/**
 * Checks that classes can self-reference during initialization.
 * <p>
 * EXPERIMENTAL
 * <p>
 * @see : https://github.com/aws/jsii/pull/1706
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.child.OuterClass")
public class OuterClass extends software.amazon.jsii.JsiiObject {

    protected OuterClass(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected OuterClass(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public OuterClass() {
        super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.submodule.child.InnerClass getInnerClass() {
        return this.jsiiGet("innerClass", software.amazon.jsii.tests.calculator.submodule.child.InnerClass.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/child/SomeEnum.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.child;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.child.SomeEnum")
public enum SomeEnum {
    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    SOME,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/child/SomeStruct.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.child;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.child.SomeStruct")
@software.amazon.jsii.Jsii.Proxy(SomeStruct.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface SomeStruct extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.submodule.child.SomeEnum getProp();

    /**
     * @return a {@link Builder} of {@link SomeStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link SomeStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<SomeStruct> {
        private software.amazon.jsii.tests.calculator.submodule.child.SomeEnum prop;

        /**
         * Sets the value of {@link SomeStruct#getProp}
         * @param prop the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder prop(software.amazon.jsii.tests.calculator.submodule.child.SomeEnum prop) {
            this.prop = prop;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link SomeStruct}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public SomeStruct build() {
            return new Jsii$Proxy(prop);
        }
    }

    /**
     * An implementation for {@link SomeStruct}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements SomeStruct {
        private final software.amazon.jsii.tests.calculator.submodule.child.SomeEnum prop;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.prop = this.jsiiGet("prop", software.amazon.jsii.tests.calculator.submodule.child.SomeEnum.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final software.amazon.jsii.tests.calculator.submodule.child.SomeEnum prop) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.prop = java.util.Objects.requireNonNull(prop, "prop is required");
        }

        @Override
        public software.amazon.jsii.tests.calculator.submodule.child.SomeEnum getProp() {
            return this.prop;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("prop", om.valueToTree(this.getProp()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.submodule.child.SomeStruct"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            SomeStruct.Jsii$Proxy that = (SomeStruct.Jsii$Proxy) o;

            return this.prop.equals(that.prop);
        }

        @Override
        public int hashCode() {
            int result = this.prop.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/child/Structure.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.child;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.child.Structure")
@software.amazon.jsii.Jsii.Proxy(Structure.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface Structure extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.Boolean getBool();

    /**
     * @return a {@link Builder} of {@link Structure}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    static Builder builder() {
        return new Builder();
    }
    /**
     * A builder for {@link Structure}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static final class Builder implements software.amazon.jsii.Builder<Structure> {
        private java.lang.Boolean bool;

        /**
         * Sets the value of {@link Structure#getBool}
         * @param bool the value to be set. This parameter is required.
         * @return {@code this}
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public Builder bool(java.lang.Boolean bool) {
            this.bool = bool;
            return this;
        }

        /**
         * Builds the configured instance.
         * @return a new instance of {@link Structure}
         * @throws NullPointerException if any required attribute was not provided
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        @Override
        public Structure build() {
            return new Jsii$Proxy(bool);
        }
    }

    /**
     * An implementation for {@link Structure}
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    final class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements Structure {
        private final java.lang.Boolean bool;

        /**
         * Constructor that initializes the object based on values retrieved from the JsiiObject.
         * @param objRef Reference to the JSII managed object.
         */
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
            this.bool = this.jsiiGet("bool", java.lang.Boolean.class);
        }

        /**
         * Constructor that initializes the object based on literal property values passed by the {@link Builder}.
         */
        private Jsii$Proxy(final java.lang.Boolean bool) {
            super(software.amazon.jsii.JsiiObject.InitializationMode.JSII);
            this.bool = java.util.Objects.requireNonNull(bool, "bool is required");
        }

        @Override
        public java.lang.Boolean getBool() {
            return this.bool;
        }

        @Override
        public com.fasterxml.jackson.databind.JsonNode $jsii$toJson() {
            final com.fasterxml.jackson.databind.ObjectMapper om = software.amazon.jsii.JsiiObjectMapper.INSTANCE;
            final com.fasterxml.jackson.databind.node.ObjectNode data = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();

            data.set("bool", om.valueToTree(this.getBool()));

            final com.fasterxml.jackson.databind.node.ObjectNode struct = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            struct.set("fqn", om.valueToTree("jsii-calc.submodule.child.Structure"));
            struct.set("data", data);

            final com.fasterxml.jackson.databind.node.ObjectNode obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode();
            obj.set("$jsii.struct", struct);

            return obj;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Structure.Jsii$Proxy that = (Structure.Jsii$Proxy) o;

            return this.bool.equals(that.bool);
        }

        @Override
        public int hashCode() {
            int result = this.bool.hashCode();
            return result;
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/isolated/Kwargs.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.isolated;

/**
 * Ensures imports are correctly registered for kwargs lifted properties from super-structs.
 * <p>
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.isolated.Kwargs")
public class Kwargs extends software.amazon.jsii.JsiiObject {

    protected Kwargs(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Kwargs(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     * <p>
     * @param props
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Boolean method(final @org.jetbrains.annotations.Nullable software.amazon.jsii.tests.calculator.submodule.child.KwargsProps props) {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.submodule.isolated.Kwargs.class, "method", java.lang.Boolean.class, new Object[] { props });
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public static @org.jetbrains.annotations.NotNull java.lang.Boolean method() {
        return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.calculator.submodule.isolated.Kwargs.class, "method", java.lang.Boolean.class);
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/nested_submodule/Namespaced.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.nested_submodule;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.nested_submodule.Namespaced")
public abstract class Namespaced extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.submodule.nested_submodule.deeply_nested.INamespaced {

    protected Namespaced(final software.amazon.jsii.JsiiObjectRef objRef) {
        super(objRef);
    }

    protected Namespaced(final software.amazon.jsii.JsiiObject.InitializationMode initializationMode) {
        super(initializationMode);
    }

    /**
     * EXPERIMENTAL
     */
    @Override
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public @org.jetbrains.annotations.NotNull java.lang.String getDefinedAt() {
        return this.jsiiGet("definedAt", java.lang.String.class);
    }

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    public abstract @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.submodule.child.Goodness getGoodness();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.tests.calculator.submodule.nested_submodule.Namespaced {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull software.amazon.jsii.tests.calculator.submodule.child.Goodness getGoodness() {
            return this.jsiiGet("goodness", software.amazon.jsii.tests.calculator.submodule.child.Goodness.class);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getDefinedAt() {
            return this.jsiiGet("definedAt", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/java/software/amazon/jsii/tests/calculator/submodule/nested_submodule/deeply_nested/INamespaced.java 1`] = `
package software.amazon.jsii.tests.calculator.submodule.nested_submodule.deeply_nested;

/**
 * EXPERIMENTAL
 */
@javax.annotation.Generated(value = "jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.calculator.$Module.class, fqn = "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced")
@software.amazon.jsii.Jsii.Proxy(INamespaced.Jsii$Proxy.class)
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
public interface INamespaced extends software.amazon.jsii.JsiiSerializable {

    /**
     * EXPERIMENTAL
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    @org.jetbrains.annotations.NotNull java.lang.String getDefinedAt();

    /**
     * A proxy class which represents a concrete javascript instance of this type.
     */
    final static class Jsii$Proxy extends software.amazon.jsii.JsiiObject implements software.amazon.jsii.tests.calculator.submodule.nested_submodule.deeply_nested.INamespaced {
        protected Jsii$Proxy(final software.amazon.jsii.JsiiObjectRef objRef) {
            super(objRef);
        }

        /**
         * EXPERIMENTAL
         */
        @Override
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        public @org.jetbrains.annotations.NotNull java.lang.String getDefinedAt() {
            return this.jsiiGet("definedAt", java.lang.String.class);
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/resources/software/amazon/jsii/tests/calculator/$Module.txt 1`] = `
jsii-calc.AbstractClass=software.amazon.jsii.tests.calculator.AbstractClass
jsii-calc.AbstractClassBase=software.amazon.jsii.tests.calculator.AbstractClassBase
jsii-calc.AbstractClassReturner=software.amazon.jsii.tests.calculator.AbstractClassReturner
jsii-calc.AbstractSuite=software.amazon.jsii.tests.calculator.AbstractSuite
jsii-calc.Add=software.amazon.jsii.tests.calculator.Add
jsii-calc.AllTypes=software.amazon.jsii.tests.calculator.AllTypes
jsii-calc.AllTypesEnum=software.amazon.jsii.tests.calculator.AllTypesEnum
jsii-calc.AllowedMethodNames=software.amazon.jsii.tests.calculator.AllowedMethodNames
jsii-calc.AmbiguousParameters=software.amazon.jsii.tests.calculator.AmbiguousParameters
jsii-calc.AnonymousImplementationProvider=software.amazon.jsii.tests.calculator.AnonymousImplementationProvider
jsii-calc.AsyncVirtualMethods=software.amazon.jsii.tests.calculator.AsyncVirtualMethods
jsii-calc.AugmentableClass=software.amazon.jsii.tests.calculator.AugmentableClass
jsii-calc.BaseJsii976=software.amazon.jsii.tests.calculator.BaseJsii976
jsii-calc.Bell=software.amazon.jsii.tests.calculator.Bell
jsii-calc.BinaryOperation=software.amazon.jsii.tests.calculator.BinaryOperation
jsii-calc.BurriedAnonymousObject=software.amazon.jsii.tests.calculator.BurriedAnonymousObject
jsii-calc.Calculator=software.amazon.jsii.tests.calculator.Calculator
jsii-calc.CalculatorProps=software.amazon.jsii.tests.calculator.CalculatorProps
jsii-calc.ChildStruct982=software.amazon.jsii.tests.calculator.ChildStruct982
jsii-calc.ClassThatImplementsTheInternalInterface=software.amazon.jsii.tests.calculator.ClassThatImplementsTheInternalInterface
jsii-calc.ClassThatImplementsThePrivateInterface=software.amazon.jsii.tests.calculator.ClassThatImplementsThePrivateInterface
jsii-calc.ClassWithCollections=software.amazon.jsii.tests.calculator.ClassWithCollections
jsii-calc.ClassWithDocs=software.amazon.jsii.tests.calculator.ClassWithDocs
jsii-calc.ClassWithJavaReservedWords=software.amazon.jsii.tests.calculator.ClassWithJavaReservedWords
jsii-calc.ClassWithMutableObjectLiteralProperty=software.amazon.jsii.tests.calculator.ClassWithMutableObjectLiteralProperty
jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties=software.amazon.jsii.tests.calculator.ClassWithPrivateConstructorAndAutomaticProperties
jsii-calc.ConfusingToJackson=software.amazon.jsii.tests.calculator.ConfusingToJackson
jsii-calc.ConfusingToJacksonStruct=software.amazon.jsii.tests.calculator.ConfusingToJacksonStruct
jsii-calc.ConstructorPassesThisOut=software.amazon.jsii.tests.calculator.ConstructorPassesThisOut
jsii-calc.Constructors=software.amazon.jsii.tests.calculator.Constructors
jsii-calc.ConsumePureInterface=software.amazon.jsii.tests.calculator.ConsumePureInterface
jsii-calc.ConsumerCanRingBell=software.amazon.jsii.tests.calculator.ConsumerCanRingBell
jsii-calc.ConsumersOfThisCrazyTypeSystem=software.amazon.jsii.tests.calculator.ConsumersOfThisCrazyTypeSystem
jsii-calc.DataRenderer=software.amazon.jsii.tests.calculator.DataRenderer
jsii-calc.DefaultedConstructorArgument=software.amazon.jsii.tests.calculator.DefaultedConstructorArgument
jsii-calc.Demonstrate982=software.amazon.jsii.tests.calculator.Demonstrate982
jsii-calc.DeprecatedClass=software.amazon.jsii.tests.calculator.DeprecatedClass
jsii-calc.DeprecatedEnum=software.amazon.jsii.tests.calculator.DeprecatedEnum
jsii-calc.DeprecatedStruct=software.amazon.jsii.tests.calculator.DeprecatedStruct
jsii-calc.DerivedClassHasNoProperties.Base=software.amazon.jsii.tests.calculator.derived_class_has_no_properties.Base
jsii-calc.DerivedClassHasNoProperties.Derived=software.amazon.jsii.tests.calculator.derived_class_has_no_properties.Derived
jsii-calc.DerivedStruct=software.amazon.jsii.tests.calculator.DerivedStruct
jsii-calc.DiamondInheritanceBaseLevelStruct=software.amazon.jsii.tests.calculator.DiamondInheritanceBaseLevelStruct
jsii-calc.DiamondInheritanceFirstMidLevelStruct=software.amazon.jsii.tests.calculator.DiamondInheritanceFirstMidLevelStruct
jsii-calc.DiamondInheritanceSecondMidLevelStruct=software.amazon.jsii.tests.calculator.DiamondInheritanceSecondMidLevelStruct
jsii-calc.DiamondInheritanceTopLevelStruct=software.amazon.jsii.tests.calculator.DiamondInheritanceTopLevelStruct
jsii-calc.DisappointingCollectionSource=software.amazon.jsii.tests.calculator.DisappointingCollectionSource
jsii-calc.DoNotOverridePrivates=software.amazon.jsii.tests.calculator.DoNotOverridePrivates
jsii-calc.DoNotRecognizeAnyAsOptional=software.amazon.jsii.tests.calculator.DoNotRecognizeAnyAsOptional
jsii-calc.DocumentedClass=software.amazon.jsii.tests.calculator.DocumentedClass
jsii-calc.DontComplainAboutVariadicAfterOptional=software.amazon.jsii.tests.calculator.DontComplainAboutVariadicAfterOptional
jsii-calc.DoubleTrouble=software.amazon.jsii.tests.calculator.DoubleTrouble
jsii-calc.EnumDispenser=software.amazon.jsii.tests.calculator.EnumDispenser
jsii-calc.EraseUndefinedHashValues=software.amazon.jsii.tests.calculator.EraseUndefinedHashValues
jsii-calc.EraseUndefinedHashValuesOptions=software.amazon.jsii.tests.calculator.EraseUndefinedHashValuesOptions
jsii-calc.ExperimentalClass=software.amazon.jsii.tests.calculator.ExperimentalClass
jsii-calc.ExperimentalEnum=software.amazon.jsii.tests.calculator.ExperimentalEnum
jsii-calc.ExperimentalStruct=software.amazon.jsii.tests.calculator.ExperimentalStruct
jsii-calc.ExportedBaseClass=software.amazon.jsii.tests.calculator.ExportedBaseClass
jsii-calc.ExtendsInternalInterface=software.amazon.jsii.tests.calculator.ExtendsInternalInterface
jsii-calc.ExternalClass=software.amazon.jsii.tests.calculator.ExternalClass
jsii-calc.ExternalEnum=software.amazon.jsii.tests.calculator.ExternalEnum
jsii-calc.ExternalStruct=software.amazon.jsii.tests.calculator.ExternalStruct
jsii-calc.GiveMeStructs=software.amazon.jsii.tests.calculator.GiveMeStructs
jsii-calc.Greetee=software.amazon.jsii.tests.calculator.Greetee
jsii-calc.GreetingAugmenter=software.amazon.jsii.tests.calculator.GreetingAugmenter
jsii-calc.IAnonymousImplementationProvider=software.amazon.jsii.tests.calculator.IAnonymousImplementationProvider
jsii-calc.IAnonymouslyImplementMe=software.amazon.jsii.tests.calculator.IAnonymouslyImplementMe
jsii-calc.IAnotherPublicInterface=software.amazon.jsii.tests.calculator.IAnotherPublicInterface
jsii-calc.IBell=software.amazon.jsii.tests.calculator.IBell
jsii-calc.IBellRinger=software.amazon.jsii.tests.calculator.IBellRinger
jsii-calc.IConcreteBellRinger=software.amazon.jsii.tests.calculator.IConcreteBellRinger
jsii-calc.IDeprecatedInterface=software.amazon.jsii.tests.calculator.IDeprecatedInterface
jsii-calc.IExperimentalInterface=software.amazon.jsii.tests.calculator.IExperimentalInterface
jsii-calc.IExtendsPrivateInterface=software.amazon.jsii.tests.calculator.IExtendsPrivateInterface
jsii-calc.IExternalInterface=software.amazon.jsii.tests.calculator.IExternalInterface
jsii-calc.IFriendlier=software.amazon.jsii.tests.calculator.IFriendlier
jsii-calc.IFriendlyRandomGenerator=software.amazon.jsii.tests.calculator.IFriendlyRandomGenerator
jsii-calc.IInterfaceImplementedByAbstractClass=software.amazon.jsii.tests.calculator.IInterfaceImplementedByAbstractClass
jsii-calc.IInterfaceThatShouldNotBeADataType=software.amazon.jsii.tests.calculator.IInterfaceThatShouldNotBeADataType
jsii-calc.IInterfaceWithInternal=software.amazon.jsii.tests.calculator.IInterfaceWithInternal
jsii-calc.IInterfaceWithMethods=software.amazon.jsii.tests.calculator.IInterfaceWithMethods
jsii-calc.IInterfaceWithOptionalMethodArguments=software.amazon.jsii.tests.calculator.IInterfaceWithOptionalMethodArguments
jsii-calc.IInterfaceWithProperties=software.amazon.jsii.tests.calculator.IInterfaceWithProperties
jsii-calc.IInterfaceWithPropertiesExtension=software.amazon.jsii.tests.calculator.IInterfaceWithPropertiesExtension
jsii-calc.IJSII417Derived=software.amazon.jsii.tests.calculator.IJSII417Derived
jsii-calc.IJSII417PublicBaseOfBase=software.amazon.jsii.tests.calculator.IJSII417PublicBaseOfBase
jsii-calc.IJsii487External=software.amazon.jsii.tests.calculator.IJsii487External
jsii-calc.IJsii487External2=software.amazon.jsii.tests.calculator.IJsii487External2
jsii-calc.IJsii496=software.amazon.jsii.tests.calculator.IJsii496
jsii-calc.IMutableObjectLiteral=software.amazon.jsii.tests.calculator.IMutableObjectLiteral
jsii-calc.INonInternalInterface=software.amazon.jsii.tests.calculator.INonInternalInterface
jsii-calc.IObjectWithProperty=software.amazon.jsii.tests.calculator.IObjectWithProperty
jsii-calc.IOptionalMethod=software.amazon.jsii.tests.calculator.IOptionalMethod
jsii-calc.IPrivatelyImplemented=software.amazon.jsii.tests.calculator.IPrivatelyImplemented
jsii-calc.IPublicInterface=software.amazon.jsii.tests.calculator.IPublicInterface
jsii-calc.IPublicInterface2=software.amazon.jsii.tests.calculator.IPublicInterface2
jsii-calc.IRandomNumberGenerator=software.amazon.jsii.tests.calculator.IRandomNumberGenerator
jsii-calc.IReturnJsii976=software.amazon.jsii.tests.calculator.IReturnJsii976
jsii-calc.IReturnsNumber=software.amazon.jsii.tests.calculator.IReturnsNumber
jsii-calc.IStableInterface=software.amazon.jsii.tests.calculator.IStableInterface
jsii-calc.IStructReturningDelegate=software.amazon.jsii.tests.calculator.IStructReturningDelegate
jsii-calc.ImplementInternalInterface=software.amazon.jsii.tests.calculator.ImplementInternalInterface
jsii-calc.Implementation=software.amazon.jsii.tests.calculator.Implementation
jsii-calc.ImplementsInterfaceWithInternal=software.amazon.jsii.tests.calculator.ImplementsInterfaceWithInternal
jsii-calc.ImplementsInterfaceWithInternalSubclass=software.amazon.jsii.tests.calculator.ImplementsInterfaceWithInternalSubclass
jsii-calc.ImplementsPrivateInterface=software.amazon.jsii.tests.calculator.ImplementsPrivateInterface
jsii-calc.ImplictBaseOfBase=software.amazon.jsii.tests.calculator.ImplictBaseOfBase
jsii-calc.InbetweenClass=software.amazon.jsii.tests.calculator.InbetweenClass
jsii-calc.InterfaceCollections=software.amazon.jsii.tests.calculator.InterfaceCollections
jsii-calc.InterfaceInNamespaceIncludesClasses.Foo=software.amazon.jsii.tests.calculator.interface_in_namespace_includes_classes.Foo
jsii-calc.InterfaceInNamespaceIncludesClasses.Hello=software.amazon.jsii.tests.calculator.interface_in_namespace_includes_classes.Hello
jsii-calc.InterfaceInNamespaceOnlyInterface.Hello=software.amazon.jsii.tests.calculator.interface_in_namespace_only_interface.Hello
jsii-calc.InterfacesMaker=software.amazon.jsii.tests.calculator.InterfacesMaker
jsii-calc.Isomorphism=software.amazon.jsii.tests.calculator.Isomorphism
jsii-calc.JSII417Derived=software.amazon.jsii.tests.calculator.JSII417Derived
jsii-calc.JSII417PublicBaseOfBase=software.amazon.jsii.tests.calculator.JSII417PublicBaseOfBase
jsii-calc.JSObjectLiteralForInterface=software.amazon.jsii.tests.calculator.JSObjectLiteralForInterface
jsii-calc.JSObjectLiteralToNative=software.amazon.jsii.tests.calculator.JSObjectLiteralToNative
jsii-calc.JSObjectLiteralToNativeClass=software.amazon.jsii.tests.calculator.JSObjectLiteralToNativeClass
jsii-calc.JavaReservedWords=software.amazon.jsii.tests.calculator.JavaReservedWords
jsii-calc.Jsii487Derived=software.amazon.jsii.tests.calculator.Jsii487Derived
jsii-calc.Jsii496Derived=software.amazon.jsii.tests.calculator.Jsii496Derived
jsii-calc.JsiiAgent=software.amazon.jsii.tests.calculator.JsiiAgent
jsii-calc.JsonFormatter=software.amazon.jsii.tests.calculator.JsonFormatter
jsii-calc.LoadBalancedFargateServiceProps=software.amazon.jsii.tests.calculator.LoadBalancedFargateServiceProps
jsii-calc.MethodNamedProperty=software.amazon.jsii.tests.calculator.MethodNamedProperty
jsii-calc.Multiply=software.amazon.jsii.tests.calculator.Multiply
jsii-calc.Negate=software.amazon.jsii.tests.calculator.Negate
jsii-calc.NestedClassInstance=software.amazon.jsii.tests.calculator.NestedClassInstance
jsii-calc.NestedStruct=software.amazon.jsii.tests.calculator.NestedStruct
jsii-calc.NodeStandardLibrary=software.amazon.jsii.tests.calculator.NodeStandardLibrary
jsii-calc.NullShouldBeTreatedAsUndefined=software.amazon.jsii.tests.calculator.NullShouldBeTreatedAsUndefined
jsii-calc.NullShouldBeTreatedAsUndefinedData=software.amazon.jsii.tests.calculator.NullShouldBeTreatedAsUndefinedData
jsii-calc.NumberGenerator=software.amazon.jsii.tests.calculator.NumberGenerator
jsii-calc.ObjectRefsInCollections=software.amazon.jsii.tests.calculator.ObjectRefsInCollections
jsii-calc.ObjectWithPropertyProvider=software.amazon.jsii.tests.calculator.ObjectWithPropertyProvider
jsii-calc.Old=software.amazon.jsii.tests.calculator.Old
jsii-calc.OptionalArgumentInvoker=software.amazon.jsii.tests.calculator.OptionalArgumentInvoker
jsii-calc.OptionalConstructorArgument=software.amazon.jsii.tests.calculator.OptionalConstructorArgument
jsii-calc.OptionalStruct=software.amazon.jsii.tests.calculator.OptionalStruct
jsii-calc.OptionalStructConsumer=software.amazon.jsii.tests.calculator.OptionalStructConsumer
jsii-calc.OverridableProtectedMember=software.amazon.jsii.tests.calculator.OverridableProtectedMember
jsii-calc.OverrideReturnsObject=software.amazon.jsii.tests.calculator.OverrideReturnsObject
jsii-calc.ParentStruct982=software.amazon.jsii.tests.calculator.ParentStruct982
jsii-calc.PartiallyInitializedThisConsumer=software.amazon.jsii.tests.calculator.PartiallyInitializedThisConsumer
jsii-calc.Polymorphism=software.amazon.jsii.tests.calculator.Polymorphism
jsii-calc.Power=software.amazon.jsii.tests.calculator.Power
jsii-calc.PropertyNamedProperty=software.amazon.jsii.tests.calculator.PropertyNamedProperty
jsii-calc.PublicClass=software.amazon.jsii.tests.calculator.PublicClass
jsii-calc.PythonReservedWords=software.amazon.jsii.tests.calculator.PythonReservedWords
jsii-calc.PythonSelf.ClassWithSelf=software.amazon.jsii.tests.calculator.python_self.ClassWithSelf
jsii-calc.PythonSelf.ClassWithSelfKwarg=software.amazon.jsii.tests.calculator.python_self.ClassWithSelfKwarg
jsii-calc.PythonSelf.IInterfaceWithSelf=software.amazon.jsii.tests.calculator.python_self.IInterfaceWithSelf
jsii-calc.PythonSelf.StructWithSelf=software.amazon.jsii.tests.calculator.python_self.StructWithSelf
jsii-calc.ReferenceEnumFromScopedPackage=software.amazon.jsii.tests.calculator.ReferenceEnumFromScopedPackage
jsii-calc.ReturnsPrivateImplementationOfInterface=software.amazon.jsii.tests.calculator.ReturnsPrivateImplementationOfInterface
jsii-calc.RootStruct=software.amazon.jsii.tests.calculator.RootStruct
jsii-calc.RootStructValidator=software.amazon.jsii.tests.calculator.RootStructValidator
jsii-calc.RuntimeTypeChecking=software.amazon.jsii.tests.calculator.RuntimeTypeChecking
jsii-calc.SecondLevelStruct=software.amazon.jsii.tests.calculator.SecondLevelStruct
jsii-calc.SingleInstanceTwoTypes=software.amazon.jsii.tests.calculator.SingleInstanceTwoTypes
jsii-calc.SingletonInt=software.amazon.jsii.tests.calculator.SingletonInt
jsii-calc.SingletonIntEnum=software.amazon.jsii.tests.calculator.SingletonIntEnum
jsii-calc.SingletonString=software.amazon.jsii.tests.calculator.SingletonString
jsii-calc.SingletonStringEnum=software.amazon.jsii.tests.calculator.SingletonStringEnum
jsii-calc.SmellyStruct=software.amazon.jsii.tests.calculator.SmellyStruct
jsii-calc.SomeTypeJsii976=software.amazon.jsii.tests.calculator.SomeTypeJsii976
jsii-calc.StableClass=software.amazon.jsii.tests.calculator.StableClass
jsii-calc.StableEnum=software.amazon.jsii.tests.calculator.StableEnum
jsii-calc.StableStruct=software.amazon.jsii.tests.calculator.StableStruct
jsii-calc.StaticContext=software.amazon.jsii.tests.calculator.StaticContext
jsii-calc.Statics=software.amazon.jsii.tests.calculator.Statics
jsii-calc.StringEnum=software.amazon.jsii.tests.calculator.StringEnum
jsii-calc.StripInternal=software.amazon.jsii.tests.calculator.StripInternal
jsii-calc.StructA=software.amazon.jsii.tests.calculator.StructA
jsii-calc.StructB=software.amazon.jsii.tests.calculator.StructB
jsii-calc.StructParameterType=software.amazon.jsii.tests.calculator.StructParameterType
jsii-calc.StructPassing=software.amazon.jsii.tests.calculator.StructPassing
jsii-calc.StructUnionConsumer=software.amazon.jsii.tests.calculator.StructUnionConsumer
jsii-calc.StructWithJavaReservedWords=software.amazon.jsii.tests.calculator.StructWithJavaReservedWords
jsii-calc.Sum=software.amazon.jsii.tests.calculator.Sum
jsii-calc.SupportsNiceJavaBuilder=software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilder
jsii-calc.SupportsNiceJavaBuilderProps=software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderProps
jsii-calc.SupportsNiceJavaBuilderWithRequiredProps=software.amazon.jsii.tests.calculator.SupportsNiceJavaBuilderWithRequiredProps
jsii-calc.SyncVirtualMethods=software.amazon.jsii.tests.calculator.SyncVirtualMethods
jsii-calc.Thrower=software.amazon.jsii.tests.calculator.Thrower
jsii-calc.TopLevelStruct=software.amazon.jsii.tests.calculator.TopLevelStruct
jsii-calc.UmaskCheck=software.amazon.jsii.tests.calculator.UmaskCheck
jsii-calc.UnaryOperation=software.amazon.jsii.tests.calculator.UnaryOperation
jsii-calc.UnionProperties=software.amazon.jsii.tests.calculator.UnionProperties
jsii-calc.UpcasingReflectable=software.amazon.jsii.tests.calculator.UpcasingReflectable
jsii-calc.UseBundledDependency=software.amazon.jsii.tests.calculator.UseBundledDependency
jsii-calc.UseCalcBase=software.amazon.jsii.tests.calculator.UseCalcBase
jsii-calc.UsesInterfaceWithProperties=software.amazon.jsii.tests.calculator.UsesInterfaceWithProperties
jsii-calc.VariadicInvoker=software.amazon.jsii.tests.calculator.VariadicInvoker
jsii-calc.VariadicMethod=software.amazon.jsii.tests.calculator.VariadicMethod
jsii-calc.VirtualMethodPlayground=software.amazon.jsii.tests.calculator.VirtualMethodPlayground
jsii-calc.VoidCallback=software.amazon.jsii.tests.calculator.VoidCallback
jsii-calc.WithPrivatePropertyInConstructor=software.amazon.jsii.tests.calculator.WithPrivatePropertyInConstructor
jsii-calc.composition.CompositeOperation=software.amazon.jsii.tests.calculator.composition.CompositeOperation
jsii-calc.composition.CompositeOperation.CompositionStringStyle=software.amazon.jsii.tests.calculator.composition.CompositeOperation$CompositionStringStyle
jsii-calc.submodule.MyClass=software.amazon.jsii.tests.calculator.submodule.MyClass
jsii-calc.submodule.back_references.MyClassReference=software.amazon.jsii.tests.calculator.submodule.back_references.MyClassReference
jsii-calc.submodule.child.Awesomeness=software.amazon.jsii.tests.calculator.submodule.child.Awesomeness
jsii-calc.submodule.child.Goodness=software.amazon.jsii.tests.calculator.submodule.child.Goodness
jsii-calc.submodule.child.InnerClass=software.amazon.jsii.tests.calculator.submodule.child.InnerClass
jsii-calc.submodule.child.KwargsProps=software.amazon.jsii.tests.calculator.submodule.child.KwargsProps
jsii-calc.submodule.child.OuterClass=software.amazon.jsii.tests.calculator.submodule.child.OuterClass
jsii-calc.submodule.child.SomeEnum=software.amazon.jsii.tests.calculator.submodule.child.SomeEnum
jsii-calc.submodule.child.SomeStruct=software.amazon.jsii.tests.calculator.submodule.child.SomeStruct
jsii-calc.submodule.child.Structure=software.amazon.jsii.tests.calculator.submodule.child.Structure
jsii-calc.submodule.isolated.Kwargs=software.amazon.jsii.tests.calculator.submodule.isolated.Kwargs
jsii-calc.submodule.nested_submodule.Namespaced=software.amazon.jsii.tests.calculator.submodule.nested_submodule.Namespaced
jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced=software.amazon.jsii.tests.calculator.submodule.nested_submodule.deeply_nested.INamespaced

`;

exports[`Generated code for "jsii-calc": <outDir>/java/src/main/resources/software/amazon/jsii/tests/calculator/jsii-calc@0.0.0.jsii.tgz 1`] = `java/src/main/resources/software/amazon/jsii/tests/calculator/jsii-calc@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "jsii-calc": <outDir>/js/jsii-calc@0.0.0.jsii.tgz 1`] = `js/jsii-calc@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "jsii-calc": <outDir>/python/MANIFEST.in 1`] = `
include pyproject.toml

`;

exports[`Generated code for "jsii-calc": <outDir>/python/README.md 1`] = `
# jsii Calculator

This library is used to demonstrate and test the features of JSII

## How to use running sum API:

First, create a calculator:

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
calculator = calc.Calculator()
\`\`\`

Then call some operations:

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
calculator.add(10)
\`\`\`

## Code Samples

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
# This is totes a magic comment in here, just you wait!
foo = "bar"
\`\`\`

`;

exports[`Generated code for "jsii-calc": <outDir>/python/pyproject.toml 1`] = `
[build-system]
requires = ["setuptools >= 49.3.1", "wheel >= 0.34.2"]
build-backend = "setuptools.build_meta"

`;

exports[`Generated code for "jsii-calc": <outDir>/python/setup.py 1`] = `
import json
import setuptools

kwargs = json.loads(
    """
{
    "name": "jsii-calc",
    "version": "0.0.0",
    "description": "A simple calcuator built on JSII.",
    "license": "Apache-2.0",
    "url": "https://github.com/aws/jsii",
    "long_description_content_type": "text/markdown",
    "author": "Amazon Web Services",
    "bdist_wheel": {
        "universal": true
    },
    "project_urls": {
        "Source": "https://github.com/aws/jsii.git"
    },
    "package_dir": {
        "": "src"
    },
    "packages": [
        "jsii_calc",
        "jsii_calc._jsii",
        "jsii_calc.composition",
        "jsii_calc.derived_class_has_no_properties",
        "jsii_calc.interface_in_namespace_includes_classes",
        "jsii_calc.interface_in_namespace_only_interface",
        "jsii_calc.python_self",
        "jsii_calc.submodule",
        "jsii_calc.submodule.back_references",
        "jsii_calc.submodule.child",
        "jsii_calc.submodule.isolated",
        "jsii_calc.submodule.nested_submodule",
        "jsii_calc.submodule.nested_submodule.deeply_nested"
    ],
    "package_data": {
        "jsii_calc._jsii": [
            "jsii-calc@0.0.0.jsii.tgz"
        ],
        "jsii_calc": [
            "py.typed"
        ]
    },
    "python_requires": ">=3.6",
    "install_requires": [
        "jsii>=0.0.0, <0.0.1",
        "publication>=0.0.3",
        "scope.jsii-calc-base-of-base>=0.0.0, <0.0.1",
        "scope.jsii-calc-base>=0.0.0, <0.0.1",
        "scope.jsii-calc-lib>=0.0.0, <0.0.1"
    ],
    "classifiers": [
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Programming Language :: JavaScript",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Typing :: Typed",
        "Development Status :: 4 - Beta",
        "License :: OSI Approved",
        "Test :: Classifier :: Is Dummy"
    ]
}
"""
)

with open("README.md") as fp:
    kwargs["long_description"] = fp.read()


setuptools.setup(**kwargs)

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/__init__.py 1`] = `
"""
# jsii Calculator

This library is used to demonstrate and test the features of JSII

## How to use running sum API:

First, create a calculator:

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
calculator = calc.Calculator()
\`\`\`

Then call some operations:

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
calculator.add(10)
\`\`\`

## Code Samples

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
# This is totes a magic comment in here, just you wait!
foo = "bar"
\`\`\`
"""
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from ._jsii import *

import scope.jsii_calc_base
import scope.jsii_calc_base_of_base
import scope.jsii_calc_lib
import scope.jsii_calc_lib.custom_submodule_name
from .composition import CompositeOperation as _CompositeOperation_1c4d123b


class AbstractClassBase(
    metaclass=jsii.JSIIAbstractClass, jsii_type="jsii-calc.AbstractClassBase"
):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _AbstractClassBaseProxy

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(AbstractClassBase, self, [])

    @builtins.property
    @jsii.member(jsii_name="abstractProperty")
    @abc.abstractmethod
    def abstract_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...


class _AbstractClassBaseProxy(AbstractClassBase):
    @builtins.property
    @jsii.member(jsii_name="abstractProperty")
    def abstract_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "abstractProperty")


class AbstractClassReturner(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.AbstractClassReturner"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(AbstractClassReturner, self, [])

    @jsii.member(jsii_name="giveMeAbstract")
    def give_me_abstract(self) -> "AbstractClass":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "giveMeAbstract", [])

    @jsii.member(jsii_name="giveMeInterface")
    def give_me_interface(self) -> "IInterfaceImplementedByAbstractClass":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "giveMeInterface", [])

    @builtins.property
    @jsii.member(jsii_name="returnAbstractFromProperty")
    def return_abstract_from_property(self) -> "AbstractClassBase":
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "returnAbstractFromProperty")


class AbstractSuite(
    metaclass=jsii.JSIIAbstractClass, jsii_type="jsii-calc.AbstractSuite"
):
    """Ensures abstract members implementations correctly register overrides in various languages.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _AbstractSuiteProxy

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(AbstractSuite, self, [])

    @jsii.member(jsii_name="someMethod")
    @abc.abstractmethod
    def _some_method(self, str: str) -> str:
        """
        :param str: -

        stability
        :stability: experimental
        """
        ...

    @jsii.member(jsii_name="workItAll")
    def work_it_all(self, seed: str) -> str:
        """Sets \`\`seed\`\` to \`\`this.property\`\`, then calls \`\`someMethod\`\` with \`\`this.property\`\` and returns the result.

        :param seed: a \`\`string\`\`.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "workItAll", [seed])

    @builtins.property
    @jsii.member(jsii_name="property")
    @abc.abstractmethod
    def _property(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...

    @_property.setter
    @abc.abstractmethod
    def _property(self, value: str) -> None:
        ...


class _AbstractSuiteProxy(AbstractSuite):
    @jsii.member(jsii_name="someMethod")
    def _some_method(self, str: str) -> str:
        """
        :param str: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "someMethod", [str])

    @builtins.property
    @jsii.member(jsii_name="property")
    def _property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "property")

    @_property.setter
    def _property(self, value: str) -> None:
        jsii.set(self, "property", value)


class AllTypes(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.AllTypes"):
    """This class includes property for all types supported by jsii.

    The setters will validate
    that the value set is of the expected type and throw otherwise.

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(AllTypes, self, [])

    @jsii.member(jsii_name="anyIn")
    def any_in(self, inp: typing.Any) -> None:
        """
        :param inp: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "anyIn", [inp])

    @jsii.member(jsii_name="anyOut")
    def any_out(self) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "anyOut", [])

    @jsii.member(jsii_name="enumMethod")
    def enum_method(self, value: "StringEnum") -> "StringEnum":
        """
        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "enumMethod", [value])

    @builtins.property
    @jsii.member(jsii_name="enumPropertyValue")
    def enum_property_value(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "enumPropertyValue")

    @builtins.property
    @jsii.member(jsii_name="anyArrayProperty")
    def any_array_property(self) -> typing.List[typing.Any]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "anyArrayProperty")

    @any_array_property.setter
    def any_array_property(self, value: typing.List[typing.Any]) -> None:
        jsii.set(self, "anyArrayProperty", value)

    @builtins.property
    @jsii.member(jsii_name="anyMapProperty")
    def any_map_property(self) -> typing.Mapping[str, typing.Any]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "anyMapProperty")

    @any_map_property.setter
    def any_map_property(self, value: typing.Mapping[str, typing.Any]) -> None:
        jsii.set(self, "anyMapProperty", value)

    @builtins.property
    @jsii.member(jsii_name="anyProperty")
    def any_property(self) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "anyProperty")

    @any_property.setter
    def any_property(self, value: typing.Any) -> None:
        jsii.set(self, "anyProperty", value)

    @builtins.property
    @jsii.member(jsii_name="arrayProperty")
    def array_property(self) -> typing.List[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "arrayProperty")

    @array_property.setter
    def array_property(self, value: typing.List[str]) -> None:
        jsii.set(self, "arrayProperty", value)

    @builtins.property
    @jsii.member(jsii_name="booleanProperty")
    def boolean_property(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "booleanProperty")

    @boolean_property.setter
    def boolean_property(self, value: bool) -> None:
        jsii.set(self, "booleanProperty", value)

    @builtins.property
    @jsii.member(jsii_name="dateProperty")
    def date_property(self) -> datetime.datetime:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "dateProperty")

    @date_property.setter
    def date_property(self, value: datetime.datetime) -> None:
        jsii.set(self, "dateProperty", value)

    @builtins.property
    @jsii.member(jsii_name="enumProperty")
    def enum_property(self) -> "AllTypesEnum":
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "enumProperty")

    @enum_property.setter
    def enum_property(self, value: "AllTypesEnum") -> None:
        jsii.set(self, "enumProperty", value)

    @builtins.property
    @jsii.member(jsii_name="jsonProperty")
    def json_property(self) -> typing.Mapping[typing.Any, typing.Any]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "jsonProperty")

    @json_property.setter
    def json_property(self, value: typing.Mapping[typing.Any, typing.Any]) -> None:
        jsii.set(self, "jsonProperty", value)

    @builtins.property
    @jsii.member(jsii_name="mapProperty")
    def map_property(self) -> typing.Mapping[str, scope.jsii_calc_lib.Number]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "mapProperty")

    @map_property.setter
    def map_property(
        self, value: typing.Mapping[str, scope.jsii_calc_lib.Number]
    ) -> None:
        jsii.set(self, "mapProperty", value)

    @builtins.property
    @jsii.member(jsii_name="numberProperty")
    def number_property(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "numberProperty")

    @number_property.setter
    def number_property(self, value: jsii.Number) -> None:
        jsii.set(self, "numberProperty", value)

    @builtins.property
    @jsii.member(jsii_name="stringProperty")
    def string_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "stringProperty")

    @string_property.setter
    def string_property(self, value: str) -> None:
        jsii.set(self, "stringProperty", value)

    @builtins.property
    @jsii.member(jsii_name="unionArrayProperty")
    def union_array_property(
        self,
    ) -> typing.List[typing.Union[jsii.Number, scope.jsii_calc_lib.Value]]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "unionArrayProperty")

    @union_array_property.setter
    def union_array_property(
        self, value: typing.List[typing.Union[jsii.Number, scope.jsii_calc_lib.Value]]
    ) -> None:
        jsii.set(self, "unionArrayProperty", value)

    @builtins.property
    @jsii.member(jsii_name="unionMapProperty")
    def union_map_property(
        self,
    ) -> typing.Mapping[str, typing.Union[str, jsii.Number, scope.jsii_calc_lib.Number]]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "unionMapProperty")

    @union_map_property.setter
    def union_map_property(
        self,
        value: typing.Mapping[str, typing.Union[str, jsii.Number, scope.jsii_calc_lib.Number]],
    ) -> None:
        jsii.set(self, "unionMapProperty", value)

    @builtins.property
    @jsii.member(jsii_name="unionProperty")
    def union_property(
        self,
    ) -> typing.Union[str, jsii.Number, "Multiply", scope.jsii_calc_lib.Number]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "unionProperty")

    @union_property.setter
    def union_property(
        self,
        value: typing.Union[str, jsii.Number, "Multiply", scope.jsii_calc_lib.Number],
    ) -> None:
        jsii.set(self, "unionProperty", value)

    @builtins.property
    @jsii.member(jsii_name="unknownArrayProperty")
    def unknown_array_property(self) -> typing.List[typing.Any]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "unknownArrayProperty")

    @unknown_array_property.setter
    def unknown_array_property(self, value: typing.List[typing.Any]) -> None:
        jsii.set(self, "unknownArrayProperty", value)

    @builtins.property
    @jsii.member(jsii_name="unknownMapProperty")
    def unknown_map_property(self) -> typing.Mapping[str, typing.Any]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "unknownMapProperty")

    @unknown_map_property.setter
    def unknown_map_property(self, value: typing.Mapping[str, typing.Any]) -> None:
        jsii.set(self, "unknownMapProperty", value)

    @builtins.property
    @jsii.member(jsii_name="unknownProperty")
    def unknown_property(self) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "unknownProperty")

    @unknown_property.setter
    def unknown_property(self, value: typing.Any) -> None:
        jsii.set(self, "unknownProperty", value)

    @builtins.property
    @jsii.member(jsii_name="optionalEnumValue")
    def optional_enum_value(self) -> typing.Optional["StringEnum"]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "optionalEnumValue")

    @optional_enum_value.setter
    def optional_enum_value(self, value: typing.Optional["StringEnum"]) -> None:
        jsii.set(self, "optionalEnumValue", value)


@jsii.enum(jsii_type="jsii-calc.AllTypesEnum")
class AllTypesEnum(enum.Enum):
    """
    stability
    :stability: experimental
    """

    MY_ENUM_VALUE = "MY_ENUM_VALUE"
    """
    stability
    :stability: experimental
    """
    YOUR_ENUM_VALUE = "YOUR_ENUM_VALUE"
    """
    stability
    :stability: experimental
    """
    THIS_IS_GREAT = "THIS_IS_GREAT"
    """
    stability
    :stability: experimental
    """


class AllowedMethodNames(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.AllowedMethodNames"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(AllowedMethodNames, self, [])

    @jsii.member(jsii_name="getBar")
    def get_bar(self, _p1: str, _p2: jsii.Number) -> None:
        """
        :param _p1: -
        :param _p2: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "getBar", [_p1, _p2])

    @jsii.member(jsii_name="getFoo")
    def get_foo(self, with_param: str) -> str:
        """getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay.

        :param with_param: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "getFoo", [with_param])

    @jsii.member(jsii_name="setBar")
    def set_bar(self, _x: str, _y: jsii.Number, _z: bool) -> None:
        """
        :param _x: -
        :param _y: -
        :param _z: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "setBar", [_x, _y, _z])

    @jsii.member(jsii_name="setFoo")
    def set_foo(self, _x: str, _y: jsii.Number) -> None:
        """setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay.

        :param _x: -
        :param _y: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "setFoo", [_x, _y])


class AmbiguousParameters(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.AmbiguousParameters"
):
    """
    stability
    :stability: experimental
    """

    def __init__(
        self, scope_: "Bell", *, scope: str, props: typing.Optional[bool] = None
    ) -> None:
        """
        :param scope_: -
        :param scope: 
        :param props: 

        stability
        :stability: experimental
        """
        props_ = StructParameterType(scope=scope, props=props)

        jsii.create(AmbiguousParameters, self, [scope_, props_])

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "StructParameterType":
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "props")

    @builtins.property
    @jsii.member(jsii_name="scope")
    def scope(self) -> "Bell":
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "scope")


class AsyncVirtualMethods(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.AsyncVirtualMethods"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(AsyncVirtualMethods, self, [])

    @jsii.member(jsii_name="callMe")
    def call_me(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.ainvoke(self, "callMe", [])

    @jsii.member(jsii_name="callMe2")
    def call_me2(self) -> jsii.Number:
        """Just calls "overrideMeToo".

        stability
        :stability: experimental
        """
        return jsii.ainvoke(self, "callMe2", [])

    @jsii.member(jsii_name="callMeDoublePromise")
    def call_me_double_promise(self) -> jsii.Number:
        """This method calls the "callMe" async method indirectly, which will then invoke a virtual method.

        This is a "double promise" situation, which
        means that callbacks are not going to be available immediate, but only
        after an "immediates" cycle.

        stability
        :stability: experimental
        """
        return jsii.ainvoke(self, "callMeDoublePromise", [])

    @jsii.member(jsii_name="dontOverrideMe")
    def dont_override_me(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "dontOverrideMe", [])

    @jsii.member(jsii_name="overrideMe")
    def override_me(self, mult: jsii.Number) -> jsii.Number:
        """
        :param mult: -

        stability
        :stability: experimental
        """
        return jsii.ainvoke(self, "overrideMe", [mult])

    @jsii.member(jsii_name="overrideMeToo")
    def override_me_too(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.ainvoke(self, "overrideMeToo", [])


class AugmentableClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.AugmentableClass"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(AugmentableClass, self, [])

    @jsii.member(jsii_name="methodOne")
    def method_one(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "methodOne", [])

    @jsii.member(jsii_name="methodTwo")
    def method_two(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "methodTwo", [])


class BaseJsii976(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.BaseJsii976"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(BaseJsii976, self, [])


@jsii.implements(scope.jsii_calc_lib.IFriendly)
class BinaryOperation(
    scope.jsii_calc_lib.Operation,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.BinaryOperation",
):
    """Represents an operation with two operands.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _BinaryOperationProxy

    def __init__(
        self, lhs: scope.jsii_calc_lib.Value, rhs: scope.jsii_calc_lib.Value
    ) -> None:
        """Creates a BinaryOperation.

        :param lhs: Left-hand side operand.
        :param rhs: Right-hand side operand.

        stability
        :stability: experimental
        """
        jsii.create(BinaryOperation, self, [lhs, rhs])

    @jsii.member(jsii_name="hello")
    def hello(self) -> str:
        """Say hello!

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "hello", [])

    @builtins.property
    @jsii.member(jsii_name="lhs")
    def lhs(self) -> scope.jsii_calc_lib.Value:
        """Left-hand side operand.

        stability
        :stability: experimental
        """
        return jsii.get(self, "lhs")

    @builtins.property
    @jsii.member(jsii_name="rhs")
    def rhs(self) -> scope.jsii_calc_lib.Value:
        """Right-hand side operand.

        stability
        :stability: experimental
        """
        return jsii.get(self, "rhs")


class _BinaryOperationProxy(
    BinaryOperation, jsii.proxy_for(scope.jsii_calc_lib.Operation)
):
    pass


class BurriedAnonymousObject(
    metaclass=jsii.JSIIAbstractClass, jsii_type="jsii-calc.BurriedAnonymousObject"
):
    """See https://github.com/aws/aws-cdk/issues/7977.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _BurriedAnonymousObjectProxy

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(BurriedAnonymousObject, self, [])

    @jsii.member(jsii_name="check")
    def check(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "check", [])

    @jsii.member(jsii_name="giveItBack")
    @abc.abstractmethod
    def give_it_back(self, value: typing.Any) -> typing.Any:
        """Implement this method and have it return it's parameter.

        :param value: the value that should be returned.

        return
        :return: \`\`value\`\`

        stability
        :stability: experimental
        """
        ...


class _BurriedAnonymousObjectProxy(BurriedAnonymousObject):
    @jsii.member(jsii_name="giveItBack")
    def give_it_back(self, value: typing.Any) -> typing.Any:
        """Implement this method and have it return it's parameter.

        :param value: the value that should be returned.

        return
        :return: \`\`value\`\`

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "giveItBack", [value])


class Calculator(
    _CompositeOperation_1c4d123b,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.Calculator",
):
    """A calculator which maintains a current value and allows adding operations.

    Here's how you use it::

       # Example automatically generated. See https://github.com/aws/jsii/issues/826
       calculator = calc.Calculator()
       calculator.add(5)
       calculator.mul(3)
       print(calculator.expression.value)

    I will repeat this example again, but in an @example tag.

    stability
    :stability: experimental

    Example::

        # Example automatically generated. See https://github.com/aws/jsii/issues/826
        calculator = calc.Calculator()
        calculator.add(5)
        calculator.mul(3)
        print(calculator.expression.value)
    """

    def __init__(
        self,
        *,
        initial_value: typing.Optional[jsii.Number] = None,
        maximum_value: typing.Optional[jsii.Number] = None,
    ) -> None:
        """Creates a Calculator object.

        :param initial_value: The initial value of the calculator. NOTE: Any number works here, it's fine. Default: 0
        :param maximum_value: The maximum value the calculator can store. Default: none

        stability
        :stability: experimental
        """
        props = CalculatorProps(
            initial_value=initial_value, maximum_value=maximum_value
        )

        jsii.create(Calculator, self, [props])

    @jsii.member(jsii_name="add")
    def add(self, value: jsii.Number) -> None:
        """Adds a number to the current value.

        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "add", [value])

    @jsii.member(jsii_name="mul")
    def mul(self, value: jsii.Number) -> None:
        """Multiplies the current value by a number.

        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "mul", [value])

    @jsii.member(jsii_name="neg")
    def neg(self) -> None:
        """Negates the current value.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "neg", [])

    @jsii.member(jsii_name="pow")
    def pow(self, value: jsii.Number) -> None:
        """Raises the current value by a power.

        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "pow", [value])

    @jsii.member(jsii_name="readUnionValue")
    def read_union_value(self) -> jsii.Number:
        """Returns teh value of the union property (if defined).

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "readUnionValue", [])

    @builtins.property
    @jsii.member(jsii_name="expression")
    def expression(self) -> scope.jsii_calc_lib.Value:
        """Returns the expression.

        stability
        :stability: experimental
        """
        return jsii.get(self, "expression")

    @builtins.property
    @jsii.member(jsii_name="operationsLog")
    def operations_log(self) -> typing.List[scope.jsii_calc_lib.Value]:
        """A log of all operations.

        stability
        :stability: experimental
        """
        return jsii.get(self, "operationsLog")

    @builtins.property
    @jsii.member(jsii_name="operationsMap")
    def operations_map(
        self,
    ) -> typing.Mapping[str, typing.List[scope.jsii_calc_lib.Value]]:
        """A map of per operation name of all operations performed.

        stability
        :stability: experimental
        """
        return jsii.get(self, "operationsMap")

    @builtins.property
    @jsii.member(jsii_name="curr")
    def curr(self) -> scope.jsii_calc_lib.Value:
        """The current value.

        stability
        :stability: experimental
        """
        return jsii.get(self, "curr")

    @curr.setter
    def curr(self, value: scope.jsii_calc_lib.Value) -> None:
        jsii.set(self, "curr", value)

    @builtins.property
    @jsii.member(jsii_name="maxValue")
    def max_value(self) -> typing.Optional[jsii.Number]:
        """The maximum value allows in this calculator.

        stability
        :stability: experimental
        """
        return jsii.get(self, "maxValue")

    @max_value.setter
    def max_value(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "maxValue", value)

    @builtins.property
    @jsii.member(jsii_name="unionProperty")
    def union_property(
        self,
    ) -> typing.Optional[typing.Union["Add", "Multiply", "Power"]]:
        """Example of a property that accepts a union of types.

        stability
        :stability: experimental
        """
        return jsii.get(self, "unionProperty")

    @union_property.setter
    def union_property(
        self, value: typing.Optional[typing.Union["Add", "Multiply", "Power"]]
    ) -> None:
        jsii.set(self, "unionProperty", value)


@jsii.data_type(
    jsii_type="jsii-calc.CalculatorProps",
    jsii_struct_bases=[],
    name_mapping={"initial_value": "initialValue", "maximum_value": "maximumValue"},
)
class CalculatorProps:
    def __init__(
        self,
        *,
        initial_value: typing.Optional[jsii.Number] = None,
        maximum_value: typing.Optional[jsii.Number] = None,
    ) -> None:
        """Properties for Calculator.

        :param initial_value: The initial value of the calculator. NOTE: Any number works here, it's fine. Default: 0
        :param maximum_value: The maximum value the calculator can store. Default: none

        stability
        :stability: experimental
        """
        self._values = {}
        if initial_value is not None:
            self._values["initial_value"] = initial_value
        if maximum_value is not None:
            self._values["maximum_value"] = maximum_value

    @builtins.property
    def initial_value(self) -> typing.Optional[jsii.Number]:
        """The initial value of the calculator.

        NOTE: Any number works here, it's fine.

        default
        :default: 0

        stability
        :stability: experimental
        """
        return self._values.get("initial_value")

    @builtins.property
    def maximum_value(self) -> typing.Optional[jsii.Number]:
        """The maximum value the calculator can store.

        default
        :default: none

        stability
        :stability: experimental
        """
        return self._values.get("maximum_value")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "CalculatorProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ClassWithCollections(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ClassWithCollections"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self, map: typing.Mapping[str, str], array: typing.List[str]) -> None:
        """
        :param map: -
        :param array: -

        stability
        :stability: experimental
        """
        jsii.create(ClassWithCollections, self, [map, array])

    @jsii.member(jsii_name="createAList")
    @builtins.classmethod
    def create_a_list(cls) -> typing.List[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "createAList", [])

    @jsii.member(jsii_name="createAMap")
    @builtins.classmethod
    def create_a_map(cls) -> typing.Mapping[str, str]:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "createAMap", [])

    @jsii.python.classproperty
    @jsii.member(jsii_name="staticArray")
    def static_array(cls) -> typing.List[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.sget(cls, "staticArray")

    @static_array.setter
    def static_array(cls, value: typing.List[str]) -> None:
        jsii.sset(cls, "staticArray", value)

    @jsii.python.classproperty
    @jsii.member(jsii_name="staticMap")
    def static_map(cls) -> typing.Mapping[str, str]:
        """
        stability
        :stability: experimental
        """
        return jsii.sget(cls, "staticMap")

    @static_map.setter
    def static_map(cls, value: typing.Mapping[str, str]) -> None:
        jsii.sset(cls, "staticMap", value)

    @builtins.property
    @jsii.member(jsii_name="array")
    def array(self) -> typing.List[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "array")

    @array.setter
    def array(self, value: typing.List[str]) -> None:
        jsii.set(self, "array", value)

    @builtins.property
    @jsii.member(jsii_name="map")
    def map(self) -> typing.Mapping[str, str]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "map")

    @map.setter
    def map(self, value: typing.Mapping[str, str]) -> None:
        jsii.set(self, "map", value)


class ClassWithDocs(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ClassWithDocs"):
    """This class has docs.

    The docs are great. They're a bunch of tags.

    see
    :see: https://aws.amazon.com/
    customAttribute:
    :customAttribute:: hasAValue

    Example::

        # Example automatically generated. See https://github.com/aws/jsii/issues/826
        def an_example():
            pass
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ClassWithDocs, self, [])


class ClassWithJavaReservedWords(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ClassWithJavaReservedWords"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self, int: str) -> None:
        """
        :param int: -

        stability
        :stability: experimental
        """
        jsii.create(ClassWithJavaReservedWords, self, [int])

    @jsii.member(jsii_name="import")
    def import_(self, assert_: str) -> str:
        """
        :param assert_: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "import", [assert_])

    @builtins.property
    @jsii.member(jsii_name="int")
    def int(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "int")


class ClassWithMutableObjectLiteralProperty(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ClassWithMutableObjectLiteralProperty",
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ClassWithMutableObjectLiteralProperty, self, [])

    @builtins.property
    @jsii.member(jsii_name="mutableObject")
    def mutable_object(self) -> "IMutableObjectLiteral":
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "mutableObject")

    @mutable_object.setter
    def mutable_object(self, value: "IMutableObjectLiteral") -> None:
        jsii.set(self, "mutableObject", value)


class ConfusingToJackson(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ConfusingToJackson"
):
    """This tries to confuse Jackson by having overloaded property setters.

    see
    :see: https://github.com/aws/aws-cdk/issues/4080
    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="makeInstance")
    @builtins.classmethod
    def make_instance(cls) -> "ConfusingToJackson":
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "makeInstance", [])

    @jsii.member(jsii_name="makeStructInstance")
    @builtins.classmethod
    def make_struct_instance(cls) -> "ConfusingToJacksonStruct":
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "makeStructInstance", [])

    @builtins.property
    @jsii.member(jsii_name="unionProperty")
    def union_property(
        self,
    ) -> typing.Optional[typing.Union[scope.jsii_calc_lib.IFriendly, typing.List[typing.Union[scope.jsii_calc_lib.IFriendly, "AbstractClass"]]]]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "unionProperty")

    @union_property.setter
    def union_property(
        self,
        value: typing.Optional[typing.Union[scope.jsii_calc_lib.IFriendly, typing.List[typing.Union[scope.jsii_calc_lib.IFriendly, "AbstractClass"]]]],
    ) -> None:
        jsii.set(self, "unionProperty", value)


@jsii.data_type(
    jsii_type="jsii-calc.ConfusingToJacksonStruct",
    jsii_struct_bases=[],
    name_mapping={"union_property": "unionProperty"},
)
class ConfusingToJacksonStruct:
    def __init__(
        self,
        *,
        union_property: typing.Optional[typing.Union[scope.jsii_calc_lib.IFriendly, typing.List[typing.Union[scope.jsii_calc_lib.IFriendly, "AbstractClass"]]]] = None,
    ) -> None:
        """
        :param union_property: 

        stability
        :stability: experimental
        """
        self._values = {}
        if union_property is not None:
            self._values["union_property"] = union_property

    @builtins.property
    def union_property(
        self,
    ) -> typing.Optional[typing.Union[scope.jsii_calc_lib.IFriendly, typing.List[typing.Union[scope.jsii_calc_lib.IFriendly, "AbstractClass"]]]]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("union_property")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ConfusingToJacksonStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ConstructorPassesThisOut(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ConstructorPassesThisOut"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self, consumer: "PartiallyInitializedThisConsumer") -> None:
        """
        :param consumer: -

        stability
        :stability: experimental
        """
        jsii.create(ConstructorPassesThisOut, self, [consumer])


class Constructors(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Constructors"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Constructors, self, [])

    @jsii.member(jsii_name="hiddenInterface")
    @builtins.classmethod
    def hidden_interface(cls) -> "IPublicInterface":
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "hiddenInterface", [])

    @jsii.member(jsii_name="hiddenInterfaces")
    @builtins.classmethod
    def hidden_interfaces(cls) -> typing.List["IPublicInterface"]:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "hiddenInterfaces", [])

    @jsii.member(jsii_name="hiddenSubInterfaces")
    @builtins.classmethod
    def hidden_sub_interfaces(cls) -> typing.List["IPublicInterface"]:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "hiddenSubInterfaces", [])

    @jsii.member(jsii_name="makeClass")
    @builtins.classmethod
    def make_class(cls) -> "PublicClass":
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "makeClass", [])

    @jsii.member(jsii_name="makeInterface")
    @builtins.classmethod
    def make_interface(cls) -> "IPublicInterface":
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "makeInterface", [])

    @jsii.member(jsii_name="makeInterface2")
    @builtins.classmethod
    def make_interface2(cls) -> "IPublicInterface2":
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "makeInterface2", [])

    @jsii.member(jsii_name="makeInterfaces")
    @builtins.classmethod
    def make_interfaces(cls) -> typing.List["IPublicInterface"]:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "makeInterfaces", [])


class ConsumePureInterface(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ConsumePureInterface"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self, delegate: "IStructReturningDelegate") -> None:
        """
        :param delegate: -

        stability
        :stability: experimental
        """
        jsii.create(ConsumePureInterface, self, [delegate])

    @jsii.member(jsii_name="workItBaby")
    def work_it_baby(self) -> "StructB":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "workItBaby", [])


class ConsumerCanRingBell(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ConsumerCanRingBell"
):
    """Test calling back to consumers that implement interfaces.

    Check that if a JSII consumer implements IConsumerWithInterfaceParam, they can call
    the method on the argument that they're passed...

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ConsumerCanRingBell, self, [])

    @jsii.member(jsii_name="staticImplementedByObjectLiteral")
    @builtins.classmethod
    def static_implemented_by_object_literal(cls, ringer: "IBellRinger") -> bool:
        """...if the interface is implemented using an object literal.

        Returns whether the bell was rung.

        :param ringer: -

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "staticImplementedByObjectLiteral", [ringer])

    @jsii.member(jsii_name="staticImplementedByPrivateClass")
    @builtins.classmethod
    def static_implemented_by_private_class(cls, ringer: "IBellRinger") -> bool:
        """...if the interface is implemented using a private class.

        Return whether the bell was rung.

        :param ringer: -

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "staticImplementedByPrivateClass", [ringer])

    @jsii.member(jsii_name="staticImplementedByPublicClass")
    @builtins.classmethod
    def static_implemented_by_public_class(cls, ringer: "IBellRinger") -> bool:
        """...if the interface is implemented using a public class.

        Return whether the bell was rung.

        :param ringer: -

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "staticImplementedByPublicClass", [ringer])

    @jsii.member(jsii_name="staticWhenTypedAsClass")
    @builtins.classmethod
    def static_when_typed_as_class(cls, ringer: "IConcreteBellRinger") -> bool:
        """If the parameter is a concrete class instead of an interface.

        Return whether the bell was rung.

        :param ringer: -

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "staticWhenTypedAsClass", [ringer])

    @jsii.member(jsii_name="implementedByObjectLiteral")
    def implemented_by_object_literal(self, ringer: "IBellRinger") -> bool:
        """...if the interface is implemented using an object literal.

        Returns whether the bell was rung.

        :param ringer: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "implementedByObjectLiteral", [ringer])

    @jsii.member(jsii_name="implementedByPrivateClass")
    def implemented_by_private_class(self, ringer: "IBellRinger") -> bool:
        """...if the interface is implemented using a private class.

        Return whether the bell was rung.

        :param ringer: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "implementedByPrivateClass", [ringer])

    @jsii.member(jsii_name="implementedByPublicClass")
    def implemented_by_public_class(self, ringer: "IBellRinger") -> bool:
        """...if the interface is implemented using a public class.

        Return whether the bell was rung.

        :param ringer: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "implementedByPublicClass", [ringer])

    @jsii.member(jsii_name="whenTypedAsClass")
    def when_typed_as_class(self, ringer: "IConcreteBellRinger") -> bool:
        """If the parameter is a concrete class instead of an interface.

        Return whether the bell was rung.

        :param ringer: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "whenTypedAsClass", [ringer])


class ConsumersOfThisCrazyTypeSystem(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ConsumersOfThisCrazyTypeSystem"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ConsumersOfThisCrazyTypeSystem, self, [])

    @jsii.member(jsii_name="consumeAnotherPublicInterface")
    def consume_another_public_interface(self, obj: "IAnotherPublicInterface") -> str:
        """
        :param obj: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "consumeAnotherPublicInterface", [obj])

    @jsii.member(jsii_name="consumeNonInternalInterface")
    def consume_non_internal_interface(
        self, obj: "INonInternalInterface"
    ) -> typing.Any:
        """
        :param obj: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "consumeNonInternalInterface", [obj])


class DataRenderer(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DataRenderer"):
    """Verifies proper type handling through dynamic overrides.

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(DataRenderer, self, [])

    @jsii.member(jsii_name="render")
    def render(
        self,
        *,
        anumber: jsii.Number,
        astring: str,
        first_optional: typing.Optional[typing.List[str]] = None,
    ) -> str:
        """
        :param anumber: An awesome number value.
        :param astring: A string value.
        :param first_optional: 

        stability
        :stability: experimental
        """
        data = scope.jsii_calc_lib.MyFirstStruct(
            anumber=anumber, astring=astring, first_optional=first_optional
        )

        return jsii.invoke(self, "render", [data])

    @jsii.member(jsii_name="renderArbitrary")
    def render_arbitrary(self, data: typing.Mapping[str, typing.Any]) -> str:
        """
        :param data: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "renderArbitrary", [data])

    @jsii.member(jsii_name="renderMap")
    def render_map(self, map: typing.Mapping[str, typing.Any]) -> str:
        """
        :param map: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "renderMap", [map])


class DefaultedConstructorArgument(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DefaultedConstructorArgument"
):
    """
    stability
    :stability: experimental
    """

    def __init__(
        self,
        arg1: typing.Optional[jsii.Number] = None,
        arg2: typing.Optional[str] = None,
        arg3: typing.Optional[datetime.datetime] = None,
    ) -> None:
        """
        :param arg1: -
        :param arg2: -
        :param arg3: -

        stability
        :stability: experimental
        """
        jsii.create(DefaultedConstructorArgument, self, [arg1, arg2, arg3])

    @builtins.property
    @jsii.member(jsii_name="arg1")
    def arg1(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "arg1")

    @builtins.property
    @jsii.member(jsii_name="arg3")
    def arg3(self) -> datetime.datetime:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "arg3")

    @builtins.property
    @jsii.member(jsii_name="arg2")
    def arg2(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "arg2")


class Demonstrate982(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Demonstrate982"):
    """1.

    call #takeThis() -> An ObjectRef will be provisioned for the value (it'll be re-used!)
    2. call #takeThisToo() -> The ObjectRef from before will need to be down-cased to the ParentStruct982 type

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Demonstrate982, self, [])

    @jsii.member(jsii_name="takeThis")
    @builtins.classmethod
    def take_this(cls) -> "ChildStruct982":
        """It's dangerous to go alone!

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "takeThis", [])

    @jsii.member(jsii_name="takeThisToo")
    @builtins.classmethod
    def take_this_too(cls) -> "ParentStruct982":
        """It's dangerous to go alone!

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "takeThisToo", [])


class DeprecatedClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DeprecatedClass"):
    """
    deprecated
    :deprecated: a pretty boring class

    stability
    :stability: deprecated
    """

    def __init__(
        self, readonly_string: str, mutable_number: typing.Optional[jsii.Number] = None
    ) -> None:
        """
        :param readonly_string: -
        :param mutable_number: -

        deprecated
        :deprecated: this constructor is "just" okay

        stability
        :stability: deprecated
        """
        jsii.create(DeprecatedClass, self, [readonly_string, mutable_number])

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        """
        deprecated
        :deprecated: it was a bad idea

        stability
        :stability: deprecated
        """
        return jsii.invoke(self, "method", [])

    @builtins.property
    @jsii.member(jsii_name="readonlyProperty")
    def readonly_property(self) -> str:
        """
        deprecated
        :deprecated: this is not always "wazoo", be ready to be disappointed

        stability
        :stability: deprecated
        """
        return jsii.get(self, "readonlyProperty")

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        """
        deprecated
        :deprecated: shouldn't have been mutable

        stability
        :stability: deprecated
        """
        return jsii.get(self, "mutableProperty")

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)


@jsii.enum(jsii_type="jsii-calc.DeprecatedEnum")
class DeprecatedEnum(enum.Enum):
    """
    deprecated
    :deprecated: your deprecated selection of bad options

    stability
    :stability: deprecated
    """

    OPTION_A = "OPTION_A"
    """
    deprecated
    :deprecated: option A is not great

    stability
    :stability: deprecated
    """
    OPTION_B = "OPTION_B"
    """
    deprecated
    :deprecated: option B is kinda bad, too

    stability
    :stability: deprecated
    """


@jsii.data_type(
    jsii_type="jsii-calc.DeprecatedStruct",
    jsii_struct_bases=[],
    name_mapping={"readonly_property": "readonlyProperty"},
)
class DeprecatedStruct:
    def __init__(self, *, readonly_property: str) -> None:
        """
        :param readonly_property: 

        deprecated
        :deprecated: it just wraps a string

        stability
        :stability: deprecated
        """
        self._values = {
            "readonly_property": readonly_property,
        }

    @builtins.property
    def readonly_property(self) -> str:
        """
        deprecated
        :deprecated: well, yeah

        stability
        :stability: deprecated
        """
        return self._values.get("readonly_property")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DeprecatedStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.DerivedStruct",
    jsii_struct_bases=[scope.jsii_calc_lib.MyFirstStruct],
    name_mapping={
        "anumber": "anumber",
        "astring": "astring",
        "first_optional": "firstOptional",
        "another_required": "anotherRequired",
        "bool": "bool",
        "non_primitive": "nonPrimitive",
        "another_optional": "anotherOptional",
        "optional_any": "optionalAny",
        "optional_array": "optionalArray",
    },
)
class DerivedStruct(scope.jsii_calc_lib.MyFirstStruct):
    def __init__(
        self,
        *,
        anumber: jsii.Number,
        astring: str,
        first_optional: typing.Optional[typing.List[str]] = None,
        another_required: datetime.datetime,
        bool: bool,
        non_primitive: "DoubleTrouble",
        another_optional: typing.Optional[typing.Mapping[str, scope.jsii_calc_lib.Value]] = None,
        optional_any: typing.Any = None,
        optional_array: typing.Optional[typing.List[str]] = None,
    ) -> None:
        """A struct which derives from another struct.

        :param anumber: An awesome number value.
        :param astring: A string value.
        :param first_optional: 
        :param another_required: 
        :param bool: 
        :param non_primitive: An example of a non primitive property.
        :param another_optional: This is optional.
        :param optional_any: 
        :param optional_array: 

        stability
        :stability: experimental
        """
        self._values = {
            "anumber": anumber,
            "astring": astring,
            "another_required": another_required,
            "bool": bool,
            "non_primitive": non_primitive,
        }
        if first_optional is not None:
            self._values["first_optional"] = first_optional
        if another_optional is not None:
            self._values["another_optional"] = another_optional
        if optional_any is not None:
            self._values["optional_any"] = optional_any
        if optional_array is not None:
            self._values["optional_array"] = optional_array

    @builtins.property
    def anumber(self) -> jsii.Number:
        """An awesome number value.

        stability
        :stability: deprecated
        """
        return self._values.get("anumber")

    @builtins.property
    def astring(self) -> str:
        """A string value.

        stability
        :stability: deprecated
        """
        return self._values.get("astring")

    @builtins.property
    def first_optional(self) -> typing.Optional[typing.List[str]]:
        """
        stability
        :stability: deprecated
        """
        return self._values.get("first_optional")

    @builtins.property
    def another_required(self) -> datetime.datetime:
        """
        stability
        :stability: experimental
        """
        return self._values.get("another_required")

    @builtins.property
    def bool(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return self._values.get("bool")

    @builtins.property
    def non_primitive(self) -> "DoubleTrouble":
        """An example of a non primitive property.

        stability
        :stability: experimental
        """
        return self._values.get("non_primitive")

    @builtins.property
    def another_optional(
        self,
    ) -> typing.Optional[typing.Mapping[str, scope.jsii_calc_lib.Value]]:
        """This is optional.

        stability
        :stability: experimental
        """
        return self._values.get("another_optional")

    @builtins.property
    def optional_any(self) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return self._values.get("optional_any")

    @builtins.property
    def optional_array(self) -> typing.Optional[typing.List[str]]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("optional_array")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DerivedStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.DiamondInheritanceBaseLevelStruct",
    jsii_struct_bases=[],
    name_mapping={"base_level_property": "baseLevelProperty"},
)
class DiamondInheritanceBaseLevelStruct:
    def __init__(self, *, base_level_property: str) -> None:
        """
        :param base_level_property: 

        stability
        :stability: experimental
        """
        self._values = {
            "base_level_property": base_level_property,
        }

    @builtins.property
    def base_level_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("base_level_property")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DiamondInheritanceBaseLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.DiamondInheritanceFirstMidLevelStruct",
    jsii_struct_bases=[DiamondInheritanceBaseLevelStruct],
    name_mapping={
        "base_level_property": "baseLevelProperty",
        "first_mid_level_property": "firstMidLevelProperty",
    },
)
class DiamondInheritanceFirstMidLevelStruct(DiamondInheritanceBaseLevelStruct):
    def __init__(
        self, *, base_level_property: str, first_mid_level_property: str
    ) -> None:
        """
        :param base_level_property: 
        :param first_mid_level_property: 

        stability
        :stability: experimental
        """
        self._values = {
            "base_level_property": base_level_property,
            "first_mid_level_property": first_mid_level_property,
        }

    @builtins.property
    def base_level_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("base_level_property")

    @builtins.property
    def first_mid_level_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("first_mid_level_property")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DiamondInheritanceFirstMidLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.DiamondInheritanceSecondMidLevelStruct",
    jsii_struct_bases=[DiamondInheritanceBaseLevelStruct],
    name_mapping={
        "base_level_property": "baseLevelProperty",
        "second_mid_level_property": "secondMidLevelProperty",
    },
)
class DiamondInheritanceSecondMidLevelStruct(DiamondInheritanceBaseLevelStruct):
    def __init__(
        self, *, base_level_property: str, second_mid_level_property: str
    ) -> None:
        """
        :param base_level_property: 
        :param second_mid_level_property: 

        stability
        :stability: experimental
        """
        self._values = {
            "base_level_property": base_level_property,
            "second_mid_level_property": second_mid_level_property,
        }

    @builtins.property
    def base_level_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("base_level_property")

    @builtins.property
    def second_mid_level_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("second_mid_level_property")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DiamondInheritanceSecondMidLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.DiamondInheritanceTopLevelStruct",
    jsii_struct_bases=[
        DiamondInheritanceFirstMidLevelStruct, DiamondInheritanceSecondMidLevelStruct
    ],
    name_mapping={
        "base_level_property": "baseLevelProperty",
        "first_mid_level_property": "firstMidLevelProperty",
        "second_mid_level_property": "secondMidLevelProperty",
        "top_level_property": "topLevelProperty",
    },
)
class DiamondInheritanceTopLevelStruct(
    DiamondInheritanceFirstMidLevelStruct, DiamondInheritanceSecondMidLevelStruct
):
    def __init__(
        self,
        *,
        base_level_property: str,
        first_mid_level_property: str,
        second_mid_level_property: str,
        top_level_property: str,
    ) -> None:
        """
        :param base_level_property: 
        :param first_mid_level_property: 
        :param second_mid_level_property: 
        :param top_level_property: 

        stability
        :stability: experimental
        """
        self._values = {
            "base_level_property": base_level_property,
            "first_mid_level_property": first_mid_level_property,
            "second_mid_level_property": second_mid_level_property,
            "top_level_property": top_level_property,
        }

    @builtins.property
    def base_level_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("base_level_property")

    @builtins.property
    def first_mid_level_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("first_mid_level_property")

    @builtins.property
    def second_mid_level_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("second_mid_level_property")

    @builtins.property
    def top_level_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("top_level_property")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DiamondInheritanceTopLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class DisappointingCollectionSource(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DisappointingCollectionSource"
):
    """Verifies that null/undefined can be returned for optional collections.

    This source of collections is disappointing - it'll always give you nothing :(

    stability
    :stability: experimental
    """

    @jsii.python.classproperty
    @jsii.member(jsii_name="maybeList")
    def MAYBE_LIST(cls) -> typing.Optional[typing.List[str]]:
        """Some List of strings, maybe?

        (Nah, just a billion dollars mistake!)

        stability
        :stability: experimental
        """
        return jsii.sget(cls, "maybeList")

    @jsii.python.classproperty
    @jsii.member(jsii_name="maybeMap")
    def MAYBE_MAP(cls) -> typing.Optional[typing.Mapping[str, jsii.Number]]:
        """Some Map of strings to numbers, maybe?

        (Nah, just a billion dollars mistake!)

        stability
        :stability: experimental
        """
        return jsii.sget(cls, "maybeMap")


class DoNotOverridePrivates(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DoNotOverridePrivates"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(DoNotOverridePrivates, self, [])

    @jsii.member(jsii_name="changePrivatePropertyValue")
    def change_private_property_value(self, new_value: str) -> None:
        """
        :param new_value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "changePrivatePropertyValue", [new_value])

    @jsii.member(jsii_name="privateMethodValue")
    def private_method_value(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "privateMethodValue", [])

    @jsii.member(jsii_name="privatePropertyValue")
    def private_property_value(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "privatePropertyValue", [])


class DoNotRecognizeAnyAsOptional(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DoNotRecognizeAnyAsOptional"
):
    """jsii#284: do not recognize "any" as an optional argument.

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(DoNotRecognizeAnyAsOptional, self, [])

    @jsii.member(jsii_name="method")
    def method(
        self,
        _required_any: typing.Any,
        _optional_any: typing.Any = None,
        _optional_string: typing.Optional[str] = None,
    ) -> None:
        """
        :param _required_any: -
        :param _optional_any: -
        :param _optional_string: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "method", [_required_any, _optional_any, _optional_string])


class DocumentedClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DocumentedClass"):
    """Here's the first line of the TSDoc comment.

    This is the meat of the TSDoc comment. It may contain
    multiple lines and multiple paragraphs.

    Multiple paragraphs are separated by an empty line.
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(DocumentedClass, self, [])

    @jsii.member(jsii_name="greet")
    def greet(self, *, name: typing.Optional[str] = None) -> jsii.Number:
        """Greet the indicated person.

        This will print out a friendly greeting intended for
        the indicated person.

        :param name: The name of the greetee. Default: world

        return
        :return: A number that everyone knows very well
        """
        greetee = Greetee(name=name)

        return jsii.invoke(self, "greet", [greetee])

    @jsii.member(jsii_name="hola")
    def hola(self) -> None:
        """Say ¡Hola!

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "hola", [])


class DontComplainAboutVariadicAfterOptional(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.DontComplainAboutVariadicAfterOptional",
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(DontComplainAboutVariadicAfterOptional, self, [])

    @jsii.member(jsii_name="optionalAndVariadic")
    def optional_and_variadic(
        self, optional: typing.Optional[str] = None, *things: str
    ) -> str:
        """
        :param optional: -
        :param things: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "optionalAndVariadic", [optional, *things])


class EnumDispenser(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.EnumDispenser"):
    """
    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="randomIntegerLikeEnum")
    @builtins.classmethod
    def random_integer_like_enum(cls) -> "AllTypesEnum":
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "randomIntegerLikeEnum", [])

    @jsii.member(jsii_name="randomStringLikeEnum")
    @builtins.classmethod
    def random_string_like_enum(cls) -> "StringEnum":
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "randomStringLikeEnum", [])


class EraseUndefinedHashValues(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.EraseUndefinedHashValues"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(EraseUndefinedHashValues, self, [])

    @jsii.member(jsii_name="doesKeyExist")
    @builtins.classmethod
    def does_key_exist(cls, opts: "EraseUndefinedHashValuesOptions", key: str) -> bool:
        """Returns \`\`true\`\` if \`\`key\`\` is defined in \`\`opts\`\`.

        Used to check that undefined/null hash values
        are being erased when sending values from native code to JS.

        :param opts: -
        :param key: -

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "doesKeyExist", [opts, key])

    @jsii.member(jsii_name="prop1IsNull")
    @builtins.classmethod
    def prop1_is_null(cls) -> typing.Mapping[str, typing.Any]:
        """We expect "prop1" to be erased.

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "prop1IsNull", [])

    @jsii.member(jsii_name="prop2IsUndefined")
    @builtins.classmethod
    def prop2_is_undefined(cls) -> typing.Mapping[str, typing.Any]:
        """We expect "prop2" to be erased.

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "prop2IsUndefined", [])


@jsii.data_type(
    jsii_type="jsii-calc.EraseUndefinedHashValuesOptions",
    jsii_struct_bases=[],
    name_mapping={"option1": "option1", "option2": "option2"},
)
class EraseUndefinedHashValuesOptions:
    def __init__(
        self,
        *,
        option1: typing.Optional[str] = None,
        option2: typing.Optional[str] = None,
    ) -> None:
        """
        :param option1: 
        :param option2: 

        stability
        :stability: experimental
        """
        self._values = {}
        if option1 is not None:
            self._values["option1"] = option1
        if option2 is not None:
            self._values["option2"] = option2

    @builtins.property
    def option1(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("option1")

    @builtins.property
    def option2(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("option2")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "EraseUndefinedHashValuesOptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ExperimentalClass(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ExperimentalClass"
):
    """
    stability
    :stability: experimental
    """

    def __init__(
        self, readonly_string: str, mutable_number: typing.Optional[jsii.Number] = None
    ) -> None:
        """
        :param readonly_string: -
        :param mutable_number: -

        stability
        :stability: experimental
        """
        jsii.create(ExperimentalClass, self, [readonly_string, mutable_number])

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "method", [])

    @builtins.property
    @jsii.member(jsii_name="readonlyProperty")
    def readonly_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "readonlyProperty")

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "mutableProperty")

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)


@jsii.enum(jsii_type="jsii-calc.ExperimentalEnum")
class ExperimentalEnum(enum.Enum):
    """
    stability
    :stability: experimental
    """

    OPTION_A = "OPTION_A"
    """
    stability
    :stability: experimental
    """
    OPTION_B = "OPTION_B"
    """
    stability
    :stability: experimental
    """


@jsii.data_type(
    jsii_type="jsii-calc.ExperimentalStruct",
    jsii_struct_bases=[],
    name_mapping={"readonly_property": "readonlyProperty"},
)
class ExperimentalStruct:
    def __init__(self, *, readonly_property: str) -> None:
        """
        :param readonly_property: 

        stability
        :stability: experimental
        """
        self._values = {
            "readonly_property": readonly_property,
        }

    @builtins.property
    def readonly_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("readonly_property")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ExperimentalStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ExportedBaseClass(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ExportedBaseClass"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self, success: bool) -> None:
        """
        :param success: -

        stability
        :stability: experimental
        """
        jsii.create(ExportedBaseClass, self, [success])

    @builtins.property
    @jsii.member(jsii_name="success")
    def success(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "success")


@jsii.data_type(
    jsii_type="jsii-calc.ExtendsInternalInterface",
    jsii_struct_bases=[],
    name_mapping={"boom": "boom", "prop": "prop"},
)
class ExtendsInternalInterface:
    def __init__(self, *, boom: bool, prop: str) -> None:
        """
        :param boom: 
        :param prop: 

        stability
        :stability: experimental
        """
        self._values = {
            "boom": boom,
            "prop": prop,
        }

    @builtins.property
    def boom(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return self._values.get("boom")

    @builtins.property
    def prop(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("prop")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ExtendsInternalInterface(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ExternalClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ExternalClass"):
    """
    stability
    :stability: experimental
    external:
    :external:: true
    """

    def __init__(
        self, readonly_string: str, mutable_number: typing.Optional[jsii.Number] = None
    ) -> None:
        """
        :param readonly_string: -
        :param mutable_number: -

        stability
        :stability: experimental
        external:
        :external:: true
        """
        jsii.create(ExternalClass, self, [readonly_string, mutable_number])

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        """
        stability
        :stability: experimental
        external:
        :external:: true
        """
        return jsii.invoke(self, "method", [])

    @builtins.property
    @jsii.member(jsii_name="readonlyProperty")
    def readonly_property(self) -> str:
        """
        stability
        :stability: experimental
        external:
        :external:: true
        """
        return jsii.get(self, "readonlyProperty")

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        """
        stability
        :stability: experimental
        external:
        :external:: true
        """
        return jsii.get(self, "mutableProperty")

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)


@jsii.enum(jsii_type="jsii-calc.ExternalEnum")
class ExternalEnum(enum.Enum):
    """
    stability
    :stability: experimental
    external:
    :external:: true
    """

    OPTION_A = "OPTION_A"
    """
    stability
    :stability: experimental
    external:
    :external:: true
    """
    OPTION_B = "OPTION_B"
    """
    stability
    :stability: experimental
    external:
    :external:: true
    """


@jsii.data_type(
    jsii_type="jsii-calc.ExternalStruct",
    jsii_struct_bases=[],
    name_mapping={"readonly_property": "readonlyProperty"},
)
class ExternalStruct:
    def __init__(self, *, readonly_property: str) -> None:
        """
        :param readonly_property: 

        stability
        :stability: experimental
        external:
        :external:: true
        """
        self._values = {
            "readonly_property": readonly_property,
        }

    @builtins.property
    def readonly_property(self) -> str:
        """
        stability
        :stability: experimental
        external:
        :external:: true
        """
        return self._values.get("readonly_property")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ExternalStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class GiveMeStructs(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.GiveMeStructs"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(GiveMeStructs, self, [])

    @jsii.member(jsii_name="derivedToFirst")
    def derived_to_first(
        self,
        *,
        another_required: datetime.datetime,
        bool: bool,
        non_primitive: "DoubleTrouble",
        another_optional: typing.Optional[typing.Mapping[str, scope.jsii_calc_lib.Value]] = None,
        optional_any: typing.Any = None,
        optional_array: typing.Optional[typing.List[str]] = None,
        anumber: jsii.Number,
        astring: str,
        first_optional: typing.Optional[typing.List[str]] = None,
    ) -> scope.jsii_calc_lib.MyFirstStruct:
        """Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct.

        :param another_required: 
        :param bool: 
        :param non_primitive: An example of a non primitive property.
        :param another_optional: This is optional.
        :param optional_any: 
        :param optional_array: 
        :param anumber: An awesome number value.
        :param astring: A string value.
        :param first_optional: 

        stability
        :stability: experimental
        """
        derived = DerivedStruct(
            another_required=another_required,
            bool=bool,
            non_primitive=non_primitive,
            another_optional=another_optional,
            optional_any=optional_any,
            optional_array=optional_array,
            anumber=anumber,
            astring=astring,
            first_optional=first_optional,
        )

        return jsii.invoke(self, "derivedToFirst", [derived])

    @jsii.member(jsii_name="readDerivedNonPrimitive")
    def read_derived_non_primitive(
        self,
        *,
        another_required: datetime.datetime,
        bool: bool,
        non_primitive: "DoubleTrouble",
        another_optional: typing.Optional[typing.Mapping[str, scope.jsii_calc_lib.Value]] = None,
        optional_any: typing.Any = None,
        optional_array: typing.Optional[typing.List[str]] = None,
        anumber: jsii.Number,
        astring: str,
        first_optional: typing.Optional[typing.List[str]] = None,
    ) -> "DoubleTrouble":
        """Returns the boolean from a DerivedStruct struct.

        :param another_required: 
        :param bool: 
        :param non_primitive: An example of a non primitive property.
        :param another_optional: This is optional.
        :param optional_any: 
        :param optional_array: 
        :param anumber: An awesome number value.
        :param astring: A string value.
        :param first_optional: 

        stability
        :stability: experimental
        """
        derived = DerivedStruct(
            another_required=another_required,
            bool=bool,
            non_primitive=non_primitive,
            another_optional=another_optional,
            optional_any=optional_any,
            optional_array=optional_array,
            anumber=anumber,
            astring=astring,
            first_optional=first_optional,
        )

        return jsii.invoke(self, "readDerivedNonPrimitive", [derived])

    @jsii.member(jsii_name="readFirstNumber")
    def read_first_number(
        self,
        *,
        anumber: jsii.Number,
        astring: str,
        first_optional: typing.Optional[typing.List[str]] = None,
    ) -> jsii.Number:
        """Returns the "anumber" from a MyFirstStruct struct;

        :param anumber: An awesome number value.
        :param astring: A string value.
        :param first_optional: 

        stability
        :stability: experimental
        """
        first = scope.jsii_calc_lib.MyFirstStruct(
            anumber=anumber, astring=astring, first_optional=first_optional
        )

        return jsii.invoke(self, "readFirstNumber", [first])

    @builtins.property
    @jsii.member(jsii_name="structLiteral")
    def struct_literal(self) -> scope.jsii_calc_lib.StructWithOnlyOptionals:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "structLiteral")


@jsii.data_type(
    jsii_type="jsii-calc.Greetee",
    jsii_struct_bases=[],
    name_mapping={"name": "name"},
)
class Greetee:
    def __init__(self, *, name: typing.Optional[str] = None) -> None:
        """These are some arguments you can pass to a method.

        :param name: The name of the greetee. Default: world

        stability
        :stability: experimental
        """
        self._values = {}
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def name(self) -> typing.Optional[str]:
        """The name of the greetee.

        default
        :default: world

        stability
        :stability: experimental
        """
        return self._values.get("name")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Greetee(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class GreetingAugmenter(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.GreetingAugmenter"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(GreetingAugmenter, self, [])

    @jsii.member(jsii_name="betterGreeting")
    def better_greeting(self, friendly: scope.jsii_calc_lib.IFriendly) -> str:
        """
        :param friendly: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "betterGreeting", [friendly])


@jsii.interface(jsii_type="jsii-calc.IAnonymousImplementationProvider")
class IAnonymousImplementationProvider(jsii.compat.Protocol):
    """We can return an anonymous interface implementation from an override without losing the interface declarations.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IAnonymousImplementationProviderProxy

    @jsii.member(jsii_name="provideAsClass")
    def provide_as_class(self) -> "Implementation":
        """
        stability
        :stability: experimental
        """
        ...

    @jsii.member(jsii_name="provideAsInterface")
    def provide_as_interface(self) -> "IAnonymouslyImplementMe":
        """
        stability
        :stability: experimental
        """
        ...


class _IAnonymousImplementationProviderProxy:
    """We can return an anonymous interface implementation from an override without losing the interface declarations.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IAnonymousImplementationProvider"

    @jsii.member(jsii_name="provideAsClass")
    def provide_as_class(self) -> "Implementation":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "provideAsClass", [])

    @jsii.member(jsii_name="provideAsInterface")
    def provide_as_interface(self) -> "IAnonymouslyImplementMe":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "provideAsInterface", [])


@jsii.interface(jsii_type="jsii-calc.IAnonymouslyImplementMe")
class IAnonymouslyImplementMe(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IAnonymouslyImplementMeProxy

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        ...

    @jsii.member(jsii_name="verb")
    def verb(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...


class _IAnonymouslyImplementMeProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IAnonymouslyImplementMe"

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "value")

    @jsii.member(jsii_name="verb")
    def verb(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "verb", [])


@jsii.interface(jsii_type="jsii-calc.IAnotherPublicInterface")
class IAnotherPublicInterface(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IAnotherPublicInterfaceProxy

    @builtins.property
    @jsii.member(jsii_name="a")
    def a(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...

    @a.setter
    def a(self, value: str) -> None:
        ...


class _IAnotherPublicInterfaceProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IAnotherPublicInterface"

    @builtins.property
    @jsii.member(jsii_name="a")
    def a(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "a")

    @a.setter
    def a(self, value: str) -> None:
        jsii.set(self, "a", value)


@jsii.interface(jsii_type="jsii-calc.IBell")
class IBell(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IBellProxy

    @jsii.member(jsii_name="ring")
    def ring(self) -> None:
        """
        stability
        :stability: experimental
        """
        ...


class _IBellProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IBell"

    @jsii.member(jsii_name="ring")
    def ring(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "ring", [])


@jsii.interface(jsii_type="jsii-calc.IBellRinger")
class IBellRinger(jsii.compat.Protocol):
    """Takes the object parameter as an interface.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IBellRingerProxy

    @jsii.member(jsii_name="yourTurn")
    def your_turn(self, bell: "IBell") -> None:
        """
        :param bell: -

        stability
        :stability: experimental
        """
        ...


class _IBellRingerProxy:
    """Takes the object parameter as an interface.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IBellRinger"

    @jsii.member(jsii_name="yourTurn")
    def your_turn(self, bell: "IBell") -> None:
        """
        :param bell: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "yourTurn", [bell])


@jsii.interface(jsii_type="jsii-calc.IConcreteBellRinger")
class IConcreteBellRinger(jsii.compat.Protocol):
    """Takes the object parameter as a calss.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IConcreteBellRingerProxy

    @jsii.member(jsii_name="yourTurn")
    def your_turn(self, bell: "Bell") -> None:
        """
        :param bell: -

        stability
        :stability: experimental
        """
        ...


class _IConcreteBellRingerProxy:
    """Takes the object parameter as a calss.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IConcreteBellRinger"

    @jsii.member(jsii_name="yourTurn")
    def your_turn(self, bell: "Bell") -> None:
        """
        :param bell: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "yourTurn", [bell])


@jsii.interface(jsii_type="jsii-calc.IDeprecatedInterface")
class IDeprecatedInterface(jsii.compat.Protocol):
    """
    deprecated
    :deprecated: useless interface

    stability
    :stability: deprecated
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IDeprecatedInterfaceProxy

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        """
        deprecated
        :deprecated: could be better

        stability
        :stability: deprecated
        """
        ...

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        ...

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        """
        deprecated
        :deprecated: services no purpose

        stability
        :stability: deprecated
        """
        ...


class _IDeprecatedInterfaceProxy:
    """
    deprecated
    :deprecated: useless interface

    stability
    :stability: deprecated
    """

    __jsii_type__ = "jsii-calc.IDeprecatedInterface"

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        """
        deprecated
        :deprecated: could be better

        stability
        :stability: deprecated
        """
        return jsii.get(self, "mutableProperty")

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        """
        deprecated
        :deprecated: services no purpose

        stability
        :stability: deprecated
        """
        return jsii.invoke(self, "method", [])


@jsii.interface(jsii_type="jsii-calc.IExperimentalInterface")
class IExperimentalInterface(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IExperimentalInterfaceProxy

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        """
        stability
        :stability: experimental
        """
        ...

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        ...

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        """
        stability
        :stability: experimental
        """
        ...


class _IExperimentalInterfaceProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IExperimentalInterface"

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "mutableProperty")

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "method", [])


@jsii.interface(jsii_type="jsii-calc.IExtendsPrivateInterface")
class IExtendsPrivateInterface(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IExtendsPrivateInterfaceProxy

    @builtins.property
    @jsii.member(jsii_name="moreThings")
    def more_things(self) -> typing.List[str]:
        """
        stability
        :stability: experimental
        """
        ...

    @builtins.property
    @jsii.member(jsii_name="private")
    def private(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...

    @private.setter
    def private(self, value: str) -> None:
        ...


class _IExtendsPrivateInterfaceProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IExtendsPrivateInterface"

    @builtins.property
    @jsii.member(jsii_name="moreThings")
    def more_things(self) -> typing.List[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "moreThings")

    @builtins.property
    @jsii.member(jsii_name="private")
    def private(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "private")

    @private.setter
    def private(self, value: str) -> None:
        jsii.set(self, "private", value)


@jsii.interface(jsii_type="jsii-calc.IExternalInterface")
class IExternalInterface(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    external:
    :external:: true
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IExternalInterfaceProxy

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        """
        stability
        :stability: experimental
        external:
        :external:: true
        """
        ...

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        ...

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        """
        stability
        :stability: experimental
        external:
        :external:: true
        """
        ...


class _IExternalInterfaceProxy:
    """
    stability
    :stability: experimental
    external:
    :external:: true
    """

    __jsii_type__ = "jsii-calc.IExternalInterface"

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        """
        stability
        :stability: experimental
        external:
        :external:: true
        """
        return jsii.get(self, "mutableProperty")

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        """
        stability
        :stability: experimental
        external:
        :external:: true
        """
        return jsii.invoke(self, "method", [])


@jsii.interface(jsii_type="jsii-calc.IFriendlier")
class IFriendlier(scope.jsii_calc_lib.IFriendly, jsii.compat.Protocol):
    """Even friendlier classes can implement this interface.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IFriendlierProxy

    @jsii.member(jsii_name="farewell")
    def farewell(self) -> str:
        """Say farewell.

        stability
        :stability: experimental
        """
        ...

    @jsii.member(jsii_name="goodbye")
    def goodbye(self) -> str:
        """Say goodbye.

        return
        :return: A goodbye blessing.

        stability
        :stability: experimental
        """
        ...


class _IFriendlierProxy(jsii.proxy_for(scope.jsii_calc_lib.IFriendly)):
    """Even friendlier classes can implement this interface.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IFriendlier"

    @jsii.member(jsii_name="farewell")
    def farewell(self) -> str:
        """Say farewell.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "farewell", [])

    @jsii.member(jsii_name="goodbye")
    def goodbye(self) -> str:
        """Say goodbye.

        return
        :return: A goodbye blessing.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "goodbye", [])


@jsii.interface(jsii_type="jsii-calc.IInterfaceImplementedByAbstractClass")
class IInterfaceImplementedByAbstractClass(jsii.compat.Protocol):
    """awslabs/jsii#220 Abstract return type.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IInterfaceImplementedByAbstractClassProxy

    @builtins.property
    @jsii.member(jsii_name="propFromInterface")
    def prop_from_interface(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...


class _IInterfaceImplementedByAbstractClassProxy:
    """awslabs/jsii#220 Abstract return type.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IInterfaceImplementedByAbstractClass"

    @builtins.property
    @jsii.member(jsii_name="propFromInterface")
    def prop_from_interface(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "propFromInterface")


@jsii.interface(jsii_type="jsii-calc.IInterfaceWithInternal")
class IInterfaceWithInternal(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IInterfaceWithInternalProxy

    @jsii.member(jsii_name="visible")
    def visible(self) -> None:
        """
        stability
        :stability: experimental
        """
        ...


class _IInterfaceWithInternalProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IInterfaceWithInternal"

    @jsii.member(jsii_name="visible")
    def visible(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "visible", [])


@jsii.interface(jsii_type="jsii-calc.IInterfaceWithMethods")
class IInterfaceWithMethods(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IInterfaceWithMethodsProxy

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...

    @jsii.member(jsii_name="doThings")
    def do_things(self) -> None:
        """
        stability
        :stability: experimental
        """
        ...


class _IInterfaceWithMethodsProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IInterfaceWithMethods"

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "value")

    @jsii.member(jsii_name="doThings")
    def do_things(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "doThings", [])


@jsii.interface(jsii_type="jsii-calc.IInterfaceWithOptionalMethodArguments")
class IInterfaceWithOptionalMethodArguments(jsii.compat.Protocol):
    """awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IInterfaceWithOptionalMethodArgumentsProxy

    @jsii.member(jsii_name="hello")
    def hello(self, arg1: str, arg2: typing.Optional[jsii.Number] = None) -> None:
        """
        :param arg1: -
        :param arg2: -

        stability
        :stability: experimental
        """
        ...


class _IInterfaceWithOptionalMethodArgumentsProxy:
    """awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IInterfaceWithOptionalMethodArguments"

    @jsii.member(jsii_name="hello")
    def hello(self, arg1: str, arg2: typing.Optional[jsii.Number] = None) -> None:
        """
        :param arg1: -
        :param arg2: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "hello", [arg1, arg2])


@jsii.interface(jsii_type="jsii-calc.IInterfaceWithProperties")
class IInterfaceWithProperties(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IInterfaceWithPropertiesProxy

    @builtins.property
    @jsii.member(jsii_name="readOnlyString")
    def read_only_string(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...

    @builtins.property
    @jsii.member(jsii_name="readWriteString")
    def read_write_string(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...

    @read_write_string.setter
    def read_write_string(self, value: str) -> None:
        ...


class _IInterfaceWithPropertiesProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IInterfaceWithProperties"

    @builtins.property
    @jsii.member(jsii_name="readOnlyString")
    def read_only_string(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "readOnlyString")

    @builtins.property
    @jsii.member(jsii_name="readWriteString")
    def read_write_string(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "readWriteString")

    @read_write_string.setter
    def read_write_string(self, value: str) -> None:
        jsii.set(self, "readWriteString", value)


@jsii.interface(jsii_type="jsii-calc.IInterfaceWithPropertiesExtension")
class IInterfaceWithPropertiesExtension(IInterfaceWithProperties, jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IInterfaceWithPropertiesExtensionProxy

    @builtins.property
    @jsii.member(jsii_name="foo")
    def foo(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        ...

    @foo.setter
    def foo(self, value: jsii.Number) -> None:
        ...


class _IInterfaceWithPropertiesExtensionProxy(jsii.proxy_for(IInterfaceWithProperties)):
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IInterfaceWithPropertiesExtension"

    @builtins.property
    @jsii.member(jsii_name="foo")
    def foo(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "foo")

    @foo.setter
    def foo(self, value: jsii.Number) -> None:
        jsii.set(self, "foo", value)


@jsii.interface(jsii_type="jsii-calc.IJSII417PublicBaseOfBase")
class IJSII417PublicBaseOfBase(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IJSII417PublicBaseOfBaseProxy

    @builtins.property
    @jsii.member(jsii_name="hasRoot")
    def has_root(self) -> bool:
        """
        stability
        :stability: experimental
        """
        ...

    @jsii.member(jsii_name="foo")
    def foo(self) -> None:
        """
        stability
        :stability: experimental
        """
        ...


class _IJSII417PublicBaseOfBaseProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IJSII417PublicBaseOfBase"

    @builtins.property
    @jsii.member(jsii_name="hasRoot")
    def has_root(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "hasRoot")

    @jsii.member(jsii_name="foo")
    def foo(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "foo", [])


@jsii.interface(jsii_type="jsii-calc.IJsii487External")
class IJsii487External(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IJsii487ExternalProxy


class _IJsii487ExternalProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IJsii487External"
    pass


@jsii.interface(jsii_type="jsii-calc.IJsii487External2")
class IJsii487External2(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IJsii487External2Proxy


class _IJsii487External2Proxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IJsii487External2"
    pass


@jsii.interface(jsii_type="jsii-calc.IJsii496")
class IJsii496(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IJsii496Proxy


class _IJsii496Proxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IJsii496"
    pass


@jsii.interface(jsii_type="jsii-calc.IMutableObjectLiteral")
class IMutableObjectLiteral(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IMutableObjectLiteralProxy

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...

    @value.setter
    def value(self, value: str) -> None:
        ...


class _IMutableObjectLiteralProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IMutableObjectLiteral"

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "value")

    @value.setter
    def value(self, value: str) -> None:
        jsii.set(self, "value", value)


@jsii.interface(jsii_type="jsii-calc.INonInternalInterface")
class INonInternalInterface(IAnotherPublicInterface, jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _INonInternalInterfaceProxy

    @builtins.property
    @jsii.member(jsii_name="b")
    def b(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...

    @b.setter
    def b(self, value: str) -> None:
        ...

    @builtins.property
    @jsii.member(jsii_name="c")
    def c(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...

    @c.setter
    def c(self, value: str) -> None:
        ...


class _INonInternalInterfaceProxy(jsii.proxy_for(IAnotherPublicInterface)):
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.INonInternalInterface"

    @builtins.property
    @jsii.member(jsii_name="b")
    def b(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "b")

    @b.setter
    def b(self, value: str) -> None:
        jsii.set(self, "b", value)

    @builtins.property
    @jsii.member(jsii_name="c")
    def c(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "c")

    @c.setter
    def c(self, value: str) -> None:
        jsii.set(self, "c", value)


@jsii.interface(jsii_type="jsii-calc.IObjectWithProperty")
class IObjectWithProperty(jsii.compat.Protocol):
    """Make sure that setters are properly called on objects with interfaces.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IObjectWithPropertyProxy

    @builtins.property
    @jsii.member(jsii_name="property")
    def property(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...

    @property.setter
    def property(self, value: str) -> None:
        ...

    @jsii.member(jsii_name="wasSet")
    def was_set(self) -> bool:
        """
        stability
        :stability: experimental
        """
        ...


class _IObjectWithPropertyProxy:
    """Make sure that setters are properly called on objects with interfaces.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IObjectWithProperty"

    @builtins.property
    @jsii.member(jsii_name="property")
    def property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "property")

    @property.setter
    def property(self, value: str) -> None:
        jsii.set(self, "property", value)

    @jsii.member(jsii_name="wasSet")
    def was_set(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "wasSet", [])


@jsii.interface(jsii_type="jsii-calc.IOptionalMethod")
class IOptionalMethod(jsii.compat.Protocol):
    """Checks that optional result from interface method code generates correctly.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IOptionalMethodProxy

    @jsii.member(jsii_name="optional")
    def optional(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        ...


class _IOptionalMethodProxy:
    """Checks that optional result from interface method code generates correctly.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IOptionalMethod"

    @jsii.member(jsii_name="optional")
    def optional(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "optional", [])


@jsii.interface(jsii_type="jsii-calc.IPrivatelyImplemented")
class IPrivatelyImplemented(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IPrivatelyImplementedProxy

    @builtins.property
    @jsii.member(jsii_name="success")
    def success(self) -> bool:
        """
        stability
        :stability: experimental
        """
        ...


class _IPrivatelyImplementedProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IPrivatelyImplemented"

    @builtins.property
    @jsii.member(jsii_name="success")
    def success(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "success")


@jsii.interface(jsii_type="jsii-calc.IPublicInterface")
class IPublicInterface(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IPublicInterfaceProxy

    @jsii.member(jsii_name="bye")
    def bye(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...


class _IPublicInterfaceProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IPublicInterface"

    @jsii.member(jsii_name="bye")
    def bye(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "bye", [])


@jsii.interface(jsii_type="jsii-calc.IPublicInterface2")
class IPublicInterface2(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IPublicInterface2Proxy

    @jsii.member(jsii_name="ciao")
    def ciao(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...


class _IPublicInterface2Proxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IPublicInterface2"

    @jsii.member(jsii_name="ciao")
    def ciao(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "ciao", [])


@jsii.interface(jsii_type="jsii-calc.IRandomNumberGenerator")
class IRandomNumberGenerator(jsii.compat.Protocol):
    """Generates random numbers.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IRandomNumberGeneratorProxy

    @jsii.member(jsii_name="next")
    def next(self) -> jsii.Number:
        """Returns another random number.

        return
        :return: A random number.

        stability
        :stability: experimental
        """
        ...


class _IRandomNumberGeneratorProxy:
    """Generates random numbers.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IRandomNumberGenerator"

    @jsii.member(jsii_name="next")
    def next(self) -> jsii.Number:
        """Returns another random number.

        return
        :return: A random number.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "next", [])


@jsii.interface(jsii_type="jsii-calc.IReturnJsii976")
class IReturnJsii976(jsii.compat.Protocol):
    """Returns a subclass of a known class which implements an interface.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IReturnJsii976Proxy

    @builtins.property
    @jsii.member(jsii_name="foo")
    def foo(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        ...


class _IReturnJsii976Proxy:
    """Returns a subclass of a known class which implements an interface.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IReturnJsii976"

    @builtins.property
    @jsii.member(jsii_name="foo")
    def foo(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "foo")


@jsii.interface(jsii_type="jsii-calc.IReturnsNumber")
class IReturnsNumber(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IReturnsNumberProxy

    @builtins.property
    @jsii.member(jsii_name="numberProp")
    def number_prop(self) -> scope.jsii_calc_lib.Number:
        """
        stability
        :stability: experimental
        """
        ...

    @jsii.member(jsii_name="obtainNumber")
    def obtain_number(self) -> scope.jsii_calc_lib.IDoublable:
        """
        stability
        :stability: experimental
        """
        ...


class _IReturnsNumberProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IReturnsNumber"

    @builtins.property
    @jsii.member(jsii_name="numberProp")
    def number_prop(self) -> scope.jsii_calc_lib.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "numberProp")

    @jsii.member(jsii_name="obtainNumber")
    def obtain_number(self) -> scope.jsii_calc_lib.IDoublable:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "obtainNumber", [])


@jsii.interface(jsii_type="jsii-calc.IStableInterface")
class IStableInterface(jsii.compat.Protocol):
    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IStableInterfaceProxy

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        ...

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        ...

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        ...


class _IStableInterfaceProxy:
    __jsii_type__ = "jsii-calc.IStableInterface"

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        return jsii.get(self, "mutableProperty")

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        return jsii.invoke(self, "method", [])


@jsii.interface(jsii_type="jsii-calc.IStructReturningDelegate")
class IStructReturningDelegate(jsii.compat.Protocol):
    """Verifies that a "pure" implementation of an interface works correctly.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IStructReturningDelegateProxy

    @jsii.member(jsii_name="returnStruct")
    def return_struct(self) -> "StructB":
        """
        stability
        :stability: experimental
        """
        ...


class _IStructReturningDelegateProxy:
    """Verifies that a "pure" implementation of an interface works correctly.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IStructReturningDelegate"

    @jsii.member(jsii_name="returnStruct")
    def return_struct(self) -> "StructB":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "returnStruct", [])


class ImplementInternalInterface(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ImplementInternalInterface"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ImplementInternalInterface, self, [])

    @builtins.property
    @jsii.member(jsii_name="prop")
    def prop(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "prop")

    @prop.setter
    def prop(self, value: str) -> None:
        jsii.set(self, "prop", value)


class Implementation(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Implementation"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Implementation, self, [])

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "value")


@jsii.implements(IInterfaceWithInternal)
class ImplementsInterfaceWithInternal(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ImplementsInterfaceWithInternal"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ImplementsInterfaceWithInternal, self, [])

    @jsii.member(jsii_name="visible")
    def visible(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "visible", [])


class ImplementsInterfaceWithInternalSubclass(
    ImplementsInterfaceWithInternal,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ImplementsInterfaceWithInternalSubclass",
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ImplementsInterfaceWithInternalSubclass, self, [])


class ImplementsPrivateInterface(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ImplementsPrivateInterface"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ImplementsPrivateInterface, self, [])

    @builtins.property
    @jsii.member(jsii_name="private")
    def private(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "private")

    @private.setter
    def private(self, value: str) -> None:
        jsii.set(self, "private", value)


@jsii.data_type(
    jsii_type="jsii-calc.ImplictBaseOfBase",
    jsii_struct_bases=[scope.jsii_calc_base.BaseProps],
    name_mapping={"foo": "foo", "bar": "bar", "goo": "goo"},
)
class ImplictBaseOfBase(scope.jsii_calc_base.BaseProps):
    def __init__(
        self,
        *,
        foo: scope.jsii_calc_base_of_base.Very,
        bar: str,
        goo: datetime.datetime,
    ) -> None:
        """
        :param foo: -
        :param bar: -
        :param goo: 

        stability
        :stability: experimental
        """
        self._values = {
            "foo": foo,
            "bar": bar,
            "goo": goo,
        }

    @builtins.property
    def foo(self) -> scope.jsii_calc_base_of_base.Very:
        return self._values.get("foo")

    @builtins.property
    def bar(self) -> str:
        return self._values.get("bar")

    @builtins.property
    def goo(self) -> datetime.datetime:
        """
        stability
        :stability: experimental
        """
        return self._values.get("goo")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ImplictBaseOfBase(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class InterfaceCollections(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.InterfaceCollections"
):
    """Verifies that collections of interfaces or structs are correctly handled.

    See: https://github.com/aws/jsii/issues/1196

    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="listOfInterfaces")
    @builtins.classmethod
    def list_of_interfaces(cls) -> typing.List["IBell"]:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "listOfInterfaces", [])

    @jsii.member(jsii_name="listOfStructs")
    @builtins.classmethod
    def list_of_structs(cls) -> typing.List["StructA"]:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "listOfStructs", [])

    @jsii.member(jsii_name="mapOfInterfaces")
    @builtins.classmethod
    def map_of_interfaces(cls) -> typing.Mapping[str, "IBell"]:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "mapOfInterfaces", [])

    @jsii.member(jsii_name="mapOfStructs")
    @builtins.classmethod
    def map_of_structs(cls) -> typing.Mapping[str, "StructA"]:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "mapOfStructs", [])


class InterfacesMaker(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.InterfacesMaker"):
    """We can return arrays of interfaces See aws/aws-cdk#2362.

    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="makeInterfaces")
    @builtins.classmethod
    def make_interfaces(
        cls, count: jsii.Number
    ) -> typing.List[scope.jsii_calc_lib.IDoublable]:
        """
        :param count: -

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "makeInterfaces", [count])


class Isomorphism(metaclass=jsii.JSIIAbstractClass, jsii_type="jsii-calc.Isomorphism"):
    """Checks the "same instance" isomorphism is preserved within the constructor.

    Create a subclass of this, and assert that \`\`this.myself()\`\` actually returns
    \`\`this\`\` from within the constructor.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IsomorphismProxy

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Isomorphism, self, [])

    @jsii.member(jsii_name="myself")
    def myself(self) -> "Isomorphism":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "myself", [])


class _IsomorphismProxy(Isomorphism):
    pass


class JSII417PublicBaseOfBase(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.JSII417PublicBaseOfBase"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(JSII417PublicBaseOfBase, self, [])

    @jsii.member(jsii_name="makeInstance")
    @builtins.classmethod
    def make_instance(cls) -> "JSII417PublicBaseOfBase":
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "makeInstance", [])

    @jsii.member(jsii_name="foo")
    def foo(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "foo", [])

    @builtins.property
    @jsii.member(jsii_name="hasRoot")
    def has_root(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "hasRoot")


class JSObjectLiteralForInterface(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.JSObjectLiteralForInterface"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(JSObjectLiteralForInterface, self, [])

    @jsii.member(jsii_name="giveMeFriendly")
    def give_me_friendly(self) -> scope.jsii_calc_lib.IFriendly:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "giveMeFriendly", [])

    @jsii.member(jsii_name="giveMeFriendlyGenerator")
    def give_me_friendly_generator(self) -> "IFriendlyRandomGenerator":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "giveMeFriendlyGenerator", [])


class JSObjectLiteralToNative(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.JSObjectLiteralToNative"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(JSObjectLiteralToNative, self, [])

    @jsii.member(jsii_name="returnLiteral")
    def return_literal(self) -> "JSObjectLiteralToNativeClass":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "returnLiteral", [])


class JSObjectLiteralToNativeClass(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.JSObjectLiteralToNativeClass"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(JSObjectLiteralToNativeClass, self, [])

    @builtins.property
    @jsii.member(jsii_name="propA")
    def prop_a(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "propA")

    @prop_a.setter
    def prop_a(self, value: str) -> None:
        jsii.set(self, "propA", value)

    @builtins.property
    @jsii.member(jsii_name="propB")
    def prop_b(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "propB")

    @prop_b.setter
    def prop_b(self, value: jsii.Number) -> None:
        jsii.set(self, "propB", value)


class JavaReservedWords(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.JavaReservedWords"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(JavaReservedWords, self, [])

    @jsii.member(jsii_name="abstract")
    def abstract(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "abstract", [])

    @jsii.member(jsii_name="assert")
    def assert_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "assert", [])

    @jsii.member(jsii_name="boolean")
    def boolean(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "boolean", [])

    @jsii.member(jsii_name="break")
    def break_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "break", [])

    @jsii.member(jsii_name="byte")
    def byte(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "byte", [])

    @jsii.member(jsii_name="case")
    def case(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "case", [])

    @jsii.member(jsii_name="catch")
    def catch(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "catch", [])

    @jsii.member(jsii_name="char")
    def char(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "char", [])

    @jsii.member(jsii_name="class")
    def class_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "class", [])

    @jsii.member(jsii_name="const")
    def const(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "const", [])

    @jsii.member(jsii_name="continue")
    def continue_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "continue", [])

    @jsii.member(jsii_name="default")
    def default(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "default", [])

    @jsii.member(jsii_name="do")
    def do(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "do", [])

    @jsii.member(jsii_name="double")
    def double(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "double", [])

    @jsii.member(jsii_name="else")
    def else_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "else", [])

    @jsii.member(jsii_name="enum")
    def enum(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "enum", [])

    @jsii.member(jsii_name="extends")
    def extends(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "extends", [])

    @jsii.member(jsii_name="false")
    def false(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "false", [])

    @jsii.member(jsii_name="final")
    def final(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "final", [])

    @jsii.member(jsii_name="finally")
    def finally_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "finally", [])

    @jsii.member(jsii_name="float")
    def float(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "float", [])

    @jsii.member(jsii_name="for")
    def for_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "for", [])

    @jsii.member(jsii_name="goto")
    def goto(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "goto", [])

    @jsii.member(jsii_name="if")
    def if_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "if", [])

    @jsii.member(jsii_name="implements")
    def implements(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "implements", [])

    @jsii.member(jsii_name="import")
    def import_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "import", [])

    @jsii.member(jsii_name="instanceof")
    def instanceof(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "instanceof", [])

    @jsii.member(jsii_name="int")
    def int(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "int", [])

    @jsii.member(jsii_name="interface")
    def interface(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "interface", [])

    @jsii.member(jsii_name="long")
    def long(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "long", [])

    @jsii.member(jsii_name="native")
    def native(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "native", [])

    @jsii.member(jsii_name="new")
    def new(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "new", [])

    @jsii.member(jsii_name="null")
    def null(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "null", [])

    @jsii.member(jsii_name="package")
    def package(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "package", [])

    @jsii.member(jsii_name="private")
    def private(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "private", [])

    @jsii.member(jsii_name="protected")
    def protected(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "protected", [])

    @jsii.member(jsii_name="public")
    def public(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "public", [])

    @jsii.member(jsii_name="return")
    def return_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "return", [])

    @jsii.member(jsii_name="short")
    def short(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "short", [])

    @jsii.member(jsii_name="static")
    def static(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "static", [])

    @jsii.member(jsii_name="strictfp")
    def strictfp(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "strictfp", [])

    @jsii.member(jsii_name="super")
    def super(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "super", [])

    @jsii.member(jsii_name="switch")
    def switch(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "switch", [])

    @jsii.member(jsii_name="synchronized")
    def synchronized(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "synchronized", [])

    @jsii.member(jsii_name="this")
    def this(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "this", [])

    @jsii.member(jsii_name="throw")
    def throw(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "throw", [])

    @jsii.member(jsii_name="throws")
    def throws(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "throws", [])

    @jsii.member(jsii_name="transient")
    def transient(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "transient", [])

    @jsii.member(jsii_name="true")
    def true(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "true", [])

    @jsii.member(jsii_name="try")
    def try_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "try", [])

    @jsii.member(jsii_name="void")
    def void(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "void", [])

    @jsii.member(jsii_name="volatile")
    def volatile(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "volatile", [])

    @builtins.property
    @jsii.member(jsii_name="while")
    def while_(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "while")

    @while_.setter
    def while_(self, value: str) -> None:
        jsii.set(self, "while", value)


@jsii.implements(IJsii487External2, IJsii487External)
class Jsii487Derived(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Jsii487Derived"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Jsii487Derived, self, [])


@jsii.implements(IJsii496)
class Jsii496Derived(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Jsii496Derived"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Jsii496Derived, self, [])


class JsiiAgent(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.JsiiAgent"):
    """Host runtime version should be set via JSII_AGENT.

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(JsiiAgent, self, [])

    @jsii.python.classproperty
    @jsii.member(jsii_name="jsiiAgent")
    def jsii_agent(cls) -> typing.Optional[str]:
        """Returns the value of the JSII_AGENT environment variable.

        stability
        :stability: experimental
        """
        return jsii.sget(cls, "jsiiAgent")


class JsonFormatter(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.JsonFormatter"):
    """Make sure structs are un-decorated on the way in.

    see
    :see: https://github.com/aws/aws-cdk/issues/5066
    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="anyArray")
    @builtins.classmethod
    def any_array(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyArray", [])

    @jsii.member(jsii_name="anyBooleanFalse")
    @builtins.classmethod
    def any_boolean_false(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyBooleanFalse", [])

    @jsii.member(jsii_name="anyBooleanTrue")
    @builtins.classmethod
    def any_boolean_true(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyBooleanTrue", [])

    @jsii.member(jsii_name="anyDate")
    @builtins.classmethod
    def any_date(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyDate", [])

    @jsii.member(jsii_name="anyEmptyString")
    @builtins.classmethod
    def any_empty_string(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyEmptyString", [])

    @jsii.member(jsii_name="anyFunction")
    @builtins.classmethod
    def any_function(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyFunction", [])

    @jsii.member(jsii_name="anyHash")
    @builtins.classmethod
    def any_hash(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyHash", [])

    @jsii.member(jsii_name="anyNull")
    @builtins.classmethod
    def any_null(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyNull", [])

    @jsii.member(jsii_name="anyNumber")
    @builtins.classmethod
    def any_number(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyNumber", [])

    @jsii.member(jsii_name="anyRef")
    @builtins.classmethod
    def any_ref(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyRef", [])

    @jsii.member(jsii_name="anyString")
    @builtins.classmethod
    def any_string(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyString", [])

    @jsii.member(jsii_name="anyUndefined")
    @builtins.classmethod
    def any_undefined(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyUndefined", [])

    @jsii.member(jsii_name="anyZero")
    @builtins.classmethod
    def any_zero(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "anyZero", [])

    @jsii.member(jsii_name="stringify")
    @builtins.classmethod
    def stringify(cls, value: typing.Any = None) -> typing.Optional[str]:
        """
        :param value: -

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "stringify", [value])


@jsii.data_type(
    jsii_type="jsii-calc.LoadBalancedFargateServiceProps",
    jsii_struct_bases=[],
    name_mapping={
        "container_port": "containerPort",
        "cpu": "cpu",
        "memory_mib": "memoryMiB",
        "public_load_balancer": "publicLoadBalancer",
        "public_tasks": "publicTasks",
    },
)
class LoadBalancedFargateServiceProps:
    def __init__(
        self,
        *,
        container_port: typing.Optional[jsii.Number] = None,
        cpu: typing.Optional[str] = None,
        memory_mib: typing.Optional[str] = None,
        public_load_balancer: typing.Optional[bool] = None,
        public_tasks: typing.Optional[bool] = None,
    ) -> None:
        """jsii#298: show default values in sphinx documentation, and respect newlines.

        :param container_port: The container port of the application load balancer attached to your Fargate service. Corresponds to container port mapping. Default: 80
        :param cpu: The number of cpu units used by the task. Valid values, which determines your range of valid values for the memory parameter: 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments This default is set in the underlying FargateTaskDefinition construct. Default: 256
        :param memory_mib: The amount (in MiB) of memory used by the task. This field is required and you must use one of the following values, which determines your range of valid values for the cpu parameter: 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU) 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU) 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU) Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU) Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU) This default is set in the underlying FargateTaskDefinition construct. Default: 512
        :param public_load_balancer: Determines whether the Application Load Balancer will be internet-facing. Default: true
        :param public_tasks: Determines whether your Fargate Service will be assigned a public IP address. Default: false

        stability
        :stability: experimental
        """
        self._values = {}
        if container_port is not None:
            self._values["container_port"] = container_port
        if cpu is not None:
            self._values["cpu"] = cpu
        if memory_mib is not None:
            self._values["memory_mib"] = memory_mib
        if public_load_balancer is not None:
            self._values["public_load_balancer"] = public_load_balancer
        if public_tasks is not None:
            self._values["public_tasks"] = public_tasks

    @builtins.property
    def container_port(self) -> typing.Optional[jsii.Number]:
        """The container port of the application load balancer attached to your Fargate service.

        Corresponds to container port mapping.

        default
        :default: 80

        stability
        :stability: experimental
        """
        return self._values.get("container_port")

    @builtins.property
    def cpu(self) -> typing.Optional[str]:
        """The number of cpu units used by the task.

        Valid values, which determines your range of valid values for the memory parameter:
        256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
        512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
        1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
        2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
        4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments

        This default is set in the underlying FargateTaskDefinition construct.

        default
        :default: 256

        stability
        :stability: experimental
        """
        return self._values.get("cpu")

    @builtins.property
    def memory_mib(self) -> typing.Optional[str]:
        """The amount (in MiB) of memory used by the task.

        This field is required and you must use one of the following values, which determines your range of valid values
        for the cpu parameter:

        0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)

        1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)

        2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)

        Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)

        Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)

        This default is set in the underlying FargateTaskDefinition construct.

        default
        :default: 512

        stability
        :stability: experimental
        """
        return self._values.get("memory_mib")

    @builtins.property
    def public_load_balancer(self) -> typing.Optional[bool]:
        """Determines whether the Application Load Balancer will be internet-facing.

        default
        :default: true

        stability
        :stability: experimental
        """
        return self._values.get("public_load_balancer")

    @builtins.property
    def public_tasks(self) -> typing.Optional[bool]:
        """Determines whether your Fargate Service will be assigned a public IP address.

        default
        :default: false

        stability
        :stability: experimental
        """
        return self._values.get("public_tasks")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "LoadBalancedFargateServiceProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MethodNamedProperty(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.MethodNamedProperty"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(MethodNamedProperty, self, [])

    @jsii.member(jsii_name="property")
    def property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "property", [])

    @builtins.property
    @jsii.member(jsii_name="elite")
    def elite(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "elite")


@jsii.implements(IFriendlier, IRandomNumberGenerator)
class Multiply(
    BinaryOperation, metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Multiply"
):
    """The "*" binary operation.

    stability
    :stability: experimental
    """

    def __init__(
        self, lhs: scope.jsii_calc_lib.Value, rhs: scope.jsii_calc_lib.Value
    ) -> None:
        """Creates a BinaryOperation.

        :param lhs: Left-hand side operand.
        :param rhs: Right-hand side operand.

        stability
        :stability: experimental
        """
        jsii.create(Multiply, self, [lhs, rhs])

    @jsii.member(jsii_name="farewell")
    def farewell(self) -> str:
        """Say farewell.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "farewell", [])

    @jsii.member(jsii_name="goodbye")
    def goodbye(self) -> str:
        """Say goodbye.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "goodbye", [])

    @jsii.member(jsii_name="next")
    def next(self) -> jsii.Number:
        """Returns another random number.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "next", [])

    @jsii.member(jsii_name="toString")
    def to_string(self) -> str:
        """String representation of the value.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "toString", [])

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        """The value.

        stability
        :stability: experimental
        """
        return jsii.get(self, "value")


class NestedClassInstance(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.NestedClassInstance"
):
    """
    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="makeInstance")
    @builtins.classmethod
    def make_instance(
        cls
    ) -> scope.jsii_calc_lib.custom_submodule_name.NestingClass.NestedClass:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "makeInstance", [])


@jsii.data_type(
    jsii_type="jsii-calc.NestedStruct",
    jsii_struct_bases=[],
    name_mapping={"number_prop": "numberProp"},
)
class NestedStruct:
    def __init__(self, *, number_prop: jsii.Number) -> None:
        """
        :param number_prop: When provided, must be > 0.

        stability
        :stability: experimental
        """
        self._values = {
            "number_prop": number_prop,
        }

    @builtins.property
    def number_prop(self) -> jsii.Number:
        """When provided, must be > 0.

        stability
        :stability: experimental
        """
        return self._values.get("number_prop")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "NestedStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class NodeStandardLibrary(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.NodeStandardLibrary"
):
    """Test fixture to verify that jsii modules can use the node standard library.

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(NodeStandardLibrary, self, [])

    @jsii.member(jsii_name="cryptoSha256")
    def crypto_sha256(self) -> str:
        """Uses node.js "crypto" module to calculate sha256 of a string.

        return
        :return: "6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50"

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "cryptoSha256", [])

    @jsii.member(jsii_name="fsReadFile")
    def fs_read_file(self) -> str:
        """Reads a local resource file (resource.txt) asynchronously.

        return
        :return: "Hello, resource!"

        stability
        :stability: experimental
        """
        return jsii.ainvoke(self, "fsReadFile", [])

    @jsii.member(jsii_name="fsReadFileSync")
    def fs_read_file_sync(self) -> str:
        """Sync version of fsReadFile.

        return
        :return: "Hello, resource! SYNC!"

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "fsReadFileSync", [])

    @builtins.property
    @jsii.member(jsii_name="osPlatform")
    def os_platform(self) -> str:
        """Returns the current os.platform() from the "os" node module.

        stability
        :stability: experimental
        """
        return jsii.get(self, "osPlatform")


class NullShouldBeTreatedAsUndefined(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.NullShouldBeTreatedAsUndefined"
):
    """jsii#282, aws-cdk#157: null should be treated as "undefined".

    stability
    :stability: experimental
    """

    def __init__(self, _param1: str, optional: typing.Any = None) -> None:
        """
        :param _param1: -
        :param optional: -

        stability
        :stability: experimental
        """
        jsii.create(NullShouldBeTreatedAsUndefined, self, [_param1, optional])

    @jsii.member(jsii_name="giveMeUndefined")
    def give_me_undefined(self, value: typing.Any = None) -> None:
        """
        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "giveMeUndefined", [value])

    @jsii.member(jsii_name="giveMeUndefinedInsideAnObject")
    def give_me_undefined_inside_an_object(
        self,
        *,
        array_with_three_elements_and_undefined_as_second_argument: typing.List[typing.Any],
        this_should_be_undefined: typing.Any = None,
    ) -> None:
        """
        :param array_with_three_elements_and_undefined_as_second_argument: 
        :param this_should_be_undefined: 

        stability
        :stability: experimental
        """
        input = NullShouldBeTreatedAsUndefinedData(
            array_with_three_elements_and_undefined_as_second_argument=array_with_three_elements_and_undefined_as_second_argument,
            this_should_be_undefined=this_should_be_undefined,
        )

        return jsii.invoke(self, "giveMeUndefinedInsideAnObject", [input])

    @jsii.member(jsii_name="verifyPropertyIsUndefined")
    def verify_property_is_undefined(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "verifyPropertyIsUndefined", [])

    @builtins.property
    @jsii.member(jsii_name="changeMeToUndefined")
    def change_me_to_undefined(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "changeMeToUndefined")

    @change_me_to_undefined.setter
    def change_me_to_undefined(self, value: typing.Optional[str]) -> None:
        jsii.set(self, "changeMeToUndefined", value)


@jsii.data_type(
    jsii_type="jsii-calc.NullShouldBeTreatedAsUndefinedData",
    jsii_struct_bases=[],
    name_mapping={
        "array_with_three_elements_and_undefined_as_second_argument": "arrayWithThreeElementsAndUndefinedAsSecondArgument",
        "this_should_be_undefined": "thisShouldBeUndefined",
    },
)
class NullShouldBeTreatedAsUndefinedData:
    def __init__(
        self,
        *,
        array_with_three_elements_and_undefined_as_second_argument: typing.List[typing.Any],
        this_should_be_undefined: typing.Any = None,
    ) -> None:
        """
        :param array_with_three_elements_and_undefined_as_second_argument: 
        :param this_should_be_undefined: 

        stability
        :stability: experimental
        """
        self._values = {
            "array_with_three_elements_and_undefined_as_second_argument": array_with_three_elements_and_undefined_as_second_argument,
        }
        if this_should_be_undefined is not None:
            self._values["this_should_be_undefined"] = this_should_be_undefined

    @builtins.property
    def array_with_three_elements_and_undefined_as_second_argument(
        self,
    ) -> typing.List[typing.Any]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("array_with_three_elements_and_undefined_as_second_argument")

    @builtins.property
    def this_should_be_undefined(self) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return self._values.get("this_should_be_undefined")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "NullShouldBeTreatedAsUndefinedData(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class NumberGenerator(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.NumberGenerator"):
    """This allows us to test that a reference can be stored for objects that implement interfaces.

    stability
    :stability: experimental
    """

    def __init__(self, generator: "IRandomNumberGenerator") -> None:
        """
        :param generator: -

        stability
        :stability: experimental
        """
        jsii.create(NumberGenerator, self, [generator])

    @jsii.member(jsii_name="isSameGenerator")
    def is_same_generator(self, gen: "IRandomNumberGenerator") -> bool:
        """
        :param gen: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "isSameGenerator", [gen])

    @jsii.member(jsii_name="nextTimes100")
    def next_times100(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "nextTimes100", [])

    @builtins.property
    @jsii.member(jsii_name="generator")
    def generator(self) -> "IRandomNumberGenerator":
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "generator")

    @generator.setter
    def generator(self, value: "IRandomNumberGenerator") -> None:
        jsii.set(self, "generator", value)


class ObjectRefsInCollections(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ObjectRefsInCollections"
):
    """Verify that object references can be passed inside collections.

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ObjectRefsInCollections, self, [])

    @jsii.member(jsii_name="sumFromArray")
    def sum_from_array(
        self, values: typing.List[scope.jsii_calc_lib.Value]
    ) -> jsii.Number:
        """Returns the sum of all values.

        :param values: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "sumFromArray", [values])

    @jsii.member(jsii_name="sumFromMap")
    def sum_from_map(
        self, values: typing.Mapping[str, scope.jsii_calc_lib.Value]
    ) -> jsii.Number:
        """Returns the sum of all values in a map.

        :param values: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "sumFromMap", [values])


class ObjectWithPropertyProvider(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ObjectWithPropertyProvider"
):
    """
    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="provide")
    @builtins.classmethod
    def provide(cls) -> "IObjectWithProperty":
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "provide", [])


class Old(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Old"):
    """Old class.

    deprecated
    :deprecated: Use the new class

    stability
    :stability: deprecated
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Old, self, [])

    @jsii.member(jsii_name="doAThing")
    def do_a_thing(self) -> None:
        """Doo wop that thing.

        stability
        :stability: deprecated
        """
        return jsii.invoke(self, "doAThing", [])


class OptionalArgumentInvoker(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.OptionalArgumentInvoker"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self, delegate: "IInterfaceWithOptionalMethodArguments") -> None:
        """
        :param delegate: -

        stability
        :stability: experimental
        """
        jsii.create(OptionalArgumentInvoker, self, [delegate])

    @jsii.member(jsii_name="invokeWithOptional")
    def invoke_with_optional(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "invokeWithOptional", [])

    @jsii.member(jsii_name="invokeWithoutOptional")
    def invoke_without_optional(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "invokeWithoutOptional", [])


class OptionalConstructorArgument(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.OptionalConstructorArgument"
):
    """
    stability
    :stability: experimental
    """

    def __init__(
        self,
        arg1: jsii.Number,
        arg2: str,
        arg3: typing.Optional[datetime.datetime] = None,
    ) -> None:
        """
        :param arg1: -
        :param arg2: -
        :param arg3: -

        stability
        :stability: experimental
        """
        jsii.create(OptionalConstructorArgument, self, [arg1, arg2, arg3])

    @builtins.property
    @jsii.member(jsii_name="arg1")
    def arg1(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "arg1")

    @builtins.property
    @jsii.member(jsii_name="arg2")
    def arg2(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "arg2")

    @builtins.property
    @jsii.member(jsii_name="arg3")
    def arg3(self) -> typing.Optional[datetime.datetime]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "arg3")


@jsii.data_type(
    jsii_type="jsii-calc.OptionalStruct",
    jsii_struct_bases=[],
    name_mapping={"field": "field"},
)
class OptionalStruct:
    def __init__(self, *, field: typing.Optional[str] = None) -> None:
        """
        :param field: 

        stability
        :stability: experimental
        """
        self._values = {}
        if field is not None:
            self._values["field"] = field

    @builtins.property
    def field(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("field")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OptionalStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OptionalStructConsumer(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.OptionalStructConsumer"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self, *, field: typing.Optional[str] = None) -> None:
        """
        :param field: 

        stability
        :stability: experimental
        """
        optional_struct = OptionalStruct(field=field)

        jsii.create(OptionalStructConsumer, self, [optional_struct])

    @builtins.property
    @jsii.member(jsii_name="parameterWasUndefined")
    def parameter_was_undefined(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "parameterWasUndefined")

    @builtins.property
    @jsii.member(jsii_name="fieldValue")
    def field_value(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "fieldValue")


class OverridableProtectedMember(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.OverridableProtectedMember"
):
    """
    see
    :see: https://github.com/aws/jsii/issues/903
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(OverridableProtectedMember, self, [])

    @jsii.member(jsii_name="overrideMe")
    def _override_me(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "overrideMe", [])

    @jsii.member(jsii_name="switchModes")
    def switch_modes(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "switchModes", [])

    @jsii.member(jsii_name="valueFromProtected")
    def value_from_protected(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "valueFromProtected", [])

    @builtins.property
    @jsii.member(jsii_name="overrideReadOnly")
    def _override_read_only(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "overrideReadOnly")

    @builtins.property
    @jsii.member(jsii_name="overrideReadWrite")
    def _override_read_write(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "overrideReadWrite")

    @_override_read_write.setter
    def _override_read_write(self, value: str) -> None:
        jsii.set(self, "overrideReadWrite", value)


class OverrideReturnsObject(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.OverrideReturnsObject"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(OverrideReturnsObject, self, [])

    @jsii.member(jsii_name="test")
    def test(self, obj: "IReturnsNumber") -> jsii.Number:
        """
        :param obj: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "test", [obj])


@jsii.data_type(
    jsii_type="jsii-calc.ParentStruct982",
    jsii_struct_bases=[],
    name_mapping={"foo": "foo"},
)
class ParentStruct982:
    def __init__(self, *, foo: str) -> None:
        """https://github.com/aws/jsii/issues/982.

        :param foo: 

        stability
        :stability: experimental
        """
        self._values = {
            "foo": foo,
        }

    @builtins.property
    def foo(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("foo")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ParentStruct982(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class PartiallyInitializedThisConsumer(
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.PartiallyInitializedThisConsumer",
):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _PartiallyInitializedThisConsumerProxy

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(PartiallyInitializedThisConsumer, self, [])

    @jsii.member(jsii_name="consumePartiallyInitializedThis")
    @abc.abstractmethod
    def consume_partially_initialized_this(
        self,
        obj: "ConstructorPassesThisOut",
        dt: datetime.datetime,
        ev: "AllTypesEnum",
    ) -> str:
        """
        :param obj: -
        :param dt: -
        :param ev: -

        stability
        :stability: experimental
        """
        ...


class _PartiallyInitializedThisConsumerProxy(PartiallyInitializedThisConsumer):
    @jsii.member(jsii_name="consumePartiallyInitializedThis")
    def consume_partially_initialized_this(
        self,
        obj: "ConstructorPassesThisOut",
        dt: datetime.datetime,
        ev: "AllTypesEnum",
    ) -> str:
        """
        :param obj: -
        :param dt: -
        :param ev: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "consumePartiallyInitializedThis", [obj, dt, ev])


class Polymorphism(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Polymorphism"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Polymorphism, self, [])

    @jsii.member(jsii_name="sayHello")
    def say_hello(self, friendly: scope.jsii_calc_lib.IFriendly) -> str:
        """
        :param friendly: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "sayHello", [friendly])


class Power(
    _CompositeOperation_1c4d123b, metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Power"
):
    """The power operation.

    stability
    :stability: experimental
    """

    def __init__(
        self, base: scope.jsii_calc_lib.Value, pow: scope.jsii_calc_lib.Value
    ) -> None:
        """Creates a Power operation.

        :param base: The base of the power.
        :param pow: The number of times to multiply.

        stability
        :stability: experimental
        """
        jsii.create(Power, self, [base, pow])

    @builtins.property
    @jsii.member(jsii_name="base")
    def base(self) -> scope.jsii_calc_lib.Value:
        """The base of the power.

        stability
        :stability: experimental
        """
        return jsii.get(self, "base")

    @builtins.property
    @jsii.member(jsii_name="expression")
    def expression(self) -> scope.jsii_calc_lib.Value:
        """The expression that this operation consists of.

        Must be implemented by derived classes.

        stability
        :stability: experimental
        """
        return jsii.get(self, "expression")

    @builtins.property
    @jsii.member(jsii_name="pow")
    def pow(self) -> scope.jsii_calc_lib.Value:
        """The number of times to multiply.

        stability
        :stability: experimental
        """
        return jsii.get(self, "pow")


class PropertyNamedProperty(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.PropertyNamedProperty"
):
    """Reproduction for https://github.com/aws/jsii/issues/1113 Where a method or property named "property" would result in impossible to load Python code.

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(PropertyNamedProperty, self, [])

    @builtins.property
    @jsii.member(jsii_name="property")
    def property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "property")

    @builtins.property
    @jsii.member(jsii_name="yetAnoterOne")
    def yet_anoter_one(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "yetAnoterOne")


class PublicClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.PublicClass"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(PublicClass, self, [])

    @jsii.member(jsii_name="hello")
    def hello(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "hello", [])


class PythonReservedWords(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.PythonReservedWords"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(PythonReservedWords, self, [])

    @jsii.member(jsii_name="and")
    def and_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "and", [])

    @jsii.member(jsii_name="as")
    def as_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "as", [])

    @jsii.member(jsii_name="assert")
    def assert_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "assert", [])

    @jsii.member(jsii_name="async")
    def async_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "async", [])

    @jsii.member(jsii_name="await")
    def await_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "await", [])

    @jsii.member(jsii_name="break")
    def break_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "break", [])

    @jsii.member(jsii_name="class")
    def class_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "class", [])

    @jsii.member(jsii_name="continue")
    def continue_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "continue", [])

    @jsii.member(jsii_name="def")
    def def_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "def", [])

    @jsii.member(jsii_name="del")
    def del_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "del", [])

    @jsii.member(jsii_name="elif")
    def elif_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "elif", [])

    @jsii.member(jsii_name="else")
    def else_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "else", [])

    @jsii.member(jsii_name="except")
    def except_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "except", [])

    @jsii.member(jsii_name="finally")
    def finally_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "finally", [])

    @jsii.member(jsii_name="for")
    def for_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "for", [])

    @jsii.member(jsii_name="from")
    def from_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "from", [])

    @jsii.member(jsii_name="global")
    def global_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "global", [])

    @jsii.member(jsii_name="if")
    def if_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "if", [])

    @jsii.member(jsii_name="import")
    def import_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "import", [])

    @jsii.member(jsii_name="in")
    def in_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "in", [])

    @jsii.member(jsii_name="is")
    def is_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "is", [])

    @jsii.member(jsii_name="lambda")
    def lambda_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "lambda", [])

    @jsii.member(jsii_name="nonlocal")
    def nonlocal_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "nonlocal", [])

    @jsii.member(jsii_name="not")
    def not_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "not", [])

    @jsii.member(jsii_name="or")
    def or_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "or", [])

    @jsii.member(jsii_name="pass")
    def pass_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "pass", [])

    @jsii.member(jsii_name="raise")
    def raise_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "raise", [])

    @jsii.member(jsii_name="return")
    def return_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "return", [])

    @jsii.member(jsii_name="try")
    def try_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "try", [])

    @jsii.member(jsii_name="while")
    def while_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "while", [])

    @jsii.member(jsii_name="with")
    def with_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "with", [])

    @jsii.member(jsii_name="yield")
    def yield_(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "yield", [])


class ReferenceEnumFromScopedPackage(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ReferenceEnumFromScopedPackage"
):
    """See awslabs/jsii#138.

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ReferenceEnumFromScopedPackage, self, [])

    @jsii.member(jsii_name="loadFoo")
    def load_foo(self) -> typing.Optional[scope.jsii_calc_lib.EnumFromScopedModule]:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "loadFoo", [])

    @jsii.member(jsii_name="saveFoo")
    def save_foo(self, value: scope.jsii_calc_lib.EnumFromScopedModule) -> None:
        """
        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "saveFoo", [value])

    @builtins.property
    @jsii.member(jsii_name="foo")
    def foo(self) -> typing.Optional[scope.jsii_calc_lib.EnumFromScopedModule]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "foo")

    @foo.setter
    def foo(
        self, value: typing.Optional[scope.jsii_calc_lib.EnumFromScopedModule]
    ) -> None:
        jsii.set(self, "foo", value)


class ReturnsPrivateImplementationOfInterface(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ReturnsPrivateImplementationOfInterface",
):
    """Helps ensure the JSII kernel & runtime cooperate correctly when an un-exported instance of a class is returned with a declared type that is an exported interface, and the instance inherits from an exported class.

    return
    :return: an instance of an un-exported class that extends \`\`ExportedBaseClass\`\`, declared as \`\`IPrivatelyImplemented\`\`.

    see
    :see: https://github.com/aws/jsii/issues/320
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ReturnsPrivateImplementationOfInterface, self, [])

    @builtins.property
    @jsii.member(jsii_name="privateImplementation")
    def private_implementation(self) -> "IPrivatelyImplemented":
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "privateImplementation")


@jsii.data_type(
    jsii_type="jsii-calc.RootStruct",
    jsii_struct_bases=[],
    name_mapping={"string_prop": "stringProp", "nested_struct": "nestedStruct"},
)
class RootStruct:
    def __init__(
        self,
        *,
        string_prop: str,
        nested_struct: typing.Optional["NestedStruct"] = None,
    ) -> None:
        """This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.

        This is cheating with the (current) declared types, but this is the "more
        idiomatic" way for Pythonists.

        :param string_prop: May not be empty.
        :param nested_struct: 

        stability
        :stability: experimental
        """
        if isinstance(nested_struct, dict):
            nested_struct = NestedStruct(**nested_struct)
        self._values = {
            "string_prop": string_prop,
        }
        if nested_struct is not None:
            self._values["nested_struct"] = nested_struct

    @builtins.property
    def string_prop(self) -> str:
        """May not be empty.

        stability
        :stability: experimental
        """
        return self._values.get("string_prop")

    @builtins.property
    def nested_struct(self) -> typing.Optional["NestedStruct"]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("nested_struct")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RootStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RootStructValidator(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.RootStructValidator"
):
    """
    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="validate")
    @builtins.classmethod
    def validate(
        cls, *, string_prop: str, nested_struct: typing.Optional["NestedStruct"] = None
    ) -> None:
        """
        :param string_prop: May not be empty.
        :param nested_struct: 

        stability
        :stability: experimental
        """
        struct = RootStruct(string_prop=string_prop, nested_struct=nested_struct)

        return jsii.sinvoke(cls, "validate", [struct])


class RuntimeTypeChecking(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.RuntimeTypeChecking"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(RuntimeTypeChecking, self, [])

    @jsii.member(jsii_name="methodWithDefaultedArguments")
    def method_with_defaulted_arguments(
        self,
        arg1: typing.Optional[jsii.Number] = None,
        arg2: typing.Optional[str] = None,
        arg3: typing.Optional[datetime.datetime] = None,
    ) -> None:
        """
        :param arg1: -
        :param arg2: -
        :param arg3: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "methodWithDefaultedArguments", [arg1, arg2, arg3])

    @jsii.member(jsii_name="methodWithOptionalAnyArgument")
    def method_with_optional_any_argument(self, arg: typing.Any = None) -> None:
        """
        :param arg: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "methodWithOptionalAnyArgument", [arg])

    @jsii.member(jsii_name="methodWithOptionalArguments")
    def method_with_optional_arguments(
        self,
        arg1: jsii.Number,
        arg2: str,
        arg3: typing.Optional[datetime.datetime] = None,
    ) -> None:
        """Used to verify verification of number of method arguments.

        :param arg1: -
        :param arg2: -
        :param arg3: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "methodWithOptionalArguments", [arg1, arg2, arg3])


@jsii.data_type(
    jsii_type="jsii-calc.SecondLevelStruct",
    jsii_struct_bases=[],
    name_mapping={
        "deeper_required_prop": "deeperRequiredProp",
        "deeper_optional_prop": "deeperOptionalProp",
    },
)
class SecondLevelStruct:
    def __init__(
        self,
        *,
        deeper_required_prop: str,
        deeper_optional_prop: typing.Optional[str] = None,
    ) -> None:
        """
        :param deeper_required_prop: It's long and required.
        :param deeper_optional_prop: It's long, but you'll almost never pass it.

        stability
        :stability: experimental
        """
        self._values = {
            "deeper_required_prop": deeper_required_prop,
        }
        if deeper_optional_prop is not None:
            self._values["deeper_optional_prop"] = deeper_optional_prop

    @builtins.property
    def deeper_required_prop(self) -> str:
        """It's long and required.

        stability
        :stability: experimental
        """
        return self._values.get("deeper_required_prop")

    @builtins.property
    def deeper_optional_prop(self) -> typing.Optional[str]:
        """It's long, but you'll almost never pass it.

        stability
        :stability: experimental
        """
        return self._values.get("deeper_optional_prop")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SecondLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class SingleInstanceTwoTypes(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.SingleInstanceTwoTypes"
):
    """Test that a single instance can be returned under two different FQNs.

    JSII clients can instantiate 2 different strongly-typed wrappers for the same
    object. Unfortunately, this will break object equality, but if we didn't do
    this it would break runtime type checks in the JVM or CLR.

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(SingleInstanceTwoTypes, self, [])

    @jsii.member(jsii_name="interface1")
    def interface1(self) -> "InbetweenClass":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "interface1", [])

    @jsii.member(jsii_name="interface2")
    def interface2(self) -> "IPublicInterface":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "interface2", [])


class SingletonInt(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.SingletonInt"):
    """Verifies that singleton enums are handled correctly.

    https://github.com/aws/jsii/issues/231

    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="isSingletonInt")
    def is_singleton_int(self, value: jsii.Number) -> bool:
        """
        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "isSingletonInt", [value])


@jsii.enum(jsii_type="jsii-calc.SingletonIntEnum")
class SingletonIntEnum(enum.Enum):
    """A singleton integer.

    stability
    :stability: experimental
    """

    SINGLETON_INT = "SINGLETON_INT"
    """Elite!

    stability
    :stability: experimental
    """


class SingletonString(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.SingletonString"):
    """Verifies that singleton enums are handled correctly.

    https://github.com/aws/jsii/issues/231

    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="isSingletonString")
    def is_singleton_string(self, value: str) -> bool:
        """
        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "isSingletonString", [value])


@jsii.enum(jsii_type="jsii-calc.SingletonStringEnum")
class SingletonStringEnum(enum.Enum):
    """A singleton string.

    stability
    :stability: experimental
    """

    SINGLETON_STRING = "SINGLETON_STRING"
    """1337.

    stability
    :stability: experimental
    """


@jsii.data_type(
    jsii_type="jsii-calc.SmellyStruct",
    jsii_struct_bases=[],
    name_mapping={"property": "property", "yet_anoter_one": "yetAnoterOne"},
)
class SmellyStruct:
    def __init__(self, *, property: str, yet_anoter_one: bool) -> None:
        """
        :param property: 
        :param yet_anoter_one: 

        stability
        :stability: experimental
        """
        self._values = {
            "property": property,
            "yet_anoter_one": yet_anoter_one,
        }

    @builtins.property
    def property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("property")

    @builtins.property
    def yet_anoter_one(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return self._values.get("yet_anoter_one")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SmellyStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class SomeTypeJsii976(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.SomeTypeJsii976"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(SomeTypeJsii976, self, [])

    @jsii.member(jsii_name="returnAnonymous")
    @builtins.classmethod
    def return_anonymous(cls) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "returnAnonymous", [])

    @jsii.member(jsii_name="returnReturn")
    @builtins.classmethod
    def return_return(cls) -> "IReturnJsii976":
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "returnReturn", [])


class StableClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.StableClass"):
    def __init__(
        self, readonly_string: str, mutable_number: typing.Optional[jsii.Number] = None
    ) -> None:
        """
        :param readonly_string: -
        :param mutable_number: -
        """
        jsii.create(StableClass, self, [readonly_string, mutable_number])

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        return jsii.invoke(self, "method", [])

    @builtins.property
    @jsii.member(jsii_name="readonlyProperty")
    def readonly_property(self) -> str:
        return jsii.get(self, "readonlyProperty")

    @builtins.property
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        return jsii.get(self, "mutableProperty")

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)


@jsii.enum(jsii_type="jsii-calc.StableEnum")
class StableEnum(enum.Enum):
    OPTION_A = "OPTION_A"
    OPTION_B = "OPTION_B"


@jsii.data_type(
    jsii_type="jsii-calc.StableStruct",
    jsii_struct_bases=[],
    name_mapping={"readonly_property": "readonlyProperty"},
)
class StableStruct:
    def __init__(self, *, readonly_property: str) -> None:
        """
        :param readonly_property: 
        """
        self._values = {
            "readonly_property": readonly_property,
        }

    @builtins.property
    def readonly_property(self) -> str:
        return self._values.get("readonly_property")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StableStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class StaticContext(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.StaticContext"):
    """This is used to validate the ability to use \`\`this\`\` from within a static context.

    https://github.com/awslabs/aws-cdk/issues/2304

    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="canAccessStaticContext")
    @builtins.classmethod
    def can_access_static_context(cls) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "canAccessStaticContext", [])

    @jsii.python.classproperty
    @jsii.member(jsii_name="staticVariable")
    def static_variable(cls) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.sget(cls, "staticVariable")

    @static_variable.setter
    def static_variable(cls, value: bool) -> None:
        jsii.sset(cls, "staticVariable", value)


class Statics(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Statics"):
    """
    stability
    :stability: experimental
    """

    def __init__(self, value: str) -> None:
        """
        :param value: -

        stability
        :stability: experimental
        """
        jsii.create(Statics, self, [value])

    @jsii.member(jsii_name="staticMethod")
    @builtins.classmethod
    def static_method(cls, name: str) -> str:
        """Jsdocs for static method.

        :param name: The name of the person to say hello to.

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "staticMethod", [name])

    @jsii.member(jsii_name="justMethod")
    def just_method(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "justMethod", [])

    @jsii.python.classproperty
    @jsii.member(jsii_name="BAR")
    def BAR(cls) -> jsii.Number:
        """Constants may also use all-caps.

        stability
        :stability: experimental
        """
        return jsii.sget(cls, "BAR")

    @jsii.python.classproperty
    @jsii.member(jsii_name="ConstObj")
    def CONST_OBJ(cls) -> "DoubleTrouble":
        """
        stability
        :stability: experimental
        """
        return jsii.sget(cls, "ConstObj")

    @jsii.python.classproperty
    @jsii.member(jsii_name="Foo")
    def FOO(cls) -> str:
        """Jsdocs for static property.

        stability
        :stability: experimental
        """
        return jsii.sget(cls, "Foo")

    @jsii.python.classproperty
    @jsii.member(jsii_name="zooBar")
    def ZOO_BAR(cls) -> typing.Mapping[str, str]:
        """Constants can also use camelCase.

        stability
        :stability: experimental
        """
        return jsii.sget(cls, "zooBar")

    @jsii.python.classproperty
    @jsii.member(jsii_name="instance")
    def instance(cls) -> "Statics":
        """Jsdocs for static getter.

        Jsdocs for static setter.

        stability
        :stability: experimental
        """
        return jsii.sget(cls, "instance")

    @instance.setter
    def instance(cls, value: "Statics") -> None:
        jsii.sset(cls, "instance", value)

    @jsii.python.classproperty
    @jsii.member(jsii_name="nonConstStatic")
    def non_const_static(cls) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.sget(cls, "nonConstStatic")

    @non_const_static.setter
    def non_const_static(cls, value: jsii.Number) -> None:
        jsii.sset(cls, "nonConstStatic", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "value")


@jsii.enum(jsii_type="jsii-calc.StringEnum")
class StringEnum(enum.Enum):
    """
    stability
    :stability: experimental
    """

    A = "A"
    """
    stability
    :stability: experimental
    """
    B = "B"
    """
    stability
    :stability: experimental
    """
    C = "C"
    """
    stability
    :stability: experimental
    """


class StripInternal(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.StripInternal"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(StripInternal, self, [])

    @builtins.property
    @jsii.member(jsii_name="youSeeMe")
    def you_see_me(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "youSeeMe")

    @you_see_me.setter
    def you_see_me(self, value: str) -> None:
        jsii.set(self, "youSeeMe", value)


@jsii.data_type(
    jsii_type="jsii-calc.StructA",
    jsii_struct_bases=[],
    name_mapping={
        "required_string": "requiredString",
        "optional_number": "optionalNumber",
        "optional_string": "optionalString",
    },
)
class StructA:
    def __init__(
        self,
        *,
        required_string: str,
        optional_number: typing.Optional[jsii.Number] = None,
        optional_string: typing.Optional[str] = None,
    ) -> None:
        """We can serialize and deserialize structs without silently ignoring optional fields.

        :param required_string: 
        :param optional_number: 
        :param optional_string: 

        stability
        :stability: experimental
        """
        self._values = {
            "required_string": required_string,
        }
        if optional_number is not None:
            self._values["optional_number"] = optional_number
        if optional_string is not None:
            self._values["optional_string"] = optional_string

    @builtins.property
    def required_string(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("required_string")

    @builtins.property
    def optional_number(self) -> typing.Optional[jsii.Number]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("optional_number")

    @builtins.property
    def optional_string(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("optional_string")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructA(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.StructB",
    jsii_struct_bases=[],
    name_mapping={
        "required_string": "requiredString",
        "optional_boolean": "optionalBoolean",
        "optional_struct_a": "optionalStructA",
    },
)
class StructB:
    def __init__(
        self,
        *,
        required_string: str,
        optional_boolean: typing.Optional[bool] = None,
        optional_struct_a: typing.Optional["StructA"] = None,
    ) -> None:
        """This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.

        :param required_string: 
        :param optional_boolean: 
        :param optional_struct_a: 

        stability
        :stability: experimental
        """
        if isinstance(optional_struct_a, dict):
            optional_struct_a = StructA(**optional_struct_a)
        self._values = {
            "required_string": required_string,
        }
        if optional_boolean is not None:
            self._values["optional_boolean"] = optional_boolean
        if optional_struct_a is not None:
            self._values["optional_struct_a"] = optional_struct_a

    @builtins.property
    def required_string(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("required_string")

    @builtins.property
    def optional_boolean(self) -> typing.Optional[bool]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("optional_boolean")

    @builtins.property
    def optional_struct_a(self) -> typing.Optional["StructA"]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("optional_struct_a")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructB(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.StructParameterType",
    jsii_struct_bases=[],
    name_mapping={"scope": "scope", "props": "props"},
)
class StructParameterType:
    def __init__(self, *, scope: str, props: typing.Optional[bool] = None) -> None:
        """Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.

        See: https://github.com/aws/aws-cdk/issues/4302

        :param scope: 
        :param props: 

        stability
        :stability: experimental
        """
        self._values = {
            "scope": scope,
        }
        if props is not None:
            self._values["props"] = props

    @builtins.property
    def scope(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("scope")

    @builtins.property
    def props(self) -> typing.Optional[bool]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("props")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructParameterType(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class StructPassing(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.StructPassing"):
    """Just because we can."""

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(StructPassing, self, [])

    @jsii.member(jsii_name="howManyVarArgsDidIPass")
    @builtins.classmethod
    def how_many_var_args_did_i_pass(
        cls, _positional: jsii.Number, *inputs: "TopLevelStruct"
    ) -> jsii.Number:
        """
        :param _positional: -
        :param inputs: -
        """
        return jsii.sinvoke(cls, "howManyVarArgsDidIPass", [_positional, *inputs])

    @jsii.member(jsii_name="roundTrip")
    @builtins.classmethod
    def round_trip(
        cls,
        _positional: jsii.Number,
        *,
        required: str,
        second_level: typing.Union[jsii.Number, "SecondLevelStruct"],
        optional: typing.Optional[str] = None,
    ) -> "TopLevelStruct":
        """
        :param _positional: -
        :param required: This is a required field.
        :param second_level: A union to really stress test our serialization.
        :param optional: You don't have to pass this.
        """
        input = TopLevelStruct(
            required=required, second_level=second_level, optional=optional
        )

        return jsii.sinvoke(cls, "roundTrip", [_positional, input])


class StructUnionConsumer(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.StructUnionConsumer"
):
    """
    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="isStructA")
    @builtins.classmethod
    def is_struct_a(cls, struct: typing.Union["StructA", "StructB"]) -> bool:
        """
        :param struct: -

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "isStructA", [struct])

    @jsii.member(jsii_name="isStructB")
    @builtins.classmethod
    def is_struct_b(cls, struct: typing.Union["StructA", "StructB"]) -> bool:
        """
        :param struct: -

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "isStructB", [struct])


@jsii.data_type(
    jsii_type="jsii-calc.StructWithJavaReservedWords",
    jsii_struct_bases=[],
    name_mapping={
        "default": "default",
        "assert_": "assert",
        "result": "result",
        "that": "that",
    },
)
class StructWithJavaReservedWords:
    def __init__(
        self,
        *,
        default: str,
        assert_: typing.Optional[str] = None,
        result: typing.Optional[str] = None,
        that: typing.Optional[str] = None,
    ) -> None:
        """
        :param default: 
        :param assert_: 
        :param result: 
        :param that: 

        stability
        :stability: experimental
        """
        self._values = {
            "default": default,
        }
        if assert_ is not None:
            self._values["assert_"] = assert_
        if result is not None:
            self._values["result"] = result
        if that is not None:
            self._values["that"] = that

    @builtins.property
    def default(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("default")

    @builtins.property
    def assert_(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("assert_")

    @builtins.property
    def result(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("result")

    @builtins.property
    def that(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("that")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructWithJavaReservedWords(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Sum(
    _CompositeOperation_1c4d123b, metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Sum"
):
    """An operation that sums multiple values.

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Sum, self, [])

    @builtins.property
    @jsii.member(jsii_name="expression")
    def expression(self) -> scope.jsii_calc_lib.Value:
        """The expression that this operation consists of.

        Must be implemented by derived classes.

        stability
        :stability: experimental
        """
        return jsii.get(self, "expression")

    @builtins.property
    @jsii.member(jsii_name="parts")
    def parts(self) -> typing.List[scope.jsii_calc_lib.Value]:
        """The parts to sum.

        stability
        :stability: experimental
        """
        return jsii.get(self, "parts")

    @parts.setter
    def parts(self, value: typing.List[scope.jsii_calc_lib.Value]) -> None:
        jsii.set(self, "parts", value)


@jsii.data_type(
    jsii_type="jsii-calc.SupportsNiceJavaBuilderProps",
    jsii_struct_bases=[],
    name_mapping={"bar": "bar", "id": "id"},
)
class SupportsNiceJavaBuilderProps:
    def __init__(self, *, bar: jsii.Number, id: typing.Optional[str] = None) -> None:
        """
        :param bar: Some number, like 42.
        :param id: An \`\`id\`\` field here is terrible API design, because the constructor of \`\`SupportsNiceJavaBuilder\`\` already has a parameter named \`\`id\`\`. But here we are, doing it like we didn't care.

        stability
        :stability: experimental
        """
        self._values = {
            "bar": bar,
        }
        if id is not None:
            self._values["id"] = id

    @builtins.property
    def bar(self) -> jsii.Number:
        """Some number, like 42.

        stability
        :stability: experimental
        """
        return self._values.get("bar")

    @builtins.property
    def id(self) -> typing.Optional[str]:
        """An \`\`id\`\` field here is terrible API design, because the constructor of \`\`SupportsNiceJavaBuilder\`\` already has a parameter named \`\`id\`\`.

        But here we are, doing it like we didn't care.

        stability
        :stability: experimental
        """
        return self._values.get("id")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SupportsNiceJavaBuilderProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class SupportsNiceJavaBuilderWithRequiredProps(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
):
    """We can generate fancy builders in Java for classes which take a mix of positional & struct parameters.

    stability
    :stability: experimental
    """

    def __init__(
        self, id_: jsii.Number, *, bar: jsii.Number, id: typing.Optional[str] = None
    ) -> None:
        """
        :param id_: some identifier of your choice.
        :param bar: Some number, like 42.
        :param id: An \`\`id\`\` field here is terrible API design, because the constructor of \`\`SupportsNiceJavaBuilder\`\` already has a parameter named \`\`id\`\`. But here we are, doing it like we didn't care.

        stability
        :stability: experimental
        """
        props = SupportsNiceJavaBuilderProps(bar=bar, id=id)

        jsii.create(SupportsNiceJavaBuilderWithRequiredProps, self, [id_, props])

    @builtins.property
    @jsii.member(jsii_name="bar")
    def bar(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "bar")

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> jsii.Number:
        """some identifier of your choice.

        stability
        :stability: experimental
        """
        return jsii.get(self, "id")

    @builtins.property
    @jsii.member(jsii_name="propId")
    def prop_id(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "propId")


class SyncVirtualMethods(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.SyncVirtualMethods"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(SyncVirtualMethods, self, [])

    @jsii.member(jsii_name="callerIsAsync")
    def caller_is_async(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.ainvoke(self, "callerIsAsync", [])

    @jsii.member(jsii_name="callerIsMethod")
    def caller_is_method(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "callerIsMethod", [])

    @jsii.member(jsii_name="modifyOtherProperty")
    def modify_other_property(self, value: str) -> None:
        """
        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "modifyOtherProperty", [value])

    @jsii.member(jsii_name="modifyValueOfTheProperty")
    def modify_value_of_the_property(self, value: str) -> None:
        """
        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "modifyValueOfTheProperty", [value])

    @jsii.member(jsii_name="readA")
    def read_a(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "readA", [])

    @jsii.member(jsii_name="retrieveOtherProperty")
    def retrieve_other_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "retrieveOtherProperty", [])

    @jsii.member(jsii_name="retrieveReadOnlyProperty")
    def retrieve_read_only_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "retrieveReadOnlyProperty", [])

    @jsii.member(jsii_name="retrieveValueOfTheProperty")
    def retrieve_value_of_the_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "retrieveValueOfTheProperty", [])

    @jsii.member(jsii_name="virtualMethod")
    def virtual_method(self, n: jsii.Number) -> jsii.Number:
        """
        :param n: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "virtualMethod", [n])

    @jsii.member(jsii_name="writeA")
    def write_a(self, value: jsii.Number) -> None:
        """
        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "writeA", [value])

    @builtins.property
    @jsii.member(jsii_name="readonlyProperty")
    def readonly_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "readonlyProperty")

    @builtins.property
    @jsii.member(jsii_name="a")
    def a(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "a")

    @a.setter
    def a(self, value: jsii.Number) -> None:
        jsii.set(self, "a", value)

    @builtins.property
    @jsii.member(jsii_name="callerIsProperty")
    def caller_is_property(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "callerIsProperty")

    @caller_is_property.setter
    def caller_is_property(self, value: jsii.Number) -> None:
        jsii.set(self, "callerIsProperty", value)

    @builtins.property
    @jsii.member(jsii_name="otherProperty")
    def other_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "otherProperty")

    @other_property.setter
    def other_property(self, value: str) -> None:
        jsii.set(self, "otherProperty", value)

    @builtins.property
    @jsii.member(jsii_name="theProperty")
    def the_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "theProperty")

    @the_property.setter
    def the_property(self, value: str) -> None:
        jsii.set(self, "theProperty", value)

    @builtins.property
    @jsii.member(jsii_name="valueOfOtherProperty")
    def value_of_other_property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "valueOfOtherProperty")

    @value_of_other_property.setter
    def value_of_other_property(self, value: str) -> None:
        jsii.set(self, "valueOfOtherProperty", value)


class Thrower(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Thrower"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Thrower, self, [])

    @jsii.member(jsii_name="throwError")
    def throw_error(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "throwError", [])


@jsii.data_type(
    jsii_type="jsii-calc.TopLevelStruct",
    jsii_struct_bases=[],
    name_mapping={
        "required": "required",
        "second_level": "secondLevel",
        "optional": "optional",
    },
)
class TopLevelStruct:
    def __init__(
        self,
        *,
        required: str,
        second_level: typing.Union[jsii.Number, "SecondLevelStruct"],
        optional: typing.Optional[str] = None,
    ) -> None:
        """
        :param required: This is a required field.
        :param second_level: A union to really stress test our serialization.
        :param optional: You don't have to pass this.

        stability
        :stability: experimental
        """
        self._values = {
            "required": required,
            "second_level": second_level,
        }
        if optional is not None:
            self._values["optional"] = optional

    @builtins.property
    def required(self) -> str:
        """This is a required field.

        stability
        :stability: experimental
        """
        return self._values.get("required")

    @builtins.property
    def second_level(self) -> typing.Union[jsii.Number, "SecondLevelStruct"]:
        """A union to really stress test our serialization.

        stability
        :stability: experimental
        """
        return self._values.get("second_level")

    @builtins.property
    def optional(self) -> typing.Optional[str]:
        """You don't have to pass this.

        stability
        :stability: experimental
        """
        return self._values.get("optional")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "TopLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class UmaskCheck(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.UmaskCheck"):
    """Checks the current file permissions are cool (no funky UMASK down-scoping happened).

    see
    :see: https://github.com/aws/jsii/issues/1765
    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="mode")
    @builtins.classmethod
    def mode(cls) -> jsii.Number:
        """This should return 0o644 (-rw-r--r--).

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "mode", [])


class UnaryOperation(
    scope.jsii_calc_lib.Operation,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.UnaryOperation",
):
    """An operation on a single operand.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _UnaryOperationProxy

    def __init__(self, operand: scope.jsii_calc_lib.Value) -> None:
        """
        :param operand: -

        stability
        :stability: experimental
        """
        jsii.create(UnaryOperation, self, [operand])

    @builtins.property
    @jsii.member(jsii_name="operand")
    def operand(self) -> scope.jsii_calc_lib.Value:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "operand")


class _UnaryOperationProxy(
    UnaryOperation, jsii.proxy_for(scope.jsii_calc_lib.Operation)
):
    pass


@jsii.data_type(
    jsii_type="jsii-calc.UnionProperties",
    jsii_struct_bases=[],
    name_mapping={"bar": "bar", "foo": "foo"},
)
class UnionProperties:
    def __init__(
        self,
        *,
        bar: typing.Union[str, jsii.Number, "AllTypes"],
        foo: typing.Optional[typing.Union[str, jsii.Number]] = None,
    ) -> None:
        """
        :param bar: 
        :param foo: 

        stability
        :stability: experimental
        """
        self._values = {
            "bar": bar,
        }
        if foo is not None:
            self._values["foo"] = foo

    @builtins.property
    def bar(self) -> typing.Union[str, jsii.Number, "AllTypes"]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("bar")

    @builtins.property
    def foo(self) -> typing.Optional[typing.Union[str, jsii.Number]]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("foo")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "UnionProperties(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(scope.jsii_calc_lib.custom_submodule_name.IReflectable)
class UpcasingReflectable(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.UpcasingReflectable"
):
    """Ensures submodule-imported types from dependencies can be used correctly.

    stability
    :stability: experimental
    """

    def __init__(self, delegate: typing.Mapping[str, typing.Any]) -> None:
        """
        :param delegate: -

        stability
        :stability: experimental
        """
        jsii.create(UpcasingReflectable, self, [delegate])

    @jsii.python.classproperty
    @jsii.member(jsii_name="reflector")
    def REFLECTOR(cls) -> scope.jsii_calc_lib.custom_submodule_name.Reflector:
        """
        stability
        :stability: experimental
        """
        return jsii.sget(cls, "reflector")

    @builtins.property
    @jsii.member(jsii_name="entries")
    def entries(
        self,
    ) -> typing.List[scope.jsii_calc_lib.custom_submodule_name.ReflectableEntry]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "entries")


class UseBundledDependency(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.UseBundledDependency"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(UseBundledDependency, self, [])

    @jsii.member(jsii_name="value")
    def value(self) -> typing.Any:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "value", [])


class UseCalcBase(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.UseCalcBase"):
    """Depend on a type from jsii-calc-base as a test for awslabs/jsii#128.

    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(UseCalcBase, self, [])

    @jsii.member(jsii_name="hello")
    def hello(self) -> scope.jsii_calc_base.Base:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "hello", [])


class UsesInterfaceWithProperties(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.UsesInterfaceWithProperties"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self, obj: "IInterfaceWithProperties") -> None:
        """
        :param obj: -

        stability
        :stability: experimental
        """
        jsii.create(UsesInterfaceWithProperties, self, [obj])

    @jsii.member(jsii_name="justRead")
    def just_read(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "justRead", [])

    @jsii.member(jsii_name="readStringAndNumber")
    def read_string_and_number(self, ext: "IInterfaceWithPropertiesExtension") -> str:
        """
        :param ext: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "readStringAndNumber", [ext])

    @jsii.member(jsii_name="writeAndRead")
    def write_and_read(self, value: str) -> str:
        """
        :param value: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "writeAndRead", [value])

    @builtins.property
    @jsii.member(jsii_name="obj")
    def obj(self) -> "IInterfaceWithProperties":
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "obj")


class VariadicInvoker(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.VariadicInvoker"):
    """
    stability
    :stability: experimental
    """

    def __init__(self, method: "VariadicMethod") -> None:
        """
        :param method: -

        stability
        :stability: experimental
        """
        jsii.create(VariadicInvoker, self, [method])

    @jsii.member(jsii_name="asArray")
    def as_array(self, *values: jsii.Number) -> typing.List[jsii.Number]:
        """
        :param values: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "asArray", [*values])


class VariadicMethod(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.VariadicMethod"):
    """
    stability
    :stability: experimental
    """

    def __init__(self, *prefix: jsii.Number) -> None:
        """
        :param prefix: a prefix that will be use for all values returned by \`\`#asArray\`\`.

        stability
        :stability: experimental
        """
        jsii.create(VariadicMethod, self, [*prefix])

    @jsii.member(jsii_name="asArray")
    def as_array(
        self, first: jsii.Number, *others: jsii.Number
    ) -> typing.List[jsii.Number]:
        """
        :param first: the first element of the array to be returned (after the \`\`prefix\`\` provided at construction time).
        :param others: other elements to be included in the array.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "asArray", [first, *others])


class VirtualMethodPlayground(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.VirtualMethodPlayground"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(VirtualMethodPlayground, self, [])

    @jsii.member(jsii_name="overrideMeAsync")
    def override_me_async(self, index: jsii.Number) -> jsii.Number:
        """
        :param index: -

        stability
        :stability: experimental
        """
        return jsii.ainvoke(self, "overrideMeAsync", [index])

    @jsii.member(jsii_name="overrideMeSync")
    def override_me_sync(self, index: jsii.Number) -> jsii.Number:
        """
        :param index: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "overrideMeSync", [index])

    @jsii.member(jsii_name="parallelSumAsync")
    def parallel_sum_async(self, count: jsii.Number) -> jsii.Number:
        """
        :param count: -

        stability
        :stability: experimental
        """
        return jsii.ainvoke(self, "parallelSumAsync", [count])

    @jsii.member(jsii_name="serialSumAsync")
    def serial_sum_async(self, count: jsii.Number) -> jsii.Number:
        """
        :param count: -

        stability
        :stability: experimental
        """
        return jsii.ainvoke(self, "serialSumAsync", [count])

    @jsii.member(jsii_name="sumSync")
    def sum_sync(self, count: jsii.Number) -> jsii.Number:
        """
        :param count: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "sumSync", [count])


class VoidCallback(
    metaclass=jsii.JSIIAbstractClass, jsii_type="jsii-calc.VoidCallback"
):
    """This test is used to validate the runtimes can return correctly from a void callback.

    - Implement \`\`overrideMe\`\` (method does not have to do anything).
    - Invoke \`\`callMe\`\`
    - Verify that \`\`methodWasCalled\`\` is \`\`true\`\`.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _VoidCallbackProxy

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(VoidCallback, self, [])

    @jsii.member(jsii_name="callMe")
    def call_me(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "callMe", [])

    @jsii.member(jsii_name="overrideMe")
    @abc.abstractmethod
    def _override_me(self) -> None:
        """
        stability
        :stability: experimental
        """
        ...

    @builtins.property
    @jsii.member(jsii_name="methodWasCalled")
    def method_was_called(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "methodWasCalled")


class _VoidCallbackProxy(VoidCallback):
    @jsii.member(jsii_name="overrideMe")
    def _override_me(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "overrideMe", [])


class WithPrivatePropertyInConstructor(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.WithPrivatePropertyInConstructor"
):
    """Verifies that private property declarations in constructor arguments are hidden.

    stability
    :stability: experimental
    """

    def __init__(self, private_field: typing.Optional[str] = None) -> None:
        """
        :param private_field: -

        stability
        :stability: experimental
        """
        jsii.create(WithPrivatePropertyInConstructor, self, [private_field])

    @builtins.property
    @jsii.member(jsii_name="success")
    def success(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "success")


@jsii.implements(IInterfaceImplementedByAbstractClass)
class AbstractClass(
    AbstractClassBase,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.AbstractClass",
):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _AbstractClassProxy

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(AbstractClass, self, [])

    @jsii.member(jsii_name="abstractMethod")
    @abc.abstractmethod
    def abstract_method(self, name: str) -> str:
        """
        :param name: -

        stability
        :stability: experimental
        """
        ...

    @jsii.member(jsii_name="nonAbstractMethod")
    def non_abstract_method(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "nonAbstractMethod", [])

    @builtins.property
    @jsii.member(jsii_name="propFromInterface")
    def prop_from_interface(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "propFromInterface")


class _AbstractClassProxy(AbstractClass, jsii.proxy_for(AbstractClassBase)):
    @jsii.member(jsii_name="abstractMethod")
    def abstract_method(self, name: str) -> str:
        """
        :param name: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "abstractMethod", [name])


class Add(BinaryOperation, metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Add"):
    """The "+" binary operation.

    stability
    :stability: experimental
    """

    def __init__(
        self, lhs: scope.jsii_calc_lib.Value, rhs: scope.jsii_calc_lib.Value
    ) -> None:
        """Creates a BinaryOperation.

        :param lhs: Left-hand side operand.
        :param rhs: Right-hand side operand.

        stability
        :stability: experimental
        """
        jsii.create(Add, self, [lhs, rhs])

    @jsii.member(jsii_name="toString")
    def to_string(self) -> str:
        """String representation of the value.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "toString", [])

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        """The value.

        stability
        :stability: experimental
        """
        return jsii.get(self, "value")


@jsii.implements(IAnonymousImplementationProvider)
class AnonymousImplementationProvider(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.AnonymousImplementationProvider"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(AnonymousImplementationProvider, self, [])

    @jsii.member(jsii_name="provideAsClass")
    def provide_as_class(self) -> "Implementation":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "provideAsClass", [])

    @jsii.member(jsii_name="provideAsInterface")
    def provide_as_interface(self) -> "IAnonymouslyImplementMe":
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "provideAsInterface", [])


@jsii.implements(IBell)
class Bell(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Bell"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Bell, self, [])

    @jsii.member(jsii_name="ring")
    def ring(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "ring", [])

    @builtins.property
    @jsii.member(jsii_name="rung")
    def rung(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "rung")

    @rung.setter
    def rung(self, value: bool) -> None:
        jsii.set(self, "rung", value)


@jsii.data_type(
    jsii_type="jsii-calc.ChildStruct982",
    jsii_struct_bases=[ParentStruct982],
    name_mapping={"foo": "foo", "bar": "bar"},
)
class ChildStruct982(ParentStruct982):
    def __init__(self, *, foo: str, bar: jsii.Number) -> None:
        """
        :param foo: 
        :param bar: 

        stability
        :stability: experimental
        """
        self._values = {
            "foo": foo,
            "bar": bar,
        }

    @builtins.property
    def foo(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("foo")

    @builtins.property
    def bar(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return self._values.get("bar")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ChildStruct982(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(INonInternalInterface)
class ClassThatImplementsTheInternalInterface(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ClassThatImplementsTheInternalInterface",
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ClassThatImplementsTheInternalInterface, self, [])

    @builtins.property
    @jsii.member(jsii_name="a")
    def a(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "a")

    @a.setter
    def a(self, value: str) -> None:
        jsii.set(self, "a", value)

    @builtins.property
    @jsii.member(jsii_name="b")
    def b(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "b")

    @b.setter
    def b(self, value: str) -> None:
        jsii.set(self, "b", value)

    @builtins.property
    @jsii.member(jsii_name="c")
    def c(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "c")

    @c.setter
    def c(self, value: str) -> None:
        jsii.set(self, "c", value)

    @builtins.property
    @jsii.member(jsii_name="d")
    def d(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "d")

    @d.setter
    def d(self, value: str) -> None:
        jsii.set(self, "d", value)


@jsii.implements(INonInternalInterface)
class ClassThatImplementsThePrivateInterface(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ClassThatImplementsThePrivateInterface",
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(ClassThatImplementsThePrivateInterface, self, [])

    @builtins.property
    @jsii.member(jsii_name="a")
    def a(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "a")

    @a.setter
    def a(self, value: str) -> None:
        jsii.set(self, "a", value)

    @builtins.property
    @jsii.member(jsii_name="b")
    def b(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "b")

    @b.setter
    def b(self, value: str) -> None:
        jsii.set(self, "b", value)

    @builtins.property
    @jsii.member(jsii_name="c")
    def c(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "c")

    @c.setter
    def c(self, value: str) -> None:
        jsii.set(self, "c", value)

    @builtins.property
    @jsii.member(jsii_name="e")
    def e(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "e")

    @e.setter
    def e(self, value: str) -> None:
        jsii.set(self, "e", value)


@jsii.implements(IInterfaceWithProperties)
class ClassWithPrivateConstructorAndAutomaticProperties(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties",
):
    """Class that implements interface properties automatically, but using a private constructor.

    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="create")
    @builtins.classmethod
    def create(
        cls, read_only_string: str, read_write_string: str
    ) -> "ClassWithPrivateConstructorAndAutomaticProperties":
        """
        :param read_only_string: -
        :param read_write_string: -

        stability
        :stability: experimental
        """
        return jsii.sinvoke(cls, "create", [read_only_string, read_write_string])

    @builtins.property
    @jsii.member(jsii_name="readOnlyString")
    def read_only_string(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "readOnlyString")

    @builtins.property
    @jsii.member(jsii_name="readWriteString")
    def read_write_string(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "readWriteString")

    @read_write_string.setter
    def read_write_string(self, value: str) -> None:
        jsii.set(self, "readWriteString", value)


@jsii.interface(jsii_type="jsii-calc.IFriendlyRandomGenerator")
class IFriendlyRandomGenerator(
    IRandomNumberGenerator, scope.jsii_calc_lib.IFriendly, jsii.compat.Protocol
):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IFriendlyRandomGeneratorProxy


class _IFriendlyRandomGeneratorProxy(
    jsii.proxy_for(IRandomNumberGenerator),
    jsii.proxy_for(scope.jsii_calc_lib.IFriendly),
):
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IFriendlyRandomGenerator"
    pass


@jsii.interface(jsii_type="jsii-calc.IInterfaceThatShouldNotBeADataType")
class IInterfaceThatShouldNotBeADataType(IInterfaceWithMethods, jsii.compat.Protocol):
    """Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IInterfaceThatShouldNotBeADataTypeProxy

    @builtins.property
    @jsii.member(jsii_name="otherValue")
    def other_value(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...


class _IInterfaceThatShouldNotBeADataTypeProxy(jsii.proxy_for(IInterfaceWithMethods)):
    """Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.

    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IInterfaceThatShouldNotBeADataType"

    @builtins.property
    @jsii.member(jsii_name="otherValue")
    def other_value(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "otherValue")


@jsii.interface(jsii_type="jsii-calc.IJSII417Derived")
class IJSII417Derived(IJSII417PublicBaseOfBase, jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IJSII417DerivedProxy

    @builtins.property
    @jsii.member(jsii_name="property")
    def property(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...

    @jsii.member(jsii_name="bar")
    def bar(self) -> None:
        """
        stability
        :stability: experimental
        """
        ...

    @jsii.member(jsii_name="baz")
    def baz(self) -> None:
        """
        stability
        :stability: experimental
        """
        ...


class _IJSII417DerivedProxy(jsii.proxy_for(IJSII417PublicBaseOfBase)):
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.IJSII417Derived"

    @builtins.property
    @jsii.member(jsii_name="property")
    def property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "property")

    @jsii.member(jsii_name="bar")
    def bar(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "bar", [])

    @jsii.member(jsii_name="baz")
    def baz(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "baz", [])


@jsii.implements(IPublicInterface2)
class InbetweenClass(
    PublicClass, metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.InbetweenClass"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(InbetweenClass, self, [])

    @jsii.member(jsii_name="ciao")
    def ciao(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "ciao", [])


class JSII417Derived(
    JSII417PublicBaseOfBase,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.JSII417Derived",
):
    """
    stability
    :stability: experimental
    """

    def __init__(self, property: str) -> None:
        """
        :param property: -

        stability
        :stability: experimental
        """
        jsii.create(JSII417Derived, self, [property])

    @jsii.member(jsii_name="bar")
    def bar(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "bar", [])

    @jsii.member(jsii_name="baz")
    def baz(self) -> None:
        """
        stability
        :stability: experimental
        """
        return jsii.invoke(self, "baz", [])

    @builtins.property
    @jsii.member(jsii_name="property")
    def _property(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "property")


@jsii.implements(IFriendlier)
class Negate(UnaryOperation, metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Negate"):
    """The negation operation ("-value").

    stability
    :stability: experimental
    """

    def __init__(self, operand: scope.jsii_calc_lib.Value) -> None:
        """
        :param operand: -

        stability
        :stability: experimental
        """
        jsii.create(Negate, self, [operand])

    @jsii.member(jsii_name="farewell")
    def farewell(self) -> str:
        """Say farewell.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "farewell", [])

    @jsii.member(jsii_name="goodbye")
    def goodbye(self) -> str:
        """Say goodbye.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "goodbye", [])

    @jsii.member(jsii_name="hello")
    def hello(self) -> str:
        """Say hello!

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "hello", [])

    @jsii.member(jsii_name="toString")
    def to_string(self) -> str:
        """String representation of the value.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "toString", [])

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        """The value.

        stability
        :stability: experimental
        """
        return jsii.get(self, "value")


class SupportsNiceJavaBuilder(
    SupportsNiceJavaBuilderWithRequiredProps,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.SupportsNiceJavaBuilder",
):
    """
    stability
    :stability: experimental
    """

    def __init__(
        self,
        id: jsii.Number,
        default_bar: typing.Optional[jsii.Number] = None,
        props: typing.Optional["SupportsNiceJavaBuilderProps"] = None,
        *rest: str,
    ) -> None:
        """
        :param id: some identifier.
        :param default_bar: the default value of \`\`bar\`\`.
        :param props: some props once can provide.
        :param rest: a variadic continuation.

        stability
        :stability: experimental
        """
        jsii.create(SupportsNiceJavaBuilder, self, [id, default_bar, props, *rest])

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> jsii.Number:
        """some identifier.

        stability
        :stability: experimental
        """
        return jsii.get(self, "id")

    @builtins.property
    @jsii.member(jsii_name="rest")
    def rest(self) -> typing.List[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "rest")


@jsii.implements(IFriendlyRandomGenerator)
class DoubleTrouble(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DoubleTrouble"):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(DoubleTrouble, self, [])

    @jsii.member(jsii_name="hello")
    def hello(self) -> str:
        """Say hello!

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "hello", [])

    @jsii.member(jsii_name="next")
    def next(self) -> jsii.Number:
        """Returns another random number.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "next", [])


__all__ = [
    "AbstractClass",
    "AbstractClassBase",
    "AbstractClassReturner",
    "AbstractSuite",
    "Add",
    "AllTypes",
    "AllTypesEnum",
    "AllowedMethodNames",
    "AmbiguousParameters",
    "AnonymousImplementationProvider",
    "AsyncVirtualMethods",
    "AugmentableClass",
    "BaseJsii976",
    "Bell",
    "BinaryOperation",
    "BurriedAnonymousObject",
    "Calculator",
    "CalculatorProps",
    "ChildStruct982",
    "ClassThatImplementsTheInternalInterface",
    "ClassThatImplementsThePrivateInterface",
    "ClassWithCollections",
    "ClassWithDocs",
    "ClassWithJavaReservedWords",
    "ClassWithMutableObjectLiteralProperty",
    "ClassWithPrivateConstructorAndAutomaticProperties",
    "ConfusingToJackson",
    "ConfusingToJacksonStruct",
    "ConstructorPassesThisOut",
    "Constructors",
    "ConsumePureInterface",
    "ConsumerCanRingBell",
    "ConsumersOfThisCrazyTypeSystem",
    "DataRenderer",
    "DefaultedConstructorArgument",
    "Demonstrate982",
    "DeprecatedClass",
    "DeprecatedEnum",
    "DeprecatedStruct",
    "DerivedStruct",
    "DiamondInheritanceBaseLevelStruct",
    "DiamondInheritanceFirstMidLevelStruct",
    "DiamondInheritanceSecondMidLevelStruct",
    "DiamondInheritanceTopLevelStruct",
    "DisappointingCollectionSource",
    "DoNotOverridePrivates",
    "DoNotRecognizeAnyAsOptional",
    "DocumentedClass",
    "DontComplainAboutVariadicAfterOptional",
    "DoubleTrouble",
    "EnumDispenser",
    "EraseUndefinedHashValues",
    "EraseUndefinedHashValuesOptions",
    "ExperimentalClass",
    "ExperimentalEnum",
    "ExperimentalStruct",
    "ExportedBaseClass",
    "ExtendsInternalInterface",
    "ExternalClass",
    "ExternalEnum",
    "ExternalStruct",
    "GiveMeStructs",
    "Greetee",
    "GreetingAugmenter",
    "IAnonymousImplementationProvider",
    "IAnonymouslyImplementMe",
    "IAnotherPublicInterface",
    "IBell",
    "IBellRinger",
    "IConcreteBellRinger",
    "IDeprecatedInterface",
    "IExperimentalInterface",
    "IExtendsPrivateInterface",
    "IExternalInterface",
    "IFriendlier",
    "IFriendlyRandomGenerator",
    "IInterfaceImplementedByAbstractClass",
    "IInterfaceThatShouldNotBeADataType",
    "IInterfaceWithInternal",
    "IInterfaceWithMethods",
    "IInterfaceWithOptionalMethodArguments",
    "IInterfaceWithProperties",
    "IInterfaceWithPropertiesExtension",
    "IJSII417Derived",
    "IJSII417PublicBaseOfBase",
    "IJsii487External",
    "IJsii487External2",
    "IJsii496",
    "IMutableObjectLiteral",
    "INonInternalInterface",
    "IObjectWithProperty",
    "IOptionalMethod",
    "IPrivatelyImplemented",
    "IPublicInterface",
    "IPublicInterface2",
    "IRandomNumberGenerator",
    "IReturnJsii976",
    "IReturnsNumber",
    "IStableInterface",
    "IStructReturningDelegate",
    "ImplementInternalInterface",
    "Implementation",
    "ImplementsInterfaceWithInternal",
    "ImplementsInterfaceWithInternalSubclass",
    "ImplementsPrivateInterface",
    "ImplictBaseOfBase",
    "InbetweenClass",
    "InterfaceCollections",
    "InterfacesMaker",
    "Isomorphism",
    "JSII417Derived",
    "JSII417PublicBaseOfBase",
    "JSObjectLiteralForInterface",
    "JSObjectLiteralToNative",
    "JSObjectLiteralToNativeClass",
    "JavaReservedWords",
    "Jsii487Derived",
    "Jsii496Derived",
    "JsiiAgent",
    "JsonFormatter",
    "LoadBalancedFargateServiceProps",
    "MethodNamedProperty",
    "Multiply",
    "Negate",
    "NestedClassInstance",
    "NestedStruct",
    "NodeStandardLibrary",
    "NullShouldBeTreatedAsUndefined",
    "NullShouldBeTreatedAsUndefinedData",
    "NumberGenerator",
    "ObjectRefsInCollections",
    "ObjectWithPropertyProvider",
    "Old",
    "OptionalArgumentInvoker",
    "OptionalConstructorArgument",
    "OptionalStruct",
    "OptionalStructConsumer",
    "OverridableProtectedMember",
    "OverrideReturnsObject",
    "ParentStruct982",
    "PartiallyInitializedThisConsumer",
    "Polymorphism",
    "Power",
    "PropertyNamedProperty",
    "PublicClass",
    "PythonReservedWords",
    "ReferenceEnumFromScopedPackage",
    "ReturnsPrivateImplementationOfInterface",
    "RootStruct",
    "RootStructValidator",
    "RuntimeTypeChecking",
    "SecondLevelStruct",
    "SingleInstanceTwoTypes",
    "SingletonInt",
    "SingletonIntEnum",
    "SingletonString",
    "SingletonStringEnum",
    "SmellyStruct",
    "SomeTypeJsii976",
    "StableClass",
    "StableEnum",
    "StableStruct",
    "StaticContext",
    "Statics",
    "StringEnum",
    "StripInternal",
    "StructA",
    "StructB",
    "StructParameterType",
    "StructPassing",
    "StructUnionConsumer",
    "StructWithJavaReservedWords",
    "Sum",
    "SupportsNiceJavaBuilder",
    "SupportsNiceJavaBuilderProps",
    "SupportsNiceJavaBuilderWithRequiredProps",
    "SyncVirtualMethods",
    "Thrower",
    "TopLevelStruct",
    "UmaskCheck",
    "UnaryOperation",
    "UnionProperties",
    "UpcasingReflectable",
    "UseBundledDependency",
    "UseCalcBase",
    "UsesInterfaceWithProperties",
    "VariadicInvoker",
    "VariadicMethod",
    "VirtualMethodPlayground",
    "VoidCallback",
    "WithPrivatePropertyInConstructor",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/_jsii/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

import scope.jsii_calc_base._jsii
import scope.jsii_calc_base_of_base._jsii
import scope.jsii_calc_lib._jsii

__jsii_assembly__ = jsii.JSIIAssembly.load(
    "jsii-calc", "0.0.0", __name__[0:-6], "jsii-calc@0.0.0.jsii.tgz"
)

__all__ = [
    "__jsii_assembly__",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/_jsii/jsii-calc@0.0.0.jsii.tgz 1`] = `python/src/jsii_calc/_jsii/jsii-calc@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/composition/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from .._jsii import *

import scope.jsii_calc_lib


class CompositeOperation(
    scope.jsii_calc_lib.Operation,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.composition.CompositeOperation",
):
    """Abstract operation composed from an expression of other operations.

    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _CompositeOperationProxy

    def __init__(self) -> None:
        jsii.create(CompositeOperation, self, [])

    @jsii.member(jsii_name="toString")
    def to_string(self) -> str:
        """String representation of the value.

        stability
        :stability: experimental
        """
        return jsii.invoke(self, "toString", [])

    @builtins.property
    @jsii.member(jsii_name="expression")
    @abc.abstractmethod
    def expression(self) -> scope.jsii_calc_lib.Value:
        """The expression that this operation consists of.

        Must be implemented by derived classes.

        stability
        :stability: experimental
        """
        ...

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        """The value.

        stability
        :stability: experimental
        """
        return jsii.get(self, "value")

    @builtins.property
    @jsii.member(jsii_name="decorationPostfixes")
    def decoration_postfixes(self) -> typing.List[str]:
        """A set of postfixes to include in a decorated .toString().

        stability
        :stability: experimental
        """
        return jsii.get(self, "decorationPostfixes")

    @decoration_postfixes.setter
    def decoration_postfixes(self, value: typing.List[str]) -> None:
        jsii.set(self, "decorationPostfixes", value)

    @builtins.property
    @jsii.member(jsii_name="decorationPrefixes")
    def decoration_prefixes(self) -> typing.List[str]:
        """A set of prefixes to include in a decorated .toString().

        stability
        :stability: experimental
        """
        return jsii.get(self, "decorationPrefixes")

    @decoration_prefixes.setter
    def decoration_prefixes(self, value: typing.List[str]) -> None:
        jsii.set(self, "decorationPrefixes", value)

    @builtins.property
    @jsii.member(jsii_name="stringStyle")
    def string_style(self) -> "CompositionStringStyle":
        """The .toString() style.

        stability
        :stability: experimental
        """
        return jsii.get(self, "stringStyle")

    @string_style.setter
    def string_style(self, value: "CompositionStringStyle") -> None:
        jsii.set(self, "stringStyle", value)

    @jsii.enum(
        jsii_type="jsii-calc.composition.CompositeOperation.CompositionStringStyle"
    )
    class CompositionStringStyle(enum.Enum):
        """Style of .toString() output for CompositeOperation.

        stability
        :stability: experimental
        """

        NORMAL = "NORMAL"
        """Normal string expression.

        stability
        :stability: experimental
        """
        DECORATED = "DECORATED"
        """Decorated string expression.

        stability
        :stability: experimental
        """


class _CompositeOperationProxy(
    CompositeOperation, jsii.proxy_for(scope.jsii_calc_lib.Operation)
):
    @builtins.property
    @jsii.member(jsii_name="expression")
    def expression(self) -> scope.jsii_calc_lib.Value:
        """The expression that this operation consists of.

        Must be implemented by derived classes.

        stability
        :stability: experimental
        """
        return jsii.get(self, "expression")


__all__ = [
    "CompositeOperation",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/derived_class_has_no_properties/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from .._jsii import *


class Base(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DerivedClassHasNoProperties.Base"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Base, self, [])

    @builtins.property
    @jsii.member(jsii_name="prop")
    def prop(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "prop")

    @prop.setter
    def prop(self, value: str) -> None:
        jsii.set(self, "prop", value)


class Derived(
    Base,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.DerivedClassHasNoProperties.Derived",
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Derived, self, [])


__all__ = [
    "Base",
    "Derived",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/interface_in_namespace_includes_classes/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from .._jsii import *


class Foo(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(Foo, self, [])

    @builtins.property
    @jsii.member(jsii_name="bar")
    def bar(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "bar")

    @bar.setter
    def bar(self, value: typing.Optional[str]) -> None:
        jsii.set(self, "bar", value)


@jsii.data_type(
    jsii_type="jsii-calc.InterfaceInNamespaceIncludesClasses.Hello",
    jsii_struct_bases=[],
    name_mapping={"foo": "foo"},
)
class Hello:
    def __init__(self, *, foo: jsii.Number) -> None:
        """
        :param foo: 

        stability
        :stability: experimental
        """
        self._values = {
            "foo": foo,
        }

    @builtins.property
    def foo(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return self._values.get("foo")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Hello(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "Foo",
    "Hello",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/interface_in_namespace_only_interface/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from .._jsii import *


@jsii.data_type(
    jsii_type="jsii-calc.InterfaceInNamespaceOnlyInterface.Hello",
    jsii_struct_bases=[],
    name_mapping={"foo": "foo"},
)
class Hello:
    def __init__(self, *, foo: jsii.Number) -> None:
        """
        :param foo: 

        stability
        :stability: experimental
        """
        self._values = {
            "foo": foo,
        }

    @builtins.property
    def foo(self) -> jsii.Number:
        """
        stability
        :stability: experimental
        """
        return self._values.get("foo")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Hello(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "Hello",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/py.typed 1`] = `


`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/python_self/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from .._jsii import *


class ClassWithSelf(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.PythonSelf.ClassWithSelf"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self_, self: str) -> None:
        """
        :param self: -

        stability
        :stability: experimental
        """
        jsii.create(ClassWithSelf, self_, [self])

    @jsii.member(jsii_name="method")
    def method(self_, self: jsii.Number) -> str:
        """
        :param self: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self_, "method", [self])

    @builtins.property
    @jsii.member(jsii_name="self")
    def self(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "self")


class ClassWithSelfKwarg(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.PythonSelf.ClassWithSelfKwarg"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self_, *, self: str) -> None:
        """
        :param self: 

        stability
        :stability: experimental
        """
        props = StructWithSelf(self=self)

        jsii.create(ClassWithSelfKwarg, self_, [props])

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "StructWithSelf":
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "props")


@jsii.interface(jsii_type="jsii-calc.PythonSelf.IInterfaceWithSelf")
class IInterfaceWithSelf(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _IInterfaceWithSelfProxy

    @jsii.member(jsii_name="method")
    def method(self_, self: jsii.Number) -> str:
        """
        :param self: -

        stability
        :stability: experimental
        """
        ...


class _IInterfaceWithSelfProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.PythonSelf.IInterfaceWithSelf"

    @jsii.member(jsii_name="method")
    def method(self_, self: jsii.Number) -> str:
        """
        :param self: -

        stability
        :stability: experimental
        """
        return jsii.invoke(self_, "method", [self])


@jsii.data_type(
    jsii_type="jsii-calc.PythonSelf.StructWithSelf",
    jsii_struct_bases=[],
    name_mapping={"self": "self"},
)
class StructWithSelf:
    def __init__(self_, *, self: str) -> None:
        """
        :param self: 

        stability
        :stability: experimental
        """
        self_._values = {
            "self": self,
        }

    @builtins.property
    def self(self) -> str:
        """
        stability
        :stability: experimental
        """
        return self._values.get("self")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructWithSelf(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "ClassWithSelf",
    "ClassWithSelfKwarg",
    "IInterfaceWithSelf",
    "StructWithSelf",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from .._jsii import *

from .. import AllTypes as _AllTypes_b08307c5
from .child import (
    Awesomeness as _Awesomeness_d37a24df,
    Goodness as _Goodness_2df26737,
    SomeEnum as _SomeEnum_b2e41d92,
    SomeStruct as _SomeStruct_91627123,
)
from .nested_submodule.deeply_nested import INamespaced as _INamespaced_e2f386ad


@jsii.implements(_INamespaced_e2f386ad)
class MyClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.submodule.MyClass"):
    """
    stability
    :stability: experimental
    """

    def __init__(self, *, prop: _SomeEnum_b2e41d92) -> None:
        """
        :param prop: 

        stability
        :stability: experimental
        """
        props = _SomeStruct_91627123(prop=prop)

        jsii.create(MyClass, self, [props])

    @builtins.property
    @jsii.member(jsii_name="awesomeness")
    def awesomeness(self) -> _Awesomeness_d37a24df:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "awesomeness")

    @builtins.property
    @jsii.member(jsii_name="definedAt")
    def defined_at(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "definedAt")

    @builtins.property
    @jsii.member(jsii_name="goodness")
    def goodness(self) -> _Goodness_2df26737:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "goodness")

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> _SomeStruct_91627123:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "props")

    @builtins.property
    @jsii.member(jsii_name="allTypes")
    def all_types(self) -> typing.Optional[_AllTypes_b08307c5]:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "allTypes")

    @all_types.setter
    def all_types(self, value: typing.Optional[_AllTypes_b08307c5]) -> None:
        jsii.set(self, "allTypes", value)


__all__ = [
    "MyClass",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/back_references/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from ..._jsii import *

from .. import MyClass as _MyClass_a2fdc0b6


@jsii.data_type(
    jsii_type="jsii-calc.submodule.back_references.MyClassReference",
    jsii_struct_bases=[],
    name_mapping={"reference": "reference"},
)
class MyClassReference:
    def __init__(self, *, reference: _MyClass_a2fdc0b6) -> None:
        """
        :param reference: 

        stability
        :stability: experimental
        """
        self._values = {
            "reference": reference,
        }

    @builtins.property
    def reference(self) -> _MyClass_a2fdc0b6:
        """
        stability
        :stability: experimental
        """
        return self._values.get("reference")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MyClassReference(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "MyClassReference",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/child/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from ..._jsii import *


@jsii.enum(jsii_type="jsii-calc.submodule.child.Awesomeness")
class Awesomeness(enum.Enum):
    """
    stability
    :stability: experimental
    """

    AWESOME = "AWESOME"
    """It was awesome!

    stability
    :stability: experimental
    """


@jsii.enum(jsii_type="jsii-calc.submodule.child.Goodness")
class Goodness(enum.Enum):
    """
    stability
    :stability: experimental
    """

    PRETTY_GOOD = "PRETTY_GOOD"
    """It's pretty good.

    stability
    :stability: experimental
    """
    REALLY_GOOD = "REALLY_GOOD"
    """It's really good.

    stability
    :stability: experimental
    """
    AMAZINGLY_GOOD = "AMAZINGLY_GOOD"
    """It's amazingly good.

    stability
    :stability: experimental
    """


class InnerClass(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.submodule.child.InnerClass"
):
    """
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(InnerClass, self, [])

    @jsii.python.classproperty
    @jsii.member(jsii_name="staticProp")
    def STATIC_PROP(cls) -> "SomeStruct":
        """
        stability
        :stability: experimental
        """
        return jsii.sget(cls, "staticProp")


class OuterClass(
    metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.submodule.child.OuterClass"
):
    """Checks that classes can self-reference during initialization.

    see
    :see: : https://github.com/aws/jsii/pull/1706
    stability
    :stability: experimental
    """

    def __init__(self) -> None:
        """
        stability
        :stability: experimental
        """
        jsii.create(OuterClass, self, [])

    @builtins.property
    @jsii.member(jsii_name="innerClass")
    def inner_class(self) -> "InnerClass":
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "innerClass")


@jsii.enum(jsii_type="jsii-calc.submodule.child.SomeEnum")
class SomeEnum(enum.Enum):
    """
    stability
    :stability: experimental
    """

    SOME = "SOME"
    """
    stability
    :stability: experimental
    """


@jsii.data_type(
    jsii_type="jsii-calc.submodule.child.SomeStruct",
    jsii_struct_bases=[],
    name_mapping={"prop": "prop"},
)
class SomeStruct:
    def __init__(self, *, prop: "SomeEnum") -> None:
        """
        :param prop: 

        stability
        :stability: experimental
        """
        self._values = {
            "prop": prop,
        }

    @builtins.property
    def prop(self) -> "SomeEnum":
        """
        stability
        :stability: experimental
        """
        return self._values.get("prop")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SomeStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.submodule.child.Structure",
    jsii_struct_bases=[],
    name_mapping={"bool": "bool"},
)
class Structure:
    def __init__(self, *, bool: bool) -> None:
        """
        :param bool: 

        stability
        :stability: experimental
        """
        self._values = {
            "bool": bool,
        }

    @builtins.property
    def bool(self) -> bool:
        """
        stability
        :stability: experimental
        """
        return self._values.get("bool")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Structure(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.submodule.child.KwargsProps",
    jsii_struct_bases=[SomeStruct],
    name_mapping={"prop": "prop", "extra": "extra"},
)
class KwargsProps(SomeStruct):
    def __init__(self, *, prop: "SomeEnum", extra: typing.Optional[str] = None) -> None:
        """
        :param prop: 
        :param extra: 

        stability
        :stability: experimental
        """
        self._values = {
            "prop": prop,
        }
        if extra is not None:
            self._values["extra"] = extra

    @builtins.property
    def prop(self) -> "SomeEnum":
        """
        stability
        :stability: experimental
        """
        return self._values.get("prop")

    @builtins.property
    def extra(self) -> typing.Optional[str]:
        """
        stability
        :stability: experimental
        """
        return self._values.get("extra")

    def __eq__(self, rhs) -> bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs) -> bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "KwargsProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "Awesomeness",
    "Goodness",
    "InnerClass",
    "KwargsProps",
    "OuterClass",
    "SomeEnum",
    "SomeStruct",
    "Structure",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/isolated/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from ..._jsii import *

from ..child import (
    KwargsProps as _KwargsProps_c7855dcf, SomeEnum as _SomeEnum_b2e41d92
)


class Kwargs(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.submodule.isolated.Kwargs"):
    """Ensures imports are correctly registered for kwargs lifted properties from super-structs.

    stability
    :stability: experimental
    """

    @jsii.member(jsii_name="method")
    @builtins.classmethod
    def method(
        cls, *, extra: typing.Optional[str] = None, prop: _SomeEnum_b2e41d92
    ) -> bool:
        """
        :param extra: 
        :param prop: 

        stability
        :stability: experimental
        """
        props = _KwargsProps_c7855dcf(extra=extra, prop=prop)

        return jsii.sinvoke(cls, "method", [props])


__all__ = [
    "Kwargs",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/nested_submodule/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from ..._jsii import *

from ..child import Goodness as _Goodness_2df26737
from .deeply_nested import INamespaced as _INamespaced_e2f386ad


@jsii.implements(_INamespaced_e2f386ad)
class Namespaced(
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.submodule.nested_submodule.Namespaced",
):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _NamespacedProxy

    @builtins.property
    @jsii.member(jsii_name="definedAt")
    def defined_at(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "definedAt")

    @builtins.property
    @jsii.member(jsii_name="goodness")
    @abc.abstractmethod
    def goodness(self) -> _Goodness_2df26737:
        """
        stability
        :stability: experimental
        """
        ...


class _NamespacedProxy(Namespaced):
    @builtins.property
    @jsii.member(jsii_name="goodness")
    def goodness(self) -> _Goodness_2df26737:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "goodness")


__all__ = [
    "Namespaced",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/nested_submodule/deeply_nested/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import jsii.compat
import publication

from ...._jsii import *


@jsii.interface(
    jsii_type="jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced"
)
class INamespaced(jsii.compat.Protocol):
    """
    stability
    :stability: experimental
    """

    @builtins.staticmethod
    def __jsii_proxy_class__():
        return _INamespacedProxy

    @builtins.property
    @jsii.member(jsii_name="definedAt")
    def defined_at(self) -> str:
        """
        stability
        :stability: experimental
        """
        ...


class _INamespacedProxy:
    """
    stability
    :stability: experimental
    """

    __jsii_type__ = "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced"

    @builtins.property
    @jsii.member(jsii_name="definedAt")
    def defined_at(self) -> str:
        """
        stability
        :stability: experimental
        """
        return jsii.get(self, "definedAt")


__all__ = [
    "INamespaced",
]

publication.publish()

`;
