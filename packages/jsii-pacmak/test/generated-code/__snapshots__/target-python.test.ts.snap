// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ python
    ‚î£‚îÅ üìÑ LICENSE
    ‚î£‚îÅ üìÑ MANIFEST.in
    ‚î£‚îÅ üìÑ NOTICE
    ‚î£‚îÅ üìÑ pyproject.toml
    ‚î£‚îÅ üìÑ README.md
    ‚î£‚îÅ üìÑ setup.py
    ‚îó‚îÅ üìÅ src
       ‚îó‚îÅ üìÅ scope
          ‚îó‚îÅ üìÅ jsii_calc_base
             ‚î£‚îÅ üìÑ __init__.py
             ‚î£‚îÅ üìÅ _jsii
             ‚îÉ  ‚î£‚îÅ üìÑ __init__.py
             ‚îÉ  ‚îó‚îÅ üìÑ jsii-calc-base@0.0.0.jsii.tgz
             ‚îó‚îÅ üìÑ py.typed
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/MANIFEST.in 1`] = `
include pyproject.toml

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/README.md 1`] = `
scope.jsii-calc-base
====================

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/pyproject.toml 1`] = `
[build-system]
requires = ["setuptools~=56.0.0", "wheel~=0.36.2"]
build-backend = "setuptools.build_meta"

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/setup.py 1`] = `
import json
import setuptools

kwargs = json.loads(
    """
{
    "name": "scope.jsii-calc-base",
    "version": "0.0.0",
    "description": "An example direct dependency for jsii-calc.",
    "license": "Apache-2.0",
    "url": "https://github.com/aws/jsii",
    "long_description_content_type": "text/markdown",
    "author": "Amazon Web Services",
    "bdist_wheel": {
        "universal": true
    },
    "project_urls": {
        "Source": "https://github.com/aws/jsii.git"
    },
    "package_dir": {
        "": "src"
    },
    "packages": [
        "scope.jsii_calc_base",
        "scope.jsii_calc_base._jsii"
    ],
    "package_data": {
        "scope.jsii_calc_base._jsii": [
            "jsii-calc-base@0.0.0.jsii.tgz"
        ],
        "scope.jsii_calc_base": [
            "py.typed"
        ]
    },
    "python_requires": ">=3.6",
    "install_requires": [
        "jsii<0.0.1",
        "publication>=0.0.3",
        "scope.jsii-calc-base-of-base>=2.1.1, <3.0.0"
    ],
    "classifiers": [
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Programming Language :: JavaScript",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Typing :: Typed",
        "License :: OSI Approved"
    ],
    "scripts": []
}
"""
)

with open("README.md", encoding="utf8") as fp:
    kwargs["long_description"] = fp.read()


setuptools.setup(**kwargs)

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/src/scope/jsii_calc_base/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ._jsii import *

import scope.jsii_calc_base_of_base


class Base(metaclass=jsii.JSIIAbstractClass, jsii_type="@scope/jsii-calc-base.Base"):
    '''A base class.'''

    def __init__(self) -> None:
        jsii.create(Base, self, [])

    @jsii.member(jsii_name="typeName")
    def type_name(self) -> typing.Any:
        '''
        :return: the name of the class (to verify native type names are created for derived classes).
        '''
        return typing.cast(typing.Any, jsii.invoke(self, "typeName", []))


class _BaseProxy(Base):
    pass

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, Base).__jsii_proxy_class__ = lambda : _BaseProxy


@jsii.data_type(
    jsii_type="@scope/jsii-calc-base.BaseProps",
    jsii_struct_bases=[scope.jsii_calc_base_of_base.VeryBaseProps],
    name_mapping={"foo": "foo", "bar": "bar"},
)
class BaseProps(scope.jsii_calc_base_of_base.VeryBaseProps):
    def __init__(
        self,
        *,
        foo: scope.jsii_calc_base_of_base.Very,
        bar: builtins.str,
    ) -> None:
        '''
        :param foo: -
        :param bar: -
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "foo": foo,
            "bar": bar,
        }

    @builtins.property
    def foo(self) -> scope.jsii_calc_base_of_base.Very:
        result = self._values.get("foo")
        assert result is not None, "Required property 'foo' is missing"
        return typing.cast(scope.jsii_calc_base_of_base.Very, result)

    @builtins.property
    def bar(self) -> builtins.str:
        result = self._values.get("bar")
        assert result is not None, "Required property 'bar' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "BaseProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.interface(jsii_type="@scope/jsii-calc-base.IBaseInterface")
class IBaseInterface(
    scope.jsii_calc_base_of_base.IVeryBaseInterface,
    typing_extensions.Protocol,
):
    @jsii.member(jsii_name="bar")
    def bar(self) -> None:
        ...


class _IBaseInterfaceProxy(
    jsii.proxy_for(scope.jsii_calc_base_of_base.IVeryBaseInterface), # type: ignore[misc]
):
    __jsii_type__: typing.ClassVar[str] = "@scope/jsii-calc-base.IBaseInterface"

    @jsii.member(jsii_name="bar")
    def bar(self) -> None:
        return typing.cast(None, jsii.invoke(self, "bar", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IBaseInterface).__jsii_proxy_class__ = lambda : _IBaseInterfaceProxy


class StaticConsumer(
    metaclass=jsii.JSIIMeta,
    jsii_type="@scope/jsii-calc-base.StaticConsumer",
):
    '''Hides the transitive dependency of base-of-base.'''

    def __init__(self) -> None:
        jsii.create(StaticConsumer, self, [])

    @jsii.member(jsii_name="consume") # type: ignore[misc]
    @builtins.classmethod
    def consume(cls, *args: typing.Any) -> None:
        '''
        :param args: -
        '''
        return typing.cast(None, jsii.sinvoke(cls, "consume", [*args]))


__all__ = [
    "Base",
    "BaseProps",
    "IBaseInterface",
    "StaticConsumer",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/src/scope/jsii_calc_base/_jsii/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

import scope.jsii_calc_base_of_base._jsii

__jsii_assembly__ = jsii.JSIIAssembly.load(
    "@scope/jsii-calc-base", "0.0.0", __name__[0:-6], "jsii-calc-base@0.0.0.jsii.tgz"
)

__all__ = [
    "__jsii_assembly__",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/src/scope/jsii_calc_base/_jsii/jsii-calc-base@0.0.0.jsii.tgz 1`] = `python/src/scope/jsii_calc_base/_jsii/jsii-calc-base@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/python/src/scope/jsii_calc_base/py.typed 1`] = `


`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ python
    ‚î£‚îÅ üìÑ LICENSE
    ‚î£‚îÅ üìÑ MANIFEST.in
    ‚î£‚îÅ üìÑ NOTICE
    ‚î£‚îÅ üìÑ pyproject.toml
    ‚î£‚îÅ üìÑ README.md
    ‚î£‚îÅ üìÑ setup.py
    ‚îó‚îÅ üìÅ src
       ‚îó‚îÅ üìÅ scope
          ‚îó‚îÅ üìÅ jsii_calc_base_of_base
             ‚î£‚îÅ üìÑ __init__.py
             ‚î£‚îÅ üìÅ _jsii
             ‚îÉ  ‚î£‚îÅ üìÑ __init__.py
             ‚îÉ  ‚îó‚îÅ üìÑ jsii-calc-base-of-base@2.1.1.jsii.tgz
             ‚îó‚îÅ üìÑ py.typed
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/MANIFEST.in 1`] = `
include pyproject.toml

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/README.md 1`] = `
scope.jsii-calc-base-of-base
============================

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/pyproject.toml 1`] = `
[build-system]
requires = ["setuptools~=56.0.0", "wheel~=0.36.2"]
build-backend = "setuptools.build_meta"

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/setup.py 1`] = `
import json
import setuptools

kwargs = json.loads(
    """
{
    "name": "scope.jsii-calc-base-of-base",
    "version": "2.1.1",
    "description": "An example transitive dependency for jsii-calc.",
    "license": "Apache-2.0",
    "url": "https://github.com/aws/jsii",
    "long_description_content_type": "text/markdown",
    "author": "Amazon Web Services",
    "bdist_wheel": {
        "universal": true
    },
    "project_urls": {
        "Source": "https://github.com/aws/jsii.git"
    },
    "package_dir": {
        "": "src"
    },
    "packages": [
        "scope.jsii_calc_base_of_base",
        "scope.jsii_calc_base_of_base._jsii"
    ],
    "package_data": {
        "scope.jsii_calc_base_of_base._jsii": [
            "jsii-calc-base-of-base@2.1.1.jsii.tgz"
        ],
        "scope.jsii_calc_base_of_base": [
            "py.typed"
        ]
    },
    "python_requires": ">=3.6",
    "install_requires": [
        "jsii<0.0.1",
        "publication>=0.0.3"
    ],
    "classifiers": [
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Programming Language :: JavaScript",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Typing :: Typed",
        "License :: OSI Approved"
    ],
    "scripts": []
}
"""
)

with open("README.md", encoding="utf8") as fp:
    kwargs["long_description"] = fp.read()


setuptools.setup(**kwargs)

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/src/scope/jsii_calc_base_of_base/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ._jsii import *


@jsii.interface(jsii_type="@scope/jsii-calc-base-of-base.IVeryBaseInterface")
class IVeryBaseInterface(typing_extensions.Protocol):
    @jsii.member(jsii_name="foo")
    def foo(self) -> None:
        ...


class _IVeryBaseInterfaceProxy:
    __jsii_type__: typing.ClassVar[str] = "@scope/jsii-calc-base-of-base.IVeryBaseInterface"

    @jsii.member(jsii_name="foo")
    def foo(self) -> None:
        return typing.cast(None, jsii.invoke(self, "foo", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IVeryBaseInterface).__jsii_proxy_class__ = lambda : _IVeryBaseInterfaceProxy


class StaticConsumer(
    metaclass=jsii.JSIIMeta,
    jsii_type="@scope/jsii-calc-base-of-base.StaticConsumer",
):
    @jsii.member(jsii_name="consume") # type: ignore[misc]
    @builtins.classmethod
    def consume(cls, *_args: typing.Any) -> None:
        '''
        :param _args: -
        '''
        return typing.cast(None, jsii.sinvoke(cls, "consume", [*_args]))


class Very(metaclass=jsii.JSIIMeta, jsii_type="@scope/jsii-calc-base-of-base.Very"):
    '''(experimental) Something here.

    :stability: experimental
    '''

    def __init__(self) -> None:
        jsii.create(Very, self, [])

    @jsii.member(jsii_name="hey")
    def hey(self) -> jsii.Number:
        '''
        :stability: experimental
        '''
        return typing.cast(jsii.Number, jsii.invoke(self, "hey", []))


@jsii.data_type(
    jsii_type="@scope/jsii-calc-base-of-base.VeryBaseProps",
    jsii_struct_bases=[],
    name_mapping={"foo": "foo"},
)
class VeryBaseProps:
    def __init__(self, *, foo: Very) -> None:
        '''
        :param foo: -
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "foo": foo,
        }

    @builtins.property
    def foo(self) -> Very:
        result = self._values.get("foo")
        assert result is not None, "Required property 'foo' is missing"
        return typing.cast(Very, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "VeryBaseProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "IVeryBaseInterface",
    "StaticConsumer",
    "Very",
    "VeryBaseProps",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/src/scope/jsii_calc_base_of_base/_jsii/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

__jsii_assembly__ = jsii.JSIIAssembly.load(
    "@scope/jsii-calc-base-of-base",
    "2.1.1",
    __name__[0:-6],
    "jsii-calc-base-of-base@2.1.1.jsii.tgz",
)

__all__ = [
    "__jsii_assembly__",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/src/scope/jsii_calc_base_of_base/_jsii/jsii-calc-base-of-base@2.1.1.jsii.tgz 1`] = `python/src/scope/jsii_calc_base_of_base/_jsii/jsii-calc-base-of-base@2.1.1.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/python/src/scope/jsii_calc_base_of_base/py.typed 1`] = `


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ python
    ‚î£‚îÅ üìÑ LICENSE
    ‚î£‚îÅ üìÑ MANIFEST.in
    ‚î£‚îÅ üìÑ NOTICE
    ‚î£‚îÅ üìÑ pyproject.toml
    ‚î£‚îÅ üìÑ README.md
    ‚î£‚îÅ üìÑ setup.py
    ‚îó‚îÅ üìÅ src
       ‚îó‚îÅ üìÅ scope
          ‚îó‚îÅ üìÅ jsii_calc_lib
             ‚î£‚îÅ üìÑ __init__.py
             ‚î£‚îÅ üìÅ _jsii
             ‚îÉ  ‚î£‚îÅ üìÑ __init__.py
             ‚îÉ  ‚îó‚îÅ üìÑ jsii-calc-lib@0.0.0.jsii.tgz
             ‚î£‚îÅ üìÅ custom_submodule_name
             ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
             ‚îó‚îÅ üìÑ py.typed
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/MANIFEST.in 1`] = `
include pyproject.toml

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/README.md 1`] = `
scope.jsii-calc-lib
===================

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/pyproject.toml 1`] = `
[build-system]
requires = ["setuptools~=56.0.0", "wheel~=0.36.2"]
build-backend = "setuptools.build_meta"

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/setup.py 1`] = `
import json
import setuptools

kwargs = json.loads(
    """
{
    "name": "scope.jsii-calc-lib",
    "version": "0.0.0",
    "description": "A simple calcuator library built on JSII.",
    "license": "Apache-2.0",
    "url": "https://github.com/aws/jsii",
    "long_description_content_type": "text/markdown",
    "author": "Amazon Web Services",
    "bdist_wheel": {
        "universal": true
    },
    "project_urls": {
        "Source": "https://github.com/aws/jsii.git"
    },
    "package_dir": {
        "": "src"
    },
    "packages": [
        "scope.jsii_calc_lib",
        "scope.jsii_calc_lib._jsii",
        "scope.jsii_calc_lib.custom_submodule_name"
    ],
    "package_data": {
        "scope.jsii_calc_lib._jsii": [
            "jsii-calc-lib@0.0.0.jsii.tgz"
        ],
        "scope.jsii_calc_lib": [
            "py.typed"
        ]
    },
    "python_requires": ">=3.6",
    "install_requires": [
        "jsii<0.0.1",
        "publication>=0.0.3",
        "scope.jsii-calc-base-of-base>=2.1.1, <3.0.0",
        "scope.jsii-calc-base<0.0.1"
    ],
    "classifiers": [
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Programming Language :: JavaScript",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Typing :: Typed",
        "Development Status :: 7 - Inactive",
        "License :: OSI Approved"
    ],
    "scripts": []
}
"""
)

with open("README.md", encoding="utf8") as fp:
    kwargs["long_description"] = fp.read()


setuptools.setup(**kwargs)

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/src/scope/jsii_calc_lib/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ._jsii import *

import scope.jsii_calc_base
import scope.jsii_calc_base_of_base


class BaseFor2647(
    metaclass=jsii.JSIIMeta,
    jsii_type="@scope/jsii-calc-lib.BaseFor2647",
):
    '''(deprecated) A base class for testing #2647.

    The method \`\`foo\`\` has a parameter that uses a type
    from a dependent module. Since Go "reimplments" this method, it will also need
    to include an "import" statement for the calc-base module.

    :see: https://github.com/aws/jsii/issues/2647
    :stability: deprecated
    '''

    def __init__(self, very: scope.jsii_calc_base_of_base.Very) -> None:
        '''
        :param very: -

        :stability: deprecated
        '''
        jsii.create(BaseFor2647, self, [very])

    @jsii.member(jsii_name="foo")
    def foo(self, obj: scope.jsii_calc_base.IBaseInterface) -> None:
        '''
        :param obj: -

        :stability: deprecated
        '''
        return typing.cast(None, jsii.invoke(self, "foo", [obj]))


@jsii.data_type(
    jsii_type="@scope/jsii-calc-lib.DiamondLeft",
    jsii_struct_bases=[],
    name_mapping={"hoisted_top": "hoistedTop", "left": "left"},
)
class DiamondLeft:
    def __init__(
        self,
        *,
        hoisted_top: typing.Optional[builtins.str] = None,
        left: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param hoisted_top: 
        :param left: 

        :stability: deprecated
        '''
        self._values: typing.Dict[str, typing.Any] = {}
        if hoisted_top is not None:
            self._values["hoisted_top"] = hoisted_top
        if left is not None:
            self._values["left"] = left

    @builtins.property
    def hoisted_top(self) -> typing.Optional[builtins.str]:
        '''
        :stability: deprecated
        '''
        result = self._values.get("hoisted_top")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def left(self) -> typing.Optional[jsii.Number]:
        '''
        :stability: deprecated
        '''
        result = self._values.get("left")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DiamondLeft(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@scope/jsii-calc-lib.DiamondRight",
    jsii_struct_bases=[],
    name_mapping={"hoisted_top": "hoistedTop", "right": "right"},
)
class DiamondRight:
    def __init__(
        self,
        *,
        hoisted_top: typing.Optional[builtins.str] = None,
        right: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''
        :param hoisted_top: 
        :param right: 

        :stability: deprecated
        '''
        self._values: typing.Dict[str, typing.Any] = {}
        if hoisted_top is not None:
            self._values["hoisted_top"] = hoisted_top
        if right is not None:
            self._values["right"] = right

    @builtins.property
    def hoisted_top(self) -> typing.Optional[builtins.str]:
        '''
        :stability: deprecated
        '''
        result = self._values.get("hoisted_top")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def right(self) -> typing.Optional[builtins.bool]:
        '''
        :stability: deprecated
        '''
        result = self._values.get("right")
        return typing.cast(typing.Optional[builtins.bool], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DiamondRight(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.enum(jsii_type="@scope/jsii-calc-lib.EnumFromScopedModule")
class EnumFromScopedModule(enum.Enum):
    '''(deprecated) Check that enums from @scoped packages can be references.

    See awslabs/jsii#138

    :stability: deprecated
    '''

    VALUE1 = "VALUE1"
    '''
    :stability: deprecated
    '''
    VALUE2 = "VALUE2"
    '''
    :stability: deprecated
    '''


@jsii.interface(jsii_type="@scope/jsii-calc-lib.IDoublable")
class IDoublable(typing_extensions.Protocol):
    '''(deprecated) The general contract for a concrete number.

    :stability: deprecated
    '''

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="doubleValue")
    def double_value(self) -> jsii.Number:
        '''
        :stability: deprecated
        '''
        ...


class _IDoublableProxy:
    '''(deprecated) The general contract for a concrete number.

    :stability: deprecated
    '''

    __jsii_type__: typing.ClassVar[str] = "@scope/jsii-calc-lib.IDoublable"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="doubleValue")
    def double_value(self) -> jsii.Number:
        '''
        :stability: deprecated
        '''
        return typing.cast(jsii.Number, jsii.get(self, "doubleValue"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IDoublable).__jsii_proxy_class__ = lambda : _IDoublableProxy


@jsii.interface(jsii_type="@scope/jsii-calc-lib.IFriendly")
class IFriendly(typing_extensions.Protocol):
    '''(deprecated) Applies to classes that are considered friendly.

    These classes can be greeted with
    a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.

    :stability: deprecated
    '''

    @jsii.member(jsii_name="hello")
    def hello(self) -> builtins.str:
        '''(deprecated) Say hello!

        :stability: deprecated
        '''
        ...


class _IFriendlyProxy:
    '''(deprecated) Applies to classes that are considered friendly.

    These classes can be greeted with
    a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.

    :stability: deprecated
    '''

    __jsii_type__: typing.ClassVar[str] = "@scope/jsii-calc-lib.IFriendly"

    @jsii.member(jsii_name="hello")
    def hello(self) -> builtins.str:
        '''(deprecated) Say hello!

        :stability: deprecated
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "hello", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IFriendly).__jsii_proxy_class__ = lambda : _IFriendlyProxy


@jsii.interface(jsii_type="@scope/jsii-calc-lib.IThreeLevelsInterface")
class IThreeLevelsInterface(
    scope.jsii_calc_base.IBaseInterface,
    typing_extensions.Protocol,
):
    '''(deprecated) Interface that inherits from packages 2 levels up the tree.

    Their presence validates that .NET/Java/jsii-reflect can track all fields
    far enough up the tree.

    :stability: deprecated
    '''

    @jsii.member(jsii_name="baz")
    def baz(self) -> None:
        '''
        :stability: deprecated
        '''
        ...


class _IThreeLevelsInterfaceProxy(
    jsii.proxy_for(scope.jsii_calc_base.IBaseInterface) # type: ignore[misc]
):
    '''(deprecated) Interface that inherits from packages 2 levels up the tree.

    Their presence validates that .NET/Java/jsii-reflect can track all fields
    far enough up the tree.

    :stability: deprecated
    '''

    __jsii_type__: typing.ClassVar[str] = "@scope/jsii-calc-lib.IThreeLevelsInterface"

    @jsii.member(jsii_name="baz")
    def baz(self) -> None:
        '''
        :stability: deprecated
        '''
        return typing.cast(None, jsii.invoke(self, "baz", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IThreeLevelsInterface).__jsii_proxy_class__ = lambda : _IThreeLevelsInterfaceProxy


@jsii.data_type(
    jsii_type="@scope/jsii-calc-lib.MyFirstStruct",
    jsii_struct_bases=[],
    name_mapping={
        "anumber": "anumber",
        "astring": "astring",
        "first_optional": "firstOptional",
    },
)
class MyFirstStruct:
    def __init__(
        self,
        *,
        anumber: jsii.Number,
        astring: builtins.str,
        first_optional: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''(deprecated) This is the first struct we have created in jsii.

        :param anumber: (deprecated) An awesome number value.
        :param astring: (deprecated) A string value.
        :param first_optional: 

        :stability: deprecated
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "anumber": anumber,
            "astring": astring,
        }
        if first_optional is not None:
            self._values["first_optional"] = first_optional

    @builtins.property
    def anumber(self) -> jsii.Number:
        '''(deprecated) An awesome number value.

        :stability: deprecated
        '''
        result = self._values.get("anumber")
        assert result is not None, "Required property 'anumber' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def astring(self) -> builtins.str:
        '''(deprecated) A string value.

        :stability: deprecated
        '''
        result = self._values.get("astring")
        assert result is not None, "Required property 'astring' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def first_optional(self) -> typing.Optional[typing.List[builtins.str]]:
        '''
        :stability: deprecated
        '''
        result = self._values.get("first_optional")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MyFirstStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class NumericValue(
    scope.jsii_calc_base.Base,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="@scope/jsii-calc-lib.NumericValue",
):
    '''(deprecated) Abstract class which represents a numeric value.

    :stability: deprecated
    '''

    def __init__(self) -> None:
        jsii.create(NumericValue, self, [])

    @jsii.member(jsii_name="toString")
    def to_string(self) -> builtins.str:
        '''(deprecated) String representation of the value.

        :stability: deprecated
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "toString", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    @abc.abstractmethod
    def value(self) -> jsii.Number:
        '''(deprecated) The value.

        :stability: deprecated
        '''
        ...


class _NumericValueProxy(
    NumericValue, jsii.proxy_for(scope.jsii_calc_base.Base) # type: ignore[misc]
):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        '''(deprecated) The value.

        :stability: deprecated
        '''
        return typing.cast(jsii.Number, jsii.get(self, "value"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, NumericValue).__jsii_proxy_class__ = lambda : _NumericValueProxy


class Operation(
    NumericValue,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="@scope/jsii-calc-lib.Operation",
):
    '''(deprecated) Represents an operation on values.

    :stability: deprecated
    '''

    def __init__(self) -> None:
        jsii.create(Operation, self, [])

    @jsii.member(jsii_name="toString") # type: ignore[misc]
    @abc.abstractmethod
    def to_string(self) -> builtins.str:
        '''(deprecated) String representation of the value.

        :stability: deprecated
        '''
        ...


class _OperationProxy(
    Operation, jsii.proxy_for(NumericValue) # type: ignore[misc]
):
    @jsii.member(jsii_name="toString")
    def to_string(self) -> builtins.str:
        '''(deprecated) String representation of the value.

        :stability: deprecated
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "toString", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, Operation).__jsii_proxy_class__ = lambda : _OperationProxy


@jsii.data_type(
    jsii_type="@scope/jsii-calc-lib.StructWithOnlyOptionals",
    jsii_struct_bases=[],
    name_mapping={
        "optional1": "optional1",
        "optional2": "optional2",
        "optional3": "optional3",
    },
)
class StructWithOnlyOptionals:
    def __init__(
        self,
        *,
        optional1: typing.Optional[builtins.str] = None,
        optional2: typing.Optional[jsii.Number] = None,
        optional3: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''(deprecated) This is a struct with only optional properties.

        :param optional1: (deprecated) The first optional!
        :param optional2: 
        :param optional3: 

        :stability: deprecated
        '''
        self._values: typing.Dict[str, typing.Any] = {}
        if optional1 is not None:
            self._values["optional1"] = optional1
        if optional2 is not None:
            self._values["optional2"] = optional2
        if optional3 is not None:
            self._values["optional3"] = optional3

    @builtins.property
    def optional1(self) -> typing.Optional[builtins.str]:
        '''(deprecated) The first optional!

        :stability: deprecated
        '''
        result = self._values.get("optional1")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def optional2(self) -> typing.Optional[jsii.Number]:
        '''
        :stability: deprecated
        '''
        result = self._values.get("optional2")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def optional3(self) -> typing.Optional[builtins.bool]:
        '''
        :stability: deprecated
        '''
        result = self._values.get("optional3")
        return typing.cast(typing.Optional[builtins.bool], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructWithOnlyOptionals(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(IDoublable)
class Number(
    NumericValue,
    metaclass=jsii.JSIIMeta,
    jsii_type="@scope/jsii-calc-lib.Number",
):
    '''(deprecated) Represents a concrete number.

    :stability: deprecated
    '''

    def __init__(self, value: jsii.Number) -> None:
        '''(deprecated) Creates a Number object.

        :param value: The number.

        :stability: deprecated
        '''
        jsii.create(Number, self, [value])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="doubleValue")
    def double_value(self) -> jsii.Number:
        '''(deprecated) The number multiplied by 2.

        :stability: deprecated
        '''
        return typing.cast(jsii.Number, jsii.get(self, "doubleValue"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        '''(deprecated) The number.

        :stability: deprecated
        '''
        return typing.cast(jsii.Number, jsii.get(self, "value"))


__all__ = [
    "BaseFor2647",
    "DiamondLeft",
    "DiamondRight",
    "EnumFromScopedModule",
    "IDoublable",
    "IFriendly",
    "IThreeLevelsInterface",
    "MyFirstStruct",
    "Number",
    "NumericValue",
    "Operation",
    "StructWithOnlyOptionals",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/src/scope/jsii_calc_lib/_jsii/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

import scope.jsii_calc_base._jsii
import scope.jsii_calc_base_of_base._jsii

__jsii_assembly__ = jsii.JSIIAssembly.load(
    "@scope/jsii-calc-lib", "0.0.0", __name__[0:-6], "jsii-calc-lib@0.0.0.jsii.tgz"
)

__all__ = [
    "__jsii_assembly__",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/src/scope/jsii_calc_lib/_jsii/jsii-calc-lib@0.0.0.jsii.tgz 1`] = `python/src/scope/jsii_calc_lib/_jsii/jsii-calc-lib@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/src/scope/jsii_calc_lib/custom_submodule_name/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *


@jsii.interface(jsii_type="@scope/jsii-calc-lib.submodule.IReflectable")
class IReflectable(typing_extensions.Protocol):
    '''
    :stability: deprecated
    '''

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="entries")
    def entries(self) -> typing.List["ReflectableEntry"]:
        '''
        :stability: deprecated
        '''
        ...


class _IReflectableProxy:
    '''
    :stability: deprecated
    '''

    __jsii_type__: typing.ClassVar[str] = "@scope/jsii-calc-lib.submodule.IReflectable"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="entries")
    def entries(self) -> typing.List["ReflectableEntry"]:
        '''
        :stability: deprecated
        '''
        return typing.cast(typing.List["ReflectableEntry"], jsii.get(self, "entries"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IReflectable).__jsii_proxy_class__ = lambda : _IReflectableProxy


class NestingClass(
    metaclass=jsii.JSIIMeta,
    jsii_type="@scope/jsii-calc-lib.submodule.NestingClass",
):
    '''(deprecated) This class is here to show we can use nested classes across module boundaries.

    :stability: deprecated
    '''

    class NestedClass(
        metaclass=jsii.JSIIMeta,
        jsii_type="@scope/jsii-calc-lib.submodule.NestingClass.NestedClass",
    ):
        '''(deprecated) This class is here to show we can use nested classes across module boundaries.

        :stability: deprecated
        '''

        def __init__(self) -> None:
            '''
            :stability: deprecated
            '''
            jsii.create(NestedClass, self, [])

        @builtins.property # type: ignore[misc]
        @jsii.member(jsii_name="property")
        def property(self) -> builtins.str:
            '''
            :stability: deprecated
            '''
            return typing.cast(builtins.str, jsii.get(self, "property"))

    @jsii.data_type(
        jsii_type="@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct",
        jsii_struct_bases=[],
        name_mapping={"name": "name"},
    )
    class NestedStruct:
        def __init__(self, *, name: builtins.str) -> None:
            '''(deprecated) This is a struct, nested within a class.

            Normal.

            :param name: 

            :stability: deprecated
            '''
            self._values: typing.Dict[str, typing.Any] = {
                "name": name,
            }

        @builtins.property
        def name(self) -> builtins.str:
            '''
            :stability: deprecated
            '''
            result = self._values.get("name")
            assert result is not None, "Required property 'name' is missing"
            return typing.cast(builtins.str, result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "NestedStruct(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )


@jsii.data_type(
    jsii_type="@scope/jsii-calc-lib.submodule.ReflectableEntry",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "value": "value"},
)
class ReflectableEntry:
    def __init__(self, *, key: builtins.str, value: typing.Any) -> None:
        '''
        :param key: 
        :param value: 

        :stability: deprecated
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "key": key,
            "value": value,
        }

    @builtins.property
    def key(self) -> builtins.str:
        '''
        :stability: deprecated
        '''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> typing.Any:
        '''
        :stability: deprecated
        '''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(typing.Any, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ReflectableEntry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Reflector(
    metaclass=jsii.JSIIMeta,
    jsii_type="@scope/jsii-calc-lib.submodule.Reflector",
):
    '''
    :stability: deprecated
    '''

    def __init__(self) -> None:
        '''
        :stability: deprecated
        '''
        jsii.create(Reflector, self, [])

    @jsii.member(jsii_name="asMap")
    def as_map(
        self,
        reflectable: IReflectable,
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param reflectable: -

        :stability: deprecated
        '''
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "asMap", [reflectable]))


__all__ = [
    "IReflectable",
    "NestingClass",
    "ReflectableEntry",
    "Reflector",
]

publication.publish()

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/python/src/scope/jsii_calc_lib/py.typed 1`] = `


`;

exports[`Generated code for "jsii-calc": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ python
    ‚î£‚îÅ üìÑ LICENSE
    ‚î£‚îÅ üìÑ MANIFEST.in
    ‚î£‚îÅ üìÑ NOTICE
    ‚î£‚îÅ üìÑ pyproject.toml
    ‚î£‚îÅ üìÑ README.md
    ‚î£‚îÅ üìÑ setup.py
    ‚îó‚îÅ üìÅ src
       ‚îó‚îÅ üìÅ jsii_calc
          ‚î£‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ _jsii
          ‚îÉ  ‚î£‚îÅ üìÑ __init__.py
          ‚îÉ  ‚î£‚îÅ üìÅ bin
          ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ calc
          ‚îÉ  ‚îó‚îÅ üìÑ jsii-calc@3.20.120.jsii.tgz
          ‚î£‚îÅ üìÅ composition
          ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ derived_class_has_no_properties
          ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ interface_in_namespace_includes_classes
          ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ interface_in_namespace_only_interface
          ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ module2530
          ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ module2617
          ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ module2647
          ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ module2689
          ‚îÉ  ‚î£‚îÅ üìÑ __init__.py
          ‚îÉ  ‚î£‚îÅ üìÅ methods
          ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚îÉ  ‚î£‚îÅ üìÅ props
          ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚îÉ  ‚î£‚îÅ üìÅ retval
          ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚îÉ  ‚îó‚îÅ üìÅ structs
          ‚îÉ     ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ module2692
          ‚îÉ  ‚î£‚îÅ üìÑ __init__.py
          ‚îÉ  ‚î£‚îÅ üìÅ submodule1
          ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚îÉ  ‚îó‚îÅ üìÅ submodule2
          ‚îÉ     ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ module2700
          ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ module2702
          ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ nodirect
          ‚îÉ  ‚î£‚îÅ üìÑ __init__.py
          ‚îÉ  ‚î£‚îÅ üìÅ sub1
          ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚îÉ  ‚îó‚îÅ üìÅ sub2
          ‚îÉ     ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÅ onlystatic
          ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚î£‚îÅ üìÑ py.typed
          ‚î£‚îÅ üìÅ python_self
          ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
          ‚îó‚îÅ üìÅ submodule
             ‚î£‚îÅ üìÑ __init__.py
             ‚î£‚îÅ üìÅ back_references
             ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
             ‚î£‚îÅ üìÅ child
             ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
             ‚î£‚îÅ üìÅ isolated
             ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
             ‚î£‚îÅ üìÅ nested_submodule
             ‚îÉ  ‚î£‚îÅ üìÑ __init__.py
             ‚îÉ  ‚îó‚îÅ üìÅ deeply_nested
             ‚îÉ     ‚îó‚îÅ üìÑ __init__.py
             ‚î£‚îÅ üìÅ param
             ‚îÉ  ‚îó‚îÅ üìÑ __init__.py
             ‚îó‚îÅ üìÅ returnsparam
                ‚îó‚îÅ üìÑ __init__.py
`;

exports[`Generated code for "jsii-calc": <outDir>/python/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "jsii-calc": <outDir>/python/MANIFEST.in 1`] = `
include pyproject.toml

`;

exports[`Generated code for "jsii-calc": <outDir>/python/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "jsii-calc": <outDir>/python/README.md 1`] = `
# jsii Calculator

This library is used to demonstrate and test the features of JSII

## How to use running sum API:

First, create a calculator:

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
calculator = calc.Calculator()
\`\`\`

Then call some operations:

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
calculator.add(10)
\`\`\`

## Code Samples

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
# This is totes a magic comment in here, just you wait!
foo = "bar"
\`\`\`

`;

exports[`Generated code for "jsii-calc": <outDir>/python/pyproject.toml 1`] = `
[build-system]
requires = ["setuptools~=56.0.0", "wheel~=0.36.2"]
build-backend = "setuptools.build_meta"

`;

exports[`Generated code for "jsii-calc": <outDir>/python/setup.py 1`] = `
import json
import setuptools

kwargs = json.loads(
    """
{
    "name": "jsii-calc",
    "version": "3.20.120",
    "description": "A simple calcuator built on JSII.",
    "license": "Apache-2.0",
    "url": "https://github.com/aws/jsii",
    "long_description_content_type": "text/markdown",
    "author": "Amazon Web Services",
    "bdist_wheel": {
        "universal": true
    },
    "project_urls": {
        "Source": "https://github.com/aws/jsii.git"
    },
    "package_dir": {
        "": "src"
    },
    "packages": [
        "jsii_calc",
        "jsii_calc._jsii",
        "jsii_calc.composition",
        "jsii_calc.derived_class_has_no_properties",
        "jsii_calc.interface_in_namespace_includes_classes",
        "jsii_calc.interface_in_namespace_only_interface",
        "jsii_calc.module2530",
        "jsii_calc.module2617",
        "jsii_calc.module2647",
        "jsii_calc.module2689",
        "jsii_calc.module2689.methods",
        "jsii_calc.module2689.props",
        "jsii_calc.module2689.retval",
        "jsii_calc.module2689.structs",
        "jsii_calc.module2692",
        "jsii_calc.module2692.submodule1",
        "jsii_calc.module2692.submodule2",
        "jsii_calc.module2700",
        "jsii_calc.module2702",
        "jsii_calc.nodirect",
        "jsii_calc.nodirect.sub1",
        "jsii_calc.nodirect.sub2",
        "jsii_calc.onlystatic",
        "jsii_calc.python_self",
        "jsii_calc.submodule",
        "jsii_calc.submodule.back_references",
        "jsii_calc.submodule.child",
        "jsii_calc.submodule.isolated",
        "jsii_calc.submodule.nested_submodule",
        "jsii_calc.submodule.nested_submodule.deeply_nested",
        "jsii_calc.submodule.param",
        "jsii_calc.submodule.returnsparam"
    ],
    "package_data": {
        "jsii_calc._jsii": [
            "jsii-calc@3.20.120.jsii.tgz"
        ],
        "jsii_calc": [
            "py.typed"
        ]
    },
    "python_requires": ">=3.6",
    "install_requires": [
        "jsii<0.0.1",
        "publication>=0.0.3",
        "scope.jsii-calc-base<0.0.1",
        "scope.jsii-calc-lib<0.0.1"
    ],
    "classifiers": [
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Programming Language :: JavaScript",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Typing :: Typed",
        "Development Status :: 5 - Production/Stable",
        "License :: OSI Approved",
        "Test :: Classifier :: Is Dummy"
    ],
    "scripts": [
        "src/jsii_calc/_jsii/bin/calc"
    ]
}
"""
)

with open("README.md", encoding="utf8") as fp:
    kwargs["long_description"] = fp.read()


setuptools.setup(**kwargs)

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/__init__.py 1`] = `
'''
# jsii Calculator

This library is used to demonstrate and test the features of JSII

## How to use running sum API:

First, create a calculator:

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
calculator = calc.Calculator()
\`\`\`

Then call some operations:

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
calculator.add(10)
\`\`\`

## Code Samples

\`\`\`python
# Example automatically generated. See https://github.com/aws/jsii/issues/826
# This is totes a magic comment in here, just you wait!
foo = "bar"
\`\`\`
'''
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ._jsii import *

import scope.jsii_calc_base
import scope.jsii_calc_base_of_base
import scope.jsii_calc_lib
import scope.jsii_calc_lib.custom_submodule_name
from .composition import CompositeOperation as _CompositeOperation_1c4d123b


class AbstractClassBase(
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.AbstractClassBase",
):
    def __init__(self) -> None:
        jsii.create(AbstractClassBase, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="abstractProperty")
    @abc.abstractmethod
    def abstract_property(self) -> builtins.str:
        ...


class _AbstractClassBaseProxy(AbstractClassBase):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="abstractProperty")
    def abstract_property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "abstractProperty"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, AbstractClassBase).__jsii_proxy_class__ = lambda : _AbstractClassBaseProxy


class AbstractClassReturner(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.AbstractClassReturner",
):
    def __init__(self) -> None:
        jsii.create(AbstractClassReturner, self, [])

    @jsii.member(jsii_name="giveMeAbstract")
    def give_me_abstract(self) -> "AbstractClass":
        return typing.cast("AbstractClass", jsii.invoke(self, "giveMeAbstract", []))

    @jsii.member(jsii_name="giveMeInterface")
    def give_me_interface(self) -> "IInterfaceImplementedByAbstractClass":
        return typing.cast("IInterfaceImplementedByAbstractClass", jsii.invoke(self, "giveMeInterface", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="returnAbstractFromProperty")
    def return_abstract_from_property(self) -> AbstractClassBase:
        return typing.cast(AbstractClassBase, jsii.get(self, "returnAbstractFromProperty"))


class AbstractSuite(
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.AbstractSuite",
):
    '''Ensures abstract members implementations correctly register overrides in various languages.'''

    def __init__(self) -> None:
        jsii.create(AbstractSuite, self, [])

    @jsii.member(jsii_name="someMethod") # type: ignore[misc]
    @abc.abstractmethod
    def _some_method(self, str: builtins.str) -> builtins.str:
        '''
        :param str: -
        '''
        ...

    @jsii.member(jsii_name="workItAll")
    def work_it_all(self, seed: builtins.str) -> builtins.str:
        '''Sets \`\`seed\`\` to \`\`this.property\`\`, then calls \`\`someMethod\`\` with \`\`this.property\`\` and returns the result.

        :param seed: a \`\`string\`\`.
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "workItAll", [seed]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="property")
    @abc.abstractmethod
    def _property(self) -> builtins.str:
        ...

    @_property.setter
    @abc.abstractmethod
    def _property(self, value: builtins.str) -> None:
        ...


class _AbstractSuiteProxy(AbstractSuite):
    @jsii.member(jsii_name="someMethod")
    def _some_method(self, str: builtins.str) -> builtins.str:
        '''
        :param str: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "someMethod", [str]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="property")
    def _property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "property"))

    @_property.setter
    def _property(self, value: builtins.str) -> None:
        jsii.set(self, "property", value)

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, AbstractSuite).__jsii_proxy_class__ = lambda : _AbstractSuiteProxy


class AllTypes(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.AllTypes"):
    '''This class includes property for all types supported by jsii.

    The setters will validate
    that the value set is of the expected type and throw otherwise.
    '''

    def __init__(self) -> None:
        jsii.create(AllTypes, self, [])

    @jsii.member(jsii_name="anyIn")
    def any_in(self, inp: typing.Any) -> None:
        '''
        :param inp: -
        '''
        return typing.cast(None, jsii.invoke(self, "anyIn", [inp]))

    @jsii.member(jsii_name="anyOut")
    def any_out(self) -> typing.Any:
        return typing.cast(typing.Any, jsii.invoke(self, "anyOut", []))

    @jsii.member(jsii_name="enumMethod")
    def enum_method(self, value: "StringEnum") -> "StringEnum":
        '''
        :param value: -
        '''
        return typing.cast("StringEnum", jsii.invoke(self, "enumMethod", [value]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="enumPropertyValue")
    def enum_property_value(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "enumPropertyValue"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="anyArrayProperty")
    def any_array_property(self) -> typing.List[typing.Any]:
        return typing.cast(typing.List[typing.Any], jsii.get(self, "anyArrayProperty"))

    @any_array_property.setter
    def any_array_property(self, value: typing.List[typing.Any]) -> None:
        jsii.set(self, "anyArrayProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="anyMapProperty")
    def any_map_property(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "anyMapProperty"))

    @any_map_property.setter
    def any_map_property(self, value: typing.Mapping[builtins.str, typing.Any]) -> None:
        jsii.set(self, "anyMapProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="anyProperty")
    def any_property(self) -> typing.Any:
        return typing.cast(typing.Any, jsii.get(self, "anyProperty"))

    @any_property.setter
    def any_property(self, value: typing.Any) -> None:
        jsii.set(self, "anyProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="arrayProperty")
    def array_property(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "arrayProperty"))

    @array_property.setter
    def array_property(self, value: typing.List[builtins.str]) -> None:
        jsii.set(self, "arrayProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="booleanProperty")
    def boolean_property(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "booleanProperty"))

    @boolean_property.setter
    def boolean_property(self, value: builtins.bool) -> None:
        jsii.set(self, "booleanProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="dateProperty")
    def date_property(self) -> datetime.datetime:
        return typing.cast(datetime.datetime, jsii.get(self, "dateProperty"))

    @date_property.setter
    def date_property(self, value: datetime.datetime) -> None:
        jsii.set(self, "dateProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="enumProperty")
    def enum_property(self) -> "AllTypesEnum":
        return typing.cast("AllTypesEnum", jsii.get(self, "enumProperty"))

    @enum_property.setter
    def enum_property(self, value: "AllTypesEnum") -> None:
        jsii.set(self, "enumProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="jsonProperty")
    def json_property(self) -> typing.Mapping[typing.Any, typing.Any]:
        return typing.cast(typing.Mapping[typing.Any, typing.Any], jsii.get(self, "jsonProperty"))

    @json_property.setter
    def json_property(self, value: typing.Mapping[typing.Any, typing.Any]) -> None:
        jsii.set(self, "jsonProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mapProperty")
    def map_property(self) -> typing.Mapping[builtins.str, scope.jsii_calc_lib.Number]:
        return typing.cast(typing.Mapping[builtins.str, scope.jsii_calc_lib.Number], jsii.get(self, "mapProperty"))

    @map_property.setter
    def map_property(
        self,
        value: typing.Mapping[builtins.str, scope.jsii_calc_lib.Number],
    ) -> None:
        jsii.set(self, "mapProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="numberProperty")
    def number_property(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numberProperty"))

    @number_property.setter
    def number_property(self, value: jsii.Number) -> None:
        jsii.set(self, "numberProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="stringProperty")
    def string_property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "stringProperty"))

    @string_property.setter
    def string_property(self, value: builtins.str) -> None:
        jsii.set(self, "stringProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="unionArrayProperty")
    def union_array_property(
        self,
    ) -> typing.List[typing.Union[jsii.Number, scope.jsii_calc_lib.NumericValue]]:
        return typing.cast(typing.List[typing.Union[jsii.Number, scope.jsii_calc_lib.NumericValue]], jsii.get(self, "unionArrayProperty"))

    @union_array_property.setter
    def union_array_property(
        self,
        value: typing.List[typing.Union[jsii.Number, scope.jsii_calc_lib.NumericValue]],
    ) -> None:
        jsii.set(self, "unionArrayProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="unionMapProperty")
    def union_map_property(
        self,
    ) -> typing.Mapping[builtins.str, typing.Union[builtins.str, jsii.Number, scope.jsii_calc_lib.Number]]:
        return typing.cast(typing.Mapping[builtins.str, typing.Union[builtins.str, jsii.Number, scope.jsii_calc_lib.Number]], jsii.get(self, "unionMapProperty"))

    @union_map_property.setter
    def union_map_property(
        self,
        value: typing.Mapping[builtins.str, typing.Union[builtins.str, jsii.Number, scope.jsii_calc_lib.Number]],
    ) -> None:
        jsii.set(self, "unionMapProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="unionProperty")
    def union_property(
        self,
    ) -> typing.Union[builtins.str, jsii.Number, "Multiply", scope.jsii_calc_lib.Number]:
        return typing.cast(typing.Union[builtins.str, jsii.Number, "Multiply", scope.jsii_calc_lib.Number], jsii.get(self, "unionProperty"))

    @union_property.setter
    def union_property(
        self,
        value: typing.Union[builtins.str, jsii.Number, "Multiply", scope.jsii_calc_lib.Number],
    ) -> None:
        jsii.set(self, "unionProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="unknownArrayProperty")
    def unknown_array_property(self) -> typing.List[typing.Any]:
        return typing.cast(typing.List[typing.Any], jsii.get(self, "unknownArrayProperty"))

    @unknown_array_property.setter
    def unknown_array_property(self, value: typing.List[typing.Any]) -> None:
        jsii.set(self, "unknownArrayProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="unknownMapProperty")
    def unknown_map_property(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "unknownMapProperty"))

    @unknown_map_property.setter
    def unknown_map_property(
        self,
        value: typing.Mapping[builtins.str, typing.Any],
    ) -> None:
        jsii.set(self, "unknownMapProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="unknownProperty")
    def unknown_property(self) -> typing.Any:
        return typing.cast(typing.Any, jsii.get(self, "unknownProperty"))

    @unknown_property.setter
    def unknown_property(self, value: typing.Any) -> None:
        jsii.set(self, "unknownProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="optionalEnumValue")
    def optional_enum_value(self) -> typing.Optional["StringEnum"]:
        return typing.cast(typing.Optional["StringEnum"], jsii.get(self, "optionalEnumValue"))

    @optional_enum_value.setter
    def optional_enum_value(self, value: typing.Optional["StringEnum"]) -> None:
        jsii.set(self, "optionalEnumValue", value)


@jsii.enum(jsii_type="jsii-calc.AllTypesEnum")
class AllTypesEnum(enum.Enum):
    MY_ENUM_VALUE = "MY_ENUM_VALUE"
    YOUR_ENUM_VALUE = "YOUR_ENUM_VALUE"
    THIS_IS_GREAT = "THIS_IS_GREAT"


class AllowedMethodNames(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.AllowedMethodNames",
):
    def __init__(self) -> None:
        jsii.create(AllowedMethodNames, self, [])

    @jsii.member(jsii_name="getBar")
    def get_bar(self, _p1: builtins.str, _p2: jsii.Number) -> None:
        '''
        :param _p1: -
        :param _p2: -
        '''
        return typing.cast(None, jsii.invoke(self, "getBar", [_p1, _p2]))

    @jsii.member(jsii_name="getFoo")
    def get_foo(self, with_param: builtins.str) -> builtins.str:
        '''getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay.

        :param with_param: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "getFoo", [with_param]))

    @jsii.member(jsii_name="setBar")
    def set_bar(self, _x: builtins.str, _y: jsii.Number, _z: builtins.bool) -> None:
        '''
        :param _x: -
        :param _y: -
        :param _z: -
        '''
        return typing.cast(None, jsii.invoke(self, "setBar", [_x, _y, _z]))

    @jsii.member(jsii_name="setFoo")
    def set_foo(self, _x: builtins.str, _y: jsii.Number) -> None:
        '''setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay.

        :param _x: -
        :param _y: -
        '''
        return typing.cast(None, jsii.invoke(self, "setFoo", [_x, _y]))


class AmbiguousParameters(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.AmbiguousParameters",
):
    def __init__(
        self,
        scope_: "Bell",
        *,
        scope: builtins.str,
        props: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''
        :param scope_: -
        :param scope: 
        :param props: 
        '''
        props_ = StructParameterType(scope=scope, props=props)

        jsii.create(AmbiguousParameters, self, [scope_, props_])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="props")
    def props(self) -> "StructParameterType":
        return typing.cast("StructParameterType", jsii.get(self, "props"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="scope")
    def scope(self) -> "Bell":
        return typing.cast("Bell", jsii.get(self, "scope"))


class AsyncVirtualMethods(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.AsyncVirtualMethods",
):
    def __init__(self) -> None:
        jsii.create(AsyncVirtualMethods, self, [])

    @jsii.member(jsii_name="callMe")
    def call_me(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.ainvoke(self, "callMe", []))

    @jsii.member(jsii_name="callMe2")
    def call_me2(self) -> jsii.Number:
        '''Just calls "overrideMeToo".'''
        return typing.cast(jsii.Number, jsii.ainvoke(self, "callMe2", []))

    @jsii.member(jsii_name="callMeDoublePromise")
    def call_me_double_promise(self) -> jsii.Number:
        '''This method calls the "callMe" async method indirectly, which will then invoke a virtual method.

        This is a "double promise" situation, which
        means that callbacks are not going to be available immediate, but only
        after an "immediates" cycle.
        '''
        return typing.cast(jsii.Number, jsii.ainvoke(self, "callMeDoublePromise", []))

    @jsii.member(jsii_name="dontOverrideMe")
    def dont_override_me(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.invoke(self, "dontOverrideMe", []))

    @jsii.member(jsii_name="overrideMe")
    def override_me(self, mult: jsii.Number) -> jsii.Number:
        '''
        :param mult: -
        '''
        return typing.cast(jsii.Number, jsii.ainvoke(self, "overrideMe", [mult]))

    @jsii.member(jsii_name="overrideMeToo")
    def override_me_too(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.ainvoke(self, "overrideMeToo", []))


class AugmentableClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.AugmentableClass"):
    def __init__(self) -> None:
        jsii.create(AugmentableClass, self, [])

    @jsii.member(jsii_name="methodOne")
    def method_one(self) -> None:
        return typing.cast(None, jsii.invoke(self, "methodOne", []))

    @jsii.member(jsii_name="methodTwo")
    def method_two(self) -> None:
        return typing.cast(None, jsii.invoke(self, "methodTwo", []))


class BaseJsii976(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.BaseJsii976"):
    def __init__(self) -> None:
        jsii.create(BaseJsii976, self, [])


@jsii.implements(scope.jsii_calc_lib.IFriendly)
class BinaryOperation(
    scope.jsii_calc_lib.Operation,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.BinaryOperation",
):
    '''Represents an operation with two operands.'''

    def __init__(
        self,
        lhs: scope.jsii_calc_lib.NumericValue,
        rhs: scope.jsii_calc_lib.NumericValue,
    ) -> None:
        '''Creates a BinaryOperation.

        :param lhs: Left-hand side operand.
        :param rhs: Right-hand side operand.
        '''
        jsii.create(BinaryOperation, self, [lhs, rhs])

    @jsii.member(jsii_name="hello")
    def hello(self) -> builtins.str:
        '''(deprecated) Say hello!'''
        return typing.cast(builtins.str, jsii.invoke(self, "hello", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="lhs")
    def lhs(self) -> scope.jsii_calc_lib.NumericValue:
        '''Left-hand side operand.'''
        return typing.cast(scope.jsii_calc_lib.NumericValue, jsii.get(self, "lhs"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="rhs")
    def rhs(self) -> scope.jsii_calc_lib.NumericValue:
        '''Right-hand side operand.'''
        return typing.cast(scope.jsii_calc_lib.NumericValue, jsii.get(self, "rhs"))


class _BinaryOperationProxy(
    BinaryOperation, jsii.proxy_for(scope.jsii_calc_lib.Operation) # type: ignore[misc]
):
    pass

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, BinaryOperation).__jsii_proxy_class__ = lambda : _BinaryOperationProxy


class BurriedAnonymousObject(
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.BurriedAnonymousObject",
):
    '''See https://github.com/aws/aws-cdk/issues/7977.'''

    def __init__(self) -> None:
        jsii.create(BurriedAnonymousObject, self, [])

    @jsii.member(jsii_name="check")
    def check(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.invoke(self, "check", []))

    @jsii.member(jsii_name="giveItBack") # type: ignore[misc]
    @abc.abstractmethod
    def give_it_back(self, value: typing.Any) -> typing.Any:
        '''Implement this method and have it return it's parameter.

        :param value: the value that should be returned.

        :return: \`\`value\`\`
        '''
        ...


class _BurriedAnonymousObjectProxy(BurriedAnonymousObject):
    @jsii.member(jsii_name="giveItBack")
    def give_it_back(self, value: typing.Any) -> typing.Any:
        '''Implement this method and have it return it's parameter.

        :param value: the value that should be returned.

        :return: \`\`value\`\`
        '''
        return typing.cast(typing.Any, jsii.invoke(self, "giveItBack", [value]))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, BurriedAnonymousObject).__jsii_proxy_class__ = lambda : _BurriedAnonymousObjectProxy


class Calculator(
    _CompositeOperation_1c4d123b,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.Calculator",
):
    '''A calculator which maintains a current value and allows adding operations.

    Here's how you use it::

       # Example automatically generated. See https://github.com/aws/jsii/issues/826
       calculator = calc.Calculator()
       calculator.add(5)
       calculator.mul(3)
       print(calculator.expression.value)

    I will repeat this example again, but in an @example tag.

    Example::

        # Example automatically generated. See https://github.com/aws/jsii/issues/826
        calculator = calc.Calculator()
        calculator.add(5)
        calculator.mul(3)
        print(calculator.expression.value)
    '''

    def __init__(
        self,
        *,
        initial_value: typing.Optional[jsii.Number] = None,
        maximum_value: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''Creates a Calculator object.

        :param initial_value: The initial value of the calculator. NOTE: Any number works here, it's fine. Default: 0
        :param maximum_value: The maximum value the calculator can store. Default: none
        '''
        props = CalculatorProps(
            initial_value=initial_value, maximum_value=maximum_value
        )

        jsii.create(Calculator, self, [props])

    @jsii.member(jsii_name="add")
    def add(self, value: jsii.Number) -> None:
        '''Adds a number to the current value.

        :param value: -
        '''
        return typing.cast(None, jsii.invoke(self, "add", [value]))

    @jsii.member(jsii_name="mul")
    def mul(self, value: jsii.Number) -> None:
        '''Multiplies the current value by a number.

        :param value: -
        '''
        return typing.cast(None, jsii.invoke(self, "mul", [value]))

    @jsii.member(jsii_name="neg")
    def neg(self) -> None:
        '''Negates the current value.'''
        return typing.cast(None, jsii.invoke(self, "neg", []))

    @jsii.member(jsii_name="pow")
    def pow(self, value: jsii.Number) -> None:
        '''Raises the current value by a power.

        :param value: -
        '''
        return typing.cast(None, jsii.invoke(self, "pow", [value]))

    @jsii.member(jsii_name="readUnionValue")
    def read_union_value(self) -> jsii.Number:
        '''Returns teh value of the union property (if defined).'''
        return typing.cast(jsii.Number, jsii.invoke(self, "readUnionValue", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="expression")
    def expression(self) -> scope.jsii_calc_lib.NumericValue:
        '''Returns the expression.'''
        return typing.cast(scope.jsii_calc_lib.NumericValue, jsii.get(self, "expression"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="operationsLog")
    def operations_log(self) -> typing.List[scope.jsii_calc_lib.NumericValue]:
        '''A log of all operations.'''
        return typing.cast(typing.List[scope.jsii_calc_lib.NumericValue], jsii.get(self, "operationsLog"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="operationsMap")
    def operations_map(
        self,
    ) -> typing.Mapping[builtins.str, typing.List[scope.jsii_calc_lib.NumericValue]]:
        '''A map of per operation name of all operations performed.'''
        return typing.cast(typing.Mapping[builtins.str, typing.List[scope.jsii_calc_lib.NumericValue]], jsii.get(self, "operationsMap"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="curr")
    def curr(self) -> scope.jsii_calc_lib.NumericValue:
        '''The current value.'''
        return typing.cast(scope.jsii_calc_lib.NumericValue, jsii.get(self, "curr"))

    @curr.setter
    def curr(self, value: scope.jsii_calc_lib.NumericValue) -> None:
        jsii.set(self, "curr", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="maxValue")
    def max_value(self) -> typing.Optional[jsii.Number]:
        '''The maximum value allows in this calculator.'''
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "maxValue"))

    @max_value.setter
    def max_value(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "maxValue", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="unionProperty")
    def union_property(
        self,
    ) -> typing.Optional[typing.Union["Add", "Multiply", "Power"]]:
        '''Example of a property that accepts a union of types.'''
        return typing.cast(typing.Optional[typing.Union["Add", "Multiply", "Power"]], jsii.get(self, "unionProperty"))

    @union_property.setter
    def union_property(
        self,
        value: typing.Optional[typing.Union["Add", "Multiply", "Power"]],
    ) -> None:
        jsii.set(self, "unionProperty", value)


@jsii.data_type(
    jsii_type="jsii-calc.CalculatorProps",
    jsii_struct_bases=[],
    name_mapping={"initial_value": "initialValue", "maximum_value": "maximumValue"},
)
class CalculatorProps:
    def __init__(
        self,
        *,
        initial_value: typing.Optional[jsii.Number] = None,
        maximum_value: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''Properties for Calculator.

        :param initial_value: The initial value of the calculator. NOTE: Any number works here, it's fine. Default: 0
        :param maximum_value: The maximum value the calculator can store. Default: none
        '''
        self._values: typing.Dict[str, typing.Any] = {}
        if initial_value is not None:
            self._values["initial_value"] = initial_value
        if maximum_value is not None:
            self._values["maximum_value"] = maximum_value

    @builtins.property
    def initial_value(self) -> typing.Optional[jsii.Number]:
        '''The initial value of the calculator.

        NOTE: Any number works here, it's fine.

        :default: 0
        '''
        result = self._values.get("initial_value")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def maximum_value(self) -> typing.Optional[jsii.Number]:
        '''The maximum value the calculator can store.

        :default: none
        '''
        result = self._values.get("maximum_value")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "CalculatorProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ClassWithCollections(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ClassWithCollections",
):
    def __init__(
        self,
        map: typing.Mapping[builtins.str, builtins.str],
        array: typing.Sequence[builtins.str],
    ) -> None:
        '''
        :param map: -
        :param array: -
        '''
        jsii.create(ClassWithCollections, self, [map, array])

    @jsii.member(jsii_name="createAList") # type: ignore[misc]
    @builtins.classmethod
    def create_a_list(cls) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.sinvoke(cls, "createAList", []))

    @jsii.member(jsii_name="createAMap") # type: ignore[misc]
    @builtins.classmethod
    def create_a_map(cls) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.sinvoke(cls, "createAMap", []))

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="staticArray")
    def static_array(cls) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.sget(cls, "staticArray"))

    @static_array.setter # type: ignore[no-redef]
    def static_array(cls, value: typing.List[builtins.str]) -> None:
        jsii.sset(cls, "staticArray", value)

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="staticMap")
    def static_map(cls) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.sget(cls, "staticMap"))

    @static_map.setter # type: ignore[no-redef]
    def static_map(cls, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        jsii.sset(cls, "staticMap", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="array")
    def array(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "array"))

    @array.setter
    def array(self, value: typing.List[builtins.str]) -> None:
        jsii.set(self, "array", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="map")
    def map(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "map"))

    @map.setter
    def map(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        jsii.set(self, "map", value)


class ClassWithDocs(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ClassWithDocs"):
    '''This class has docs.

    The docs are great. They're a bunch of tags.

    :see: https://aws.amazon.com/
    :customAttribute: hasAValue

    Example::

        # Example automatically generated. See https://github.com/aws/jsii/issues/826
        def an_example():
            pass
    '''

    def __init__(self) -> None:
        jsii.create(ClassWithDocs, self, [])


class ClassWithJavaReservedWords(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ClassWithJavaReservedWords",
):
    def __init__(self, int: builtins.str) -> None:
        '''
        :param int: -
        '''
        jsii.create(ClassWithJavaReservedWords, self, [int])

    @jsii.member(jsii_name="import")
    def import_(self, assert_: builtins.str) -> builtins.str:
        '''
        :param assert_: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "import", [assert_]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="int")
    def int(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "int"))


class ClassWithMutableObjectLiteralProperty(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ClassWithMutableObjectLiteralProperty",
):
    def __init__(self) -> None:
        jsii.create(ClassWithMutableObjectLiteralProperty, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableObject")
    def mutable_object(self) -> "IMutableObjectLiteral":
        return typing.cast("IMutableObjectLiteral", jsii.get(self, "mutableObject"))

    @mutable_object.setter
    def mutable_object(self, value: "IMutableObjectLiteral") -> None:
        jsii.set(self, "mutableObject", value)


class ConfusingToJackson(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ConfusingToJackson",
):
    '''This tries to confuse Jackson by having overloaded property setters.

    :see: https://github.com/aws/aws-cdk/issues/4080
    '''

    @jsii.member(jsii_name="makeInstance") # type: ignore[misc]
    @builtins.classmethod
    def make_instance(cls) -> "ConfusingToJackson":
        return typing.cast("ConfusingToJackson", jsii.sinvoke(cls, "makeInstance", []))

    @jsii.member(jsii_name="makeStructInstance") # type: ignore[misc]
    @builtins.classmethod
    def make_struct_instance(cls) -> "ConfusingToJacksonStruct":
        return typing.cast("ConfusingToJacksonStruct", jsii.sinvoke(cls, "makeStructInstance", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="unionProperty")
    def union_property(
        self,
    ) -> typing.Optional[typing.Union[scope.jsii_calc_lib.IFriendly, typing.List[typing.Union[scope.jsii_calc_lib.IFriendly, "AbstractClass"]]]]:
        return typing.cast(typing.Optional[typing.Union[scope.jsii_calc_lib.IFriendly, typing.List[typing.Union[scope.jsii_calc_lib.IFriendly, "AbstractClass"]]]], jsii.get(self, "unionProperty"))

    @union_property.setter
    def union_property(
        self,
        value: typing.Optional[typing.Union[scope.jsii_calc_lib.IFriendly, typing.List[typing.Union[scope.jsii_calc_lib.IFriendly, "AbstractClass"]]]],
    ) -> None:
        jsii.set(self, "unionProperty", value)


@jsii.data_type(
    jsii_type="jsii-calc.ConfusingToJacksonStruct",
    jsii_struct_bases=[],
    name_mapping={"union_property": "unionProperty"},
)
class ConfusingToJacksonStruct:
    def __init__(
        self,
        *,
        union_property: typing.Optional[typing.Union[scope.jsii_calc_lib.IFriendly, typing.Sequence[typing.Union[scope.jsii_calc_lib.IFriendly, "AbstractClass"]]]] = None,
    ) -> None:
        '''
        :param union_property: 
        '''
        self._values: typing.Dict[str, typing.Any] = {}
        if union_property is not None:
            self._values["union_property"] = union_property

    @builtins.property
    def union_property(
        self,
    ) -> typing.Optional[typing.Union[scope.jsii_calc_lib.IFriendly, typing.List[typing.Union[scope.jsii_calc_lib.IFriendly, "AbstractClass"]]]]:
        result = self._values.get("union_property")
        return typing.cast(typing.Optional[typing.Union[scope.jsii_calc_lib.IFriendly, typing.List[typing.Union[scope.jsii_calc_lib.IFriendly, "AbstractClass"]]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ConfusingToJacksonStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ConstructorPassesThisOut(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ConstructorPassesThisOut",
):
    def __init__(self, consumer: "PartiallyInitializedThisConsumer") -> None:
        '''
        :param consumer: -
        '''
        jsii.create(ConstructorPassesThisOut, self, [consumer])


class Constructors(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Constructors"):
    def __init__(self) -> None:
        jsii.create(Constructors, self, [])

    @jsii.member(jsii_name="hiddenInterface") # type: ignore[misc]
    @builtins.classmethod
    def hidden_interface(cls) -> "IPublicInterface":
        return typing.cast("IPublicInterface", jsii.sinvoke(cls, "hiddenInterface", []))

    @jsii.member(jsii_name="hiddenInterfaces") # type: ignore[misc]
    @builtins.classmethod
    def hidden_interfaces(cls) -> typing.List["IPublicInterface"]:
        return typing.cast(typing.List["IPublicInterface"], jsii.sinvoke(cls, "hiddenInterfaces", []))

    @jsii.member(jsii_name="hiddenSubInterfaces") # type: ignore[misc]
    @builtins.classmethod
    def hidden_sub_interfaces(cls) -> typing.List["IPublicInterface"]:
        return typing.cast(typing.List["IPublicInterface"], jsii.sinvoke(cls, "hiddenSubInterfaces", []))

    @jsii.member(jsii_name="makeClass") # type: ignore[misc]
    @builtins.classmethod
    def make_class(cls) -> "PublicClass":
        return typing.cast("PublicClass", jsii.sinvoke(cls, "makeClass", []))

    @jsii.member(jsii_name="makeInterface") # type: ignore[misc]
    @builtins.classmethod
    def make_interface(cls) -> "IPublicInterface":
        return typing.cast("IPublicInterface", jsii.sinvoke(cls, "makeInterface", []))

    @jsii.member(jsii_name="makeInterface2") # type: ignore[misc]
    @builtins.classmethod
    def make_interface2(cls) -> "IPublicInterface2":
        return typing.cast("IPublicInterface2", jsii.sinvoke(cls, "makeInterface2", []))

    @jsii.member(jsii_name="makeInterfaces") # type: ignore[misc]
    @builtins.classmethod
    def make_interfaces(cls) -> typing.List["IPublicInterface"]:
        return typing.cast(typing.List["IPublicInterface"], jsii.sinvoke(cls, "makeInterfaces", []))


class ConsumePureInterface(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ConsumePureInterface",
):
    def __init__(self, delegate: "IStructReturningDelegate") -> None:
        '''
        :param delegate: -
        '''
        jsii.create(ConsumePureInterface, self, [delegate])

    @jsii.member(jsii_name="workItBaby")
    def work_it_baby(self) -> "StructB":
        return typing.cast("StructB", jsii.invoke(self, "workItBaby", []))


class ConsumerCanRingBell(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ConsumerCanRingBell",
):
    '''Test calling back to consumers that implement interfaces.

    Check that if a JSII consumer implements IConsumerWithInterfaceParam, they can call
    the method on the argument that they're passed...
    '''

    def __init__(self) -> None:
        jsii.create(ConsumerCanRingBell, self, [])

    @jsii.member(jsii_name="staticImplementedByObjectLiteral") # type: ignore[misc]
    @builtins.classmethod
    def static_implemented_by_object_literal(
        cls,
        ringer: "IBellRinger",
    ) -> builtins.bool:
        '''...if the interface is implemented using an object literal.

        Returns whether the bell was rung.

        :param ringer: -
        '''
        return typing.cast(builtins.bool, jsii.sinvoke(cls, "staticImplementedByObjectLiteral", [ringer]))

    @jsii.member(jsii_name="staticImplementedByPrivateClass") # type: ignore[misc]
    @builtins.classmethod
    def static_implemented_by_private_class(
        cls,
        ringer: "IBellRinger",
    ) -> builtins.bool:
        '''...if the interface is implemented using a private class.

        Return whether the bell was rung.

        :param ringer: -
        '''
        return typing.cast(builtins.bool, jsii.sinvoke(cls, "staticImplementedByPrivateClass", [ringer]))

    @jsii.member(jsii_name="staticImplementedByPublicClass") # type: ignore[misc]
    @builtins.classmethod
    def static_implemented_by_public_class(cls, ringer: "IBellRinger") -> builtins.bool:
        '''...if the interface is implemented using a public class.

        Return whether the bell was rung.

        :param ringer: -
        '''
        return typing.cast(builtins.bool, jsii.sinvoke(cls, "staticImplementedByPublicClass", [ringer]))

    @jsii.member(jsii_name="staticWhenTypedAsClass") # type: ignore[misc]
    @builtins.classmethod
    def static_when_typed_as_class(cls, ringer: "IConcreteBellRinger") -> builtins.bool:
        '''If the parameter is a concrete class instead of an interface.

        Return whether the bell was rung.

        :param ringer: -
        '''
        return typing.cast(builtins.bool, jsii.sinvoke(cls, "staticWhenTypedAsClass", [ringer]))

    @jsii.member(jsii_name="implementedByObjectLiteral")
    def implemented_by_object_literal(self, ringer: "IBellRinger") -> builtins.bool:
        '''...if the interface is implemented using an object literal.

        Returns whether the bell was rung.

        :param ringer: -
        '''
        return typing.cast(builtins.bool, jsii.invoke(self, "implementedByObjectLiteral", [ringer]))

    @jsii.member(jsii_name="implementedByPrivateClass")
    def implemented_by_private_class(self, ringer: "IBellRinger") -> builtins.bool:
        '''...if the interface is implemented using a private class.

        Return whether the bell was rung.

        :param ringer: -
        '''
        return typing.cast(builtins.bool, jsii.invoke(self, "implementedByPrivateClass", [ringer]))

    @jsii.member(jsii_name="implementedByPublicClass")
    def implemented_by_public_class(self, ringer: "IBellRinger") -> builtins.bool:
        '''...if the interface is implemented using a public class.

        Return whether the bell was rung.

        :param ringer: -
        '''
        return typing.cast(builtins.bool, jsii.invoke(self, "implementedByPublicClass", [ringer]))

    @jsii.member(jsii_name="whenTypedAsClass")
    def when_typed_as_class(self, ringer: "IConcreteBellRinger") -> builtins.bool:
        '''If the parameter is a concrete class instead of an interface.

        Return whether the bell was rung.

        :param ringer: -
        '''
        return typing.cast(builtins.bool, jsii.invoke(self, "whenTypedAsClass", [ringer]))


class ConsumersOfThisCrazyTypeSystem(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ConsumersOfThisCrazyTypeSystem",
):
    def __init__(self) -> None:
        jsii.create(ConsumersOfThisCrazyTypeSystem, self, [])

    @jsii.member(jsii_name="consumeAnotherPublicInterface")
    def consume_another_public_interface(
        self,
        obj: "IAnotherPublicInterface",
    ) -> builtins.str:
        '''
        :param obj: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "consumeAnotherPublicInterface", [obj]))

    @jsii.member(jsii_name="consumeNonInternalInterface")
    def consume_non_internal_interface(
        self,
        obj: "INonInternalInterface",
    ) -> typing.Any:
        '''
        :param obj: -
        '''
        return typing.cast(typing.Any, jsii.invoke(self, "consumeNonInternalInterface", [obj]))


class DataRenderer(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DataRenderer"):
    '''Verifies proper type handling through dynamic overrides.'''

    def __init__(self) -> None:
        jsii.create(DataRenderer, self, [])

    @jsii.member(jsii_name="render")
    def render(
        self,
        *,
        anumber: jsii.Number,
        astring: builtins.str,
        first_optional: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> builtins.str:
        '''
        :param anumber: (deprecated) An awesome number value.
        :param astring: (deprecated) A string value.
        :param first_optional: 
        '''
        data = scope.jsii_calc_lib.MyFirstStruct(
            anumber=anumber, astring=astring, first_optional=first_optional
        )

        return typing.cast(builtins.str, jsii.invoke(self, "render", [data]))

    @jsii.member(jsii_name="renderArbitrary")
    def render_arbitrary(
        self,
        data: typing.Mapping[builtins.str, typing.Any],
    ) -> builtins.str:
        '''
        :param data: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "renderArbitrary", [data]))

    @jsii.member(jsii_name="renderMap")
    def render_map(self, map: typing.Mapping[builtins.str, typing.Any]) -> builtins.str:
        '''
        :param map: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "renderMap", [map]))


class Default(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Default"):
    '''A class named "Default".

    :see: https://github.com/aws/jsii/issues/2637
    '''

    def __init__(self) -> None:
        jsii.create(Default, self, [])

    @jsii.member(jsii_name="pleaseCompile")
    def please_compile(self) -> None:
        return typing.cast(None, jsii.invoke(self, "pleaseCompile", []))


class DefaultedConstructorArgument(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.DefaultedConstructorArgument",
):
    def __init__(
        self,
        arg1: typing.Optional[jsii.Number] = None,
        arg2: typing.Optional[builtins.str] = None,
        arg3: typing.Optional[datetime.datetime] = None,
    ) -> None:
        '''
        :param arg1: -
        :param arg2: -
        :param arg3: -
        '''
        jsii.create(DefaultedConstructorArgument, self, [arg1, arg2, arg3])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="arg1")
    def arg1(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "arg1"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="arg3")
    def arg3(self) -> datetime.datetime:
        return typing.cast(datetime.datetime, jsii.get(self, "arg3"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="arg2")
    def arg2(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "arg2"))


class Demonstrate982(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Demonstrate982"):
    '''1.

    call #takeThis() -> An ObjectRef will be provisioned for the value (it'll be re-used!)
    2. call #takeThisToo() -> The ObjectRef from before will need to be down-cased to the ParentStruct982 type
    '''

    def __init__(self) -> None:
        jsii.create(Demonstrate982, self, [])

    @jsii.member(jsii_name="takeThis") # type: ignore[misc]
    @builtins.classmethod
    def take_this(cls) -> "ChildStruct982":
        '''It's dangerous to go alone!'''
        return typing.cast("ChildStruct982", jsii.sinvoke(cls, "takeThis", []))

    @jsii.member(jsii_name="takeThisToo") # type: ignore[misc]
    @builtins.classmethod
    def take_this_too(cls) -> "ParentStruct982":
        '''It's dangerous to go alone!'''
        return typing.cast("ParentStruct982", jsii.sinvoke(cls, "takeThisToo", []))


class DeprecatedClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DeprecatedClass"):
    '''
    :deprecated: a pretty boring class

    :stability: deprecated
    '''

    def __init__(
        self,
        readonly_string: builtins.str,
        mutable_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param readonly_string: -
        :param mutable_number: -

        :deprecated: this constructor is "just" okay

        :stability: deprecated
        '''
        jsii.create(DeprecatedClass, self, [readonly_string, mutable_number])

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        '''
        :deprecated: it was a bad idea

        :stability: deprecated
        '''
        return typing.cast(None, jsii.invoke(self, "method", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="readonlyProperty")
    def readonly_property(self) -> builtins.str:
        '''
        :deprecated: this is not always "wazoo", be ready to be disappointed

        :stability: deprecated
        '''
        return typing.cast(builtins.str, jsii.get(self, "readonlyProperty"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        '''
        :deprecated: shouldn't have been mutable

        :stability: deprecated
        '''
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "mutableProperty"))

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)


@jsii.enum(jsii_type="jsii-calc.DeprecatedEnum")
class DeprecatedEnum(enum.Enum):
    '''
    :deprecated: your deprecated selection of bad options

    :stability: deprecated
    '''

    OPTION_A = "OPTION_A"
    '''
    :deprecated: option A is not great

    :stability: deprecated
    '''
    OPTION_B = "OPTION_B"
    '''
    :deprecated: option B is kinda bad, too

    :stability: deprecated
    '''


@jsii.data_type(
    jsii_type="jsii-calc.DeprecatedStruct",
    jsii_struct_bases=[],
    name_mapping={"readonly_property": "readonlyProperty"},
)
class DeprecatedStruct:
    def __init__(self, *, readonly_property: builtins.str) -> None:
        '''
        :param readonly_property: 

        :deprecated: it just wraps a string

        :stability: deprecated
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "readonly_property": readonly_property,
        }

    @builtins.property
    def readonly_property(self) -> builtins.str:
        '''
        :deprecated: well, yeah

        :stability: deprecated
        '''
        result = self._values.get("readonly_property")
        assert result is not None, "Required property 'readonly_property' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DeprecatedStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.DerivedStruct",
    jsii_struct_bases=[scope.jsii_calc_lib.MyFirstStruct],
    name_mapping={
        "anumber": "anumber",
        "astring": "astring",
        "first_optional": "firstOptional",
        "another_required": "anotherRequired",
        "bool": "bool",
        "non_primitive": "nonPrimitive",
        "another_optional": "anotherOptional",
        "optional_any": "optionalAny",
        "optional_array": "optionalArray",
    },
)
class DerivedStruct(scope.jsii_calc_lib.MyFirstStruct):
    def __init__(
        self,
        *,
        anumber: jsii.Number,
        astring: builtins.str,
        first_optional: typing.Optional[typing.Sequence[builtins.str]] = None,
        another_required: datetime.datetime,
        bool: builtins.bool,
        non_primitive: "DoubleTrouble",
        another_optional: typing.Optional[typing.Mapping[builtins.str, scope.jsii_calc_lib.NumericValue]] = None,
        optional_any: typing.Any = None,
        optional_array: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''A struct which derives from another struct.

        :param anumber: (deprecated) An awesome number value.
        :param astring: (deprecated) A string value.
        :param first_optional: 
        :param another_required: 
        :param bool: 
        :param non_primitive: An example of a non primitive property.
        :param another_optional: This is optional.
        :param optional_any: 
        :param optional_array: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "anumber": anumber,
            "astring": astring,
            "another_required": another_required,
            "bool": bool,
            "non_primitive": non_primitive,
        }
        if first_optional is not None:
            self._values["first_optional"] = first_optional
        if another_optional is not None:
            self._values["another_optional"] = another_optional
        if optional_any is not None:
            self._values["optional_any"] = optional_any
        if optional_array is not None:
            self._values["optional_array"] = optional_array

    @builtins.property
    def anumber(self) -> jsii.Number:
        '''(deprecated) An awesome number value.

        :stability: deprecated
        '''
        result = self._values.get("anumber")
        assert result is not None, "Required property 'anumber' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def astring(self) -> builtins.str:
        '''(deprecated) A string value.

        :stability: deprecated
        '''
        result = self._values.get("astring")
        assert result is not None, "Required property 'astring' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def first_optional(self) -> typing.Optional[typing.List[builtins.str]]:
        '''
        :stability: deprecated
        '''
        result = self._values.get("first_optional")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def another_required(self) -> datetime.datetime:
        result = self._values.get("another_required")
        assert result is not None, "Required property 'another_required' is missing"
        return typing.cast(datetime.datetime, result)

    @builtins.property
    def bool(self) -> builtins.bool:
        result = self._values.get("bool")
        assert result is not None, "Required property 'bool' is missing"
        return typing.cast(builtins.bool, result)

    @builtins.property
    def non_primitive(self) -> "DoubleTrouble":
        '''An example of a non primitive property.'''
        result = self._values.get("non_primitive")
        assert result is not None, "Required property 'non_primitive' is missing"
        return typing.cast("DoubleTrouble", result)

    @builtins.property
    def another_optional(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, scope.jsii_calc_lib.NumericValue]]:
        '''This is optional.'''
        result = self._values.get("another_optional")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, scope.jsii_calc_lib.NumericValue]], result)

    @builtins.property
    def optional_any(self) -> typing.Any:
        result = self._values.get("optional_any")
        return typing.cast(typing.Any, result)

    @builtins.property
    def optional_array(self) -> typing.Optional[typing.List[builtins.str]]:
        result = self._values.get("optional_array")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DerivedStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.DiamondBottom",
    jsii_struct_bases=[
        scope.jsii_calc_lib.DiamondLeft, scope.jsii_calc_lib.DiamondRight
    ],
    name_mapping={
        "hoisted_top": "hoistedTop",
        "left": "left",
        "right": "right",
        "bottom": "bottom",
    },
)
class DiamondBottom(scope.jsii_calc_lib.DiamondLeft, scope.jsii_calc_lib.DiamondRight):
    def __init__(
        self,
        *,
        hoisted_top: typing.Optional[builtins.str] = None,
        left: typing.Optional[jsii.Number] = None,
        right: typing.Optional[builtins.bool] = None,
        bottom: typing.Optional[datetime.datetime] = None,
    ) -> None:
        '''
        :param hoisted_top: 
        :param left: 
        :param right: 
        :param bottom: 
        '''
        self._values: typing.Dict[str, typing.Any] = {}
        if hoisted_top is not None:
            self._values["hoisted_top"] = hoisted_top
        if left is not None:
            self._values["left"] = left
        if right is not None:
            self._values["right"] = right
        if bottom is not None:
            self._values["bottom"] = bottom

    @builtins.property
    def hoisted_top(self) -> typing.Optional[builtins.str]:
        '''
        :stability: deprecated
        '''
        result = self._values.get("hoisted_top")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def left(self) -> typing.Optional[jsii.Number]:
        '''
        :stability: deprecated
        '''
        result = self._values.get("left")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def right(self) -> typing.Optional[builtins.bool]:
        '''
        :stability: deprecated
        '''
        result = self._values.get("right")
        return typing.cast(typing.Optional[builtins.bool], result)

    @builtins.property
    def bottom(self) -> typing.Optional[datetime.datetime]:
        result = self._values.get("bottom")
        return typing.cast(typing.Optional[datetime.datetime], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DiamondBottom(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.DiamondInheritanceBaseLevelStruct",
    jsii_struct_bases=[],
    name_mapping={"base_level_property": "baseLevelProperty"},
)
class DiamondInheritanceBaseLevelStruct:
    def __init__(self, *, base_level_property: builtins.str) -> None:
        '''
        :param base_level_property: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "base_level_property": base_level_property,
        }

    @builtins.property
    def base_level_property(self) -> builtins.str:
        result = self._values.get("base_level_property")
        assert result is not None, "Required property 'base_level_property' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DiamondInheritanceBaseLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.DiamondInheritanceFirstMidLevelStruct",
    jsii_struct_bases=[DiamondInheritanceBaseLevelStruct],
    name_mapping={
        "base_level_property": "baseLevelProperty",
        "first_mid_level_property": "firstMidLevelProperty",
    },
)
class DiamondInheritanceFirstMidLevelStruct(DiamondInheritanceBaseLevelStruct):
    def __init__(
        self,
        *,
        base_level_property: builtins.str,
        first_mid_level_property: builtins.str,
    ) -> None:
        '''
        :param base_level_property: 
        :param first_mid_level_property: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "base_level_property": base_level_property,
            "first_mid_level_property": first_mid_level_property,
        }

    @builtins.property
    def base_level_property(self) -> builtins.str:
        result = self._values.get("base_level_property")
        assert result is not None, "Required property 'base_level_property' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def first_mid_level_property(self) -> builtins.str:
        result = self._values.get("first_mid_level_property")
        assert result is not None, "Required property 'first_mid_level_property' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DiamondInheritanceFirstMidLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.DiamondInheritanceSecondMidLevelStruct",
    jsii_struct_bases=[DiamondInheritanceBaseLevelStruct],
    name_mapping={
        "base_level_property": "baseLevelProperty",
        "second_mid_level_property": "secondMidLevelProperty",
    },
)
class DiamondInheritanceSecondMidLevelStruct(DiamondInheritanceBaseLevelStruct):
    def __init__(
        self,
        *,
        base_level_property: builtins.str,
        second_mid_level_property: builtins.str,
    ) -> None:
        '''
        :param base_level_property: 
        :param second_mid_level_property: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "base_level_property": base_level_property,
            "second_mid_level_property": second_mid_level_property,
        }

    @builtins.property
    def base_level_property(self) -> builtins.str:
        result = self._values.get("base_level_property")
        assert result is not None, "Required property 'base_level_property' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def second_mid_level_property(self) -> builtins.str:
        result = self._values.get("second_mid_level_property")
        assert result is not None, "Required property 'second_mid_level_property' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DiamondInheritanceSecondMidLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.DiamondInheritanceTopLevelStruct",
    jsii_struct_bases=[
        DiamondInheritanceFirstMidLevelStruct, DiamondInheritanceSecondMidLevelStruct
    ],
    name_mapping={
        "base_level_property": "baseLevelProperty",
        "first_mid_level_property": "firstMidLevelProperty",
        "second_mid_level_property": "secondMidLevelProperty",
        "top_level_property": "topLevelProperty",
    },
)
class DiamondInheritanceTopLevelStruct(
    DiamondInheritanceFirstMidLevelStruct,
    DiamondInheritanceSecondMidLevelStruct,
):
    def __init__(
        self,
        *,
        base_level_property: builtins.str,
        first_mid_level_property: builtins.str,
        second_mid_level_property: builtins.str,
        top_level_property: builtins.str,
    ) -> None:
        '''
        :param base_level_property: 
        :param first_mid_level_property: 
        :param second_mid_level_property: 
        :param top_level_property: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "base_level_property": base_level_property,
            "first_mid_level_property": first_mid_level_property,
            "second_mid_level_property": second_mid_level_property,
            "top_level_property": top_level_property,
        }

    @builtins.property
    def base_level_property(self) -> builtins.str:
        result = self._values.get("base_level_property")
        assert result is not None, "Required property 'base_level_property' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def first_mid_level_property(self) -> builtins.str:
        result = self._values.get("first_mid_level_property")
        assert result is not None, "Required property 'first_mid_level_property' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def second_mid_level_property(self) -> builtins.str:
        result = self._values.get("second_mid_level_property")
        assert result is not None, "Required property 'second_mid_level_property' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def top_level_property(self) -> builtins.str:
        result = self._values.get("top_level_property")
        assert result is not None, "Required property 'top_level_property' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "DiamondInheritanceTopLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class DisappointingCollectionSource(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.DisappointingCollectionSource",
):
    '''Verifies that null/undefined can be returned for optional collections.

    This source of collections is disappointing - it'll always give you nothing :(
    '''

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="maybeList")
    def MAYBE_LIST(cls) -> typing.Optional[typing.List[builtins.str]]:
        '''Some List of strings, maybe?

        (Nah, just a billion dollars mistake!)
        '''
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.sget(cls, "maybeList"))

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="maybeMap")
    def MAYBE_MAP(cls) -> typing.Optional[typing.Mapping[builtins.str, jsii.Number]]:
        '''Some Map of strings to numbers, maybe?

        (Nah, just a billion dollars mistake!)
        '''
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, jsii.Number]], jsii.sget(cls, "maybeMap"))


class DoNotOverridePrivates(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.DoNotOverridePrivates",
):
    def __init__(self) -> None:
        jsii.create(DoNotOverridePrivates, self, [])

    @jsii.member(jsii_name="changePrivatePropertyValue")
    def change_private_property_value(self, new_value: builtins.str) -> None:
        '''
        :param new_value: -
        '''
        return typing.cast(None, jsii.invoke(self, "changePrivatePropertyValue", [new_value]))

    @jsii.member(jsii_name="privateMethodValue")
    def private_method_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "privateMethodValue", []))

    @jsii.member(jsii_name="privatePropertyValue")
    def private_property_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "privatePropertyValue", []))


class DoNotRecognizeAnyAsOptional(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.DoNotRecognizeAnyAsOptional",
):
    '''jsii#284: do not recognize "any" as an optional argument.'''

    def __init__(self) -> None:
        jsii.create(DoNotRecognizeAnyAsOptional, self, [])

    @jsii.member(jsii_name="method")
    def method(
        self,
        _required_any: typing.Any,
        _optional_any: typing.Any = None,
        _optional_string: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param _required_any: -
        :param _optional_any: -
        :param _optional_string: -
        '''
        return typing.cast(None, jsii.invoke(self, "method", [_required_any, _optional_any, _optional_string]))


class DocumentedClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DocumentedClass"):
    '''Here's the first line of the TSDoc comment.

    This is the meat of the TSDoc comment. It may contain
    multiple lines and multiple paragraphs.

    Multiple paragraphs are separated by an empty line.

    Example::

        # Example automatically generated. See https://github.com/aws/jsii/issues/826
        x = 12 + 44
        s1 = "string"
        s2 = """string
        with new newlines"""# see https://github.com/aws/jsii/issues/2569
        s3 = """string
                    with
                    new lines"""
    '''

    def __init__(self) -> None:
        jsii.create(DocumentedClass, self, [])

    @jsii.member(jsii_name="greet")
    def greet(self, *, name: typing.Optional[builtins.str] = None) -> jsii.Number:
        '''Greet the indicated person.

        This will print out a friendly greeting intended for the indicated person.

        :param name: The name of the greetee. Default: world

        :return:

        A number that everyone knows very well and represents the answer
        to the ultimate question
        '''
        greetee = Greetee(name=name)

        return typing.cast(jsii.Number, jsii.invoke(self, "greet", [greetee]))

    @jsii.member(jsii_name="hola")
    def hola(self) -> None:
        '''(experimental) Say ¬°Hola!

        :stability: experimental
        '''
        return typing.cast(None, jsii.invoke(self, "hola", []))


class DontComplainAboutVariadicAfterOptional(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.DontComplainAboutVariadicAfterOptional",
):
    def __init__(self) -> None:
        jsii.create(DontComplainAboutVariadicAfterOptional, self, [])

    @jsii.member(jsii_name="optionalAndVariadic")
    def optional_and_variadic(
        self,
        optional: typing.Optional[builtins.str] = None,
        *things: builtins.str,
    ) -> builtins.str:
        '''
        :param optional: -
        :param things: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "optionalAndVariadic", [optional, *things]))


class DynamicPropertyBearer(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.DynamicPropertyBearer",
):
    '''Ensures we can override a dynamic property that was inherited.'''

    def __init__(self, value_store: builtins.str) -> None:
        '''
        :param value_store: -
        '''
        jsii.create(DynamicPropertyBearer, self, [value_store])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="dynamicProperty")
    def dynamic_property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "dynamicProperty"))

    @dynamic_property.setter
    def dynamic_property(self, value: builtins.str) -> None:
        jsii.set(self, "dynamicProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="valueStore")
    def value_store(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "valueStore"))

    @value_store.setter
    def value_store(self, value: builtins.str) -> None:
        jsii.set(self, "valueStore", value)


class DynamicPropertyBearerChild(
    DynamicPropertyBearer,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.DynamicPropertyBearerChild",
):
    def __init__(self, original_value: builtins.str) -> None:
        '''
        :param original_value: -
        '''
        jsii.create(DynamicPropertyBearerChild, self, [original_value])

    @jsii.member(jsii_name="overrideValue")
    def override_value(self, new_value: builtins.str) -> builtins.str:
        '''Sets \`\`this.dynamicProperty\`\` to the new value, and returns the old value.

        :param new_value: the new value to be set.

        :return: the old value that was set.
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "overrideValue", [new_value]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="originalValue")
    def original_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "originalValue"))


class Entropy(metaclass=jsii.JSIIAbstractClass, jsii_type="jsii-calc.Entropy"):
    '''This class is used to validate that serialization and deserialization does not interpret ISO-8601-formatted timestampts to the native date/time object, as the jsii protocol has a $jsii$date wrapper for this purpose (node's JSON parsing does *NOT* detect dates automatically in this way, so host libraries should not either).'''

    def __init__(self, clock: "IWallClock") -> None:
        '''Creates a new instance of Entropy.

        :param clock: your implementation of \`\`WallClock\`\`.
        '''
        jsii.create(Entropy, self, [clock])

    @jsii.member(jsii_name="increase")
    def increase(self) -> builtins.str:
        '''Increases entropy by consuming time from the clock (yes, this is a long shot, please don't judge).

        :return: the time from the \`\`WallClock\`\`.
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "increase", []))

    @jsii.member(jsii_name="repeat") # type: ignore[misc]
    @abc.abstractmethod
    def repeat(self, word: builtins.str) -> builtins.str:
        '''Implement this method such that it returns \`\`word\`\`.

        :param word: the value to return.

        :return: \`\`word\`\`.
        '''
        ...


class _EntropyProxy(Entropy):
    @jsii.member(jsii_name="repeat")
    def repeat(self, word: builtins.str) -> builtins.str:
        '''Implement this method such that it returns \`\`word\`\`.

        :param word: the value to return.

        :return: \`\`word\`\`.
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "repeat", [word]))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, Entropy).__jsii_proxy_class__ = lambda : _EntropyProxy


class EnumDispenser(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.EnumDispenser"):
    @jsii.member(jsii_name="randomIntegerLikeEnum") # type: ignore[misc]
    @builtins.classmethod
    def random_integer_like_enum(cls) -> AllTypesEnum:
        return typing.cast(AllTypesEnum, jsii.sinvoke(cls, "randomIntegerLikeEnum", []))

    @jsii.member(jsii_name="randomStringLikeEnum") # type: ignore[misc]
    @builtins.classmethod
    def random_string_like_enum(cls) -> "StringEnum":
        return typing.cast("StringEnum", jsii.sinvoke(cls, "randomStringLikeEnum", []))


class EraseUndefinedHashValues(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.EraseUndefinedHashValues",
):
    def __init__(self) -> None:
        jsii.create(EraseUndefinedHashValues, self, [])

    @jsii.member(jsii_name="doesKeyExist") # type: ignore[misc]
    @builtins.classmethod
    def does_key_exist(
        cls,
        opts: "EraseUndefinedHashValuesOptions",
        key: builtins.str,
    ) -> builtins.bool:
        '''Returns \`\`true\`\` if \`\`key\`\` is defined in \`\`opts\`\`.

        Used to check that undefined/null hash values
        are being erased when sending values from native code to JS.

        :param opts: -
        :param key: -
        '''
        return typing.cast(builtins.bool, jsii.sinvoke(cls, "doesKeyExist", [opts, key]))

    @jsii.member(jsii_name="prop1IsNull") # type: ignore[misc]
    @builtins.classmethod
    def prop1_is_null(cls) -> typing.Mapping[builtins.str, typing.Any]:
        '''We expect "prop1" to be erased.'''
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.sinvoke(cls, "prop1IsNull", []))

    @jsii.member(jsii_name="prop2IsUndefined") # type: ignore[misc]
    @builtins.classmethod
    def prop2_is_undefined(cls) -> typing.Mapping[builtins.str, typing.Any]:
        '''We expect "prop2" to be erased.'''
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.sinvoke(cls, "prop2IsUndefined", []))


@jsii.data_type(
    jsii_type="jsii-calc.EraseUndefinedHashValuesOptions",
    jsii_struct_bases=[],
    name_mapping={"option1": "option1", "option2": "option2"},
)
class EraseUndefinedHashValuesOptions:
    def __init__(
        self,
        *,
        option1: typing.Optional[builtins.str] = None,
        option2: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param option1: 
        :param option2: 
        '''
        self._values: typing.Dict[str, typing.Any] = {}
        if option1 is not None:
            self._values["option1"] = option1
        if option2 is not None:
            self._values["option2"] = option2

    @builtins.property
    def option1(self) -> typing.Optional[builtins.str]:
        result = self._values.get("option1")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def option2(self) -> typing.Optional[builtins.str]:
        result = self._values.get("option2")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "EraseUndefinedHashValuesOptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ExperimentalClass(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ExperimentalClass",
):
    '''
    :stability: experimental
    '''

    def __init__(
        self,
        readonly_string: builtins.str,
        mutable_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param readonly_string: -
        :param mutable_number: -

        :stability: experimental
        '''
        jsii.create(ExperimentalClass, self, [readonly_string, mutable_number])

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        '''
        :stability: experimental
        '''
        return typing.cast(None, jsii.invoke(self, "method", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="readonlyProperty")
    def readonly_property(self) -> builtins.str:
        '''
        :stability: experimental
        '''
        return typing.cast(builtins.str, jsii.get(self, "readonlyProperty"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        '''
        :stability: experimental
        '''
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "mutableProperty"))

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)


@jsii.enum(jsii_type="jsii-calc.ExperimentalEnum")
class ExperimentalEnum(enum.Enum):
    '''
    :stability: experimental
    '''

    OPTION_A = "OPTION_A"
    '''
    :stability: experimental
    '''
    OPTION_B = "OPTION_B"
    '''
    :stability: experimental
    '''


@jsii.data_type(
    jsii_type="jsii-calc.ExperimentalStruct",
    jsii_struct_bases=[],
    name_mapping={"readonly_property": "readonlyProperty"},
)
class ExperimentalStruct:
    def __init__(self, *, readonly_property: builtins.str) -> None:
        '''
        :param readonly_property: 

        :stability: experimental
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "readonly_property": readonly_property,
        }

    @builtins.property
    def readonly_property(self) -> builtins.str:
        '''
        :stability: experimental
        '''
        result = self._values.get("readonly_property")
        assert result is not None, "Required property 'readonly_property' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ExperimentalStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ExportedBaseClass(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ExportedBaseClass",
):
    def __init__(self, success: builtins.bool) -> None:
        '''
        :param success: -
        '''
        jsii.create(ExportedBaseClass, self, [success])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="success")
    def success(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "success"))


@jsii.data_type(
    jsii_type="jsii-calc.ExtendsInternalInterface",
    jsii_struct_bases=[],
    name_mapping={"boom": "boom", "prop": "prop"},
)
class ExtendsInternalInterface:
    def __init__(self, *, boom: builtins.bool, prop: builtins.str) -> None:
        '''
        :param boom: 
        :param prop: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "boom": boom,
            "prop": prop,
        }

    @builtins.property
    def boom(self) -> builtins.bool:
        result = self._values.get("boom")
        assert result is not None, "Required property 'boom' is missing"
        return typing.cast(builtins.bool, result)

    @builtins.property
    def prop(self) -> builtins.str:
        result = self._values.get("prop")
        assert result is not None, "Required property 'prop' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ExtendsInternalInterface(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ExternalClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.ExternalClass"):
    '''
    :external: true
    '''

    def __init__(
        self,
        readonly_string: builtins.str,
        mutable_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param readonly_string: -
        :param mutable_number: -

        :external: true
        '''
        jsii.create(ExternalClass, self, [readonly_string, mutable_number])

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        '''
        :external: true
        '''
        return typing.cast(None, jsii.invoke(self, "method", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="readonlyProperty")
    def readonly_property(self) -> builtins.str:
        '''
        :external: true
        '''
        return typing.cast(builtins.str, jsii.get(self, "readonlyProperty"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        '''
        :external: true
        '''
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "mutableProperty"))

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)


@jsii.enum(jsii_type="jsii-calc.ExternalEnum")
class ExternalEnum(enum.Enum):
    '''
    :external: true
    '''

    OPTION_A = "OPTION_A"
    '''
    :external: true
    '''
    OPTION_B = "OPTION_B"
    '''
    :external: true
    '''


@jsii.data_type(
    jsii_type="jsii-calc.ExternalStruct",
    jsii_struct_bases=[],
    name_mapping={"readonly_property": "readonlyProperty"},
)
class ExternalStruct:
    def __init__(self, *, readonly_property: builtins.str) -> None:
        '''
        :param readonly_property: 

        :external: true
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "readonly_property": readonly_property,
        }

    @builtins.property
    def readonly_property(self) -> builtins.str:
        '''
        :external: true
        '''
        result = self._values.get("readonly_property")
        assert result is not None, "Required property 'readonly_property' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ExternalStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class GiveMeStructs(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.GiveMeStructs"):
    def __init__(self) -> None:
        jsii.create(GiveMeStructs, self, [])

    @jsii.member(jsii_name="derivedToFirst")
    def derived_to_first(
        self,
        *,
        another_required: datetime.datetime,
        bool: builtins.bool,
        non_primitive: "DoubleTrouble",
        another_optional: typing.Optional[typing.Mapping[builtins.str, scope.jsii_calc_lib.NumericValue]] = None,
        optional_any: typing.Any = None,
        optional_array: typing.Optional[typing.Sequence[builtins.str]] = None,
        anumber: jsii.Number,
        astring: builtins.str,
        first_optional: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> scope.jsii_calc_lib.MyFirstStruct:
        '''Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct.

        :param another_required: 
        :param bool: 
        :param non_primitive: An example of a non primitive property.
        :param another_optional: This is optional.
        :param optional_any: 
        :param optional_array: 
        :param anumber: (deprecated) An awesome number value.
        :param astring: (deprecated) A string value.
        :param first_optional: 
        '''
        derived = DerivedStruct(
            another_required=another_required,
            bool=bool,
            non_primitive=non_primitive,
            another_optional=another_optional,
            optional_any=optional_any,
            optional_array=optional_array,
            anumber=anumber,
            astring=astring,
            first_optional=first_optional,
        )

        return typing.cast(scope.jsii_calc_lib.MyFirstStruct, jsii.invoke(self, "derivedToFirst", [derived]))

    @jsii.member(jsii_name="readDerivedNonPrimitive")
    def read_derived_non_primitive(
        self,
        *,
        another_required: datetime.datetime,
        bool: builtins.bool,
        non_primitive: "DoubleTrouble",
        another_optional: typing.Optional[typing.Mapping[builtins.str, scope.jsii_calc_lib.NumericValue]] = None,
        optional_any: typing.Any = None,
        optional_array: typing.Optional[typing.Sequence[builtins.str]] = None,
        anumber: jsii.Number,
        astring: builtins.str,
        first_optional: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> "DoubleTrouble":
        '''Returns the boolean from a DerivedStruct struct.

        :param another_required: 
        :param bool: 
        :param non_primitive: An example of a non primitive property.
        :param another_optional: This is optional.
        :param optional_any: 
        :param optional_array: 
        :param anumber: (deprecated) An awesome number value.
        :param astring: (deprecated) A string value.
        :param first_optional: 
        '''
        derived = DerivedStruct(
            another_required=another_required,
            bool=bool,
            non_primitive=non_primitive,
            another_optional=another_optional,
            optional_any=optional_any,
            optional_array=optional_array,
            anumber=anumber,
            astring=astring,
            first_optional=first_optional,
        )

        return typing.cast("DoubleTrouble", jsii.invoke(self, "readDerivedNonPrimitive", [derived]))

    @jsii.member(jsii_name="readFirstNumber")
    def read_first_number(
        self,
        *,
        anumber: jsii.Number,
        astring: builtins.str,
        first_optional: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> jsii.Number:
        '''Returns the "anumber" from a MyFirstStruct struct;

        :param anumber: (deprecated) An awesome number value.
        :param astring: (deprecated) A string value.
        :param first_optional: 
        '''
        first = scope.jsii_calc_lib.MyFirstStruct(
            anumber=anumber, astring=astring, first_optional=first_optional
        )

        return typing.cast(jsii.Number, jsii.invoke(self, "readFirstNumber", [first]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="structLiteral")
    def struct_literal(self) -> scope.jsii_calc_lib.StructWithOnlyOptionals:
        return typing.cast(scope.jsii_calc_lib.StructWithOnlyOptionals, jsii.get(self, "structLiteral"))


@jsii.data_type(
    jsii_type="jsii-calc.Greetee",
    jsii_struct_bases=[],
    name_mapping={"name": "name"},
)
class Greetee:
    def __init__(self, *, name: typing.Optional[builtins.str] = None) -> None:
        '''These are some arguments you can pass to a method.

        :param name: The name of the greetee. Default: world
        '''
        self._values: typing.Dict[str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The name of the greetee.

        :default: world
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Greetee(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class GreetingAugmenter(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.GreetingAugmenter",
):
    def __init__(self) -> None:
        jsii.create(GreetingAugmenter, self, [])

    @jsii.member(jsii_name="betterGreeting")
    def better_greeting(self, friendly: scope.jsii_calc_lib.IFriendly) -> builtins.str:
        '''
        :param friendly: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "betterGreeting", [friendly]))


@jsii.interface(jsii_type="jsii-calc.IAnonymousImplementationProvider")
class IAnonymousImplementationProvider(typing_extensions.Protocol):
    '''We can return an anonymous interface implementation from an override without losing the interface declarations.'''

    @jsii.member(jsii_name="provideAsClass")
    def provide_as_class(self) -> "Implementation":
        ...

    @jsii.member(jsii_name="provideAsInterface")
    def provide_as_interface(self) -> "IAnonymouslyImplementMe":
        ...


class _IAnonymousImplementationProviderProxy:
    '''We can return an anonymous interface implementation from an override without losing the interface declarations.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IAnonymousImplementationProvider"

    @jsii.member(jsii_name="provideAsClass")
    def provide_as_class(self) -> "Implementation":
        return typing.cast("Implementation", jsii.invoke(self, "provideAsClass", []))

    @jsii.member(jsii_name="provideAsInterface")
    def provide_as_interface(self) -> "IAnonymouslyImplementMe":
        return typing.cast("IAnonymouslyImplementMe", jsii.invoke(self, "provideAsInterface", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IAnonymousImplementationProvider).__jsii_proxy_class__ = lambda : _IAnonymousImplementationProviderProxy


@jsii.interface(jsii_type="jsii-calc.IAnonymouslyImplementMe")
class IAnonymouslyImplementMe(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        ...

    @jsii.member(jsii_name="verb")
    def verb(self) -> builtins.str:
        ...


class _IAnonymouslyImplementMeProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IAnonymouslyImplementMe"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "value"))

    @jsii.member(jsii_name="verb")
    def verb(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "verb", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IAnonymouslyImplementMe).__jsii_proxy_class__ = lambda : _IAnonymouslyImplementMeProxy


@jsii.interface(jsii_type="jsii-calc.IAnotherPublicInterface")
class IAnotherPublicInterface(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="a")
    def a(self) -> builtins.str:
        ...

    @a.setter
    def a(self, value: builtins.str) -> None:
        ...


class _IAnotherPublicInterfaceProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IAnotherPublicInterface"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="a")
    def a(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "a"))

    @a.setter
    def a(self, value: builtins.str) -> None:
        jsii.set(self, "a", value)

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IAnotherPublicInterface).__jsii_proxy_class__ = lambda : _IAnotherPublicInterfaceProxy


@jsii.interface(jsii_type="jsii-calc.IBell")
class IBell(typing_extensions.Protocol):
    @jsii.member(jsii_name="ring")
    def ring(self) -> None:
        ...


class _IBellProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IBell"

    @jsii.member(jsii_name="ring")
    def ring(self) -> None:
        return typing.cast(None, jsii.invoke(self, "ring", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IBell).__jsii_proxy_class__ = lambda : _IBellProxy


@jsii.interface(jsii_type="jsii-calc.IBellRinger")
class IBellRinger(typing_extensions.Protocol):
    '''Takes the object parameter as an interface.'''

    @jsii.member(jsii_name="yourTurn")
    def your_turn(self, bell: IBell) -> None:
        '''
        :param bell: -
        '''
        ...


class _IBellRingerProxy:
    '''Takes the object parameter as an interface.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IBellRinger"

    @jsii.member(jsii_name="yourTurn")
    def your_turn(self, bell: IBell) -> None:
        '''
        :param bell: -
        '''
        return typing.cast(None, jsii.invoke(self, "yourTurn", [bell]))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IBellRinger).__jsii_proxy_class__ = lambda : _IBellRingerProxy


@jsii.interface(jsii_type="jsii-calc.IConcreteBellRinger")
class IConcreteBellRinger(typing_extensions.Protocol):
    '''Takes the object parameter as a calss.'''

    @jsii.member(jsii_name="yourTurn")
    def your_turn(self, bell: "Bell") -> None:
        '''
        :param bell: -
        '''
        ...


class _IConcreteBellRingerProxy:
    '''Takes the object parameter as a calss.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IConcreteBellRinger"

    @jsii.member(jsii_name="yourTurn")
    def your_turn(self, bell: "Bell") -> None:
        '''
        :param bell: -
        '''
        return typing.cast(None, jsii.invoke(self, "yourTurn", [bell]))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IConcreteBellRinger).__jsii_proxy_class__ = lambda : _IConcreteBellRingerProxy


@jsii.interface(jsii_type="jsii-calc.IDeprecatedInterface")
class IDeprecatedInterface(typing_extensions.Protocol):
    '''
    :deprecated: useless interface

    :stability: deprecated
    '''

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        '''
        :deprecated: could be better

        :stability: deprecated
        '''
        ...

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        ...

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        '''
        :deprecated: services no purpose

        :stability: deprecated
        '''
        ...


class _IDeprecatedInterfaceProxy:
    '''
    :deprecated: useless interface

    :stability: deprecated
    '''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IDeprecatedInterface"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        '''
        :deprecated: could be better

        :stability: deprecated
        '''
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "mutableProperty"))

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        '''
        :deprecated: services no purpose

        :stability: deprecated
        '''
        return typing.cast(None, jsii.invoke(self, "method", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IDeprecatedInterface).__jsii_proxy_class__ = lambda : _IDeprecatedInterfaceProxy


@jsii.interface(jsii_type="jsii-calc.IExperimentalInterface")
class IExperimentalInterface(typing_extensions.Protocol):
    '''
    :stability: experimental
    '''

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        '''
        :stability: experimental
        '''
        ...

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        ...

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        '''
        :stability: experimental
        '''
        ...


class _IExperimentalInterfaceProxy:
    '''
    :stability: experimental
    '''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IExperimentalInterface"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        '''
        :stability: experimental
        '''
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "mutableProperty"))

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        '''
        :stability: experimental
        '''
        return typing.cast(None, jsii.invoke(self, "method", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IExperimentalInterface).__jsii_proxy_class__ = lambda : _IExperimentalInterfaceProxy


@jsii.interface(jsii_type="jsii-calc.IExtendsPrivateInterface")
class IExtendsPrivateInterface(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="moreThings")
    def more_things(self) -> typing.List[builtins.str]:
        ...

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="private")
    def private(self) -> builtins.str:
        ...

    @private.setter
    def private(self, value: builtins.str) -> None:
        ...


class _IExtendsPrivateInterfaceProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IExtendsPrivateInterface"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="moreThings")
    def more_things(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "moreThings"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="private")
    def private(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "private"))

    @private.setter
    def private(self, value: builtins.str) -> None:
        jsii.set(self, "private", value)

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IExtendsPrivateInterface).__jsii_proxy_class__ = lambda : _IExtendsPrivateInterfaceProxy


@jsii.interface(jsii_type="jsii-calc.IExternalInterface")
class IExternalInterface(typing_extensions.Protocol):
    '''
    :external: true
    '''

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        '''
        :external: true
        '''
        ...

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        ...

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        '''
        :external: true
        '''
        ...


class _IExternalInterfaceProxy:
    '''
    :external: true
    '''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IExternalInterface"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        '''
        :external: true
        '''
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "mutableProperty"))

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        '''
        :external: true
        '''
        return typing.cast(None, jsii.invoke(self, "method", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IExternalInterface).__jsii_proxy_class__ = lambda : _IExternalInterfaceProxy


@jsii.interface(jsii_type="jsii-calc.IFriendlier")
class IFriendlier(scope.jsii_calc_lib.IFriendly, typing_extensions.Protocol):
    '''Even friendlier classes can implement this interface.'''

    @jsii.member(jsii_name="farewell")
    def farewell(self) -> builtins.str:
        '''Say farewell.'''
        ...

    @jsii.member(jsii_name="goodbye")
    def goodbye(self) -> builtins.str:
        '''Say goodbye.

        :return: A goodbye blessing.
        '''
        ...


class _IFriendlierProxy(
    jsii.proxy_for(scope.jsii_calc_lib.IFriendly) # type: ignore[misc]
):
    '''Even friendlier classes can implement this interface.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IFriendlier"

    @jsii.member(jsii_name="farewell")
    def farewell(self) -> builtins.str:
        '''Say farewell.'''
        return typing.cast(builtins.str, jsii.invoke(self, "farewell", []))

    @jsii.member(jsii_name="goodbye")
    def goodbye(self) -> builtins.str:
        '''Say goodbye.

        :return: A goodbye blessing.
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "goodbye", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IFriendlier).__jsii_proxy_class__ = lambda : _IFriendlierProxy


@jsii.interface(jsii_type="jsii-calc.IInterfaceImplementedByAbstractClass")
class IInterfaceImplementedByAbstractClass(typing_extensions.Protocol):
    '''awslabs/jsii#220 Abstract return type.'''

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="propFromInterface")
    def prop_from_interface(self) -> builtins.str:
        ...


class _IInterfaceImplementedByAbstractClassProxy:
    '''awslabs/jsii#220 Abstract return type.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IInterfaceImplementedByAbstractClass"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="propFromInterface")
    def prop_from_interface(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "propFromInterface"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IInterfaceImplementedByAbstractClass).__jsii_proxy_class__ = lambda : _IInterfaceImplementedByAbstractClassProxy


@jsii.interface(jsii_type="jsii-calc.IInterfaceWithInternal")
class IInterfaceWithInternal(typing_extensions.Protocol):
    @jsii.member(jsii_name="visible")
    def visible(self) -> None:
        ...


class _IInterfaceWithInternalProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IInterfaceWithInternal"

    @jsii.member(jsii_name="visible")
    def visible(self) -> None:
        return typing.cast(None, jsii.invoke(self, "visible", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IInterfaceWithInternal).__jsii_proxy_class__ = lambda : _IInterfaceWithInternalProxy


@jsii.interface(jsii_type="jsii-calc.IInterfaceWithMethods")
class IInterfaceWithMethods(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        ...

    @jsii.member(jsii_name="doThings")
    def do_things(self) -> None:
        ...


class _IInterfaceWithMethodsProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IInterfaceWithMethods"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @jsii.member(jsii_name="doThings")
    def do_things(self) -> None:
        return typing.cast(None, jsii.invoke(self, "doThings", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IInterfaceWithMethods).__jsii_proxy_class__ = lambda : _IInterfaceWithMethodsProxy


@jsii.interface(jsii_type="jsii-calc.IInterfaceWithOptionalMethodArguments")
class IInterfaceWithOptionalMethodArguments(typing_extensions.Protocol):
    '''awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.'''

    @jsii.member(jsii_name="hello")
    def hello(
        self,
        arg1: builtins.str,
        arg2: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param arg1: -
        :param arg2: -
        '''
        ...


class _IInterfaceWithOptionalMethodArgumentsProxy:
    '''awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IInterfaceWithOptionalMethodArguments"

    @jsii.member(jsii_name="hello")
    def hello(
        self,
        arg1: builtins.str,
        arg2: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param arg1: -
        :param arg2: -
        '''
        return typing.cast(None, jsii.invoke(self, "hello", [arg1, arg2]))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IInterfaceWithOptionalMethodArguments).__jsii_proxy_class__ = lambda : _IInterfaceWithOptionalMethodArgumentsProxy


@jsii.interface(jsii_type="jsii-calc.IInterfaceWithProperties")
class IInterfaceWithProperties(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="readOnlyString")
    def read_only_string(self) -> builtins.str:
        ...

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="readWriteString")
    def read_write_string(self) -> builtins.str:
        ...

    @read_write_string.setter
    def read_write_string(self, value: builtins.str) -> None:
        ...


class _IInterfaceWithPropertiesProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IInterfaceWithProperties"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="readOnlyString")
    def read_only_string(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "readOnlyString"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="readWriteString")
    def read_write_string(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "readWriteString"))

    @read_write_string.setter
    def read_write_string(self, value: builtins.str) -> None:
        jsii.set(self, "readWriteString", value)

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IInterfaceWithProperties).__jsii_proxy_class__ = lambda : _IInterfaceWithPropertiesProxy


@jsii.interface(jsii_type="jsii-calc.IInterfaceWithPropertiesExtension")
class IInterfaceWithPropertiesExtension(
    IInterfaceWithProperties,
    typing_extensions.Protocol,
):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="foo")
    def foo(self) -> jsii.Number:
        ...

    @foo.setter
    def foo(self, value: jsii.Number) -> None:
        ...


class _IInterfaceWithPropertiesExtensionProxy(
    jsii.proxy_for(IInterfaceWithProperties) # type: ignore[misc]
):
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IInterfaceWithPropertiesExtension"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="foo")
    def foo(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "foo"))

    @foo.setter
    def foo(self, value: jsii.Number) -> None:
        jsii.set(self, "foo", value)

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IInterfaceWithPropertiesExtension).__jsii_proxy_class__ = lambda : _IInterfaceWithPropertiesExtensionProxy


@jsii.interface(jsii_type="jsii-calc.IJSII417PublicBaseOfBase")
class IJSII417PublicBaseOfBase(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="hasRoot")
    def has_root(self) -> builtins.bool:
        ...

    @jsii.member(jsii_name="foo")
    def foo(self) -> None:
        ...


class _IJSII417PublicBaseOfBaseProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IJSII417PublicBaseOfBase"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="hasRoot")
    def has_root(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "hasRoot"))

    @jsii.member(jsii_name="foo")
    def foo(self) -> None:
        return typing.cast(None, jsii.invoke(self, "foo", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IJSII417PublicBaseOfBase).__jsii_proxy_class__ = lambda : _IJSII417PublicBaseOfBaseProxy


@jsii.interface(jsii_type="jsii-calc.IJsii487External")
class IJsii487External(typing_extensions.Protocol):
    pass


class _IJsii487ExternalProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IJsii487External"
    pass

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IJsii487External).__jsii_proxy_class__ = lambda : _IJsii487ExternalProxy


@jsii.interface(jsii_type="jsii-calc.IJsii487External2")
class IJsii487External2(typing_extensions.Protocol):
    pass


class _IJsii487External2Proxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IJsii487External2"
    pass

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IJsii487External2).__jsii_proxy_class__ = lambda : _IJsii487External2Proxy


@jsii.interface(jsii_type="jsii-calc.IJsii496")
class IJsii496(typing_extensions.Protocol):
    pass


class _IJsii496Proxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IJsii496"
    pass

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IJsii496).__jsii_proxy_class__ = lambda : _IJsii496Proxy


@jsii.interface(jsii_type="jsii-calc.IMutableObjectLiteral")
class IMutableObjectLiteral(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        ...

    @value.setter
    def value(self, value: builtins.str) -> None:
        ...


class _IMutableObjectLiteralProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IMutableObjectLiteral"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        jsii.set(self, "value", value)

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IMutableObjectLiteral).__jsii_proxy_class__ = lambda : _IMutableObjectLiteralProxy


@jsii.interface(jsii_type="jsii-calc.INonInternalInterface")
class INonInternalInterface(IAnotherPublicInterface, typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="b")
    def b(self) -> builtins.str:
        ...

    @b.setter
    def b(self, value: builtins.str) -> None:
        ...

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="c")
    def c(self) -> builtins.str:
        ...

    @c.setter
    def c(self, value: builtins.str) -> None:
        ...


class _INonInternalInterfaceProxy(
    jsii.proxy_for(IAnotherPublicInterface) # type: ignore[misc]
):
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.INonInternalInterface"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="b")
    def b(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "b"))

    @b.setter
    def b(self, value: builtins.str) -> None:
        jsii.set(self, "b", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="c")
    def c(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "c"))

    @c.setter
    def c(self, value: builtins.str) -> None:
        jsii.set(self, "c", value)

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, INonInternalInterface).__jsii_proxy_class__ = lambda : _INonInternalInterfaceProxy


@jsii.interface(jsii_type="jsii-calc.IObjectWithProperty")
class IObjectWithProperty(typing_extensions.Protocol):
    '''Make sure that setters are properly called on objects with interfaces.'''

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="property")
    def property(self) -> builtins.str:
        ...

    @property.setter
    def property(self, value: builtins.str) -> None:
        ...

    @jsii.member(jsii_name="wasSet")
    def was_set(self) -> builtins.bool:
        ...


class _IObjectWithPropertyProxy:
    '''Make sure that setters are properly called on objects with interfaces.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IObjectWithProperty"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="property")
    def property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "property"))

    @property.setter
    def property(self, value: builtins.str) -> None:
        jsii.set(self, "property", value)

    @jsii.member(jsii_name="wasSet")
    def was_set(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.invoke(self, "wasSet", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IObjectWithProperty).__jsii_proxy_class__ = lambda : _IObjectWithPropertyProxy


@jsii.interface(jsii_type="jsii-calc.IOptionalMethod")
class IOptionalMethod(typing_extensions.Protocol):
    '''Checks that optional result from interface method code generates correctly.'''

    @jsii.member(jsii_name="optional")
    def optional(self) -> typing.Optional[builtins.str]:
        ...


class _IOptionalMethodProxy:
    '''Checks that optional result from interface method code generates correctly.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IOptionalMethod"

    @jsii.member(jsii_name="optional")
    def optional(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.invoke(self, "optional", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IOptionalMethod).__jsii_proxy_class__ = lambda : _IOptionalMethodProxy


@jsii.interface(jsii_type="jsii-calc.IPrivatelyImplemented")
class IPrivatelyImplemented(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="success")
    def success(self) -> builtins.bool:
        ...


class _IPrivatelyImplementedProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IPrivatelyImplemented"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="success")
    def success(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "success"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IPrivatelyImplemented).__jsii_proxy_class__ = lambda : _IPrivatelyImplementedProxy


@jsii.interface(jsii_type="jsii-calc.IPublicInterface")
class IPublicInterface(typing_extensions.Protocol):
    @jsii.member(jsii_name="bye")
    def bye(self) -> builtins.str:
        ...


class _IPublicInterfaceProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IPublicInterface"

    @jsii.member(jsii_name="bye")
    def bye(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "bye", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IPublicInterface).__jsii_proxy_class__ = lambda : _IPublicInterfaceProxy


@jsii.interface(jsii_type="jsii-calc.IPublicInterface2")
class IPublicInterface2(typing_extensions.Protocol):
    @jsii.member(jsii_name="ciao")
    def ciao(self) -> builtins.str:
        ...


class _IPublicInterface2Proxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IPublicInterface2"

    @jsii.member(jsii_name="ciao")
    def ciao(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "ciao", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IPublicInterface2).__jsii_proxy_class__ = lambda : _IPublicInterface2Proxy


@jsii.interface(jsii_type="jsii-calc.IRandomNumberGenerator")
class IRandomNumberGenerator(typing_extensions.Protocol):
    '''Generates random numbers.'''

    @jsii.member(jsii_name="next")
    def next(self) -> jsii.Number:
        '''Returns another random number.

        :return: A random number.
        '''
        ...


class _IRandomNumberGeneratorProxy:
    '''Generates random numbers.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IRandomNumberGenerator"

    @jsii.member(jsii_name="next")
    def next(self) -> jsii.Number:
        '''Returns another random number.

        :return: A random number.
        '''
        return typing.cast(jsii.Number, jsii.invoke(self, "next", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IRandomNumberGenerator).__jsii_proxy_class__ = lambda : _IRandomNumberGeneratorProxy


@jsii.interface(jsii_type="jsii-calc.IReturnJsii976")
class IReturnJsii976(typing_extensions.Protocol):
    '''Returns a subclass of a known class which implements an interface.'''

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="foo")
    def foo(self) -> jsii.Number:
        ...


class _IReturnJsii976Proxy:
    '''Returns a subclass of a known class which implements an interface.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IReturnJsii976"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="foo")
    def foo(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "foo"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IReturnJsii976).__jsii_proxy_class__ = lambda : _IReturnJsii976Proxy


@jsii.interface(jsii_type="jsii-calc.IReturnsNumber")
class IReturnsNumber(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="numberProp")
    def number_prop(self) -> scope.jsii_calc_lib.Number:
        ...

    @jsii.member(jsii_name="obtainNumber")
    def obtain_number(self) -> scope.jsii_calc_lib.IDoublable:
        ...


class _IReturnsNumberProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IReturnsNumber"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="numberProp")
    def number_prop(self) -> scope.jsii_calc_lib.Number:
        return typing.cast(scope.jsii_calc_lib.Number, jsii.get(self, "numberProp"))

    @jsii.member(jsii_name="obtainNumber")
    def obtain_number(self) -> scope.jsii_calc_lib.IDoublable:
        return typing.cast(scope.jsii_calc_lib.IDoublable, jsii.invoke(self, "obtainNumber", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IReturnsNumber).__jsii_proxy_class__ = lambda : _IReturnsNumberProxy


@jsii.interface(jsii_type="jsii-calc.IStableInterface")
class IStableInterface(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        ...

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        ...

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        ...


class _IStableInterfaceProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IStableInterface"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "mutableProperty"))

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "method", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IStableInterface).__jsii_proxy_class__ = lambda : _IStableInterfaceProxy


@jsii.interface(jsii_type="jsii-calc.IStructReturningDelegate")
class IStructReturningDelegate(typing_extensions.Protocol):
    '''Verifies that a "pure" implementation of an interface works correctly.'''

    @jsii.member(jsii_name="returnStruct")
    def return_struct(self) -> "StructB":
        ...


class _IStructReturningDelegateProxy:
    '''Verifies that a "pure" implementation of an interface works correctly.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IStructReturningDelegate"

    @jsii.member(jsii_name="returnStruct")
    def return_struct(self) -> "StructB":
        return typing.cast("StructB", jsii.invoke(self, "returnStruct", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IStructReturningDelegate).__jsii_proxy_class__ = lambda : _IStructReturningDelegateProxy


@jsii.interface(jsii_type="jsii-calc.IWallClock")
class IWallClock(typing_extensions.Protocol):
    '''Implement this interface.'''

    @jsii.member(jsii_name="iso8601Now")
    def iso8601_now(self) -> builtins.str:
        '''Returns the current time, formatted as an ISO-8601 string.'''
        ...


class _IWallClockProxy:
    '''Implement this interface.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IWallClock"

    @jsii.member(jsii_name="iso8601Now")
    def iso8601_now(self) -> builtins.str:
        '''Returns the current time, formatted as an ISO-8601 string.'''
        return typing.cast(builtins.str, jsii.invoke(self, "iso8601Now", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IWallClock).__jsii_proxy_class__ = lambda : _IWallClockProxy


class ImplementInternalInterface(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ImplementInternalInterface",
):
    def __init__(self) -> None:
        jsii.create(ImplementInternalInterface, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="prop")
    def prop(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "prop"))

    @prop.setter
    def prop(self, value: builtins.str) -> None:
        jsii.set(self, "prop", value)


class Implementation(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Implementation"):
    def __init__(self) -> None:
        jsii.create(Implementation, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "value"))


@jsii.implements(IInterfaceWithInternal)
class ImplementsInterfaceWithInternal(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ImplementsInterfaceWithInternal",
):
    def __init__(self) -> None:
        jsii.create(ImplementsInterfaceWithInternal, self, [])

    @jsii.member(jsii_name="visible")
    def visible(self) -> None:
        return typing.cast(None, jsii.invoke(self, "visible", []))


class ImplementsInterfaceWithInternalSubclass(
    ImplementsInterfaceWithInternal,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ImplementsInterfaceWithInternalSubclass",
):
    def __init__(self) -> None:
        jsii.create(ImplementsInterfaceWithInternalSubclass, self, [])


class ImplementsPrivateInterface(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ImplementsPrivateInterface",
):
    def __init__(self) -> None:
        jsii.create(ImplementsPrivateInterface, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="private")
    def private(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "private"))

    @private.setter
    def private(self, value: builtins.str) -> None:
        jsii.set(self, "private", value)


@jsii.data_type(
    jsii_type="jsii-calc.ImplictBaseOfBase",
    jsii_struct_bases=[scope.jsii_calc_base.BaseProps],
    name_mapping={"foo": "foo", "bar": "bar", "goo": "goo"},
)
class ImplictBaseOfBase(scope.jsii_calc_base.BaseProps):
    def __init__(
        self,
        *,
        foo: scope.jsii_calc_base_of_base.Very,
        bar: builtins.str,
        goo: datetime.datetime,
    ) -> None:
        '''
        :param foo: -
        :param bar: -
        :param goo: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "foo": foo,
            "bar": bar,
            "goo": goo,
        }

    @builtins.property
    def foo(self) -> scope.jsii_calc_base_of_base.Very:
        result = self._values.get("foo")
        assert result is not None, "Required property 'foo' is missing"
        return typing.cast(scope.jsii_calc_base_of_base.Very, result)

    @builtins.property
    def bar(self) -> builtins.str:
        result = self._values.get("bar")
        assert result is not None, "Required property 'bar' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def goo(self) -> datetime.datetime:
        result = self._values.get("goo")
        assert result is not None, "Required property 'goo' is missing"
        return typing.cast(datetime.datetime, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ImplictBaseOfBase(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class InterfaceCollections(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.InterfaceCollections",
):
    '''Verifies that collections of interfaces or structs are correctly handled.

    See: https://github.com/aws/jsii/issues/1196
    '''

    @jsii.member(jsii_name="listOfInterfaces") # type: ignore[misc]
    @builtins.classmethod
    def list_of_interfaces(cls) -> typing.List[IBell]:
        return typing.cast(typing.List[IBell], jsii.sinvoke(cls, "listOfInterfaces", []))

    @jsii.member(jsii_name="listOfStructs") # type: ignore[misc]
    @builtins.classmethod
    def list_of_structs(cls) -> typing.List["StructA"]:
        return typing.cast(typing.List["StructA"], jsii.sinvoke(cls, "listOfStructs", []))

    @jsii.member(jsii_name="mapOfInterfaces") # type: ignore[misc]
    @builtins.classmethod
    def map_of_interfaces(cls) -> typing.Mapping[builtins.str, IBell]:
        return typing.cast(typing.Mapping[builtins.str, IBell], jsii.sinvoke(cls, "mapOfInterfaces", []))

    @jsii.member(jsii_name="mapOfStructs") # type: ignore[misc]
    @builtins.classmethod
    def map_of_structs(cls) -> typing.Mapping[builtins.str, "StructA"]:
        return typing.cast(typing.Mapping[builtins.str, "StructA"], jsii.sinvoke(cls, "mapOfStructs", []))


class InterfacesMaker(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.InterfacesMaker"):
    '''We can return arrays of interfaces See aws/aws-cdk#2362.'''

    @jsii.member(jsii_name="makeInterfaces") # type: ignore[misc]
    @builtins.classmethod
    def make_interfaces(
        cls,
        count: jsii.Number,
    ) -> typing.List[scope.jsii_calc_lib.IDoublable]:
        '''
        :param count: -
        '''
        return typing.cast(typing.List[scope.jsii_calc_lib.IDoublable], jsii.sinvoke(cls, "makeInterfaces", [count]))


class Isomorphism(metaclass=jsii.JSIIAbstractClass, jsii_type="jsii-calc.Isomorphism"):
    '''Checks the "same instance" isomorphism is preserved within the constructor.

    Create a subclass of this, and assert that \`\`this.myself()\`\` actually returns
    \`\`this\`\` from within the constructor.
    '''

    def __init__(self) -> None:
        jsii.create(Isomorphism, self, [])

    @jsii.member(jsii_name="myself")
    def myself(self) -> "Isomorphism":
        return typing.cast("Isomorphism", jsii.invoke(self, "myself", []))


class _IsomorphismProxy(Isomorphism):
    pass

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, Isomorphism).__jsii_proxy_class__ = lambda : _IsomorphismProxy


class Issue2638(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Issue2638"):
    '''Docstrings with period.

    :see: https://github.com/aws/jsii/issues/2638
    '''

    def __init__(self) -> None:
        '''First sentence.

        Second sentence. Third sentence.
        '''
        jsii.create(Issue2638, self, [])


class Issue2638B(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Issue2638B"):
    def __init__(self) -> None:
        jsii.create(Issue2638B, self, [])


class JSII417PublicBaseOfBase(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.JSII417PublicBaseOfBase",
):
    def __init__(self) -> None:
        jsii.create(JSII417PublicBaseOfBase, self, [])

    @jsii.member(jsii_name="makeInstance") # type: ignore[misc]
    @builtins.classmethod
    def make_instance(cls) -> "JSII417PublicBaseOfBase":
        return typing.cast("JSII417PublicBaseOfBase", jsii.sinvoke(cls, "makeInstance", []))

    @jsii.member(jsii_name="foo")
    def foo(self) -> None:
        return typing.cast(None, jsii.invoke(self, "foo", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="hasRoot")
    def has_root(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "hasRoot"))


class JSObjectLiteralForInterface(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.JSObjectLiteralForInterface",
):
    def __init__(self) -> None:
        jsii.create(JSObjectLiteralForInterface, self, [])

    @jsii.member(jsii_name="giveMeFriendly")
    def give_me_friendly(self) -> scope.jsii_calc_lib.IFriendly:
        return typing.cast(scope.jsii_calc_lib.IFriendly, jsii.invoke(self, "giveMeFriendly", []))

    @jsii.member(jsii_name="giveMeFriendlyGenerator")
    def give_me_friendly_generator(self) -> "IFriendlyRandomGenerator":
        return typing.cast("IFriendlyRandomGenerator", jsii.invoke(self, "giveMeFriendlyGenerator", []))


class JSObjectLiteralToNative(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.JSObjectLiteralToNative",
):
    def __init__(self) -> None:
        jsii.create(JSObjectLiteralToNative, self, [])

    @jsii.member(jsii_name="returnLiteral")
    def return_literal(self) -> "JSObjectLiteralToNativeClass":
        return typing.cast("JSObjectLiteralToNativeClass", jsii.invoke(self, "returnLiteral", []))


class JSObjectLiteralToNativeClass(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.JSObjectLiteralToNativeClass",
):
    def __init__(self) -> None:
        jsii.create(JSObjectLiteralToNativeClass, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="propA")
    def prop_a(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "propA"))

    @prop_a.setter
    def prop_a(self, value: builtins.str) -> None:
        jsii.set(self, "propA", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="propB")
    def prop_b(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "propB"))

    @prop_b.setter
    def prop_b(self, value: jsii.Number) -> None:
        jsii.set(self, "propB", value)


class JavaReservedWords(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.JavaReservedWords",
):
    def __init__(self) -> None:
        jsii.create(JavaReservedWords, self, [])

    @jsii.member(jsii_name="abstract")
    def abstract(self) -> None:
        return typing.cast(None, jsii.invoke(self, "abstract", []))

    @jsii.member(jsii_name="assert")
    def assert_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "assert", []))

    @jsii.member(jsii_name="boolean")
    def boolean(self) -> None:
        return typing.cast(None, jsii.invoke(self, "boolean", []))

    @jsii.member(jsii_name="break")
    def break_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "break", []))

    @jsii.member(jsii_name="byte")
    def byte(self) -> None:
        return typing.cast(None, jsii.invoke(self, "byte", []))

    @jsii.member(jsii_name="case")
    def case(self) -> None:
        return typing.cast(None, jsii.invoke(self, "case", []))

    @jsii.member(jsii_name="catch")
    def catch(self) -> None:
        return typing.cast(None, jsii.invoke(self, "catch", []))

    @jsii.member(jsii_name="char")
    def char(self) -> None:
        return typing.cast(None, jsii.invoke(self, "char", []))

    @jsii.member(jsii_name="class")
    def class_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "class", []))

    @jsii.member(jsii_name="const")
    def const(self) -> None:
        return typing.cast(None, jsii.invoke(self, "const", []))

    @jsii.member(jsii_name="continue")
    def continue_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "continue", []))

    @jsii.member(jsii_name="default")
    def default(self) -> None:
        return typing.cast(None, jsii.invoke(self, "default", []))

    @jsii.member(jsii_name="do")
    def do(self) -> None:
        return typing.cast(None, jsii.invoke(self, "do", []))

    @jsii.member(jsii_name="double")
    def double(self) -> None:
        return typing.cast(None, jsii.invoke(self, "double", []))

    @jsii.member(jsii_name="else")
    def else_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "else", []))

    @jsii.member(jsii_name="enum")
    def enum(self) -> None:
        return typing.cast(None, jsii.invoke(self, "enum", []))

    @jsii.member(jsii_name="extends")
    def extends(self) -> None:
        return typing.cast(None, jsii.invoke(self, "extends", []))

    @jsii.member(jsii_name="false")
    def false(self) -> None:
        return typing.cast(None, jsii.invoke(self, "false", []))

    @jsii.member(jsii_name="final")
    def final(self) -> None:
        return typing.cast(None, jsii.invoke(self, "final", []))

    @jsii.member(jsii_name="finally")
    def finally_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "finally", []))

    @jsii.member(jsii_name="float")
    def float(self) -> None:
        return typing.cast(None, jsii.invoke(self, "float", []))

    @jsii.member(jsii_name="for")
    def for_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "for", []))

    @jsii.member(jsii_name="goto")
    def goto(self) -> None:
        return typing.cast(None, jsii.invoke(self, "goto", []))

    @jsii.member(jsii_name="if")
    def if_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "if", []))

    @jsii.member(jsii_name="implements")
    def implements(self) -> None:
        return typing.cast(None, jsii.invoke(self, "implements", []))

    @jsii.member(jsii_name="import")
    def import_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "import", []))

    @jsii.member(jsii_name="instanceof")
    def instanceof(self) -> None:
        return typing.cast(None, jsii.invoke(self, "instanceof", []))

    @jsii.member(jsii_name="int")
    def int(self) -> None:
        return typing.cast(None, jsii.invoke(self, "int", []))

    @jsii.member(jsii_name="interface")
    def interface(self) -> None:
        return typing.cast(None, jsii.invoke(self, "interface", []))

    @jsii.member(jsii_name="long")
    def long(self) -> None:
        return typing.cast(None, jsii.invoke(self, "long", []))

    @jsii.member(jsii_name="native")
    def native(self) -> None:
        return typing.cast(None, jsii.invoke(self, "native", []))

    @jsii.member(jsii_name="new")
    def new(self) -> None:
        return typing.cast(None, jsii.invoke(self, "new", []))

    @jsii.member(jsii_name="null")
    def null(self) -> None:
        return typing.cast(None, jsii.invoke(self, "null", []))

    @jsii.member(jsii_name="package")
    def package(self) -> None:
        return typing.cast(None, jsii.invoke(self, "package", []))

    @jsii.member(jsii_name="private")
    def private(self) -> None:
        return typing.cast(None, jsii.invoke(self, "private", []))

    @jsii.member(jsii_name="protected")
    def protected(self) -> None:
        return typing.cast(None, jsii.invoke(self, "protected", []))

    @jsii.member(jsii_name="public")
    def public(self) -> None:
        return typing.cast(None, jsii.invoke(self, "public", []))

    @jsii.member(jsii_name="return")
    def return_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "return", []))

    @jsii.member(jsii_name="short")
    def short(self) -> None:
        return typing.cast(None, jsii.invoke(self, "short", []))

    @jsii.member(jsii_name="static")
    def static(self) -> None:
        return typing.cast(None, jsii.invoke(self, "static", []))

    @jsii.member(jsii_name="strictfp")
    def strictfp(self) -> None:
        return typing.cast(None, jsii.invoke(self, "strictfp", []))

    @jsii.member(jsii_name="super")
    def super(self) -> None:
        return typing.cast(None, jsii.invoke(self, "super", []))

    @jsii.member(jsii_name="switch")
    def switch(self) -> None:
        return typing.cast(None, jsii.invoke(self, "switch", []))

    @jsii.member(jsii_name="synchronized")
    def synchronized(self) -> None:
        return typing.cast(None, jsii.invoke(self, "synchronized", []))

    @jsii.member(jsii_name="this")
    def this(self) -> None:
        return typing.cast(None, jsii.invoke(self, "this", []))

    @jsii.member(jsii_name="throw")
    def throw(self) -> None:
        return typing.cast(None, jsii.invoke(self, "throw", []))

    @jsii.member(jsii_name="throws")
    def throws(self) -> None:
        return typing.cast(None, jsii.invoke(self, "throws", []))

    @jsii.member(jsii_name="transient")
    def transient(self) -> None:
        return typing.cast(None, jsii.invoke(self, "transient", []))

    @jsii.member(jsii_name="true")
    def true(self) -> None:
        return typing.cast(None, jsii.invoke(self, "true", []))

    @jsii.member(jsii_name="try")
    def try_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "try", []))

    @jsii.member(jsii_name="void")
    def void(self) -> None:
        return typing.cast(None, jsii.invoke(self, "void", []))

    @jsii.member(jsii_name="volatile")
    def volatile(self) -> None:
        return typing.cast(None, jsii.invoke(self, "volatile", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="while")
    def while_(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "while"))

    @while_.setter
    def while_(self, value: builtins.str) -> None:
        jsii.set(self, "while", value)


@jsii.implements(IJsii487External2, IJsii487External)
class Jsii487Derived(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Jsii487Derived"):
    def __init__(self) -> None:
        jsii.create(Jsii487Derived, self, [])


@jsii.implements(IJsii496)
class Jsii496Derived(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Jsii496Derived"):
    def __init__(self) -> None:
        jsii.create(Jsii496Derived, self, [])


class JsiiAgent(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.JsiiAgent"):
    '''Host runtime version should be set via JSII_AGENT.'''

    def __init__(self) -> None:
        jsii.create(JsiiAgent, self, [])

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(cls) -> typing.Optional[builtins.str]:
        '''Returns the value of the JSII_AGENT environment variable.'''
        return typing.cast(typing.Optional[builtins.str], jsii.sget(cls, "value"))


class JsonFormatter(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.JsonFormatter"):
    '''Make sure structs are un-decorated on the way in.

    :see: https://github.com/aws/aws-cdk/issues/5066
    '''

    @jsii.member(jsii_name="anyArray") # type: ignore[misc]
    @builtins.classmethod
    def any_array(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyArray", []))

    @jsii.member(jsii_name="anyBooleanFalse") # type: ignore[misc]
    @builtins.classmethod
    def any_boolean_false(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyBooleanFalse", []))

    @jsii.member(jsii_name="anyBooleanTrue") # type: ignore[misc]
    @builtins.classmethod
    def any_boolean_true(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyBooleanTrue", []))

    @jsii.member(jsii_name="anyDate") # type: ignore[misc]
    @builtins.classmethod
    def any_date(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyDate", []))

    @jsii.member(jsii_name="anyEmptyString") # type: ignore[misc]
    @builtins.classmethod
    def any_empty_string(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyEmptyString", []))

    @jsii.member(jsii_name="anyFunction") # type: ignore[misc]
    @builtins.classmethod
    def any_function(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyFunction", []))

    @jsii.member(jsii_name="anyHash") # type: ignore[misc]
    @builtins.classmethod
    def any_hash(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyHash", []))

    @jsii.member(jsii_name="anyNull") # type: ignore[misc]
    @builtins.classmethod
    def any_null(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyNull", []))

    @jsii.member(jsii_name="anyNumber") # type: ignore[misc]
    @builtins.classmethod
    def any_number(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyNumber", []))

    @jsii.member(jsii_name="anyRef") # type: ignore[misc]
    @builtins.classmethod
    def any_ref(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyRef", []))

    @jsii.member(jsii_name="anyString") # type: ignore[misc]
    @builtins.classmethod
    def any_string(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyString", []))

    @jsii.member(jsii_name="anyUndefined") # type: ignore[misc]
    @builtins.classmethod
    def any_undefined(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyUndefined", []))

    @jsii.member(jsii_name="anyZero") # type: ignore[misc]
    @builtins.classmethod
    def any_zero(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "anyZero", []))

    @jsii.member(jsii_name="stringify") # type: ignore[misc]
    @builtins.classmethod
    def stringify(cls, value: typing.Any = None) -> typing.Optional[builtins.str]:
        '''
        :param value: -
        '''
        return typing.cast(typing.Optional[builtins.str], jsii.sinvoke(cls, "stringify", [value]))


class LevelOne(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.LevelOne"):
    '''Validates that nested classes get correct code generation for the occasional forward reference.'''

    def __init__(self, *, prop: "LevelOne.PropProperty") -> None:
        '''
        :param prop: 
        '''
        props = LevelOneProps(prop=prop)

        jsii.create(LevelOne, self, [props])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="props")
    def props(self) -> "LevelOneProps":
        return typing.cast("LevelOneProps", jsii.get(self, "props"))

    @jsii.data_type(
        jsii_type="jsii-calc.LevelOne.PropBooleanValue",
        jsii_struct_bases=[],
        name_mapping={"value": "value"},
    )
    class PropBooleanValue:
        def __init__(self, *, value: builtins.bool) -> None:
            '''
            :param value: 
            '''
            self._values: typing.Dict[str, typing.Any] = {
                "value": value,
            }

        @builtins.property
        def value(self) -> builtins.bool:
            result = self._values.get("value")
            assert result is not None, "Required property 'value' is missing"
            return typing.cast(builtins.bool, result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "PropBooleanValue(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )

    @jsii.data_type(
        jsii_type="jsii-calc.LevelOne.PropProperty",
        jsii_struct_bases=[],
        name_mapping={"prop": "prop"},
    )
    class PropProperty:
        def __init__(self, *, prop: "LevelOne.PropBooleanValue") -> None:
            '''
            :param prop: 
            '''
            if isinstance(prop, dict):
                prop = PropBooleanValue(**prop)
            self._values: typing.Dict[str, typing.Any] = {
                "prop": prop,
            }

        @builtins.property
        def prop(self) -> "LevelOne.PropBooleanValue":
            result = self._values.get("prop")
            assert result is not None, "Required property 'prop' is missing"
            return typing.cast("LevelOne.PropBooleanValue", result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "PropProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )


@jsii.data_type(
    jsii_type="jsii-calc.LevelOneProps",
    jsii_struct_bases=[],
    name_mapping={"prop": "prop"},
)
class LevelOneProps:
    def __init__(self, *, prop: LevelOne.PropProperty) -> None:
        '''
        :param prop: 
        '''
        if isinstance(prop, dict):
            prop = LevelOne.PropProperty(**prop)
        self._values: typing.Dict[str, typing.Any] = {
            "prop": prop,
        }

    @builtins.property
    def prop(self) -> LevelOne.PropProperty:
        result = self._values.get("prop")
        assert result is not None, "Required property 'prop' is missing"
        return typing.cast(LevelOne.PropProperty, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "LevelOneProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.LoadBalancedFargateServiceProps",
    jsii_struct_bases=[],
    name_mapping={
        "container_port": "containerPort",
        "cpu": "cpu",
        "memory_mib": "memoryMiB",
        "public_load_balancer": "publicLoadBalancer",
        "public_tasks": "publicTasks",
    },
)
class LoadBalancedFargateServiceProps:
    def __init__(
        self,
        *,
        container_port: typing.Optional[jsii.Number] = None,
        cpu: typing.Optional[builtins.str] = None,
        memory_mib: typing.Optional[builtins.str] = None,
        public_load_balancer: typing.Optional[builtins.bool] = None,
        public_tasks: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''jsii#298: show default values in sphinx documentation, and respect newlines.

        :param container_port: The container port of the application load balancer attached to your Fargate service. Corresponds to container port mapping. Default: 80
        :param cpu: The number of cpu units used by the task. Valid values, which determines your range of valid values for the memory parameter: 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments This default is set in the underlying FargateTaskDefinition construct. Default: 256
        :param memory_mib: The amount (in MiB) of memory used by the task. This field is required and you must use one of the following values, which determines your range of valid values for the cpu parameter: 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU) 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU) 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU) Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU) Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU) This default is set in the underlying FargateTaskDefinition construct. Default: 512
        :param public_load_balancer: Determines whether the Application Load Balancer will be internet-facing. Default: true
        :param public_tasks: Determines whether your Fargate Service will be assigned a public IP address. Default: false
        '''
        self._values: typing.Dict[str, typing.Any] = {}
        if container_port is not None:
            self._values["container_port"] = container_port
        if cpu is not None:
            self._values["cpu"] = cpu
        if memory_mib is not None:
            self._values["memory_mib"] = memory_mib
        if public_load_balancer is not None:
            self._values["public_load_balancer"] = public_load_balancer
        if public_tasks is not None:
            self._values["public_tasks"] = public_tasks

    @builtins.property
    def container_port(self) -> typing.Optional[jsii.Number]:
        '''The container port of the application load balancer attached to your Fargate service.

        Corresponds to container port mapping.

        :default: 80
        '''
        result = self._values.get("container_port")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def cpu(self) -> typing.Optional[builtins.str]:
        '''The number of cpu units used by the task.

        Valid values, which determines your range of valid values for the memory parameter:
        256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
        512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
        1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
        2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
        4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments

        This default is set in the underlying FargateTaskDefinition construct.

        :default: 256
        '''
        result = self._values.get("cpu")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def memory_mib(self) -> typing.Optional[builtins.str]:
        '''The amount (in MiB) of memory used by the task.

        This field is required and you must use one of the following values, which determines your range of valid values
        for the cpu parameter:

        0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)

        1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)

        2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)

        Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)

        Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)

        This default is set in the underlying FargateTaskDefinition construct.

        :default: 512
        '''
        result = self._values.get("memory_mib")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def public_load_balancer(self) -> typing.Optional[builtins.bool]:
        '''Determines whether the Application Load Balancer will be internet-facing.

        :default: true
        '''
        result = self._values.get("public_load_balancer")
        return typing.cast(typing.Optional[builtins.bool], result)

    @builtins.property
    def public_tasks(self) -> typing.Optional[builtins.bool]:
        '''Determines whether your Fargate Service will be assigned a public IP address.

        :default: false
        '''
        result = self._values.get("public_tasks")
        return typing.cast(typing.Optional[builtins.bool], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "LoadBalancedFargateServiceProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MethodNamedProperty(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.MethodNamedProperty",
):
    def __init__(self) -> None:
        jsii.create(MethodNamedProperty, self, [])

    @jsii.member(jsii_name="property")
    def property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "property", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="elite")
    def elite(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "elite"))


@jsii.implements(IFriendlier, IRandomNumberGenerator)
class Multiply(
    BinaryOperation,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.Multiply",
):
    '''The "*" binary operation.'''

    def __init__(
        self,
        lhs: scope.jsii_calc_lib.NumericValue,
        rhs: scope.jsii_calc_lib.NumericValue,
    ) -> None:
        '''Creates a BinaryOperation.

        :param lhs: Left-hand side operand.
        :param rhs: Right-hand side operand.
        '''
        jsii.create(Multiply, self, [lhs, rhs])

    @jsii.member(jsii_name="farewell")
    def farewell(self) -> builtins.str:
        '''Say farewell.'''
        return typing.cast(builtins.str, jsii.invoke(self, "farewell", []))

    @jsii.member(jsii_name="goodbye")
    def goodbye(self) -> builtins.str:
        '''Say goodbye.'''
        return typing.cast(builtins.str, jsii.invoke(self, "goodbye", []))

    @jsii.member(jsii_name="next")
    def next(self) -> jsii.Number:
        '''Returns another random number.'''
        return typing.cast(jsii.Number, jsii.invoke(self, "next", []))

    @jsii.member(jsii_name="toString")
    def to_string(self) -> builtins.str:
        '''(deprecated) String representation of the value.'''
        return typing.cast(builtins.str, jsii.invoke(self, "toString", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        '''(deprecated) The value.'''
        return typing.cast(jsii.Number, jsii.get(self, "value"))


class NestedClassInstance(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.NestedClassInstance",
):
    @jsii.member(jsii_name="makeInstance") # type: ignore[misc]
    @builtins.classmethod
    def make_instance(
        cls,
    ) -> scope.jsii_calc_lib.custom_submodule_name.NestingClass.NestedClass:
        return typing.cast(scope.jsii_calc_lib.custom_submodule_name.NestingClass.NestedClass, jsii.sinvoke(cls, "makeInstance", []))


@jsii.data_type(
    jsii_type="jsii-calc.NestedStruct",
    jsii_struct_bases=[],
    name_mapping={"number_prop": "numberProp"},
)
class NestedStruct:
    def __init__(self, *, number_prop: jsii.Number) -> None:
        '''
        :param number_prop: When provided, must be > 0.
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "number_prop": number_prop,
        }

    @builtins.property
    def number_prop(self) -> jsii.Number:
        '''When provided, must be > 0.'''
        result = self._values.get("number_prop")
        assert result is not None, "Required property 'number_prop' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "NestedStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class NodeStandardLibrary(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.NodeStandardLibrary",
):
    '''Test fixture to verify that jsii modules can use the node standard library.'''

    def __init__(self) -> None:
        jsii.create(NodeStandardLibrary, self, [])

    @jsii.member(jsii_name="cryptoSha256")
    def crypto_sha256(self) -> builtins.str:
        '''Uses node.js "crypto" module to calculate sha256 of a string.

        :return: "6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50"
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "cryptoSha256", []))

    @jsii.member(jsii_name="fsReadFile")
    def fs_read_file(self) -> builtins.str:
        '''Reads a local resource file (resource.txt) asynchronously.

        :return: "Hello, resource!"
        '''
        return typing.cast(builtins.str, jsii.ainvoke(self, "fsReadFile", []))

    @jsii.member(jsii_name="fsReadFileSync")
    def fs_read_file_sync(self) -> builtins.str:
        '''Sync version of fsReadFile.

        :return: "Hello, resource! SYNC!"
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "fsReadFileSync", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="osPlatform")
    def os_platform(self) -> builtins.str:
        '''Returns the current os.platform() from the "os" node module.'''
        return typing.cast(builtins.str, jsii.get(self, "osPlatform"))


class NullShouldBeTreatedAsUndefined(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.NullShouldBeTreatedAsUndefined",
):
    '''jsii#282, aws-cdk#157: null should be treated as "undefined".'''

    def __init__(self, _param1: builtins.str, optional: typing.Any = None) -> None:
        '''
        :param _param1: -
        :param optional: -
        '''
        jsii.create(NullShouldBeTreatedAsUndefined, self, [_param1, optional])

    @jsii.member(jsii_name="giveMeUndefined")
    def give_me_undefined(self, value: typing.Any = None) -> None:
        '''
        :param value: -
        '''
        return typing.cast(None, jsii.invoke(self, "giveMeUndefined", [value]))

    @jsii.member(jsii_name="giveMeUndefinedInsideAnObject")
    def give_me_undefined_inside_an_object(
        self,
        *,
        array_with_three_elements_and_undefined_as_second_argument: typing.Sequence[typing.Any],
        this_should_be_undefined: typing.Any = None,
    ) -> None:
        '''
        :param array_with_three_elements_and_undefined_as_second_argument: 
        :param this_should_be_undefined: 
        '''
        input = NullShouldBeTreatedAsUndefinedData(
            array_with_three_elements_and_undefined_as_second_argument=array_with_three_elements_and_undefined_as_second_argument,
            this_should_be_undefined=this_should_be_undefined,
        )

        return typing.cast(None, jsii.invoke(self, "giveMeUndefinedInsideAnObject", [input]))

    @jsii.member(jsii_name="verifyPropertyIsUndefined")
    def verify_property_is_undefined(self) -> None:
        return typing.cast(None, jsii.invoke(self, "verifyPropertyIsUndefined", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="changeMeToUndefined")
    def change_me_to_undefined(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "changeMeToUndefined"))

    @change_me_to_undefined.setter
    def change_me_to_undefined(self, value: typing.Optional[builtins.str]) -> None:
        jsii.set(self, "changeMeToUndefined", value)


@jsii.data_type(
    jsii_type="jsii-calc.NullShouldBeTreatedAsUndefinedData",
    jsii_struct_bases=[],
    name_mapping={
        "array_with_three_elements_and_undefined_as_second_argument": "arrayWithThreeElementsAndUndefinedAsSecondArgument",
        "this_should_be_undefined": "thisShouldBeUndefined",
    },
)
class NullShouldBeTreatedAsUndefinedData:
    def __init__(
        self,
        *,
        array_with_three_elements_and_undefined_as_second_argument: typing.Sequence[typing.Any],
        this_should_be_undefined: typing.Any = None,
    ) -> None:
        '''
        :param array_with_three_elements_and_undefined_as_second_argument: 
        :param this_should_be_undefined: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "array_with_three_elements_and_undefined_as_second_argument": array_with_three_elements_and_undefined_as_second_argument,
        }
        if this_should_be_undefined is not None:
            self._values["this_should_be_undefined"] = this_should_be_undefined

    @builtins.property
    def array_with_three_elements_and_undefined_as_second_argument(
        self,
    ) -> typing.List[typing.Any]:
        result = self._values.get("array_with_three_elements_and_undefined_as_second_argument")
        assert result is not None, "Required property 'array_with_three_elements_and_undefined_as_second_argument' is missing"
        return typing.cast(typing.List[typing.Any], result)

    @builtins.property
    def this_should_be_undefined(self) -> typing.Any:
        result = self._values.get("this_should_be_undefined")
        return typing.cast(typing.Any, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "NullShouldBeTreatedAsUndefinedData(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class NumberGenerator(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.NumberGenerator"):
    '''This allows us to test that a reference can be stored for objects that implement interfaces.'''

    def __init__(self, generator: IRandomNumberGenerator) -> None:
        '''
        :param generator: -
        '''
        jsii.create(NumberGenerator, self, [generator])

    @jsii.member(jsii_name="isSameGenerator")
    def is_same_generator(self, gen: IRandomNumberGenerator) -> builtins.bool:
        '''
        :param gen: -
        '''
        return typing.cast(builtins.bool, jsii.invoke(self, "isSameGenerator", [gen]))

    @jsii.member(jsii_name="nextTimes100")
    def next_times100(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.invoke(self, "nextTimes100", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="generator")
    def generator(self) -> IRandomNumberGenerator:
        return typing.cast(IRandomNumberGenerator, jsii.get(self, "generator"))

    @generator.setter
    def generator(self, value: IRandomNumberGenerator) -> None:
        jsii.set(self, "generator", value)


class ObjectRefsInCollections(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ObjectRefsInCollections",
):
    '''Verify that object references can be passed inside collections.'''

    def __init__(self) -> None:
        jsii.create(ObjectRefsInCollections, self, [])

    @jsii.member(jsii_name="sumFromArray")
    def sum_from_array(
        self,
        values: typing.Sequence[scope.jsii_calc_lib.NumericValue],
    ) -> jsii.Number:
        '''Returns the sum of all values.

        :param values: -
        '''
        return typing.cast(jsii.Number, jsii.invoke(self, "sumFromArray", [values]))

    @jsii.member(jsii_name="sumFromMap")
    def sum_from_map(
        self,
        values: typing.Mapping[builtins.str, scope.jsii_calc_lib.NumericValue],
    ) -> jsii.Number:
        '''Returns the sum of all values in a map.

        :param values: -
        '''
        return typing.cast(jsii.Number, jsii.invoke(self, "sumFromMap", [values]))


class ObjectWithPropertyProvider(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ObjectWithPropertyProvider",
):
    @jsii.member(jsii_name="provide") # type: ignore[misc]
    @builtins.classmethod
    def provide(cls) -> IObjectWithProperty:
        return typing.cast(IObjectWithProperty, jsii.sinvoke(cls, "provide", []))


class Old(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Old"):
    '''(deprecated) Old class.

    :deprecated:

    Use the new class or the old class whatever you want because
    whatever you like is always the best

    :stability: deprecated
    '''

    def __init__(self) -> None:
        jsii.create(Old, self, [])

    @jsii.member(jsii_name="doAThing")
    def do_a_thing(self) -> None:
        '''(deprecated) Doo wop that thing.

        :stability: deprecated
        '''
        return typing.cast(None, jsii.invoke(self, "doAThing", []))


class OptionalArgumentInvoker(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.OptionalArgumentInvoker",
):
    def __init__(self, delegate: IInterfaceWithOptionalMethodArguments) -> None:
        '''
        :param delegate: -
        '''
        jsii.create(OptionalArgumentInvoker, self, [delegate])

    @jsii.member(jsii_name="invokeWithOptional")
    def invoke_with_optional(self) -> None:
        return typing.cast(None, jsii.invoke(self, "invokeWithOptional", []))

    @jsii.member(jsii_name="invokeWithoutOptional")
    def invoke_without_optional(self) -> None:
        return typing.cast(None, jsii.invoke(self, "invokeWithoutOptional", []))


class OptionalConstructorArgument(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.OptionalConstructorArgument",
):
    def __init__(
        self,
        arg1: jsii.Number,
        arg2: builtins.str,
        arg3: typing.Optional[datetime.datetime] = None,
    ) -> None:
        '''
        :param arg1: -
        :param arg2: -
        :param arg3: -
        '''
        jsii.create(OptionalConstructorArgument, self, [arg1, arg2, arg3])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="arg1")
    def arg1(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "arg1"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="arg2")
    def arg2(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "arg2"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="arg3")
    def arg3(self) -> typing.Optional[datetime.datetime]:
        return typing.cast(typing.Optional[datetime.datetime], jsii.get(self, "arg3"))


@jsii.data_type(
    jsii_type="jsii-calc.OptionalStruct",
    jsii_struct_bases=[],
    name_mapping={"field": "field"},
)
class OptionalStruct:
    def __init__(self, *, field: typing.Optional[builtins.str] = None) -> None:
        '''
        :param field: 
        '''
        self._values: typing.Dict[str, typing.Any] = {}
        if field is not None:
            self._values["field"] = field

    @builtins.property
    def field(self) -> typing.Optional[builtins.str]:
        result = self._values.get("field")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OptionalStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OptionalStructConsumer(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.OptionalStructConsumer",
):
    def __init__(self, *, field: typing.Optional[builtins.str] = None) -> None:
        '''
        :param field: 
        '''
        optional_struct = OptionalStruct(field=field)

        jsii.create(OptionalStructConsumer, self, [optional_struct])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="parameterWasUndefined")
    def parameter_was_undefined(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "parameterWasUndefined"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="fieldValue")
    def field_value(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fieldValue"))


class OverridableProtectedMember(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.OverridableProtectedMember",
):
    '''
    :see: https://github.com/aws/jsii/issues/903
    '''

    def __init__(self) -> None:
        jsii.create(OverridableProtectedMember, self, [])

    @jsii.member(jsii_name="overrideMe")
    def _override_me(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "overrideMe", []))

    @jsii.member(jsii_name="switchModes")
    def switch_modes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "switchModes", []))

    @jsii.member(jsii_name="valueFromProtected")
    def value_from_protected(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "valueFromProtected", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="overrideReadOnly")
    def _override_read_only(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "overrideReadOnly"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="overrideReadWrite")
    def _override_read_write(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "overrideReadWrite"))

    @_override_read_write.setter
    def _override_read_write(self, value: builtins.str) -> None:
        jsii.set(self, "overrideReadWrite", value)


class OverrideReturnsObject(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.OverrideReturnsObject",
):
    def __init__(self) -> None:
        jsii.create(OverrideReturnsObject, self, [])

    @jsii.member(jsii_name="test")
    def test(self, obj: IReturnsNumber) -> jsii.Number:
        '''
        :param obj: -
        '''
        return typing.cast(jsii.Number, jsii.invoke(self, "test", [obj]))


@jsii.data_type(
    jsii_type="jsii-calc.ParentStruct982",
    jsii_struct_bases=[],
    name_mapping={"foo": "foo"},
)
class ParentStruct982:
    def __init__(self, *, foo: builtins.str) -> None:
        '''https://github.com/aws/jsii/issues/982.

        :param foo: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "foo": foo,
        }

    @builtins.property
    def foo(self) -> builtins.str:
        result = self._values.get("foo")
        assert result is not None, "Required property 'foo' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ParentStruct982(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class PartiallyInitializedThisConsumer(
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.PartiallyInitializedThisConsumer",
):
    def __init__(self) -> None:
        jsii.create(PartiallyInitializedThisConsumer, self, [])

    @jsii.member(jsii_name="consumePartiallyInitializedThis") # type: ignore[misc]
    @abc.abstractmethod
    def consume_partially_initialized_this(
        self,
        obj: ConstructorPassesThisOut,
        dt: datetime.datetime,
        ev: AllTypesEnum,
    ) -> builtins.str:
        '''
        :param obj: -
        :param dt: -
        :param ev: -
        '''
        ...


class _PartiallyInitializedThisConsumerProxy(PartiallyInitializedThisConsumer):
    @jsii.member(jsii_name="consumePartiallyInitializedThis")
    def consume_partially_initialized_this(
        self,
        obj: ConstructorPassesThisOut,
        dt: datetime.datetime,
        ev: AllTypesEnum,
    ) -> builtins.str:
        '''
        :param obj: -
        :param dt: -
        :param ev: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "consumePartiallyInitializedThis", [obj, dt, ev]))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, PartiallyInitializedThisConsumer).__jsii_proxy_class__ = lambda : _PartiallyInitializedThisConsumerProxy


class Polymorphism(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Polymorphism"):
    def __init__(self) -> None:
        jsii.create(Polymorphism, self, [])

    @jsii.member(jsii_name="sayHello")
    def say_hello(self, friendly: scope.jsii_calc_lib.IFriendly) -> builtins.str:
        '''
        :param friendly: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "sayHello", [friendly]))


class Power(
    _CompositeOperation_1c4d123b,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.Power",
):
    '''The power operation.'''

    def __init__(
        self,
        base: scope.jsii_calc_lib.NumericValue,
        pow: scope.jsii_calc_lib.NumericValue,
    ) -> None:
        '''Creates a Power operation.

        :param base: The base of the power.
        :param pow: The number of times to multiply.
        '''
        jsii.create(Power, self, [base, pow])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="base")
    def base(self) -> scope.jsii_calc_lib.NumericValue:
        '''The base of the power.'''
        return typing.cast(scope.jsii_calc_lib.NumericValue, jsii.get(self, "base"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="expression")
    def expression(self) -> scope.jsii_calc_lib.NumericValue:
        '''The expression that this operation consists of.

        Must be implemented by derived classes.
        '''
        return typing.cast(scope.jsii_calc_lib.NumericValue, jsii.get(self, "expression"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="pow")
    def pow(self) -> scope.jsii_calc_lib.NumericValue:
        '''The number of times to multiply.'''
        return typing.cast(scope.jsii_calc_lib.NumericValue, jsii.get(self, "pow"))


class PropertyNamedProperty(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.PropertyNamedProperty",
):
    '''Reproduction for https://github.com/aws/jsii/issues/1113 Where a method or property named "property" would result in impossible to load Python code.'''

    def __init__(self) -> None:
        jsii.create(PropertyNamedProperty, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="property")
    def property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "property"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="yetAnoterOne")
    def yet_anoter_one(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "yetAnoterOne"))


class PublicClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.PublicClass"):
    def __init__(self) -> None:
        jsii.create(PublicClass, self, [])

    @jsii.member(jsii_name="hello")
    def hello(self) -> None:
        return typing.cast(None, jsii.invoke(self, "hello", []))


class PythonReservedWords(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.PythonReservedWords",
):
    def __init__(self) -> None:
        jsii.create(PythonReservedWords, self, [])

    @jsii.member(jsii_name="and")
    def and_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "and", []))

    @jsii.member(jsii_name="as")
    def as_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "as", []))

    @jsii.member(jsii_name="assert")
    def assert_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "assert", []))

    @jsii.member(jsii_name="async")
    def async_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "async", []))

    @jsii.member(jsii_name="await")
    def await_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "await", []))

    @jsii.member(jsii_name="break")
    def break_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "break", []))

    @jsii.member(jsii_name="class")
    def class_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "class", []))

    @jsii.member(jsii_name="continue")
    def continue_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "continue", []))

    @jsii.member(jsii_name="def")
    def def_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "def", []))

    @jsii.member(jsii_name="del")
    def del_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "del", []))

    @jsii.member(jsii_name="elif")
    def elif_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "elif", []))

    @jsii.member(jsii_name="else")
    def else_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "else", []))

    @jsii.member(jsii_name="except")
    def except_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "except", []))

    @jsii.member(jsii_name="finally")
    def finally_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "finally", []))

    @jsii.member(jsii_name="for")
    def for_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "for", []))

    @jsii.member(jsii_name="from")
    def from_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "from", []))

    @jsii.member(jsii_name="global")
    def global_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "global", []))

    @jsii.member(jsii_name="if")
    def if_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "if", []))

    @jsii.member(jsii_name="import")
    def import_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "import", []))

    @jsii.member(jsii_name="in")
    def in_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "in", []))

    @jsii.member(jsii_name="is")
    def is_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "is", []))

    @jsii.member(jsii_name="lambda")
    def lambda_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "lambda", []))

    @jsii.member(jsii_name="nonlocal")
    def nonlocal_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "nonlocal", []))

    @jsii.member(jsii_name="not")
    def not_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "not", []))

    @jsii.member(jsii_name="or")
    def or_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "or", []))

    @jsii.member(jsii_name="pass")
    def pass_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "pass", []))

    @jsii.member(jsii_name="raise")
    def raise_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "raise", []))

    @jsii.member(jsii_name="return")
    def return_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "return", []))

    @jsii.member(jsii_name="try")
    def try_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "try", []))

    @jsii.member(jsii_name="while")
    def while_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "while", []))

    @jsii.member(jsii_name="with")
    def with_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "with", []))

    @jsii.member(jsii_name="yield")
    def yield_(self) -> None:
        return typing.cast(None, jsii.invoke(self, "yield", []))


class ReferenceEnumFromScopedPackage(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ReferenceEnumFromScopedPackage",
):
    '''See awslabs/jsii#138.'''

    def __init__(self) -> None:
        jsii.create(ReferenceEnumFromScopedPackage, self, [])

    @jsii.member(jsii_name="loadFoo")
    def load_foo(self) -> typing.Optional[scope.jsii_calc_lib.EnumFromScopedModule]:
        return typing.cast(typing.Optional[scope.jsii_calc_lib.EnumFromScopedModule], jsii.invoke(self, "loadFoo", []))

    @jsii.member(jsii_name="saveFoo")
    def save_foo(self, value: scope.jsii_calc_lib.EnumFromScopedModule) -> None:
        '''
        :param value: -
        '''
        return typing.cast(None, jsii.invoke(self, "saveFoo", [value]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="foo")
    def foo(self) -> typing.Optional[scope.jsii_calc_lib.EnumFromScopedModule]:
        return typing.cast(typing.Optional[scope.jsii_calc_lib.EnumFromScopedModule], jsii.get(self, "foo"))

    @foo.setter
    def foo(
        self,
        value: typing.Optional[scope.jsii_calc_lib.EnumFromScopedModule],
    ) -> None:
        jsii.set(self, "foo", value)


class ReturnsPrivateImplementationOfInterface(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ReturnsPrivateImplementationOfInterface",
):
    '''Helps ensure the JSII kernel & runtime cooperate correctly when an un-exported instance of a class is returned with a declared type that is an exported interface, and the instance inherits from an exported class.

    :return: an instance of an un-exported class that extends \`\`ExportedBaseClass\`\`, declared as \`\`IPrivatelyImplemented\`\`.

    :see: https://github.com/aws/jsii/issues/320
    '''

    def __init__(self) -> None:
        jsii.create(ReturnsPrivateImplementationOfInterface, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="privateImplementation")
    def private_implementation(self) -> IPrivatelyImplemented:
        return typing.cast(IPrivatelyImplemented, jsii.get(self, "privateImplementation"))


@jsii.data_type(
    jsii_type="jsii-calc.RootStruct",
    jsii_struct_bases=[],
    name_mapping={"string_prop": "stringProp", "nested_struct": "nestedStruct"},
)
class RootStruct:
    def __init__(
        self,
        *,
        string_prop: builtins.str,
        nested_struct: typing.Optional[NestedStruct] = None,
    ) -> None:
        '''This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.

        This is cheating with the (current) declared types, but this is the "more
        idiomatic" way for Pythonists.

        :param string_prop: May not be empty.
        :param nested_struct: 
        '''
        if isinstance(nested_struct, dict):
            nested_struct = NestedStruct(**nested_struct)
        self._values: typing.Dict[str, typing.Any] = {
            "string_prop": string_prop,
        }
        if nested_struct is not None:
            self._values["nested_struct"] = nested_struct

    @builtins.property
    def string_prop(self) -> builtins.str:
        '''May not be empty.'''
        result = self._values.get("string_prop")
        assert result is not None, "Required property 'string_prop' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def nested_struct(self) -> typing.Optional[NestedStruct]:
        result = self._values.get("nested_struct")
        return typing.cast(typing.Optional[NestedStruct], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RootStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RootStructValidator(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.RootStructValidator",
):
    @jsii.member(jsii_name="validate") # type: ignore[misc]
    @builtins.classmethod
    def validate(
        cls,
        *,
        string_prop: builtins.str,
        nested_struct: typing.Optional[NestedStruct] = None,
    ) -> None:
        '''
        :param string_prop: May not be empty.
        :param nested_struct: 
        '''
        struct = RootStruct(string_prop=string_prop, nested_struct=nested_struct)

        return typing.cast(None, jsii.sinvoke(cls, "validate", [struct]))


class RuntimeTypeChecking(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.RuntimeTypeChecking",
):
    def __init__(self) -> None:
        jsii.create(RuntimeTypeChecking, self, [])

    @jsii.member(jsii_name="methodWithDefaultedArguments")
    def method_with_defaulted_arguments(
        self,
        arg1: typing.Optional[jsii.Number] = None,
        arg2: typing.Optional[builtins.str] = None,
        arg3: typing.Optional[datetime.datetime] = None,
    ) -> None:
        '''
        :param arg1: -
        :param arg2: -
        :param arg3: -
        '''
        return typing.cast(None, jsii.invoke(self, "methodWithDefaultedArguments", [arg1, arg2, arg3]))

    @jsii.member(jsii_name="methodWithOptionalAnyArgument")
    def method_with_optional_any_argument(self, arg: typing.Any = None) -> None:
        '''
        :param arg: -
        '''
        return typing.cast(None, jsii.invoke(self, "methodWithOptionalAnyArgument", [arg]))

    @jsii.member(jsii_name="methodWithOptionalArguments")
    def method_with_optional_arguments(
        self,
        arg1: jsii.Number,
        arg2: builtins.str,
        arg3: typing.Optional[datetime.datetime] = None,
    ) -> None:
        '''Used to verify verification of number of method arguments.

        :param arg1: -
        :param arg2: -
        :param arg3: -
        '''
        return typing.cast(None, jsii.invoke(self, "methodWithOptionalArguments", [arg1, arg2, arg3]))


@jsii.data_type(
    jsii_type="jsii-calc.SecondLevelStruct",
    jsii_struct_bases=[],
    name_mapping={
        "deeper_required_prop": "deeperRequiredProp",
        "deeper_optional_prop": "deeperOptionalProp",
    },
)
class SecondLevelStruct:
    def __init__(
        self,
        *,
        deeper_required_prop: builtins.str,
        deeper_optional_prop: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param deeper_required_prop: It's long and required.
        :param deeper_optional_prop: It's long, but you'll almost never pass it.
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "deeper_required_prop": deeper_required_prop,
        }
        if deeper_optional_prop is not None:
            self._values["deeper_optional_prop"] = deeper_optional_prop

    @builtins.property
    def deeper_required_prop(self) -> builtins.str:
        '''It's long and required.'''
        result = self._values.get("deeper_required_prop")
        assert result is not None, "Required property 'deeper_required_prop' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def deeper_optional_prop(self) -> typing.Optional[builtins.str]:
        '''It's long, but you'll almost never pass it.'''
        result = self._values.get("deeper_optional_prop")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SecondLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class SingleInstanceTwoTypes(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.SingleInstanceTwoTypes",
):
    '''Test that a single instance can be returned under two different FQNs.

    JSII clients can instantiate 2 different strongly-typed wrappers for the same
    object. Unfortunately, this will break object equality, but if we didn't do
    this it would break runtime type checks in the JVM or CLR.
    '''

    def __init__(self) -> None:
        jsii.create(SingleInstanceTwoTypes, self, [])

    @jsii.member(jsii_name="interface1")
    def interface1(self) -> "InbetweenClass":
        return typing.cast("InbetweenClass", jsii.invoke(self, "interface1", []))

    @jsii.member(jsii_name="interface2")
    def interface2(self) -> IPublicInterface:
        return typing.cast(IPublicInterface, jsii.invoke(self, "interface2", []))


class SingletonInt(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.SingletonInt"):
    '''Verifies that singleton enums are handled correctly.

    https://github.com/aws/jsii/issues/231
    '''

    @jsii.member(jsii_name="isSingletonInt")
    def is_singleton_int(self, value: jsii.Number) -> builtins.bool:
        '''
        :param value: -
        '''
        return typing.cast(builtins.bool, jsii.invoke(self, "isSingletonInt", [value]))


@jsii.enum(jsii_type="jsii-calc.SingletonIntEnum")
class SingletonIntEnum(enum.Enum):
    '''A singleton integer.'''

    SINGLETON_INT = "SINGLETON_INT"
    '''Elite!'''


class SingletonString(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.SingletonString"):
    '''Verifies that singleton enums are handled correctly.

    https://github.com/aws/jsii/issues/231
    '''

    @jsii.member(jsii_name="isSingletonString")
    def is_singleton_string(self, value: builtins.str) -> builtins.bool:
        '''
        :param value: -
        '''
        return typing.cast(builtins.bool, jsii.invoke(self, "isSingletonString", [value]))


@jsii.enum(jsii_type="jsii-calc.SingletonStringEnum")
class SingletonStringEnum(enum.Enum):
    '''A singleton string.'''

    SINGLETON_STRING = "SINGLETON_STRING"
    '''1337.'''


@jsii.data_type(
    jsii_type="jsii-calc.SmellyStruct",
    jsii_struct_bases=[],
    name_mapping={"property": "property", "yet_anoter_one": "yetAnoterOne"},
)
class SmellyStruct:
    def __init__(
        self,
        *,
        property: builtins.str,
        yet_anoter_one: builtins.bool,
    ) -> None:
        '''
        :param property: 
        :param yet_anoter_one: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "property": property,
            "yet_anoter_one": yet_anoter_one,
        }

    @builtins.property
    def property(self) -> builtins.str:
        result = self._values.get("property")
        assert result is not None, "Required property 'property' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def yet_anoter_one(self) -> builtins.bool:
        result = self._values.get("yet_anoter_one")
        assert result is not None, "Required property 'yet_anoter_one' is missing"
        return typing.cast(builtins.bool, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SmellyStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class SomeTypeJsii976(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.SomeTypeJsii976"):
    def __init__(self) -> None:
        jsii.create(SomeTypeJsii976, self, [])

    @jsii.member(jsii_name="returnAnonymous") # type: ignore[misc]
    @builtins.classmethod
    def return_anonymous(cls) -> typing.Any:
        return typing.cast(typing.Any, jsii.sinvoke(cls, "returnAnonymous", []))

    @jsii.member(jsii_name="returnReturn") # type: ignore[misc]
    @builtins.classmethod
    def return_return(cls) -> IReturnJsii976:
        return typing.cast(IReturnJsii976, jsii.sinvoke(cls, "returnReturn", []))


class StableClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.StableClass"):
    def __init__(
        self,
        readonly_string: builtins.str,
        mutable_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param readonly_string: -
        :param mutable_number: -
        '''
        jsii.create(StableClass, self, [readonly_string, mutable_number])

    @jsii.member(jsii_name="method")
    def method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "method", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="readonlyProperty")
    def readonly_property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "readonlyProperty"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="mutableProperty")
    def mutable_property(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "mutableProperty"))

    @mutable_property.setter
    def mutable_property(self, value: typing.Optional[jsii.Number]) -> None:
        jsii.set(self, "mutableProperty", value)


@jsii.enum(jsii_type="jsii-calc.StableEnum")
class StableEnum(enum.Enum):
    OPTION_A = "OPTION_A"
    OPTION_B = "OPTION_B"


@jsii.data_type(
    jsii_type="jsii-calc.StableStruct",
    jsii_struct_bases=[],
    name_mapping={"readonly_property": "readonlyProperty"},
)
class StableStruct:
    def __init__(self, *, readonly_property: builtins.str) -> None:
        '''
        :param readonly_property: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "readonly_property": readonly_property,
        }

    @builtins.property
    def readonly_property(self) -> builtins.str:
        result = self._values.get("readonly_property")
        assert result is not None, "Required property 'readonly_property' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StableStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class StaticContext(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.StaticContext"):
    '''This is used to validate the ability to use \`\`this\`\` from within a static context.

    https://github.com/awslabs/aws-cdk/issues/2304
    '''

    @jsii.member(jsii_name="canAccessStaticContext") # type: ignore[misc]
    @builtins.classmethod
    def can_access_static_context(cls) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.sinvoke(cls, "canAccessStaticContext", []))

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="staticVariable")
    def static_variable(cls) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.sget(cls, "staticVariable"))

    @static_variable.setter # type: ignore[no-redef]
    def static_variable(cls, value: builtins.bool) -> None:
        jsii.sset(cls, "staticVariable", value)


class StaticHelloParent(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.StaticHelloParent",
):
    '''Static methods that override parent class are technically overrides (the inheritance of statics is part of the ES6 specification), but certain other languages such as Java do not carry statics in the inheritance chain at all, so they cannot be overridden, only hidden.

    The difference is fairly minor (for typical use-cases, the end result is the
    same), however this has implications on what the generated code should look
    like.
    '''

    def __init__(self) -> None:
        jsii.create(StaticHelloParent, self, [])

    @jsii.member(jsii_name="method") # type: ignore[misc]
    @builtins.classmethod
    def method(cls) -> None:
        return typing.cast(None, jsii.sinvoke(cls, "method", []))

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="property")
    def property(cls) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.sget(cls, "property"))


class Statics(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Statics"):
    def __init__(self, value: builtins.str) -> None:
        '''
        :param value: -
        '''
        jsii.create(Statics, self, [value])

    @jsii.member(jsii_name="staticMethod") # type: ignore[misc]
    @builtins.classmethod
    def static_method(cls, name: builtins.str) -> builtins.str:
        '''Jsdocs for static method.

        :param name: The name of the person to say hello to.
        '''
        return typing.cast(builtins.str, jsii.sinvoke(cls, "staticMethod", [name]))

    @jsii.member(jsii_name="justMethod")
    def just_method(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "justMethod", []))

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="BAR")
    def BAR(cls) -> jsii.Number:
        '''Constants may also use all-caps.'''
        return typing.cast(jsii.Number, jsii.sget(cls, "BAR"))

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="ConstObj")
    def CONST_OBJ(cls) -> "DoubleTrouble":
        return typing.cast("DoubleTrouble", jsii.sget(cls, "ConstObj"))

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="Foo")
    def FOO(cls) -> builtins.str:
        '''Jsdocs for static property.'''
        return typing.cast(builtins.str, jsii.sget(cls, "Foo"))

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="zooBar")
    def ZOO_BAR(cls) -> typing.Mapping[builtins.str, builtins.str]:
        '''Constants can also use camelCase.'''
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.sget(cls, "zooBar"))

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="instance")
    def instance(cls) -> "Statics":
        '''Jsdocs for static getter.

        Jsdocs for static setter.
        '''
        return typing.cast("Statics", jsii.sget(cls, "instance"))

    @instance.setter # type: ignore[no-redef]
    def instance(cls, value: "Statics") -> None:
        jsii.sset(cls, "instance", value)

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="nonConstStatic")
    def non_const_static(cls) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.sget(cls, "nonConstStatic"))

    @non_const_static.setter # type: ignore[no-redef]
    def non_const_static(cls, value: jsii.Number) -> None:
        jsii.sset(cls, "nonConstStatic", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))


@jsii.enum(jsii_type="jsii-calc.StringEnum")
class StringEnum(enum.Enum):
    A = "A"
    B = "B"
    C = "C"


class StripInternal(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.StripInternal"):
    def __init__(self) -> None:
        jsii.create(StripInternal, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="youSeeMe")
    def you_see_me(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "youSeeMe"))

    @you_see_me.setter
    def you_see_me(self, value: builtins.str) -> None:
        jsii.set(self, "youSeeMe", value)


@jsii.data_type(
    jsii_type="jsii-calc.StructA",
    jsii_struct_bases=[],
    name_mapping={
        "required_string": "requiredString",
        "optional_number": "optionalNumber",
        "optional_string": "optionalString",
    },
)
class StructA:
    def __init__(
        self,
        *,
        required_string: builtins.str,
        optional_number: typing.Optional[jsii.Number] = None,
        optional_string: typing.Optional[builtins.str] = None,
    ) -> None:
        '''We can serialize and deserialize structs without silently ignoring optional fields.

        :param required_string: 
        :param optional_number: 
        :param optional_string: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "required_string": required_string,
        }
        if optional_number is not None:
            self._values["optional_number"] = optional_number
        if optional_string is not None:
            self._values["optional_string"] = optional_string

    @builtins.property
    def required_string(self) -> builtins.str:
        result = self._values.get("required_string")
        assert result is not None, "Required property 'required_string' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def optional_number(self) -> typing.Optional[jsii.Number]:
        result = self._values.get("optional_number")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def optional_string(self) -> typing.Optional[builtins.str]:
        result = self._values.get("optional_string")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructA(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.StructB",
    jsii_struct_bases=[],
    name_mapping={
        "required_string": "requiredString",
        "optional_boolean": "optionalBoolean",
        "optional_struct_a": "optionalStructA",
    },
)
class StructB:
    def __init__(
        self,
        *,
        required_string: builtins.str,
        optional_boolean: typing.Optional[builtins.bool] = None,
        optional_struct_a: typing.Optional[StructA] = None,
    ) -> None:
        '''This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.

        :param required_string: 
        :param optional_boolean: 
        :param optional_struct_a: 
        '''
        if isinstance(optional_struct_a, dict):
            optional_struct_a = StructA(**optional_struct_a)
        self._values: typing.Dict[str, typing.Any] = {
            "required_string": required_string,
        }
        if optional_boolean is not None:
            self._values["optional_boolean"] = optional_boolean
        if optional_struct_a is not None:
            self._values["optional_struct_a"] = optional_struct_a

    @builtins.property
    def required_string(self) -> builtins.str:
        result = self._values.get("required_string")
        assert result is not None, "Required property 'required_string' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def optional_boolean(self) -> typing.Optional[builtins.bool]:
        result = self._values.get("optional_boolean")
        return typing.cast(typing.Optional[builtins.bool], result)

    @builtins.property
    def optional_struct_a(self) -> typing.Optional[StructA]:
        result = self._values.get("optional_struct_a")
        return typing.cast(typing.Optional[StructA], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructB(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.StructParameterType",
    jsii_struct_bases=[],
    name_mapping={"scope": "scope", "props": "props"},
)
class StructParameterType:
    def __init__(
        self,
        *,
        scope: builtins.str,
        props: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.

        See: https://github.com/aws/aws-cdk/issues/4302

        :param scope: 
        :param props: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "scope": scope,
        }
        if props is not None:
            self._values["props"] = props

    @builtins.property
    def scope(self) -> builtins.str:
        result = self._values.get("scope")
        assert result is not None, "Required property 'scope' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def props(self) -> typing.Optional[builtins.bool]:
        result = self._values.get("props")
        return typing.cast(typing.Optional[builtins.bool], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructParameterType(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class StructPassing(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.StructPassing"):
    '''Just because we can.'''

    def __init__(self) -> None:
        jsii.create(StructPassing, self, [])

    @jsii.member(jsii_name="howManyVarArgsDidIPass") # type: ignore[misc]
    @builtins.classmethod
    def how_many_var_args_did_i_pass(
        cls,
        _positional: jsii.Number,
        *inputs: "TopLevelStruct",
    ) -> jsii.Number:
        '''
        :param _positional: -
        :param inputs: -
        '''
        return typing.cast(jsii.Number, jsii.sinvoke(cls, "howManyVarArgsDidIPass", [_positional, *inputs]))

    @jsii.member(jsii_name="roundTrip") # type: ignore[misc]
    @builtins.classmethod
    def round_trip(
        cls,
        _positional: jsii.Number,
        *,
        required: builtins.str,
        second_level: typing.Union[jsii.Number, SecondLevelStruct],
        optional: typing.Optional[builtins.str] = None,
    ) -> "TopLevelStruct":
        '''
        :param _positional: -
        :param required: This is a required field.
        :param second_level: A union to really stress test our serialization.
        :param optional: You don't have to pass this.
        '''
        input = TopLevelStruct(
            required=required, second_level=second_level, optional=optional
        )

        return typing.cast("TopLevelStruct", jsii.sinvoke(cls, "roundTrip", [_positional, input]))


class StructUnionConsumer(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.StructUnionConsumer",
):
    @jsii.member(jsii_name="isStructA") # type: ignore[misc]
    @builtins.classmethod
    def is_struct_a(cls, struct: typing.Union[StructA, StructB]) -> builtins.bool:
        '''
        :param struct: -
        '''
        return typing.cast(builtins.bool, jsii.sinvoke(cls, "isStructA", [struct]))

    @jsii.member(jsii_name="isStructB") # type: ignore[misc]
    @builtins.classmethod
    def is_struct_b(cls, struct: typing.Union[StructA, StructB]) -> builtins.bool:
        '''
        :param struct: -
        '''
        return typing.cast(builtins.bool, jsii.sinvoke(cls, "isStructB", [struct]))


@jsii.data_type(
    jsii_type="jsii-calc.StructWithEnum",
    jsii_struct_bases=[],
    name_mapping={"foo": "foo", "bar": "bar"},
)
class StructWithEnum:
    def __init__(
        self,
        *,
        foo: StringEnum,
        bar: typing.Optional[AllTypesEnum] = None,
    ) -> None:
        '''
        :param foo: An enum value.
        :param bar: Optional enum value (of type integer). Default: AllTypesEnum.YOUR_ENUM_VALUE
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "foo": foo,
        }
        if bar is not None:
            self._values["bar"] = bar

    @builtins.property
    def foo(self) -> StringEnum:
        '''An enum value.'''
        result = self._values.get("foo")
        assert result is not None, "Required property 'foo' is missing"
        return typing.cast(StringEnum, result)

    @builtins.property
    def bar(self) -> typing.Optional[AllTypesEnum]:
        '''Optional enum value (of type integer).

        :default: AllTypesEnum.YOUR_ENUM_VALUE
        '''
        result = self._values.get("bar")
        return typing.cast(typing.Optional[AllTypesEnum], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructWithEnum(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.StructWithJavaReservedWords",
    jsii_struct_bases=[],
    name_mapping={
        "default": "default",
        "assert_": "assert",
        "result": "result",
        "that": "that",
    },
)
class StructWithJavaReservedWords:
    def __init__(
        self,
        *,
        default: builtins.str,
        assert_: typing.Optional[builtins.str] = None,
        result: typing.Optional[builtins.str] = None,
        that: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param default: 
        :param assert_: 
        :param result: 
        :param that: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "default": default,
        }
        if assert_ is not None:
            self._values["assert_"] = assert_
        if result is not None:
            self._values["result"] = result
        if that is not None:
            self._values["that"] = that

    @builtins.property
    def default(self) -> builtins.str:
        result = self._values.get("default")
        assert result is not None, "Required property 'default' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def assert_(self) -> typing.Optional[builtins.str]:
        result = self._values.get("assert_")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def result(self) -> typing.Optional[builtins.str]:
        result = self._values.get("result")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def that(self) -> typing.Optional[builtins.str]:
        result = self._values.get("that")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructWithJavaReservedWords(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Sum(
    _CompositeOperation_1c4d123b,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.Sum",
):
    '''An operation that sums multiple values.'''

    def __init__(self) -> None:
        jsii.create(Sum, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="expression")
    def expression(self) -> scope.jsii_calc_lib.NumericValue:
        '''The expression that this operation consists of.

        Must be implemented by derived classes.
        '''
        return typing.cast(scope.jsii_calc_lib.NumericValue, jsii.get(self, "expression"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="parts")
    def parts(self) -> typing.List[scope.jsii_calc_lib.NumericValue]:
        '''The parts to sum.'''
        return typing.cast(typing.List[scope.jsii_calc_lib.NumericValue], jsii.get(self, "parts"))

    @parts.setter
    def parts(self, value: typing.List[scope.jsii_calc_lib.NumericValue]) -> None:
        jsii.set(self, "parts", value)


@jsii.data_type(
    jsii_type="jsii-calc.SupportsNiceJavaBuilderProps",
    jsii_struct_bases=[],
    name_mapping={"bar": "bar", "id": "id"},
)
class SupportsNiceJavaBuilderProps:
    def __init__(
        self,
        *,
        bar: jsii.Number,
        id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bar: Some number, like 42.
        :param id: An \`\`id\`\` field here is terrible API design, because the constructor of \`\`SupportsNiceJavaBuilder\`\` already has a parameter named \`\`id\`\`. But here we are, doing it like we didn't care.
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "bar": bar,
        }
        if id is not None:
            self._values["id"] = id

    @builtins.property
    def bar(self) -> jsii.Number:
        '''Some number, like 42.'''
        result = self._values.get("bar")
        assert result is not None, "Required property 'bar' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def id(self) -> typing.Optional[builtins.str]:
        '''An \`\`id\`\` field here is terrible API design, because the constructor of \`\`SupportsNiceJavaBuilder\`\` already has a parameter named \`\`id\`\`.

        But here we are, doing it like we didn't care.
        '''
        result = self._values.get("id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SupportsNiceJavaBuilderProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class SupportsNiceJavaBuilderWithRequiredProps(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
):
    '''We can generate fancy builders in Java for classes which take a mix of positional & struct parameters.'''

    def __init__(
        self,
        id_: jsii.Number,
        *,
        bar: jsii.Number,
        id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param id_: some identifier of your choice.
        :param bar: Some number, like 42.
        :param id: An \`\`id\`\` field here is terrible API design, because the constructor of \`\`SupportsNiceJavaBuilder\`\` already has a parameter named \`\`id\`\`. But here we are, doing it like we didn't care.
        '''
        props = SupportsNiceJavaBuilderProps(bar=bar, id=id)

        jsii.create(SupportsNiceJavaBuilderWithRequiredProps, self, [id_, props])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="bar")
    def bar(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bar"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="id")
    def id(self) -> jsii.Number:
        '''some identifier of your choice.'''
        return typing.cast(jsii.Number, jsii.get(self, "id"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="propId")
    def prop_id(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "propId"))


class SyncVirtualMethods(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.SyncVirtualMethods",
):
    def __init__(self) -> None:
        jsii.create(SyncVirtualMethods, self, [])

    @jsii.member(jsii_name="callerIsAsync")
    def caller_is_async(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.ainvoke(self, "callerIsAsync", []))

    @jsii.member(jsii_name="callerIsMethod")
    def caller_is_method(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.invoke(self, "callerIsMethod", []))

    @jsii.member(jsii_name="modifyOtherProperty")
    def modify_other_property(self, value: builtins.str) -> None:
        '''
        :param value: -
        '''
        return typing.cast(None, jsii.invoke(self, "modifyOtherProperty", [value]))

    @jsii.member(jsii_name="modifyValueOfTheProperty")
    def modify_value_of_the_property(self, value: builtins.str) -> None:
        '''
        :param value: -
        '''
        return typing.cast(None, jsii.invoke(self, "modifyValueOfTheProperty", [value]))

    @jsii.member(jsii_name="readA")
    def read_a(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.invoke(self, "readA", []))

    @jsii.member(jsii_name="retrieveOtherProperty")
    def retrieve_other_property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "retrieveOtherProperty", []))

    @jsii.member(jsii_name="retrieveReadOnlyProperty")
    def retrieve_read_only_property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "retrieveReadOnlyProperty", []))

    @jsii.member(jsii_name="retrieveValueOfTheProperty")
    def retrieve_value_of_the_property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "retrieveValueOfTheProperty", []))

    @jsii.member(jsii_name="virtualMethod")
    def virtual_method(self, n: jsii.Number) -> jsii.Number:
        '''
        :param n: -
        '''
        return typing.cast(jsii.Number, jsii.invoke(self, "virtualMethod", [n]))

    @jsii.member(jsii_name="writeA")
    def write_a(self, value: jsii.Number) -> None:
        '''
        :param value: -
        '''
        return typing.cast(None, jsii.invoke(self, "writeA", [value]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="readonlyProperty")
    def readonly_property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "readonlyProperty"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="a")
    def a(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "a"))

    @a.setter
    def a(self, value: jsii.Number) -> None:
        jsii.set(self, "a", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="callerIsProperty")
    def caller_is_property(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "callerIsProperty"))

    @caller_is_property.setter
    def caller_is_property(self, value: jsii.Number) -> None:
        jsii.set(self, "callerIsProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="otherProperty")
    def other_property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "otherProperty"))

    @other_property.setter
    def other_property(self, value: builtins.str) -> None:
        jsii.set(self, "otherProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="theProperty")
    def the_property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "theProperty"))

    @the_property.setter
    def the_property(self, value: builtins.str) -> None:
        jsii.set(self, "theProperty", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="valueOfOtherProperty")
    def value_of_other_property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "valueOfOtherProperty"))

    @value_of_other_property.setter
    def value_of_other_property(self, value: builtins.str) -> None:
        jsii.set(self, "valueOfOtherProperty", value)


class TestStructWithEnum(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.TestStructWithEnum",
):
    def __init__(self) -> None:
        jsii.create(TestStructWithEnum, self, [])

    @jsii.member(jsii_name="isStringEnumA")
    def is_string_enum_a(
        self,
        *,
        foo: StringEnum,
        bar: typing.Optional[AllTypesEnum] = None,
    ) -> builtins.bool:
        '''Returns true if \`\`foo\`\` is \`\`StringEnum.A\`\`.

        :param foo: An enum value.
        :param bar: Optional enum value (of type integer). Default: AllTypesEnum.YOUR_ENUM_VALUE
        '''
        input = StructWithEnum(foo=foo, bar=bar)

        return typing.cast(builtins.bool, jsii.invoke(self, "isStringEnumA", [input]))

    @jsii.member(jsii_name="isStringEnumB")
    def is_string_enum_b(
        self,
        *,
        foo: StringEnum,
        bar: typing.Optional[AllTypesEnum] = None,
    ) -> builtins.bool:
        '''Returns true if \`\`foo\`\` is \`\`StringEnum.B\`\` and \`\`bar\`\` is \`\`AllTypesEnum.THIS_IS_GREAT\`\`.

        :param foo: An enum value.
        :param bar: Optional enum value (of type integer). Default: AllTypesEnum.YOUR_ENUM_VALUE
        '''
        input = StructWithEnum(foo=foo, bar=bar)

        return typing.cast(builtins.bool, jsii.invoke(self, "isStringEnumB", [input]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="structWithFoo")
    def struct_with_foo(self) -> StructWithEnum:
        '''Returns \`\`foo: StringEnum.A\`\`.'''
        return typing.cast(StructWithEnum, jsii.get(self, "structWithFoo"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="structWithFooBar")
    def struct_with_foo_bar(self) -> StructWithEnum:
        '''Returns \`\`foo: StringEnum.C\`\` and \`\`bar: AllTypesEnum.MY_ENUM_VALUE\`\`.'''
        return typing.cast(StructWithEnum, jsii.get(self, "structWithFooBar"))


class Thrower(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Thrower"):
    def __init__(self) -> None:
        jsii.create(Thrower, self, [])

    @jsii.member(jsii_name="throwError")
    def throw_error(self) -> None:
        return typing.cast(None, jsii.invoke(self, "throwError", []))


@jsii.data_type(
    jsii_type="jsii-calc.TopLevelStruct",
    jsii_struct_bases=[],
    name_mapping={
        "required": "required",
        "second_level": "secondLevel",
        "optional": "optional",
    },
)
class TopLevelStruct:
    def __init__(
        self,
        *,
        required: builtins.str,
        second_level: typing.Union[jsii.Number, SecondLevelStruct],
        optional: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param required: This is a required field.
        :param second_level: A union to really stress test our serialization.
        :param optional: You don't have to pass this.
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "required": required,
            "second_level": second_level,
        }
        if optional is not None:
            self._values["optional"] = optional

    @builtins.property
    def required(self) -> builtins.str:
        '''This is a required field.'''
        result = self._values.get("required")
        assert result is not None, "Required property 'required' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def second_level(self) -> typing.Union[jsii.Number, SecondLevelStruct]:
        '''A union to really stress test our serialization.'''
        result = self._values.get("second_level")
        assert result is not None, "Required property 'second_level' is missing"
        return typing.cast(typing.Union[jsii.Number, SecondLevelStruct], result)

    @builtins.property
    def optional(self) -> typing.Optional[builtins.str]:
        '''You don't have to pass this.'''
        result = self._values.get("optional")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "TopLevelStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class TwoMethodsWithSimilarCapitalization(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.TwoMethodsWithSimilarCapitalization",
):
    '''In TypeScript it is possible to have two methods with the same name but different capitalization.

    :see: https://github.com/aws/jsii/issues/2508
    '''

    def __init__(self) -> None:
        jsii.create(TwoMethodsWithSimilarCapitalization, self, [])

    @jsii.member(jsii_name="toIsoString")
    def to_iso_string(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "toIsoString", []))

    @jsii.member(jsii_name="toIsOString")
    def to_is_o_string(self) -> builtins.str:
        '''
        :deprecated: python requires that all alternatives are deprecated

        :stability: deprecated
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "toIsOString", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="fooBar")
    def foo_bar(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "fooBar"))


class UmaskCheck(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.UmaskCheck"):
    '''Checks the current file permissions are cool (no funky UMASK down-scoping happened).

    :see: https://github.com/aws/jsii/issues/1765
    '''

    @jsii.member(jsii_name="mode") # type: ignore[misc]
    @builtins.classmethod
    def mode(cls) -> jsii.Number:
        '''This should return 0o644 (-rw-r--r--).'''
        return typing.cast(jsii.Number, jsii.sinvoke(cls, "mode", []))


class UnaryOperation(
    scope.jsii_calc_lib.Operation,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.UnaryOperation",
):
    '''An operation on a single operand.'''

    def __init__(self, operand: scope.jsii_calc_lib.NumericValue) -> None:
        '''
        :param operand: -
        '''
        jsii.create(UnaryOperation, self, [operand])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="operand")
    def operand(self) -> scope.jsii_calc_lib.NumericValue:
        return typing.cast(scope.jsii_calc_lib.NumericValue, jsii.get(self, "operand"))


class _UnaryOperationProxy(
    UnaryOperation, jsii.proxy_for(scope.jsii_calc_lib.Operation) # type: ignore[misc]
):
    pass

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, UnaryOperation).__jsii_proxy_class__ = lambda : _UnaryOperationProxy


@jsii.data_type(
    jsii_type="jsii-calc.UnionProperties",
    jsii_struct_bases=[],
    name_mapping={"bar": "bar", "foo": "foo"},
)
class UnionProperties:
    def __init__(
        self,
        *,
        bar: typing.Union[builtins.str, jsii.Number, AllTypes],
        foo: typing.Optional[typing.Union[builtins.str, jsii.Number]] = None,
    ) -> None:
        '''
        :param bar: 
        :param foo: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "bar": bar,
        }
        if foo is not None:
            self._values["foo"] = foo

    @builtins.property
    def bar(self) -> typing.Union[builtins.str, jsii.Number, AllTypes]:
        result = self._values.get("bar")
        assert result is not None, "Required property 'bar' is missing"
        return typing.cast(typing.Union[builtins.str, jsii.Number, AllTypes], result)

    @builtins.property
    def foo(self) -> typing.Optional[typing.Union[builtins.str, jsii.Number]]:
        result = self._values.get("foo")
        return typing.cast(typing.Optional[typing.Union[builtins.str, jsii.Number]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "UnionProperties(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(scope.jsii_calc_lib.custom_submodule_name.IReflectable)
class UpcasingReflectable(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.UpcasingReflectable",
):
    '''Ensures submodule-imported types from dependencies can be used correctly.'''

    def __init__(self, delegate: typing.Mapping[builtins.str, typing.Any]) -> None:
        '''
        :param delegate: -
        '''
        jsii.create(UpcasingReflectable, self, [delegate])

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="reflector")
    def REFLECTOR(cls) -> scope.jsii_calc_lib.custom_submodule_name.Reflector:
        return typing.cast(scope.jsii_calc_lib.custom_submodule_name.Reflector, jsii.sget(cls, "reflector"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="entries")
    def entries(
        self,
    ) -> typing.List[scope.jsii_calc_lib.custom_submodule_name.ReflectableEntry]:
        return typing.cast(typing.List[scope.jsii_calc_lib.custom_submodule_name.ReflectableEntry], jsii.get(self, "entries"))


class UseBundledDependency(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.UseBundledDependency",
):
    def __init__(self) -> None:
        jsii.create(UseBundledDependency, self, [])

    @jsii.member(jsii_name="value")
    def value(self) -> typing.Any:
        return typing.cast(typing.Any, jsii.invoke(self, "value", []))


class UseCalcBase(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.UseCalcBase"):
    '''Depend on a type from jsii-calc-base as a test for awslabs/jsii#128.'''

    def __init__(self) -> None:
        jsii.create(UseCalcBase, self, [])

    @jsii.member(jsii_name="hello")
    def hello(self) -> scope.jsii_calc_base.Base:
        return typing.cast(scope.jsii_calc_base.Base, jsii.invoke(self, "hello", []))


class UsesInterfaceWithProperties(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.UsesInterfaceWithProperties",
):
    def __init__(self, obj: IInterfaceWithProperties) -> None:
        '''
        :param obj: -
        '''
        jsii.create(UsesInterfaceWithProperties, self, [obj])

    @jsii.member(jsii_name="justRead")
    def just_read(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "justRead", []))

    @jsii.member(jsii_name="readStringAndNumber")
    def read_string_and_number(
        self,
        ext: IInterfaceWithPropertiesExtension,
    ) -> builtins.str:
        '''
        :param ext: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "readStringAndNumber", [ext]))

    @jsii.member(jsii_name="writeAndRead")
    def write_and_read(self, value: builtins.str) -> builtins.str:
        '''
        :param value: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "writeAndRead", [value]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="obj")
    def obj(self) -> IInterfaceWithProperties:
        return typing.cast(IInterfaceWithProperties, jsii.get(self, "obj"))


class VariadicInvoker(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.VariadicInvoker"):
    def __init__(self, method: "VariadicMethod") -> None:
        '''
        :param method: -
        '''
        jsii.create(VariadicInvoker, self, [method])

    @jsii.member(jsii_name="asArray")
    def as_array(self, *values: jsii.Number) -> typing.List[jsii.Number]:
        '''
        :param values: -
        '''
        return typing.cast(typing.List[jsii.Number], jsii.invoke(self, "asArray", [*values]))


class VariadicMethod(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.VariadicMethod"):
    def __init__(self, *prefix: jsii.Number) -> None:
        '''
        :param prefix: a prefix that will be use for all values returned by \`\`#asArray\`\`.
        '''
        jsii.create(VariadicMethod, self, [*prefix])

    @jsii.member(jsii_name="asArray")
    def as_array(
        self,
        first: jsii.Number,
        *others: jsii.Number,
    ) -> typing.List[jsii.Number]:
        '''
        :param first: the first element of the array to be returned (after the \`\`prefix\`\` provided at construction time).
        :param others: other elements to be included in the array.
        '''
        return typing.cast(typing.List[jsii.Number], jsii.invoke(self, "asArray", [first, *others]))


class VirtualMethodPlayground(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.VirtualMethodPlayground",
):
    def __init__(self) -> None:
        jsii.create(VirtualMethodPlayground, self, [])

    @jsii.member(jsii_name="overrideMeAsync")
    def override_me_async(self, index: jsii.Number) -> jsii.Number:
        '''
        :param index: -
        '''
        return typing.cast(jsii.Number, jsii.ainvoke(self, "overrideMeAsync", [index]))

    @jsii.member(jsii_name="overrideMeSync")
    def override_me_sync(self, index: jsii.Number) -> jsii.Number:
        '''
        :param index: -
        '''
        return typing.cast(jsii.Number, jsii.invoke(self, "overrideMeSync", [index]))

    @jsii.member(jsii_name="parallelSumAsync")
    def parallel_sum_async(self, count: jsii.Number) -> jsii.Number:
        '''
        :param count: -
        '''
        return typing.cast(jsii.Number, jsii.ainvoke(self, "parallelSumAsync", [count]))

    @jsii.member(jsii_name="serialSumAsync")
    def serial_sum_async(self, count: jsii.Number) -> jsii.Number:
        '''
        :param count: -
        '''
        return typing.cast(jsii.Number, jsii.ainvoke(self, "serialSumAsync", [count]))

    @jsii.member(jsii_name="sumSync")
    def sum_sync(self, count: jsii.Number) -> jsii.Number:
        '''
        :param count: -
        '''
        return typing.cast(jsii.Number, jsii.invoke(self, "sumSync", [count]))


class VoidCallback(
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.VoidCallback",
):
    '''This test is used to validate the runtimes can return correctly from a void callback.

    - Implement \`\`overrideMe\`\` (method does not have to do anything).
    - Invoke \`\`callMe\`\`
    - Verify that \`\`methodWasCalled\`\` is \`\`true\`\`.
    '''

    def __init__(self) -> None:
        jsii.create(VoidCallback, self, [])

    @jsii.member(jsii_name="callMe")
    def call_me(self) -> None:
        return typing.cast(None, jsii.invoke(self, "callMe", []))

    @jsii.member(jsii_name="overrideMe") # type: ignore[misc]
    @abc.abstractmethod
    def _override_me(self) -> None:
        ...

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="methodWasCalled")
    def method_was_called(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "methodWasCalled"))


class _VoidCallbackProxy(VoidCallback):
    @jsii.member(jsii_name="overrideMe")
    def _override_me(self) -> None:
        return typing.cast(None, jsii.invoke(self, "overrideMe", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, VoidCallback).__jsii_proxy_class__ = lambda : _VoidCallbackProxy


class WithPrivatePropertyInConstructor(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.WithPrivatePropertyInConstructor",
):
    '''Verifies that private property declarations in constructor arguments are hidden.'''

    def __init__(self, private_field: typing.Optional[builtins.str] = None) -> None:
        '''
        :param private_field: -
        '''
        jsii.create(WithPrivatePropertyInConstructor, self, [private_field])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="success")
    def success(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "success"))


@jsii.implements(IInterfaceImplementedByAbstractClass)
class AbstractClass(
    AbstractClassBase,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.AbstractClass",
):
    def __init__(self) -> None:
        jsii.create(AbstractClass, self, [])

    @jsii.member(jsii_name="abstractMethod") # type: ignore[misc]
    @abc.abstractmethod
    def abstract_method(self, name: builtins.str) -> builtins.str:
        '''
        :param name: -
        '''
        ...

    @jsii.member(jsii_name="nonAbstractMethod")
    def non_abstract_method(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.invoke(self, "nonAbstractMethod", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="propFromInterface")
    def prop_from_interface(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "propFromInterface"))


class _AbstractClassProxy(
    AbstractClass, jsii.proxy_for(AbstractClassBase) # type: ignore[misc]
):
    @jsii.member(jsii_name="abstractMethod")
    def abstract_method(self, name: builtins.str) -> builtins.str:
        '''
        :param name: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self, "abstractMethod", [name]))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, AbstractClass).__jsii_proxy_class__ = lambda : _AbstractClassProxy


class Add(BinaryOperation, metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Add"):
    '''The "+" binary operation.'''

    def __init__(
        self,
        lhs: scope.jsii_calc_lib.NumericValue,
        rhs: scope.jsii_calc_lib.NumericValue,
    ) -> None:
        '''Creates a BinaryOperation.

        :param lhs: Left-hand side operand.
        :param rhs: Right-hand side operand.
        '''
        jsii.create(Add, self, [lhs, rhs])

    @jsii.member(jsii_name="toString")
    def to_string(self) -> builtins.str:
        '''(deprecated) String representation of the value.'''
        return typing.cast(builtins.str, jsii.invoke(self, "toString", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        '''(deprecated) The value.'''
        return typing.cast(jsii.Number, jsii.get(self, "value"))


@jsii.implements(IAnonymousImplementationProvider)
class AnonymousImplementationProvider(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.AnonymousImplementationProvider",
):
    def __init__(self) -> None:
        jsii.create(AnonymousImplementationProvider, self, [])

    @jsii.member(jsii_name="provideAsClass")
    def provide_as_class(self) -> Implementation:
        return typing.cast(Implementation, jsii.invoke(self, "provideAsClass", []))

    @jsii.member(jsii_name="provideAsInterface")
    def provide_as_interface(self) -> IAnonymouslyImplementMe:
        return typing.cast(IAnonymouslyImplementMe, jsii.invoke(self, "provideAsInterface", []))


@jsii.implements(IBell)
class Bell(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Bell"):
    def __init__(self) -> None:
        jsii.create(Bell, self, [])

    @jsii.member(jsii_name="ring")
    def ring(self) -> None:
        return typing.cast(None, jsii.invoke(self, "ring", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="rung")
    def rung(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "rung"))

    @rung.setter
    def rung(self, value: builtins.bool) -> None:
        jsii.set(self, "rung", value)


@jsii.data_type(
    jsii_type="jsii-calc.ChildStruct982",
    jsii_struct_bases=[ParentStruct982],
    name_mapping={"foo": "foo", "bar": "bar"},
)
class ChildStruct982(ParentStruct982):
    def __init__(self, *, foo: builtins.str, bar: jsii.Number) -> None:
        '''
        :param foo: 
        :param bar: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "foo": foo,
            "bar": bar,
        }

    @builtins.property
    def foo(self) -> builtins.str:
        result = self._values.get("foo")
        assert result is not None, "Required property 'foo' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def bar(self) -> jsii.Number:
        result = self._values.get("bar")
        assert result is not None, "Required property 'bar' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ChildStruct982(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(INonInternalInterface)
class ClassThatImplementsTheInternalInterface(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ClassThatImplementsTheInternalInterface",
):
    def __init__(self) -> None:
        jsii.create(ClassThatImplementsTheInternalInterface, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="a")
    def a(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "a"))

    @a.setter
    def a(self, value: builtins.str) -> None:
        jsii.set(self, "a", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="b")
    def b(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "b"))

    @b.setter
    def b(self, value: builtins.str) -> None:
        jsii.set(self, "b", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="c")
    def c(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "c"))

    @c.setter
    def c(self, value: builtins.str) -> None:
        jsii.set(self, "c", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="d")
    def d(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "d"))

    @d.setter
    def d(self, value: builtins.str) -> None:
        jsii.set(self, "d", value)


@jsii.implements(INonInternalInterface)
class ClassThatImplementsThePrivateInterface(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ClassThatImplementsThePrivateInterface",
):
    def __init__(self) -> None:
        jsii.create(ClassThatImplementsThePrivateInterface, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="a")
    def a(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "a"))

    @a.setter
    def a(self, value: builtins.str) -> None:
        jsii.set(self, "a", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="b")
    def b(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "b"))

    @b.setter
    def b(self, value: builtins.str) -> None:
        jsii.set(self, "b", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="c")
    def c(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "c"))

    @c.setter
    def c(self, value: builtins.str) -> None:
        jsii.set(self, "c", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="e")
    def e(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "e"))

    @e.setter
    def e(self, value: builtins.str) -> None:
        jsii.set(self, "e", value)


@jsii.implements(IInterfaceWithProperties)
class ClassWithPrivateConstructorAndAutomaticProperties(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties",
):
    '''Class that implements interface properties automatically, but using a private constructor.'''

    @jsii.member(jsii_name="create") # type: ignore[misc]
    @builtins.classmethod
    def create(
        cls,
        read_only_string: builtins.str,
        read_write_string: builtins.str,
    ) -> "ClassWithPrivateConstructorAndAutomaticProperties":
        '''
        :param read_only_string: -
        :param read_write_string: -
        '''
        return typing.cast("ClassWithPrivateConstructorAndAutomaticProperties", jsii.sinvoke(cls, "create", [read_only_string, read_write_string]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="readOnlyString")
    def read_only_string(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "readOnlyString"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="readWriteString")
    def read_write_string(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "readWriteString"))

    @read_write_string.setter
    def read_write_string(self, value: builtins.str) -> None:
        jsii.set(self, "readWriteString", value)


@jsii.interface(jsii_type="jsii-calc.IFriendlyRandomGenerator")
class IFriendlyRandomGenerator(
    IRandomNumberGenerator,
    scope.jsii_calc_lib.IFriendly,
    typing_extensions.Protocol,
):
    pass


class _IFriendlyRandomGeneratorProxy(
    jsii.proxy_for(IRandomNumberGenerator), # type: ignore[misc]
    jsii.proxy_for(scope.jsii_calc_lib.IFriendly), # type: ignore[misc]
):
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IFriendlyRandomGenerator"
    pass

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IFriendlyRandomGenerator).__jsii_proxy_class__ = lambda : _IFriendlyRandomGeneratorProxy


@jsii.interface(jsii_type="jsii-calc.IInterfaceThatShouldNotBeADataType")
class IInterfaceThatShouldNotBeADataType(
    IInterfaceWithMethods,
    typing_extensions.Protocol,
):
    '''Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.'''

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="otherValue")
    def other_value(self) -> builtins.str:
        ...


class _IInterfaceThatShouldNotBeADataTypeProxy(
    jsii.proxy_for(IInterfaceWithMethods) # type: ignore[misc]
):
    '''Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.'''

    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IInterfaceThatShouldNotBeADataType"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="otherValue")
    def other_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "otherValue"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IInterfaceThatShouldNotBeADataType).__jsii_proxy_class__ = lambda : _IInterfaceThatShouldNotBeADataTypeProxy


@jsii.interface(jsii_type="jsii-calc.IJSII417Derived")
class IJSII417Derived(IJSII417PublicBaseOfBase, typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="property")
    def property(self) -> builtins.str:
        ...

    @jsii.member(jsii_name="bar")
    def bar(self) -> None:
        ...

    @jsii.member(jsii_name="baz")
    def baz(self) -> None:
        ...


class _IJSII417DerivedProxy(
    jsii.proxy_for(IJSII417PublicBaseOfBase) # type: ignore[misc]
):
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.IJSII417Derived"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="property")
    def property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "property"))

    @jsii.member(jsii_name="bar")
    def bar(self) -> None:
        return typing.cast(None, jsii.invoke(self, "bar", []))

    @jsii.member(jsii_name="baz")
    def baz(self) -> None:
        return typing.cast(None, jsii.invoke(self, "baz", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IJSII417Derived).__jsii_proxy_class__ = lambda : _IJSII417DerivedProxy


@jsii.implements(IPublicInterface2)
class InbetweenClass(
    PublicClass,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.InbetweenClass",
):
    def __init__(self) -> None:
        jsii.create(InbetweenClass, self, [])

    @jsii.member(jsii_name="ciao")
    def ciao(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "ciao", []))


class JSII417Derived(
    JSII417PublicBaseOfBase,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.JSII417Derived",
):
    def __init__(self, property: builtins.str) -> None:
        '''
        :param property: -
        '''
        jsii.create(JSII417Derived, self, [property])

    @jsii.member(jsii_name="bar")
    def bar(self) -> None:
        return typing.cast(None, jsii.invoke(self, "bar", []))

    @jsii.member(jsii_name="baz")
    def baz(self) -> None:
        return typing.cast(None, jsii.invoke(self, "baz", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="property")
    def _property(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "property"))


@jsii.implements(IFriendlier)
class Negate(UnaryOperation, metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.Negate"):
    '''The negation operation ("-value").'''

    def __init__(self, operand: scope.jsii_calc_lib.NumericValue) -> None:
        '''
        :param operand: -
        '''
        jsii.create(Negate, self, [operand])

    @jsii.member(jsii_name="farewell")
    def farewell(self) -> builtins.str:
        '''Say farewell.'''
        return typing.cast(builtins.str, jsii.invoke(self, "farewell", []))

    @jsii.member(jsii_name="goodbye")
    def goodbye(self) -> builtins.str:
        '''Say goodbye.'''
        return typing.cast(builtins.str, jsii.invoke(self, "goodbye", []))

    @jsii.member(jsii_name="hello")
    def hello(self) -> builtins.str:
        '''(deprecated) Say hello!'''
        return typing.cast(builtins.str, jsii.invoke(self, "hello", []))

    @jsii.member(jsii_name="toString")
    def to_string(self) -> builtins.str:
        '''(deprecated) String representation of the value.'''
        return typing.cast(builtins.str, jsii.invoke(self, "toString", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        '''(deprecated) The value.'''
        return typing.cast(jsii.Number, jsii.get(self, "value"))


class StaticHelloChild(
    StaticHelloParent,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.StaticHelloChild",
):
    @jsii.member(jsii_name="method") # type: ignore[misc]
    @builtins.classmethod
    def method(cls) -> None:
        return typing.cast(None, jsii.sinvoke(cls, "method", []))

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="property")
    def property(cls) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.sget(cls, "property"))


class SupportsNiceJavaBuilder(
    SupportsNiceJavaBuilderWithRequiredProps,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.SupportsNiceJavaBuilder",
):
    def __init__(
        self,
        id: jsii.Number,
        default_bar: typing.Optional[jsii.Number] = None,
        props: typing.Optional[SupportsNiceJavaBuilderProps] = None,
        *rest: builtins.str,
    ) -> None:
        '''
        :param id: some identifier.
        :param default_bar: the default value of \`\`bar\`\`.
        :param props: some props once can provide.
        :param rest: a variadic continuation.
        '''
        jsii.create(SupportsNiceJavaBuilder, self, [id, default_bar, props, *rest])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="id")
    def id(self) -> jsii.Number:
        '''some identifier.'''
        return typing.cast(jsii.Number, jsii.get(self, "id"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="rest")
    def rest(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "rest"))


@jsii.implements(IFriendlyRandomGenerator)
class DoubleTrouble(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.DoubleTrouble"):
    def __init__(self) -> None:
        jsii.create(DoubleTrouble, self, [])

    @jsii.member(jsii_name="hello")
    def hello(self) -> builtins.str:
        '''(deprecated) Say hello!'''
        return typing.cast(builtins.str, jsii.invoke(self, "hello", []))

    @jsii.member(jsii_name="next")
    def next(self) -> jsii.Number:
        '''Returns another random number.'''
        return typing.cast(jsii.Number, jsii.invoke(self, "next", []))


__all__ = [
    "AbstractClass",
    "AbstractClassBase",
    "AbstractClassReturner",
    "AbstractSuite",
    "Add",
    "AllTypes",
    "AllTypesEnum",
    "AllowedMethodNames",
    "AmbiguousParameters",
    "AnonymousImplementationProvider",
    "AsyncVirtualMethods",
    "AugmentableClass",
    "BaseJsii976",
    "Bell",
    "BinaryOperation",
    "BurriedAnonymousObject",
    "Calculator",
    "CalculatorProps",
    "ChildStruct982",
    "ClassThatImplementsTheInternalInterface",
    "ClassThatImplementsThePrivateInterface",
    "ClassWithCollections",
    "ClassWithDocs",
    "ClassWithJavaReservedWords",
    "ClassWithMutableObjectLiteralProperty",
    "ClassWithPrivateConstructorAndAutomaticProperties",
    "ConfusingToJackson",
    "ConfusingToJacksonStruct",
    "ConstructorPassesThisOut",
    "Constructors",
    "ConsumePureInterface",
    "ConsumerCanRingBell",
    "ConsumersOfThisCrazyTypeSystem",
    "DataRenderer",
    "Default",
    "DefaultedConstructorArgument",
    "Demonstrate982",
    "DeprecatedClass",
    "DeprecatedEnum",
    "DeprecatedStruct",
    "DerivedStruct",
    "DiamondBottom",
    "DiamondInheritanceBaseLevelStruct",
    "DiamondInheritanceFirstMidLevelStruct",
    "DiamondInheritanceSecondMidLevelStruct",
    "DiamondInheritanceTopLevelStruct",
    "DisappointingCollectionSource",
    "DoNotOverridePrivates",
    "DoNotRecognizeAnyAsOptional",
    "DocumentedClass",
    "DontComplainAboutVariadicAfterOptional",
    "DoubleTrouble",
    "DynamicPropertyBearer",
    "DynamicPropertyBearerChild",
    "Entropy",
    "EnumDispenser",
    "EraseUndefinedHashValues",
    "EraseUndefinedHashValuesOptions",
    "ExperimentalClass",
    "ExperimentalEnum",
    "ExperimentalStruct",
    "ExportedBaseClass",
    "ExtendsInternalInterface",
    "ExternalClass",
    "ExternalEnum",
    "ExternalStruct",
    "GiveMeStructs",
    "Greetee",
    "GreetingAugmenter",
    "IAnonymousImplementationProvider",
    "IAnonymouslyImplementMe",
    "IAnotherPublicInterface",
    "IBell",
    "IBellRinger",
    "IConcreteBellRinger",
    "IDeprecatedInterface",
    "IExperimentalInterface",
    "IExtendsPrivateInterface",
    "IExternalInterface",
    "IFriendlier",
    "IFriendlyRandomGenerator",
    "IInterfaceImplementedByAbstractClass",
    "IInterfaceThatShouldNotBeADataType",
    "IInterfaceWithInternal",
    "IInterfaceWithMethods",
    "IInterfaceWithOptionalMethodArguments",
    "IInterfaceWithProperties",
    "IInterfaceWithPropertiesExtension",
    "IJSII417Derived",
    "IJSII417PublicBaseOfBase",
    "IJsii487External",
    "IJsii487External2",
    "IJsii496",
    "IMutableObjectLiteral",
    "INonInternalInterface",
    "IObjectWithProperty",
    "IOptionalMethod",
    "IPrivatelyImplemented",
    "IPublicInterface",
    "IPublicInterface2",
    "IRandomNumberGenerator",
    "IReturnJsii976",
    "IReturnsNumber",
    "IStableInterface",
    "IStructReturningDelegate",
    "IWallClock",
    "ImplementInternalInterface",
    "Implementation",
    "ImplementsInterfaceWithInternal",
    "ImplementsInterfaceWithInternalSubclass",
    "ImplementsPrivateInterface",
    "ImplictBaseOfBase",
    "InbetweenClass",
    "InterfaceCollections",
    "InterfacesMaker",
    "Isomorphism",
    "Issue2638",
    "Issue2638B",
    "JSII417Derived",
    "JSII417PublicBaseOfBase",
    "JSObjectLiteralForInterface",
    "JSObjectLiteralToNative",
    "JSObjectLiteralToNativeClass",
    "JavaReservedWords",
    "Jsii487Derived",
    "Jsii496Derived",
    "JsiiAgent",
    "JsonFormatter",
    "LevelOne",
    "LevelOneProps",
    "LoadBalancedFargateServiceProps",
    "MethodNamedProperty",
    "Multiply",
    "Negate",
    "NestedClassInstance",
    "NestedStruct",
    "NodeStandardLibrary",
    "NullShouldBeTreatedAsUndefined",
    "NullShouldBeTreatedAsUndefinedData",
    "NumberGenerator",
    "ObjectRefsInCollections",
    "ObjectWithPropertyProvider",
    "Old",
    "OptionalArgumentInvoker",
    "OptionalConstructorArgument",
    "OptionalStruct",
    "OptionalStructConsumer",
    "OverridableProtectedMember",
    "OverrideReturnsObject",
    "ParentStruct982",
    "PartiallyInitializedThisConsumer",
    "Polymorphism",
    "Power",
    "PropertyNamedProperty",
    "PublicClass",
    "PythonReservedWords",
    "ReferenceEnumFromScopedPackage",
    "ReturnsPrivateImplementationOfInterface",
    "RootStruct",
    "RootStructValidator",
    "RuntimeTypeChecking",
    "SecondLevelStruct",
    "SingleInstanceTwoTypes",
    "SingletonInt",
    "SingletonIntEnum",
    "SingletonString",
    "SingletonStringEnum",
    "SmellyStruct",
    "SomeTypeJsii976",
    "StableClass",
    "StableEnum",
    "StableStruct",
    "StaticContext",
    "StaticHelloChild",
    "StaticHelloParent",
    "Statics",
    "StringEnum",
    "StripInternal",
    "StructA",
    "StructB",
    "StructParameterType",
    "StructPassing",
    "StructUnionConsumer",
    "StructWithEnum",
    "StructWithJavaReservedWords",
    "Sum",
    "SupportsNiceJavaBuilder",
    "SupportsNiceJavaBuilderProps",
    "SupportsNiceJavaBuilderWithRequiredProps",
    "SyncVirtualMethods",
    "TestStructWithEnum",
    "Thrower",
    "TopLevelStruct",
    "TwoMethodsWithSimilarCapitalization",
    "UmaskCheck",
    "UnaryOperation",
    "UnionProperties",
    "UpcasingReflectable",
    "UseBundledDependency",
    "UseCalcBase",
    "UsesInterfaceWithProperties",
    "VariadicInvoker",
    "VariadicMethod",
    "VirtualMethodPlayground",
    "VoidCallback",
    "WithPrivatePropertyInConstructor",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/_jsii/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

import scope.jsii_calc_base._jsii
import scope.jsii_calc_lib._jsii

__jsii_assembly__ = jsii.JSIIAssembly.load(
    "jsii-calc", "3.20.120", __name__[0:-6], "jsii-calc@3.20.120.jsii.tgz"
)

__all__ = [
    "__jsii_assembly__",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/_jsii/bin/calc 1`] = `
#!/usr/bin/env python

import jsii
import sys

__jsii_assembly__ = jsii.JSIIAssembly.load(
    "jsii-calc", "3.20.120", "jsii_calc", "jsii-calc@3.20.120.jsii.tgz"
)

__jsii_assembly__.invokeBinScript("jsii-calc", "calc", sys.argv[1:])

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/_jsii/jsii-calc@3.20.120.jsii.tgz 1`] = `python/src/jsii_calc/_jsii/jsii-calc@3.20.120.jsii.tgz is a tarball`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/composition/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *

import scope.jsii_calc_lib


class CompositeOperation(
    scope.jsii_calc_lib.Operation,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.composition.CompositeOperation",
):
    '''Abstract operation composed from an expression of other operations.'''

    def __init__(self) -> None:
        jsii.create(CompositeOperation, self, [])

    @jsii.member(jsii_name="toString")
    def to_string(self) -> builtins.str:
        '''(deprecated) String representation of the value.'''
        return typing.cast(builtins.str, jsii.invoke(self, "toString", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="expression")
    @abc.abstractmethod
    def expression(self) -> scope.jsii_calc_lib.NumericValue:
        '''The expression that this operation consists of.

        Must be implemented by derived classes.
        '''
        ...

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        '''(deprecated) The value.'''
        return typing.cast(jsii.Number, jsii.get(self, "value"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="decorationPostfixes")
    def decoration_postfixes(self) -> typing.List[builtins.str]:
        '''A set of postfixes to include in a decorated .toString().'''
        return typing.cast(typing.List[builtins.str], jsii.get(self, "decorationPostfixes"))

    @decoration_postfixes.setter
    def decoration_postfixes(self, value: typing.List[builtins.str]) -> None:
        jsii.set(self, "decorationPostfixes", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="decorationPrefixes")
    def decoration_prefixes(self) -> typing.List[builtins.str]:
        '''A set of prefixes to include in a decorated .toString().'''
        return typing.cast(typing.List[builtins.str], jsii.get(self, "decorationPrefixes"))

    @decoration_prefixes.setter
    def decoration_prefixes(self, value: typing.List[builtins.str]) -> None:
        jsii.set(self, "decorationPrefixes", value)

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="stringStyle")
    def string_style(self) -> "CompositeOperation.CompositionStringStyle":
        '''The .toString() style.'''
        return typing.cast("CompositeOperation.CompositionStringStyle", jsii.get(self, "stringStyle"))

    @string_style.setter
    def string_style(self, value: "CompositeOperation.CompositionStringStyle") -> None:
        jsii.set(self, "stringStyle", value)

    @jsii.enum(
        jsii_type="jsii-calc.composition.CompositeOperation.CompositionStringStyle"
    )
    class CompositionStringStyle(enum.Enum):
        '''Style of .toString() output for CompositeOperation.'''

        NORMAL = "NORMAL"
        '''Normal string expression.'''
        DECORATED = "DECORATED"
        '''Decorated string expression.'''


class _CompositeOperationProxy(
    CompositeOperation,
    jsii.proxy_for(scope.jsii_calc_lib.Operation), # type: ignore[misc]
):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="expression")
    def expression(self) -> scope.jsii_calc_lib.NumericValue:
        '''The expression that this operation consists of.

        Must be implemented by derived classes.
        '''
        return typing.cast(scope.jsii_calc_lib.NumericValue, jsii.get(self, "expression"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, CompositeOperation).__jsii_proxy_class__ = lambda : _CompositeOperationProxy


__all__ = [
    "CompositeOperation",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/derived_class_has_no_properties/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *


class Base(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.DerivedClassHasNoProperties.Base",
):
    def __init__(self) -> None:
        jsii.create(Base, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="prop")
    def prop(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "prop"))

    @prop.setter
    def prop(self, value: builtins.str) -> None:
        jsii.set(self, "prop", value)


class Derived(
    Base,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.DerivedClassHasNoProperties.Derived",
):
    def __init__(self) -> None:
        jsii.create(Derived, self, [])


__all__ = [
    "Base",
    "Derived",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/interface_in_namespace_includes_classes/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *


class Foo(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
):
    def __init__(self) -> None:
        jsii.create(Foo, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="bar")
    def bar(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "bar"))

    @bar.setter
    def bar(self, value: typing.Optional[builtins.str]) -> None:
        jsii.set(self, "bar", value)


@jsii.data_type(
    jsii_type="jsii-calc.InterfaceInNamespaceIncludesClasses.Hello",
    jsii_struct_bases=[],
    name_mapping={"foo": "foo"},
)
class Hello:
    def __init__(self, *, foo: jsii.Number) -> None:
        '''
        :param foo: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "foo": foo,
        }

    @builtins.property
    def foo(self) -> jsii.Number:
        result = self._values.get("foo")
        assert result is not None, "Required property 'foo' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Hello(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "Foo",
    "Hello",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/interface_in_namespace_only_interface/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *


@jsii.data_type(
    jsii_type="jsii-calc.InterfaceInNamespaceOnlyInterface.Hello",
    jsii_struct_bases=[],
    name_mapping={"foo": "foo"},
)
class Hello:
    def __init__(self, *, foo: jsii.Number) -> None:
        '''
        :param foo: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "foo": foo,
        }

    @builtins.property
    def foo(self) -> jsii.Number:
        result = self._values.get("foo")
        assert result is not None, "Required property 'foo' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Hello(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "Hello",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2530/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *


class MyClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.module2530.MyClass"):
    '''Verifies a method with parameters "_" can be generated.

    :see: https://github.com/aws/jsii/issues/2530
    '''

    def __init__(self, _: jsii.Number) -> None:
        '''
        :param _: -
        '''
        jsii.create(MyClass, self, [_])

    @jsii.member(jsii_name="bar") # type: ignore[misc]
    @builtins.classmethod
    def bar(cls, _: builtins.bool) -> None:
        '''
        :param _: -
        '''
        return typing.cast(None, jsii.sinvoke(cls, "bar", [_]))

    @jsii.member(jsii_name="foo")
    def foo(self, _: builtins.str) -> None:
        '''
        :param _: -
        '''
        return typing.cast(None, jsii.invoke(self, "foo", [_]))


__all__ = [
    "MyClass",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2617/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *


class OnlyStatics(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.module2617.OnlyStatics",
):
    @jsii.member(jsii_name="bar") # type: ignore[misc]
    @builtins.classmethod
    def bar(cls) -> None:
        return typing.cast(None, jsii.sinvoke(cls, "bar", []))

    @jsii.member(jsii_name="foo") # type: ignore[misc]
    @builtins.classmethod
    def foo(cls) -> None:
        return typing.cast(None, jsii.sinvoke(cls, "foo", []))


__all__ = [
    "OnlyStatics",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2647/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *

import scope.jsii_calc_base_of_base
import scope.jsii_calc_lib


@jsii.implements(scope.jsii_calc_lib.IFriendly)
class ExtendAndImplement(
    scope.jsii_calc_lib.BaseFor2647,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.module2647.ExtendAndImplement",
):
    '''This class falls into the category of "multiple bases" from a different module from a go code gen perspective.

    :see: https://github.com/aws/jsii/issues/2647
    '''

    def __init__(self, very: scope.jsii_calc_base_of_base.Very) -> None:
        '''
        :param very: -

        :stability: deprecated
        '''
        jsii.create(ExtendAndImplement, self, [very])

    @jsii.member(jsii_name="hello")
    def hello(self) -> builtins.str:
        '''(deprecated) Say hello!'''
        return typing.cast(builtins.str, jsii.invoke(self, "hello", []))

    @jsii.member(jsii_name="localMethod")
    def local_method(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "localMethod", []))


__all__ = [
    "ExtendAndImplement",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2689/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *

__all__: typing.List[typing.Any] = []

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2689/methods/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *

import scope.jsii_calc_base
import scope.jsii_calc_lib


class MyClass(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.module2689.methods.MyClass",
):
    def __init__(self) -> None:
        jsii.create(MyClass, self, [])

    @jsii.member(jsii_name="bar")
    def bar(
        self,
        _bar: typing.Mapping[builtins.str, scope.jsii_calc_base.BaseProps],
    ) -> None:
        '''
        :param _bar: -
        '''
        return typing.cast(None, jsii.invoke(self, "bar", [_bar]))

    @jsii.member(jsii_name="foo")
    def foo(self, _values: typing.Sequence[scope.jsii_calc_lib.Number]) -> None:
        '''
        :param _values: -
        '''
        return typing.cast(None, jsii.invoke(self, "foo", [_values]))


__all__ = [
    "MyClass",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2689/props/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *

import scope.jsii_calc_base
import scope.jsii_calc_lib


class MyClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.module2689.props.MyClass"):
    def __init__(self) -> None:
        jsii.create(MyClass, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="bar")
    def bar(self) -> typing.Mapping[builtins.str, scope.jsii_calc_base.BaseProps]:
        return typing.cast(typing.Mapping[builtins.str, scope.jsii_calc_base.BaseProps], jsii.get(self, "bar"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="foo")
    def foo(self) -> typing.List[scope.jsii_calc_lib.Number]:
        return typing.cast(typing.List[scope.jsii_calc_lib.Number], jsii.get(self, "foo"))


__all__ = [
    "MyClass",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2689/retval/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *

import scope.jsii_calc_base
import scope.jsii_calc_lib


class MyClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.module2689.retval.MyClass"):
    def __init__(self) -> None:
        jsii.create(MyClass, self, [])

    @jsii.member(jsii_name="bar")
    def bar(self) -> typing.Mapping[builtins.str, scope.jsii_calc_base.BaseProps]:
        return typing.cast(typing.Mapping[builtins.str, scope.jsii_calc_base.BaseProps], jsii.invoke(self, "bar", []))

    @jsii.member(jsii_name="foo")
    def foo(self) -> typing.List[scope.jsii_calc_lib.Number]:
        return typing.cast(typing.List[scope.jsii_calc_lib.Number], jsii.invoke(self, "foo", []))


__all__ = [
    "MyClass",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2689/structs/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *

import scope.jsii_calc_base
import scope.jsii_calc_lib


@jsii.data_type(
    jsii_type="jsii-calc.module2689.structs.MyStruct",
    jsii_struct_bases=[],
    name_mapping={"base_map": "baseMap", "numbers": "numbers"},
)
class MyStruct:
    def __init__(
        self,
        *,
        base_map: typing.Mapping[builtins.str, scope.jsii_calc_base.BaseProps],
        numbers: typing.Sequence[scope.jsii_calc_lib.Number],
    ) -> None:
        '''
        :param base_map: 
        :param numbers: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "base_map": base_map,
            "numbers": numbers,
        }

    @builtins.property
    def base_map(self) -> typing.Mapping[builtins.str, scope.jsii_calc_base.BaseProps]:
        result = self._values.get("base_map")
        assert result is not None, "Required property 'base_map' is missing"
        return typing.cast(typing.Mapping[builtins.str, scope.jsii_calc_base.BaseProps], result)

    @builtins.property
    def numbers(self) -> typing.List[scope.jsii_calc_lib.Number]:
        result = self._values.get("numbers")
        assert result is not None, "Required property 'numbers' is missing"
        return typing.cast(typing.List[scope.jsii_calc_lib.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MyStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "MyStruct",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2692/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *

__all__: typing.List[typing.Any] = []

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2692/submodule1/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *


@jsii.data_type(
    jsii_type="jsii-calc.module2692.submodule1.Bar",
    jsii_struct_bases=[],
    name_mapping={"bar1": "bar1"},
)
class Bar:
    def __init__(self, *, bar1: builtins.str) -> None:
        '''
        :param bar1: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "bar1": bar1,
        }

    @builtins.property
    def bar1(self) -> builtins.str:
        result = self._values.get("bar1")
        assert result is not None, "Required property 'bar1' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Bar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "Bar",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2692/submodule2/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *

from ..submodule1 import Bar as _Bar_ec7eccad


@jsii.data_type(
    jsii_type="jsii-calc.module2692.submodule2.Bar",
    jsii_struct_bases=[],
    name_mapping={"bar2": "bar2"},
)
class Bar:
    def __init__(self, *, bar2: builtins.str) -> None:
        '''
        :param bar2: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "bar2": bar2,
        }

    @builtins.property
    def bar2(self) -> builtins.str:
        result = self._values.get("bar2")
        assert result is not None, "Required property 'bar2' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Bar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.module2692.submodule2.Foo",
    jsii_struct_bases=[Bar, _Bar_ec7eccad],
    name_mapping={"bar2": "bar2", "bar1": "bar1", "foo2": "foo2"},
)
class Foo(Bar, _Bar_ec7eccad):
    def __init__(
        self,
        *,
        bar2: builtins.str,
        bar1: builtins.str,
        foo2: builtins.str,
    ) -> None:
        '''
        :param bar2: 
        :param bar1: 
        :param foo2: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "bar2": bar2,
            "bar1": bar1,
            "foo2": foo2,
        }

    @builtins.property
    def bar2(self) -> builtins.str:
        result = self._values.get("bar2")
        assert result is not None, "Required property 'bar2' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def bar1(self) -> builtins.str:
        result = self._values.get("bar1")
        assert result is not None, "Required property 'bar1' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def foo2(self) -> builtins.str:
        result = self._values.get("foo2")
        assert result is not None, "Required property 'foo2' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Foo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "Bar",
    "Foo",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2700/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *


@jsii.interface(jsii_type="jsii-calc.module2700.IFoo")
class IFoo(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="baz")
    def baz(self) -> jsii.Number:
        ...

    @jsii.member(jsii_name="bar")
    def bar(self) -> builtins.str:
        ...


class _IFooProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.module2700.IFoo"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="baz")
    def baz(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "baz"))

    @jsii.member(jsii_name="bar")
    def bar(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "bar", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IFoo).__jsii_proxy_class__ = lambda : _IFooProxy


@jsii.implements(IFoo)
class Base(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.module2700.Base"):
    def __init__(self) -> None:
        jsii.create(Base, self, [])

    @jsii.member(jsii_name="bar")
    def bar(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "bar", []))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="baz")
    def baz(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "baz"))


@jsii.implements(IFoo)
class Derived(Base, metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.module2700.Derived"):
    def __init__(self) -> None:
        jsii.create(Derived, self, [])

    @jsii.member(jsii_name="zoo")
    def zoo(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "zoo", []))


__all__ = [
    "Base",
    "Derived",
    "IFoo",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/module2702/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *

import scope.jsii_calc_base


class Class1(
    scope.jsii_calc_base.Base,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.module2702.Class1",
):
    def __init__(self) -> None:
        jsii.create(Class1, self, [])

    @jsii.member(jsii_name="base")
    def base(self) -> None:
        return typing.cast(None, jsii.invoke(self, "base", []))


class Class2(
    scope.jsii_calc_base.Base,
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.module2702.Class2",
):
    def __init__(self) -> None:
        jsii.create(Class2, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="base")
    def base(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "base"))


@jsii.implements(scope.jsii_calc_base.IBaseInterface)
class Class3(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.module2702.Class3"):
    def __init__(self) -> None:
        jsii.create(Class3, self, [])

    @jsii.member(jsii_name="bar")
    def bar(self) -> None:
        return typing.cast(None, jsii.invoke(self, "bar", []))

    @jsii.member(jsii_name="foo")
    def foo(self) -> None:
        return typing.cast(None, jsii.invoke(self, "foo", []))

    @jsii.member(jsii_name="iBaseInterface")
    def i_base_interface(self) -> None:
        return typing.cast(None, jsii.invoke(self, "iBaseInterface", []))


@jsii.interface(jsii_type="jsii-calc.module2702.IBaz")
class IBaz(scope.jsii_calc_base.IBaseInterface, typing_extensions.Protocol):
    @jsii.member(jsii_name="bazMethod")
    def baz_method(self) -> None:
        ...


class _IBazProxy(
    jsii.proxy_for(scope.jsii_calc_base.IBaseInterface) # type: ignore[misc]
):
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.module2702.IBaz"

    @jsii.member(jsii_name="bazMethod")
    def baz_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "bazMethod", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IBaz).__jsii_proxy_class__ = lambda : _IBazProxy


@jsii.interface(jsii_type="jsii-calc.module2702.IConstruct")
class IConstruct(typing_extensions.Protocol):
    @jsii.member(jsii_name="constructMethod")
    def construct_method(self) -> None:
        ...


class _IConstructProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.module2702.IConstruct"

    @jsii.member(jsii_name="constructMethod")
    def construct_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "constructMethod", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IConstruct).__jsii_proxy_class__ = lambda : _IConstructProxy


@jsii.interface(jsii_type="jsii-calc.module2702.IFoo")
class IFoo(scope.jsii_calc_base.IBaseInterface, typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="iBaseInterface")
    def i_base_interface(self) -> builtins.str:
        ...


class _IFooProxy(
    jsii.proxy_for(scope.jsii_calc_base.IBaseInterface) # type: ignore[misc]
):
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.module2702.IFoo"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="iBaseInterface")
    def i_base_interface(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "iBaseInterface"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IFoo).__jsii_proxy_class__ = lambda : _IFooProxy


@jsii.interface(jsii_type="jsii-calc.module2702.IResource")
class IResource(IConstruct, typing_extensions.Protocol):
    @jsii.member(jsii_name="resourceMethod")
    def resource_method(self) -> None:
        ...


class _IResourceProxy(
    jsii.proxy_for(IConstruct) # type: ignore[misc]
):
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.module2702.IResource"

    @jsii.member(jsii_name="resourceMethod")
    def resource_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resourceMethod", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IResource).__jsii_proxy_class__ = lambda : _IResourceProxy


@jsii.interface(jsii_type="jsii-calc.module2702.IVpc")
class IVpc(IResource, typing_extensions.Protocol):
    @jsii.member(jsii_name="vpcMethod")
    def vpc_method(self) -> None:
        ...


class _IVpcProxy(
    jsii.proxy_for(IResource) # type: ignore[misc]
):
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.module2702.IVpc"

    @jsii.member(jsii_name="vpcMethod")
    def vpc_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "vpcMethod", []))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IVpc).__jsii_proxy_class__ = lambda : _IVpcProxy


@jsii.implements(IBaz)
class Baz(Class3, metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.module2702.Baz"):
    def __init__(self) -> None:
        jsii.create(Baz, self, [])

    @jsii.member(jsii_name="bazMethod")
    def baz_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "bazMethod", []))


@jsii.implements(IConstruct)
class Construct(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.module2702.Construct"):
    def __init__(self) -> None:
        jsii.create(Construct, self, [])

    @jsii.member(jsii_name="constructMethod")
    def construct_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "constructMethod", []))


@jsii.implements(IResource)
class Resource(
    Construct,
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.module2702.Resource",
):
    def __init__(self) -> None:
        jsii.create(Resource, self, [])

    @jsii.member(jsii_name="resourceMethod")
    def resource_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resourceMethod", []))


class _ResourceProxy(Resource):
    pass

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, Resource).__jsii_proxy_class__ = lambda : _ResourceProxy


@jsii.implements(IVpc)
class Vpc(Resource, metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.module2702.Vpc"):
    def __init__(self) -> None:
        jsii.create(Vpc, self, [])

    @jsii.member(jsii_name="vpcMethod")
    def vpc_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "vpcMethod", []))


__all__ = [
    "Baz",
    "Class1",
    "Class2",
    "Class3",
    "Construct",
    "IBaz",
    "IConstruct",
    "IFoo",
    "IResource",
    "IVpc",
    "Resource",
    "Vpc",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/nodirect/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *

__all__: typing.List[typing.Any] = []

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/nodirect/sub1/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *


class TypeFromSub1(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.nodirect.sub1.TypeFromSub1",
):
    def __init__(self) -> None:
        jsii.create(TypeFromSub1, self, [])

    @jsii.member(jsii_name="sub1")
    def sub1(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "sub1", []))


__all__ = [
    "TypeFromSub1",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/nodirect/sub2/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *


class TypeFromSub2(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.nodirect.sub2.TypeFromSub2",
):
    def __init__(self) -> None:
        jsii.create(TypeFromSub2, self, [])

    @jsii.member(jsii_name="sub2")
    def sub2(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.invoke(self, "sub2", []))


__all__ = [
    "TypeFromSub2",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/onlystatic/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *


class OnlyStaticMethods(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.onlystatic.OnlyStaticMethods",
):
    '''Test for https://github.com/aws/jsii/issues/2617.'''

    @jsii.member(jsii_name="staticMethod") # type: ignore[misc]
    @builtins.classmethod
    def static_method(cls) -> builtins.str:
        return typing.cast(builtins.str, jsii.sinvoke(cls, "staticMethod", []))


__all__ = [
    "OnlyStaticMethods",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/py.typed 1`] = `


`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/python_self/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *


class ClassWithSelf(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.PythonSelf.ClassWithSelf",
):
    def __init__(self_, self: builtins.str) -> None:
        '''
        :param self: -
        '''
        jsii.create(ClassWithSelf, self_, [self])

    @jsii.member(jsii_name="method")
    def method(self_, self: jsii.Number) -> builtins.str:
        '''
        :param self: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self_, "method", [self]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="self")
    def self(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "self"))


class ClassWithSelfKwarg(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.PythonSelf.ClassWithSelfKwarg",
):
    def __init__(self_, *, self: builtins.str) -> None:
        '''
        :param self: 
        '''
        props = StructWithSelf(self=self)

        jsii.create(ClassWithSelfKwarg, self_, [props])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="props")
    def props(self) -> "StructWithSelf":
        return typing.cast("StructWithSelf", jsii.get(self, "props"))


@jsii.interface(jsii_type="jsii-calc.PythonSelf.IInterfaceWithSelf")
class IInterfaceWithSelf(typing_extensions.Protocol):
    @jsii.member(jsii_name="method")
    def method(self_, self: jsii.Number) -> builtins.str:
        '''
        :param self: -
        '''
        ...


class _IInterfaceWithSelfProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.PythonSelf.IInterfaceWithSelf"

    @jsii.member(jsii_name="method")
    def method(self_, self: jsii.Number) -> builtins.str:
        '''
        :param self: -
        '''
        return typing.cast(builtins.str, jsii.invoke(self_, "method", [self]))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IInterfaceWithSelf).__jsii_proxy_class__ = lambda : _IInterfaceWithSelfProxy


@jsii.data_type(
    jsii_type="jsii-calc.PythonSelf.StructWithSelf",
    jsii_struct_bases=[],
    name_mapping={"self": "self"},
)
class StructWithSelf:
    def __init__(self_, *, self: builtins.str) -> None:
        '''
        :param self: 
        '''
        self_._values: typing.Dict[str, typing.Any] = {
            "self": self,
        }

    @builtins.property
    def self(self) -> builtins.str:
        result = self._values.get("self")
        assert result is not None, "Required property 'self' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "StructWithSelf(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "ClassWithSelf",
    "ClassWithSelfKwarg",
    "IInterfaceWithSelf",
    "StructWithSelf",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/__init__.py 1`] = `
'''
# Read you, read me

This is the readme of the \`jsii-calc.submodule\` module.
'''
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from .._jsii import *

from .. import AllTypes as _AllTypes_b08307c5
from .child import (
    Awesomeness as _Awesomeness_d37a24df,
    Goodness as _Goodness_2df26737,
    SomeEnum as _SomeEnum_b2e41d92,
    SomeStruct as _SomeStruct_91627123,
)
from .nested_submodule.deeply_nested import INamespaced as _INamespaced_e2f386ad
from .param import SpecialParameter as _SpecialParameter_5bbf34a2


@jsii.data_type(
    jsii_type="jsii-calc.submodule.Default",
    jsii_struct_bases=[],
    name_mapping={"foo": "foo"},
)
class Default:
    def __init__(self, *, foo: jsii.Number) -> None:
        '''A struct named "Default".

        :param foo: 

        :see: https://github.com/aws/jsii/issues/2637
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "foo": foo,
        }

    @builtins.property
    def foo(self) -> jsii.Number:
        result = self._values.get("foo")
        assert result is not None, "Required property 'foo' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Default(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(_INamespaced_e2f386ad)
class MyClass(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.submodule.MyClass"):
    def __init__(self, *, prop: _SomeEnum_b2e41d92) -> None:
        '''
        :param prop: 
        '''
        props = _SomeStruct_91627123(prop=prop)

        jsii.create(MyClass, self, [props])

    @jsii.member(jsii_name="methodWithSpecialParam")
    def method_with_special_param(self, *, value: builtins.str) -> builtins.str:
        '''
        :param value: 
        '''
        param = _SpecialParameter_5bbf34a2(value=value)

        return typing.cast(builtins.str, jsii.invoke(self, "methodWithSpecialParam", [param]))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="awesomeness")
    def awesomeness(self) -> _Awesomeness_d37a24df:
        return typing.cast(_Awesomeness_d37a24df, jsii.get(self, "awesomeness"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="definedAt")
    def defined_at(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "definedAt"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="goodness")
    def goodness(self) -> _Goodness_2df26737:
        return typing.cast(_Goodness_2df26737, jsii.get(self, "goodness"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="props")
    def props(self) -> _SomeStruct_91627123:
        return typing.cast(_SomeStruct_91627123, jsii.get(self, "props"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="allTypes")
    def all_types(self) -> typing.Optional[_AllTypes_b08307c5]:
        return typing.cast(typing.Optional[_AllTypes_b08307c5], jsii.get(self, "allTypes"))

    @all_types.setter
    def all_types(self, value: typing.Optional[_AllTypes_b08307c5]) -> None:
        jsii.set(self, "allTypes", value)


__all__ = [
    "Default",
    "MyClass",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/back_references/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *

from .. import MyClass as _MyClass_a2fdc0b6


@jsii.data_type(
    jsii_type="jsii-calc.submodule.back_references.MyClassReference",
    jsii_struct_bases=[],
    name_mapping={"reference": "reference"},
)
class MyClassReference:
    def __init__(self, *, reference: _MyClass_a2fdc0b6) -> None:
        '''
        :param reference: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "reference": reference,
        }

    @builtins.property
    def reference(self) -> _MyClass_a2fdc0b6:
        result = self._values.get("reference")
        assert result is not None, "Required property 'reference' is missing"
        return typing.cast(_MyClass_a2fdc0b6, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MyClassReference(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "MyClassReference",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/child/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *


@jsii.enum(jsii_type="jsii-calc.submodule.child.Awesomeness")
class Awesomeness(enum.Enum):
    AWESOME = "AWESOME"
    '''It was awesome!'''


@jsii.enum(jsii_type="jsii-calc.submodule.child.Goodness")
class Goodness(enum.Enum):
    PRETTY_GOOD = "PRETTY_GOOD"
    '''It's pretty good.'''
    REALLY_GOOD = "REALLY_GOOD"
    '''It's really good.'''
    AMAZINGLY_GOOD = "AMAZINGLY_GOOD"
    '''It's amazingly good.'''


class InnerClass(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.submodule.child.InnerClass",
):
    def __init__(self) -> None:
        jsii.create(InnerClass, self, [])

    @jsii.python.classproperty # type: ignore[misc]
    @jsii.member(jsii_name="staticProp")
    def STATIC_PROP(cls) -> "SomeStruct":
        return typing.cast("SomeStruct", jsii.sget(cls, "staticProp"))


class OuterClass(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.submodule.child.OuterClass",
):
    '''Checks that classes can self-reference during initialization.

    :see: : https://github.com/aws/jsii/pull/1706
    '''

    def __init__(self) -> None:
        jsii.create(OuterClass, self, [])

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="innerClass")
    def inner_class(self) -> InnerClass:
        return typing.cast(InnerClass, jsii.get(self, "innerClass"))


@jsii.enum(jsii_type="jsii-calc.submodule.child.SomeEnum")
class SomeEnum(enum.Enum):
    SOME = "SOME"


@jsii.data_type(
    jsii_type="jsii-calc.submodule.child.SomeStruct",
    jsii_struct_bases=[],
    name_mapping={"prop": "prop"},
)
class SomeStruct:
    def __init__(self, *, prop: SomeEnum) -> None:
        '''
        :param prop: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "prop": prop,
        }

    @builtins.property
    def prop(self) -> SomeEnum:
        result = self._values.get("prop")
        assert result is not None, "Required property 'prop' is missing"
        return typing.cast(SomeEnum, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SomeStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.submodule.child.Structure",
    jsii_struct_bases=[],
    name_mapping={"bool": "bool"},
)
class Structure:
    def __init__(self, *, bool: builtins.bool) -> None:
        '''
        :param bool: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "bool": bool,
        }

    @builtins.property
    def bool(self) -> builtins.bool:
        result = self._values.get("bool")
        assert result is not None, "Required property 'bool' is missing"
        return typing.cast(builtins.bool, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Structure(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="jsii-calc.submodule.child.KwargsProps",
    jsii_struct_bases=[SomeStruct],
    name_mapping={"prop": "prop", "extra": "extra"},
)
class KwargsProps(SomeStruct):
    def __init__(
        self,
        *,
        prop: SomeEnum,
        extra: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param prop: 
        :param extra: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "prop": prop,
        }
        if extra is not None:
            self._values["extra"] = extra

    @builtins.property
    def prop(self) -> SomeEnum:
        result = self._values.get("prop")
        assert result is not None, "Required property 'prop' is missing"
        return typing.cast(SomeEnum, result)

    @builtins.property
    def extra(self) -> typing.Optional[builtins.str]:
        result = self._values.get("extra")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "KwargsProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "Awesomeness",
    "Goodness",
    "InnerClass",
    "KwargsProps",
    "OuterClass",
    "SomeEnum",
    "SomeStruct",
    "Structure",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/isolated/__init__.py 1`] = `
'''
# Read you, read me

This is the readme of the \`jsii-calc.submodule.isolated\` module.
'''
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *

from ..child import (
    KwargsProps as _KwargsProps_c7855dcf, SomeEnum as _SomeEnum_b2e41d92
)


class Kwargs(metaclass=jsii.JSIIMeta, jsii_type="jsii-calc.submodule.isolated.Kwargs"):
    '''Ensures imports are correctly registered for kwargs lifted properties from super-structs.'''

    @jsii.member(jsii_name="method") # type: ignore[misc]
    @builtins.classmethod
    def method(
        cls,
        *,
        extra: typing.Optional[builtins.str] = None,
        prop: _SomeEnum_b2e41d92,
    ) -> builtins.bool:
        '''
        :param extra: 
        :param prop: 
        '''
        props = _KwargsProps_c7855dcf(extra=extra, prop=prop)

        return typing.cast(builtins.bool, jsii.sinvoke(cls, "method", [props]))


__all__ = [
    "Kwargs",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/nested_submodule/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *

from ..child import Goodness as _Goodness_2df26737
from .deeply_nested import INamespaced as _INamespaced_e2f386ad


@jsii.implements(_INamespaced_e2f386ad)
class Namespaced(
    metaclass=jsii.JSIIAbstractClass,
    jsii_type="jsii-calc.submodule.nested_submodule.Namespaced",
):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="definedAt")
    def defined_at(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "definedAt"))

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="goodness")
    @abc.abstractmethod
    def goodness(self) -> _Goodness_2df26737:
        ...


class _NamespacedProxy(Namespaced):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="goodness")
    def goodness(self) -> _Goodness_2df26737:
        return typing.cast(_Goodness_2df26737, jsii.get(self, "goodness"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the abstract class
typing.cast(typing.Any, Namespaced).__jsii_proxy_class__ = lambda : _NamespacedProxy


__all__ = [
    "Namespaced",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/nested_submodule/deeply_nested/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ...._jsii import *


@jsii.interface(
    jsii_type="jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced"
)
class INamespaced(typing_extensions.Protocol):
    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="definedAt")
    def defined_at(self) -> builtins.str:
        ...


class _INamespacedProxy:
    __jsii_type__: typing.ClassVar[str] = "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced"

    @builtins.property # type: ignore[misc]
    @jsii.member(jsii_name="definedAt")
    def defined_at(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "definedAt"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, INamespaced).__jsii_proxy_class__ = lambda : _INamespacedProxy


__all__ = [
    "INamespaced",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/param/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *


@jsii.data_type(
    jsii_type="jsii-calc.submodule.param.SpecialParameter",
    jsii_struct_bases=[],
    name_mapping={"value": "value"},
)
class SpecialParameter:
    def __init__(self, *, value: builtins.str) -> None:
        '''
        :param value: 
        '''
        self._values: typing.Dict[str, typing.Any] = {
            "value": value,
        }

    @builtins.property
    def value(self) -> builtins.str:
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SpecialParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


__all__ = [
    "SpecialParameter",
]

publication.publish()

`;

exports[`Generated code for "jsii-calc": <outDir>/python/src/jsii_calc/submodule/returnsparam/__init__.py 1`] = `
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from ..._jsii import *

from ..param import SpecialParameter as _SpecialParameter_5bbf34a2


class ReturnsSpecialParameter(
    metaclass=jsii.JSIIMeta,
    jsii_type="jsii-calc.submodule.returnsparam.ReturnsSpecialParameter",
):
    def __init__(self) -> None:
        jsii.create(ReturnsSpecialParameter, self, [])

    @jsii.member(jsii_name="returnsSpecialParam")
    def returns_special_param(self) -> _SpecialParameter_5bbf34a2:
        return typing.cast(_SpecialParameter_5bbf34a2, jsii.invoke(self, "returnsSpecialParam", []))


__all__ = [
    "ReturnsSpecialParameter",
]

publication.publish()

`;
