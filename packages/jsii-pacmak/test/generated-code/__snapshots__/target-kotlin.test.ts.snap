// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/ 1`] = `
<root>
 ┗━ 📁 kotlin
    ┣━ 📄 build.gradle
    ┗━ 📁 src
       ┗━ 📁 main
          ┣━ 📁 kotlin
          ┃  ┗━ 📁 software
          ┃     ┗━ 📁 amazon
          ┃        ┗━ 📁 jsii
          ┃           ┗━ 📁 tests
          ┃              ┗━ 📁 kotlin
          ┃                 ┗━ 📁 calculator
          ┃                    ┗━ 📁 base
          ┃                       ┣━ 📄 $Module.kt
          ┃                       ┣━ 📄 Base.kt
          ┃                       ┣━ 📄 BaseProps.kt
          ┃                       ┗━ 📄 IBaseInterface.kt
          ┗━ 📁 resources
             ┗━ 📁 @scope
                ┗━ 📁 jsii-calc-base
                   ┗━ 📄 jsii-calc-base@0.0.0.jsii.tgz
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/kotlin/build.gradle 1`] = `
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id "java-library"
    id 'org.jetbrains.dokka' version '0.10.1'
    id "maven-publish"
}
repositories {
    int index = 0
    while (project.hasProperty("customRepo" + index)) {
        maven { url project.property("customRepo" + index) }
        index += 1
    }
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/dokka" }
}
dependencies {
    api "software.amazon.jsii:jsii-runtime:0.0.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    api "software.amazon.jsii.tests.kotlin:calculator-base-of-base:0.0.0"
}
dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/dokka"
}
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = "sources"
}
task dokkaJar(type: Jar) {
    from(tasks.dokka)
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    archiveClassifier = "javadoc"
}
publishing {
    repositories {
        maven {
            url project.property("deployRepo")
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = "software.amazon.jsii.tests.kotlin"
            artifactId = "calculator-base"
            version = "0.0.0"

            from components.kotlin
            artifact sourceJar
            artifact dokkaJar
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/base/$Module.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.base

class \`$Module\`: software.amazon.jsii.JsiiModule("@scope/jsii-calc-base", "0.0.0", \`$Module\`::class.java, "jsii-calc-base@0.0.0.jsii.tgz") {
    override fun resolveClass(fqn: String?): Class<*> {
        return when (fqn) {
            "@scope/jsii-calc-base.Base" -> software.amazon.jsii.tests.kotlin.calculator.base.Base::class.java
            "@scope/jsii-calc-base.BaseProps" -> software.amazon.jsii.tests.kotlin.calculator.base.BaseProps::class.java
            "@scope/jsii-calc-base.IBaseInterface" -> software.amazon.jsii.tests.kotlin.calculator.base.IBaseInterface::class.java
            else -> throw ClassNotFoundException("Unknown JSII type: $fqn")
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/base/Base.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.base

/**
 * A base class.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.base.\`$Module\`::class, fqn = "@scope/jsii-calc-base.Base")
abstract class Base : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    /**
     * @return the name of the class (to verify native type names are created for derived classes).
     */
    open fun typeName(): kotlin.Any {
        return this.jsiiCall("typeName", kotlin.Any::class.java) ?: error("Method 'typeName()' returned null value")
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.base.Base {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * @return the name of the class (to verify native type names are created for derived classes).
         */
        override fun typeName(): kotlin.Any {
            return this.jsiiCall("typeName", kotlin.Any::class.java) ?: error("Method 'typeName()' returned null value")
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/base/BaseProps.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.base

@javax.annotation.Generated("jsii-pacmak")
interface BaseProps : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.baseofbase.VeryBaseProps {
    val bar: kotlin.String

    class Builder {
        var foo: software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very? = null

        var bar: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.base.BaseProps {
            val foo = this.foo ?: kotlin.error("Value for property 'foo' must be specified")
            val bar = this.bar ?: kotlin.error("Value for property 'bar' must be specified")
            return \`Jsii$Proxy\`(foo, bar)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.base.BaseProps {
        override val foo: software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very

        override val bar: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.foo = this.jsiiCall("foo", software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very::class.java) ?: error("'foo' should be present")
            this.bar = this.jsiiCall("bar", kotlin.String::class.java) ?: error("'bar' should be present")
        }

        constructor(foo: software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very, bar: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.foo = foo
            this.bar = bar
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.base.BaseProps
            if (foo != other.foo) return false
            if (bar != other.bar) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.foo.hashCode()
            result = 31 * result + (this.bar.hashCode())
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("foo", om.valueToTree(this.foo))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("bar", om.valueToTree(this.bar))
            return obj
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/base/IBaseInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.base

@javax.annotation.Generated("jsii-pacmak")
interface IBaseInterface : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.baseofbase.IVeryBaseInterface {
    fun bar()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.base.IBaseInterface {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        override fun foo() {
            this.jsiiCall("foo", kotlin.Unit::class.java) ?: error("Method 'foo()' returned null value")
        }

        override fun bar() {
            this.jsiiCall("bar", kotlin.Unit::class.java) ?: error("Method 'bar()' returned null value")
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/kotlin/src/main/resources/@scope/jsii-calc-base/jsii-calc-base@0.0.0.jsii.tgz 1`] = `kotlin/src/main/resources/@scope/jsii-calc-base/jsii-calc-base@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/ 1`] = `
<root>
 ┗━ 📁 kotlin
    ┣━ 📄 build.gradle
    ┗━ 📁 src
       ┗━ 📁 main
          ┣━ 📁 kotlin
          ┃  ┗━ 📁 software
          ┃     ┗━ 📁 amazon
          ┃        ┗━ 📁 jsii
          ┃           ┗━ 📁 tests
          ┃              ┗━ 📁 kotlin
          ┃                 ┗━ 📁 calculator
          ┃                    ┗━ 📁 baseofbase
          ┃                       ┣━ 📄 $Module.kt
          ┃                       ┣━ 📄 IVeryBaseInterface.kt
          ┃                       ┣━ 📄 StaticConsumer.kt
          ┃                       ┣━ 📄 Very.kt
          ┃                       ┗━ 📄 VeryBaseProps.kt
          ┗━ 📁 resources
             ┗━ 📁 @scope
                ┗━ 📁 jsii-calc-base-of-base
                   ┗━ 📄 jsii-calc-base-of-base@0.0.0.jsii.tgz
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/kotlin/build.gradle 1`] = `
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id "java-library"
    id 'org.jetbrains.dokka' version '0.10.1'
    id "maven-publish"
}
repositories {
    int index = 0
    while (project.hasProperty("customRepo" + index)) {
        maven { url project.property("customRepo" + index) }
        index += 1
    }
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/dokka" }
}
dependencies {
    api "software.amazon.jsii:jsii-runtime:0.0.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
}
dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/dokka"
}
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = "sources"
}
task dokkaJar(type: Jar) {
    from(tasks.dokka)
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    archiveClassifier = "javadoc"
}
publishing {
    repositories {
        maven {
            url project.property("deployRepo")
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = "software.amazon.jsii.tests.kotlin"
            artifactId = "calculator-base-of-base"
            version = "0.0.0"

            from components.kotlin
            artifact sourceJar
            artifact dokkaJar
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/baseofbase/$Module.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.baseofbase

class \`$Module\`: software.amazon.jsii.JsiiModule("@scope/jsii-calc-base-of-base", "0.0.0", \`$Module\`::class.java, "jsii-calc-base-of-base@0.0.0.jsii.tgz") {
    override fun resolveClass(fqn: String?): Class<*> {
        return when (fqn) {
            "@scope/jsii-calc-base-of-base.IVeryBaseInterface" -> software.amazon.jsii.tests.kotlin.calculator.baseofbase.IVeryBaseInterface::class.java
            "@scope/jsii-calc-base-of-base.StaticConsumer" -> software.amazon.jsii.tests.kotlin.calculator.baseofbase.StaticConsumer::class.java
            "@scope/jsii-calc-base-of-base.Very" -> software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very::class.java
            "@scope/jsii-calc-base-of-base.VeryBaseProps" -> software.amazon.jsii.tests.kotlin.calculator.baseofbase.VeryBaseProps::class.java
            else -> throw ClassNotFoundException("Unknown JSII type: $fqn")
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/baseofbase/IVeryBaseInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.baseofbase

@javax.annotation.Generated("jsii-pacmak")
interface IVeryBaseInterface : software.amazon.jsii.JsiiSerializable {
    fun foo()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.baseofbase.IVeryBaseInterface {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        override fun foo() {
            this.jsiiCall("foo", kotlin.Unit::class.java) ?: error("Method 'foo()' returned null value")
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/baseofbase/StaticConsumer.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.baseofbase

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.baseofbase.\`$Module\`::class, fqn = "@scope/jsii-calc-base-of-base.StaticConsumer")
open class StaticConsumer : software.amazon.jsii.JsiiObject {
    companion object {
        fun consume(vararg _args: kotlin.Any) {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                _args
            )
            software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.baseofbase.StaticConsumer::class.java, "consume", kotlin.Unit::class.java, args) ?: error("Method 'consume()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/baseofbase/Very.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.baseofbase

/**
 * Something here.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.baseofbase.\`$Module\`::class, fqn = "@scope/jsii-calc-base-of-base.Very")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
open class Very : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    open fun hey(): kotlin.Number {
        return this.jsiiCall("hey", kotlin.Number::class.java) ?: error("Method 'hey()' returned null value")
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/baseofbase/VeryBaseProps.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.baseofbase

@javax.annotation.Generated("jsii-pacmak")
interface VeryBaseProps : software.amazon.jsii.JsiiSerializable {
    val foo: software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very

    class Builder {
        var foo: software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.baseofbase.VeryBaseProps {
            val foo = this.foo ?: kotlin.error("Value for property 'foo' must be specified")
            return \`Jsii$Proxy\`(foo)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.baseofbase.VeryBaseProps {
        override val foo: software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.foo = this.jsiiCall("foo", software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very::class.java) ?: error("'foo' should be present")
        }

        constructor(foo: software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.foo = foo
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.baseofbase.VeryBaseProps
            if (foo != other.foo) return false
            return true
        }

        override fun hashCode(): Int {
            return this.foo.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("foo", om.valueToTree(this.foo))
            return obj
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/kotlin/src/main/resources/@scope/jsii-calc-base-of-base/jsii-calc-base-of-base@0.0.0.jsii.tgz 1`] = `kotlin/src/main/resources/@scope/jsii-calc-base-of-base/jsii-calc-base-of-base@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/ 1`] = `
<root>
 ┗━ 📁 kotlin
    ┣━ 📄 build.gradle
    ┗━ 📁 src
       ┗━ 📁 main
          ┣━ 📁 kotlin
          ┃  ┗━ 📁 software
          ┃     ┗━ 📁 amazon
          ┃        ┗━ 📁 jsii
          ┃           ┗━ 📁 tests
          ┃              ┗━ 📁 kotlin
          ┃                 ┗━ 📁 calculator
          ┃                    ┗━ 📁 lib
          ┃                       ┣━ 📄 $Module.kt
          ┃                       ┣━ 📄 EnumFromScopedModule.kt
          ┃                       ┣━ 📄 IDoublable.kt
          ┃                       ┣━ 📄 IFriendly.kt
          ┃                       ┣━ 📄 IThreeLevelsInterface.kt
          ┃                       ┣━ 📄 MyFirstStruct.kt
          ┃                       ┣━ 📄 Number.kt
          ┃                       ┣━ 📄 NumericValue.kt
          ┃                       ┣━ 📄 Operation.kt
          ┃                       ┣━ 📄 StructWithOnlyOptionals.kt
          ┃                       ┗━ 📁 submodule
          ┃                          ┣━ 📄 IReflectable.kt
          ┃                          ┣━ 📄 NestingClass.kt
          ┃                          ┣━ 📄 ReflectableEntry.kt
          ┃                          ┗━ 📄 Reflector.kt
          ┗━ 📁 resources
             ┗━ 📁 @scope
                ┗━ 📁 jsii-calc-lib
                   ┗━ 📄 jsii-calc-lib@0.0.0.jsii.tgz
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/build.gradle 1`] = `
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id "java-library"
    id 'org.jetbrains.dokka' version '0.10.1'
    id "maven-publish"
}
repositories {
    int index = 0
    while (project.hasProperty("customRepo" + index)) {
        maven { url project.property("customRepo" + index) }
        index += 1
    }
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/dokka" }
}
dependencies {
    api "software.amazon.jsii:jsii-runtime:0.0.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    api "software.amazon.jsii.tests.kotlin:calculator-base:0.0.0"
    api "software.amazon.jsii.tests.kotlin:calculator-base-of-base:0.0.0"
}
dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/dokka"
}
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = "sources"
}
task dokkaJar(type: Jar) {
    from(tasks.dokka)
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    archiveClassifier = "javadoc"
}
publishing {
    repositories {
        maven {
            url project.property("deployRepo")
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = "software.amazon.jsii.tests.kotlin"
            artifactId = "calculator-lib"
            version = "0.0.0.DEVPREVIEW"

            from components.kotlin
            artifact sourceJar
            artifact dokkaJar
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/$Module.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib

class \`$Module\`: software.amazon.jsii.JsiiModule("@scope/jsii-calc-lib", "0.0.0", \`$Module\`::class.java, "jsii-calc-lib@0.0.0.jsii.tgz") {
    override fun resolveClass(fqn: String?): Class<*> {
        return when (fqn) {
            "@scope/jsii-calc-lib.EnumFromScopedModule" -> software.amazon.jsii.tests.kotlin.calculator.lib.EnumFromScopedModule::class.java
            "@scope/jsii-calc-lib.IDoublable" -> software.amazon.jsii.tests.kotlin.calculator.lib.IDoublable::class.java
            "@scope/jsii-calc-lib.IFriendly" -> software.amazon.jsii.tests.kotlin.calculator.lib.IFriendly::class.java
            "@scope/jsii-calc-lib.IThreeLevelsInterface" -> software.amazon.jsii.tests.kotlin.calculator.lib.IThreeLevelsInterface::class.java
            "@scope/jsii-calc-lib.MyFirstStruct" -> software.amazon.jsii.tests.kotlin.calculator.lib.MyFirstStruct::class.java
            "@scope/jsii-calc-lib.Number" -> software.amazon.jsii.tests.kotlin.calculator.lib.Number::class.java
            "@scope/jsii-calc-lib.NumericValue" -> software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java
            "@scope/jsii-calc-lib.Operation" -> software.amazon.jsii.tests.kotlin.calculator.lib.Operation::class.java
            "@scope/jsii-calc-lib.StructWithOnlyOptionals" -> software.amazon.jsii.tests.kotlin.calculator.lib.StructWithOnlyOptionals::class.java
            "@scope/jsii-calc-lib.submodule.IReflectable" -> software.amazon.jsii.tests.kotlin.calculator.lib.submodule.IReflectable::class.java
            "@scope/jsii-calc-lib.submodule.NestingClass" -> software.amazon.jsii.tests.kotlin.calculator.lib.submodule.NestingClass::class.java
            "@scope/jsii-calc-lib.submodule.ReflectableEntry" -> software.amazon.jsii.tests.kotlin.calculator.lib.submodule.ReflectableEntry::class.java
            "@scope/jsii-calc-lib.submodule.Reflector" -> software.amazon.jsii.tests.kotlin.calculator.lib.submodule.Reflector::class.java
            else -> throw ClassNotFoundException("Unknown JSII type: $fqn")
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/EnumFromScopedModule.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib

@javax.annotation.Generated("jsii-pacmak")
/**
 * Check that enums from \\@scoped packages can be references.
 * 
 * See awslabs/jsii#138
 */
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
enum class EnumFromScopedModule {
    @Deprecated("Declaration is deprecated.")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    VALUE1,

    @Deprecated("Declaration is deprecated.")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    VALUE2,
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/IDoublable.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib

/**
 * The general contract for a concrete number.
 */
@javax.annotation.Generated("jsii-pacmak")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
interface IDoublable : software.amazon.jsii.JsiiSerializable {
    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    val doubleValue: kotlin.Number

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.lib.IDoublable {
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val doubleValue: kotlin.Number
            get() {
                return this.jsiiGet("doubleValue", kotlin.Number::class.java) ?: error("'doubleValue' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/IFriendly.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib

/**
 * Applies to classes that are considered friendly.
 * 
 * These classes can be greeted with
 * a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.
 */
@javax.annotation.Generated("jsii-pacmak")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
interface IFriendly : software.amazon.jsii.JsiiSerializable {
    /**
     * Say hello!
     */
    @Deprecated("Declaration is deprecated.")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    fun hello(): kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.lib.IFriendly {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * Say hello!
         */
        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun hello(): kotlin.String {
            return this.jsiiCall("hello", kotlin.String::class.java) ?: error("Method 'hello()' returned null value")
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/IThreeLevelsInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib

/**
 * Interface that inherits from packages 2 levels up the tree.
 * 
 * Their presence validates that .NET/Java/jsii-reflect can track all fields
 * far enough up the tree.
 */
@javax.annotation.Generated("jsii-pacmak")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
interface IThreeLevelsInterface : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.base.IBaseInterface {
    @Deprecated("Declaration is deprecated.")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    fun baz()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.lib.IThreeLevelsInterface {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun foo() {
            this.jsiiCall("foo", kotlin.Unit::class.java) ?: error("Method 'foo()' returned null value")
        }

        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun bar() {
            this.jsiiCall("bar", kotlin.Unit::class.java) ?: error("Method 'bar()' returned null value")
        }

        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun baz() {
            this.jsiiCall("baz", kotlin.Unit::class.java) ?: error("Method 'baz()' returned null value")
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/MyFirstStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib

/**
 * This is the first struct we have created in jsii.
 */
@javax.annotation.Generated("jsii-pacmak")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
interface MyFirstStruct : software.amazon.jsii.JsiiSerializable {
    /**
     * An awesome number value.
     */
    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    val anumber: kotlin.Number

    /**
     * A string value.
     */
    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    val astring: kotlin.String

    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    val firstOptional: kotlin.collections.List<kotlin.String>?

    class Builder {
        /**
         * An awesome number value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var anumber: kotlin.Number? = null

        /**
         * A string value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var astring: kotlin.String? = null

        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var firstOptional: kotlin.collections.List<kotlin.String>? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.lib.MyFirstStruct {
            val anumber = this.anumber ?: kotlin.error("Value for property 'anumber' must be specified")
            val astring = this.astring ?: kotlin.error("Value for property 'astring' must be specified")
            val firstOptional = this.firstOptional
            return \`Jsii$Proxy\`(anumber, astring, firstOptional)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.lib.MyFirstStruct {
        /**
         * An awesome number value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val anumber: kotlin.Number

        /**
         * A string value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val astring: kotlin.String

        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val firstOptional: kotlin.collections.List<kotlin.String>?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.anumber = this.jsiiCall("anumber", kotlin.Number::class.java) ?: error("'anumber' should be present")
            this.astring = this.jsiiCall("astring", kotlin.String::class.java) ?: error("'astring' should be present")
            this.firstOptional = this.jsiiCall("firstOptional", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String>?
        }

        constructor(anumber: kotlin.Number, astring: kotlin.String, firstOptional: kotlin.collections.List<kotlin.String>?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.anumber = anumber
            this.astring = astring
            this.firstOptional = firstOptional
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.lib.MyFirstStruct
            if (anumber != other.anumber) return false
            if (astring != other.astring) return false
            if (firstOptional != other.firstOptional) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.anumber.hashCode()
            result = 31 * result + (this.astring.hashCode())
            result = 31 * result + (this.firstOptional?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("anumber", om.valueToTree(this.anumber))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("astring", om.valueToTree(this.astring))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("firstOptional", om.valueToTree(this.firstOptional))
            return obj
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/Number.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib

/**
 * Represents a concrete number.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.lib.\`$Module\`::class, fqn = "@scope/jsii-calc-lib.Number")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
open class Number : software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue, software.amazon.jsii.tests.kotlin.calculator.lib.IDoublable {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    /**
     * Creates a Number object.
     */
    constructor(value: kotlin.Number) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    /**
     * The number multiplied by 2.
     */
    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    open override val doubleValue: kotlin.Number
        get() {
            return this.jsiiGet("doubleValue", kotlin.Number::class.java) ?: error("'doubleValue' should be present")
        }

    /**
     * The number.
     */
    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    open override val value: kotlin.Number
        get() {
            return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
        }

}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/NumericValue.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib

/**
 * Abstract class which represents a numeric value.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.lib.\`$Module\`::class, fqn = "@scope/jsii-calc-lib.NumericValue")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
abstract class NumericValue : software.amazon.jsii.tests.kotlin.calculator.base.Base {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    /**
     * The value.
     */
    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    abstract val value: kotlin.Number

    /**
     * String representation of the value.
     */
    @Deprecated("Declaration is deprecated.")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    open override fun toString(): kotlin.String {
        return this.jsiiCall("toString", kotlin.String::class.java) ?: error("Method 'toString()' returned null value")
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue {
        /**
         * The value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val value: kotlin.Number
            get() {
                return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * @return the name of the class (to verify native type names are created for derived classes).
         */
        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun typeName(): kotlin.Any {
            return this.jsiiCall("typeName", kotlin.Any::class.java) ?: error("Method 'typeName()' returned null value")
        }

        /**
         * String representation of the value.
         */
        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun toString(): kotlin.String {
            return this.jsiiCall("toString", kotlin.String::class.java) ?: error("Method 'toString()' returned null value")
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/Operation.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib

/**
 * Represents an operation on values.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.lib.\`$Module\`::class, fqn = "@scope/jsii-calc-lib.Operation")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
abstract class Operation : software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    /**
     * String representation of the value.
     */
    @Deprecated("Declaration is deprecated.")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    abstract override fun toString(): kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.lib.Operation {
        /**
         * The value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val value: kotlin.Number
            get() {
                return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * @return the name of the class (to verify native type names are created for derived classes).
         */
        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun typeName(): kotlin.Any {
            return this.jsiiCall("typeName", kotlin.Any::class.java) ?: error("Method 'typeName()' returned null value")
        }

        /**
         * String representation of the value.
         */
        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun toString(): kotlin.String {
            return this.jsiiCall("toString", kotlin.String::class.java) ?: error("Method 'toString()' returned null value")
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/StructWithOnlyOptionals.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib

/**
 * This is a struct with only optional properties.
 */
@javax.annotation.Generated("jsii-pacmak")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
interface StructWithOnlyOptionals : software.amazon.jsii.JsiiSerializable {
    /**
     * The first optional!
     */
    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    val optional1: kotlin.String?

    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    val optional2: kotlin.Number?

    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    val optional3: kotlin.Boolean?

    class Builder {
        /**
         * The first optional!
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var optional1: kotlin.String? = null

        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var optional2: kotlin.Number? = null

        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var optional3: kotlin.Boolean? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.lib.StructWithOnlyOptionals {
            val optional1 = this.optional1
            val optional2 = this.optional2
            val optional3 = this.optional3
            return \`Jsii$Proxy\`(optional1, optional2, optional3)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.lib.StructWithOnlyOptionals {
        /**
         * The first optional!
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val optional1: kotlin.String?

        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val optional2: kotlin.Number?

        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val optional3: kotlin.Boolean?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.optional1 = this.jsiiCall("optional1", kotlin.String::class.java)
            this.optional2 = this.jsiiCall("optional2", kotlin.Number::class.java)
            this.optional3 = this.jsiiCall("optional3", kotlin.Boolean::class.java)
        }

        constructor(optional1: kotlin.String?, optional2: kotlin.Number?, optional3: kotlin.Boolean?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.optional1 = optional1
            this.optional2 = optional2
            this.optional3 = optional3
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.lib.StructWithOnlyOptionals
            if (optional1 != other.optional1) return false
            if (optional2 != other.optional2) return false
            if (optional3 != other.optional3) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.optional1?.hashCode() ?: 0
            result = 31 * result + (this.optional2?.hashCode() ?: 0)
            result = 31 * result + (this.optional3?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("optional1", om.valueToTree(this.optional1))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("optional2", om.valueToTree(this.optional2))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("optional3", om.valueToTree(this.optional3))
            return obj
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/submodule/IReflectable.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib.submodule

@javax.annotation.Generated("jsii-pacmak")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
interface IReflectable : software.amazon.jsii.JsiiSerializable {
    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    val entries: kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.submodule.ReflectableEntry>

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.lib.submodule.IReflectable {
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val entries: kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.submodule.ReflectableEntry>
            get() {
                return this.jsiiGet("entries", kotlin.collections.List::class.java) as? kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.submodule.ReflectableEntry> ?: error("'entries' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/submodule/NestingClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib.submodule

/**
 * This class is here to show we can use nested classes across module boundaries.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.lib.\`$Module\`::class, fqn = "@scope/jsii-calc-lib.submodule.NestingClass")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
open class NestingClass : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    /**
     * This class is here to show we can use nested classes across module boundaries.
     */
    @software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.lib.\`$Module\`::class, fqn = "@scope/jsii-calc-lib.submodule.NestingClass.NestedClass")
    @Deprecated("Declaration is deprecated.")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    open class NestedClass : software.amazon.jsii.JsiiObject {
        constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
        constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

        constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
        }

        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        open val propertyValue: kotlin.String
            get() {
                return this.jsiiGet("property", kotlin.String::class.java) ?: error("'property' should be present")
            }

    }

    /**
     * This is a struct, nested within a class.
     * 
     * Normal.
     */
    @Deprecated("Declaration is deprecated.")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    interface NestedStruct : software.amazon.jsii.JsiiSerializable {
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        val name: kotlin.String

        class Builder {
            @Deprecated("Declaration is deprecated.")
            @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
            var name: kotlin.String? = null

            fun build(): software.amazon.jsii.tests.kotlin.calculator.lib.submodule.NestingClass.NestedStruct {
                val name = this.name ?: kotlin.error("Value for property 'name' must be specified")
                return \`Jsii$Proxy\`(name)
            }
        }

        class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.lib.submodule.NestingClass.NestedStruct {
            @Deprecated("Declaration is deprecated.")
            @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
            override val name: kotlin.String

            protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
                this.name = this.jsiiCall("name", kotlin.String::class.java) ?: error("'name' should be present")
            }

            constructor(name: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
                this.name = name
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) return true
                if (javaClass != other?.javaClass) return false
                other as software.amazon.jsii.tests.kotlin.calculator.lib.submodule.NestingClass.NestedStruct
                if (name != other.name) return false
                return true
            }

            override fun hashCode(): Int {
                return this.name.hashCode()
            }

            override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
                val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
                val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
                obj.set<com.fasterxml.jackson.databind.JsonNode>("name", om.valueToTree(this.name))
                return obj
            }
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/submodule/ReflectableEntry.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib.submodule

@javax.annotation.Generated("jsii-pacmak")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
interface ReflectableEntry : software.amazon.jsii.JsiiSerializable {
    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    val key: kotlin.String

    @Deprecated("Declaration is deprecated.")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    val value: kotlin.Any

    class Builder {
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var key: kotlin.String? = null

        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var value: kotlin.Any? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.lib.submodule.ReflectableEntry {
            val key = this.key ?: kotlin.error("Value for property 'key' must be specified")
            val value = this.value ?: kotlin.error("Value for property 'value' must be specified")
            return \`Jsii$Proxy\`(key, value)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.lib.submodule.ReflectableEntry {
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val key: kotlin.String

        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val value: kotlin.Any

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.key = this.jsiiCall("key", kotlin.String::class.java) ?: error("'key' should be present")
            this.value = this.jsiiCall("value", kotlin.Any::class.java) ?: error("'value' should be present")
        }

        constructor(key: kotlin.String, value: kotlin.Any) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.key = key
            this.value = value
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.lib.submodule.ReflectableEntry
            if (key != other.key) return false
            if (value != other.value) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.key.hashCode()
            result = 31 * result + (this.value.hashCode())
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("key", om.valueToTree(this.key))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("value", om.valueToTree(this.value))
            return obj
        }
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/lib/submodule/Reflector.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.lib.submodule

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.lib.\`$Module\`::class, fqn = "@scope/jsii-calc-lib.submodule.Reflector")
@Deprecated("Declaration is deprecated.")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
open class Reflector : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @Deprecated("Declaration is deprecated.")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    open fun asMap(reflectable: software.amazon.jsii.tests.kotlin.calculator.lib.submodule.IReflectable): kotlin.collections.Map<kotlin.String, kotlin.Any> {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            reflectable
        )
        return this.jsiiCall("asMap", kotlin.collections.Map::class.java, args) as? kotlin.collections.Map<kotlin.String, kotlin.Any> ?: error("Method 'asMap()' returned null value")
    }
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/kotlin/src/main/resources/@scope/jsii-calc-lib/jsii-calc-lib@0.0.0.jsii.tgz 1`] = `kotlin/src/main/resources/@scope/jsii-calc-lib/jsii-calc-lib@0.0.0.jsii.tgz is a tarball`;

exports[`Generated code for "jsii-calc": <outDir>/ 1`] = `
<root>
 ┗━ 📁 kotlin
    ┣━ 📄 build.gradle
    ┗━ 📁 src
       ┗━ 📁 main
          ┣━ 📁 kotlin
          ┃  ┗━ 📁 software
          ┃     ┗━ 📁 amazon
          ┃        ┗━ 📁 jsii
          ┃           ┗━ 📁 tests
          ┃              ┗━ 📁 kotlin
          ┃                 ┗━ 📁 calculator
          ┃                    ┣━ 📄 $Module.kt
          ┃                    ┣━ 📄 AbstractClass.kt
          ┃                    ┣━ 📄 AbstractClassBase.kt
          ┃                    ┣━ 📄 AbstractClassReturner.kt
          ┃                    ┣━ 📄 AbstractSuite.kt
          ┃                    ┣━ 📄 Add.kt
          ┃                    ┣━ 📄 AllowedMethodNames.kt
          ┃                    ┣━ 📄 AllTypes.kt
          ┃                    ┣━ 📄 AllTypesEnum.kt
          ┃                    ┣━ 📄 AmbiguousParameters.kt
          ┃                    ┣━ 📄 AnonymousImplementationProvider.kt
          ┃                    ┣━ 📄 AsyncVirtualMethods.kt
          ┃                    ┣━ 📄 AugmentableClass.kt
          ┃                    ┣━ 📄 BaseJsii976.kt
          ┃                    ┣━ 📄 Bell.kt
          ┃                    ┣━ 📄 BinaryOperation.kt
          ┃                    ┣━ 📄 BurriedAnonymousObject.kt
          ┃                    ┣━ 📄 Calculator.kt
          ┃                    ┣━ 📄 CalculatorProps.kt
          ┃                    ┣━ 📄 ChildStruct982.kt
          ┃                    ┣━ 📄 ClassThatImplementsTheInternalInterface.kt
          ┃                    ┣━ 📄 ClassThatImplementsThePrivateInterface.kt
          ┃                    ┣━ 📄 ClassWithCollections.kt
          ┃                    ┣━ 📄 ClassWithDocs.kt
          ┃                    ┣━ 📄 ClassWithJavaReservedWords.kt
          ┃                    ┣━ 📄 ClassWithMutableObjectLiteralProperty.kt
          ┃                    ┣━ 📄 ClassWithPrivateConstructorAndAutomaticProperties.kt
          ┃                    ┣━ 📁 composition
          ┃                    ┃  ┗━ 📄 CompositeOperation.kt
          ┃                    ┣━ 📄 ConfusingToJackson.kt
          ┃                    ┣━ 📄 ConfusingToJacksonStruct.kt
          ┃                    ┣━ 📄 ConstructorPassesThisOut.kt
          ┃                    ┣━ 📄 Constructors.kt
          ┃                    ┣━ 📄 ConsumePureInterface.kt
          ┃                    ┣━ 📄 ConsumerCanRingBell.kt
          ┃                    ┣━ 📄 ConsumersOfThisCrazyTypeSystem.kt
          ┃                    ┣━ 📄 DataRenderer.kt
          ┃                    ┣━ 📄 DefaultedConstructorArgument.kt
          ┃                    ┣━ 📄 Demonstrate982.kt
          ┃                    ┣━ 📄 DeprecatedClass.kt
          ┃                    ┣━ 📄 DeprecatedEnum.kt
          ┃                    ┣━ 📄 DeprecatedStruct.kt
          ┃                    ┣━ 📁 DerivedClassHasNoProperties
          ┃                    ┃  ┣━ 📄 Base.kt
          ┃                    ┃  ┗━ 📄 Derived.kt
          ┃                    ┣━ 📄 DerivedStruct.kt
          ┃                    ┣━ 📄 DiamondInheritanceBaseLevelStruct.kt
          ┃                    ┣━ 📄 DiamondInheritanceFirstMidLevelStruct.kt
          ┃                    ┣━ 📄 DiamondInheritanceSecondMidLevelStruct.kt
          ┃                    ┣━ 📄 DiamondInheritanceTopLevelStruct.kt
          ┃                    ┣━ 📄 DisappointingCollectionSource.kt
          ┃                    ┣━ 📄 DocumentedClass.kt
          ┃                    ┣━ 📄 DoNotOverridePrivates.kt
          ┃                    ┣━ 📄 DoNotRecognizeAnyAsOptional.kt
          ┃                    ┣━ 📄 DontComplainAboutVariadicAfterOptional.kt
          ┃                    ┣━ 📄 DoubleTrouble.kt
          ┃                    ┣━ 📄 DynamicPropertyBearer.kt
          ┃                    ┣━ 📄 DynamicPropertyBearerChild.kt
          ┃                    ┣━ 📄 Entropy.kt
          ┃                    ┣━ 📄 EnumDispenser.kt
          ┃                    ┣━ 📄 EraseUndefinedHashValues.kt
          ┃                    ┣━ 📄 EraseUndefinedHashValuesOptions.kt
          ┃                    ┣━ 📄 ExperimentalClass.kt
          ┃                    ┣━ 📄 ExperimentalEnum.kt
          ┃                    ┣━ 📄 ExperimentalStruct.kt
          ┃                    ┣━ 📄 ExportedBaseClass.kt
          ┃                    ┣━ 📄 ExtendsInternalInterface.kt
          ┃                    ┣━ 📄 ExternalClass.kt
          ┃                    ┣━ 📄 ExternalEnum.kt
          ┃                    ┣━ 📄 ExternalStruct.kt
          ┃                    ┣━ 📄 GiveMeStructs.kt
          ┃                    ┣━ 📄 Greetee.kt
          ┃                    ┣━ 📄 GreetingAugmenter.kt
          ┃                    ┣━ 📄 IAnonymousImplementationProvider.kt
          ┃                    ┣━ 📄 IAnonymouslyImplementMe.kt
          ┃                    ┣━ 📄 IAnotherPublicInterface.kt
          ┃                    ┣━ 📄 IBell.kt
          ┃                    ┣━ 📄 IBellRinger.kt
          ┃                    ┣━ 📄 IConcreteBellRinger.kt
          ┃                    ┣━ 📄 IDeprecatedInterface.kt
          ┃                    ┣━ 📄 IExperimentalInterface.kt
          ┃                    ┣━ 📄 IExtendsPrivateInterface.kt
          ┃                    ┣━ 📄 IExternalInterface.kt
          ┃                    ┣━ 📄 IFriendlier.kt
          ┃                    ┣━ 📄 IFriendlyRandomGenerator.kt
          ┃                    ┣━ 📄 IInterfaceImplementedByAbstractClass.kt
          ┃                    ┣━ 📄 IInterfaceThatShouldNotBeADataType.kt
          ┃                    ┣━ 📄 IInterfaceWithInternal.kt
          ┃                    ┣━ 📄 IInterfaceWithMethods.kt
          ┃                    ┣━ 📄 IInterfaceWithOptionalMethodArguments.kt
          ┃                    ┣━ 📄 IInterfaceWithProperties.kt
          ┃                    ┣━ 📄 IInterfaceWithPropertiesExtension.kt
          ┃                    ┣━ 📄 IJSII417Derived.kt
          ┃                    ┣━ 📄 IJSII417PublicBaseOfBase.kt
          ┃                    ┣━ 📄 IJsii487External.kt
          ┃                    ┣━ 📄 IJsii487External2.kt
          ┃                    ┣━ 📄 IJsii496.kt
          ┃                    ┣━ 📄 Implementation.kt
          ┃                    ┣━ 📄 ImplementInternalInterface.kt
          ┃                    ┣━ 📄 ImplementsInterfaceWithInternal.kt
          ┃                    ┣━ 📄 ImplementsInterfaceWithInternalSubclass.kt
          ┃                    ┣━ 📄 ImplementsPrivateInterface.kt
          ┃                    ┣━ 📄 ImplictBaseOfBase.kt
          ┃                    ┣━ 📄 IMutableObjectLiteral.kt
          ┃                    ┣━ 📄 InbetweenClass.kt
          ┃                    ┣━ 📄 INonInternalInterface.kt
          ┃                    ┣━ 📄 InterfaceCollections.kt
          ┃                    ┣━ 📁 InterfaceInNamespaceIncludesClasses
          ┃                    ┃  ┣━ 📄 Foo.kt
          ┃                    ┃  ┗━ 📄 Hello.kt
          ┃                    ┣━ 📁 InterfaceInNamespaceOnlyInterface
          ┃                    ┃  ┗━ 📄 Hello.kt
          ┃                    ┣━ 📄 InterfacesMaker.kt
          ┃                    ┣━ 📄 IObjectWithProperty.kt
          ┃                    ┣━ 📄 IOptionalMethod.kt
          ┃                    ┣━ 📄 IPrivatelyImplemented.kt
          ┃                    ┣━ 📄 IPublicInterface.kt
          ┃                    ┣━ 📄 IPublicInterface2.kt
          ┃                    ┣━ 📄 IRandomNumberGenerator.kt
          ┃                    ┣━ 📄 IReturnJsii976.kt
          ┃                    ┣━ 📄 IReturnsNumber.kt
          ┃                    ┣━ 📄 Isomorphism.kt
          ┃                    ┣━ 📄 IStableInterface.kt
          ┃                    ┣━ 📄 IStructReturningDelegate.kt
          ┃                    ┣━ 📄 IWallClock.kt
          ┃                    ┣━ 📄 JavaReservedWords.kt
          ┃                    ┣━ 📄 JSII417Derived.kt
          ┃                    ┣━ 📄 JSII417PublicBaseOfBase.kt
          ┃                    ┣━ 📄 Jsii487Derived.kt
          ┃                    ┣━ 📄 Jsii496Derived.kt
          ┃                    ┣━ 📄 JsiiAgent.kt
          ┃                    ┣━ 📄 JSObjectLiteralForInterface.kt
          ┃                    ┣━ 📄 JSObjectLiteralToNative.kt
          ┃                    ┣━ 📄 JSObjectLiteralToNativeClass.kt
          ┃                    ┣━ 📄 JsonFormatter.kt
          ┃                    ┣━ 📄 LevelOne.kt
          ┃                    ┣━ 📄 LevelOneProps.kt
          ┃                    ┣━ 📄 LoadBalancedFargateServiceProps.kt
          ┃                    ┣━ 📄 MethodNamedProperty.kt
          ┃                    ┣━ 📄 Multiply.kt
          ┃                    ┣━ 📄 Negate.kt
          ┃                    ┣━ 📄 NestedClassInstance.kt
          ┃                    ┣━ 📄 NestedStruct.kt
          ┃                    ┣━ 📄 NodeStandardLibrary.kt
          ┃                    ┣━ 📄 NullShouldBeTreatedAsUndefined.kt
          ┃                    ┣━ 📄 NullShouldBeTreatedAsUndefinedData.kt
          ┃                    ┣━ 📄 NumberGenerator.kt
          ┃                    ┣━ 📄 ObjectRefsInCollections.kt
          ┃                    ┣━ 📄 ObjectWithPropertyProvider.kt
          ┃                    ┣━ 📄 Old.kt
          ┃                    ┣━ 📄 OptionalArgumentInvoker.kt
          ┃                    ┣━ 📄 OptionalConstructorArgument.kt
          ┃                    ┣━ 📄 OptionalStruct.kt
          ┃                    ┣━ 📄 OptionalStructConsumer.kt
          ┃                    ┣━ 📄 OverridableProtectedMember.kt
          ┃                    ┣━ 📄 OverrideReturnsObject.kt
          ┃                    ┣━ 📄 ParentStruct982.kt
          ┃                    ┣━ 📄 PartiallyInitializedThisConsumer.kt
          ┃                    ┣━ 📄 Polymorphism.kt
          ┃                    ┣━ 📄 Power.kt
          ┃                    ┣━ 📄 PropertyNamedProperty.kt
          ┃                    ┣━ 📄 PublicClass.kt
          ┃                    ┣━ 📄 PythonReservedWords.kt
          ┃                    ┣━ 📁 PythonSelf
          ┃                    ┃  ┣━ 📄 ClassWithSelf.kt
          ┃                    ┃  ┣━ 📄 ClassWithSelfKwarg.kt
          ┃                    ┃  ┣━ 📄 IInterfaceWithSelf.kt
          ┃                    ┃  ┗━ 📄 StructWithSelf.kt
          ┃                    ┣━ 📄 ReferenceEnumFromScopedPackage.kt
          ┃                    ┣━ 📄 ReturnsPrivateImplementationOfInterface.kt
          ┃                    ┣━ 📄 RootStruct.kt
          ┃                    ┣━ 📄 RootStructValidator.kt
          ┃                    ┣━ 📄 RuntimeTypeChecking.kt
          ┃                    ┣━ 📄 SecondLevelStruct.kt
          ┃                    ┣━ 📄 SingleInstanceTwoTypes.kt
          ┃                    ┣━ 📄 SingletonInt.kt
          ┃                    ┣━ 📄 SingletonIntEnum.kt
          ┃                    ┣━ 📄 SingletonString.kt
          ┃                    ┣━ 📄 SingletonStringEnum.kt
          ┃                    ┣━ 📄 SmellyStruct.kt
          ┃                    ┣━ 📄 SomeTypeJsii976.kt
          ┃                    ┣━ 📄 StableClass.kt
          ┃                    ┣━ 📄 StableEnum.kt
          ┃                    ┣━ 📄 StableStruct.kt
          ┃                    ┣━ 📄 StaticContext.kt
          ┃                    ┣━ 📄 Statics.kt
          ┃                    ┣━ 📄 StringEnum.kt
          ┃                    ┣━ 📄 StripInternal.kt
          ┃                    ┣━ 📄 StructA.kt
          ┃                    ┣━ 📄 StructB.kt
          ┃                    ┣━ 📄 StructParameterType.kt
          ┃                    ┣━ 📄 StructPassing.kt
          ┃                    ┣━ 📄 StructUnionConsumer.kt
          ┃                    ┣━ 📄 StructWithJavaReservedWords.kt
          ┃                    ┣━ 📁 submodule
          ┃                    ┃  ┣━ 📁 back_references
          ┃                    ┃  ┃  ┗━ 📄 MyClassReference.kt
          ┃                    ┃  ┣━ 📁 child
          ┃                    ┃  ┃  ┣━ 📄 Awesomeness.kt
          ┃                    ┃  ┃  ┣━ 📄 Goodness.kt
          ┃                    ┃  ┃  ┣━ 📄 InnerClass.kt
          ┃                    ┃  ┃  ┣━ 📄 KwargsProps.kt
          ┃                    ┃  ┃  ┣━ 📄 OuterClass.kt
          ┃                    ┃  ┃  ┣━ 📄 SomeEnum.kt
          ┃                    ┃  ┃  ┣━ 📄 SomeStruct.kt
          ┃                    ┃  ┃  ┗━ 📄 Structure.kt
          ┃                    ┃  ┣━ 📁 isolated
          ┃                    ┃  ┃  ┗━ 📄 Kwargs.kt
          ┃                    ┃  ┣━ 📄 MyClass.kt
          ┃                    ┃  ┣━ 📁 nested_submodule
          ┃                    ┃  ┃  ┣━ 📁 deeplyNested
          ┃                    ┃  ┃  ┃  ┗━ 📄 INamespaced.kt
          ┃                    ┃  ┃  ┗━ 📄 Namespaced.kt
          ┃                    ┃  ┣━ 📁 param
          ┃                    ┃  ┃  ┗━ 📄 SpecialParameter.kt
          ┃                    ┃  ┗━ 📁 returnsparam
          ┃                    ┃     ┗━ 📄 ReturnsSpecialParameter.kt
          ┃                    ┣━ 📄 Sum.kt
          ┃                    ┣━ 📄 SupportsNiceJavaBuilder.kt
          ┃                    ┣━ 📄 SupportsNiceJavaBuilderProps.kt
          ┃                    ┣━ 📄 SupportsNiceJavaBuilderWithRequiredProps.kt
          ┃                    ┣━ 📄 SyncVirtualMethods.kt
          ┃                    ┣━ 📄 Thrower.kt
          ┃                    ┣━ 📄 TopLevelStruct.kt
          ┃                    ┣━ 📄 UmaskCheck.kt
          ┃                    ┣━ 📄 UnaryOperation.kt
          ┃                    ┣━ 📄 UnionProperties.kt
          ┃                    ┣━ 📄 UpcasingReflectable.kt
          ┃                    ┣━ 📄 UseBundledDependency.kt
          ┃                    ┣━ 📄 UseCalcBase.kt
          ┃                    ┣━ 📄 UsesInterfaceWithProperties.kt
          ┃                    ┣━ 📄 VariadicInvoker.kt
          ┃                    ┣━ 📄 VariadicMethod.kt
          ┃                    ┣━ 📄 VirtualMethodPlayground.kt
          ┃                    ┣━ 📄 VoidCallback.kt
          ┃                    ┗━ 📄 WithPrivatePropertyInConstructor.kt
          ┗━ 📁 resources
             ┗━ 📁 jsii-calc
                ┗━ 📄 jsii-calc@0.0.0.jsii.tgz
`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/build.gradle 1`] = `
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id "java-library"
    id 'org.jetbrains.dokka' version '0.10.1'
    id "maven-publish"
}
repositories {
    int index = 0
    while (project.hasProperty("customRepo" + index)) {
        maven { url project.property("customRepo" + index) }
        index += 1
    }
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/dokka" }
}
dependencies {
    api "software.amazon.jsii:jsii-runtime:0.0.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    api "software.amazon.jsii.tests.kotlin:calculator-base:0.0.0"
    api "software.amazon.jsii.tests.kotlin:calculator-base-of-base:0.0.0"
    api "software.amazon.jsii.tests.kotlin:calculator-lib:0.0.0.DEVPREVIEW"
}
dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/dokka"
}
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = "sources"
}
task dokkaJar(type: Jar) {
    from(tasks.dokka)
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    archiveClassifier = "javadoc"
}
publishing {
    repositories {
        maven {
            url project.property("deployRepo")
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = "software.amazon.jsii.tests.kotlin"
            artifactId = "calculator"
            version = "0.0.0"

            from components.kotlin
            artifact sourceJar
            artifact dokkaJar
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/$Module.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

class \`$Module\`: software.amazon.jsii.JsiiModule("jsii-calc", "0.0.0", \`$Module\`::class.java, "jsii-calc@0.0.0.jsii.tgz") {
    override fun resolveClass(fqn: String?): Class<*> {
        return when (fqn) {
            "jsii-calc.AbstractClass" -> software.amazon.jsii.tests.kotlin.calculator.AbstractClass::class.java
            "jsii-calc.AbstractClassBase" -> software.amazon.jsii.tests.kotlin.calculator.AbstractClassBase::class.java
            "jsii-calc.AbstractClassReturner" -> software.amazon.jsii.tests.kotlin.calculator.AbstractClassReturner::class.java
            "jsii-calc.AbstractSuite" -> software.amazon.jsii.tests.kotlin.calculator.AbstractSuite::class.java
            "jsii-calc.Add" -> software.amazon.jsii.tests.kotlin.calculator.Add::class.java
            "jsii-calc.AllTypes" -> software.amazon.jsii.tests.kotlin.calculator.AllTypes::class.java
            "jsii-calc.AllTypesEnum" -> software.amazon.jsii.tests.kotlin.calculator.AllTypesEnum::class.java
            "jsii-calc.AllowedMethodNames" -> software.amazon.jsii.tests.kotlin.calculator.AllowedMethodNames::class.java
            "jsii-calc.AmbiguousParameters" -> software.amazon.jsii.tests.kotlin.calculator.AmbiguousParameters::class.java
            "jsii-calc.AnonymousImplementationProvider" -> software.amazon.jsii.tests.kotlin.calculator.AnonymousImplementationProvider::class.java
            "jsii-calc.AsyncVirtualMethods" -> software.amazon.jsii.tests.kotlin.calculator.AsyncVirtualMethods::class.java
            "jsii-calc.AugmentableClass" -> software.amazon.jsii.tests.kotlin.calculator.AugmentableClass::class.java
            "jsii-calc.BaseJsii976" -> software.amazon.jsii.tests.kotlin.calculator.BaseJsii976::class.java
            "jsii-calc.Bell" -> software.amazon.jsii.tests.kotlin.calculator.Bell::class.java
            "jsii-calc.BinaryOperation" -> software.amazon.jsii.tests.kotlin.calculator.BinaryOperation::class.java
            "jsii-calc.BurriedAnonymousObject" -> software.amazon.jsii.tests.kotlin.calculator.BurriedAnonymousObject::class.java
            "jsii-calc.Calculator" -> software.amazon.jsii.tests.kotlin.calculator.Calculator::class.java
            "jsii-calc.CalculatorProps" -> software.amazon.jsii.tests.kotlin.calculator.CalculatorProps::class.java
            "jsii-calc.ChildStruct982" -> software.amazon.jsii.tests.kotlin.calculator.ChildStruct982::class.java
            "jsii-calc.ClassThatImplementsTheInternalInterface" -> software.amazon.jsii.tests.kotlin.calculator.ClassThatImplementsTheInternalInterface::class.java
            "jsii-calc.ClassThatImplementsThePrivateInterface" -> software.amazon.jsii.tests.kotlin.calculator.ClassThatImplementsThePrivateInterface::class.java
            "jsii-calc.ClassWithCollections" -> software.amazon.jsii.tests.kotlin.calculator.ClassWithCollections::class.java
            "jsii-calc.ClassWithDocs" -> software.amazon.jsii.tests.kotlin.calculator.ClassWithDocs::class.java
            "jsii-calc.ClassWithJavaReservedWords" -> software.amazon.jsii.tests.kotlin.calculator.ClassWithJavaReservedWords::class.java
            "jsii-calc.ClassWithMutableObjectLiteralProperty" -> software.amazon.jsii.tests.kotlin.calculator.ClassWithMutableObjectLiteralProperty::class.java
            "jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties" -> software.amazon.jsii.tests.kotlin.calculator.ClassWithPrivateConstructorAndAutomaticProperties::class.java
            "jsii-calc.ConfusingToJackson" -> software.amazon.jsii.tests.kotlin.calculator.ConfusingToJackson::class.java
            "jsii-calc.ConfusingToJacksonStruct" -> software.amazon.jsii.tests.kotlin.calculator.ConfusingToJacksonStruct::class.java
            "jsii-calc.ConstructorPassesThisOut" -> software.amazon.jsii.tests.kotlin.calculator.ConstructorPassesThisOut::class.java
            "jsii-calc.Constructors" -> software.amazon.jsii.tests.kotlin.calculator.Constructors::class.java
            "jsii-calc.ConsumePureInterface" -> software.amazon.jsii.tests.kotlin.calculator.ConsumePureInterface::class.java
            "jsii-calc.ConsumerCanRingBell" -> software.amazon.jsii.tests.kotlin.calculator.ConsumerCanRingBell::class.java
            "jsii-calc.ConsumersOfThisCrazyTypeSystem" -> software.amazon.jsii.tests.kotlin.calculator.ConsumersOfThisCrazyTypeSystem::class.java
            "jsii-calc.DataRenderer" -> software.amazon.jsii.tests.kotlin.calculator.DataRenderer::class.java
            "jsii-calc.DefaultedConstructorArgument" -> software.amazon.jsii.tests.kotlin.calculator.DefaultedConstructorArgument::class.java
            "jsii-calc.Demonstrate982" -> software.amazon.jsii.tests.kotlin.calculator.Demonstrate982::class.java
            "jsii-calc.DeprecatedClass" -> software.amazon.jsii.tests.kotlin.calculator.DeprecatedClass::class.java
            "jsii-calc.DeprecatedEnum" -> software.amazon.jsii.tests.kotlin.calculator.DeprecatedEnum::class.java
            "jsii-calc.DeprecatedStruct" -> software.amazon.jsii.tests.kotlin.calculator.DeprecatedStruct::class.java
            "jsii-calc.DerivedClassHasNoProperties.Base" -> software.amazon.jsii.tests.kotlin.calculator.DerivedClassHasNoProperties.Base::class.java
            "jsii-calc.DerivedClassHasNoProperties.Derived" -> software.amazon.jsii.tests.kotlin.calculator.DerivedClassHasNoProperties.Derived::class.java
            "jsii-calc.DerivedStruct" -> software.amazon.jsii.tests.kotlin.calculator.DerivedStruct::class.java
            "jsii-calc.DiamondInheritanceBaseLevelStruct" -> software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceBaseLevelStruct::class.java
            "jsii-calc.DiamondInheritanceFirstMidLevelStruct" -> software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceFirstMidLevelStruct::class.java
            "jsii-calc.DiamondInheritanceSecondMidLevelStruct" -> software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceSecondMidLevelStruct::class.java
            "jsii-calc.DiamondInheritanceTopLevelStruct" -> software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceTopLevelStruct::class.java
            "jsii-calc.DisappointingCollectionSource" -> software.amazon.jsii.tests.kotlin.calculator.DisappointingCollectionSource::class.java
            "jsii-calc.DoNotOverridePrivates" -> software.amazon.jsii.tests.kotlin.calculator.DoNotOverridePrivates::class.java
            "jsii-calc.DoNotRecognizeAnyAsOptional" -> software.amazon.jsii.tests.kotlin.calculator.DoNotRecognizeAnyAsOptional::class.java
            "jsii-calc.DocumentedClass" -> software.amazon.jsii.tests.kotlin.calculator.DocumentedClass::class.java
            "jsii-calc.DontComplainAboutVariadicAfterOptional" -> software.amazon.jsii.tests.kotlin.calculator.DontComplainAboutVariadicAfterOptional::class.java
            "jsii-calc.DoubleTrouble" -> software.amazon.jsii.tests.kotlin.calculator.DoubleTrouble::class.java
            "jsii-calc.DynamicPropertyBearer" -> software.amazon.jsii.tests.kotlin.calculator.DynamicPropertyBearer::class.java
            "jsii-calc.DynamicPropertyBearerChild" -> software.amazon.jsii.tests.kotlin.calculator.DynamicPropertyBearerChild::class.java
            "jsii-calc.Entropy" -> software.amazon.jsii.tests.kotlin.calculator.Entropy::class.java
            "jsii-calc.EnumDispenser" -> software.amazon.jsii.tests.kotlin.calculator.EnumDispenser::class.java
            "jsii-calc.EraseUndefinedHashValues" -> software.amazon.jsii.tests.kotlin.calculator.EraseUndefinedHashValues::class.java
            "jsii-calc.EraseUndefinedHashValuesOptions" -> software.amazon.jsii.tests.kotlin.calculator.EraseUndefinedHashValuesOptions::class.java
            "jsii-calc.ExperimentalClass" -> software.amazon.jsii.tests.kotlin.calculator.ExperimentalClass::class.java
            "jsii-calc.ExperimentalEnum" -> software.amazon.jsii.tests.kotlin.calculator.ExperimentalEnum::class.java
            "jsii-calc.ExperimentalStruct" -> software.amazon.jsii.tests.kotlin.calculator.ExperimentalStruct::class.java
            "jsii-calc.ExportedBaseClass" -> software.amazon.jsii.tests.kotlin.calculator.ExportedBaseClass::class.java
            "jsii-calc.ExtendsInternalInterface" -> software.amazon.jsii.tests.kotlin.calculator.ExtendsInternalInterface::class.java
            "jsii-calc.ExternalClass" -> software.amazon.jsii.tests.kotlin.calculator.ExternalClass::class.java
            "jsii-calc.ExternalEnum" -> software.amazon.jsii.tests.kotlin.calculator.ExternalEnum::class.java
            "jsii-calc.ExternalStruct" -> software.amazon.jsii.tests.kotlin.calculator.ExternalStruct::class.java
            "jsii-calc.GiveMeStructs" -> software.amazon.jsii.tests.kotlin.calculator.GiveMeStructs::class.java
            "jsii-calc.Greetee" -> software.amazon.jsii.tests.kotlin.calculator.Greetee::class.java
            "jsii-calc.GreetingAugmenter" -> software.amazon.jsii.tests.kotlin.calculator.GreetingAugmenter::class.java
            "jsii-calc.IAnonymousImplementationProvider" -> software.amazon.jsii.tests.kotlin.calculator.IAnonymousImplementationProvider::class.java
            "jsii-calc.IAnonymouslyImplementMe" -> software.amazon.jsii.tests.kotlin.calculator.IAnonymouslyImplementMe::class.java
            "jsii-calc.IAnotherPublicInterface" -> software.amazon.jsii.tests.kotlin.calculator.IAnotherPublicInterface::class.java
            "jsii-calc.IBell" -> software.amazon.jsii.tests.kotlin.calculator.IBell::class.java
            "jsii-calc.IBellRinger" -> software.amazon.jsii.tests.kotlin.calculator.IBellRinger::class.java
            "jsii-calc.IConcreteBellRinger" -> software.amazon.jsii.tests.kotlin.calculator.IConcreteBellRinger::class.java
            "jsii-calc.IDeprecatedInterface" -> software.amazon.jsii.tests.kotlin.calculator.IDeprecatedInterface::class.java
            "jsii-calc.IExperimentalInterface" -> software.amazon.jsii.tests.kotlin.calculator.IExperimentalInterface::class.java
            "jsii-calc.IExtendsPrivateInterface" -> software.amazon.jsii.tests.kotlin.calculator.IExtendsPrivateInterface::class.java
            "jsii-calc.IExternalInterface" -> software.amazon.jsii.tests.kotlin.calculator.IExternalInterface::class.java
            "jsii-calc.IFriendlier" -> software.amazon.jsii.tests.kotlin.calculator.IFriendlier::class.java
            "jsii-calc.IFriendlyRandomGenerator" -> software.amazon.jsii.tests.kotlin.calculator.IFriendlyRandomGenerator::class.java
            "jsii-calc.IInterfaceImplementedByAbstractClass" -> software.amazon.jsii.tests.kotlin.calculator.IInterfaceImplementedByAbstractClass::class.java
            "jsii-calc.IInterfaceThatShouldNotBeADataType" -> software.amazon.jsii.tests.kotlin.calculator.IInterfaceThatShouldNotBeADataType::class.java
            "jsii-calc.IInterfaceWithInternal" -> software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithInternal::class.java
            "jsii-calc.IInterfaceWithMethods" -> software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithMethods::class.java
            "jsii-calc.IInterfaceWithOptionalMethodArguments" -> software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithOptionalMethodArguments::class.java
            "jsii-calc.IInterfaceWithProperties" -> software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithProperties::class.java
            "jsii-calc.IInterfaceWithPropertiesExtension" -> software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithPropertiesExtension::class.java
            "jsii-calc.IJSII417Derived" -> software.amazon.jsii.tests.kotlin.calculator.IJSII417Derived::class.java
            "jsii-calc.IJSII417PublicBaseOfBase" -> software.amazon.jsii.tests.kotlin.calculator.IJSII417PublicBaseOfBase::class.java
            "jsii-calc.IJsii487External" -> software.amazon.jsii.tests.kotlin.calculator.IJsii487External::class.java
            "jsii-calc.IJsii487External2" -> software.amazon.jsii.tests.kotlin.calculator.IJsii487External2::class.java
            "jsii-calc.IJsii496" -> software.amazon.jsii.tests.kotlin.calculator.IJsii496::class.java
            "jsii-calc.IMutableObjectLiteral" -> software.amazon.jsii.tests.kotlin.calculator.IMutableObjectLiteral::class.java
            "jsii-calc.INonInternalInterface" -> software.amazon.jsii.tests.kotlin.calculator.INonInternalInterface::class.java
            "jsii-calc.IObjectWithProperty" -> software.amazon.jsii.tests.kotlin.calculator.IObjectWithProperty::class.java
            "jsii-calc.IOptionalMethod" -> software.amazon.jsii.tests.kotlin.calculator.IOptionalMethod::class.java
            "jsii-calc.IPrivatelyImplemented" -> software.amazon.jsii.tests.kotlin.calculator.IPrivatelyImplemented::class.java
            "jsii-calc.IPublicInterface" -> software.amazon.jsii.tests.kotlin.calculator.IPublicInterface::class.java
            "jsii-calc.IPublicInterface2" -> software.amazon.jsii.tests.kotlin.calculator.IPublicInterface2::class.java
            "jsii-calc.IRandomNumberGenerator" -> software.amazon.jsii.tests.kotlin.calculator.IRandomNumberGenerator::class.java
            "jsii-calc.IReturnJsii976" -> software.amazon.jsii.tests.kotlin.calculator.IReturnJsii976::class.java
            "jsii-calc.IReturnsNumber" -> software.amazon.jsii.tests.kotlin.calculator.IReturnsNumber::class.java
            "jsii-calc.IStableInterface" -> software.amazon.jsii.tests.kotlin.calculator.IStableInterface::class.java
            "jsii-calc.IStructReturningDelegate" -> software.amazon.jsii.tests.kotlin.calculator.IStructReturningDelegate::class.java
            "jsii-calc.IWallClock" -> software.amazon.jsii.tests.kotlin.calculator.IWallClock::class.java
            "jsii-calc.ImplementInternalInterface" -> software.amazon.jsii.tests.kotlin.calculator.ImplementInternalInterface::class.java
            "jsii-calc.Implementation" -> software.amazon.jsii.tests.kotlin.calculator.Implementation::class.java
            "jsii-calc.ImplementsInterfaceWithInternal" -> software.amazon.jsii.tests.kotlin.calculator.ImplementsInterfaceWithInternal::class.java
            "jsii-calc.ImplementsInterfaceWithInternalSubclass" -> software.amazon.jsii.tests.kotlin.calculator.ImplementsInterfaceWithInternalSubclass::class.java
            "jsii-calc.ImplementsPrivateInterface" -> software.amazon.jsii.tests.kotlin.calculator.ImplementsPrivateInterface::class.java
            "jsii-calc.ImplictBaseOfBase" -> software.amazon.jsii.tests.kotlin.calculator.ImplictBaseOfBase::class.java
            "jsii-calc.InbetweenClass" -> software.amazon.jsii.tests.kotlin.calculator.InbetweenClass::class.java
            "jsii-calc.InterfaceCollections" -> software.amazon.jsii.tests.kotlin.calculator.InterfaceCollections::class.java
            "jsii-calc.InterfaceInNamespaceIncludesClasses.Foo" -> software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceIncludesClasses.Foo::class.java
            "jsii-calc.InterfaceInNamespaceIncludesClasses.Hello" -> software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceIncludesClasses.Hello::class.java
            "jsii-calc.InterfaceInNamespaceOnlyInterface.Hello" -> software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceOnlyInterface.Hello::class.java
            "jsii-calc.InterfacesMaker" -> software.amazon.jsii.tests.kotlin.calculator.InterfacesMaker::class.java
            "jsii-calc.Isomorphism" -> software.amazon.jsii.tests.kotlin.calculator.Isomorphism::class.java
            "jsii-calc.JSII417Derived" -> software.amazon.jsii.tests.kotlin.calculator.JSII417Derived::class.java
            "jsii-calc.JSII417PublicBaseOfBase" -> software.amazon.jsii.tests.kotlin.calculator.JSII417PublicBaseOfBase::class.java
            "jsii-calc.JSObjectLiteralForInterface" -> software.amazon.jsii.tests.kotlin.calculator.JSObjectLiteralForInterface::class.java
            "jsii-calc.JSObjectLiteralToNative" -> software.amazon.jsii.tests.kotlin.calculator.JSObjectLiteralToNative::class.java
            "jsii-calc.JSObjectLiteralToNativeClass" -> software.amazon.jsii.tests.kotlin.calculator.JSObjectLiteralToNativeClass::class.java
            "jsii-calc.JavaReservedWords" -> software.amazon.jsii.tests.kotlin.calculator.JavaReservedWords::class.java
            "jsii-calc.Jsii487Derived" -> software.amazon.jsii.tests.kotlin.calculator.Jsii487Derived::class.java
            "jsii-calc.Jsii496Derived" -> software.amazon.jsii.tests.kotlin.calculator.Jsii496Derived::class.java
            "jsii-calc.JsiiAgent" -> software.amazon.jsii.tests.kotlin.calculator.JsiiAgent::class.java
            "jsii-calc.JsonFormatter" -> software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java
            "jsii-calc.LevelOne" -> software.amazon.jsii.tests.kotlin.calculator.LevelOne::class.java
            "jsii-calc.LevelOneProps" -> software.amazon.jsii.tests.kotlin.calculator.LevelOneProps::class.java
            "jsii-calc.LoadBalancedFargateServiceProps" -> software.amazon.jsii.tests.kotlin.calculator.LoadBalancedFargateServiceProps::class.java
            "jsii-calc.MethodNamedProperty" -> software.amazon.jsii.tests.kotlin.calculator.MethodNamedProperty::class.java
            "jsii-calc.Multiply" -> software.amazon.jsii.tests.kotlin.calculator.Multiply::class.java
            "jsii-calc.Negate" -> software.amazon.jsii.tests.kotlin.calculator.Negate::class.java
            "jsii-calc.NestedClassInstance" -> software.amazon.jsii.tests.kotlin.calculator.NestedClassInstance::class.java
            "jsii-calc.NestedStruct" -> software.amazon.jsii.tests.kotlin.calculator.NestedStruct::class.java
            "jsii-calc.NodeStandardLibrary" -> software.amazon.jsii.tests.kotlin.calculator.NodeStandardLibrary::class.java
            "jsii-calc.NullShouldBeTreatedAsUndefined" -> software.amazon.jsii.tests.kotlin.calculator.NullShouldBeTreatedAsUndefined::class.java
            "jsii-calc.NullShouldBeTreatedAsUndefinedData" -> software.amazon.jsii.tests.kotlin.calculator.NullShouldBeTreatedAsUndefinedData::class.java
            "jsii-calc.NumberGenerator" -> software.amazon.jsii.tests.kotlin.calculator.NumberGenerator::class.java
            "jsii-calc.ObjectRefsInCollections" -> software.amazon.jsii.tests.kotlin.calculator.ObjectRefsInCollections::class.java
            "jsii-calc.ObjectWithPropertyProvider" -> software.amazon.jsii.tests.kotlin.calculator.ObjectWithPropertyProvider::class.java
            "jsii-calc.Old" -> software.amazon.jsii.tests.kotlin.calculator.Old::class.java
            "jsii-calc.OptionalArgumentInvoker" -> software.amazon.jsii.tests.kotlin.calculator.OptionalArgumentInvoker::class.java
            "jsii-calc.OptionalConstructorArgument" -> software.amazon.jsii.tests.kotlin.calculator.OptionalConstructorArgument::class.java
            "jsii-calc.OptionalStruct" -> software.amazon.jsii.tests.kotlin.calculator.OptionalStruct::class.java
            "jsii-calc.OptionalStructConsumer" -> software.amazon.jsii.tests.kotlin.calculator.OptionalStructConsumer::class.java
            "jsii-calc.OverridableProtectedMember" -> software.amazon.jsii.tests.kotlin.calculator.OverridableProtectedMember::class.java
            "jsii-calc.OverrideReturnsObject" -> software.amazon.jsii.tests.kotlin.calculator.OverrideReturnsObject::class.java
            "jsii-calc.ParentStruct982" -> software.amazon.jsii.tests.kotlin.calculator.ParentStruct982::class.java
            "jsii-calc.PartiallyInitializedThisConsumer" -> software.amazon.jsii.tests.kotlin.calculator.PartiallyInitializedThisConsumer::class.java
            "jsii-calc.Polymorphism" -> software.amazon.jsii.tests.kotlin.calculator.Polymorphism::class.java
            "jsii-calc.Power" -> software.amazon.jsii.tests.kotlin.calculator.Power::class.java
            "jsii-calc.PropertyNamedProperty" -> software.amazon.jsii.tests.kotlin.calculator.PropertyNamedProperty::class.java
            "jsii-calc.PublicClass" -> software.amazon.jsii.tests.kotlin.calculator.PublicClass::class.java
            "jsii-calc.PythonReservedWords" -> software.amazon.jsii.tests.kotlin.calculator.PythonReservedWords::class.java
            "jsii-calc.PythonSelf.ClassWithSelf" -> software.amazon.jsii.tests.kotlin.calculator.PythonSelf.ClassWithSelf::class.java
            "jsii-calc.PythonSelf.ClassWithSelfKwarg" -> software.amazon.jsii.tests.kotlin.calculator.PythonSelf.ClassWithSelfKwarg::class.java
            "jsii-calc.PythonSelf.IInterfaceWithSelf" -> software.amazon.jsii.tests.kotlin.calculator.PythonSelf.IInterfaceWithSelf::class.java
            "jsii-calc.PythonSelf.StructWithSelf" -> software.amazon.jsii.tests.kotlin.calculator.PythonSelf.StructWithSelf::class.java
            "jsii-calc.ReferenceEnumFromScopedPackage" -> software.amazon.jsii.tests.kotlin.calculator.ReferenceEnumFromScopedPackage::class.java
            "jsii-calc.ReturnsPrivateImplementationOfInterface" -> software.amazon.jsii.tests.kotlin.calculator.ReturnsPrivateImplementationOfInterface::class.java
            "jsii-calc.RootStruct" -> software.amazon.jsii.tests.kotlin.calculator.RootStruct::class.java
            "jsii-calc.RootStructValidator" -> software.amazon.jsii.tests.kotlin.calculator.RootStructValidator::class.java
            "jsii-calc.RuntimeTypeChecking" -> software.amazon.jsii.tests.kotlin.calculator.RuntimeTypeChecking::class.java
            "jsii-calc.SecondLevelStruct" -> software.amazon.jsii.tests.kotlin.calculator.SecondLevelStruct::class.java
            "jsii-calc.SingleInstanceTwoTypes" -> software.amazon.jsii.tests.kotlin.calculator.SingleInstanceTwoTypes::class.java
            "jsii-calc.SingletonInt" -> software.amazon.jsii.tests.kotlin.calculator.SingletonInt::class.java
            "jsii-calc.SingletonIntEnum" -> software.amazon.jsii.tests.kotlin.calculator.SingletonIntEnum::class.java
            "jsii-calc.SingletonString" -> software.amazon.jsii.tests.kotlin.calculator.SingletonString::class.java
            "jsii-calc.SingletonStringEnum" -> software.amazon.jsii.tests.kotlin.calculator.SingletonStringEnum::class.java
            "jsii-calc.SmellyStruct" -> software.amazon.jsii.tests.kotlin.calculator.SmellyStruct::class.java
            "jsii-calc.SomeTypeJsii976" -> software.amazon.jsii.tests.kotlin.calculator.SomeTypeJsii976::class.java
            "jsii-calc.StableClass" -> software.amazon.jsii.tests.kotlin.calculator.StableClass::class.java
            "jsii-calc.StableEnum" -> software.amazon.jsii.tests.kotlin.calculator.StableEnum::class.java
            "jsii-calc.StableStruct" -> software.amazon.jsii.tests.kotlin.calculator.StableStruct::class.java
            "jsii-calc.StaticContext" -> software.amazon.jsii.tests.kotlin.calculator.StaticContext::class.java
            "jsii-calc.Statics" -> software.amazon.jsii.tests.kotlin.calculator.Statics::class.java
            "jsii-calc.StringEnum" -> software.amazon.jsii.tests.kotlin.calculator.StringEnum::class.java
            "jsii-calc.StripInternal" -> software.amazon.jsii.tests.kotlin.calculator.StripInternal::class.java
            "jsii-calc.StructA" -> software.amazon.jsii.tests.kotlin.calculator.StructA::class.java
            "jsii-calc.StructB" -> software.amazon.jsii.tests.kotlin.calculator.StructB::class.java
            "jsii-calc.StructParameterType" -> software.amazon.jsii.tests.kotlin.calculator.StructParameterType::class.java
            "jsii-calc.StructPassing" -> software.amazon.jsii.tests.kotlin.calculator.StructPassing::class.java
            "jsii-calc.StructUnionConsumer" -> software.amazon.jsii.tests.kotlin.calculator.StructUnionConsumer::class.java
            "jsii-calc.StructWithJavaReservedWords" -> software.amazon.jsii.tests.kotlin.calculator.StructWithJavaReservedWords::class.java
            "jsii-calc.Sum" -> software.amazon.jsii.tests.kotlin.calculator.Sum::class.java
            "jsii-calc.SupportsNiceJavaBuilder" -> software.amazon.jsii.tests.kotlin.calculator.SupportsNiceJavaBuilder::class.java
            "jsii-calc.SupportsNiceJavaBuilderProps" -> software.amazon.jsii.tests.kotlin.calculator.SupportsNiceJavaBuilderProps::class.java
            "jsii-calc.SupportsNiceJavaBuilderWithRequiredProps" -> software.amazon.jsii.tests.kotlin.calculator.SupportsNiceJavaBuilderWithRequiredProps::class.java
            "jsii-calc.SyncVirtualMethods" -> software.amazon.jsii.tests.kotlin.calculator.SyncVirtualMethods::class.java
            "jsii-calc.Thrower" -> software.amazon.jsii.tests.kotlin.calculator.Thrower::class.java
            "jsii-calc.TopLevelStruct" -> software.amazon.jsii.tests.kotlin.calculator.TopLevelStruct::class.java
            "jsii-calc.UmaskCheck" -> software.amazon.jsii.tests.kotlin.calculator.UmaskCheck::class.java
            "jsii-calc.UnaryOperation" -> software.amazon.jsii.tests.kotlin.calculator.UnaryOperation::class.java
            "jsii-calc.UnionProperties" -> software.amazon.jsii.tests.kotlin.calculator.UnionProperties::class.java
            "jsii-calc.UpcasingReflectable" -> software.amazon.jsii.tests.kotlin.calculator.UpcasingReflectable::class.java
            "jsii-calc.UseBundledDependency" -> software.amazon.jsii.tests.kotlin.calculator.UseBundledDependency::class.java
            "jsii-calc.UseCalcBase" -> software.amazon.jsii.tests.kotlin.calculator.UseCalcBase::class.java
            "jsii-calc.UsesInterfaceWithProperties" -> software.amazon.jsii.tests.kotlin.calculator.UsesInterfaceWithProperties::class.java
            "jsii-calc.VariadicInvoker" -> software.amazon.jsii.tests.kotlin.calculator.VariadicInvoker::class.java
            "jsii-calc.VariadicMethod" -> software.amazon.jsii.tests.kotlin.calculator.VariadicMethod::class.java
            "jsii-calc.VirtualMethodPlayground" -> software.amazon.jsii.tests.kotlin.calculator.VirtualMethodPlayground::class.java
            "jsii-calc.VoidCallback" -> software.amazon.jsii.tests.kotlin.calculator.VoidCallback::class.java
            "jsii-calc.WithPrivatePropertyInConstructor" -> software.amazon.jsii.tests.kotlin.calculator.WithPrivatePropertyInConstructor::class.java
            "jsii-calc.composition.CompositeOperation" -> software.amazon.jsii.tests.kotlin.calculator.composition.CompositeOperation::class.java
            "jsii-calc.submodule.MyClass" -> software.amazon.jsii.tests.kotlin.calculator.submodule.MyClass::class.java
            "jsii-calc.submodule.back_references.MyClassReference" -> software.amazon.jsii.tests.kotlin.calculator.submodule.back_references.MyClassReference::class.java
            "jsii-calc.submodule.child.Awesomeness" -> software.amazon.jsii.tests.kotlin.calculator.submodule.child.Awesomeness::class.java
            "jsii-calc.submodule.child.Goodness" -> software.amazon.jsii.tests.kotlin.calculator.submodule.child.Goodness::class.java
            "jsii-calc.submodule.child.InnerClass" -> software.amazon.jsii.tests.kotlin.calculator.submodule.child.InnerClass::class.java
            "jsii-calc.submodule.child.KwargsProps" -> software.amazon.jsii.tests.kotlin.calculator.submodule.child.KwargsProps::class.java
            "jsii-calc.submodule.child.OuterClass" -> software.amazon.jsii.tests.kotlin.calculator.submodule.child.OuterClass::class.java
            "jsii-calc.submodule.child.SomeEnum" -> software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeEnum::class.java
            "jsii-calc.submodule.child.SomeStruct" -> software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeStruct::class.java
            "jsii-calc.submodule.child.Structure" -> software.amazon.jsii.tests.kotlin.calculator.submodule.child.Structure::class.java
            "jsii-calc.submodule.isolated.Kwargs" -> software.amazon.jsii.tests.kotlin.calculator.submodule.isolated.Kwargs::class.java
            "jsii-calc.submodule.nested_submodule.Namespaced" -> software.amazon.jsii.tests.kotlin.calculator.submodule.nested_submodule.Namespaced::class.java
            "jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced" -> software.amazon.jsii.tests.kotlin.calculator.submodule.nested_submodule.deeplyNested.INamespaced::class.java
            "jsii-calc.submodule.param.SpecialParameter" -> software.amazon.jsii.tests.kotlin.calculator.submodule.param.SpecialParameter::class.java
            "jsii-calc.submodule.returnsparam.ReturnsSpecialParameter" -> software.amazon.jsii.tests.kotlin.calculator.submodule.returnsparam.ReturnsSpecialParameter::class.java
            else -> throw ClassNotFoundException("Unknown JSII type: $fqn")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/AbstractClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.AbstractClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class AbstractClass : software.amazon.jsii.tests.kotlin.calculator.AbstractClassBase, software.amazon.jsii.tests.kotlin.calculator.IInterfaceImplementedByAbstractClass {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val propFromInterface: kotlin.String
        get() {
            return this.jsiiGet("propFromInterface", kotlin.String::class.java) ?: error("'propFromInterface' should be present")
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    abstract fun abstractMethod(name: kotlin.String): kotlin.String

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun nonAbstractMethod(): kotlin.Number {
        return this.jsiiCall("nonAbstractMethod", kotlin.Number::class.java) ?: error("Method 'nonAbstractMethod()' returned null value")
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.AbstractClass {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val abstractProperty: kotlin.String
            get() {
                return this.jsiiGet("abstractProperty", kotlin.String::class.java) ?: error("'abstractProperty' should be present")
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val propFromInterface: kotlin.String
            get() {
                return this.jsiiGet("propFromInterface", kotlin.String::class.java) ?: error("'propFromInterface' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun abstractMethod(name: kotlin.String): kotlin.String {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                name
            )
            return this.jsiiCall("abstractMethod", kotlin.String::class.java, args) ?: error("Method 'abstractMethod()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun nonAbstractMethod(): kotlin.Number {
            return this.jsiiCall("nonAbstractMethod", kotlin.Number::class.java) ?: error("Method 'nonAbstractMethod()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/AbstractClassBase.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.AbstractClassBase")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class AbstractClassBase : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    abstract val abstractProperty: kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.AbstractClassBase {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val abstractProperty: kotlin.String
            get() {
                return this.jsiiGet("abstractProperty", kotlin.String::class.java) ?: error("'abstractProperty' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/AbstractClassReturner.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.AbstractClassReturner")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class AbstractClassReturner : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val returnAbstractFromProperty: software.amazon.jsii.tests.kotlin.calculator.AbstractClassBase
        get() {
            return this.jsiiGet("returnAbstractFromProperty", software.amazon.jsii.tests.kotlin.calculator.AbstractClassBase::class.java) ?: error("'returnAbstractFromProperty' should be present")
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun giveMeAbstract(): software.amazon.jsii.tests.kotlin.calculator.AbstractClass {
        return this.jsiiCall("giveMeAbstract", software.amazon.jsii.tests.kotlin.calculator.AbstractClass::class.java) ?: error("Method 'giveMeAbstract()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun giveMeInterface(): software.amazon.jsii.tests.kotlin.calculator.IInterfaceImplementedByAbstractClass {
        return this.jsiiCall("giveMeInterface", software.amazon.jsii.tests.kotlin.calculator.IInterfaceImplementedByAbstractClass::class.java) ?: error("Method 'giveMeInterface()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/AbstractSuite.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Ensures abstract members implementations correctly register overrides in various languages.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.AbstractSuite")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class AbstractSuite : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    protected abstract var propertyValue: kotlin.String

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    protected abstract fun someMethod(str: kotlin.String): kotlin.String

    /**
     * Sets \`seed\` to \`this.property\`, then calls \`someMethod\` with \`this.property\` and returns the result.
     * 
     * @param seeda \`string\`.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun workItAll(seed: kotlin.String): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            seed
        )
        return this.jsiiCall("workItAll", kotlin.String::class.java, args) ?: error("Method 'workItAll()' returned null value")
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.AbstractSuite {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        protected override var propertyValue: kotlin.String
            get() {
                return this.jsiiGet("property", kotlin.String::class.java) ?: error("'property' should be present")
            }
            set(v) {
                this.jsiiSet("property", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        protected override fun someMethod(str: kotlin.String): kotlin.String {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                str
            )
            return this.jsiiCall("someMethod", kotlin.String::class.java, args) ?: error("Method 'someMethod()' returned null value")
        }

        /**
         * Sets \`seed\` to \`this.property\`, then calls \`someMethod\` with \`this.property\` and returns the result.
         * 
         * @param seeda \`string\`.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun workItAll(seed: kotlin.String): kotlin.String {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                seed
            )
            return this.jsiiCall("workItAll", kotlin.String::class.java, args) ?: error("Method 'workItAll()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Add.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * The "+" binary operation.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Add")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Add : software.amazon.jsii.tests.kotlin.calculator.BinaryOperation {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    /**
     * Creates a BinaryOperation.
     */
    constructor(lhs: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue, rhs: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            lhs,
            rhs
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    /**
     * (deprecated) The value.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val value: kotlin.Number
        get() {
            return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
        }

    /**
     * (deprecated) String representation of the value.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun toString(): kotlin.String {
        return this.jsiiCall("toString", kotlin.String::class.java) ?: error("Method 'toString()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/AllTypes.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * This class includes property for all types supported by jsii.
 * 
 * The setters will validate
 * that the value set is of the expected type and throw otherwise.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.AllTypes")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class AllTypes : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val enumPropertyValue: kotlin.Number
        get() {
            return this.jsiiGet("enumPropertyValue", kotlin.Number::class.java) ?: error("'enumPropertyValue' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var anyArrayProperty: kotlin.collections.List<kotlin.Any>
        get() {
            return this.jsiiGet("anyArrayProperty", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.Any> ?: error("'anyArrayProperty' should be present")
        }
        set(v) {
            this.jsiiSet("anyArrayProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var anyMapProperty: kotlin.collections.Map<kotlin.String, kotlin.Any>
        get() {
            return this.jsiiGet("anyMapProperty", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, kotlin.Any> ?: error("'anyMapProperty' should be present")
        }
        set(v) {
            this.jsiiSet("anyMapProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var anyProperty: kotlin.Any
        get() {
            return this.jsiiGet("anyProperty", kotlin.Any::class.java) ?: error("'anyProperty' should be present")
        }
        set(v) {
            this.jsiiSet("anyProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var arrayProperty: kotlin.collections.List<kotlin.String>
        get() {
            return this.jsiiGet("arrayProperty", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String> ?: error("'arrayProperty' should be present")
        }
        set(v) {
            this.jsiiSet("arrayProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var booleanProperty: kotlin.Boolean
        get() {
            return this.jsiiGet("booleanProperty", kotlin.Boolean::class.java) ?: error("'booleanProperty' should be present")
        }
        set(v) {
            this.jsiiSet("booleanProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var dateProperty: java.time.Instant
        get() {
            return this.jsiiGet("dateProperty", java.time.Instant::class.java) ?: error("'dateProperty' should be present")
        }
        set(v) {
            this.jsiiSet("dateProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var enumProperty: software.amazon.jsii.tests.kotlin.calculator.AllTypesEnum
        get() {
            return this.jsiiGet("enumProperty", software.amazon.jsii.tests.kotlin.calculator.AllTypesEnum::class.java) ?: error("'enumProperty' should be present")
        }
        set(v) {
            this.jsiiSet("enumProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var jsonProperty: com.fasterxml.jackson.databind.node.ObjectNode
        get() {
            return this.jsiiGet("jsonProperty", com.fasterxml.jackson.databind.node.ObjectNode::class.java) ?: error("'jsonProperty' should be present")
        }
        set(v) {
            this.jsiiSet("jsonProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var mapProperty: kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.lib.Number>
        get() {
            return this.jsiiGet("mapProperty", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.lib.Number> ?: error("'mapProperty' should be present")
        }
        set(v) {
            this.jsiiSet("mapProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var numberProperty: kotlin.Number
        get() {
            return this.jsiiGet("numberProperty", kotlin.Number::class.java) ?: error("'numberProperty' should be present")
        }
        set(v) {
            this.jsiiSet("numberProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var stringProperty: kotlin.String
        get() {
            return this.jsiiGet("stringProperty", kotlin.String::class.java) ?: error("'stringProperty' should be present")
        }
        set(v) {
            this.jsiiSet("stringProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var unionArrayProperty: kotlin.collections.List<kotlin.Any>
        get() {
            return this.jsiiGet("unionArrayProperty", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.Any> ?: error("'unionArrayProperty' should be present")
        }
        set(v) {
            this.jsiiSet("unionArrayProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var unionMapProperty: kotlin.collections.Map<kotlin.String, kotlin.Any>
        get() {
            return this.jsiiGet("unionMapProperty", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, kotlin.Any> ?: error("'unionMapProperty' should be present")
        }
        set(v) {
            this.jsiiSet("unionMapProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var unionProperty: kotlin.Any
        get() {
            return this.jsiiGet("unionProperty", kotlin.Any::class.java) ?: error("'unionProperty' should be present")
        }
        set(v) {
            this.jsiiSet("unionProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var unknownArrayProperty: kotlin.collections.List<kotlin.Any>
        get() {
            return this.jsiiGet("unknownArrayProperty", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.Any> ?: error("'unknownArrayProperty' should be present")
        }
        set(v) {
            this.jsiiSet("unknownArrayProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var unknownMapProperty: kotlin.collections.Map<kotlin.String, kotlin.Any>
        get() {
            return this.jsiiGet("unknownMapProperty", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, kotlin.Any> ?: error("'unknownMapProperty' should be present")
        }
        set(v) {
            this.jsiiSet("unknownMapProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var unknownProperty: kotlin.Any
        get() {
            return this.jsiiGet("unknownProperty", kotlin.Any::class.java) ?: error("'unknownProperty' should be present")
        }
        set(v) {
            this.jsiiSet("unknownProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var optionalEnumValue: software.amazon.jsii.tests.kotlin.calculator.StringEnum?
        get() {
            return this.jsiiGet("optionalEnumValue", software.amazon.jsii.tests.kotlin.calculator.StringEnum::class.java)
        }
        set(v) {
            this.jsiiSet("optionalEnumValue", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun anyIn(inp: kotlin.Any) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            inp
        )
        this.jsiiCall("anyIn", kotlin.Unit::class.java, args) ?: error("Method 'anyIn()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun anyOut(): kotlin.Any {
        return this.jsiiCall("anyOut", kotlin.Any::class.java) ?: error("Method 'anyOut()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun enumMethod(value: software.amazon.jsii.tests.kotlin.calculator.StringEnum): software.amazon.jsii.tests.kotlin.calculator.StringEnum {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        return this.jsiiCall("enumMethod", software.amazon.jsii.tests.kotlin.calculator.StringEnum::class.java, args) ?: error("Method 'enumMethod()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/AllTypesEnum.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
enum class AllTypesEnum {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    MY_ENUM_VALUE,

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    YOUR_ENUM_VALUE,

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    THIS_IS_GREAT,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/AllowedMethodNames.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.AllowedMethodNames")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class AllowedMethodNames : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun getBar(_p1: kotlin.String, _p2: kotlin.Number) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            _p1,
            _p2
        )
        this.jsiiCall("getBar", kotlin.Unit::class.java, args) ?: error("Method 'getBar()' returned null value")
    }

    /**
     * getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun getFoo(withParam: kotlin.String): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            withParam
        )
        return this.jsiiCall("getFoo", kotlin.String::class.java, args) ?: error("Method 'getFoo()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun setBar(_x: kotlin.String, _y: kotlin.Number, _z: kotlin.Boolean) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            _x,
            _y,
            _z
        )
        this.jsiiCall("setBar", kotlin.Unit::class.java, args) ?: error("Method 'setBar()' returned null value")
    }

    /**
     * setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun setFoo(_x: kotlin.String, _y: kotlin.Number) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            _x,
            _y
        )
        this.jsiiCall("setFoo", kotlin.Unit::class.java, args) ?: error("Method 'setFoo()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/AmbiguousParameters.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.AmbiguousParameters")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class AmbiguousParameters : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(scope: software.amazon.jsii.tests.kotlin.calculator.Bell, props: software.amazon.jsii.tests.kotlin.calculator.StructParameterType) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            scope,
            props
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val props: software.amazon.jsii.tests.kotlin.calculator.StructParameterType
        get() {
            return this.jsiiGet("props", software.amazon.jsii.tests.kotlin.calculator.StructParameterType::class.java) ?: error("'props' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val scope: software.amazon.jsii.tests.kotlin.calculator.Bell
        get() {
            return this.jsiiGet("scope", software.amazon.jsii.tests.kotlin.calculator.Bell::class.java) ?: error("'scope' should be present")
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/AnonymousImplementationProvider.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.AnonymousImplementationProvider")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class AnonymousImplementationProvider : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IAnonymousImplementationProvider {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun provideAsClass(): software.amazon.jsii.tests.kotlin.calculator.Implementation {
        return this.jsiiCall("provideAsClass", software.amazon.jsii.tests.kotlin.calculator.Implementation::class.java) ?: error("Method 'provideAsClass()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun provideAsInterface(): software.amazon.jsii.tests.kotlin.calculator.IAnonymouslyImplementMe {
        return this.jsiiCall("provideAsInterface", software.amazon.jsii.tests.kotlin.calculator.IAnonymouslyImplementMe::class.java) ?: error("Method 'provideAsInterface()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/AsyncVirtualMethods.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.AsyncVirtualMethods")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class AsyncVirtualMethods : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun callMe(): kotlin.Number {
        return this.jsiiCall("callMe", kotlin.Number::class.java) ?: error("Method 'callMe()' returned null value")
    }

    /**
     * Just calls "overrideMeToo".
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun callMe2(): kotlin.Number {
        return this.jsiiCall("callMe2", kotlin.Number::class.java) ?: error("Method 'callMe2()' returned null value")
    }

    /**
     * This method calls the "callMe" async method indirectly, which will then invoke a virtual method.
     * 
     * This is a "double promise" situation, which
     * means that callbacks are not going to be available immediate, but only
     * after an "immediates" cycle.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun callMeDoublePromise(): kotlin.Number {
        return this.jsiiCall("callMeDoublePromise", kotlin.Number::class.java) ?: error("Method 'callMeDoublePromise()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun dontOverrideMe(): kotlin.Number {
        return this.jsiiCall("dontOverrideMe", kotlin.Number::class.java) ?: error("Method 'dontOverrideMe()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun overrideMe(mult: kotlin.Number): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            mult
        )
        return this.jsiiCall("overrideMe", kotlin.Number::class.java, args) ?: error("Method 'overrideMe()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun overrideMeToo(): kotlin.Number {
        return this.jsiiCall("overrideMeToo", kotlin.Number::class.java) ?: error("Method 'overrideMeToo()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/AugmentableClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.AugmentableClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class AugmentableClass : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun methodOne() {
        this.jsiiCall("methodOne", kotlin.Unit::class.java) ?: error("Method 'methodOne()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun methodTwo() {
        this.jsiiCall("methodTwo", kotlin.Unit::class.java) ?: error("Method 'methodTwo()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/BaseJsii976.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.BaseJsii976")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class BaseJsii976 : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Bell.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Bell")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Bell : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IBell {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var rung: kotlin.Boolean
        get() {
            return this.jsiiGet("rung", kotlin.Boolean::class.java) ?: error("'rung' should be present")
        }
        set(v) {
            this.jsiiSet("rung", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun ring() {
        this.jsiiCall("ring", kotlin.Unit::class.java) ?: error("Method 'ring()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/BinaryOperation.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Represents an operation with two operands.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.BinaryOperation")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class BinaryOperation : software.amazon.jsii.tests.kotlin.calculator.lib.Operation, software.amazon.jsii.tests.kotlin.calculator.lib.IFriendly {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    /**
     * Creates a BinaryOperation.
     */
    constructor(lhs: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue, rhs: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            lhs,
            rhs
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    /**
     * Left-hand side operand.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val lhs: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
        get() {
            return this.jsiiGet("lhs", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'lhs' should be present")
        }

    /**
     * Right-hand side operand.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val rhs: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
        get() {
            return this.jsiiGet("rhs", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'rhs' should be present")
        }

    /**
     * (deprecated) Say hello!
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun hello(): kotlin.String {
        return this.jsiiCall("hello", kotlin.String::class.java) ?: error("Method 'hello()' returned null value")
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.BinaryOperation {
        /**
         * The value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val value: kotlin.Number
            get() {
                return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
            }

        /**
         * Left-hand side operand.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val lhs: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
            get() {
                return this.jsiiGet("lhs", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'lhs' should be present")
            }

        /**
         * Right-hand side operand.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val rhs: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
            get() {
                return this.jsiiGet("rhs", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'rhs' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * @return the name of the class (to verify native type names are created for derived classes).
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun typeName(): kotlin.Any {
            return this.jsiiCall("typeName", kotlin.Any::class.java) ?: error("Method 'typeName()' returned null value")
        }

        /**
         * String representation of the value.
         */
        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun toString(): kotlin.String {
            return this.jsiiCall("toString", kotlin.String::class.java) ?: error("Method 'toString()' returned null value")
        }

        /**
         * (deprecated) Say hello!
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun hello(): kotlin.String {
            return this.jsiiCall("hello", kotlin.String::class.java) ?: error("Method 'hello()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/BurriedAnonymousObject.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * See https://github.com/aws/aws-cdk/issues/7977.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.BurriedAnonymousObject")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class BurriedAnonymousObject : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun check(): kotlin.Boolean {
        return this.jsiiCall("check", kotlin.Boolean::class.java) ?: error("Method 'check()' returned null value")
    }

    /**
     * Implement this method and have it return it's parameter.
     * 
     * @return \`value\`
     * 
     * @param valuethe value that should be returned.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    abstract fun giveItBack(value: kotlin.Any): kotlin.Any

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.BurriedAnonymousObject {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun check(): kotlin.Boolean {
            return this.jsiiCall("check", kotlin.Boolean::class.java) ?: error("Method 'check()' returned null value")
        }

        /**
         * Implement this method and have it return it's parameter.
         * 
         * @return \`value\`
         * 
         * @param valuethe value that should be returned.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun giveItBack(value: kotlin.Any): kotlin.Any {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                value
            )
            return this.jsiiCall("giveItBack", kotlin.Any::class.java, args) ?: error("Method 'giveItBack()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Calculator.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * A calculator which maintains a current value and allows adding operations.
 * 
 * Here's how you use it:
 * 
 * \`\`\`ts
 * const calculator = new calc.Calculator();
 * calculator.add(5);
 * calculator.mul(3);
 * console.log(calculator.expression.value);
 * \`\`\`
 * 
 * I will repeat this example again, but in an @example tag.
 * 
 * Example: 
 * const calculator = new calc.Calculator();
 * calculator.add(5);
 * calculator.mul(3);
 * console.log(calculator.expression.value);
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Calculator")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Calculator : software.amazon.jsii.tests.kotlin.calculator.composition.CompositeOperation {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    /**
     * Creates a Calculator object.
     */
    constructor(props: software.amazon.jsii.tests.kotlin.calculator.CalculatorProps?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            props ?: error("'props' should be present")
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    /**
     * Returns the expression.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val expression: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
        get() {
            return this.jsiiGet("expression", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'expression' should be present")
        }

    /**
     * A log of all operations.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val operationsLog: kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue>
        get() {
            return this.jsiiGet("operationsLog", kotlin.collections.List::class.java) as? kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue> ?: error("'operationsLog' should be present")
        }

    /**
     * A map of per operation name of all operations performed.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val operationsMap: kotlin.collections.Map<kotlin.String, kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue>>
        get() {
            return this.jsiiGet("operationsMap", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue>> ?: error("'operationsMap' should be present")
        }

    /**
     * The current value.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var curr: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
        get() {
            return this.jsiiGet("curr", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'curr' should be present")
        }
        set(v) {
            this.jsiiSet("curr", v)
        }

    /**
     * The maximum value allows in this calculator.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var maxValue: kotlin.Number?
        get() {
            return this.jsiiGet("maxValue", kotlin.Number::class.java)
        }
        set(v) {
            this.jsiiSet("maxValue", v)
        }

    /**
     * Example of a property that accepts a union of types.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var unionProperty: kotlin.Any?
        get() {
            return this.jsiiGet("unionProperty", kotlin.Any::class.java)
        }
        set(v) {
            this.jsiiSet("unionProperty", v)
        }

    /**
     * Adds a number to the current value.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun add(value: kotlin.Number) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        this.jsiiCall("add", kotlin.Unit::class.java, args) ?: error("Method 'add()' returned null value")
    }

    /**
     * Multiplies the current value by a number.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun mul(value: kotlin.Number) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        this.jsiiCall("mul", kotlin.Unit::class.java, args) ?: error("Method 'mul()' returned null value")
    }

    /**
     * Negates the current value.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun neg() {
        this.jsiiCall("neg", kotlin.Unit::class.java) ?: error("Method 'neg()' returned null value")
    }

    /**
     * Raises the current value by a power.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun pow(value: kotlin.Number) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        this.jsiiCall("pow", kotlin.Unit::class.java, args) ?: error("Method 'pow()' returned null value")
    }

    /**
     * Returns teh value of the union property (if defined).
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun readUnionValue(): kotlin.Number {
        return this.jsiiCall("readUnionValue", kotlin.Number::class.java) ?: error("Method 'readUnionValue()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/CalculatorProps.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Properties for Calculator.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface CalculatorProps : software.amazon.jsii.JsiiSerializable {
    /**
     * The initial value of the calculator.
     * 
     * NOTE: Any number works here, it's fine.
     * 
     * Default: 0
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val initialValue: kotlin.Number?

    /**
     * The maximum value the calculator can store.
     * 
     * Default: none
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val maximumValue: kotlin.Number?

    class Builder {
        /**
         * The initial value of the calculator.
         * 
         * NOTE: Any number works here, it's fine.
         * 
         * Default: 0
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var initialValue: kotlin.Number? = null

        /**
         * The maximum value the calculator can store.
         * 
         * Default: none
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var maximumValue: kotlin.Number? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.CalculatorProps {
            val initialValue = this.initialValue
            val maximumValue = this.maximumValue
            return \`Jsii$Proxy\`(initialValue, maximumValue)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.CalculatorProps {
        /**
         * The initial value of the calculator.
         * 
         * NOTE: Any number works here, it's fine.
         * 
         * Default: 0
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val initialValue: kotlin.Number?

        /**
         * The maximum value the calculator can store.
         * 
         * Default: none
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val maximumValue: kotlin.Number?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.initialValue = this.jsiiCall("initialValue", kotlin.Number::class.java)
            this.maximumValue = this.jsiiCall("maximumValue", kotlin.Number::class.java)
        }

        constructor(initialValue: kotlin.Number?, maximumValue: kotlin.Number?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.initialValue = initialValue
            this.maximumValue = maximumValue
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.CalculatorProps
            if (initialValue != other.initialValue) return false
            if (maximumValue != other.maximumValue) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.initialValue?.hashCode() ?: 0
            result = 31 * result + (this.maximumValue?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("initialValue", om.valueToTree(this.initialValue))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("maximumValue", om.valueToTree(this.maximumValue))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ChildStruct982.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface ChildStruct982 : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.ParentStruct982 {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val bar: kotlin.Number

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var foo: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var bar: kotlin.Number? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.ChildStruct982 {
            val foo = this.foo ?: kotlin.error("Value for property 'foo' must be specified")
            val bar = this.bar ?: kotlin.error("Value for property 'bar' must be specified")
            return \`Jsii$Proxy\`(foo, bar)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.ChildStruct982 {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val foo: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val bar: kotlin.Number

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.foo = this.jsiiCall("foo", kotlin.String::class.java) ?: error("'foo' should be present")
            this.bar = this.jsiiCall("bar", kotlin.Number::class.java) ?: error("'bar' should be present")
        }

        constructor(foo: kotlin.String, bar: kotlin.Number) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.foo = foo
            this.bar = bar
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.ChildStruct982
            if (foo != other.foo) return false
            if (bar != other.bar) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.foo.hashCode()
            result = 31 * result + (this.bar.hashCode())
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("foo", om.valueToTree(this.foo))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("bar", om.valueToTree(this.bar))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ClassThatImplementsTheInternalInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ClassThatImplementsTheInternalInterface")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ClassThatImplementsTheInternalInterface : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.INonInternalInterface {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override var a: kotlin.String
        get() {
            return this.jsiiGet("a", kotlin.String::class.java) ?: error("'a' should be present")
        }
        set(v) {
            this.jsiiSet("a", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override var b: kotlin.String
        get() {
            return this.jsiiGet("b", kotlin.String::class.java) ?: error("'b' should be present")
        }
        set(v) {
            this.jsiiSet("b", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override var c: kotlin.String
        get() {
            return this.jsiiGet("c", kotlin.String::class.java) ?: error("'c' should be present")
        }
        set(v) {
            this.jsiiSet("c", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var d: kotlin.String
        get() {
            return this.jsiiGet("d", kotlin.String::class.java) ?: error("'d' should be present")
        }
        set(v) {
            this.jsiiSet("d", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ClassThatImplementsThePrivateInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ClassThatImplementsThePrivateInterface")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ClassThatImplementsThePrivateInterface : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.INonInternalInterface {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override var a: kotlin.String
        get() {
            return this.jsiiGet("a", kotlin.String::class.java) ?: error("'a' should be present")
        }
        set(v) {
            this.jsiiSet("a", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override var b: kotlin.String
        get() {
            return this.jsiiGet("b", kotlin.String::class.java) ?: error("'b' should be present")
        }
        set(v) {
            this.jsiiSet("b", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override var c: kotlin.String
        get() {
            return this.jsiiGet("c", kotlin.String::class.java) ?: error("'c' should be present")
        }
        set(v) {
            this.jsiiSet("c", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var e: kotlin.String
        get() {
            return this.jsiiGet("e", kotlin.String::class.java) ?: error("'e' should be present")
        }
        set(v) {
            this.jsiiSet("e", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ClassWithCollections.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ClassWithCollections")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ClassWithCollections : software.amazon.jsii.JsiiObject {
    companion object {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var staticArray: kotlin.collections.List<kotlin.String>
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ClassWithCollections::class.java, "staticArray", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String> ?: error("'staticArray' should be present")
            }
            set(v) {
                software.amazon.jsii.JsiiObject.jsiiStaticSet(software.amazon.jsii.tests.kotlin.calculator.ClassWithCollections::class.java, "staticArray", v)
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var staticMap: kotlin.collections.Map<kotlin.String, kotlin.String>
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ClassWithCollections::class.java, "staticMap", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, kotlin.String> ?: error("'staticMap' should be present")
            }
            set(v) {
                software.amazon.jsii.JsiiObject.jsiiStaticSet(software.amazon.jsii.tests.kotlin.calculator.ClassWithCollections::class.java, "staticMap", v)
            }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun createAList(): kotlin.collections.List<kotlin.String> {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ClassWithCollections::class.java, "createAList", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String> ?: error("Method 'createAList()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun createAMap(): kotlin.collections.Map<kotlin.String, kotlin.String> {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ClassWithCollections::class.java, "createAMap", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, kotlin.String> ?: error("Method 'createAMap()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(map: kotlin.collections.Map<kotlin.String, kotlin.String>, array: kotlin.collections.List<kotlin.String>) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            map,
            array
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var array: kotlin.collections.List<kotlin.String>
        get() {
            return this.jsiiGet("array", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String> ?: error("'array' should be present")
        }
        set(v) {
            this.jsiiSet("array", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var map: kotlin.collections.Map<kotlin.String, kotlin.String>
        get() {
            return this.jsiiGet("map", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, kotlin.String> ?: error("'map' should be present")
        }
        set(v) {
            this.jsiiSet("map", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ClassWithDocs.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * This class has docs.
 * 
 * The docs are great. They're a bunch of tags.
 * 
 * Example: 
 * function anExample() {
 * }
 * 
 * @see https://aws.amazon.com/
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ClassWithDocs")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ClassWithDocs : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ClassWithJavaReservedWords.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ClassWithJavaReservedWords")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ClassWithJavaReservedWords : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(int: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            int
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val int: kotlin.String
        get() {
            return this.jsiiGet("int", kotlin.String::class.java) ?: error("'int' should be present")
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doImport(assert: kotlin.String): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            assert
        )
        return this.jsiiCall("import", kotlin.String::class.java, args) ?: error("Method 'import()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ClassWithMutableObjectLiteralProperty.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ClassWithMutableObjectLiteralProperty")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ClassWithMutableObjectLiteralProperty : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var mutableObject: software.amazon.jsii.tests.kotlin.calculator.IMutableObjectLiteral
        get() {
            return this.jsiiGet("mutableObject", software.amazon.jsii.tests.kotlin.calculator.IMutableObjectLiteral::class.java) ?: error("'mutableObject' should be present")
        }
        set(v) {
            this.jsiiSet("mutableObject", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ClassWithPrivateConstructorAndAutomaticProperties.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Class that implements interface properties automatically, but using a private constructor.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ClassWithPrivateConstructorAndAutomaticProperties : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithProperties {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun create(readOnlyString: kotlin.String, readWriteString: kotlin.String): software.amazon.jsii.tests.kotlin.calculator.ClassWithPrivateConstructorAndAutomaticProperties {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                readOnlyString,
                readWriteString
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ClassWithPrivateConstructorAndAutomaticProperties::class.java, "create", software.amazon.jsii.tests.kotlin.calculator.ClassWithPrivateConstructorAndAutomaticProperties::class.java, args) ?: error("Method 'create()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val readOnlyString: kotlin.String
        get() {
            return this.jsiiGet("readOnlyString", kotlin.String::class.java) ?: error("'readOnlyString' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override var readWriteString: kotlin.String
        get() {
            return this.jsiiGet("readWriteString", kotlin.String::class.java) ?: error("'readWriteString' should be present")
        }
        set(v) {
            this.jsiiSet("readWriteString", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ConfusingToJackson.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * This tries to confuse Jackson by having overloaded property setters.
 * 
 * @see https://github.com/aws/aws-cdk/issues/4080
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ConfusingToJackson")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ConfusingToJackson : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun makeInstance(): software.amazon.jsii.tests.kotlin.calculator.ConfusingToJackson {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ConfusingToJackson::class.java, "makeInstance", software.amazon.jsii.tests.kotlin.calculator.ConfusingToJackson::class.java) ?: error("Method 'makeInstance()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun makeStructInstance(): software.amazon.jsii.tests.kotlin.calculator.ConfusingToJacksonStruct {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ConfusingToJackson::class.java, "makeStructInstance", software.amazon.jsii.tests.kotlin.calculator.ConfusingToJacksonStruct::class.java) ?: error("Method 'makeStructInstance()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var unionProperty: kotlin.Any?
        get() {
            return this.jsiiGet("unionProperty", kotlin.Any::class.java)
        }
        set(v) {
            this.jsiiSet("unionProperty", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ConfusingToJacksonStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface ConfusingToJacksonStruct : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val unionProperty: kotlin.Any?

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var unionProperty: kotlin.Any? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.ConfusingToJacksonStruct {
            val unionProperty = this.unionProperty
            return \`Jsii$Proxy\`(unionProperty)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.ConfusingToJacksonStruct {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val unionProperty: kotlin.Any?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.unionProperty = this.jsiiCall("unionProperty", kotlin.Any::class.java)
        }

        constructor(unionProperty: kotlin.Any?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.unionProperty = unionProperty
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.ConfusingToJacksonStruct
            if (unionProperty != other.unionProperty) return false
            return true
        }

        override fun hashCode(): Int {
            return this.unionProperty?.hashCode() ?: 0
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("unionProperty", om.valueToTree(this.unionProperty))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ConstructorPassesThisOut.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ConstructorPassesThisOut")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ConstructorPassesThisOut : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(consumer: software.amazon.jsii.tests.kotlin.calculator.PartiallyInitializedThisConsumer) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            consumer
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Constructors.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Constructors")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Constructors : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun hiddenInterface(): software.amazon.jsii.tests.kotlin.calculator.IPublicInterface {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Constructors::class.java, "hiddenInterface", software.amazon.jsii.tests.kotlin.calculator.IPublicInterface::class.java) ?: error("Method 'hiddenInterface()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun hiddenInterfaces(): kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.IPublicInterface> {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Constructors::class.java, "hiddenInterfaces", kotlin.collections.List::class.java) as? kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.IPublicInterface> ?: error("Method 'hiddenInterfaces()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun hiddenSubInterfaces(): kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.IPublicInterface> {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Constructors::class.java, "hiddenSubInterfaces", kotlin.collections.List::class.java) as? kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.IPublicInterface> ?: error("Method 'hiddenSubInterfaces()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun makeClass(): software.amazon.jsii.tests.kotlin.calculator.PublicClass {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Constructors::class.java, "makeClass", software.amazon.jsii.tests.kotlin.calculator.PublicClass::class.java) ?: error("Method 'makeClass()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun makeInterface(): software.amazon.jsii.tests.kotlin.calculator.IPublicInterface {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Constructors::class.java, "makeInterface", software.amazon.jsii.tests.kotlin.calculator.IPublicInterface::class.java) ?: error("Method 'makeInterface()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun makeInterface2(): software.amazon.jsii.tests.kotlin.calculator.IPublicInterface2 {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Constructors::class.java, "makeInterface2", software.amazon.jsii.tests.kotlin.calculator.IPublicInterface2::class.java) ?: error("Method 'makeInterface2()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun makeInterfaces(): kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.IPublicInterface> {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Constructors::class.java, "makeInterfaces", kotlin.collections.List::class.java) as? kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.IPublicInterface> ?: error("Method 'makeInterfaces()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ConsumePureInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ConsumePureInterface")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ConsumePureInterface : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(delegateValue: software.amazon.jsii.tests.kotlin.calculator.IStructReturningDelegate) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            delegateValue
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun workItBaby(): software.amazon.jsii.tests.kotlin.calculator.StructB {
        return this.jsiiCall("workItBaby", software.amazon.jsii.tests.kotlin.calculator.StructB::class.java) ?: error("Method 'workItBaby()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ConsumerCanRingBell.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Test calling back to consumers that implement interfaces.
 * 
 * Check that if a JSII consumer implements IConsumerWithInterfaceParam, they can call
 * the method on the argument that they're passed...
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ConsumerCanRingBell")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ConsumerCanRingBell : software.amazon.jsii.JsiiObject {
    companion object {
        /**
         * ...if the interface is implemented using an object literal.
         * 
         * Returns whether the bell was rung.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun staticImplementedByObjectLiteral(ringer: software.amazon.jsii.tests.kotlin.calculator.IBellRinger): kotlin.Boolean {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                ringer
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ConsumerCanRingBell::class.java, "staticImplementedByObjectLiteral", kotlin.Boolean::class.java, args) ?: error("Method 'staticImplementedByObjectLiteral()' returned null value")
        }

        /**
         * ...if the interface is implemented using a private class.
         * 
         * Return whether the bell was rung.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun staticImplementedByPrivateClass(ringer: software.amazon.jsii.tests.kotlin.calculator.IBellRinger): kotlin.Boolean {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                ringer
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ConsumerCanRingBell::class.java, "staticImplementedByPrivateClass", kotlin.Boolean::class.java, args) ?: error("Method 'staticImplementedByPrivateClass()' returned null value")
        }

        /**
         * ...if the interface is implemented using a public class.
         * 
         * Return whether the bell was rung.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun staticImplementedByPublicClass(ringer: software.amazon.jsii.tests.kotlin.calculator.IBellRinger): kotlin.Boolean {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                ringer
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ConsumerCanRingBell::class.java, "staticImplementedByPublicClass", kotlin.Boolean::class.java, args) ?: error("Method 'staticImplementedByPublicClass()' returned null value")
        }

        /**
         * If the parameter is a concrete class instead of an interface.
         * 
         * Return whether the bell was rung.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun staticWhenTypedAsClass(ringer: software.amazon.jsii.tests.kotlin.calculator.IConcreteBellRinger): kotlin.Boolean {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                ringer
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ConsumerCanRingBell::class.java, "staticWhenTypedAsClass", kotlin.Boolean::class.java, args) ?: error("Method 'staticWhenTypedAsClass()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    /**
     * ...if the interface is implemented using an object literal.
     * 
     * Returns whether the bell was rung.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun implementedByObjectLiteral(ringer: software.amazon.jsii.tests.kotlin.calculator.IBellRinger): kotlin.Boolean {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            ringer
        )
        return this.jsiiCall("implementedByObjectLiteral", kotlin.Boolean::class.java, args) ?: error("Method 'implementedByObjectLiteral()' returned null value")
    }

    /**
     * ...if the interface is implemented using a private class.
     * 
     * Return whether the bell was rung.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun implementedByPrivateClass(ringer: software.amazon.jsii.tests.kotlin.calculator.IBellRinger): kotlin.Boolean {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            ringer
        )
        return this.jsiiCall("implementedByPrivateClass", kotlin.Boolean::class.java, args) ?: error("Method 'implementedByPrivateClass()' returned null value")
    }

    /**
     * ...if the interface is implemented using a public class.
     * 
     * Return whether the bell was rung.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun implementedByPublicClass(ringer: software.amazon.jsii.tests.kotlin.calculator.IBellRinger): kotlin.Boolean {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            ringer
        )
        return this.jsiiCall("implementedByPublicClass", kotlin.Boolean::class.java, args) ?: error("Method 'implementedByPublicClass()' returned null value")
    }

    /**
     * If the parameter is a concrete class instead of an interface.
     * 
     * Return whether the bell was rung.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun whenTypedAsClass(ringer: software.amazon.jsii.tests.kotlin.calculator.IConcreteBellRinger): kotlin.Boolean {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            ringer
        )
        return this.jsiiCall("whenTypedAsClass", kotlin.Boolean::class.java, args) ?: error("Method 'whenTypedAsClass()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ConsumersOfThisCrazyTypeSystem.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ConsumersOfThisCrazyTypeSystem")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ConsumersOfThisCrazyTypeSystem : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun consumeAnotherPublicInterface(obj: software.amazon.jsii.tests.kotlin.calculator.IAnotherPublicInterface): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            obj
        )
        return this.jsiiCall("consumeAnotherPublicInterface", kotlin.String::class.java, args) ?: error("Method 'consumeAnotherPublicInterface()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun consumeNonInternalInterface(obj: software.amazon.jsii.tests.kotlin.calculator.INonInternalInterface): kotlin.Any {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            obj
        )
        return this.jsiiCall("consumeNonInternalInterface", kotlin.Any::class.java, args) ?: error("Method 'consumeNonInternalInterface()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DataRenderer.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Verifies proper type handling through dynamic overrides.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DataRenderer")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class DataRenderer : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun render(dataValue: software.amazon.jsii.tests.kotlin.calculator.lib.MyFirstStruct?): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            dataValue ?: error("'data' should be present")
        )
        return this.jsiiCall("render", kotlin.String::class.java, args) ?: error("Method 'render()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun renderArbitrary(dataValue: kotlin.collections.Map<kotlin.String, kotlin.Any>): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            dataValue
        )
        return this.jsiiCall("renderArbitrary", kotlin.String::class.java, args) ?: error("Method 'renderArbitrary()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun renderMap(map: kotlin.collections.Map<kotlin.String, kotlin.Any>): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            map
        )
        return this.jsiiCall("renderMap", kotlin.String::class.java, args) ?: error("Method 'renderMap()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DefaultedConstructorArgument.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DefaultedConstructorArgument")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class DefaultedConstructorArgument : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(arg1: kotlin.Number?, arg2: kotlin.String?, arg3: java.time.Instant?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            arg1 ?: error("'arg1' should be present"),
            arg2 ?: error("'arg2' should be present"),
            arg3 ?: error("'arg3' should be present")
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val arg1: kotlin.Number
        get() {
            return this.jsiiGet("arg1", kotlin.Number::class.java) ?: error("'arg1' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val arg3: java.time.Instant
        get() {
            return this.jsiiGet("arg3", java.time.Instant::class.java) ?: error("'arg3' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val arg2: kotlin.String?
        get() {
            return this.jsiiGet("arg2", kotlin.String::class.java)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Demonstrate982.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * 1.
 * 
 * call #takeThis() -> An ObjectRef will be provisioned for the value (it'll be re-used!)
 * 2. call #takeThisToo() -> The ObjectRef from before will need to be down-cased to the ParentStruct982 type
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Demonstrate982")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Demonstrate982 : software.amazon.jsii.JsiiObject {
    companion object {
        /**
         * It's dangerous to go alone!
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun takeThis(): software.amazon.jsii.tests.kotlin.calculator.ChildStruct982 {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Demonstrate982::class.java, "takeThis", software.amazon.jsii.tests.kotlin.calculator.ChildStruct982::class.java) ?: error("Method 'takeThis()' returned null value")
        }

        /**
         * It's dangerous to go alone!
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun takeThisToo(): software.amazon.jsii.tests.kotlin.calculator.ParentStruct982 {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Demonstrate982::class.java, "takeThisToo", software.amazon.jsii.tests.kotlin.calculator.ParentStruct982::class.java) ?: error("Method 'takeThisToo()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DeprecatedClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DeprecatedClass")
@Deprecated("a pretty boring class")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
open class DeprecatedClass : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(readonlyString: kotlin.String, mutableNumber: kotlin.Number?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            readonlyString,
            mutableNumber ?: error("'mutableNumber' should be present")
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @Deprecated("this is not always \\"wazoo\\", be ready to be disappointed")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    open val readonlyProperty: kotlin.String
        get() {
            return this.jsiiGet("readonlyProperty", kotlin.String::class.java) ?: error("'readonlyProperty' should be present")
        }

    @Deprecated("shouldn't have been mutable")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    open var mutableProperty: kotlin.Number?
        get() {
            return this.jsiiGet("mutableProperty", kotlin.Number::class.java)
        }
        set(v) {
            this.jsiiSet("mutableProperty", v)
        }

    @Deprecated("it was a bad idea")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    open fun method() {
        this.jsiiCall("method", kotlin.Unit::class.java) ?: error("Method 'method()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DeprecatedEnum.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@Deprecated("your deprecated selection of bad options")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
enum class DeprecatedEnum {
    @Deprecated("option A is not great")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    OPTION_A,

    @Deprecated("option B is kinda bad, too")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    OPTION_B,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DeprecatedStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@Deprecated("it just wraps a string")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
interface DeprecatedStruct : software.amazon.jsii.JsiiSerializable {
    @Deprecated("well, yeah")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    val readonlyProperty: kotlin.String

    class Builder {
        @Deprecated("well, yeah")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var readonlyProperty: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.DeprecatedStruct {
            val readonlyProperty = this.readonlyProperty ?: kotlin.error("Value for property 'readonlyProperty' must be specified")
            return \`Jsii$Proxy\`(readonlyProperty)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.DeprecatedStruct {
        @Deprecated("well, yeah")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val readonlyProperty: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.readonlyProperty = this.jsiiCall("readonlyProperty", kotlin.String::class.java) ?: error("'readonlyProperty' should be present")
        }

        constructor(readonlyProperty: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.readonlyProperty = readonlyProperty
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.DeprecatedStruct
            if (readonlyProperty != other.readonlyProperty) return false
            return true
        }

        override fun hashCode(): Int {
            return this.readonlyProperty.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("readonlyProperty", om.valueToTree(this.readonlyProperty))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DerivedClassHasNoProperties/Base.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.DerivedClassHasNoProperties

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DerivedClassHasNoProperties.Base")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Base : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var prop: kotlin.String
        get() {
            return this.jsiiGet("prop", kotlin.String::class.java) ?: error("'prop' should be present")
        }
        set(v) {
            this.jsiiSet("prop", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DerivedClassHasNoProperties/Derived.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.DerivedClassHasNoProperties

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DerivedClassHasNoProperties.Derived")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Derived : software.amazon.jsii.tests.kotlin.calculator.DerivedClassHasNoProperties.Base {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DerivedStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * A struct which derives from another struct.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface DerivedStruct : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.lib.MyFirstStruct {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val anotherRequired: java.time.Instant

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val bool: kotlin.Boolean

    /**
     * An example of a non primitive property.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val nonPrimitive: software.amazon.jsii.tests.kotlin.calculator.DoubleTrouble

    /**
     * This is optional.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val anotherOptional: kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue>?

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val optionalAny: kotlin.Any?

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val optionalArray: kotlin.collections.List<kotlin.String>?

    class Builder {
        /**
         * An awesome number value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var anumber: kotlin.Number? = null

        /**
         * A string value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var astring: kotlin.String? = null

        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        var firstOptional: kotlin.collections.List<kotlin.String>? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var anotherRequired: java.time.Instant? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var bool: kotlin.Boolean? = null

        /**
         * An example of a non primitive property.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var nonPrimitive: software.amazon.jsii.tests.kotlin.calculator.DoubleTrouble? = null

        /**
         * This is optional.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var anotherOptional: kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue>? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var optionalAny: kotlin.Any? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var optionalArray: kotlin.collections.List<kotlin.String>? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.DerivedStruct {
            val anumber = this.anumber ?: kotlin.error("Value for property 'anumber' must be specified")
            val astring = this.astring ?: kotlin.error("Value for property 'astring' must be specified")
            val firstOptional = this.firstOptional
            val anotherRequired = this.anotherRequired ?: kotlin.error("Value for property 'anotherRequired' must be specified")
            val bool = this.bool ?: kotlin.error("Value for property 'bool' must be specified")
            val nonPrimitive = this.nonPrimitive ?: kotlin.error("Value for property 'nonPrimitive' must be specified")
            val anotherOptional = this.anotherOptional
            val optionalAny = this.optionalAny
            val optionalArray = this.optionalArray
            return \`Jsii$Proxy\`(anumber, astring, firstOptional, anotherRequired, bool, nonPrimitive, anotherOptional, optionalAny, optionalArray)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.DerivedStruct {
        /**
         * An awesome number value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val anumber: kotlin.Number

        /**
         * A string value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val astring: kotlin.String

        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val firstOptional: kotlin.collections.List<kotlin.String>?

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val anotherRequired: java.time.Instant

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val bool: kotlin.Boolean

        /**
         * An example of a non primitive property.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val nonPrimitive: software.amazon.jsii.tests.kotlin.calculator.DoubleTrouble

        /**
         * This is optional.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val anotherOptional: kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue>?

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val optionalAny: kotlin.Any?

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val optionalArray: kotlin.collections.List<kotlin.String>?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.anumber = this.jsiiCall("anumber", kotlin.Number::class.java) ?: error("'anumber' should be present")
            this.astring = this.jsiiCall("astring", kotlin.String::class.java) ?: error("'astring' should be present")
            this.firstOptional = this.jsiiCall("firstOptional", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String>?
            this.anotherRequired = this.jsiiCall("anotherRequired", java.time.Instant::class.java) ?: error("'anotherRequired' should be present")
            this.bool = this.jsiiCall("bool", kotlin.Boolean::class.java) ?: error("'bool' should be present")
            this.nonPrimitive = this.jsiiCall("nonPrimitive", software.amazon.jsii.tests.kotlin.calculator.DoubleTrouble::class.java) ?: error("'nonPrimitive' should be present")
            this.anotherOptional = this.jsiiCall("anotherOptional", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue>?
            this.optionalAny = this.jsiiCall("optionalAny", kotlin.Any::class.java)
            this.optionalArray = this.jsiiCall("optionalArray", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String>?
        }

        constructor(anumber: kotlin.Number, astring: kotlin.String, firstOptional: kotlin.collections.List<kotlin.String>?, anotherRequired: java.time.Instant, bool: kotlin.Boolean, nonPrimitive: software.amazon.jsii.tests.kotlin.calculator.DoubleTrouble, anotherOptional: kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue>?, optionalAny: kotlin.Any?, optionalArray: kotlin.collections.List<kotlin.String>?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.anumber = anumber
            this.astring = astring
            this.firstOptional = firstOptional
            this.anotherRequired = anotherRequired
            this.bool = bool
            this.nonPrimitive = nonPrimitive
            this.anotherOptional = anotherOptional
            this.optionalAny = optionalAny
            this.optionalArray = optionalArray
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.DerivedStruct
            if (anumber != other.anumber) return false
            if (astring != other.astring) return false
            if (firstOptional != other.firstOptional) return false
            if (anotherRequired != other.anotherRequired) return false
            if (bool != other.bool) return false
            if (nonPrimitive != other.nonPrimitive) return false
            if (anotherOptional != other.anotherOptional) return false
            if (optionalAny != other.optionalAny) return false
            if (optionalArray != other.optionalArray) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.anumber.hashCode()
            result = 31 * result + (this.astring.hashCode())
            result = 31 * result + (this.firstOptional?.hashCode() ?: 0)
            result = 31 * result + (this.anotherRequired.hashCode())
            result = 31 * result + (this.bool.hashCode())
            result = 31 * result + (this.nonPrimitive.hashCode())
            result = 31 * result + (this.anotherOptional?.hashCode() ?: 0)
            result = 31 * result + (this.optionalAny?.hashCode() ?: 0)
            result = 31 * result + (this.optionalArray?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("anumber", om.valueToTree(this.anumber))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("astring", om.valueToTree(this.astring))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("firstOptional", om.valueToTree(this.firstOptional))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("anotherRequired", om.valueToTree(this.anotherRequired))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("bool", om.valueToTree(this.bool))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("nonPrimitive", om.valueToTree(this.nonPrimitive))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("anotherOptional", om.valueToTree(this.anotherOptional))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("optionalAny", om.valueToTree(this.optionalAny))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("optionalArray", om.valueToTree(this.optionalArray))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DiamondInheritanceBaseLevelStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface DiamondInheritanceBaseLevelStruct : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val baseLevelProperty: kotlin.String

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var baseLevelProperty: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceBaseLevelStruct {
            val baseLevelProperty = this.baseLevelProperty ?: kotlin.error("Value for property 'baseLevelProperty' must be specified")
            return \`Jsii$Proxy\`(baseLevelProperty)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceBaseLevelStruct {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val baseLevelProperty: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.baseLevelProperty = this.jsiiCall("baseLevelProperty", kotlin.String::class.java) ?: error("'baseLevelProperty' should be present")
        }

        constructor(baseLevelProperty: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.baseLevelProperty = baseLevelProperty
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceBaseLevelStruct
            if (baseLevelProperty != other.baseLevelProperty) return false
            return true
        }

        override fun hashCode(): Int {
            return this.baseLevelProperty.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("baseLevelProperty", om.valueToTree(this.baseLevelProperty))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DiamondInheritanceFirstMidLevelStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface DiamondInheritanceFirstMidLevelStruct : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceBaseLevelStruct {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val firstMidLevelProperty: kotlin.String

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var baseLevelProperty: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var firstMidLevelProperty: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceFirstMidLevelStruct {
            val baseLevelProperty = this.baseLevelProperty ?: kotlin.error("Value for property 'baseLevelProperty' must be specified")
            val firstMidLevelProperty = this.firstMidLevelProperty ?: kotlin.error("Value for property 'firstMidLevelProperty' must be specified")
            return \`Jsii$Proxy\`(baseLevelProperty, firstMidLevelProperty)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceFirstMidLevelStruct {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val baseLevelProperty: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val firstMidLevelProperty: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.baseLevelProperty = this.jsiiCall("baseLevelProperty", kotlin.String::class.java) ?: error("'baseLevelProperty' should be present")
            this.firstMidLevelProperty = this.jsiiCall("firstMidLevelProperty", kotlin.String::class.java) ?: error("'firstMidLevelProperty' should be present")
        }

        constructor(baseLevelProperty: kotlin.String, firstMidLevelProperty: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.baseLevelProperty = baseLevelProperty
            this.firstMidLevelProperty = firstMidLevelProperty
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceFirstMidLevelStruct
            if (baseLevelProperty != other.baseLevelProperty) return false
            if (firstMidLevelProperty != other.firstMidLevelProperty) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.baseLevelProperty.hashCode()
            result = 31 * result + (this.firstMidLevelProperty.hashCode())
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("baseLevelProperty", om.valueToTree(this.baseLevelProperty))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("firstMidLevelProperty", om.valueToTree(this.firstMidLevelProperty))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DiamondInheritanceSecondMidLevelStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface DiamondInheritanceSecondMidLevelStruct : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceBaseLevelStruct {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val secondMidLevelProperty: kotlin.String

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var baseLevelProperty: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var secondMidLevelProperty: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceSecondMidLevelStruct {
            val baseLevelProperty = this.baseLevelProperty ?: kotlin.error("Value for property 'baseLevelProperty' must be specified")
            val secondMidLevelProperty = this.secondMidLevelProperty ?: kotlin.error("Value for property 'secondMidLevelProperty' must be specified")
            return \`Jsii$Proxy\`(baseLevelProperty, secondMidLevelProperty)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceSecondMidLevelStruct {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val baseLevelProperty: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val secondMidLevelProperty: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.baseLevelProperty = this.jsiiCall("baseLevelProperty", kotlin.String::class.java) ?: error("'baseLevelProperty' should be present")
            this.secondMidLevelProperty = this.jsiiCall("secondMidLevelProperty", kotlin.String::class.java) ?: error("'secondMidLevelProperty' should be present")
        }

        constructor(baseLevelProperty: kotlin.String, secondMidLevelProperty: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.baseLevelProperty = baseLevelProperty
            this.secondMidLevelProperty = secondMidLevelProperty
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceSecondMidLevelStruct
            if (baseLevelProperty != other.baseLevelProperty) return false
            if (secondMidLevelProperty != other.secondMidLevelProperty) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.baseLevelProperty.hashCode()
            result = 31 * result + (this.secondMidLevelProperty.hashCode())
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("baseLevelProperty", om.valueToTree(this.baseLevelProperty))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("secondMidLevelProperty", om.valueToTree(this.secondMidLevelProperty))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DiamondInheritanceTopLevelStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface DiamondInheritanceTopLevelStruct : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceFirstMidLevelStruct, software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceSecondMidLevelStruct {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val topLevelProperty: kotlin.String

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var baseLevelProperty: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var firstMidLevelProperty: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var secondMidLevelProperty: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var topLevelProperty: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceTopLevelStruct {
            val baseLevelProperty = this.baseLevelProperty ?: kotlin.error("Value for property 'baseLevelProperty' must be specified")
            val firstMidLevelProperty = this.firstMidLevelProperty ?: kotlin.error("Value for property 'firstMidLevelProperty' must be specified")
            val secondMidLevelProperty = this.secondMidLevelProperty ?: kotlin.error("Value for property 'secondMidLevelProperty' must be specified")
            val topLevelProperty = this.topLevelProperty ?: kotlin.error("Value for property 'topLevelProperty' must be specified")
            return \`Jsii$Proxy\`(baseLevelProperty, firstMidLevelProperty, secondMidLevelProperty, topLevelProperty)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceTopLevelStruct {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val baseLevelProperty: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val firstMidLevelProperty: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val secondMidLevelProperty: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val topLevelProperty: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.baseLevelProperty = this.jsiiCall("baseLevelProperty", kotlin.String::class.java) ?: error("'baseLevelProperty' should be present")
            this.firstMidLevelProperty = this.jsiiCall("firstMidLevelProperty", kotlin.String::class.java) ?: error("'firstMidLevelProperty' should be present")
            this.secondMidLevelProperty = this.jsiiCall("secondMidLevelProperty", kotlin.String::class.java) ?: error("'secondMidLevelProperty' should be present")
            this.topLevelProperty = this.jsiiCall("topLevelProperty", kotlin.String::class.java) ?: error("'topLevelProperty' should be present")
        }

        constructor(baseLevelProperty: kotlin.String, firstMidLevelProperty: kotlin.String, secondMidLevelProperty: kotlin.String, topLevelProperty: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.baseLevelProperty = baseLevelProperty
            this.firstMidLevelProperty = firstMidLevelProperty
            this.secondMidLevelProperty = secondMidLevelProperty
            this.topLevelProperty = topLevelProperty
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.DiamondInheritanceTopLevelStruct
            if (baseLevelProperty != other.baseLevelProperty) return false
            if (firstMidLevelProperty != other.firstMidLevelProperty) return false
            if (secondMidLevelProperty != other.secondMidLevelProperty) return false
            if (topLevelProperty != other.topLevelProperty) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.baseLevelProperty.hashCode()
            result = 31 * result + (this.firstMidLevelProperty.hashCode())
            result = 31 * result + (this.secondMidLevelProperty.hashCode())
            result = 31 * result + (this.topLevelProperty.hashCode())
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("baseLevelProperty", om.valueToTree(this.baseLevelProperty))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("firstMidLevelProperty", om.valueToTree(this.firstMidLevelProperty))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("secondMidLevelProperty", om.valueToTree(this.secondMidLevelProperty))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("topLevelProperty", om.valueToTree(this.topLevelProperty))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DisappointingCollectionSource.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Verifies that null/undefined can be returned for optional collections.
 * 
 * This source of collections is disappointing - it'll always give you nothing :(
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DisappointingCollectionSource")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class DisappointingCollectionSource : software.amazon.jsii.JsiiObject {
    companion object {
        /**
         * Some List of strings, maybe?
         * 
         * (Nah, just a billion dollars mistake!)
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        val maybeList: kotlin.collections.List<kotlin.String>?
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.DisappointingCollectionSource::class.java, "maybeList", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String>?
            }

        /**
         * Some Map of strings to numbers, maybe?
         * 
         * (Nah, just a billion dollars mistake!)
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        val maybeMap: kotlin.collections.Map<kotlin.String, kotlin.Number>?
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.DisappointingCollectionSource::class.java, "maybeMap", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, kotlin.Number>?
            }

    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DoNotOverridePrivates.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DoNotOverridePrivates")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class DoNotOverridePrivates : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun changePrivatePropertyValue(newValue: kotlin.String) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            newValue
        )
        this.jsiiCall("changePrivatePropertyValue", kotlin.Unit::class.java, args) ?: error("Method 'changePrivatePropertyValue()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun privateMethodValue(): kotlin.String {
        return this.jsiiCall("privateMethodValue", kotlin.String::class.java) ?: error("Method 'privateMethodValue()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun privatePropertyValue(): kotlin.String {
        return this.jsiiCall("privatePropertyValue", kotlin.String::class.java) ?: error("Method 'privatePropertyValue()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DoNotRecognizeAnyAsOptional.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * jsii#284: do not recognize "any" as an optional argument.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DoNotRecognizeAnyAsOptional")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class DoNotRecognizeAnyAsOptional : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun method(_requiredAny: kotlin.Any, _optionalAny: kotlin.Any?, _optionalString: kotlin.String?) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            _requiredAny,
            _optionalAny ?: error("'_optionalAny' should be present"),
            _optionalString ?: error("'_optionalString' should be present")
        )
        this.jsiiCall("method", kotlin.Unit::class.java, args) ?: error("Method 'method()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DocumentedClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Here's the first line of the TSDoc comment.
 * 
 * This is the meat of the TSDoc comment. It may contain
 * multiple lines and multiple paragraphs.
 * 
 * Multiple paragraphs are separated by an empty line.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DocumentedClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class DocumentedClass : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    /**
     * Greet the indicated person.
     * 
     * This will print out a friendly greeting intended for
     * the indicated person.
     * 
     * @return A number that everyone knows very well
     * 
     * @param greeteeThe person to be greeted.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun greet(greetee: software.amazon.jsii.tests.kotlin.calculator.Greetee?): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            greetee ?: error("'greetee' should be present")
        )
        return this.jsiiCall("greet", kotlin.Number::class.java, args) ?: error("Method 'greet()' returned null value")
    }

    /**
     * Say ¡Hola!
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    open fun hola() {
        this.jsiiCall("hola", kotlin.Unit::class.java) ?: error("Method 'hola()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DontComplainAboutVariadicAfterOptional.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DontComplainAboutVariadicAfterOptional")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class DontComplainAboutVariadicAfterOptional : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun optionalAndVariadic(optional: kotlin.String?, vararg things: kotlin.String): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            optional ?: error("'optional' should be present"),
            things
        )
        return this.jsiiCall("optionalAndVariadic", kotlin.String::class.java, args) ?: error("Method 'optionalAndVariadic()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DoubleTrouble.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DoubleTrouble")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class DoubleTrouble : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IFriendlyRandomGenerator {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    /**
     * (deprecated) Say hello!
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun hello(): kotlin.String {
        return this.jsiiCall("hello", kotlin.String::class.java) ?: error("Method 'hello()' returned null value")
    }

    /**
     * Returns another random number.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun next(): kotlin.Number {
        return this.jsiiCall("next", kotlin.Number::class.java) ?: error("Method 'next()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DynamicPropertyBearer.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Ensures we can override a dynamic property that was inherited.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DynamicPropertyBearer")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class DynamicPropertyBearer : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(valueStore: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            valueStore
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var dynamicProperty: kotlin.String
        get() {
            return this.jsiiGet("dynamicProperty", kotlin.String::class.java) ?: error("'dynamicProperty' should be present")
        }
        set(v) {
            this.jsiiSet("dynamicProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var valueStore: kotlin.String
        get() {
            return this.jsiiGet("valueStore", kotlin.String::class.java) ?: error("'valueStore' should be present")
        }
        set(v) {
            this.jsiiSet("valueStore", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/DynamicPropertyBearerChild.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.DynamicPropertyBearerChild")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class DynamicPropertyBearerChild : software.amazon.jsii.tests.kotlin.calculator.DynamicPropertyBearer {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(originalValue: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            originalValue
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val originalValue: kotlin.String
        get() {
            return this.jsiiGet("originalValue", kotlin.String::class.java) ?: error("'originalValue' should be present")
        }

    /**
     * Sets \`this.dynamicProperty\` to the new value, and returns the old value.
     * 
     * @return the old value that was set.
     * 
     * @param newValuethe new value to be set.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun overrideValue(newValue: kotlin.String): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            newValue
        )
        return this.jsiiCall("overrideValue", kotlin.String::class.java, args) ?: error("Method 'overrideValue()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Entropy.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * This class is used to validate that serialization and deserialization does not interpret ISO-8601-formatted timestampts to the native date/time object, as the jsii protocol has a $jsii$date wrapper for this purpose (node's JSON parsing does *NOT* detect dates automatically in this way, so host libraries should not either).
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Entropy")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class Entropy : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    /**
     * Creates a new instance of Entropy.
     */
    constructor(clock: software.amazon.jsii.tests.kotlin.calculator.IWallClock) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            clock
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    /**
     * Increases entropy by consuming time from the clock (yes, this is a long shot, please don't judge).
     * 
     * @return the time from the \`WallClock\`.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun increase(): kotlin.String {
        return this.jsiiCall("increase", kotlin.String::class.java) ?: error("Method 'increase()' returned null value")
    }

    /**
     * Implement this method such that it returns \`word\`.
     * 
     * @return \`word\`.
     * 
     * @param wordthe value to return.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    abstract fun repeat(word: kotlin.String): kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.Entropy {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * Increases entropy by consuming time from the clock (yes, this is a long shot, please don't judge).
         * 
         * @return the time from the \`WallClock\`.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun increase(): kotlin.String {
            return this.jsiiCall("increase", kotlin.String::class.java) ?: error("Method 'increase()' returned null value")
        }

        /**
         * Implement this method such that it returns \`word\`.
         * 
         * @return \`word\`.
         * 
         * @param wordthe value to return.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun repeat(word: kotlin.String): kotlin.String {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                word
            )
            return this.jsiiCall("repeat", kotlin.String::class.java, args) ?: error("Method 'repeat()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/EnumDispenser.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.EnumDispenser")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class EnumDispenser : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun randomIntegerLikeEnum(): software.amazon.jsii.tests.kotlin.calculator.AllTypesEnum {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.EnumDispenser::class.java, "randomIntegerLikeEnum", software.amazon.jsii.tests.kotlin.calculator.AllTypesEnum::class.java) ?: error("Method 'randomIntegerLikeEnum()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun randomStringLikeEnum(): software.amazon.jsii.tests.kotlin.calculator.StringEnum {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.EnumDispenser::class.java, "randomStringLikeEnum", software.amazon.jsii.tests.kotlin.calculator.StringEnum::class.java) ?: error("Method 'randomStringLikeEnum()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/EraseUndefinedHashValues.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.EraseUndefinedHashValues")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class EraseUndefinedHashValues : software.amazon.jsii.JsiiObject {
    companion object {
        /**
         * Returns \`true\` if \`key\` is defined in \`opts\`.
         * 
         * Used to check that undefined/null hash values
         * are being erased when sending values from native code to JS.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun doesKeyExist(opts: software.amazon.jsii.tests.kotlin.calculator.EraseUndefinedHashValuesOptions, key: kotlin.String): kotlin.Boolean {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                opts,
                key
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.EraseUndefinedHashValues::class.java, "doesKeyExist", kotlin.Boolean::class.java, args) ?: error("Method 'doesKeyExist()' returned null value")
        }

        /**
         * We expect "prop1" to be erased.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun prop1IsNull(): kotlin.collections.Map<kotlin.String, kotlin.Any> {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.EraseUndefinedHashValues::class.java, "prop1IsNull", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, kotlin.Any> ?: error("Method 'prop1IsNull()' returned null value")
        }

        /**
         * We expect "prop2" to be erased.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun prop2IsUndefined(): kotlin.collections.Map<kotlin.String, kotlin.Any> {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.EraseUndefinedHashValues::class.java, "prop2IsUndefined", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, kotlin.Any> ?: error("Method 'prop2IsUndefined()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/EraseUndefinedHashValuesOptions.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface EraseUndefinedHashValuesOptions : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val option1: kotlin.String?

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val option2: kotlin.String?

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var option1: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var option2: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.EraseUndefinedHashValuesOptions {
            val option1 = this.option1
            val option2 = this.option2
            return \`Jsii$Proxy\`(option1, option2)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.EraseUndefinedHashValuesOptions {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val option1: kotlin.String?

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val option2: kotlin.String?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.option1 = this.jsiiCall("option1", kotlin.String::class.java)
            this.option2 = this.jsiiCall("option2", kotlin.String::class.java)
        }

        constructor(option1: kotlin.String?, option2: kotlin.String?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.option1 = option1
            this.option2 = option2
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.EraseUndefinedHashValuesOptions
            if (option1 != other.option1) return false
            if (option2 != other.option2) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.option1?.hashCode() ?: 0
            result = 31 * result + (this.option2?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("option1", om.valueToTree(this.option1))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("option2", om.valueToTree(this.option2))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ExperimentalClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ExperimentalClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
open class ExperimentalClass : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(readonlyString: kotlin.String, mutableNumber: kotlin.Number?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            readonlyString,
            mutableNumber ?: error("'mutableNumber' should be present")
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    open val readonlyProperty: kotlin.String
        get() {
            return this.jsiiGet("readonlyProperty", kotlin.String::class.java) ?: error("'readonlyProperty' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    open var mutableProperty: kotlin.Number?
        get() {
            return this.jsiiGet("mutableProperty", kotlin.Number::class.java)
        }
        set(v) {
            this.jsiiSet("mutableProperty", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    open fun method() {
        this.jsiiCall("method", kotlin.Unit::class.java) ?: error("Method 'method()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ExperimentalEnum.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
enum class ExperimentalEnum {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    OPTION_A,

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    OPTION_B,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ExperimentalStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
interface ExperimentalStruct : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    val readonlyProperty: kotlin.String

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        var readonlyProperty: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.ExperimentalStruct {
            val readonlyProperty = this.readonlyProperty ?: kotlin.error("Value for property 'readonlyProperty' must be specified")
            return \`Jsii$Proxy\`(readonlyProperty)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.ExperimentalStruct {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        override val readonlyProperty: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.readonlyProperty = this.jsiiCall("readonlyProperty", kotlin.String::class.java) ?: error("'readonlyProperty' should be present")
        }

        constructor(readonlyProperty: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.readonlyProperty = readonlyProperty
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.ExperimentalStruct
            if (readonlyProperty != other.readonlyProperty) return false
            return true
        }

        override fun hashCode(): Int {
            return this.readonlyProperty.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("readonlyProperty", om.valueToTree(this.readonlyProperty))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ExportedBaseClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ExportedBaseClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ExportedBaseClass : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(success: kotlin.Boolean) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            success
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val success: kotlin.Boolean
        get() {
            return this.jsiiGet("success", kotlin.Boolean::class.java) ?: error("'success' should be present")
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ExtendsInternalInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface ExtendsInternalInterface : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val boom: kotlin.Boolean

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val prop: kotlin.String

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var boom: kotlin.Boolean? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var prop: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.ExtendsInternalInterface {
            val boom = this.boom ?: kotlin.error("Value for property 'boom' must be specified")
            val prop = this.prop ?: kotlin.error("Value for property 'prop' must be specified")
            return \`Jsii$Proxy\`(boom, prop)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.ExtendsInternalInterface {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val boom: kotlin.Boolean

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val prop: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.boom = this.jsiiCall("boom", kotlin.Boolean::class.java) ?: error("'boom' should be present")
            this.prop = this.jsiiCall("prop", kotlin.String::class.java) ?: error("'prop' should be present")
        }

        constructor(boom: kotlin.Boolean, prop: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.boom = boom
            this.prop = prop
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.ExtendsInternalInterface
            if (boom != other.boom) return false
            if (prop != other.prop) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.boom.hashCode()
            result = 31 * result + (this.prop.hashCode())
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("boom", om.valueToTree(this.boom))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("prop", om.valueToTree(this.prop))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ExternalClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ExternalClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ExternalClass : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(readonlyString: kotlin.String, mutableNumber: kotlin.Number?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            readonlyString,
            mutableNumber ?: error("'mutableNumber' should be present")
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val readonlyProperty: kotlin.String
        get() {
            return this.jsiiGet("readonlyProperty", kotlin.String::class.java) ?: error("'readonlyProperty' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var mutableProperty: kotlin.Number?
        get() {
            return this.jsiiGet("mutableProperty", kotlin.Number::class.java)
        }
        set(v) {
            this.jsiiSet("mutableProperty", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun method() {
        this.jsiiCall("method", kotlin.Unit::class.java) ?: error("Method 'method()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ExternalEnum.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
enum class ExternalEnum {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    OPTION_A,

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    OPTION_B,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ExternalStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface ExternalStruct : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val readonlyProperty: kotlin.String

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var readonlyProperty: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.ExternalStruct {
            val readonlyProperty = this.readonlyProperty ?: kotlin.error("Value for property 'readonlyProperty' must be specified")
            return \`Jsii$Proxy\`(readonlyProperty)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.ExternalStruct {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val readonlyProperty: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.readonlyProperty = this.jsiiCall("readonlyProperty", kotlin.String::class.java) ?: error("'readonlyProperty' should be present")
        }

        constructor(readonlyProperty: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.readonlyProperty = readonlyProperty
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.ExternalStruct
            if (readonlyProperty != other.readonlyProperty) return false
            return true
        }

        override fun hashCode(): Int {
            return this.readonlyProperty.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("readonlyProperty", om.valueToTree(this.readonlyProperty))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/GiveMeStructs.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.GiveMeStructs")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class GiveMeStructs : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val structLiteral: software.amazon.jsii.tests.kotlin.calculator.lib.StructWithOnlyOptionals
        get() {
            return this.jsiiGet("structLiteral", software.amazon.jsii.tests.kotlin.calculator.lib.StructWithOnlyOptionals::class.java) ?: error("'structLiteral' should be present")
        }

    /**
     * Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun derivedToFirst(derived: software.amazon.jsii.tests.kotlin.calculator.DerivedStruct): software.amazon.jsii.tests.kotlin.calculator.lib.MyFirstStruct {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            derived
        )
        return this.jsiiCall("derivedToFirst", software.amazon.jsii.tests.kotlin.calculator.lib.MyFirstStruct::class.java, args) ?: error("Method 'derivedToFirst()' returned null value")
    }

    /**
     * Returns the boolean from a DerivedStruct struct.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun readDerivedNonPrimitive(derived: software.amazon.jsii.tests.kotlin.calculator.DerivedStruct): software.amazon.jsii.tests.kotlin.calculator.DoubleTrouble {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            derived
        )
        return this.jsiiCall("readDerivedNonPrimitive", software.amazon.jsii.tests.kotlin.calculator.DoubleTrouble::class.java, args) ?: error("Method 'readDerivedNonPrimitive()' returned null value")
    }

    /**
     * Returns the "anumber" from a MyFirstStruct struct;
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun readFirstNumber(first: software.amazon.jsii.tests.kotlin.calculator.lib.MyFirstStruct): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            first
        )
        return this.jsiiCall("readFirstNumber", kotlin.Number::class.java, args) ?: error("Method 'readFirstNumber()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Greetee.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * These are some arguments you can pass to a method.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface Greetee : software.amazon.jsii.JsiiSerializable {
    /**
     * The name of the greetee.
     * 
     * Default: world
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val name: kotlin.String?

    class Builder {
        /**
         * The name of the greetee.
         * 
         * Default: world
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var name: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.Greetee {
            val name = this.name
            return \`Jsii$Proxy\`(name)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.Greetee {
        /**
         * The name of the greetee.
         * 
         * Default: world
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val name: kotlin.String?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.name = this.jsiiCall("name", kotlin.String::class.java)
        }

        constructor(name: kotlin.String?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.name = name
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.Greetee
            if (name != other.name) return false
            return true
        }

        override fun hashCode(): Int {
            return this.name?.hashCode() ?: 0
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("name", om.valueToTree(this.name))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/GreetingAugmenter.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.GreetingAugmenter")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class GreetingAugmenter : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun betterGreeting(friendly: software.amazon.jsii.tests.kotlin.calculator.lib.IFriendly): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            friendly
        )
        return this.jsiiCall("betterGreeting", kotlin.String::class.java, args) ?: error("Method 'betterGreeting()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IAnonymousImplementationProvider.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * We can return an anonymous interface implementation from an override without losing the interface declarations.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IAnonymousImplementationProvider : software.amazon.jsii.JsiiSerializable {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun provideAsClass(): software.amazon.jsii.tests.kotlin.calculator.Implementation

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun provideAsInterface(): software.amazon.jsii.tests.kotlin.calculator.IAnonymouslyImplementMe

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IAnonymousImplementationProvider {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun provideAsClass(): software.amazon.jsii.tests.kotlin.calculator.Implementation {
            return this.jsiiCall("provideAsClass", software.amazon.jsii.tests.kotlin.calculator.Implementation::class.java) ?: error("Method 'provideAsClass()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun provideAsInterface(): software.amazon.jsii.tests.kotlin.calculator.IAnonymouslyImplementMe {
            return this.jsiiCall("provideAsInterface", software.amazon.jsii.tests.kotlin.calculator.IAnonymouslyImplementMe::class.java) ?: error("Method 'provideAsInterface()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IAnonymouslyImplementMe.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IAnonymouslyImplementMe : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val value: kotlin.Number

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun verb(): kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IAnonymouslyImplementMe {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val value: kotlin.Number
            get() {
                return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun verb(): kotlin.String {
            return this.jsiiCall("verb", kotlin.String::class.java) ?: error("Method 'verb()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IAnotherPublicInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IAnotherPublicInterface : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    var a: kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IAnotherPublicInterface {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var a: kotlin.String
            get() {
                return this.jsiiGet("a", kotlin.String::class.java) ?: error("'a' should be present")
            }
            set(v) {
                this.jsiiSet("a", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IBell.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IBell : software.amazon.jsii.JsiiSerializable {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun ring()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IBell {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun ring() {
            this.jsiiCall("ring", kotlin.Unit::class.java) ?: error("Method 'ring()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IBellRinger.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Takes the object parameter as an interface.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IBellRinger : software.amazon.jsii.JsiiSerializable {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun yourTurn(bell: software.amazon.jsii.tests.kotlin.calculator.IBell)

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IBellRinger {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun yourTurn(bell: software.amazon.jsii.tests.kotlin.calculator.IBell) {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                bell
            )
            this.jsiiCall("yourTurn", kotlin.Unit::class.java, args) ?: error("Method 'yourTurn()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IConcreteBellRinger.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Takes the object parameter as a calss.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IConcreteBellRinger : software.amazon.jsii.JsiiSerializable {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun yourTurn(bell: software.amazon.jsii.tests.kotlin.calculator.Bell)

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IConcreteBellRinger {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun yourTurn(bell: software.amazon.jsii.tests.kotlin.calculator.Bell) {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                bell
            )
            this.jsiiCall("yourTurn", kotlin.Unit::class.java, args) ?: error("Method 'yourTurn()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IDeprecatedInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@Deprecated("useless interface")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
interface IDeprecatedInterface : software.amazon.jsii.JsiiSerializable {
    @Deprecated("could be better")
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    var mutableProperty: kotlin.Number?

    @Deprecated("services no purpose")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    fun method()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IDeprecatedInterface {
        @Deprecated("could be better")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override var mutableProperty: kotlin.Number?
            get() {
                return this.jsiiGet("mutableProperty", kotlin.Number::class.java)
            }
            set(v) {
                this.jsiiSet("mutableProperty", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @Deprecated("services no purpose")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun method() {
            this.jsiiCall("method", kotlin.Unit::class.java) ?: error("Method 'method()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IExperimentalInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
interface IExperimentalInterface : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    var mutableProperty: kotlin.Number?

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
    fun method()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IExperimentalInterface {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        override var mutableProperty: kotlin.Number?
            get() {
                return this.jsiiGet("mutableProperty", kotlin.Number::class.java)
            }
            set(v) {
                this.jsiiSet("mutableProperty", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Experimental)
        override fun method() {
            this.jsiiCall("method", kotlin.Unit::class.java) ?: error("Method 'method()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IExtendsPrivateInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IExtendsPrivateInterface : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val moreThings: kotlin.collections.List<kotlin.String>

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    var privateValue: kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IExtendsPrivateInterface {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val moreThings: kotlin.collections.List<kotlin.String>
            get() {
                return this.jsiiGet("moreThings", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String> ?: error("'moreThings' should be present")
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var privateValue: kotlin.String
            get() {
                return this.jsiiGet("private", kotlin.String::class.java) ?: error("'private' should be present")
            }
            set(v) {
                this.jsiiSet("private", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IExternalInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IExternalInterface : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    var mutableProperty: kotlin.Number?

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun method()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IExternalInterface {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var mutableProperty: kotlin.Number?
            get() {
                return this.jsiiGet("mutableProperty", kotlin.Number::class.java)
            }
            set(v) {
                this.jsiiSet("mutableProperty", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun method() {
            this.jsiiCall("method", kotlin.Unit::class.java) ?: error("Method 'method()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IFriendlier.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Even friendlier classes can implement this interface.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IFriendlier : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.lib.IFriendly {
    /**
     * Say farewell.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun farewell(): kotlin.String

    /**
     * Say goodbye.
     * 
     * @return A goodbye blessing.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun goodbye(): kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IFriendlier {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * Say hello!
         */
        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun hello(): kotlin.String {
            return this.jsiiCall("hello", kotlin.String::class.java) ?: error("Method 'hello()' returned null value")
        }

        /**
         * Say farewell.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun farewell(): kotlin.String {
            return this.jsiiCall("farewell", kotlin.String::class.java) ?: error("Method 'farewell()' returned null value")
        }

        /**
         * Say goodbye.
         * 
         * @return A goodbye blessing.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun goodbye(): kotlin.String {
            return this.jsiiCall("goodbye", kotlin.String::class.java) ?: error("Method 'goodbye()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IFriendlyRandomGenerator.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IFriendlyRandomGenerator : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.IRandomNumberGenerator, software.amazon.jsii.tests.kotlin.calculator.lib.IFriendly {
    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IFriendlyRandomGenerator {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * Returns another random number.
         * 
         * @return A random number.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun next(): kotlin.Number {
            return this.jsiiCall("next", kotlin.Number::class.java) ?: error("Method 'next()' returned null value")
        }

        /**
         * Say hello!
         */
        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun hello(): kotlin.String {
            return this.jsiiCall("hello", kotlin.String::class.java) ?: error("Method 'hello()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IInterfaceImplementedByAbstractClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * awslabs/jsii#220 Abstract return type.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IInterfaceImplementedByAbstractClass : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val propFromInterface: kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IInterfaceImplementedByAbstractClass {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val propFromInterface: kotlin.String
            get() {
                return this.jsiiGet("propFromInterface", kotlin.String::class.java) ?: error("'propFromInterface' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IInterfaceThatShouldNotBeADataType.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IInterfaceThatShouldNotBeADataType : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithMethods {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val otherValue: kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IInterfaceThatShouldNotBeADataType {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val value: kotlin.String
            get() {
                return this.jsiiGet("value", kotlin.String::class.java) ?: error("'value' should be present")
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val otherValue: kotlin.String
            get() {
                return this.jsiiGet("otherValue", kotlin.String::class.java) ?: error("'otherValue' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun doThings() {
            this.jsiiCall("doThings", kotlin.Unit::class.java) ?: error("Method 'doThings()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IInterfaceWithInternal.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IInterfaceWithInternal : software.amazon.jsii.JsiiSerializable {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun visible()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithInternal {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun visible() {
            this.jsiiCall("visible", kotlin.Unit::class.java) ?: error("Method 'visible()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IInterfaceWithMethods.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IInterfaceWithMethods : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val value: kotlin.String

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun doThings()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithMethods {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val value: kotlin.String
            get() {
                return this.jsiiGet("value", kotlin.String::class.java) ?: error("'value' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun doThings() {
            this.jsiiCall("doThings", kotlin.Unit::class.java) ?: error("Method 'doThings()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IInterfaceWithOptionalMethodArguments.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IInterfaceWithOptionalMethodArguments : software.amazon.jsii.JsiiSerializable {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun hello(arg1: kotlin.String, arg2: kotlin.Number?)

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithOptionalMethodArguments {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun hello(arg1: kotlin.String, arg2: kotlin.Number?) {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                arg1,
                arg2 ?: error("'arg2' should be present")
            )
            this.jsiiCall("hello", kotlin.Unit::class.java, args) ?: error("Method 'hello()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IInterfaceWithProperties.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IInterfaceWithProperties : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val readOnlyString: kotlin.String

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    var readWriteString: kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithProperties {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val readOnlyString: kotlin.String
            get() {
                return this.jsiiGet("readOnlyString", kotlin.String::class.java) ?: error("'readOnlyString' should be present")
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var readWriteString: kotlin.String
            get() {
                return this.jsiiGet("readWriteString", kotlin.String::class.java) ?: error("'readWriteString' should be present")
            }
            set(v) {
                this.jsiiSet("readWriteString", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IInterfaceWithPropertiesExtension.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IInterfaceWithPropertiesExtension : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithProperties {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    var foo: kotlin.Number

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithPropertiesExtension {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val readOnlyString: kotlin.String
            get() {
                return this.jsiiGet("readOnlyString", kotlin.String::class.java) ?: error("'readOnlyString' should be present")
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var readWriteString: kotlin.String
            get() {
                return this.jsiiGet("readWriteString", kotlin.String::class.java) ?: error("'readWriteString' should be present")
            }
            set(v) {
                this.jsiiSet("readWriteString", v)
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var foo: kotlin.Number
            get() {
                return this.jsiiGet("foo", kotlin.Number::class.java) ?: error("'foo' should be present")
            }
            set(v) {
                this.jsiiSet("foo", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IJSII417Derived.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IJSII417Derived : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.IJSII417PublicBaseOfBase {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val propertyValue: kotlin.String

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun bar()

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun baz()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IJSII417Derived {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val hasRoot: kotlin.Boolean
            get() {
                return this.jsiiGet("hasRoot", kotlin.Boolean::class.java) ?: error("'hasRoot' should be present")
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val propertyValue: kotlin.String
            get() {
                return this.jsiiGet("property", kotlin.String::class.java) ?: error("'property' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun foo() {
            this.jsiiCall("foo", kotlin.Unit::class.java) ?: error("Method 'foo()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun bar() {
            this.jsiiCall("bar", kotlin.Unit::class.java) ?: error("Method 'bar()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun baz() {
            this.jsiiCall("baz", kotlin.Unit::class.java) ?: error("Method 'baz()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IJSII417PublicBaseOfBase.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IJSII417PublicBaseOfBase : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val hasRoot: kotlin.Boolean

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun foo()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IJSII417PublicBaseOfBase {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val hasRoot: kotlin.Boolean
            get() {
                return this.jsiiGet("hasRoot", kotlin.Boolean::class.java) ?: error("'hasRoot' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun foo() {
            this.jsiiCall("foo", kotlin.Unit::class.java) ?: error("Method 'foo()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IJsii487External.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IJsii487External : software.amazon.jsii.JsiiSerializable {
    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IJsii487External {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IJsii487External2.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IJsii487External2 : software.amazon.jsii.JsiiSerializable {
    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IJsii487External2 {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IJsii496.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IJsii496 : software.amazon.jsii.JsiiSerializable {
    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IJsii496 {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IMutableObjectLiteral.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IMutableObjectLiteral : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    var value: kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IMutableObjectLiteral {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var value: kotlin.String
            get() {
                return this.jsiiGet("value", kotlin.String::class.java) ?: error("'value' should be present")
            }
            set(v) {
                this.jsiiSet("value", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/INonInternalInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface INonInternalInterface : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.IAnotherPublicInterface {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    var b: kotlin.String

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    var c: kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.INonInternalInterface {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var a: kotlin.String
            get() {
                return this.jsiiGet("a", kotlin.String::class.java) ?: error("'a' should be present")
            }
            set(v) {
                this.jsiiSet("a", v)
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var b: kotlin.String
            get() {
                return this.jsiiGet("b", kotlin.String::class.java) ?: error("'b' should be present")
            }
            set(v) {
                this.jsiiSet("b", v)
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var c: kotlin.String
            get() {
                return this.jsiiGet("c", kotlin.String::class.java) ?: error("'c' should be present")
            }
            set(v) {
                this.jsiiSet("c", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IObjectWithProperty.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Make sure that setters are properly called on objects with interfaces.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IObjectWithProperty : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    var propertyValue: kotlin.String

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun wasSet(): kotlin.Boolean

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IObjectWithProperty {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var propertyValue: kotlin.String
            get() {
                return this.jsiiGet("property", kotlin.String::class.java) ?: error("'property' should be present")
            }
            set(v) {
                this.jsiiSet("property", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun wasSet(): kotlin.Boolean {
            return this.jsiiCall("wasSet", kotlin.Boolean::class.java) ?: error("Method 'wasSet()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IOptionalMethod.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Checks that optional result from interface method code generates correctly.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IOptionalMethod : software.amazon.jsii.JsiiSerializable {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun optional(): kotlin.String?

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IOptionalMethod {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun optional(): kotlin.String? {
            return this.jsiiCall("optional", kotlin.String::class.java)
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IPrivatelyImplemented.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IPrivatelyImplemented : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val success: kotlin.Boolean

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IPrivatelyImplemented {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val success: kotlin.Boolean
            get() {
                return this.jsiiGet("success", kotlin.Boolean::class.java) ?: error("'success' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IPublicInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IPublicInterface : software.amazon.jsii.JsiiSerializable {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun bye(): kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IPublicInterface {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun bye(): kotlin.String {
            return this.jsiiCall("bye", kotlin.String::class.java) ?: error("Method 'bye()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IPublicInterface2.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IPublicInterface2 : software.amazon.jsii.JsiiSerializable {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun ciao(): kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IPublicInterface2 {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun ciao(): kotlin.String {
            return this.jsiiCall("ciao", kotlin.String::class.java) ?: error("Method 'ciao()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IRandomNumberGenerator.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Generates random numbers.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IRandomNumberGenerator : software.amazon.jsii.JsiiSerializable {
    /**
     * Returns another random number.
     * 
     * @return A random number.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun next(): kotlin.Number

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IRandomNumberGenerator {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * Returns another random number.
         * 
         * @return A random number.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun next(): kotlin.Number {
            return this.jsiiCall("next", kotlin.Number::class.java) ?: error("Method 'next()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IReturnJsii976.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Returns a subclass of a known class which implements an interface.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IReturnJsii976 : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val foo: kotlin.Number

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IReturnJsii976 {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val foo: kotlin.Number
            get() {
                return this.jsiiGet("foo", kotlin.Number::class.java) ?: error("'foo' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IReturnsNumber.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IReturnsNumber : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val numberProp: software.amazon.jsii.tests.kotlin.calculator.lib.Number

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun obtainNumber(): software.amazon.jsii.tests.kotlin.calculator.lib.IDoublable

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IReturnsNumber {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val numberProp: software.amazon.jsii.tests.kotlin.calculator.lib.Number
            get() {
                return this.jsiiGet("numberProp", software.amazon.jsii.tests.kotlin.calculator.lib.Number::class.java) ?: error("'numberProp' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun obtainNumber(): software.amazon.jsii.tests.kotlin.calculator.lib.IDoublable {
            return this.jsiiCall("obtainNumber", software.amazon.jsii.tests.kotlin.calculator.lib.IDoublable::class.java) ?: error("Method 'obtainNumber()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IStableInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IStableInterface : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    var mutableProperty: kotlin.Number?

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun method()

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IStableInterface {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var mutableProperty: kotlin.Number?
            get() {
                return this.jsiiGet("mutableProperty", kotlin.Number::class.java)
            }
            set(v) {
                this.jsiiSet("mutableProperty", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun method() {
            this.jsiiCall("method", kotlin.Unit::class.java) ?: error("Method 'method()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IStructReturningDelegate.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Verifies that a "pure" implementation of an interface works correctly.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IStructReturningDelegate : software.amazon.jsii.JsiiSerializable {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun returnStruct(): software.amazon.jsii.tests.kotlin.calculator.StructB

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IStructReturningDelegate {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun returnStruct(): software.amazon.jsii.tests.kotlin.calculator.StructB {
            return this.jsiiCall("returnStruct", software.amazon.jsii.tests.kotlin.calculator.StructB::class.java) ?: error("Method 'returnStruct()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/IWallClock.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Implement this interface.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IWallClock : software.amazon.jsii.JsiiSerializable {
    /**
     * Returns the current time, formatted as an ISO-8601 string.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun iso8601Now(): kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IWallClock {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * Returns the current time, formatted as an ISO-8601 string.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun iso8601Now(): kotlin.String {
            return this.jsiiCall("iso8601Now", kotlin.String::class.java) ?: error("Method 'iso8601Now()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ImplementInternalInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ImplementInternalInterface")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ImplementInternalInterface : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var prop: kotlin.String
        get() {
            return this.jsiiGet("prop", kotlin.String::class.java) ?: error("'prop' should be present")
        }
        set(v) {
            this.jsiiSet("prop", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Implementation.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Implementation")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Implementation : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val value: kotlin.Number
        get() {
            return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ImplementsInterfaceWithInternal.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ImplementsInterfaceWithInternal")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ImplementsInterfaceWithInternal : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithInternal {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun visible() {
        this.jsiiCall("visible", kotlin.Unit::class.java) ?: error("Method 'visible()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ImplementsInterfaceWithInternalSubclass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ImplementsInterfaceWithInternalSubclass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ImplementsInterfaceWithInternalSubclass : software.amazon.jsii.tests.kotlin.calculator.ImplementsInterfaceWithInternal {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ImplementsPrivateInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ImplementsPrivateInterface")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ImplementsPrivateInterface : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var privateValue: kotlin.String
        get() {
            return this.jsiiGet("private", kotlin.String::class.java) ?: error("'private' should be present")
        }
        set(v) {
            this.jsiiSet("private", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ImplictBaseOfBase.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface ImplictBaseOfBase : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.base.BaseProps {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val goo: java.time.Instant

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var foo: software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var bar: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var goo: java.time.Instant? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.ImplictBaseOfBase {
            val foo = this.foo ?: kotlin.error("Value for property 'foo' must be specified")
            val bar = this.bar ?: kotlin.error("Value for property 'bar' must be specified")
            val goo = this.goo ?: kotlin.error("Value for property 'goo' must be specified")
            return \`Jsii$Proxy\`(foo, bar, goo)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.ImplictBaseOfBase {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val foo: software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val bar: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val goo: java.time.Instant

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.foo = this.jsiiCall("foo", software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very::class.java) ?: error("'foo' should be present")
            this.bar = this.jsiiCall("bar", kotlin.String::class.java) ?: error("'bar' should be present")
            this.goo = this.jsiiCall("goo", java.time.Instant::class.java) ?: error("'goo' should be present")
        }

        constructor(foo: software.amazon.jsii.tests.kotlin.calculator.baseofbase.Very, bar: kotlin.String, goo: java.time.Instant) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.foo = foo
            this.bar = bar
            this.goo = goo
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.ImplictBaseOfBase
            if (foo != other.foo) return false
            if (bar != other.bar) return false
            if (goo != other.goo) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.foo.hashCode()
            result = 31 * result + (this.bar.hashCode())
            result = 31 * result + (this.goo.hashCode())
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("foo", om.valueToTree(this.foo))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("bar", om.valueToTree(this.bar))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("goo", om.valueToTree(this.goo))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/InbetweenClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.InbetweenClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class InbetweenClass : software.amazon.jsii.tests.kotlin.calculator.PublicClass, software.amazon.jsii.tests.kotlin.calculator.IPublicInterface2 {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun ciao(): kotlin.String {
        return this.jsiiCall("ciao", kotlin.String::class.java) ?: error("Method 'ciao()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/InterfaceCollections.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Verifies that collections of interfaces or structs are correctly handled.
 * 
 * See: https://github.com/aws/jsii/issues/1196
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.InterfaceCollections")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class InterfaceCollections : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun listOfInterfaces(): kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.IBell> {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.InterfaceCollections::class.java, "listOfInterfaces", kotlin.collections.List::class.java) as? kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.IBell> ?: error("Method 'listOfInterfaces()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun listOfStructs(): kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.StructA> {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.InterfaceCollections::class.java, "listOfStructs", kotlin.collections.List::class.java) as? kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.StructA> ?: error("Method 'listOfStructs()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun mapOfInterfaces(): kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.IBell> {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.InterfaceCollections::class.java, "mapOfInterfaces", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.IBell> ?: error("Method 'mapOfInterfaces()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun mapOfStructs(): kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.StructA> {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.InterfaceCollections::class.java, "mapOfStructs", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.StructA> ?: error("Method 'mapOfStructs()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/InterfaceInNamespaceIncludesClasses/Foo.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceIncludesClasses

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.InterfaceInNamespaceIncludesClasses.Foo")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Foo : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var bar: kotlin.String?
        get() {
            return this.jsiiGet("bar", kotlin.String::class.java)
        }
        set(v) {
            this.jsiiSet("bar", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/InterfaceInNamespaceIncludesClasses/Hello.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceIncludesClasses

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface Hello : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val foo: kotlin.Number

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var foo: kotlin.Number? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceIncludesClasses.Hello {
            val foo = this.foo ?: kotlin.error("Value for property 'foo' must be specified")
            return \`Jsii$Proxy\`(foo)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceIncludesClasses.Hello {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val foo: kotlin.Number

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.foo = this.jsiiCall("foo", kotlin.Number::class.java) ?: error("'foo' should be present")
        }

        constructor(foo: kotlin.Number) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.foo = foo
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceIncludesClasses.Hello
            if (foo != other.foo) return false
            return true
        }

        override fun hashCode(): Int {
            return this.foo.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("foo", om.valueToTree(this.foo))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/InterfaceInNamespaceOnlyInterface/Hello.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceOnlyInterface

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface Hello : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val foo: kotlin.Number

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var foo: kotlin.Number? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceOnlyInterface.Hello {
            val foo = this.foo ?: kotlin.error("Value for property 'foo' must be specified")
            return \`Jsii$Proxy\`(foo)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceOnlyInterface.Hello {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val foo: kotlin.Number

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.foo = this.jsiiCall("foo", kotlin.Number::class.java) ?: error("'foo' should be present")
        }

        constructor(foo: kotlin.Number) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.foo = foo
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.InterfaceInNamespaceOnlyInterface.Hello
            if (foo != other.foo) return false
            return true
        }

        override fun hashCode(): Int {
            return this.foo.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("foo", om.valueToTree(this.foo))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/InterfacesMaker.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * We can return arrays of interfaces See aws/aws-cdk#2362.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.InterfacesMaker")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class InterfacesMaker : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun makeInterfaces(count: kotlin.Number): kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.IDoublable> {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                count
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.InterfacesMaker::class.java, "makeInterfaces", kotlin.collections.List::class.java, args) as? kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.IDoublable> ?: error("Method 'makeInterfaces()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Isomorphism.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Checks the "same instance" isomorphism is preserved within the constructor.
 * 
 * Create a subclass of this, and assert that \`this.myself()\` actually returns
 * \`this\` from within the constructor.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Isomorphism")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class Isomorphism : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun myself(): software.amazon.jsii.tests.kotlin.calculator.Isomorphism {
        return this.jsiiCall("myself", software.amazon.jsii.tests.kotlin.calculator.Isomorphism::class.java) ?: error("Method 'myself()' returned null value")
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.Isomorphism {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun myself(): software.amazon.jsii.tests.kotlin.calculator.Isomorphism {
            return this.jsiiCall("myself", software.amazon.jsii.tests.kotlin.calculator.Isomorphism::class.java) ?: error("Method 'myself()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/JSII417Derived.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.JSII417Derived")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class JSII417Derived : software.amazon.jsii.tests.kotlin.calculator.JSII417PublicBaseOfBase {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(propertyValue: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            propertyValue
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    protected open val propertyValue: kotlin.String
        get() {
            return this.jsiiGet("property", kotlin.String::class.java) ?: error("'property' should be present")
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun bar() {
        this.jsiiCall("bar", kotlin.Unit::class.java) ?: error("Method 'bar()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun baz() {
        this.jsiiCall("baz", kotlin.Unit::class.java) ?: error("Method 'baz()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/JSII417PublicBaseOfBase.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.JSII417PublicBaseOfBase")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class JSII417PublicBaseOfBase : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun makeInstance(): software.amazon.jsii.tests.kotlin.calculator.JSII417PublicBaseOfBase {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JSII417PublicBaseOfBase::class.java, "makeInstance", software.amazon.jsii.tests.kotlin.calculator.JSII417PublicBaseOfBase::class.java) ?: error("Method 'makeInstance()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val hasRoot: kotlin.Boolean
        get() {
            return this.jsiiGet("hasRoot", kotlin.Boolean::class.java) ?: error("'hasRoot' should be present")
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun foo() {
        this.jsiiCall("foo", kotlin.Unit::class.java) ?: error("Method 'foo()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/JSObjectLiteralForInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.JSObjectLiteralForInterface")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class JSObjectLiteralForInterface : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun giveMeFriendly(): software.amazon.jsii.tests.kotlin.calculator.lib.IFriendly {
        return this.jsiiCall("giveMeFriendly", software.amazon.jsii.tests.kotlin.calculator.lib.IFriendly::class.java) ?: error("Method 'giveMeFriendly()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun giveMeFriendlyGenerator(): software.amazon.jsii.tests.kotlin.calculator.IFriendlyRandomGenerator {
        return this.jsiiCall("giveMeFriendlyGenerator", software.amazon.jsii.tests.kotlin.calculator.IFriendlyRandomGenerator::class.java) ?: error("Method 'giveMeFriendlyGenerator()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/JSObjectLiteralToNative.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.JSObjectLiteralToNative")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class JSObjectLiteralToNative : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun returnLiteral(): software.amazon.jsii.tests.kotlin.calculator.JSObjectLiteralToNativeClass {
        return this.jsiiCall("returnLiteral", software.amazon.jsii.tests.kotlin.calculator.JSObjectLiteralToNativeClass::class.java) ?: error("Method 'returnLiteral()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/JSObjectLiteralToNativeClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.JSObjectLiteralToNativeClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class JSObjectLiteralToNativeClass : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var propA: kotlin.String
        get() {
            return this.jsiiGet("propA", kotlin.String::class.java) ?: error("'propA' should be present")
        }
        set(v) {
            this.jsiiSet("propA", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var propB: kotlin.Number
        get() {
            return this.jsiiGet("propB", kotlin.Number::class.java) ?: error("'propB' should be present")
        }
        set(v) {
            this.jsiiSet("propB", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/JavaReservedWords.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.JavaReservedWords")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class JavaReservedWords : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var whileValue: kotlin.String
        get() {
            return this.jsiiGet("while", kotlin.String::class.java) ?: error("'while' should be present")
        }
        set(v) {
            this.jsiiSet("while", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doAbstract() {
        this.jsiiCall("abstract", kotlin.Unit::class.java) ?: error("Method 'abstract()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun assert() {
        this.jsiiCall("assert", kotlin.Unit::class.java) ?: error("Method 'assert()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun boolean() {
        this.jsiiCall("boolean", kotlin.Unit::class.java) ?: error("Method 'boolean()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doBreak() {
        this.jsiiCall("break", kotlin.Unit::class.java) ?: error("Method 'break()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun byte() {
        this.jsiiCall("byte", kotlin.Unit::class.java) ?: error("Method 'byte()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun case() {
        this.jsiiCall("case", kotlin.Unit::class.java) ?: error("Method 'case()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doCatch() {
        this.jsiiCall("catch", kotlin.Unit::class.java) ?: error("Method 'catch()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun char() {
        this.jsiiCall("char", kotlin.Unit::class.java) ?: error("Method 'char()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doClass() {
        this.jsiiCall("class", kotlin.Unit::class.java) ?: error("Method 'class()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doConst() {
        this.jsiiCall("const", kotlin.Unit::class.java) ?: error("Method 'const()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doContinue() {
        this.jsiiCall("continue", kotlin.Unit::class.java) ?: error("Method 'continue()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun default() {
        this.jsiiCall("default", kotlin.Unit::class.java) ?: error("Method 'default()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doDo() {
        this.jsiiCall("do", kotlin.Unit::class.java) ?: error("Method 'do()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun double() {
        this.jsiiCall("double", kotlin.Unit::class.java) ?: error("Method 'double()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doElse() {
        this.jsiiCall("else", kotlin.Unit::class.java) ?: error("Method 'else()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doEnum() {
        this.jsiiCall("enum", kotlin.Unit::class.java) ?: error("Method 'enum()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun extends() {
        this.jsiiCall("extends", kotlin.Unit::class.java) ?: error("Method 'extends()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doFalse() {
        this.jsiiCall("false", kotlin.Unit::class.java) ?: error("Method 'false()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doFinal() {
        this.jsiiCall("final", kotlin.Unit::class.java) ?: error("Method 'final()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doFinally() {
        this.jsiiCall("finally", kotlin.Unit::class.java) ?: error("Method 'finally()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun float() {
        this.jsiiCall("float", kotlin.Unit::class.java) ?: error("Method 'float()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doFor() {
        this.jsiiCall("for", kotlin.Unit::class.java) ?: error("Method 'for()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun goto() {
        this.jsiiCall("goto", kotlin.Unit::class.java) ?: error("Method 'goto()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doIf() {
        this.jsiiCall("if", kotlin.Unit::class.java) ?: error("Method 'if()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun implements() {
        this.jsiiCall("implements", kotlin.Unit::class.java) ?: error("Method 'implements()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doImport() {
        this.jsiiCall("import", kotlin.Unit::class.java) ?: error("Method 'import()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun instanceof() {
        this.jsiiCall("instanceof", kotlin.Unit::class.java) ?: error("Method 'instanceof()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun int() {
        this.jsiiCall("int", kotlin.Unit::class.java) ?: error("Method 'int()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doInterface() {
        this.jsiiCall("interface", kotlin.Unit::class.java) ?: error("Method 'interface()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun long() {
        this.jsiiCall("long", kotlin.Unit::class.java) ?: error("Method 'long()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun native() {
        this.jsiiCall("native", kotlin.Unit::class.java) ?: error("Method 'native()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun new() {
        this.jsiiCall("new", kotlin.Unit::class.java) ?: error("Method 'new()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doNull() {
        this.jsiiCall("null", kotlin.Unit::class.java) ?: error("Method 'null()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doPackage() {
        this.jsiiCall("package", kotlin.Unit::class.java) ?: error("Method 'package()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doPrivate() {
        this.jsiiCall("private", kotlin.Unit::class.java) ?: error("Method 'private()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doProtected() {
        this.jsiiCall("protected", kotlin.Unit::class.java) ?: error("Method 'protected()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doPublic() {
        this.jsiiCall("public", kotlin.Unit::class.java) ?: error("Method 'public()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doReturn() {
        this.jsiiCall("return", kotlin.Unit::class.java) ?: error("Method 'return()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun short() {
        this.jsiiCall("short", kotlin.Unit::class.java) ?: error("Method 'short()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun static() {
        this.jsiiCall("static", kotlin.Unit::class.java) ?: error("Method 'static()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun strictfp() {
        this.jsiiCall("strictfp", kotlin.Unit::class.java) ?: error("Method 'strictfp()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doSuper() {
        this.jsiiCall("super", kotlin.Unit::class.java) ?: error("Method 'super()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun switch() {
        this.jsiiCall("switch", kotlin.Unit::class.java) ?: error("Method 'switch()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun synchronized() {
        this.jsiiCall("synchronized", kotlin.Unit::class.java) ?: error("Method 'synchronized()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doThis() {
        this.jsiiCall("this", kotlin.Unit::class.java) ?: error("Method 'this()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doThrow() {
        this.jsiiCall("throw", kotlin.Unit::class.java) ?: error("Method 'throw()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun throws() {
        this.jsiiCall("throws", kotlin.Unit::class.java) ?: error("Method 'throws()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun transient() {
        this.jsiiCall("transient", kotlin.Unit::class.java) ?: error("Method 'transient()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doTrue() {
        this.jsiiCall("true", kotlin.Unit::class.java) ?: error("Method 'true()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doTry() {
        this.jsiiCall("try", kotlin.Unit::class.java) ?: error("Method 'try()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun void() {
        this.jsiiCall("void", kotlin.Unit::class.java) ?: error("Method 'void()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun volatile() {
        this.jsiiCall("volatile", kotlin.Unit::class.java) ?: error("Method 'volatile()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Jsii487Derived.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Jsii487Derived")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Jsii487Derived : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IJsii487External2, software.amazon.jsii.tests.kotlin.calculator.IJsii487External {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Jsii496Derived.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Jsii496Derived")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Jsii496Derived : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.IJsii496 {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/JsiiAgent.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Host runtime version should be set via JSII_AGENT.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.JsiiAgent")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class JsiiAgent : software.amazon.jsii.JsiiObject {
    companion object {
        /**
         * Returns the value of the JSII_AGENT environment variable.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        val value: kotlin.String?
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsiiAgent::class.java, "value", kotlin.String::class.java)
            }

    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/JsonFormatter.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Make sure structs are un-decorated on the way in.
 * 
 * @see https://github.com/aws/aws-cdk/issues/5066
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.JsonFormatter")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class JsonFormatter : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyArray(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyArray", kotlin.Any::class.java) ?: error("Method 'anyArray()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyBooleanFalse(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyBooleanFalse", kotlin.Any::class.java) ?: error("Method 'anyBooleanFalse()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyBooleanTrue(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyBooleanTrue", kotlin.Any::class.java) ?: error("Method 'anyBooleanTrue()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyDate(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyDate", kotlin.Any::class.java) ?: error("Method 'anyDate()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyEmptyString(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyEmptyString", kotlin.Any::class.java) ?: error("Method 'anyEmptyString()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyFunction(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyFunction", kotlin.Any::class.java) ?: error("Method 'anyFunction()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyHash(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyHash", kotlin.Any::class.java) ?: error("Method 'anyHash()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyNull(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyNull", kotlin.Any::class.java) ?: error("Method 'anyNull()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyNumber(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyNumber", kotlin.Any::class.java) ?: error("Method 'anyNumber()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyRef(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyRef", kotlin.Any::class.java) ?: error("Method 'anyRef()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyString(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyString", kotlin.Any::class.java) ?: error("Method 'anyString()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyUndefined(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyUndefined", kotlin.Any::class.java) ?: error("Method 'anyUndefined()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun anyZero(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "anyZero", kotlin.Any::class.java) ?: error("Method 'anyZero()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun stringify(value: kotlin.Any?): kotlin.String? {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                value ?: error("'value' should be present")
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.JsonFormatter::class.java, "stringify", kotlin.String::class.java, args)
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/LevelOne.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Validates that nested classes get correct code generation for the occasional forward reference.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.LevelOne")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class LevelOne : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(props: software.amazon.jsii.tests.kotlin.calculator.LevelOneProps) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            props
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val props: software.amazon.jsii.tests.kotlin.calculator.LevelOneProps
        get() {
            return this.jsiiGet("props", software.amazon.jsii.tests.kotlin.calculator.LevelOneProps::class.java) ?: error("'props' should be present")
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    interface PropBooleanValue : software.amazon.jsii.JsiiSerializable {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        val value: kotlin.Boolean

        class Builder {
            @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
            var value: kotlin.Boolean? = null

            fun build(): software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropBooleanValue {
                val value = this.value ?: kotlin.error("Value for property 'value' must be specified")
                return \`Jsii$Proxy\`(value)
            }
        }

        class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropBooleanValue {
            @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
            override val value: kotlin.Boolean

            protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
                this.value = this.jsiiCall("value", kotlin.Boolean::class.java) ?: error("'value' should be present")
            }

            constructor(value: kotlin.Boolean) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
                this.value = value
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) return true
                if (javaClass != other?.javaClass) return false
                other as software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropBooleanValue
                if (value != other.value) return false
                return true
            }

            override fun hashCode(): Int {
                return this.value.hashCode()
            }

            override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
                val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
                val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
                obj.set<com.fasterxml.jackson.databind.JsonNode>("value", om.valueToTree(this.value))
                return obj
            }
        }
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    interface PropProperty : software.amazon.jsii.JsiiSerializable {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        val prop: software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropBooleanValue

        class Builder {
            @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
            var prop: software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropBooleanValue? = null

            fun build(): software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropProperty {
                val prop = this.prop ?: kotlin.error("Value for property 'prop' must be specified")
                return \`Jsii$Proxy\`(prop)
            }
        }

        class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropProperty {
            @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
            override val prop: software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropBooleanValue

            protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
                this.prop = this.jsiiCall("prop", software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropBooleanValue::class.java) ?: error("'prop' should be present")
            }

            constructor(prop: software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropBooleanValue) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
                this.prop = prop
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) return true
                if (javaClass != other?.javaClass) return false
                other as software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropProperty
                if (prop != other.prop) return false
                return true
            }

            override fun hashCode(): Int {
                return this.prop.hashCode()
            }

            override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
                val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
                val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
                obj.set<com.fasterxml.jackson.databind.JsonNode>("prop", om.valueToTree(this.prop))
                return obj
            }
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/LevelOneProps.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface LevelOneProps : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val prop: software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropProperty

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var prop: software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropProperty? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.LevelOneProps {
            val prop = this.prop ?: kotlin.error("Value for property 'prop' must be specified")
            return \`Jsii$Proxy\`(prop)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.LevelOneProps {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val prop: software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropProperty

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.prop = this.jsiiCall("prop", software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropProperty::class.java) ?: error("'prop' should be present")
        }

        constructor(prop: software.amazon.jsii.tests.kotlin.calculator.LevelOne.PropProperty) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.prop = prop
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.LevelOneProps
            if (prop != other.prop) return false
            return true
        }

        override fun hashCode(): Int {
            return this.prop.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("prop", om.valueToTree(this.prop))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/LoadBalancedFargateServiceProps.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * jsii#298: show default values in sphinx documentation, and respect newlines.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface LoadBalancedFargateServiceProps : software.amazon.jsii.JsiiSerializable {
    /**
     * The container port of the application load balancer attached to your Fargate service.
     * 
     * Corresponds to container port mapping.
     * 
     * Default: 80
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val containerPort: kotlin.Number?

    /**
     * The number of cpu units used by the task.
     * 
     * Valid values, which determines your range of valid values for the memory parameter:
     * 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
     * 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
     * 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
     * 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
     * 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
     * 
     * This default is set in the underlying FargateTaskDefinition construct.
     * 
     * Default: 256
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val cpu: kotlin.String?

    /**
     * The amount (in MiB) of memory used by the task.
     * 
     * This field is required and you must use one of the following values, which determines your range of valid values
     * for the cpu parameter:
     * 
     * 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
     * 
     * 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
     * 
     * 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
     * 
     * Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
     * 
     * Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
     * 
     * This default is set in the underlying FargateTaskDefinition construct.
     * 
     * Default: 512
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val memoryMiB: kotlin.String?

    /**
     * Determines whether the Application Load Balancer will be internet-facing.
     * 
     * Default: true
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val publicLoadBalancer: kotlin.Boolean?

    /**
     * Determines whether your Fargate Service will be assigned a public IP address.
     * 
     * Default: false
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val publicTasks: kotlin.Boolean?

    class Builder {
        /**
         * The container port of the application load balancer attached to your Fargate service.
         * 
         * Corresponds to container port mapping.
         * 
         * Default: 80
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var containerPort: kotlin.Number? = null

        /**
         * The number of cpu units used by the task.
         * 
         * Valid values, which determines your range of valid values for the memory parameter:
         * 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
         * 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
         * 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
         * 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
         * 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
         * 
         * This default is set in the underlying FargateTaskDefinition construct.
         * 
         * Default: 256
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var cpu: kotlin.String? = null

        /**
         * The amount (in MiB) of memory used by the task.
         * 
         * This field is required and you must use one of the following values, which determines your range of valid values
         * for the cpu parameter:
         * 
         * 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
         * 
         * 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
         * 
         * 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
         * 
         * Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
         * 
         * Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
         * 
         * This default is set in the underlying FargateTaskDefinition construct.
         * 
         * Default: 512
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var memoryMiB: kotlin.String? = null

        /**
         * Determines whether the Application Load Balancer will be internet-facing.
         * 
         * Default: true
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var publicLoadBalancer: kotlin.Boolean? = null

        /**
         * Determines whether your Fargate Service will be assigned a public IP address.
         * 
         * Default: false
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var publicTasks: kotlin.Boolean? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.LoadBalancedFargateServiceProps {
            val containerPort = this.containerPort
            val cpu = this.cpu
            val memoryMiB = this.memoryMiB
            val publicLoadBalancer = this.publicLoadBalancer
            val publicTasks = this.publicTasks
            return \`Jsii$Proxy\`(containerPort, cpu, memoryMiB, publicLoadBalancer, publicTasks)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.LoadBalancedFargateServiceProps {
        /**
         * The container port of the application load balancer attached to your Fargate service.
         * 
         * Corresponds to container port mapping.
         * 
         * Default: 80
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val containerPort: kotlin.Number?

        /**
         * The number of cpu units used by the task.
         * 
         * Valid values, which determines your range of valid values for the memory parameter:
         * 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
         * 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
         * 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
         * 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
         * 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
         * 
         * This default is set in the underlying FargateTaskDefinition construct.
         * 
         * Default: 256
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val cpu: kotlin.String?

        /**
         * The amount (in MiB) of memory used by the task.
         * 
         * This field is required and you must use one of the following values, which determines your range of valid values
         * for the cpu parameter:
         * 
         * 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
         * 
         * 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
         * 
         * 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
         * 
         * Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
         * 
         * Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
         * 
         * This default is set in the underlying FargateTaskDefinition construct.
         * 
         * Default: 512
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val memoryMiB: kotlin.String?

        /**
         * Determines whether the Application Load Balancer will be internet-facing.
         * 
         * Default: true
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val publicLoadBalancer: kotlin.Boolean?

        /**
         * Determines whether your Fargate Service will be assigned a public IP address.
         * 
         * Default: false
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val publicTasks: kotlin.Boolean?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.containerPort = this.jsiiCall("containerPort", kotlin.Number::class.java)
            this.cpu = this.jsiiCall("cpu", kotlin.String::class.java)
            this.memoryMiB = this.jsiiCall("memoryMiB", kotlin.String::class.java)
            this.publicLoadBalancer = this.jsiiCall("publicLoadBalancer", kotlin.Boolean::class.java)
            this.publicTasks = this.jsiiCall("publicTasks", kotlin.Boolean::class.java)
        }

        constructor(containerPort: kotlin.Number?, cpu: kotlin.String?, memoryMiB: kotlin.String?, publicLoadBalancer: kotlin.Boolean?, publicTasks: kotlin.Boolean?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.containerPort = containerPort
            this.cpu = cpu
            this.memoryMiB = memoryMiB
            this.publicLoadBalancer = publicLoadBalancer
            this.publicTasks = publicTasks
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.LoadBalancedFargateServiceProps
            if (containerPort != other.containerPort) return false
            if (cpu != other.cpu) return false
            if (memoryMiB != other.memoryMiB) return false
            if (publicLoadBalancer != other.publicLoadBalancer) return false
            if (publicTasks != other.publicTasks) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.containerPort?.hashCode() ?: 0
            result = 31 * result + (this.cpu?.hashCode() ?: 0)
            result = 31 * result + (this.memoryMiB?.hashCode() ?: 0)
            result = 31 * result + (this.publicLoadBalancer?.hashCode() ?: 0)
            result = 31 * result + (this.publicTasks?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("containerPort", om.valueToTree(this.containerPort))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("cpu", om.valueToTree(this.cpu))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("memoryMiB", om.valueToTree(this.memoryMiB))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("publicLoadBalancer", om.valueToTree(this.publicLoadBalancer))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("publicTasks", om.valueToTree(this.publicTasks))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/MethodNamedProperty.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.MethodNamedProperty")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class MethodNamedProperty : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val elite: kotlin.Number
        get() {
            return this.jsiiGet("elite", kotlin.Number::class.java) ?: error("'elite' should be present")
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doProperty(): kotlin.String {
        return this.jsiiCall("property", kotlin.String::class.java) ?: error("Method 'property()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Multiply.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * The "*" binary operation.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Multiply")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Multiply : software.amazon.jsii.tests.kotlin.calculator.BinaryOperation, software.amazon.jsii.tests.kotlin.calculator.IFriendlier, software.amazon.jsii.tests.kotlin.calculator.IRandomNumberGenerator {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    /**
     * Creates a BinaryOperation.
     */
    constructor(lhs: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue, rhs: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            lhs,
            rhs
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    /**
     * (deprecated) The value.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val value: kotlin.Number
        get() {
            return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
        }

    /**
     * Say farewell.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun farewell(): kotlin.String {
        return this.jsiiCall("farewell", kotlin.String::class.java) ?: error("Method 'farewell()' returned null value")
    }

    /**
     * Say goodbye.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun goodbye(): kotlin.String {
        return this.jsiiCall("goodbye", kotlin.String::class.java) ?: error("Method 'goodbye()' returned null value")
    }

    /**
     * Returns another random number.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun next(): kotlin.Number {
        return this.jsiiCall("next", kotlin.Number::class.java) ?: error("Method 'next()' returned null value")
    }

    /**
     * (deprecated) String representation of the value.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun toString(): kotlin.String {
        return this.jsiiCall("toString", kotlin.String::class.java) ?: error("Method 'toString()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Negate.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * The negation operation ("-value").
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Negate")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Negate : software.amazon.jsii.tests.kotlin.calculator.UnaryOperation, software.amazon.jsii.tests.kotlin.calculator.IFriendlier {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(operand: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            operand
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    /**
     * (deprecated) The value.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val value: kotlin.Number
        get() {
            return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
        }

    /**
     * Say farewell.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun farewell(): kotlin.String {
        return this.jsiiCall("farewell", kotlin.String::class.java) ?: error("Method 'farewell()' returned null value")
    }

    /**
     * Say goodbye.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun goodbye(): kotlin.String {
        return this.jsiiCall("goodbye", kotlin.String::class.java) ?: error("Method 'goodbye()' returned null value")
    }

    /**
     * (deprecated) Say hello!
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun hello(): kotlin.String {
        return this.jsiiCall("hello", kotlin.String::class.java) ?: error("Method 'hello()' returned null value")
    }

    /**
     * (deprecated) String representation of the value.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun toString(): kotlin.String {
        return this.jsiiCall("toString", kotlin.String::class.java) ?: error("Method 'toString()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/NestedClassInstance.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.NestedClassInstance")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class NestedClassInstance : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun makeInstance(): software.amazon.jsii.tests.kotlin.calculator.lib.submodule.NestingClass.NestedClass {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.NestedClassInstance::class.java, "makeInstance", software.amazon.jsii.tests.kotlin.calculator.lib.submodule.NestingClass.NestedClass::class.java) ?: error("Method 'makeInstance()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/NestedStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface NestedStruct : software.amazon.jsii.JsiiSerializable {
    /**
     * When provided, must be > 0.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val numberProp: kotlin.Number

    class Builder {
        /**
         * When provided, must be > 0.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var numberProp: kotlin.Number? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.NestedStruct {
            val numberProp = this.numberProp ?: kotlin.error("Value for property 'numberProp' must be specified")
            return \`Jsii$Proxy\`(numberProp)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.NestedStruct {
        /**
         * When provided, must be > 0.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val numberProp: kotlin.Number

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.numberProp = this.jsiiCall("numberProp", kotlin.Number::class.java) ?: error("'numberProp' should be present")
        }

        constructor(numberProp: kotlin.Number) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.numberProp = numberProp
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.NestedStruct
            if (numberProp != other.numberProp) return false
            return true
        }

        override fun hashCode(): Int {
            return this.numberProp.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("numberProp", om.valueToTree(this.numberProp))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/NodeStandardLibrary.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Test fixture to verify that jsii modules can use the node standard library.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.NodeStandardLibrary")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class NodeStandardLibrary : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    /**
     * Returns the current os.platform() from the "os" node module.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val osPlatform: kotlin.String
        get() {
            return this.jsiiGet("osPlatform", kotlin.String::class.java) ?: error("'osPlatform' should be present")
        }

    /**
     * Uses node.js "crypto" module to calculate sha256 of a string.
     * 
     * @return "6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50"
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun cryptoSha256(): kotlin.String {
        return this.jsiiCall("cryptoSha256", kotlin.String::class.java) ?: error("Method 'cryptoSha256()' returned null value")
    }

    /**
     * Reads a local resource file (resource.txt) asynchronously.
     * 
     * @return "Hello, resource!"
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun fsReadFile(): kotlin.String {
        return this.jsiiCall("fsReadFile", kotlin.String::class.java) ?: error("Method 'fsReadFile()' returned null value")
    }

    /**
     * Sync version of fsReadFile.
     * 
     * @return "Hello, resource! SYNC!"
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun fsReadFileSync(): kotlin.String {
        return this.jsiiCall("fsReadFileSync", kotlin.String::class.java) ?: error("Method 'fsReadFileSync()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/NullShouldBeTreatedAsUndefined.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * jsii#282, aws-cdk#157: null should be treated as "undefined".
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.NullShouldBeTreatedAsUndefined")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class NullShouldBeTreatedAsUndefined : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(_param1: kotlin.String, optional: kotlin.Any?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            _param1,
            optional ?: error("'optional' should be present")
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var changeMeToUndefined: kotlin.String?
        get() {
            return this.jsiiGet("changeMeToUndefined", kotlin.String::class.java)
        }
        set(v) {
            this.jsiiSet("changeMeToUndefined", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun giveMeUndefined(value: kotlin.Any?) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value ?: error("'value' should be present")
        )
        this.jsiiCall("giveMeUndefined", kotlin.Unit::class.java, args) ?: error("Method 'giveMeUndefined()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun giveMeUndefinedInsideAnObject(input: software.amazon.jsii.tests.kotlin.calculator.NullShouldBeTreatedAsUndefinedData) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            input
        )
        this.jsiiCall("giveMeUndefinedInsideAnObject", kotlin.Unit::class.java, args) ?: error("Method 'giveMeUndefinedInsideAnObject()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun verifyPropertyIsUndefined() {
        this.jsiiCall("verifyPropertyIsUndefined", kotlin.Unit::class.java) ?: error("Method 'verifyPropertyIsUndefined()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/NullShouldBeTreatedAsUndefinedData.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface NullShouldBeTreatedAsUndefinedData : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val arrayWithThreeElementsAndUndefinedAsSecondArgument: kotlin.collections.List<kotlin.Any>

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val thisShouldBeUndefined: kotlin.Any?

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var arrayWithThreeElementsAndUndefinedAsSecondArgument: kotlin.collections.List<kotlin.Any>? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var thisShouldBeUndefined: kotlin.Any? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.NullShouldBeTreatedAsUndefinedData {
            val arrayWithThreeElementsAndUndefinedAsSecondArgument = this.arrayWithThreeElementsAndUndefinedAsSecondArgument ?: kotlin.error("Value for property 'arrayWithThreeElementsAndUndefinedAsSecondArgument' must be specified")
            val thisShouldBeUndefined = this.thisShouldBeUndefined
            return \`Jsii$Proxy\`(arrayWithThreeElementsAndUndefinedAsSecondArgument, thisShouldBeUndefined)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.NullShouldBeTreatedAsUndefinedData {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val arrayWithThreeElementsAndUndefinedAsSecondArgument: kotlin.collections.List<kotlin.Any>

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val thisShouldBeUndefined: kotlin.Any?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.arrayWithThreeElementsAndUndefinedAsSecondArgument = this.jsiiCall("arrayWithThreeElementsAndUndefinedAsSecondArgument", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.Any> ?: error("'arrayWithThreeElementsAndUndefinedAsSecondArgument' should be present")
            this.thisShouldBeUndefined = this.jsiiCall("thisShouldBeUndefined", kotlin.Any::class.java)
        }

        constructor(arrayWithThreeElementsAndUndefinedAsSecondArgument: kotlin.collections.List<kotlin.Any>, thisShouldBeUndefined: kotlin.Any?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.arrayWithThreeElementsAndUndefinedAsSecondArgument = arrayWithThreeElementsAndUndefinedAsSecondArgument
            this.thisShouldBeUndefined = thisShouldBeUndefined
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.NullShouldBeTreatedAsUndefinedData
            if (arrayWithThreeElementsAndUndefinedAsSecondArgument != other.arrayWithThreeElementsAndUndefinedAsSecondArgument) return false
            if (thisShouldBeUndefined != other.thisShouldBeUndefined) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.arrayWithThreeElementsAndUndefinedAsSecondArgument.hashCode()
            result = 31 * result + (this.thisShouldBeUndefined?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("arrayWithThreeElementsAndUndefinedAsSecondArgument", om.valueToTree(this.arrayWithThreeElementsAndUndefinedAsSecondArgument))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("thisShouldBeUndefined", om.valueToTree(this.thisShouldBeUndefined))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/NumberGenerator.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * This allows us to test that a reference can be stored for objects that implement interfaces.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.NumberGenerator")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class NumberGenerator : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(generator: software.amazon.jsii.tests.kotlin.calculator.IRandomNumberGenerator) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            generator
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var generator: software.amazon.jsii.tests.kotlin.calculator.IRandomNumberGenerator
        get() {
            return this.jsiiGet("generator", software.amazon.jsii.tests.kotlin.calculator.IRandomNumberGenerator::class.java) ?: error("'generator' should be present")
        }
        set(v) {
            this.jsiiSet("generator", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun isSameGenerator(gen: software.amazon.jsii.tests.kotlin.calculator.IRandomNumberGenerator): kotlin.Boolean {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            gen
        )
        return this.jsiiCall("isSameGenerator", kotlin.Boolean::class.java, args) ?: error("Method 'isSameGenerator()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun nextTimes100(): kotlin.Number {
        return this.jsiiCall("nextTimes100", kotlin.Number::class.java) ?: error("Method 'nextTimes100()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ObjectRefsInCollections.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Verify that object references can be passed inside collections.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ObjectRefsInCollections")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ObjectRefsInCollections : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    /**
     * Returns the sum of all values.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun sumFromArray(values: kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue>): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            values
        )
        return this.jsiiCall("sumFromArray", kotlin.Number::class.java, args) ?: error("Method 'sumFromArray()' returned null value")
    }

    /**
     * Returns the sum of all values in a map.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun sumFromMap(values: kotlin.collections.Map<kotlin.String, software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue>): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            values
        )
        return this.jsiiCall("sumFromMap", kotlin.Number::class.java, args) ?: error("Method 'sumFromMap()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ObjectWithPropertyProvider.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ObjectWithPropertyProvider")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ObjectWithPropertyProvider : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun provide(): software.amazon.jsii.tests.kotlin.calculator.IObjectWithProperty {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.ObjectWithPropertyProvider::class.java, "provide", software.amazon.jsii.tests.kotlin.calculator.IObjectWithProperty::class.java) ?: error("Method 'provide()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Old.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Old class.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Old")
@Deprecated("Use the new class")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
open class Old : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    /**
     * Doo wop that thing.
     */
    @Deprecated("Use the new class")
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
    open fun doAThing() {
        this.jsiiCall("doAThing", kotlin.Unit::class.java) ?: error("Method 'doAThing()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/OptionalArgumentInvoker.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.OptionalArgumentInvoker")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class OptionalArgumentInvoker : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(delegateValue: software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithOptionalMethodArguments) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            delegateValue
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun invokeWithOptional() {
        this.jsiiCall("invokeWithOptional", kotlin.Unit::class.java) ?: error("Method 'invokeWithOptional()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun invokeWithoutOptional() {
        this.jsiiCall("invokeWithoutOptional", kotlin.Unit::class.java) ?: error("Method 'invokeWithoutOptional()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/OptionalConstructorArgument.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.OptionalConstructorArgument")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class OptionalConstructorArgument : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(arg1: kotlin.Number, arg2: kotlin.String, arg3: java.time.Instant?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            arg1,
            arg2,
            arg3 ?: error("'arg3' should be present")
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val arg1: kotlin.Number
        get() {
            return this.jsiiGet("arg1", kotlin.Number::class.java) ?: error("'arg1' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val arg2: kotlin.String
        get() {
            return this.jsiiGet("arg2", kotlin.String::class.java) ?: error("'arg2' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val arg3: java.time.Instant?
        get() {
            return this.jsiiGet("arg3", java.time.Instant::class.java)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/OptionalStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface OptionalStruct : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val fieldValue: kotlin.String?

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var fieldValue: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.OptionalStruct {
            val fieldValue = this.fieldValue
            return \`Jsii$Proxy\`(fieldValue)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.OptionalStruct {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val fieldValue: kotlin.String?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.fieldValue = this.jsiiCall("field", kotlin.String::class.java)
        }

        constructor(fieldValue: kotlin.String?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.fieldValue = fieldValue
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.OptionalStruct
            if (fieldValue != other.fieldValue) return false
            return true
        }

        override fun hashCode(): Int {
            return this.fieldValue?.hashCode() ?: 0
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("fieldValue", om.valueToTree(this.fieldValue))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/OptionalStructConsumer.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.OptionalStructConsumer")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class OptionalStructConsumer : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(optionalStruct: software.amazon.jsii.tests.kotlin.calculator.OptionalStruct?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            optionalStruct ?: error("'optionalStruct' should be present")
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val parameterWasUndefined: kotlin.Boolean
        get() {
            return this.jsiiGet("parameterWasUndefined", kotlin.Boolean::class.java) ?: error("'parameterWasUndefined' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val fieldValue: kotlin.String?
        get() {
            return this.jsiiGet("fieldValue", kotlin.String::class.java)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/OverridableProtectedMember.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * @see https://github.com/aws/jsii/issues/903
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.OverridableProtectedMember")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class OverridableProtectedMember : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    protected open val overrideReadOnly: kotlin.String
        get() {
            return this.jsiiGet("overrideReadOnly", kotlin.String::class.java) ?: error("'overrideReadOnly' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    protected open var overrideReadWrite: kotlin.String
        get() {
            return this.jsiiGet("overrideReadWrite", kotlin.String::class.java) ?: error("'overrideReadWrite' should be present")
        }
        set(v) {
            this.jsiiSet("overrideReadWrite", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    protected open fun overrideMe(): kotlin.String {
        return this.jsiiCall("overrideMe", kotlin.String::class.java) ?: error("Method 'overrideMe()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun switchModes() {
        this.jsiiCall("switchModes", kotlin.Unit::class.java) ?: error("Method 'switchModes()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun valueFromProtected(): kotlin.String {
        return this.jsiiCall("valueFromProtected", kotlin.String::class.java) ?: error("Method 'valueFromProtected()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/OverrideReturnsObject.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.OverrideReturnsObject")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class OverrideReturnsObject : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun test(obj: software.amazon.jsii.tests.kotlin.calculator.IReturnsNumber): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            obj
        )
        return this.jsiiCall("test", kotlin.Number::class.java, args) ?: error("Method 'test()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ParentStruct982.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * https://github.com/aws/jsii/issues/982.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface ParentStruct982 : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val foo: kotlin.String

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var foo: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.ParentStruct982 {
            val foo = this.foo ?: kotlin.error("Value for property 'foo' must be specified")
            return \`Jsii$Proxy\`(foo)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.ParentStruct982 {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val foo: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.foo = this.jsiiCall("foo", kotlin.String::class.java) ?: error("'foo' should be present")
        }

        constructor(foo: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.foo = foo
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.ParentStruct982
            if (foo != other.foo) return false
            return true
        }

        override fun hashCode(): Int {
            return this.foo.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("foo", om.valueToTree(this.foo))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/PartiallyInitializedThisConsumer.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.PartiallyInitializedThisConsumer")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class PartiallyInitializedThisConsumer : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    abstract fun consumePartiallyInitializedThis(obj: software.amazon.jsii.tests.kotlin.calculator.ConstructorPassesThisOut, dt: java.time.Instant, ev: software.amazon.jsii.tests.kotlin.calculator.AllTypesEnum): kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.PartiallyInitializedThisConsumer {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun consumePartiallyInitializedThis(obj: software.amazon.jsii.tests.kotlin.calculator.ConstructorPassesThisOut, dt: java.time.Instant, ev: software.amazon.jsii.tests.kotlin.calculator.AllTypesEnum): kotlin.String {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                obj,
                dt,
                ev
            )
            return this.jsiiCall("consumePartiallyInitializedThis", kotlin.String::class.java, args) ?: error("Method 'consumePartiallyInitializedThis()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Polymorphism.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Polymorphism")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Polymorphism : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun sayHello(friendly: software.amazon.jsii.tests.kotlin.calculator.lib.IFriendly): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            friendly
        )
        return this.jsiiCall("sayHello", kotlin.String::class.java, args) ?: error("Method 'sayHello()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Power.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * The power operation.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Power")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Power : software.amazon.jsii.tests.kotlin.calculator.composition.CompositeOperation {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    /**
     * Creates a Power operation.
     */
    constructor(base: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue, pow: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            base,
            pow
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    /**
     * The base of the power.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val base: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
        get() {
            return this.jsiiGet("base", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'base' should be present")
        }

    /**
     * The expression that this operation consists of.
     * 
     * Must be implemented by derived classes.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val expression: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
        get() {
            return this.jsiiGet("expression", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'expression' should be present")
        }

    /**
     * The number of times to multiply.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val pow: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
        get() {
            return this.jsiiGet("pow", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'pow' should be present")
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/PropertyNamedProperty.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Reproduction for https://github.com/aws/jsii/issues/1113 Where a method or property named "property" would result in impossible to load Python code.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.PropertyNamedProperty")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class PropertyNamedProperty : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val propertyValue: kotlin.String
        get() {
            return this.jsiiGet("property", kotlin.String::class.java) ?: error("'property' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val yetAnoterOne: kotlin.Boolean
        get() {
            return this.jsiiGet("yetAnoterOne", kotlin.Boolean::class.java) ?: error("'yetAnoterOne' should be present")
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/PublicClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.PublicClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class PublicClass : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun hello() {
        this.jsiiCall("hello", kotlin.Unit::class.java) ?: error("Method 'hello()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/PythonReservedWords.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.PythonReservedWords")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class PythonReservedWords : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun and() {
        this.jsiiCall("and", kotlin.Unit::class.java) ?: error("Method 'and()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doAs() {
        this.jsiiCall("as", kotlin.Unit::class.java) ?: error("Method 'as()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun assert() {
        this.jsiiCall("assert", kotlin.Unit::class.java) ?: error("Method 'assert()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun async() {
        this.jsiiCall("async", kotlin.Unit::class.java) ?: error("Method 'async()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun await() {
        this.jsiiCall("await", kotlin.Unit::class.java) ?: error("Method 'await()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doBreak() {
        this.jsiiCall("break", kotlin.Unit::class.java) ?: error("Method 'break()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doClass() {
        this.jsiiCall("class", kotlin.Unit::class.java) ?: error("Method 'class()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doContinue() {
        this.jsiiCall("continue", kotlin.Unit::class.java) ?: error("Method 'continue()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun def() {
        this.jsiiCall("def", kotlin.Unit::class.java) ?: error("Method 'def()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun del() {
        this.jsiiCall("del", kotlin.Unit::class.java) ?: error("Method 'del()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun elif() {
        this.jsiiCall("elif", kotlin.Unit::class.java) ?: error("Method 'elif()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doElse() {
        this.jsiiCall("else", kotlin.Unit::class.java) ?: error("Method 'else()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun except() {
        this.jsiiCall("except", kotlin.Unit::class.java) ?: error("Method 'except()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doFinally() {
        this.jsiiCall("finally", kotlin.Unit::class.java) ?: error("Method 'finally()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doFor() {
        this.jsiiCall("for", kotlin.Unit::class.java) ?: error("Method 'for()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun from() {
        this.jsiiCall("from", kotlin.Unit::class.java) ?: error("Method 'from()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun global() {
        this.jsiiCall("global", kotlin.Unit::class.java) ?: error("Method 'global()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doIf() {
        this.jsiiCall("if", kotlin.Unit::class.java) ?: error("Method 'if()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doImport() {
        this.jsiiCall("import", kotlin.Unit::class.java) ?: error("Method 'import()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doIn() {
        this.jsiiCall("in", kotlin.Unit::class.java) ?: error("Method 'in()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doIs() {
        this.jsiiCall("is", kotlin.Unit::class.java) ?: error("Method 'is()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun lambda() {
        this.jsiiCall("lambda", kotlin.Unit::class.java) ?: error("Method 'lambda()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun nonlocal() {
        this.jsiiCall("nonlocal", kotlin.Unit::class.java) ?: error("Method 'nonlocal()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun not() {
        this.jsiiCall("not", kotlin.Unit::class.java) ?: error("Method 'not()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun or() {
        this.jsiiCall("or", kotlin.Unit::class.java) ?: error("Method 'or()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun pass() {
        this.jsiiCall("pass", kotlin.Unit::class.java) ?: error("Method 'pass()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun raise() {
        this.jsiiCall("raise", kotlin.Unit::class.java) ?: error("Method 'raise()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doReturn() {
        this.jsiiCall("return", kotlin.Unit::class.java) ?: error("Method 'return()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doTry() {
        this.jsiiCall("try", kotlin.Unit::class.java) ?: error("Method 'try()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun doWhile() {
        this.jsiiCall("while", kotlin.Unit::class.java) ?: error("Method 'while()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun with() {
        this.jsiiCall("with", kotlin.Unit::class.java) ?: error("Method 'with()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun yield() {
        this.jsiiCall("yield", kotlin.Unit::class.java) ?: error("Method 'yield()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/PythonSelf/ClassWithSelf.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.PythonSelf

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.PythonSelf.ClassWithSelf")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ClassWithSelf : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(self: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            self
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val self: kotlin.String
        get() {
            return this.jsiiGet("self", kotlin.String::class.java) ?: error("'self' should be present")
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun method(self: kotlin.Number): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            self
        )
        return this.jsiiCall("method", kotlin.String::class.java, args) ?: error("Method 'method()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/PythonSelf/ClassWithSelfKwarg.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.PythonSelf

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.PythonSelf.ClassWithSelfKwarg")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ClassWithSelfKwarg : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(props: software.amazon.jsii.tests.kotlin.calculator.PythonSelf.StructWithSelf) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            props
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val props: software.amazon.jsii.tests.kotlin.calculator.PythonSelf.StructWithSelf
        get() {
            return this.jsiiGet("props", software.amazon.jsii.tests.kotlin.calculator.PythonSelf.StructWithSelf::class.java) ?: error("'props' should be present")
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/PythonSelf/IInterfaceWithSelf.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.PythonSelf

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface IInterfaceWithSelf : software.amazon.jsii.JsiiSerializable {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    fun method(self: kotlin.Number): kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.PythonSelf.IInterfaceWithSelf {
        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun method(self: kotlin.Number): kotlin.String {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                self
            )
            return this.jsiiCall("method", kotlin.String::class.java, args) ?: error("Method 'method()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/PythonSelf/StructWithSelf.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.PythonSelf

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface StructWithSelf : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val self: kotlin.String

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var self: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.PythonSelf.StructWithSelf {
            val self = this.self ?: kotlin.error("Value for property 'self' must be specified")
            return \`Jsii$Proxy\`(self)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.PythonSelf.StructWithSelf {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val self: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.self = this.jsiiCall("self", kotlin.String::class.java) ?: error("'self' should be present")
        }

        constructor(self: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.self = self
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.PythonSelf.StructWithSelf
            if (self != other.self) return false
            return true
        }

        override fun hashCode(): Int {
            return this.self.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("self", om.valueToTree(this.self))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ReferenceEnumFromScopedPackage.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * See awslabs/jsii#138.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ReferenceEnumFromScopedPackage")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ReferenceEnumFromScopedPackage : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var foo: software.amazon.jsii.tests.kotlin.calculator.lib.EnumFromScopedModule?
        get() {
            return this.jsiiGet("foo", software.amazon.jsii.tests.kotlin.calculator.lib.EnumFromScopedModule::class.java)
        }
        set(v) {
            this.jsiiSet("foo", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun loadFoo(): software.amazon.jsii.tests.kotlin.calculator.lib.EnumFromScopedModule? {
        return this.jsiiCall("loadFoo", software.amazon.jsii.tests.kotlin.calculator.lib.EnumFromScopedModule::class.java)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun saveFoo(value: software.amazon.jsii.tests.kotlin.calculator.lib.EnumFromScopedModule) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        this.jsiiCall("saveFoo", kotlin.Unit::class.java, args) ?: error("Method 'saveFoo()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/ReturnsPrivateImplementationOfInterface.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Helps ensure the JSII kernel & runtime cooperate correctly when an un-exported instance of a class is returned with a declared type that is an exported interface, and the instance inherits from an exported class.
 * 
 * @return an instance of an un-exported class that extends \`ExportedBaseClass\`, declared as \`IPrivatelyImplemented\`.
 * 
 * @see https://github.com/aws/jsii/issues/320
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.ReturnsPrivateImplementationOfInterface")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ReturnsPrivateImplementationOfInterface : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val privateImplementation: software.amazon.jsii.tests.kotlin.calculator.IPrivatelyImplemented
        get() {
            return this.jsiiGet("privateImplementation", software.amazon.jsii.tests.kotlin.calculator.IPrivatelyImplemented::class.java) ?: error("'privateImplementation' should be present")
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/RootStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.
 * 
 * This is cheating with the (current) declared types, but this is the "more
 * idiomatic" way for Pythonists.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface RootStruct : software.amazon.jsii.JsiiSerializable {
    /**
     * May not be empty.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val stringProp: kotlin.String

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val nestedStruct: software.amazon.jsii.tests.kotlin.calculator.NestedStruct?

    class Builder {
        /**
         * May not be empty.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var stringProp: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var nestedStruct: software.amazon.jsii.tests.kotlin.calculator.NestedStruct? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.RootStruct {
            val stringProp = this.stringProp ?: kotlin.error("Value for property 'stringProp' must be specified")
            val nestedStruct = this.nestedStruct
            return \`Jsii$Proxy\`(stringProp, nestedStruct)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.RootStruct {
        /**
         * May not be empty.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val stringProp: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val nestedStruct: software.amazon.jsii.tests.kotlin.calculator.NestedStruct?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.stringProp = this.jsiiCall("stringProp", kotlin.String::class.java) ?: error("'stringProp' should be present")
            this.nestedStruct = this.jsiiCall("nestedStruct", software.amazon.jsii.tests.kotlin.calculator.NestedStruct::class.java)
        }

        constructor(stringProp: kotlin.String, nestedStruct: software.amazon.jsii.tests.kotlin.calculator.NestedStruct?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.stringProp = stringProp
            this.nestedStruct = nestedStruct
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.RootStruct
            if (stringProp != other.stringProp) return false
            if (nestedStruct != other.nestedStruct) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.stringProp.hashCode()
            result = 31 * result + (this.nestedStruct?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("stringProp", om.valueToTree(this.stringProp))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("nestedStruct", om.valueToTree(this.nestedStruct))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/RootStructValidator.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.RootStructValidator")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class RootStructValidator : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun validate(struct: software.amazon.jsii.tests.kotlin.calculator.RootStruct) {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                struct
            )
            software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.RootStructValidator::class.java, "validate", kotlin.Unit::class.java, args) ?: error("Method 'validate()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/RuntimeTypeChecking.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.RuntimeTypeChecking")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class RuntimeTypeChecking : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun methodWithDefaultedArguments(arg1: kotlin.Number?, arg2: kotlin.String?, arg3: java.time.Instant?) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            arg1 ?: error("'arg1' should be present"),
            arg2 ?: error("'arg2' should be present"),
            arg3 ?: error("'arg3' should be present")
        )
        this.jsiiCall("methodWithDefaultedArguments", kotlin.Unit::class.java, args) ?: error("Method 'methodWithDefaultedArguments()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun methodWithOptionalAnyArgument(arg: kotlin.Any?) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            arg ?: error("'arg' should be present")
        )
        this.jsiiCall("methodWithOptionalAnyArgument", kotlin.Unit::class.java, args) ?: error("Method 'methodWithOptionalAnyArgument()' returned null value")
    }

    /**
     * Used to verify verification of number of method arguments.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun methodWithOptionalArguments(arg1: kotlin.Number, arg2: kotlin.String, arg3: java.time.Instant?) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            arg1,
            arg2,
            arg3 ?: error("'arg3' should be present")
        )
        this.jsiiCall("methodWithOptionalArguments", kotlin.Unit::class.java, args) ?: error("Method 'methodWithOptionalArguments()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SecondLevelStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface SecondLevelStruct : software.amazon.jsii.JsiiSerializable {
    /**
     * It's long and required.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val deeperRequiredProp: kotlin.String

    /**
     * It's long, but you'll almost never pass it.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val deeperOptionalProp: kotlin.String?

    class Builder {
        /**
         * It's long and required.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var deeperRequiredProp: kotlin.String? = null

        /**
         * It's long, but you'll almost never pass it.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var deeperOptionalProp: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.SecondLevelStruct {
            val deeperRequiredProp = this.deeperRequiredProp ?: kotlin.error("Value for property 'deeperRequiredProp' must be specified")
            val deeperOptionalProp = this.deeperOptionalProp
            return \`Jsii$Proxy\`(deeperRequiredProp, deeperOptionalProp)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.SecondLevelStruct {
        /**
         * It's long and required.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val deeperRequiredProp: kotlin.String

        /**
         * It's long, but you'll almost never pass it.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val deeperOptionalProp: kotlin.String?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.deeperRequiredProp = this.jsiiCall("deeperRequiredProp", kotlin.String::class.java) ?: error("'deeperRequiredProp' should be present")
            this.deeperOptionalProp = this.jsiiCall("deeperOptionalProp", kotlin.String::class.java)
        }

        constructor(deeperRequiredProp: kotlin.String, deeperOptionalProp: kotlin.String?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.deeperRequiredProp = deeperRequiredProp
            this.deeperOptionalProp = deeperOptionalProp
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.SecondLevelStruct
            if (deeperRequiredProp != other.deeperRequiredProp) return false
            if (deeperOptionalProp != other.deeperOptionalProp) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.deeperRequiredProp.hashCode()
            result = 31 * result + (this.deeperOptionalProp?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("deeperRequiredProp", om.valueToTree(this.deeperRequiredProp))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("deeperOptionalProp", om.valueToTree(this.deeperOptionalProp))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SingleInstanceTwoTypes.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Test that a single instance can be returned under two different FQNs.
 * 
 * JSII clients can instantiate 2 different strongly-typed wrappers for the same
 * object. Unfortunately, this will break object equality, but if we didn't do
 * this it would break runtime type checks in the JVM or CLR.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.SingleInstanceTwoTypes")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class SingleInstanceTwoTypes : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun interface1(): software.amazon.jsii.tests.kotlin.calculator.InbetweenClass {
        return this.jsiiCall("interface1", software.amazon.jsii.tests.kotlin.calculator.InbetweenClass::class.java) ?: error("Method 'interface1()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun interface2(): software.amazon.jsii.tests.kotlin.calculator.IPublicInterface {
        return this.jsiiCall("interface2", software.amazon.jsii.tests.kotlin.calculator.IPublicInterface::class.java) ?: error("Method 'interface2()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SingletonInt.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Verifies that singleton enums are handled correctly.
 * 
 * https://github.com/aws/jsii/issues/231
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.SingletonInt")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class SingletonInt : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun isSingletonInt(value: kotlin.Number): kotlin.Boolean {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        return this.jsiiCall("isSingletonInt", kotlin.Boolean::class.java, args) ?: error("Method 'isSingletonInt()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SingletonIntEnum.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
/**
 * A singleton integer.
 */
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
enum class SingletonIntEnum {
    /**
     * Elite!
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    SINGLETON_INT,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SingletonString.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Verifies that singleton enums are handled correctly.
 * 
 * https://github.com/aws/jsii/issues/231
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.SingletonString")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class SingletonString : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun isSingletonString(value: kotlin.String): kotlin.Boolean {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        return this.jsiiCall("isSingletonString", kotlin.Boolean::class.java, args) ?: error("Method 'isSingletonString()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SingletonStringEnum.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
/**
 * A singleton string.
 */
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
enum class SingletonStringEnum {
    /**
     * 1337.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    SINGLETON_STRING,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SmellyStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface SmellyStruct : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val propertyValue: kotlin.String

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val yetAnoterOne: kotlin.Boolean

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var propertyValue: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var yetAnoterOne: kotlin.Boolean? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.SmellyStruct {
            val propertyValue = this.propertyValue ?: kotlin.error("Value for property 'propertyValue' must be specified")
            val yetAnoterOne = this.yetAnoterOne ?: kotlin.error("Value for property 'yetAnoterOne' must be specified")
            return \`Jsii$Proxy\`(propertyValue, yetAnoterOne)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.SmellyStruct {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val propertyValue: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val yetAnoterOne: kotlin.Boolean

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.propertyValue = this.jsiiCall("property", kotlin.String::class.java) ?: error("'property' should be present")
            this.yetAnoterOne = this.jsiiCall("yetAnoterOne", kotlin.Boolean::class.java) ?: error("'yetAnoterOne' should be present")
        }

        constructor(propertyValue: kotlin.String, yetAnoterOne: kotlin.Boolean) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.propertyValue = propertyValue
            this.yetAnoterOne = yetAnoterOne
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.SmellyStruct
            if (propertyValue != other.propertyValue) return false
            if (yetAnoterOne != other.yetAnoterOne) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.propertyValue.hashCode()
            result = 31 * result + (this.yetAnoterOne.hashCode())
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("propertyValue", om.valueToTree(this.propertyValue))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("yetAnoterOne", om.valueToTree(this.yetAnoterOne))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SomeTypeJsii976.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.SomeTypeJsii976")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class SomeTypeJsii976 : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun returnAnonymous(): kotlin.Any {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.SomeTypeJsii976::class.java, "returnAnonymous", kotlin.Any::class.java) ?: error("Method 'returnAnonymous()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun returnReturn(): software.amazon.jsii.tests.kotlin.calculator.IReturnJsii976 {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.SomeTypeJsii976::class.java, "returnReturn", software.amazon.jsii.tests.kotlin.calculator.IReturnJsii976::class.java) ?: error("Method 'returnReturn()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StableClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.StableClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class StableClass : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(readonlyString: kotlin.String, mutableNumber: kotlin.Number?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            readonlyString,
            mutableNumber ?: error("'mutableNumber' should be present")
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val readonlyProperty: kotlin.String
        get() {
            return this.jsiiGet("readonlyProperty", kotlin.String::class.java) ?: error("'readonlyProperty' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var mutableProperty: kotlin.Number?
        get() {
            return this.jsiiGet("mutableProperty", kotlin.Number::class.java)
        }
        set(v) {
            this.jsiiSet("mutableProperty", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun method() {
        this.jsiiCall("method", kotlin.Unit::class.java) ?: error("Method 'method()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StableEnum.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
enum class StableEnum {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    OPTION_A,

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    OPTION_B,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StableStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface StableStruct : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val readonlyProperty: kotlin.String

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var readonlyProperty: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.StableStruct {
            val readonlyProperty = this.readonlyProperty ?: kotlin.error("Value for property 'readonlyProperty' must be specified")
            return \`Jsii$Proxy\`(readonlyProperty)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.StableStruct {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val readonlyProperty: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.readonlyProperty = this.jsiiCall("readonlyProperty", kotlin.String::class.java) ?: error("'readonlyProperty' should be present")
        }

        constructor(readonlyProperty: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.readonlyProperty = readonlyProperty
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.StableStruct
            if (readonlyProperty != other.readonlyProperty) return false
            return true
        }

        override fun hashCode(): Int {
            return this.readonlyProperty.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("readonlyProperty", om.valueToTree(this.readonlyProperty))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StaticContext.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * This is used to validate the ability to use \`this\` from within a static context.
 * 
 * https://github.com/awslabs/aws-cdk/issues/2304
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.StaticContext")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class StaticContext : software.amazon.jsii.JsiiObject {
    companion object {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var staticVariable: kotlin.Boolean
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.StaticContext::class.java, "staticVariable", kotlin.Boolean::class.java) ?: error("'staticVariable' should be present")
            }
            set(v) {
                software.amazon.jsii.JsiiObject.jsiiStaticSet(software.amazon.jsii.tests.kotlin.calculator.StaticContext::class.java, "staticVariable", v)
            }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun canAccessStaticContext(): kotlin.Boolean {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.StaticContext::class.java, "canAccessStaticContext", kotlin.Boolean::class.java) ?: error("Method 'canAccessStaticContext()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Statics.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Statics")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Statics : software.amazon.jsii.JsiiObject {
    companion object {
        /**
         * Constants may also use all-caps.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        val BAR: kotlin.Number
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Statics::class.java, "BAR", kotlin.Number::class.java) ?: error("'BAR' should be present")
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        val ConstObj: software.amazon.jsii.tests.kotlin.calculator.DoubleTrouble
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Statics::class.java, "ConstObj", software.amazon.jsii.tests.kotlin.calculator.DoubleTrouble::class.java) ?: error("'ConstObj' should be present")
            }

        /**
         * Jsdocs for static property.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        val Foo: kotlin.String
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Statics::class.java, "Foo", kotlin.String::class.java) ?: error("'Foo' should be present")
            }

        /**
         * Constants can also use camelCase.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        val zooBar: kotlin.collections.Map<kotlin.String, kotlin.String>
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Statics::class.java, "zooBar", kotlin.collections.Map::class.java) as? kotlin.collections.Map<kotlin.String, kotlin.String> ?: error("'zooBar' should be present")
            }

        /**
         * Jsdocs for static getter.
         * 
         * Jsdocs for static setter.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var instance: software.amazon.jsii.tests.kotlin.calculator.Statics
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Statics::class.java, "instance", software.amazon.jsii.tests.kotlin.calculator.Statics::class.java) ?: error("'instance' should be present")
            }
            set(v) {
                software.amazon.jsii.JsiiObject.jsiiStaticSet(software.amazon.jsii.tests.kotlin.calculator.Statics::class.java, "instance", v)
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var nonConstStatic: kotlin.Number
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Statics::class.java, "nonConstStatic", kotlin.Number::class.java) ?: error("'nonConstStatic' should be present")
            }
            set(v) {
                software.amazon.jsii.JsiiObject.jsiiStaticSet(software.amazon.jsii.tests.kotlin.calculator.Statics::class.java, "nonConstStatic", v)
            }

        /**
         * Jsdocs for static method.
         * 
         * @param nameThe name of the person to say hello to.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun staticMethod(name: kotlin.String): kotlin.String {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                name
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.Statics::class.java, "staticMethod", kotlin.String::class.java, args) ?: error("Method 'staticMethod()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(value: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val value: kotlin.String
        get() {
            return this.jsiiGet("value", kotlin.String::class.java) ?: error("'value' should be present")
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun justMethod(): kotlin.String {
        return this.jsiiCall("justMethod", kotlin.String::class.java) ?: error("Method 'justMethod()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StringEnum.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
enum class StringEnum {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    A,

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    B,

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    C,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StripInternal.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.StripInternal")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class StripInternal : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var youSeeMe: kotlin.String
        get() {
            return this.jsiiGet("youSeeMe", kotlin.String::class.java) ?: error("'youSeeMe' should be present")
        }
        set(v) {
            this.jsiiSet("youSeeMe", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StructA.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * We can serialize and deserialize structs without silently ignoring optional fields.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface StructA : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val requiredString: kotlin.String

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val optionalNumber: kotlin.Number?

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val optionalString: kotlin.String?

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var requiredString: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var optionalNumber: kotlin.Number? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var optionalString: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.StructA {
            val requiredString = this.requiredString ?: kotlin.error("Value for property 'requiredString' must be specified")
            val optionalNumber = this.optionalNumber
            val optionalString = this.optionalString
            return \`Jsii$Proxy\`(requiredString, optionalNumber, optionalString)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.StructA {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val requiredString: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val optionalNumber: kotlin.Number?

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val optionalString: kotlin.String?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.requiredString = this.jsiiCall("requiredString", kotlin.String::class.java) ?: error("'requiredString' should be present")
            this.optionalNumber = this.jsiiCall("optionalNumber", kotlin.Number::class.java)
            this.optionalString = this.jsiiCall("optionalString", kotlin.String::class.java)
        }

        constructor(requiredString: kotlin.String, optionalNumber: kotlin.Number?, optionalString: kotlin.String?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.requiredString = requiredString
            this.optionalNumber = optionalNumber
            this.optionalString = optionalString
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.StructA
            if (requiredString != other.requiredString) return false
            if (optionalNumber != other.optionalNumber) return false
            if (optionalString != other.optionalString) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.requiredString.hashCode()
            result = 31 * result + (this.optionalNumber?.hashCode() ?: 0)
            result = 31 * result + (this.optionalString?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("requiredString", om.valueToTree(this.requiredString))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("optionalNumber", om.valueToTree(this.optionalNumber))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("optionalString", om.valueToTree(this.optionalString))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StructB.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface StructB : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val requiredString: kotlin.String

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val optionalBoolean: kotlin.Boolean?

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val optionalStructA: software.amazon.jsii.tests.kotlin.calculator.StructA?

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var requiredString: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var optionalBoolean: kotlin.Boolean? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var optionalStructA: software.amazon.jsii.tests.kotlin.calculator.StructA? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.StructB {
            val requiredString = this.requiredString ?: kotlin.error("Value for property 'requiredString' must be specified")
            val optionalBoolean = this.optionalBoolean
            val optionalStructA = this.optionalStructA
            return \`Jsii$Proxy\`(requiredString, optionalBoolean, optionalStructA)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.StructB {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val requiredString: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val optionalBoolean: kotlin.Boolean?

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val optionalStructA: software.amazon.jsii.tests.kotlin.calculator.StructA?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.requiredString = this.jsiiCall("requiredString", kotlin.String::class.java) ?: error("'requiredString' should be present")
            this.optionalBoolean = this.jsiiCall("optionalBoolean", kotlin.Boolean::class.java)
            this.optionalStructA = this.jsiiCall("optionalStructA", software.amazon.jsii.tests.kotlin.calculator.StructA::class.java)
        }

        constructor(requiredString: kotlin.String, optionalBoolean: kotlin.Boolean?, optionalStructA: software.amazon.jsii.tests.kotlin.calculator.StructA?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.requiredString = requiredString
            this.optionalBoolean = optionalBoolean
            this.optionalStructA = optionalStructA
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.StructB
            if (requiredString != other.requiredString) return false
            if (optionalBoolean != other.optionalBoolean) return false
            if (optionalStructA != other.optionalStructA) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.requiredString.hashCode()
            result = 31 * result + (this.optionalBoolean?.hashCode() ?: 0)
            result = 31 * result + (this.optionalStructA?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("requiredString", om.valueToTree(this.requiredString))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("optionalBoolean", om.valueToTree(this.optionalBoolean))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("optionalStructA", om.valueToTree(this.optionalStructA))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StructParameterType.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.
 * 
 * See: https://github.com/aws/aws-cdk/issues/4302
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface StructParameterType : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val scope: kotlin.String

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val props: kotlin.Boolean?

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var scope: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var props: kotlin.Boolean? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.StructParameterType {
            val scope = this.scope ?: kotlin.error("Value for property 'scope' must be specified")
            val props = this.props
            return \`Jsii$Proxy\`(scope, props)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.StructParameterType {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val scope: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val props: kotlin.Boolean?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.scope = this.jsiiCall("scope", kotlin.String::class.java) ?: error("'scope' should be present")
            this.props = this.jsiiCall("props", kotlin.Boolean::class.java)
        }

        constructor(scope: kotlin.String, props: kotlin.Boolean?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.scope = scope
            this.props = props
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.StructParameterType
            if (scope != other.scope) return false
            if (props != other.props) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.scope.hashCode()
            result = 31 * result + (this.props?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("scope", om.valueToTree(this.scope))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("props", om.valueToTree(this.props))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StructPassing.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Just because we can.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.StructPassing")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.External)
open class StructPassing : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.External)
        fun howManyVarArgsDidIPass(_positional: kotlin.Number, vararg inputs: software.amazon.jsii.tests.kotlin.calculator.TopLevelStruct): kotlin.Number {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                _positional,
                inputs
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.StructPassing::class.java, "howManyVarArgsDidIPass", kotlin.Number::class.java, args) ?: error("Method 'howManyVarArgsDidIPass()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.External)
        fun roundTrip(_positional: kotlin.Number, input: software.amazon.jsii.tests.kotlin.calculator.TopLevelStruct): software.amazon.jsii.tests.kotlin.calculator.TopLevelStruct {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                _positional,
                input
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.StructPassing::class.java, "roundTrip", software.amazon.jsii.tests.kotlin.calculator.TopLevelStruct::class.java, args) ?: error("Method 'roundTrip()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StructUnionConsumer.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.StructUnionConsumer")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class StructUnionConsumer : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun isStructA(struct: kotlin.Any): kotlin.Boolean {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                struct
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.StructUnionConsumer::class.java, "isStructA", kotlin.Boolean::class.java, args) ?: error("Method 'isStructA()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun isStructB(struct: kotlin.Any): kotlin.Boolean {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                struct
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.StructUnionConsumer::class.java, "isStructB", kotlin.Boolean::class.java, args) ?: error("Method 'isStructB()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/StructWithJavaReservedWords.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface StructWithJavaReservedWords : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val default: kotlin.String

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val assert: kotlin.String?

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val result: kotlin.String?

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val that: kotlin.String?

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var default: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var assert: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var result: kotlin.String? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var that: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.StructWithJavaReservedWords {
            val default = this.default ?: kotlin.error("Value for property 'default' must be specified")
            val assert = this.assert
            val result = this.result
            val that = this.that
            return \`Jsii$Proxy\`(default, assert, result, that)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.StructWithJavaReservedWords {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val default: kotlin.String

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val assert: kotlin.String?

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val result: kotlin.String?

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val that: kotlin.String?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.default = this.jsiiCall("default", kotlin.String::class.java) ?: error("'default' should be present")
            this.assert = this.jsiiCall("assert", kotlin.String::class.java)
            this.result = this.jsiiCall("result", kotlin.String::class.java)
            this.that = this.jsiiCall("that", kotlin.String::class.java)
        }

        constructor(default: kotlin.String, assert: kotlin.String?, result: kotlin.String?, that: kotlin.String?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.default = default
            this.assert = assert
            this.result = result
            this.that = that
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.StructWithJavaReservedWords
            if (default != other.default) return false
            if (assert != other.assert) return false
            if (result != other.result) return false
            if (that != other.that) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.default.hashCode()
            result = 31 * result + (this.assert?.hashCode() ?: 0)
            result = 31 * result + (this.result?.hashCode() ?: 0)
            result = 31 * result + (this.that?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("default", om.valueToTree(this.default))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("assert", om.valueToTree(this.assert))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("result", om.valueToTree(this.result))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("that", om.valueToTree(this.that))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Sum.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * An operation that sums multiple values.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Sum")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Sum : software.amazon.jsii.tests.kotlin.calculator.composition.CompositeOperation {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    /**
     * The expression that this operation consists of.
     * 
     * Must be implemented by derived classes.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val expression: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
        get() {
            return this.jsiiGet("expression", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'expression' should be present")
        }

    /**
     * The parts to sum.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var parts: kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue>
        get() {
            return this.jsiiGet("parts", kotlin.collections.List::class.java) as? kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue> ?: error("'parts' should be present")
        }
        set(v) {
            this.jsiiSet("parts", v)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SupportsNiceJavaBuilder.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.SupportsNiceJavaBuilder")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class SupportsNiceJavaBuilder : software.amazon.jsii.tests.kotlin.calculator.SupportsNiceJavaBuilderWithRequiredProps {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(id: kotlin.Number, defaultBar: kotlin.Number?, props: software.amazon.jsii.tests.kotlin.calculator.SupportsNiceJavaBuilderProps?, vararg rest: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            id,
            defaultBar ?: error("'defaultBar' should be present"),
            props ?: error("'props' should be present"),
            rest
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    /**
     * some identifier.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val id: kotlin.Number
        get() {
            return this.jsiiGet("id", kotlin.Number::class.java) ?: error("'id' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val rest: kotlin.collections.List<kotlin.String>
        get() {
            return this.jsiiGet("rest", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String> ?: error("'rest' should be present")
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SupportsNiceJavaBuilderProps.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface SupportsNiceJavaBuilderProps : software.amazon.jsii.JsiiSerializable {
    /**
     * Some number, like 42.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val bar: kotlin.Number

    /**
     * An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
     * 
     * But here we are, doing it like we didn't care.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val id: kotlin.String?

    class Builder {
        /**
         * Some number, like 42.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var bar: kotlin.Number? = null

        /**
         * An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
         * 
         * But here we are, doing it like we didn't care.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var id: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.SupportsNiceJavaBuilderProps {
            val bar = this.bar ?: kotlin.error("Value for property 'bar' must be specified")
            val id = this.id
            return \`Jsii$Proxy\`(bar, id)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.SupportsNiceJavaBuilderProps {
        /**
         * Some number, like 42.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val bar: kotlin.Number

        /**
         * An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
         * 
         * But here we are, doing it like we didn't care.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val id: kotlin.String?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.bar = this.jsiiCall("bar", kotlin.Number::class.java) ?: error("'bar' should be present")
            this.id = this.jsiiCall("id", kotlin.String::class.java)
        }

        constructor(bar: kotlin.Number, id: kotlin.String?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.bar = bar
            this.id = id
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.SupportsNiceJavaBuilderProps
            if (bar != other.bar) return false
            if (id != other.id) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.bar.hashCode()
            result = 31 * result + (this.id?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("bar", om.valueToTree(this.bar))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("id", om.valueToTree(this.id))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SupportsNiceJavaBuilderWithRequiredProps.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * We can generate fancy builders in Java for classes which take a mix of positional & struct parameters.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.SupportsNiceJavaBuilderWithRequiredProps")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class SupportsNiceJavaBuilderWithRequiredProps : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(id: kotlin.Number, props: software.amazon.jsii.tests.kotlin.calculator.SupportsNiceJavaBuilderProps) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            id,
            props
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val bar: kotlin.Number
        get() {
            return this.jsiiGet("bar", kotlin.Number::class.java) ?: error("'bar' should be present")
        }

    /**
     * some identifier of your choice.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val id: kotlin.Number
        get() {
            return this.jsiiGet("id", kotlin.Number::class.java) ?: error("'id' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val propId: kotlin.String?
        get() {
            return this.jsiiGet("propId", kotlin.String::class.java)
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/SyncVirtualMethods.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.SyncVirtualMethods")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class SyncVirtualMethods : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val readonlyProperty: kotlin.String
        get() {
            return this.jsiiGet("readonlyProperty", kotlin.String::class.java) ?: error("'readonlyProperty' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var a: kotlin.Number
        get() {
            return this.jsiiGet("a", kotlin.Number::class.java) ?: error("'a' should be present")
        }
        set(v) {
            this.jsiiSet("a", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var callerIsProperty: kotlin.Number
        get() {
            return this.jsiiGet("callerIsProperty", kotlin.Number::class.java) ?: error("'callerIsProperty' should be present")
        }
        set(v) {
            this.jsiiSet("callerIsProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var otherProperty: kotlin.String
        get() {
            return this.jsiiGet("otherProperty", kotlin.String::class.java) ?: error("'otherProperty' should be present")
        }
        set(v) {
            this.jsiiSet("otherProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var theProperty: kotlin.String
        get() {
            return this.jsiiGet("theProperty", kotlin.String::class.java) ?: error("'theProperty' should be present")
        }
        set(v) {
            this.jsiiSet("theProperty", v)
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var valueOfOtherProperty: kotlin.String
        get() {
            return this.jsiiGet("valueOfOtherProperty", kotlin.String::class.java) ?: error("'valueOfOtherProperty' should be present")
        }
        set(v) {
            this.jsiiSet("valueOfOtherProperty", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun callerIsAsync(): kotlin.Number {
        return this.jsiiCall("callerIsAsync", kotlin.Number::class.java) ?: error("Method 'callerIsAsync()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun callerIsMethod(): kotlin.Number {
        return this.jsiiCall("callerIsMethod", kotlin.Number::class.java) ?: error("Method 'callerIsMethod()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun modifyOtherProperty(value: kotlin.String) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        this.jsiiCall("modifyOtherProperty", kotlin.Unit::class.java, args) ?: error("Method 'modifyOtherProperty()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun modifyValueOfTheProperty(value: kotlin.String) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        this.jsiiCall("modifyValueOfTheProperty", kotlin.Unit::class.java, args) ?: error("Method 'modifyValueOfTheProperty()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun readA(): kotlin.Number {
        return this.jsiiCall("readA", kotlin.Number::class.java) ?: error("Method 'readA()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun retrieveOtherProperty(): kotlin.String {
        return this.jsiiCall("retrieveOtherProperty", kotlin.String::class.java) ?: error("Method 'retrieveOtherProperty()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun retrieveReadOnlyProperty(): kotlin.String {
        return this.jsiiCall("retrieveReadOnlyProperty", kotlin.String::class.java) ?: error("Method 'retrieveReadOnlyProperty()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun retrieveValueOfTheProperty(): kotlin.String {
        return this.jsiiCall("retrieveValueOfTheProperty", kotlin.String::class.java) ?: error("Method 'retrieveValueOfTheProperty()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun virtualMethod(n: kotlin.Number): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            n
        )
        return this.jsiiCall("virtualMethod", kotlin.Number::class.java, args) ?: error("Method 'virtualMethod()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun writeA(value: kotlin.Number) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        this.jsiiCall("writeA", kotlin.Unit::class.java, args) ?: error("Method 'writeA()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/Thrower.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.Thrower")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Thrower : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun throwError() {
        this.jsiiCall("throwError", kotlin.Unit::class.java) ?: error("Method 'throwError()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/TopLevelStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface TopLevelStruct : software.amazon.jsii.JsiiSerializable {
    /**
     * This is a required field.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val required: kotlin.String

    /**
     * A union to really stress test our serialization.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val secondLevel: kotlin.Any

    /**
     * You don't have to pass this.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val optional: kotlin.String?

    class Builder {
        /**
         * This is a required field.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var required: kotlin.String? = null

        /**
         * A union to really stress test our serialization.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var secondLevel: kotlin.Any? = null

        /**
         * You don't have to pass this.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var optional: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.TopLevelStruct {
            val required = this.required ?: kotlin.error("Value for property 'required' must be specified")
            val secondLevel = this.secondLevel ?: kotlin.error("Value for property 'secondLevel' must be specified")
            val optional = this.optional
            return \`Jsii$Proxy\`(required, secondLevel, optional)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.TopLevelStruct {
        /**
         * This is a required field.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val required: kotlin.String

        /**
         * A union to really stress test our serialization.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val secondLevel: kotlin.Any

        /**
         * You don't have to pass this.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val optional: kotlin.String?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.required = this.jsiiCall("required", kotlin.String::class.java) ?: error("'required' should be present")
            this.secondLevel = this.jsiiCall("secondLevel", kotlin.Any::class.java) ?: error("'secondLevel' should be present")
            this.optional = this.jsiiCall("optional", kotlin.String::class.java)
        }

        constructor(required: kotlin.String, secondLevel: kotlin.Any, optional: kotlin.String?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.required = required
            this.secondLevel = secondLevel
            this.optional = optional
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.TopLevelStruct
            if (required != other.required) return false
            if (secondLevel != other.secondLevel) return false
            if (optional != other.optional) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.required.hashCode()
            result = 31 * result + (this.secondLevel.hashCode())
            result = 31 * result + (this.optional?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("required", om.valueToTree(this.required))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("secondLevel", om.valueToTree(this.secondLevel))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("optional", om.valueToTree(this.optional))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/UmaskCheck.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Checks the current file permissions are cool (no funky UMASK down-scoping happened).
 * 
 * @see https://github.com/aws/jsii/issues/1765
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.UmaskCheck")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class UmaskCheck : software.amazon.jsii.JsiiObject {
    companion object {
        /**
         * This should return 0o644 (-rw-r--r--).
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun mode(): kotlin.Number {
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.UmaskCheck::class.java, "mode", kotlin.Number::class.java) ?: error("Method 'mode()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/UnaryOperation.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * An operation on a single operand.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.UnaryOperation")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class UnaryOperation : software.amazon.jsii.tests.kotlin.calculator.lib.Operation {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(operand: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            operand
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val operand: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
        get() {
            return this.jsiiGet("operand", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'operand' should be present")
        }

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.UnaryOperation {
        /**
         * The value.
         */
        @Deprecated("Declaration is deprecated.")
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override val value: kotlin.Number
            get() {
                return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val operand: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
            get() {
                return this.jsiiGet("operand", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'operand' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * @return the name of the class (to verify native type names are created for derived classes).
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun typeName(): kotlin.Any {
            return this.jsiiCall("typeName", kotlin.Any::class.java) ?: error("Method 'typeName()' returned null value")
        }

        /**
         * String representation of the value.
         */
        @Deprecated("Declaration is deprecated.")
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Deprecated)
        override fun toString(): kotlin.String {
            return this.jsiiCall("toString", kotlin.String::class.java) ?: error("Method 'toString()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/UnionProperties.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface UnionProperties : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val bar: kotlin.Any

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val foo: kotlin.Any?

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var bar: kotlin.Any? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var foo: kotlin.Any? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.UnionProperties {
            val bar = this.bar ?: kotlin.error("Value for property 'bar' must be specified")
            val foo = this.foo
            return \`Jsii$Proxy\`(bar, foo)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.UnionProperties {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val bar: kotlin.Any

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val foo: kotlin.Any?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.bar = this.jsiiCall("bar", kotlin.Any::class.java) ?: error("'bar' should be present")
            this.foo = this.jsiiCall("foo", kotlin.Any::class.java)
        }

        constructor(bar: kotlin.Any, foo: kotlin.Any?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.bar = bar
            this.foo = foo
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.UnionProperties
            if (bar != other.bar) return false
            if (foo != other.foo) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.bar.hashCode()
            result = 31 * result + (this.foo?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("bar", om.valueToTree(this.bar))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("foo", om.valueToTree(this.foo))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/UpcasingReflectable.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Ensures submodule-imported types from dependencies can be used correctly.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.UpcasingReflectable")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class UpcasingReflectable : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.lib.submodule.IReflectable {
    companion object {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        val reflector: software.amazon.jsii.tests.kotlin.calculator.lib.submodule.Reflector
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.UpcasingReflectable::class.java, "reflector", software.amazon.jsii.tests.kotlin.calculator.lib.submodule.Reflector::class.java) ?: error("'reflector' should be present")
            }

    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(delegateValue: kotlin.collections.Map<kotlin.String, kotlin.Any>) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            delegateValue
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val entries: kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.submodule.ReflectableEntry>
        get() {
            return this.jsiiGet("entries", kotlin.collections.List::class.java) as? kotlin.collections.List<software.amazon.jsii.tests.kotlin.calculator.lib.submodule.ReflectableEntry> ?: error("'entries' should be present")
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/UseBundledDependency.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.UseBundledDependency")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class UseBundledDependency : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun value(): kotlin.Any {
        return this.jsiiCall("value", kotlin.Any::class.java) ?: error("Method 'value()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/UseCalcBase.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Depend on a type from jsii-calc-base as a test for awslabs/jsii#128.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.UseCalcBase")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class UseCalcBase : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun hello(): software.amazon.jsii.tests.kotlin.calculator.base.Base {
        return this.jsiiCall("hello", software.amazon.jsii.tests.kotlin.calculator.base.Base::class.java) ?: error("Method 'hello()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/UsesInterfaceWithProperties.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.UsesInterfaceWithProperties")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class UsesInterfaceWithProperties : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(obj: software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithProperties) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            obj
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val obj: software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithProperties
        get() {
            return this.jsiiGet("obj", software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithProperties::class.java) ?: error("'obj' should be present")
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun justRead(): kotlin.String {
        return this.jsiiCall("justRead", kotlin.String::class.java) ?: error("Method 'justRead()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun readStringAndNumber(ext: software.amazon.jsii.tests.kotlin.calculator.IInterfaceWithPropertiesExtension): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            ext
        )
        return this.jsiiCall("readStringAndNumber", kotlin.String::class.java, args) ?: error("Method 'readStringAndNumber()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun writeAndRead(value: kotlin.String): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            value
        )
        return this.jsiiCall("writeAndRead", kotlin.String::class.java, args) ?: error("Method 'writeAndRead()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/VariadicInvoker.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.VariadicInvoker")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class VariadicInvoker : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(method: software.amazon.jsii.tests.kotlin.calculator.VariadicMethod) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            method
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun asArray(vararg values: kotlin.Number): kotlin.collections.List<kotlin.Number> {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            values
        )
        return this.jsiiCall("asArray", kotlin.collections.List::class.java, args) as? kotlin.collections.List<kotlin.Number> ?: error("Method 'asArray()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/VariadicMethod.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.VariadicMethod")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class VariadicMethod : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(vararg prefix: kotlin.Number) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            prefix
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    /**
     * @param firstthe first element of the array to be returned (after the \`prefix\` provided at construction time).
     * 
     * @param othersother elements to be included in the array.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun asArray(first: kotlin.Number, vararg others: kotlin.Number): kotlin.collections.List<kotlin.Number> {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            first,
            others
        )
        return this.jsiiCall("asArray", kotlin.collections.List::class.java, args) as? kotlin.collections.List<kotlin.Number> ?: error("Method 'asArray()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/VirtualMethodPlayground.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.VirtualMethodPlayground")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class VirtualMethodPlayground : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun overrideMeAsync(index: kotlin.Number): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            index
        )
        return this.jsiiCall("overrideMeAsync", kotlin.Number::class.java, args) ?: error("Method 'overrideMeAsync()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun overrideMeSync(index: kotlin.Number): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            index
        )
        return this.jsiiCall("overrideMeSync", kotlin.Number::class.java, args) ?: error("Method 'overrideMeSync()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun parallelSumAsync(count: kotlin.Number): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            count
        )
        return this.jsiiCall("parallelSumAsync", kotlin.Number::class.java, args) ?: error("Method 'parallelSumAsync()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun serialSumAsync(count: kotlin.Number): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            count
        )
        return this.jsiiCall("serialSumAsync", kotlin.Number::class.java, args) ?: error("Method 'serialSumAsync()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun sumSync(count: kotlin.Number): kotlin.Number {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            count
        )
        return this.jsiiCall("sumSync", kotlin.Number::class.java, args) ?: error("Method 'sumSync()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/VoidCallback.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * This test is used to validate the runtimes can return correctly from a void callback.
 * 
 * - Implement \`overrideMe\` (method does not have to do anything).
 * - Invoke \`callMe\`
 * - Verify that \`methodWasCalled\` is \`true\`.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.VoidCallback")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class VoidCallback : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val methodWasCalled: kotlin.Boolean
        get() {
            return this.jsiiGet("methodWasCalled", kotlin.Boolean::class.java) ?: error("'methodWasCalled' should be present")
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun callMe() {
        this.jsiiCall("callMe", kotlin.Unit::class.java) ?: error("Method 'callMe()' returned null value")
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    protected abstract fun overrideMe()

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.VoidCallback {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val methodWasCalled: kotlin.Boolean
            get() {
                return this.jsiiGet("methodWasCalled", kotlin.Boolean::class.java) ?: error("'methodWasCalled' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun callMe() {
            this.jsiiCall("callMe", kotlin.Unit::class.java) ?: error("Method 'callMe()' returned null value")
        }

        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        protected override fun overrideMe() {
            this.jsiiCall("overrideMe", kotlin.Unit::class.java) ?: error("Method 'overrideMe()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/WithPrivatePropertyInConstructor.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator

/**
 * Verifies that private property declarations in constructor arguments are hidden.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.WithPrivatePropertyInConstructor")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class WithPrivatePropertyInConstructor : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(privateField: kotlin.String?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            privateField ?: error("'privateField' should be present")
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val success: kotlin.Boolean
        get() {
            return this.jsiiGet("success", kotlin.Boolean::class.java) ?: error("'success' should be present")
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/composition/CompositeOperation.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.composition

/**
 * Abstract operation composed from an expression of other operations.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.composition.CompositeOperation")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class CompositeOperation : software.amazon.jsii.tests.kotlin.calculator.lib.Operation {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    /**
     * The expression that this operation consists of.
     * 
     * Must be implemented by derived classes.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    abstract val expression: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue

    /**
     * (deprecated) The value.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val value: kotlin.Number
        get() {
            return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
        }

    /**
     * A set of postfixes to include in a decorated .toString().
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var decorationPostfixes: kotlin.collections.List<kotlin.String>
        get() {
            return this.jsiiGet("decorationPostfixes", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String> ?: error("'decorationPostfixes' should be present")
        }
        set(v) {
            this.jsiiSet("decorationPostfixes", v)
        }

    /**
     * A set of prefixes to include in a decorated .toString().
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var decorationPrefixes: kotlin.collections.List<kotlin.String>
        get() {
            return this.jsiiGet("decorationPrefixes", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String> ?: error("'decorationPrefixes' should be present")
        }
        set(v) {
            this.jsiiSet("decorationPrefixes", v)
        }

    /**
     * The .toString() style.
     */
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var stringStyle: software.amazon.jsii.tests.kotlin.calculator.composition.CompositeOperation.CompositionStringStyle
        get() {
            return this.jsiiGet("stringStyle", software.amazon.jsii.tests.kotlin.calculator.composition.CompositeOperation.CompositionStringStyle::class.java) ?: error("'stringStyle' should be present")
        }
        set(v) {
            this.jsiiSet("stringStyle", v)
        }

    /**
     * (deprecated) String representation of the value.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override fun toString(): kotlin.String {
        return this.jsiiCall("toString", kotlin.String::class.java) ?: error("Method 'toString()' returned null value")
    }

    /**
     * Style of .toString() output for CompositeOperation.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    enum class CompositionStringStyle {
        /**
         * Normal string expression.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        NORMAL,

        /**
         * Decorated string expression.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        DECORATED,
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.composition.CompositeOperation {
        /**
         * (deprecated) The value.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val value: kotlin.Number
            get() {
                return this.jsiiGet("value", kotlin.Number::class.java) ?: error("'value' should be present")
            }

        /**
         * The expression that this operation consists of.
         * 
         * Must be implemented by derived classes.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val expression: software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue
            get() {
                return this.jsiiGet("expression", software.amazon.jsii.tests.kotlin.calculator.lib.NumericValue::class.java) ?: error("'expression' should be present")
            }

        /**
         * A set of postfixes to include in a decorated .toString().
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var decorationPostfixes: kotlin.collections.List<kotlin.String>
            get() {
                return this.jsiiGet("decorationPostfixes", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String> ?: error("'decorationPostfixes' should be present")
            }
            set(v) {
                this.jsiiSet("decorationPostfixes", v)
            }

        /**
         * A set of prefixes to include in a decorated .toString().
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var decorationPrefixes: kotlin.collections.List<kotlin.String>
            get() {
                return this.jsiiGet("decorationPrefixes", kotlin.collections.List::class.java) as? kotlin.collections.List<kotlin.String> ?: error("'decorationPrefixes' should be present")
            }
            set(v) {
                this.jsiiSet("decorationPrefixes", v)
            }

        /**
         * The .toString() style.
         */
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override var stringStyle: software.amazon.jsii.tests.kotlin.calculator.composition.CompositeOperation.CompositionStringStyle
            get() {
                return this.jsiiGet("stringStyle", software.amazon.jsii.tests.kotlin.calculator.composition.CompositeOperation.CompositionStringStyle::class.java) ?: error("'stringStyle' should be present")
            }
            set(v) {
                this.jsiiSet("stringStyle", v)
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }

        /**
         * @return the name of the class (to verify native type names are created for derived classes).
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun typeName(): kotlin.Any {
            return this.jsiiCall("typeName", kotlin.Any::class.java) ?: error("Method 'typeName()' returned null value")
        }

        /**
         * (deprecated) String representation of the value.
         */
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override fun toString(): kotlin.String {
            return this.jsiiCall("toString", kotlin.String::class.java) ?: error("Method 'toString()' returned null value")
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/MyClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.submodule.MyClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class MyClass : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.submodule.nested_submodule.deeplyNested.INamespaced {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor(props: software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeStruct) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            props
        )
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this, args)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val awesomeness: software.amazon.jsii.tests.kotlin.calculator.submodule.child.Awesomeness
        get() {
            return this.jsiiGet("awesomeness", software.amazon.jsii.tests.kotlin.calculator.submodule.child.Awesomeness::class.java) ?: error("'awesomeness' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val definedAt: kotlin.String
        get() {
            return this.jsiiGet("definedAt", kotlin.String::class.java) ?: error("'definedAt' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val goodness: software.amazon.jsii.tests.kotlin.calculator.submodule.child.Goodness
        get() {
            return this.jsiiGet("goodness", software.amazon.jsii.tests.kotlin.calculator.submodule.child.Goodness::class.java) ?: error("'goodness' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val props: software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeStruct
        get() {
            return this.jsiiGet("props", software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeStruct::class.java) ?: error("'props' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open var allTypes: software.amazon.jsii.tests.kotlin.calculator.AllTypes?
        get() {
            return this.jsiiGet("allTypes", software.amazon.jsii.tests.kotlin.calculator.AllTypes::class.java)
        }
        set(v) {
            this.jsiiSet("allTypes", v)
        }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun methodWithSpecialParam(paramValue: software.amazon.jsii.tests.kotlin.calculator.submodule.param.SpecialParameter): kotlin.String {
        val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
            paramValue
        )
        return this.jsiiCall("methodWithSpecialParam", kotlin.String::class.java, args) ?: error("Method 'methodWithSpecialParam()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/back_references/MyClassReference.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.back_references

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface MyClassReference : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val reference: software.amazon.jsii.tests.kotlin.calculator.submodule.MyClass

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var reference: software.amazon.jsii.tests.kotlin.calculator.submodule.MyClass? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.submodule.back_references.MyClassReference {
            val reference = this.reference ?: kotlin.error("Value for property 'reference' must be specified")
            return \`Jsii$Proxy\`(reference)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.submodule.back_references.MyClassReference {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val reference: software.amazon.jsii.tests.kotlin.calculator.submodule.MyClass

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.reference = this.jsiiCall("reference", software.amazon.jsii.tests.kotlin.calculator.submodule.MyClass::class.java) ?: error("'reference' should be present")
        }

        constructor(reference: software.amazon.jsii.tests.kotlin.calculator.submodule.MyClass) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.reference = reference
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.submodule.back_references.MyClassReference
            if (reference != other.reference) return false
            return true
        }

        override fun hashCode(): Int {
            return this.reference.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("reference", om.valueToTree(this.reference))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/child/Awesomeness.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.child

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
enum class Awesomeness {
    /**
     * It was awesome!
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    AWESOME,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/child/Goodness.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.child

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
enum class Goodness {
    /**
     * It's pretty good.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    PRETTY_GOOD,

    /**
     * It's really good.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    REALLY_GOOD,

    /**
     * It's amazingly good.
     */
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    AMAZINGLY_GOOD,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/child/InnerClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.child

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.submodule.child.InnerClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class InnerClass : software.amazon.jsii.JsiiObject {
    companion object {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        val staticProp: software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeStruct
            get() {
                return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.submodule.child.InnerClass::class.java, "staticProp", software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeStruct::class.java) ?: error("'staticProp' should be present")
            }

    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/child/KwargsProps.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.child

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface KwargsProps : software.amazon.jsii.JsiiSerializable, software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeStruct {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val extra: kotlin.String?

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var prop: software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeEnum? = null

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var extra: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.submodule.child.KwargsProps {
            val prop = this.prop ?: kotlin.error("Value for property 'prop' must be specified")
            val extra = this.extra
            return \`Jsii$Proxy\`(prop, extra)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.submodule.child.KwargsProps {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val prop: software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeEnum

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val extra: kotlin.String?

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.prop = this.jsiiCall("prop", software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeEnum::class.java) ?: error("'prop' should be present")
            this.extra = this.jsiiCall("extra", kotlin.String::class.java)
        }

        constructor(prop: software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeEnum, extra: kotlin.String?) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.prop = prop
            this.extra = extra
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.submodule.child.KwargsProps
            if (prop != other.prop) return false
            if (extra != other.extra) return false
            return true
        }

        override fun hashCode(): Int {
            var result = this.prop.hashCode()
            result = 31 * result + (this.extra?.hashCode() ?: 0)
            return result
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("prop", om.valueToTree(this.prop))
            obj.set<com.fasterxml.jackson.databind.JsonNode>("extra", om.valueToTree(this.extra))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/child/OuterClass.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.child

/**
 * Checks that classes can self-reference during initialization.
 * 
 * @see : https://github.com/aws/jsii/pull/1706
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.submodule.child.OuterClass")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class OuterClass : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open val innerClass: software.amazon.jsii.tests.kotlin.calculator.submodule.child.InnerClass
        get() {
            return this.jsiiGet("innerClass", software.amazon.jsii.tests.kotlin.calculator.submodule.child.InnerClass::class.java) ?: error("'innerClass' should be present")
        }

}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/child/SomeEnum.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.child

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
enum class SomeEnum {
    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    SOME,
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/child/SomeStruct.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.child

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface SomeStruct : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val prop: software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeEnum

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var prop: software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeEnum? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeStruct {
            val prop = this.prop ?: kotlin.error("Value for property 'prop' must be specified")
            return \`Jsii$Proxy\`(prop)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeStruct {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val prop: software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeEnum

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.prop = this.jsiiCall("prop", software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeEnum::class.java) ?: error("'prop' should be present")
        }

        constructor(prop: software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeEnum) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.prop = prop
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.submodule.child.SomeStruct
            if (prop != other.prop) return false
            return true
        }

        override fun hashCode(): Int {
            return this.prop.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("prop", om.valueToTree(this.prop))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/child/Structure.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.child

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface Structure : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val bool: kotlin.Boolean

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var bool: kotlin.Boolean? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.submodule.child.Structure {
            val bool = this.bool ?: kotlin.error("Value for property 'bool' must be specified")
            return \`Jsii$Proxy\`(bool)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.submodule.child.Structure {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val bool: kotlin.Boolean

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.bool = this.jsiiCall("bool", kotlin.Boolean::class.java) ?: error("'bool' should be present")
        }

        constructor(bool: kotlin.Boolean) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.bool = bool
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.submodule.child.Structure
            if (bool != other.bool) return false
            return true
        }

        override fun hashCode(): Int {
            return this.bool.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("bool", om.valueToTree(this.bool))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/isolated/Kwargs.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.isolated

/**
 * Ensures imports are correctly registered for kwargs lifted properties from super-structs.
 */
@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.submodule.isolated.Kwargs")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class Kwargs : software.amazon.jsii.JsiiObject {
    companion object {
        @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        fun method(props: software.amazon.jsii.tests.kotlin.calculator.submodule.child.KwargsProps?): kotlin.Boolean {
            val args: kotlin.Array<kotlin.Any?> = kotlin.arrayOf(
                props ?: error("'props' should be present")
            )
            return software.amazon.jsii.JsiiObject.jsiiStaticCall(software.amazon.jsii.tests.kotlin.calculator.submodule.isolated.Kwargs::class.java, "method", kotlin.Boolean::class.java, args) ?: error("Method 'method()' returned null value")
        }
    }
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/nested_submodule/Namespaced.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.nested_submodule

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.submodule.nested_submodule.Namespaced")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
abstract class Namespaced : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.submodule.nested_submodule.deeplyNested.INamespaced {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open override val definedAt: kotlin.String
        get() {
            return this.jsiiGet("definedAt", kotlin.String::class.java) ?: error("'definedAt' should be present")
        }

    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    abstract val goodness: software.amazon.jsii.tests.kotlin.calculator.submodule.child.Goodness

    class \`Jsii$Proxy\` : software.amazon.jsii.tests.kotlin.calculator.submodule.nested_submodule.Namespaced {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val definedAt: kotlin.String
            get() {
                return this.jsiiGet("definedAt", kotlin.String::class.java) ?: error("'definedAt' should be present")
            }

        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val goodness: software.amazon.jsii.tests.kotlin.calculator.submodule.child.Goodness
            get() {
                return this.jsiiGet("goodness", software.amazon.jsii.tests.kotlin.calculator.submodule.child.Goodness::class.java) ?: error("'goodness' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/nested_submodule/deeplyNested/INamespaced.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.nested_submodule.deeplyNested

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface INamespaced : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val definedAt: kotlin.String

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.submodule.nested_submodule.deeplyNested.INamespaced {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val definedAt: kotlin.String
            get() {
                return this.jsiiGet("definedAt", kotlin.String::class.java) ?: error("'definedAt' should be present")
            }

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/param/SpecialParameter.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.param

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
interface SpecialParameter : software.amazon.jsii.JsiiSerializable {
    @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    val value: kotlin.String

    class Builder {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        var value: kotlin.String? = null

        fun build(): software.amazon.jsii.tests.kotlin.calculator.submodule.param.SpecialParameter {
            val value = this.value ?: kotlin.error("Value for property 'value' must be specified")
            return \`Jsii$Proxy\`(value)
        }
    }

    class \`Jsii$Proxy\` : software.amazon.jsii.JsiiObject, software.amazon.jsii.tests.kotlin.calculator.submodule.param.SpecialParameter {
        @get:software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
        override val value: kotlin.String

        protected constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef) {
            this.value = this.jsiiCall("value", kotlin.String::class.java) ?: error("'value' should be present")
        }

        constructor(value: kotlin.String) : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
            this.value = value
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            other as software.amazon.jsii.tests.kotlin.calculator.submodule.param.SpecialParameter
            if (value != other.value) return false
            return true
        }

        override fun hashCode(): Int {
            return this.value.hashCode()
        }

        override fun \`$jsii$toJson\`(): com.fasterxml.jackson.databind.JsonNode {
            val om = software.amazon.jsii.JsiiObjectMapper.INSTANCE
            val obj = com.fasterxml.jackson.databind.node.JsonNodeFactory.instance.objectNode()
            obj.set<com.fasterxml.jackson.databind.JsonNode>("value", om.valueToTree(this.value))
            return obj
        }
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/kotlin/software/amazon/jsii/tests/kotlin/calculator/submodule/returnsparam/ReturnsSpecialParameter.kt 1`] = `
package software.amazon.jsii.tests.kotlin.calculator.submodule.returnsparam

@javax.annotation.Generated("jsii-pacmak")
@software.amazon.jsii.Jsii(module = software.amazon.jsii.tests.kotlin.calculator.\`$Module\`::class, fqn = "jsii-calc.submodule.returnsparam.ReturnsSpecialParameter")
@software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
open class ReturnsSpecialParameter : software.amazon.jsii.JsiiObject {
    constructor(objRef: software.amazon.jsii.JsiiObjectRef) : super(objRef)
    constructor(mode: software.amazon.jsii.JsiiObject.InitializationMode) : super(mode)

    constructor() : super(software.amazon.jsii.JsiiObject.InitializationMode.JSII) {
        software.amazon.jsii.JsiiEngine.getInstance().createNewObject(this)
    }

    @software.amazon.jsii.Stability(software.amazon.jsii.Stability.Level.Stable)
    open fun returnsSpecialParam(): software.amazon.jsii.tests.kotlin.calculator.submodule.param.SpecialParameter {
        return this.jsiiCall("returnsSpecialParam", software.amazon.jsii.tests.kotlin.calculator.submodule.param.SpecialParameter::class.java) ?: error("Method 'returnsSpecialParam()' returned null value")
    }
}

`;

exports[`Generated code for "jsii-calc": <outDir>/kotlin/src/main/resources/jsii-calc/jsii-calc@0.0.0.jsii.tgz 1`] = `kotlin/src/main/resources/jsii-calc/jsii-calc@0.0.0.jsii.tgz is a tarball`;
