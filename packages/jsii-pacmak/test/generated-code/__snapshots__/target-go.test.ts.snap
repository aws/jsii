// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/ 1`] = `
<root>
 ┗━ 📁 go
    ┗━ 📁 scopejsiicalcbase
       ┣━ 📁 jsii
       ┃  ┣━ 📄 jsii.go
       ┃  ┗━ 📄 tarball.embedded.go
       ┗━ 📄 scopejsiicalcbase.go
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/jsii/jsii.go 1`] = `
package jsii

import (
	rt "github.com/aws-cdk/jsii/jsii-experimental"
	"sync"
	// Initialization endpoints of dependencies
	scopejsiicalcbaseofbase "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase/jsii"
)

var once sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Ensure all dependencies are initialized
		scopejsiicalcbaseofbase.Initialize()

		// Load this library into the kernel
		rt.Load("@scope/jsii-calc-base", "0.0.0", tarball)
	})
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/jsii/tarball.embedded.go 1`] = `go/scopejsiicalcbase/jsii/tarball.embedded.go embeds a tarball`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/scopejsiicalcbase.go 1`] = `
// An example direct dependency for jsii-calc.
package scopejsiicalcbase

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbase/jsii"
)

// Class interface
type BaseIface interface {
	TypeName() interface{}
}

// A base class.
// Struct proxy
type Base struct {
}

func NewBase() BaseIface {
	_init_.Initialize()
	self := Base{}
	_jsii_.Create(
		"@scope/jsii-calc-base.Base",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (b *Base) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		b,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// BasePropsIface is the public interface for the custom type BaseProps
type BasePropsIface interface {
	GetFoo() scopejsiicalcbaseofbase.VeryIface
	GetBar() interface{}
}

// Struct proxy
type BaseProps struct {
	Foo scopejsiicalcbaseofbase.VeryIface \`json:"foo"\`
	Bar interface{} \`json:"bar"\`
}

func (b *BaseProps) GetFoo() scopejsiicalcbaseofbase.VeryIface {
	var returns scopejsiicalcbaseofbase.VeryIface
	_jsii_.Get(
		b,
		"foo",
		&returns,
	)
	return returns
}

func (b *BaseProps) GetBar() interface{} {
	var returns interface{}
	_jsii_.Get(
		b,
		"bar",
		&returns,
	)
	return returns
}


type IBaseInterfaceIface interface {
	scopejsiicalcbaseofbase.IVeryBaseInterfaceIface
	Bar()
}

type IBaseInterface struct {}

func (i *IBaseInterface) Foo() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"foo",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *IBaseInterface) Bar() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"bar",
		[]interface{}{},
		false,
		&returns,
	)
}


`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/ 1`] = `
<root>
 ┗━ 📁 go
    ┗━ 📁 scopejsiicalcbaseofbase
       ┣━ 📁 jsii
       ┃  ┣━ 📄 jsii.go
       ┃  ┗━ 📄 tarball.embedded.go
       ┗━ 📄 scopejsiicalcbaseofbase.go
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/jsii/jsii.go 1`] = `
package jsii

import (
	rt "github.com/aws-cdk/jsii/jsii-experimental"
	"sync"
)

var once sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Load this library into the kernel
		rt.Load("@scope/jsii-calc-base-of-base", "0.0.0", tarball)
	})
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/jsii/tarball.embedded.go 1`] = `go/scopejsiicalcbaseofbase/jsii/tarball.embedded.go embeds a tarball`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/scopejsiicalcbaseofbase.go 1`] = `
// An example transitive dependency for jsii-calc.
package scopejsiicalcbaseofbase

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase/jsii"
)

type IVeryBaseInterfaceIface interface {
	Foo()
}

type IVeryBaseInterface struct {}

func (i *IVeryBaseInterface) Foo() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"foo",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type StaticConsumerIface interface {
}

// Struct proxy
type StaticConsumer struct {
}

func StaticConsumer_Consume(_args interface{}) {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"@scope/jsii-calc-base-of-base.StaticConsumer",
		"consume",
		[]interface{}{_args},
		false,
		&returns,
	)
}

// Class interface
type VeryIface interface {
	Hey() interface{}
}

// Something here.
// Experimental.
// Struct proxy
type Very struct {
}

func NewVery() VeryIface {
	_init_.Initialize()
	self := Very{}
	_jsii_.Create(
		"@scope/jsii-calc-base-of-base.Very",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (v *Very) Hey() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		v,
		"hey",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// VeryBasePropsIface is the public interface for the custom type VeryBaseProps
type VeryBasePropsIface interface {
	GetFoo() VeryIface
}

// Struct proxy
type VeryBaseProps struct {
	Foo VeryIface \`json:"foo"\`
}

func (v *VeryBaseProps) GetFoo() VeryIface {
	var returns VeryIface
	_jsii_.Get(
		v,
		"foo",
		&returns,
	)
	return returns
}



`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/ 1`] = `
<root>
 ┗━ 📁 go
    ┗━ 📁 scopejsiicalclib
       ┣━ 📁 jsii
       ┃  ┣━ 📄 jsii.go
       ┃  ┗━ 📄 tarball.embedded.go
       ┣━ 📄 scopejsiicalclib.go
       ┗━ 📁 submodule
          ┗━ 📄 submodule.go
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/jsii/jsii.go 1`] = `
package jsii

import (
	rt "github.com/aws-cdk/jsii/jsii-experimental"
	"sync"
	// Initialization endpoints of dependencies
	scopejsiicalcbase "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbase/jsii"
	scopejsiicalcbaseofbase "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase/jsii"
)

var once sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Ensure all dependencies are initialized
		scopejsiicalcbase.Initialize()
		scopejsiicalcbaseofbase.Initialize()

		// Load this library into the kernel
		rt.Load("@scope/jsii-calc-lib", "0.0.0", tarball)
	})
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/jsii/tarball.embedded.go 1`] = `go/scopejsiicalclib/jsii/tarball.embedded.go embeds a tarball`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/scopejsiicalclib.go 1`] = `
// A simple calcuator library built on JSII.
package scopejsiicalclib

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbase"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib/jsii"
)

// Check that enums from \\@scoped packages can be references.
// 
// See awslabs/jsii#138
// Deprecated.
type EnumFromScopedModule string

const (
	EnumFromScopedModuleValue1 EnumFromScopedModule = "VALUE1"
	EnumFromScopedModuleValue2 EnumFromScopedModule = "VALUE2"
)

// The general contract for a concrete number.
// Deprecated.
type IDoublableIface interface {
	// Deprecated.
	GetDoubleValue() interface{}
}

type IDoublable struct {}

func (i *IDoublable) GetDoubleValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"doubleValue",
		&returns,
	)
	return returns
}

// Applies to classes that are considered friendly.
// 
// These classes can be greeted with
// a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.
// Deprecated.
type IFriendlyIface interface {
	// Say hello!
	// Deprecated.
	Hello() interface{}
}

type IFriendly struct {}

func (i *IFriendly) Hello() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Interface that inherits from packages 2 levels up the tree.
// 
// Their presence validates that .NET/Java/jsii-reflect can track all fields
// far enough up the tree.
// Deprecated.
type IThreeLevelsInterfaceIface interface {
	scopejsiicalcbaseofbase.IVeryBaseInterfaceIface
	scopejsiicalcbase.IBaseInterfaceIface
	// Deprecated.
	Baz()
}

type IThreeLevelsInterface struct {}

func (i *IThreeLevelsInterface) Foo() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"foo",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *IThreeLevelsInterface) Bar() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"bar",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *IThreeLevelsInterface) Baz() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"baz",
		[]interface{}{},
		false,
		&returns,
	)
}

// MyFirstStructIface is the public interface for the custom type MyFirstStruct
// Deprecated.
type MyFirstStructIface interface {
	GetAnumber() interface{}
	GetAstring() interface{}
	GetFirstOptional() []interface{}
}

// This is the first struct we have created in jsii.
// Deprecated.
// Struct proxy
type MyFirstStruct struct {
	// An awesome number value.
	// Deprecated.
	Anumber interface{} \`json:"anumber"\`
	// A string value.
	// Deprecated.
	Astring interface{} \`json:"astring"\`
	// Deprecated.
	FirstOptional []interface{} \`json:"firstOptional"\`
}

func (m *MyFirstStruct) GetAnumber() interface{} {
	var returns interface{}
	_jsii_.Get(
		m,
		"anumber",
		&returns,
	)
	return returns
}

func (m *MyFirstStruct) GetAstring() interface{} {
	var returns interface{}
	_jsii_.Get(
		m,
		"astring",
		&returns,
	)
	return returns
}

func (m *MyFirstStruct) GetFirstOptional() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		m,
		"firstOptional",
		&returns,
	)
	return returns
}


// Class interface
type NumberIface interface {
	IDoublableIface
	GetValue() interface{}
	GetDoubleValue() interface{}
	TypeName() interface{}
	ToString() interface{}
}

// Represents a concrete number.
// Deprecated.
// Struct proxy
type Number struct {
	// The number.
	// Deprecated.
	Value interface{} \`json:"value"\`
	// The number multiplied by 2.
	// Deprecated.
	DoubleValue interface{} \`json:"doubleValue"\`
}

func (n *Number) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		n,
		"value",
		&returns,
	)
	return returns
}

func (n *Number) GetDoubleValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		n,
		"doubleValue",
		&returns,
	)
	return returns
}


// Creates a Number object.
func NewNumber(value interface{}) NumberIface {
	_init_.Initialize()
	self := Number{}
	_jsii_.Create(
		"@scope/jsii-calc-lib.Number",
		[]interface{}{value},
		[]_jsii_.FQN{"@scope/jsii-calc-lib.IDoublable"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *Number) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (n *Number) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type NumericValueIface interface {
	GetValue() interface{}
	TypeName() interface{}
	ToString() interface{}
}

// Abstract class which represents a numeric value.
// Deprecated.
// Struct proxy
type NumericValue struct {
	// The value.
	// Deprecated.
	Value interface{} \`json:"value"\`
}

func (n *NumericValue) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		n,
		"value",
		&returns,
	)
	return returns
}


func NewNumericValue() NumericValueIface {
	_init_.Initialize()
	self := NumericValue{}
	_jsii_.Create(
		"@scope/jsii-calc-lib.NumericValue",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *NumericValue) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (n *NumericValue) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type OperationIface interface {
	GetValue() interface{}
	TypeName() interface{}
	ToString() interface{}
}

// Represents an operation on values.
// Deprecated.
// Struct proxy
type Operation struct {
	// The value.
	// Deprecated.
	Value interface{} \`json:"value"\`
}

func (o *Operation) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		o,
		"value",
		&returns,
	)
	return returns
}


func NewOperation() OperationIface {
	_init_.Initialize()
	self := Operation{}
	_jsii_.Create(
		"@scope/jsii-calc-lib.Operation",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *Operation) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (o *Operation) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// StructWithOnlyOptionalsIface is the public interface for the custom type StructWithOnlyOptionals
// Deprecated.
type StructWithOnlyOptionalsIface interface {
	GetOptional1() interface{}
	GetOptional2() interface{}
	GetOptional3() interface{}
}

// This is a struct with only optional properties.
// Deprecated.
// Struct proxy
type StructWithOnlyOptionals struct {
	// The first optional!
	// Deprecated.
	Optional1 interface{} \`json:"optional1"\`
	// Deprecated.
	Optional2 interface{} \`json:"optional2"\`
	// Deprecated.
	Optional3 interface{} \`json:"optional3"\`
}

func (s *StructWithOnlyOptionals) GetOptional1() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"optional1",
		&returns,
	)
	return returns
}

func (s *StructWithOnlyOptionals) GetOptional2() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"optional2",
		&returns,
	)
	return returns
}

func (s *StructWithOnlyOptionals) GetOptional3() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"optional3",
		&returns,
	)
	return returns
}



`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/submodule/submodule.go 1`] = `
package submodule

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib/jsii"
)

// Deprecated.
type IReflectableIface interface {
	// Deprecated.
	GetEntries() []ReflectableEntryIface
}

type IReflectable struct {}

func (i *IReflectable) GetEntries() []ReflectableEntryIface {
	var returns []ReflectableEntryIface
	_jsii_.Get(
		i,
		"entries",
		&returns,
	)
	return returns
}

// Class interface
type NestingClassIface interface {
}

// This class is here to show we can use nested classes across module boundaries.
// Deprecated.
// Struct proxy
type NestingClass struct {
}

// Class interface
type NestedClassIface interface {
	GetProperty() interface{}
}

// This class is here to show we can use nested classes across module boundaries.
// Deprecated.
// Struct proxy
type NestedClass struct {
	// Deprecated.
	Property interface{} \`json:"property"\`
}

func (n *NestedClass) GetProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		n,
		"property",
		&returns,
	)
	return returns
}


func NewNestedClass() NestedClassIface {
	_init_.Initialize()
	self := NestedClass{}
	_jsii_.Create(
		"@scope/jsii-calc-lib.submodule.NestingClass.NestedClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// NestedStructIface is the public interface for the custom type NestedStruct
// Deprecated.
type NestedStructIface interface {
	GetName() interface{}
}

// This is a struct, nested within a class.
// 
// Normal.
// Deprecated.
// Struct proxy
type NestedStruct struct {
	// Deprecated.
	Name interface{} \`json:"name"\`
}

func (n *NestedStruct) GetName() interface{} {
	var returns interface{}
	_jsii_.Get(
		n,
		"name",
		&returns,
	)
	return returns
}


// ReflectableEntryIface is the public interface for the custom type ReflectableEntry
// Deprecated.
type ReflectableEntryIface interface {
	GetKey() interface{}
	GetValue() interface{}
}

// Deprecated.
// Struct proxy
type ReflectableEntry struct {
	// Deprecated.
	Key interface{} \`json:"key"\`
	// Deprecated.
	Value interface{} \`json:"value"\`
}

func (r *ReflectableEntry) GetKey() interface{} {
	var returns interface{}
	_jsii_.Get(
		r,
		"key",
		&returns,
	)
	return returns
}

func (r *ReflectableEntry) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		r,
		"value",
		&returns,
	)
	return returns
}


// Class interface
type ReflectorIface interface {
	AsMap(reflectable IReflectableIface) map[string]interface{}
}

// Deprecated.
// Struct proxy
type Reflector struct {
}

func NewReflector() ReflectorIface {
	_init_.Initialize()
	self := Reflector{}
	_jsii_.Create(
		"@scope/jsii-calc-lib.submodule.Reflector",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (r *Reflector) AsMap(reflectable IReflectableIface) map[string]interface{} {
	var returns map[string]interface{}
	_jsii_.Invoke(
		r,
		"asMap",
		[]interface{}{reflectable},
		true,
		&returns,
	)
	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/ 1`] = `
<root>
 ┗━ 📁 go
    ┗━ 📁 jsiicalc
       ┣━ 📁 composition
       ┃  ┗━ 📄 composition.go
       ┣━ 📁 derivedclasshasnoproperties
       ┃  ┗━ 📄 derivedclasshasnoproperties.go
       ┣━ 📁 interfaceinnamespaceincludesclasses
       ┃  ┗━ 📄 interfaceinnamespaceincludesclasses.go
       ┣━ 📁 interfaceinnamespaceonlyinterface
       ┃  ┗━ 📄 interfaceinnamespaceonlyinterface.go
       ┣━ 📁 jsii
       ┃  ┣━ 📄 jsii.go
       ┃  ┗━ 📄 tarball.embedded.go
       ┣━ 📄 jsiicalc.go
       ┣━ 📁 pythonself
       ┃  ┗━ 📄 pythonself.go
       ┣━ 📄 README.md
       ┗━ 📁 submodule
          ┣━ 📁 backreferences
          ┃  ┗━ 📄 backreferences.go
          ┣━ 📁 child
          ┃  ┗━ 📄 child.go
          ┣━ 📁 isolated
          ┃  ┗━ 📄 isolated.go
          ┣━ 📁 nestedsubmodule
          ┃  ┣━ 📁 deeplynested
          ┃  ┃  ┗━ 📄 deeplynested.go
          ┃  ┗━ 📄 nestedsubmodule.go
          ┣━ 📁 param
          ┃  ┗━ 📄 param.go
          ┣━ 📁 returnsparam
          ┃  ┗━ 📄 returnsparam.go
          ┗━ 📄 submodule.go
`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/README.md 1`] = `
# jsii Calculator

This library is used to demonstrate and test the features of JSII

## How to use running sum API:

First, create a calculator:

\`\`\`ts
const calculator = new calc.Calculator();
\`\`\`

Then call some operations:


\`\`\`ts fixture=with-calculator
calculator.add(10);
\`\`\`

## Code Samples

\`\`\`ts
/* This is totes a magic comment in here, just you wait! */
const foo = 'bar';
\`\`\`


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/composition/composition.go 1`] = `
package composition

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type CompositeOperationIface interface {
	GetValue() interface{}
	GetExpression() scopejsiicalclib.NumericValueIface
	GetDecorationPostfixes() []interface{}
	SetDecorationPostfixes(val []interface{})
	GetDecorationPrefixes() []interface{}
	SetDecorationPrefixes(val []interface{})
	GetStringStyle() CompositionStringStyle
	SetStringStyle(val CompositionStringStyle)
	TypeName() interface{}
	ToString() interface{}
}

// Abstract operation composed from an expression of other operations.
// Struct proxy
type CompositeOperation struct {
	// (deprecated) The value.
	Value interface{} \`json:"value"\`
	// The expression that this operation consists of.
	// 
	// Must be implemented by derived classes.
	Expression scopejsiicalclib.NumericValueIface \`json:"expression"\`
	// A set of postfixes to include in a decorated .toString().
	DecorationPostfixes []interface{} \`json:"decorationPostfixes"\`
	// A set of prefixes to include in a decorated .toString().
	DecorationPrefixes []interface{} \`json:"decorationPrefixes"\`
	// The .toString() style.
	StringStyle CompositionStringStyle \`json:"stringStyle"\`
}

func (c *CompositeOperation) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"value",
		&returns,
	)
	return returns
}

func (c *CompositeOperation) GetExpression() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		c,
		"expression",
		&returns,
	)
	return returns
}

func (c *CompositeOperation) GetDecorationPostfixes() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		c,
		"decorationPostfixes",
		&returns,
	)
	return returns
}

func (c *CompositeOperation) GetDecorationPrefixes() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		c,
		"decorationPrefixes",
		&returns,
	)
	return returns
}

func (c *CompositeOperation) GetStringStyle() CompositionStringStyle {
	var returns CompositionStringStyle
	_jsii_.Get(
		c,
		"stringStyle",
		&returns,
	)
	return returns
}


func NewCompositeOperation() CompositeOperationIface {
	_init_.Initialize()
	self := CompositeOperation{}
	_jsii_.Create(
		"jsii-calc.composition.CompositeOperation",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *CompositeOperation) SetDecorationPostfixes(val []interface{}) {
	_jsii_.Set(
		c,
		"decorationPostfixes",
		val,
	)
}

func (c *CompositeOperation) SetDecorationPrefixes(val []interface{}) {
	_jsii_.Set(
		c,
		"decorationPrefixes",
		val,
	)
}

func (c *CompositeOperation) SetStringStyle(val CompositionStringStyle) {
	_jsii_.Set(
		c,
		"stringStyle",
		val,
	)
}

func (c *CompositeOperation) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (c *CompositeOperation) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Style of .toString() output for CompositeOperation.
type CompositionStringStyle string

const (
	CompositionStringStyleNormal CompositionStringStyle = "NORMAL"
	CompositionStringStyleDecorated CompositionStringStyle = "DECORATED"
)


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/derivedclasshasnoproperties/derivedclasshasnoproperties.go 1`] = `
package derivedclasshasnoproperties

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type BaseIface interface {
	GetProp() interface{}
	SetProp(val interface{})
}

// Struct proxy
type Base struct {
	Prop interface{} \`json:"prop"\`
}

func (b *Base) GetProp() interface{} {
	var returns interface{}
	_jsii_.Get(
		b,
		"prop",
		&returns,
	)
	return returns
}


func NewBase() BaseIface {
	_init_.Initialize()
	self := Base{}
	_jsii_.Create(
		"jsii-calc.DerivedClassHasNoProperties.Base",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (b *Base) SetProp(val interface{}) {
	_jsii_.Set(
		b,
		"prop",
		val,
	)
}

// Class interface
type DerivedIface interface {
	GetProp() interface{}
	SetProp(val interface{})
}

// Struct proxy
type Derived struct {
	Prop interface{} \`json:"prop"\`
}

func (d *Derived) GetProp() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"prop",
		&returns,
	)
	return returns
}


func NewDerived() DerivedIface {
	_init_.Initialize()
	self := Derived{}
	_jsii_.Create(
		"jsii-calc.DerivedClassHasNoProperties.Derived",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *Derived) SetProp(val interface{}) {
	_jsii_.Set(
		d,
		"prop",
		val,
	)
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceincludesclasses/interfaceinnamespaceincludesclasses.go 1`] = `
package interfaceinnamespaceincludesclasses

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type FooIface interface {
	GetBar() interface{}
	SetBar(val interface{})
}

// Struct proxy
type Foo struct {
	Bar interface{} \`json:"bar"\`
}

func (f *Foo) GetBar() interface{} {
	var returns interface{}
	_jsii_.Get(
		f,
		"bar",
		&returns,
	)
	return returns
}


func NewFoo() FooIface {
	_init_.Initialize()
	self := Foo{}
	_jsii_.Create(
		"jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (f *Foo) SetBar(val interface{}) {
	_jsii_.Set(
		f,
		"bar",
		val,
	)
}

// HelloIface is the public interface for the custom type Hello
type HelloIface interface {
	GetFoo() interface{}
}

// Struct proxy
type Hello struct {
	Foo interface{} \`json:"foo"\`
}

func (h *Hello) GetFoo() interface{} {
	var returns interface{}
	_jsii_.Get(
		h,
		"foo",
		&returns,
	)
	return returns
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceonlyinterface/interfaceinnamespaceonlyinterface.go 1`] = `
package interfaceinnamespaceonlyinterface

import (
)

// HelloIface is the public interface for the custom type Hello
type HelloIface interface {
	GetFoo() interface{}
}

// Struct proxy
type Hello struct {
	Foo interface{} \`json:"foo"\`
}

func (h *Hello) GetFoo() interface{} {
	var returns interface{}
	_jsii_.Get(
		h,
		"foo",
		&returns,
	)
	return returns
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsii/jsii.go 1`] = `
package jsii

import (
	rt "github.com/aws-cdk/jsii/jsii-experimental"
	"sync"
	// Initialization endpoints of dependencies
	scopejsiicalcbase "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbase/jsii"
	scopejsiicalcbaseofbase "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase/jsii"
	scopejsiicalclib "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib/jsii"
)

var once sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Ensure all dependencies are initialized
		scopejsiicalcbase.Initialize()
		scopejsiicalcbaseofbase.Initialize()
		scopejsiicalclib.Initialize()

		// Load this library into the kernel
		rt.Load("jsii-calc", "0.0.0", tarball)
	})
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsii/tarball.embedded.go 1`] = `go/jsiicalc/jsii/tarball.embedded.go embeds a tarball`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsiicalc.go 1`] = `
// A simple calcuator built on JSII.
package jsiicalc

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/composition"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbase"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib/submodule"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type AbstractClassIface interface {
	IInterfaceImplementedByAbstractClassIface
	GetAbstractProperty() interface{}
	GetPropFromInterface() interface{}
	AbstractMethod(name interface{}) interface{}
	NonAbstractMethod() interface{}
}

// Struct proxy
type AbstractClass struct {
	AbstractProperty interface{} \`json:"abstractProperty"\`
	PropFromInterface interface{} \`json:"propFromInterface"\`
}

func (a *AbstractClass) GetAbstractProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"abstractProperty",
		&returns,
	)
	return returns
}

func (a *AbstractClass) GetPropFromInterface() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"propFromInterface",
		&returns,
	)
	return returns
}


func NewAbstractClass() AbstractClassIface {
	_init_.Initialize()
	self := AbstractClass{}
	_jsii_.Create(
		"jsii-calc.AbstractClass",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IInterfaceImplementedByAbstractClass"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AbstractClass) AbstractMethod(name interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"abstractMethod",
		[]interface{}{name},
		true,
		&returns,
	)
	return returns
}

func (a *AbstractClass) NonAbstractMethod() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"nonAbstractMethod",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type AbstractClassBaseIface interface {
	GetAbstractProperty() interface{}
}

// Struct proxy
type AbstractClassBase struct {
	AbstractProperty interface{} \`json:"abstractProperty"\`
}

func (a *AbstractClassBase) GetAbstractProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"abstractProperty",
		&returns,
	)
	return returns
}


func NewAbstractClassBase() AbstractClassBaseIface {
	_init_.Initialize()
	self := AbstractClassBase{}
	_jsii_.Create(
		"jsii-calc.AbstractClassBase",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type AbstractClassReturnerIface interface {
	GetReturnAbstractFromProperty() AbstractClassBaseIface
	GiveMeAbstract() AbstractClassIface
	GiveMeInterface() IInterfaceImplementedByAbstractClassIface
}

// Struct proxy
type AbstractClassReturner struct {
	ReturnAbstractFromProperty AbstractClassBaseIface \`json:"returnAbstractFromProperty"\`
}

func (a *AbstractClassReturner) GetReturnAbstractFromProperty() AbstractClassBaseIface {
	var returns AbstractClassBaseIface
	_jsii_.Get(
		a,
		"returnAbstractFromProperty",
		&returns,
	)
	return returns
}


func NewAbstractClassReturner() AbstractClassReturnerIface {
	_init_.Initialize()
	self := AbstractClassReturner{}
	_jsii_.Create(
		"jsii-calc.AbstractClassReturner",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AbstractClassReturner) GiveMeAbstract() AbstractClassIface {
	var returns *AbstractClass
	_jsii_.Invoke(
		a,
		"giveMeAbstract",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

func (a *AbstractClassReturner) GiveMeInterface() IInterfaceImplementedByAbstractClassIface {
	var returns *IInterfaceImplementedByAbstractClass
	_jsii_.Invoke(
		a,
		"giveMeInterface",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

// Class interface
type AbstractSuiteIface interface {
	GetProperty() interface{}
	SomeMethod(str interface{}) interface{}
	WorkItAll(seed interface{}) interface{}
}

// Ensures abstract members implementations correctly register overrides in various languages.
// Struct proxy
type AbstractSuite struct {
	Property interface{} \`json:"property"\`
}

func (a *AbstractSuite) GetProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"property",
		&returns,
	)
	return returns
}


func NewAbstractSuite() AbstractSuiteIface {
	_init_.Initialize()
	self := AbstractSuite{}
	_jsii_.Create(
		"jsii-calc.AbstractSuite",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AbstractSuite) SetProperty(val interface{}) {
	_jsii_.Set(
		a,
		"property",
		val,
	)
}

func (a *AbstractSuite) SomeMethod(str interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"someMethod",
		[]interface{}{str},
		true,
		&returns,
	)
	return returns
}

func (a *AbstractSuite) WorkItAll(seed interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"workItAll",
		[]interface{}{seed},
		true,
		&returns,
	)
	return returns
}

// Class interface
type AddIface interface {
	scopejsiicalclib.IFriendlyIface
	GetValue() interface{}
	GetLhs() scopejsiicalclib.NumericValueIface
	GetRhs() scopejsiicalclib.NumericValueIface
	TypeName() interface{}
	ToString() interface{}
	Hello() interface{}
}

// The "+" binary operation.
// Struct proxy
type Add struct {
	// (deprecated) The value.
	Value interface{} \`json:"value"\`
	// Left-hand side operand.
	Lhs scopejsiicalclib.NumericValueIface \`json:"lhs"\`
	// Right-hand side operand.
	Rhs scopejsiicalclib.NumericValueIface \`json:"rhs"\`
}

func (a *Add) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"value",
		&returns,
	)
	return returns
}

func (a *Add) GetLhs() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		a,
		"lhs",
		&returns,
	)
	return returns
}

func (a *Add) GetRhs() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		a,
		"rhs",
		&returns,
	)
	return returns
}


// Creates a BinaryOperation.
func NewAdd(lhs scopejsiicalclib.NumericValueIface, rhs scopejsiicalclib.NumericValueIface) AddIface {
	_init_.Initialize()
	self := Add{}
	_jsii_.Create(
		"jsii-calc.Add",
		[]interface{}{lhs, rhs},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *Add) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *Add) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *Add) Hello() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type AllTypesIface interface {
	GetEnumPropertyValue() interface{}
	GetAnyArrayProperty() []interface{}
	SetAnyArrayProperty(val []interface{})
	GetAnyMapProperty() map[string]interface{}
	SetAnyMapProperty(val map[string]interface{})
	GetAnyProperty() interface{}
	SetAnyProperty(val interface{})
	GetArrayProperty() []interface{}
	SetArrayProperty(val []interface{})
	GetBooleanProperty() interface{}
	SetBooleanProperty(val interface{})
	GetDateProperty() interface{}
	SetDateProperty(val interface{})
	GetEnumProperty() AllTypesEnum
	SetEnumProperty(val AllTypesEnum)
	GetJsonProperty() interface{}
	SetJsonProperty(val interface{})
	GetMapProperty() map[string]scopejsiicalclib.NumberIface
	SetMapProperty(val map[string]scopejsiicalclib.NumberIface)
	GetNumberProperty() interface{}
	SetNumberProperty(val interface{})
	GetStringProperty() interface{}
	SetStringProperty(val interface{})
	GetUnionArrayProperty() []interface{}
	SetUnionArrayProperty(val []interface{})
	GetUnionMapProperty() map[string]interface{}
	SetUnionMapProperty(val map[string]interface{})
	GetUnionProperty() interface{}
	SetUnionProperty(val interface{})
	GetUnknownArrayProperty() []interface{}
	SetUnknownArrayProperty(val []interface{})
	GetUnknownMapProperty() map[string]interface{}
	SetUnknownMapProperty(val map[string]interface{})
	GetUnknownProperty() interface{}
	SetUnknownProperty(val interface{})
	GetOptionalEnumValue() StringEnum
	SetOptionalEnumValue(val StringEnum)
	AnyIn(inp interface{})
	AnyOut() interface{}
	EnumMethod(value StringEnum) StringEnum
}

// This class includes property for all types supported by jsii.
// 
// The setters will validate
// that the value set is of the expected type and throw otherwise.
// Struct proxy
type AllTypes struct {
	EnumPropertyValue interface{} \`json:"enumPropertyValue"\`
	AnyArrayProperty []interface{} \`json:"anyArrayProperty"\`
	AnyMapProperty map[string]interface{} \`json:"anyMapProperty"\`
	AnyProperty interface{} \`json:"anyProperty"\`
	ArrayProperty []interface{} \`json:"arrayProperty"\`
	BooleanProperty interface{} \`json:"booleanProperty"\`
	DateProperty interface{} \`json:"dateProperty"\`
	EnumProperty AllTypesEnum \`json:"enumProperty"\`
	JsonProperty interface{} \`json:"jsonProperty"\`
	MapProperty map[string]scopejsiicalclib.NumberIface \`json:"mapProperty"\`
	NumberProperty interface{} \`json:"numberProperty"\`
	StringProperty interface{} \`json:"stringProperty"\`
	UnionArrayProperty []interface{} \`json:"unionArrayProperty"\`
	UnionMapProperty map[string]interface{} \`json:"unionMapProperty"\`
	UnionProperty interface{} \`json:"unionProperty"\`
	UnknownArrayProperty []interface{} \`json:"unknownArrayProperty"\`
	UnknownMapProperty map[string]interface{} \`json:"unknownMapProperty"\`
	UnknownProperty interface{} \`json:"unknownProperty"\`
	OptionalEnumValue StringEnum \`json:"optionalEnumValue"\`
}

func (a *AllTypes) GetEnumPropertyValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"enumPropertyValue",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetAnyArrayProperty() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		a,
		"anyArrayProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetAnyMapProperty() map[string]interface{} {
	var returns map[string]interface{}
	_jsii_.Get(
		a,
		"anyMapProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetAnyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"anyProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetArrayProperty() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		a,
		"arrayProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetBooleanProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"booleanProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetDateProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"dateProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetEnumProperty() AllTypesEnum {
	var returns AllTypesEnum
	_jsii_.Get(
		a,
		"enumProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetJsonProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"jsonProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetMapProperty() map[string]scopejsiicalclib.NumberIface {
	var returns map[string]scopejsiicalclib.NumberIface
	_jsii_.Get(
		a,
		"mapProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetNumberProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"numberProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetStringProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"stringProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetUnionArrayProperty() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		a,
		"unionArrayProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetUnionMapProperty() map[string]interface{} {
	var returns map[string]interface{}
	_jsii_.Get(
		a,
		"unionMapProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetUnionProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"unionProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetUnknownArrayProperty() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		a,
		"unknownArrayProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetUnknownMapProperty() map[string]interface{} {
	var returns map[string]interface{}
	_jsii_.Get(
		a,
		"unknownMapProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetUnknownProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"unknownProperty",
		&returns,
	)
	return returns
}

func (a *AllTypes) GetOptionalEnumValue() StringEnum {
	var returns StringEnum
	_jsii_.Get(
		a,
		"optionalEnumValue",
		&returns,
	)
	return returns
}


func NewAllTypes() AllTypesIface {
	_init_.Initialize()
	self := AllTypes{}
	_jsii_.Create(
		"jsii-calc.AllTypes",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AllTypes) SetAnyArrayProperty(val []interface{}) {
	_jsii_.Set(
		a,
		"anyArrayProperty",
		val,
	)
}

func (a *AllTypes) SetAnyMapProperty(val map[string]interface{}) {
	_jsii_.Set(
		a,
		"anyMapProperty",
		val,
	)
}

func (a *AllTypes) SetAnyProperty(val interface{}) {
	_jsii_.Set(
		a,
		"anyProperty",
		val,
	)
}

func (a *AllTypes) SetArrayProperty(val []interface{}) {
	_jsii_.Set(
		a,
		"arrayProperty",
		val,
	)
}

func (a *AllTypes) SetBooleanProperty(val interface{}) {
	_jsii_.Set(
		a,
		"booleanProperty",
		val,
	)
}

func (a *AllTypes) SetDateProperty(val interface{}) {
	_jsii_.Set(
		a,
		"dateProperty",
		val,
	)
}

func (a *AllTypes) SetEnumProperty(val AllTypesEnum) {
	_jsii_.Set(
		a,
		"enumProperty",
		val,
	)
}

func (a *AllTypes) SetJsonProperty(val interface{}) {
	_jsii_.Set(
		a,
		"jsonProperty",
		val,
	)
}

func (a *AllTypes) SetMapProperty(val map[string]scopejsiicalclib.NumberIface) {
	_jsii_.Set(
		a,
		"mapProperty",
		val,
	)
}

func (a *AllTypes) SetNumberProperty(val interface{}) {
	_jsii_.Set(
		a,
		"numberProperty",
		val,
	)
}

func (a *AllTypes) SetStringProperty(val interface{}) {
	_jsii_.Set(
		a,
		"stringProperty",
		val,
	)
}

func (a *AllTypes) SetUnionArrayProperty(val []interface{}) {
	_jsii_.Set(
		a,
		"unionArrayProperty",
		val,
	)
}

func (a *AllTypes) SetUnionMapProperty(val map[string]interface{}) {
	_jsii_.Set(
		a,
		"unionMapProperty",
		val,
	)
}

func (a *AllTypes) SetUnionProperty(val interface{}) {
	_jsii_.Set(
		a,
		"unionProperty",
		val,
	)
}

func (a *AllTypes) SetUnknownArrayProperty(val []interface{}) {
	_jsii_.Set(
		a,
		"unknownArrayProperty",
		val,
	)
}

func (a *AllTypes) SetUnknownMapProperty(val map[string]interface{}) {
	_jsii_.Set(
		a,
		"unknownMapProperty",
		val,
	)
}

func (a *AllTypes) SetUnknownProperty(val interface{}) {
	_jsii_.Set(
		a,
		"unknownProperty",
		val,
	)
}

func (a *AllTypes) SetOptionalEnumValue(val StringEnum) {
	_jsii_.Set(
		a,
		"optionalEnumValue",
		val,
	)
}

func (a *AllTypes) AnyIn(inp interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"anyIn",
		[]interface{}{inp},
		false,
		&returns,
	)
}

func (a *AllTypes) AnyOut() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"anyOut",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *AllTypes) EnumMethod(value StringEnum) StringEnum {
	var returns StringEnum
	_jsii_.Invoke(
		a,
		"enumMethod",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

type AllTypesEnum string

const (
	AllTypesEnumMyEnumValue AllTypesEnum = "MY_ENUM_VALUE"
	AllTypesEnumYourEnumValue AllTypesEnum = "YOUR_ENUM_VALUE"
	AllTypesEnumThisIsGreat AllTypesEnum = "THIS_IS_GREAT"
)

// Class interface
type AllowedMethodNamesIface interface {
	GetBar(_p1 interface{}, _p2 interface{})
	GetFoo(withParam interface{}) interface{}
	SetBar(_x interface{}, _y interface{}, _z interface{})
	SetFoo(_x interface{}, _y interface{})
}

// Struct proxy
type AllowedMethodNames struct {
}

func NewAllowedMethodNames() AllowedMethodNamesIface {
	_init_.Initialize()
	self := AllowedMethodNames{}
	_jsii_.Create(
		"jsii-calc.AllowedMethodNames",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AllowedMethodNames) GetBar(_p1 interface{}, _p2 interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"getBar",
		[]interface{}{_p1, _p2},
		false,
		&returns,
	)
}

func (a *AllowedMethodNames) GetFoo(withParam interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"getFoo",
		[]interface{}{withParam},
		true,
		&returns,
	)
	return returns
}

func (a *AllowedMethodNames) SetBar(_x interface{}, _y interface{}, _z interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"setBar",
		[]interface{}{_x, _y, _z},
		false,
		&returns,
	)
}

func (a *AllowedMethodNames) SetFoo(_x interface{}, _y interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"setFoo",
		[]interface{}{_x, _y},
		false,
		&returns,
	)
}

// Class interface
type AmbiguousParametersIface interface {
	GetProps() StructParameterTypeIface
	GetScope() BellIface
}

// Struct proxy
type AmbiguousParameters struct {
	Props StructParameterTypeIface \`json:"props"\`
	Scope BellIface \`json:"scope"\`
}

func (a *AmbiguousParameters) GetProps() StructParameterTypeIface {
	var returns StructParameterTypeIface
	_jsii_.Get(
		a,
		"props",
		&returns,
	)
	return returns
}

func (a *AmbiguousParameters) GetScope() BellIface {
	var returns BellIface
	_jsii_.Get(
		a,
		"scope",
		&returns,
	)
	return returns
}


func NewAmbiguousParameters(scope BellIface, props StructParameterTypeIface) AmbiguousParametersIface {
	_init_.Initialize()
	self := AmbiguousParameters{}
	_jsii_.Create(
		"jsii-calc.AmbiguousParameters",
		[]interface{}{scope, props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type AnonymousImplementationProviderIface interface {
	IAnonymousImplementationProviderIface
	ProvideAsClass() ImplementationIface
	ProvideAsInterface() IAnonymouslyImplementMeIface
}

// Struct proxy
type AnonymousImplementationProvider struct {
}

func NewAnonymousImplementationProvider() AnonymousImplementationProviderIface {
	_init_.Initialize()
	self := AnonymousImplementationProvider{}
	_jsii_.Create(
		"jsii-calc.AnonymousImplementationProvider",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IAnonymousImplementationProvider"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AnonymousImplementationProvider) ProvideAsClass() ImplementationIface {
	var returns *Implementation
	_jsii_.Invoke(
		a,
		"provideAsClass",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

func (a *AnonymousImplementationProvider) ProvideAsInterface() IAnonymouslyImplementMeIface {
	var returns *IAnonymouslyImplementMe
	_jsii_.Invoke(
		a,
		"provideAsInterface",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

// Class interface
type AsyncVirtualMethodsIface interface {
	CallMe() interface{}
	CallMe2() interface{}
	CallMeDoublePromise() interface{}
	DontOverrideMe() interface{}
	OverrideMe(mult interface{}) interface{}
	OverrideMeToo() interface{}
}

// Struct proxy
type AsyncVirtualMethods struct {
}

func NewAsyncVirtualMethods() AsyncVirtualMethodsIface {
	_init_.Initialize()
	self := AsyncVirtualMethods{}
	_jsii_.Create(
		"jsii-calc.AsyncVirtualMethods",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AsyncVirtualMethods) CallMe() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"callMe",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *AsyncVirtualMethods) CallMe2() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"callMe2",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *AsyncVirtualMethods) CallMeDoublePromise() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"callMeDoublePromise",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *AsyncVirtualMethods) DontOverrideMe() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"dontOverrideMe",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *AsyncVirtualMethods) OverrideMe(mult interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"overrideMe",
		[]interface{}{mult},
		true,
		&returns,
	)
	return returns
}

func (a *AsyncVirtualMethods) OverrideMeToo() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"overrideMeToo",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type AugmentableClassIface interface {
	MethodOne()
	MethodTwo()
}

// Struct proxy
type AugmentableClass struct {
}

func NewAugmentableClass() AugmentableClassIface {
	_init_.Initialize()
	self := AugmentableClass{}
	_jsii_.Create(
		"jsii-calc.AugmentableClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AugmentableClass) MethodOne() {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"methodOne",
		[]interface{}{},
		false,
		&returns,
	)
}

func (a *AugmentableClass) MethodTwo() {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"methodTwo",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type BaseJsii976Iface interface {
}

// Struct proxy
type BaseJsii976 struct {
}

func NewBaseJsii976() BaseJsii976Iface {
	_init_.Initialize()
	self := BaseJsii976{}
	_jsii_.Create(
		"jsii-calc.BaseJsii976",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type BellIface interface {
	IBellIface
	GetRung() interface{}
	SetRung(val interface{})
	Ring()
}

// Struct proxy
type Bell struct {
	Rung interface{} \`json:"rung"\`
}

func (b *Bell) GetRung() interface{} {
	var returns interface{}
	_jsii_.Get(
		b,
		"rung",
		&returns,
	)
	return returns
}


func NewBell() BellIface {
	_init_.Initialize()
	self := Bell{}
	_jsii_.Create(
		"jsii-calc.Bell",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IBell"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (b *Bell) SetRung(val interface{}) {
	_jsii_.Set(
		b,
		"rung",
		val,
	)
}

func (b *Bell) Ring() {
	var returns interface{}
	_jsii_.Invoke(
		b,
		"ring",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type BinaryOperationIface interface {
	scopejsiicalclib.IFriendlyIface
	GetValue() interface{}
	GetLhs() scopejsiicalclib.NumericValueIface
	GetRhs() scopejsiicalclib.NumericValueIface
	TypeName() interface{}
	ToString() interface{}
	Hello() interface{}
}

// Represents an operation with two operands.
// Struct proxy
type BinaryOperation struct {
	// The value.
	// Deprecated.
	Value interface{} \`json:"value"\`
	// Left-hand side operand.
	Lhs scopejsiicalclib.NumericValueIface \`json:"lhs"\`
	// Right-hand side operand.
	Rhs scopejsiicalclib.NumericValueIface \`json:"rhs"\`
}

func (b *BinaryOperation) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		b,
		"value",
		&returns,
	)
	return returns
}

func (b *BinaryOperation) GetLhs() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		b,
		"lhs",
		&returns,
	)
	return returns
}

func (b *BinaryOperation) GetRhs() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		b,
		"rhs",
		&returns,
	)
	return returns
}


// Creates a BinaryOperation.
func NewBinaryOperation(lhs scopejsiicalclib.NumericValueIface, rhs scopejsiicalclib.NumericValueIface) BinaryOperationIface {
	_init_.Initialize()
	self := BinaryOperation{}
	_jsii_.Create(
		"jsii-calc.BinaryOperation",
		[]interface{}{lhs, rhs},
		[]_jsii_.FQN{"@scope/jsii-calc-lib.IFriendly"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (b *BinaryOperation) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		b,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (b *BinaryOperation) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		b,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (b *BinaryOperation) Hello() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		b,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type BurriedAnonymousObjectIface interface {
	Check() interface{}
	GiveItBack(value interface{}) interface{}
}

// See https://github.com/aws/aws-cdk/issues/7977.
// Struct proxy
type BurriedAnonymousObject struct {
}

func NewBurriedAnonymousObject() BurriedAnonymousObjectIface {
	_init_.Initialize()
	self := BurriedAnonymousObject{}
	_jsii_.Create(
		"jsii-calc.BurriedAnonymousObject",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (b *BurriedAnonymousObject) Check() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		b,
		"check",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (b *BurriedAnonymousObject) GiveItBack(value interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		b,
		"giveItBack",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

// Class interface
type CalculatorIface interface {
	GetValue() interface{}
	GetExpression() scopejsiicalclib.NumericValueIface
	GetDecorationPostfixes() []interface{}
	SetDecorationPostfixes(val []interface{})
	GetDecorationPrefixes() []interface{}
	SetDecorationPrefixes(val []interface{})
	GetStringStyle() composition.CompositionStringStyle
	SetStringStyle(val composition.CompositionStringStyle)
	GetOperationsLog() []scopejsiicalclib.NumericValueIface
	GetOperationsMap() map[string][]scopejsiicalclib.NumericValueIface
	GetCurr() scopejsiicalclib.NumericValueIface
	SetCurr(val scopejsiicalclib.NumericValueIface)
	GetMaxValue() interface{}
	SetMaxValue(val interface{})
	GetUnionProperty() interface{}
	SetUnionProperty(val interface{})
	TypeName() interface{}
	ToString() interface{}
	Add(value interface{})
	Mul(value interface{})
	Neg()
	Pow(value interface{})
	ReadUnionValue() interface{}
}

// A calculator which maintains a current value and allows adding operations.
// 
// Here's how you use it:
// 
// \`\`\`ts
// const calculator = new calc.Calculator();
// calculator.add(5);
// calculator.mul(3);
// console.log(calculator.expression.value);
// \`\`\`
// 
// I will repeat this example again, but in an @example tag.
//
// TODO: EXAMPLE
//
// Struct proxy
type Calculator struct {
	// (deprecated) The value.
	Value interface{} \`json:"value"\`
	// Returns the expression.
	Expression scopejsiicalclib.NumericValueIface \`json:"expression"\`
	// A set of postfixes to include in a decorated .toString().
	DecorationPostfixes []interface{} \`json:"decorationPostfixes"\`
	// A set of prefixes to include in a decorated .toString().
	DecorationPrefixes []interface{} \`json:"decorationPrefixes"\`
	// The .toString() style.
	StringStyle composition.CompositionStringStyle \`json:"stringStyle"\`
	// A log of all operations.
	OperationsLog []scopejsiicalclib.NumericValueIface \`json:"operationsLog"\`
	// A map of per operation name of all operations performed.
	OperationsMap map[string][]scopejsiicalclib.NumericValueIface \`json:"operationsMap"\`
	// The current value.
	Curr scopejsiicalclib.NumericValueIface \`json:"curr"\`
	// The maximum value allows in this calculator.
	MaxValue interface{} \`json:"maxValue"\`
	// Example of a property that accepts a union of types.
	UnionProperty interface{} \`json:"unionProperty"\`
}

func (c *Calculator) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"value",
		&returns,
	)
	return returns
}

func (c *Calculator) GetExpression() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		c,
		"expression",
		&returns,
	)
	return returns
}

func (c *Calculator) GetDecorationPostfixes() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		c,
		"decorationPostfixes",
		&returns,
	)
	return returns
}

func (c *Calculator) GetDecorationPrefixes() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		c,
		"decorationPrefixes",
		&returns,
	)
	return returns
}

func (c *Calculator) GetStringStyle() composition.CompositionStringStyle {
	var returns composition.CompositionStringStyle
	_jsii_.Get(
		c,
		"stringStyle",
		&returns,
	)
	return returns
}

func (c *Calculator) GetOperationsLog() []scopejsiicalclib.NumericValueIface {
	var returns []scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		c,
		"operationsLog",
		&returns,
	)
	return returns
}

func (c *Calculator) GetOperationsMap() map[string][]scopejsiicalclib.NumericValueIface {
	var returns map[string][]scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		c,
		"operationsMap",
		&returns,
	)
	return returns
}

func (c *Calculator) GetCurr() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		c,
		"curr",
		&returns,
	)
	return returns
}

func (c *Calculator) GetMaxValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"maxValue",
		&returns,
	)
	return returns
}

func (c *Calculator) GetUnionProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"unionProperty",
		&returns,
	)
	return returns
}


// Creates a Calculator object.
func NewCalculator(props CalculatorPropsIface) CalculatorIface {
	_init_.Initialize()
	self := Calculator{}
	_jsii_.Create(
		"jsii-calc.Calculator",
		[]interface{}{props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *Calculator) SetDecorationPostfixes(val []interface{}) {
	_jsii_.Set(
		c,
		"decorationPostfixes",
		val,
	)
}

func (c *Calculator) SetDecorationPrefixes(val []interface{}) {
	_jsii_.Set(
		c,
		"decorationPrefixes",
		val,
	)
}

func (c *Calculator) SetStringStyle(val composition.CompositionStringStyle) {
	_jsii_.Set(
		c,
		"stringStyle",
		val,
	)
}

func (c *Calculator) SetCurr(val scopejsiicalclib.NumericValueIface) {
	_jsii_.Set(
		c,
		"curr",
		val,
	)
}

func (c *Calculator) SetMaxValue(val interface{}) {
	_jsii_.Set(
		c,
		"maxValue",
		val,
	)
}

func (c *Calculator) SetUnionProperty(val interface{}) {
	_jsii_.Set(
		c,
		"unionProperty",
		val,
	)
}

func (c *Calculator) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (c *Calculator) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (c *Calculator) Add(value interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"add",
		[]interface{}{value},
		false,
		&returns,
	)
}

func (c *Calculator) Mul(value interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"mul",
		[]interface{}{value},
		false,
		&returns,
	)
}

func (c *Calculator) Neg() {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"neg",
		[]interface{}{},
		false,
		&returns,
	)
}

func (c *Calculator) Pow(value interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"pow",
		[]interface{}{value},
		false,
		&returns,
	)
}

func (c *Calculator) ReadUnionValue() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"readUnionValue",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// CalculatorPropsIface is the public interface for the custom type CalculatorProps
type CalculatorPropsIface interface {
	GetInitialValue() interface{}
	GetMaximumValue() interface{}
}

// Properties for Calculator.
// Struct proxy
type CalculatorProps struct {
	// The initial value of the calculator.
	// 
	// NOTE: Any number works here, it's fine.
	InitialValue interface{} \`json:"initialValue"\`
	// The maximum value the calculator can store.
	MaximumValue interface{} \`json:"maximumValue"\`
}

func (c *CalculatorProps) GetInitialValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"initialValue",
		&returns,
	)
	return returns
}

func (c *CalculatorProps) GetMaximumValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"maximumValue",
		&returns,
	)
	return returns
}


// ChildStruct982Iface is the public interface for the custom type ChildStruct982
type ChildStruct982Iface interface {
	GetFoo() interface{}
	GetBar() interface{}
}

// Struct proxy
type ChildStruct982 struct {
	Foo interface{} \`json:"foo"\`
	Bar interface{} \`json:"bar"\`
}

func (c *ChildStruct982) GetFoo() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"foo",
		&returns,
	)
	return returns
}

func (c *ChildStruct982) GetBar() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"bar",
		&returns,
	)
	return returns
}


// Class interface
type ClassThatImplementsTheInternalInterfaceIface interface {
	INonInternalInterfaceIface
	IAnotherPublicInterfaceIface
	GetA() interface{}
	SetA(val interface{})
	GetB() interface{}
	SetB(val interface{})
	GetC() interface{}
	SetC(val interface{})
	GetD() interface{}
	SetD(val interface{})
}

// Struct proxy
type ClassThatImplementsTheInternalInterface struct {
	A interface{} \`json:"a"\`
	B interface{} \`json:"b"\`
	C interface{} \`json:"c"\`
	D interface{} \`json:"d"\`
}

func (c *ClassThatImplementsTheInternalInterface) GetA() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"a",
		&returns,
	)
	return returns
}

func (c *ClassThatImplementsTheInternalInterface) GetB() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"b",
		&returns,
	)
	return returns
}

func (c *ClassThatImplementsTheInternalInterface) GetC() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"c",
		&returns,
	)
	return returns
}

func (c *ClassThatImplementsTheInternalInterface) GetD() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"d",
		&returns,
	)
	return returns
}


func NewClassThatImplementsTheInternalInterface() ClassThatImplementsTheInternalInterfaceIface {
	_init_.Initialize()
	self := ClassThatImplementsTheInternalInterface{}
	_jsii_.Create(
		"jsii-calc.ClassThatImplementsTheInternalInterface",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.INonInternalInterface"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ClassThatImplementsTheInternalInterface) SetA(val interface{}) {
	_jsii_.Set(
		c,
		"a",
		val,
	)
}

func (c *ClassThatImplementsTheInternalInterface) SetB(val interface{}) {
	_jsii_.Set(
		c,
		"b",
		val,
	)
}

func (c *ClassThatImplementsTheInternalInterface) SetC(val interface{}) {
	_jsii_.Set(
		c,
		"c",
		val,
	)
}

func (c *ClassThatImplementsTheInternalInterface) SetD(val interface{}) {
	_jsii_.Set(
		c,
		"d",
		val,
	)
}

// Class interface
type ClassThatImplementsThePrivateInterfaceIface interface {
	INonInternalInterfaceIface
	IAnotherPublicInterfaceIface
	GetA() interface{}
	SetA(val interface{})
	GetB() interface{}
	SetB(val interface{})
	GetC() interface{}
	SetC(val interface{})
	GetE() interface{}
	SetE(val interface{})
}

// Struct proxy
type ClassThatImplementsThePrivateInterface struct {
	A interface{} \`json:"a"\`
	B interface{} \`json:"b"\`
	C interface{} \`json:"c"\`
	E interface{} \`json:"e"\`
}

func (c *ClassThatImplementsThePrivateInterface) GetA() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"a",
		&returns,
	)
	return returns
}

func (c *ClassThatImplementsThePrivateInterface) GetB() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"b",
		&returns,
	)
	return returns
}

func (c *ClassThatImplementsThePrivateInterface) GetC() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"c",
		&returns,
	)
	return returns
}

func (c *ClassThatImplementsThePrivateInterface) GetE() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"e",
		&returns,
	)
	return returns
}


func NewClassThatImplementsThePrivateInterface() ClassThatImplementsThePrivateInterfaceIface {
	_init_.Initialize()
	self := ClassThatImplementsThePrivateInterface{}
	_jsii_.Create(
		"jsii-calc.ClassThatImplementsThePrivateInterface",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.INonInternalInterface"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ClassThatImplementsThePrivateInterface) SetA(val interface{}) {
	_jsii_.Set(
		c,
		"a",
		val,
	)
}

func (c *ClassThatImplementsThePrivateInterface) SetB(val interface{}) {
	_jsii_.Set(
		c,
		"b",
		val,
	)
}

func (c *ClassThatImplementsThePrivateInterface) SetC(val interface{}) {
	_jsii_.Set(
		c,
		"c",
		val,
	)
}

func (c *ClassThatImplementsThePrivateInterface) SetE(val interface{}) {
	_jsii_.Set(
		c,
		"e",
		val,
	)
}

// Class interface
type ClassWithCollectionsIface interface {
	GetArray() []interface{}
	SetArray(val []interface{})
	GetMap() map[string]interface{}
	SetMap(val map[string]interface{})
}

// Struct proxy
type ClassWithCollections struct {
	Array []interface{} \`json:"array"\`
	Map map[string]interface{} \`json:"map"\`
}

func (c *ClassWithCollections) GetArray() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		c,
		"array",
		&returns,
	)
	return returns
}

func (c *ClassWithCollections) GetMap() map[string]interface{} {
	var returns map[string]interface{}
	_jsii_.Get(
		c,
		"map",
		&returns,
	)
	return returns
}


func NewClassWithCollections(map_ map[string]interface{}, array []interface{}) ClassWithCollectionsIface {
	_init_.Initialize()
	self := ClassWithCollections{}
	_jsii_.Create(
		"jsii-calc.ClassWithCollections",
		[]interface{}{map_, array},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ClassWithCollections) SetArray(val []interface{}) {
	_jsii_.Set(
		c,
		"array",
		val,
	)
}

func (c *ClassWithCollections) SetMap(val map[string]interface{}) {
	_jsii_.Set(
		c,
		"map",
		val,
	)
}

func ClassWithCollections_CreateAList() []interface{} {
	_init_.Initialize()
	var returns []interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.ClassWithCollections",
		"createAList",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func ClassWithCollections_CreateAMap() map[string]interface{} {
	_init_.Initialize()
	var returns map[string]interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.ClassWithCollections",
		"createAMap",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func ClassWithCollections_StaticArray() []interface{} {
	_init_.Initialize()
	var returns []interface{}
	_jsii_.StaticGet(
		"jsii-calc.ClassWithCollections",
		"staticArray",
		&returns,
	)
	return returns
}

func ClassWithCollections_SetStaticArray(val []interface{}) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.ClassWithCollections",
		"staticArray",
		val,
	)
}

func ClassWithCollections_StaticMap() map[string]interface{} {
	_init_.Initialize()
	var returns map[string]interface{}
	_jsii_.StaticGet(
		"jsii-calc.ClassWithCollections",
		"staticMap",
		&returns,
	)
	return returns
}

func ClassWithCollections_SetStaticMap(val map[string]interface{}) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.ClassWithCollections",
		"staticMap",
		val,
	)
}

// Class interface
type ClassWithDocsIface interface {
}

// This class has docs.
// 
// The docs are great. They're a bunch of tags.
//
// TODO: EXAMPLE
//
// See: https://aws.amazon.com/
//
// Struct proxy
type ClassWithDocs struct {
}

func NewClassWithDocs() ClassWithDocsIface {
	_init_.Initialize()
	self := ClassWithDocs{}
	_jsii_.Create(
		"jsii-calc.ClassWithDocs",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type ClassWithJavaReservedWordsIface interface {
	GetInt() interface{}
	Import(assert interface{}) interface{}
}

// Struct proxy
type ClassWithJavaReservedWords struct {
	Int interface{} \`json:"int"\`
}

func (c *ClassWithJavaReservedWords) GetInt() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"int",
		&returns,
	)
	return returns
}


func NewClassWithJavaReservedWords(int interface{}) ClassWithJavaReservedWordsIface {
	_init_.Initialize()
	self := ClassWithJavaReservedWords{}
	_jsii_.Create(
		"jsii-calc.ClassWithJavaReservedWords",
		[]interface{}{int},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ClassWithJavaReservedWords) Import(assert interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"import",
		[]interface{}{assert},
		true,
		&returns,
	)
	return returns
}

// Class interface
type ClassWithMutableObjectLiteralPropertyIface interface {
	GetMutableObject() IMutableObjectLiteralIface
	SetMutableObject(val IMutableObjectLiteralIface)
}

// Struct proxy
type ClassWithMutableObjectLiteralProperty struct {
	MutableObject IMutableObjectLiteralIface \`json:"mutableObject"\`
}

func (c *ClassWithMutableObjectLiteralProperty) GetMutableObject() IMutableObjectLiteralIface {
	var returns IMutableObjectLiteralIface
	_jsii_.Get(
		c,
		"mutableObject",
		&returns,
	)
	return returns
}


func NewClassWithMutableObjectLiteralProperty() ClassWithMutableObjectLiteralPropertyIface {
	_init_.Initialize()
	self := ClassWithMutableObjectLiteralProperty{}
	_jsii_.Create(
		"jsii-calc.ClassWithMutableObjectLiteralProperty",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ClassWithMutableObjectLiteralProperty) SetMutableObject(val IMutableObjectLiteralIface) {
	_jsii_.Set(
		c,
		"mutableObject",
		val,
	)
}

// Class interface
type ClassWithPrivateConstructorAndAutomaticPropertiesIface interface {
	IInterfaceWithPropertiesIface
	GetReadOnlyString() interface{}
	GetReadWriteString() interface{}
	SetReadWriteString(val interface{})
}

// Class that implements interface properties automatically, but using a private constructor.
// Struct proxy
type ClassWithPrivateConstructorAndAutomaticProperties struct {
	ReadOnlyString interface{} \`json:"readOnlyString"\`
	ReadWriteString interface{} \`json:"readWriteString"\`
}

func (c *ClassWithPrivateConstructorAndAutomaticProperties) GetReadOnlyString() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"readOnlyString",
		&returns,
	)
	return returns
}

func (c *ClassWithPrivateConstructorAndAutomaticProperties) GetReadWriteString() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"readWriteString",
		&returns,
	)
	return returns
}


func (c *ClassWithPrivateConstructorAndAutomaticProperties) SetReadWriteString(val interface{}) {
	_jsii_.Set(
		c,
		"readWriteString",
		val,
	)
}

func ClassWithPrivateConstructorAndAutomaticProperties_Create(readOnlyString interface{}, readWriteString interface{}) ClassWithPrivateConstructorAndAutomaticPropertiesIface {
	_init_.Initialize()
	var returns *ClassWithPrivateConstructorAndAutomaticProperties
	_jsii_.InvokeStatic(
		"jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties",
		"create",
		[]interface{}{readOnlyString, readWriteString},
		true,
		&returns,
	)
	return returns
}

// Class interface
type ConfusingToJacksonIface interface {
	GetUnionProperty() interface{}
	SetUnionProperty(val interface{})
}

// This tries to confuse Jackson by having overloaded property setters.
// See: https://github.com/aws/aws-cdk/issues/4080
//
// Struct proxy
type ConfusingToJackson struct {
	UnionProperty interface{} \`json:"unionProperty"\`
}

func (c *ConfusingToJackson) GetUnionProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"unionProperty",
		&returns,
	)
	return returns
}


func (c *ConfusingToJackson) SetUnionProperty(val interface{}) {
	_jsii_.Set(
		c,
		"unionProperty",
		val,
	)
}

func ConfusingToJackson_MakeInstance() ConfusingToJacksonIface {
	_init_.Initialize()
	var returns *ConfusingToJackson
	_jsii_.InvokeStatic(
		"jsii-calc.ConfusingToJackson",
		"makeInstance",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func ConfusingToJackson_MakeStructInstance() ConfusingToJacksonStructIface {
	_init_.Initialize()
	var returns *ConfusingToJacksonStruct
	_jsii_.InvokeStatic(
		"jsii-calc.ConfusingToJackson",
		"makeStructInstance",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// ConfusingToJacksonStructIface is the public interface for the custom type ConfusingToJacksonStruct
type ConfusingToJacksonStructIface interface {
	GetUnionProperty() interface{}
}

// Struct proxy
type ConfusingToJacksonStruct struct {
	UnionProperty interface{} \`json:"unionProperty"\`
}

func (c *ConfusingToJacksonStruct) GetUnionProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"unionProperty",
		&returns,
	)
	return returns
}


// Class interface
type ConstructorPassesThisOutIface interface {
}

// Struct proxy
type ConstructorPassesThisOut struct {
}

func NewConstructorPassesThisOut(consumer PartiallyInitializedThisConsumerIface) ConstructorPassesThisOutIface {
	_init_.Initialize()
	self := ConstructorPassesThisOut{}
	_jsii_.Create(
		"jsii-calc.ConstructorPassesThisOut",
		[]interface{}{consumer},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type ConstructorsIface interface {
}

// Struct proxy
type Constructors struct {
}

func NewConstructors() ConstructorsIface {
	_init_.Initialize()
	self := Constructors{}
	_jsii_.Create(
		"jsii-calc.Constructors",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func Constructors_HiddenInterface() IPublicInterfaceIface {
	_init_.Initialize()
	var returns *IPublicInterface
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"hiddenInterface",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_HiddenInterfaces() []IPublicInterfaceIface {
	_init_.Initialize()
	var returns []IPublicInterfaceIface
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"hiddenInterfaces",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_HiddenSubInterfaces() []IPublicInterfaceIface {
	_init_.Initialize()
	var returns []IPublicInterfaceIface
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"hiddenSubInterfaces",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_MakeClass() PublicClassIface {
	_init_.Initialize()
	var returns *PublicClass
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"makeClass",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_MakeInterface() IPublicInterfaceIface {
	_init_.Initialize()
	var returns *IPublicInterface
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"makeInterface",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_MakeInterface2() IPublicInterface2Iface {
	_init_.Initialize()
	var returns *IPublicInterface2
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"makeInterface2",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_MakeInterfaces() []IPublicInterfaceIface {
	_init_.Initialize()
	var returns []IPublicInterfaceIface
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"makeInterfaces",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type ConsumePureInterfaceIface interface {
	WorkItBaby() StructBIface
}

// Struct proxy
type ConsumePureInterface struct {
}

func NewConsumePureInterface(delegate IStructReturningDelegateIface) ConsumePureInterfaceIface {
	_init_.Initialize()
	self := ConsumePureInterface{}
	_jsii_.Create(
		"jsii-calc.ConsumePureInterface",
		[]interface{}{delegate},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ConsumePureInterface) WorkItBaby() StructBIface {
	var returns *StructB
	_jsii_.Invoke(
		c,
		"workItBaby",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

// Class interface
type ConsumerCanRingBellIface interface {
	ImplementedByObjectLiteral(ringer IBellRingerIface) interface{}
	ImplementedByPrivateClass(ringer IBellRingerIface) interface{}
	ImplementedByPublicClass(ringer IBellRingerIface) interface{}
	WhenTypedAsClass(ringer IConcreteBellRingerIface) interface{}
}

// Test calling back to consumers that implement interfaces.
// 
// Check that if a JSII consumer implements IConsumerWithInterfaceParam, they can call
// the method on the argument that they're passed...
// Struct proxy
type ConsumerCanRingBell struct {
}

func NewConsumerCanRingBell() ConsumerCanRingBellIface {
	_init_.Initialize()
	self := ConsumerCanRingBell{}
	_jsii_.Create(
		"jsii-calc.ConsumerCanRingBell",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func ConsumerCanRingBell_StaticImplementedByObjectLiteral(ringer IBellRingerIface) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByObjectLiteral",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

func ConsumerCanRingBell_StaticImplementedByPrivateClass(ringer IBellRingerIface) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByPrivateClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

func ConsumerCanRingBell_StaticImplementedByPublicClass(ringer IBellRingerIface) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByPublicClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

func ConsumerCanRingBell_StaticWhenTypedAsClass(ringer IConcreteBellRingerIface) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.ConsumerCanRingBell",
		"staticWhenTypedAsClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

func (c *ConsumerCanRingBell) ImplementedByObjectLiteral(ringer IBellRingerIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"implementedByObjectLiteral",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

func (c *ConsumerCanRingBell) ImplementedByPrivateClass(ringer IBellRingerIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"implementedByPrivateClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

func (c *ConsumerCanRingBell) ImplementedByPublicClass(ringer IBellRingerIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"implementedByPublicClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

func (c *ConsumerCanRingBell) WhenTypedAsClass(ringer IConcreteBellRingerIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"whenTypedAsClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

// Class interface
type ConsumersOfThisCrazyTypeSystemIface interface {
	ConsumeAnotherPublicInterface(obj IAnotherPublicInterfaceIface) interface{}
	ConsumeNonInternalInterface(obj INonInternalInterfaceIface) interface{}
}

// Struct proxy
type ConsumersOfThisCrazyTypeSystem struct {
}

func NewConsumersOfThisCrazyTypeSystem() ConsumersOfThisCrazyTypeSystemIface {
	_init_.Initialize()
	self := ConsumersOfThisCrazyTypeSystem{}
	_jsii_.Create(
		"jsii-calc.ConsumersOfThisCrazyTypeSystem",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ConsumersOfThisCrazyTypeSystem) ConsumeAnotherPublicInterface(obj IAnotherPublicInterfaceIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"consumeAnotherPublicInterface",
		[]interface{}{obj},
		true,
		&returns,
	)
	return returns
}

func (c *ConsumersOfThisCrazyTypeSystem) ConsumeNonInternalInterface(obj INonInternalInterfaceIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"consumeNonInternalInterface",
		[]interface{}{obj},
		true,
		&returns,
	)
	return returns
}

// Class interface
type DataRendererIface interface {
	Render(data scopejsiicalclib.MyFirstStructIface) interface{}
	RenderArbitrary(data map[string]interface{}) interface{}
	RenderMap(map_ map[string]interface{}) interface{}
}

// Verifies proper type handling through dynamic overrides.
// Struct proxy
type DataRenderer struct {
}

func NewDataRenderer() DataRendererIface {
	_init_.Initialize()
	self := DataRenderer{}
	_jsii_.Create(
		"jsii-calc.DataRenderer",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DataRenderer) Render(data scopejsiicalclib.MyFirstStructIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"render",
		[]interface{}{data},
		true,
		&returns,
	)
	return returns
}

func (d *DataRenderer) RenderArbitrary(data map[string]interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"renderArbitrary",
		[]interface{}{data},
		true,
		&returns,
	)
	return returns
}

func (d *DataRenderer) RenderMap(map_ map[string]interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"renderMap",
		[]interface{}{map_},
		true,
		&returns,
	)
	return returns
}

// Class interface
type DefaultedConstructorArgumentIface interface {
	GetArg1() interface{}
	GetArg3() interface{}
	GetArg2() interface{}
}

// Struct proxy
type DefaultedConstructorArgument struct {
	Arg1 interface{} \`json:"arg1"\`
	Arg3 interface{} \`json:"arg3"\`
	Arg2 interface{} \`json:"arg2"\`
}

func (d *DefaultedConstructorArgument) GetArg1() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"arg1",
		&returns,
	)
	return returns
}

func (d *DefaultedConstructorArgument) GetArg3() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"arg3",
		&returns,
	)
	return returns
}

func (d *DefaultedConstructorArgument) GetArg2() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"arg2",
		&returns,
	)
	return returns
}


func NewDefaultedConstructorArgument(arg1 interface{}, arg2 interface{}, arg3 interface{}) DefaultedConstructorArgumentIface {
	_init_.Initialize()
	self := DefaultedConstructorArgument{}
	_jsii_.Create(
		"jsii-calc.DefaultedConstructorArgument",
		[]interface{}{arg1, arg2, arg3},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type Demonstrate982Iface interface {
}

// 1.
// 
// call #takeThis() -> An ObjectRef will be provisioned for the value (it'll be re-used!)
// 2. call #takeThisToo() -> The ObjectRef from before will need to be down-cased to the ParentStruct982 type
// Struct proxy
type Demonstrate982 struct {
}

func NewDemonstrate982() Demonstrate982Iface {
	_init_.Initialize()
	self := Demonstrate982{}
	_jsii_.Create(
		"jsii-calc.Demonstrate982",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func Demonstrate982_TakeThis() ChildStruct982Iface {
	_init_.Initialize()
	var returns *ChildStruct982
	_jsii_.InvokeStatic(
		"jsii-calc.Demonstrate982",
		"takeThis",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Demonstrate982_TakeThisToo() ParentStruct982Iface {
	_init_.Initialize()
	var returns *ParentStruct982
	_jsii_.InvokeStatic(
		"jsii-calc.Demonstrate982",
		"takeThisToo",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type DeprecatedClassIface interface {
	GetReadonlyProperty() interface{}
	GetMutableProperty() interface{}
	SetMutableProperty(val interface{})
	Method()
}

// Deprecated: a pretty boring class
// Struct proxy
type DeprecatedClass struct {
	// Deprecated: this is not always "wazoo", be ready to be disappointed
	ReadonlyProperty interface{} \`json:"readonlyProperty"\`
	// Deprecated: shouldn't have been mutable
	MutableProperty interface{} \`json:"mutableProperty"\`
}

func (d *DeprecatedClass) GetReadonlyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"readonlyProperty",
		&returns,
	)
	return returns
}

func (d *DeprecatedClass) GetMutableProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"mutableProperty",
		&returns,
	)
	return returns
}


func NewDeprecatedClass(readonlyString interface{}, mutableNumber interface{}) DeprecatedClassIface {
	_init_.Initialize()
	self := DeprecatedClass{}
	_jsii_.Create(
		"jsii-calc.DeprecatedClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DeprecatedClass) SetMutableProperty(val interface{}) {
	_jsii_.Set(
		d,
		"mutableProperty",
		val,
	)
}

func (d *DeprecatedClass) Method() {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

// Deprecated: your deprecated selection of bad options
type DeprecatedEnum string

const (
	DeprecatedEnumOptionA DeprecatedEnum = "OPTION_A"
	DeprecatedEnumOptionB DeprecatedEnum = "OPTION_B"
)

// DeprecatedStructIface is the public interface for the custom type DeprecatedStruct
// Deprecated: it just wraps a string
type DeprecatedStructIface interface {
	GetReadonlyProperty() interface{}
}

// Deprecated: it just wraps a string
// Struct proxy
type DeprecatedStruct struct {
	// Deprecated: well, yeah
	ReadonlyProperty interface{} \`json:"readonlyProperty"\`
}

func (d *DeprecatedStruct) GetReadonlyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"readonlyProperty",
		&returns,
	)
	return returns
}


// DerivedStructIface is the public interface for the custom type DerivedStruct
type DerivedStructIface interface {
	GetAnumber() interface{}
	GetAstring() interface{}
	GetFirstOptional() []interface{}
	GetAnotherRequired() interface{}
	GetBool() interface{}
	GetNonPrimitive() DoubleTroubleIface
	GetAnotherOptional() map[string]scopejsiicalclib.NumericValueIface
	GetOptionalAny() interface{}
	GetOptionalArray() []interface{}
}

// A struct which derives from another struct.
// Struct proxy
type DerivedStruct struct {
	// An awesome number value.
	// Deprecated.
	Anumber interface{} \`json:"anumber"\`
	// A string value.
	// Deprecated.
	Astring interface{} \`json:"astring"\`
	// Deprecated.
	FirstOptional []interface{} \`json:"firstOptional"\`
	AnotherRequired interface{} \`json:"anotherRequired"\`
	Bool interface{} \`json:"bool"\`
	// An example of a non primitive property.
	NonPrimitive DoubleTroubleIface \`json:"nonPrimitive"\`
	// This is optional.
	AnotherOptional map[string]scopejsiicalclib.NumericValueIface \`json:"anotherOptional"\`
	OptionalAny interface{} \`json:"optionalAny"\`
	OptionalArray []interface{} \`json:"optionalArray"\`
}

func (d *DerivedStruct) GetAnumber() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"anumber",
		&returns,
	)
	return returns
}

func (d *DerivedStruct) GetAstring() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"astring",
		&returns,
	)
	return returns
}

func (d *DerivedStruct) GetFirstOptional() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		d,
		"firstOptional",
		&returns,
	)
	return returns
}

func (d *DerivedStruct) GetAnotherRequired() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"anotherRequired",
		&returns,
	)
	return returns
}

func (d *DerivedStruct) GetBool() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"bool",
		&returns,
	)
	return returns
}

func (d *DerivedStruct) GetNonPrimitive() DoubleTroubleIface {
	var returns DoubleTroubleIface
	_jsii_.Get(
		d,
		"nonPrimitive",
		&returns,
	)
	return returns
}

func (d *DerivedStruct) GetAnotherOptional() map[string]scopejsiicalclib.NumericValueIface {
	var returns map[string]scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		d,
		"anotherOptional",
		&returns,
	)
	return returns
}

func (d *DerivedStruct) GetOptionalAny() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"optionalAny",
		&returns,
	)
	return returns
}

func (d *DerivedStruct) GetOptionalArray() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		d,
		"optionalArray",
		&returns,
	)
	return returns
}


// DiamondInheritanceBaseLevelStructIface is the public interface for the custom type DiamondInheritanceBaseLevelStruct
type DiamondInheritanceBaseLevelStructIface interface {
	GetBaseLevelProperty() interface{}
}

// Struct proxy
type DiamondInheritanceBaseLevelStruct struct {
	BaseLevelProperty interface{} \`json:"baseLevelProperty"\`
}

func (d *DiamondInheritanceBaseLevelStruct) GetBaseLevelProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"baseLevelProperty",
		&returns,
	)
	return returns
}


// DiamondInheritanceFirstMidLevelStructIface is the public interface for the custom type DiamondInheritanceFirstMidLevelStruct
type DiamondInheritanceFirstMidLevelStructIface interface {
	GetBaseLevelProperty() interface{}
	GetFirstMidLevelProperty() interface{}
}

// Struct proxy
type DiamondInheritanceFirstMidLevelStruct struct {
	BaseLevelProperty interface{} \`json:"baseLevelProperty"\`
	FirstMidLevelProperty interface{} \`json:"firstMidLevelProperty"\`
}

func (d *DiamondInheritanceFirstMidLevelStruct) GetBaseLevelProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"baseLevelProperty",
		&returns,
	)
	return returns
}

func (d *DiamondInheritanceFirstMidLevelStruct) GetFirstMidLevelProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"firstMidLevelProperty",
		&returns,
	)
	return returns
}


// DiamondInheritanceSecondMidLevelStructIface is the public interface for the custom type DiamondInheritanceSecondMidLevelStruct
type DiamondInheritanceSecondMidLevelStructIface interface {
	GetBaseLevelProperty() interface{}
	GetSecondMidLevelProperty() interface{}
}

// Struct proxy
type DiamondInheritanceSecondMidLevelStruct struct {
	BaseLevelProperty interface{} \`json:"baseLevelProperty"\`
	SecondMidLevelProperty interface{} \`json:"secondMidLevelProperty"\`
}

func (d *DiamondInheritanceSecondMidLevelStruct) GetBaseLevelProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"baseLevelProperty",
		&returns,
	)
	return returns
}

func (d *DiamondInheritanceSecondMidLevelStruct) GetSecondMidLevelProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"secondMidLevelProperty",
		&returns,
	)
	return returns
}


// DiamondInheritanceTopLevelStructIface is the public interface for the custom type DiamondInheritanceTopLevelStruct
type DiamondInheritanceTopLevelStructIface interface {
	GetBaseLevelProperty() interface{}
	GetFirstMidLevelProperty() interface{}
	GetSecondMidLevelProperty() interface{}
	GetTopLevelProperty() interface{}
}

// Struct proxy
type DiamondInheritanceTopLevelStruct struct {
	BaseLevelProperty interface{} \`json:"baseLevelProperty"\`
	FirstMidLevelProperty interface{} \`json:"firstMidLevelProperty"\`
	SecondMidLevelProperty interface{} \`json:"secondMidLevelProperty"\`
	TopLevelProperty interface{} \`json:"topLevelProperty"\`
}

func (d *DiamondInheritanceTopLevelStruct) GetBaseLevelProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"baseLevelProperty",
		&returns,
	)
	return returns
}

func (d *DiamondInheritanceTopLevelStruct) GetFirstMidLevelProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"firstMidLevelProperty",
		&returns,
	)
	return returns
}

func (d *DiamondInheritanceTopLevelStruct) GetSecondMidLevelProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"secondMidLevelProperty",
		&returns,
	)
	return returns
}

func (d *DiamondInheritanceTopLevelStruct) GetTopLevelProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"topLevelProperty",
		&returns,
	)
	return returns
}


// Class interface
type DisappointingCollectionSourceIface interface {
}

// Verifies that null/undefined can be returned for optional collections.
// 
// This source of collections is disappointing - it'll always give you nothing :(
// Struct proxy
type DisappointingCollectionSource struct {
}

func DisappointingCollectionSource_MaybeList() []interface{} {
	_init_.Initialize()
	var returns []interface{}
	_jsii_.StaticGet(
		"jsii-calc.DisappointingCollectionSource",
		"maybeList",
		&returns,
	)
	return returns
}

func DisappointingCollectionSource_MaybeMap() map[string]interface{} {
	_init_.Initialize()
	var returns map[string]interface{}
	_jsii_.StaticGet(
		"jsii-calc.DisappointingCollectionSource",
		"maybeMap",
		&returns,
	)
	return returns
}

// Class interface
type DoNotOverridePrivatesIface interface {
	ChangePrivatePropertyValue(newValue interface{})
	PrivateMethodValue() interface{}
	PrivatePropertyValue() interface{}
}

// Struct proxy
type DoNotOverridePrivates struct {
}

func NewDoNotOverridePrivates() DoNotOverridePrivatesIface {
	_init_.Initialize()
	self := DoNotOverridePrivates{}
	_jsii_.Create(
		"jsii-calc.DoNotOverridePrivates",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DoNotOverridePrivates) ChangePrivatePropertyValue(newValue interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"changePrivatePropertyValue",
		[]interface{}{newValue},
		false,
		&returns,
	)
}

func (d *DoNotOverridePrivates) PrivateMethodValue() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"privateMethodValue",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (d *DoNotOverridePrivates) PrivatePropertyValue() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"privatePropertyValue",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type DoNotRecognizeAnyAsOptionalIface interface {
	Method(_requiredAny interface{}, _optionalAny interface{}, _optionalString interface{})
}

// jsii#284: do not recognize "any" as an optional argument.
// Struct proxy
type DoNotRecognizeAnyAsOptional struct {
}

func NewDoNotRecognizeAnyAsOptional() DoNotRecognizeAnyAsOptionalIface {
	_init_.Initialize()
	self := DoNotRecognizeAnyAsOptional{}
	_jsii_.Create(
		"jsii-calc.DoNotRecognizeAnyAsOptional",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DoNotRecognizeAnyAsOptional) Method(_requiredAny interface{}, _optionalAny interface{}, _optionalString interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"method",
		[]interface{}{_requiredAny, _optionalAny, _optionalString},
		false,
		&returns,
	)
}

// Class interface
type DocumentedClassIface interface {
	Greet(greetee GreeteeIface) interface{}
	Hola()
}

// Here's the first line of the TSDoc comment.
// 
// This is the meat of the TSDoc comment. It may contain
// multiple lines and multiple paragraphs.
// 
// Multiple paragraphs are separated by an empty line.
// Struct proxy
type DocumentedClass struct {
}

func NewDocumentedClass() DocumentedClassIface {
	_init_.Initialize()
	self := DocumentedClass{}
	_jsii_.Create(
		"jsii-calc.DocumentedClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DocumentedClass) Greet(greetee GreeteeIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"greet",
		[]interface{}{greetee},
		true,
		&returns,
	)
	return returns
}

func (d *DocumentedClass) Hola() {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"hola",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type DontComplainAboutVariadicAfterOptionalIface interface {
	OptionalAndVariadic(optional interface{}, things interface{}) interface{}
}

// Struct proxy
type DontComplainAboutVariadicAfterOptional struct {
}

func NewDontComplainAboutVariadicAfterOptional() DontComplainAboutVariadicAfterOptionalIface {
	_init_.Initialize()
	self := DontComplainAboutVariadicAfterOptional{}
	_jsii_.Create(
		"jsii-calc.DontComplainAboutVariadicAfterOptional",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DontComplainAboutVariadicAfterOptional) OptionalAndVariadic(optional interface{}, things interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"optionalAndVariadic",
		[]interface{}{optional, things},
		true,
		&returns,
	)
	return returns
}

// Class interface
type DoubleTroubleIface interface {
	IFriendlyRandomGeneratorIface
	IRandomNumberGeneratorIface
	scopejsiicalclib.IFriendlyIface
	Hello() interface{}
	Next() interface{}
}

// Struct proxy
type DoubleTrouble struct {
}

func NewDoubleTrouble() DoubleTroubleIface {
	_init_.Initialize()
	self := DoubleTrouble{}
	_jsii_.Create(
		"jsii-calc.DoubleTrouble",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IFriendlyRandomGenerator"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DoubleTrouble) Hello() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (d *DoubleTrouble) Next() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"next",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type DynamicPropertyBearerIface interface {
	GetDynamicProperty() interface{}
	SetDynamicProperty(val interface{})
	GetValueStore() interface{}
	SetValueStore(val interface{})
}

// Ensures we can override a dynamic property that was inherited.
// Struct proxy
type DynamicPropertyBearer struct {
	DynamicProperty interface{} \`json:"dynamicProperty"\`
	ValueStore interface{} \`json:"valueStore"\`
}

func (d *DynamicPropertyBearer) GetDynamicProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"dynamicProperty",
		&returns,
	)
	return returns
}

func (d *DynamicPropertyBearer) GetValueStore() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"valueStore",
		&returns,
	)
	return returns
}


func NewDynamicPropertyBearer(valueStore interface{}) DynamicPropertyBearerIface {
	_init_.Initialize()
	self := DynamicPropertyBearer{}
	_jsii_.Create(
		"jsii-calc.DynamicPropertyBearer",
		[]interface{}{valueStore},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DynamicPropertyBearer) SetDynamicProperty(val interface{}) {
	_jsii_.Set(
		d,
		"dynamicProperty",
		val,
	)
}

func (d *DynamicPropertyBearer) SetValueStore(val interface{}) {
	_jsii_.Set(
		d,
		"valueStore",
		val,
	)
}

// Class interface
type DynamicPropertyBearerChildIface interface {
	GetDynamicProperty() interface{}
	SetDynamicProperty(val interface{})
	GetValueStore() interface{}
	SetValueStore(val interface{})
	GetOriginalValue() interface{}
	OverrideValue(newValue interface{}) interface{}
}

// Struct proxy
type DynamicPropertyBearerChild struct {
	DynamicProperty interface{} \`json:"dynamicProperty"\`
	ValueStore interface{} \`json:"valueStore"\`
	OriginalValue interface{} \`json:"originalValue"\`
}

func (d *DynamicPropertyBearerChild) GetDynamicProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"dynamicProperty",
		&returns,
	)
	return returns
}

func (d *DynamicPropertyBearerChild) GetValueStore() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"valueStore",
		&returns,
	)
	return returns
}

func (d *DynamicPropertyBearerChild) GetOriginalValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		d,
		"originalValue",
		&returns,
	)
	return returns
}


func NewDynamicPropertyBearerChild(originalValue interface{}) DynamicPropertyBearerChildIface {
	_init_.Initialize()
	self := DynamicPropertyBearerChild{}
	_jsii_.Create(
		"jsii-calc.DynamicPropertyBearerChild",
		[]interface{}{originalValue},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DynamicPropertyBearerChild) SetDynamicProperty(val interface{}) {
	_jsii_.Set(
		d,
		"dynamicProperty",
		val,
	)
}

func (d *DynamicPropertyBearerChild) SetValueStore(val interface{}) {
	_jsii_.Set(
		d,
		"valueStore",
		val,
	)
}

func (d *DynamicPropertyBearerChild) OverrideValue(newValue interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"overrideValue",
		[]interface{}{newValue},
		true,
		&returns,
	)
	return returns
}

// Class interface
type EntropyIface interface {
	Increase() interface{}
	Repeat(word interface{}) interface{}
}

// This class is used to validate that serialization and deserialization does not interpret ISO-8601-formatted timestampts to the native date/time object, as the jsii protocol has a $jsii$date wrapper for this purpose (node's JSON parsing does *NOT* detect dates automatically in this way, so host libraries should not either).
// Struct proxy
type Entropy struct {
}

// Creates a new instance of Entropy.
func NewEntropy(clock IWallClockIface) EntropyIface {
	_init_.Initialize()
	self := Entropy{}
	_jsii_.Create(
		"jsii-calc.Entropy",
		[]interface{}{clock},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (e *Entropy) Increase() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		e,
		"increase",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (e *Entropy) Repeat(word interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		e,
		"repeat",
		[]interface{}{word},
		true,
		&returns,
	)
	return returns
}

// Class interface
type EnumDispenserIface interface {
}

// Struct proxy
type EnumDispenser struct {
}

func EnumDispenser_RandomIntegerLikeEnum() AllTypesEnum {
	_init_.Initialize()
	var returns AllTypesEnum
	_jsii_.InvokeStatic(
		"jsii-calc.EnumDispenser",
		"randomIntegerLikeEnum",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func EnumDispenser_RandomStringLikeEnum() StringEnum {
	_init_.Initialize()
	var returns StringEnum
	_jsii_.InvokeStatic(
		"jsii-calc.EnumDispenser",
		"randomStringLikeEnum",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type EraseUndefinedHashValuesIface interface {
}

// Struct proxy
type EraseUndefinedHashValues struct {
}

func NewEraseUndefinedHashValues() EraseUndefinedHashValuesIface {
	_init_.Initialize()
	self := EraseUndefinedHashValues{}
	_jsii_.Create(
		"jsii-calc.EraseUndefinedHashValues",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func EraseUndefinedHashValues_DoesKeyExist(opts EraseUndefinedHashValuesOptionsIface, key interface{}) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.EraseUndefinedHashValues",
		"doesKeyExist",
		[]interface{}{opts, key},
		true,
		&returns,
	)
	return returns
}

func EraseUndefinedHashValues_Prop1IsNull() map[string]interface{} {
	_init_.Initialize()
	var returns map[string]interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.EraseUndefinedHashValues",
		"prop1IsNull",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func EraseUndefinedHashValues_Prop2IsUndefined() map[string]interface{} {
	_init_.Initialize()
	var returns map[string]interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.EraseUndefinedHashValues",
		"prop2IsUndefined",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// EraseUndefinedHashValuesOptionsIface is the public interface for the custom type EraseUndefinedHashValuesOptions
type EraseUndefinedHashValuesOptionsIface interface {
	GetOption1() interface{}
	GetOption2() interface{}
}

// Struct proxy
type EraseUndefinedHashValuesOptions struct {
	Option1 interface{} \`json:"option1"\`
	Option2 interface{} \`json:"option2"\`
}

func (e *EraseUndefinedHashValuesOptions) GetOption1() interface{} {
	var returns interface{}
	_jsii_.Get(
		e,
		"option1",
		&returns,
	)
	return returns
}

func (e *EraseUndefinedHashValuesOptions) GetOption2() interface{} {
	var returns interface{}
	_jsii_.Get(
		e,
		"option2",
		&returns,
	)
	return returns
}


// Class interface
type ExperimentalClassIface interface {
	GetReadonlyProperty() interface{}
	GetMutableProperty() interface{}
	SetMutableProperty(val interface{})
	Method()
}

// Experimental.
// Struct proxy
type ExperimentalClass struct {
	// Experimental.
	ReadonlyProperty interface{} \`json:"readonlyProperty"\`
	// Experimental.
	MutableProperty interface{} \`json:"mutableProperty"\`
}

func (e *ExperimentalClass) GetReadonlyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		e,
		"readonlyProperty",
		&returns,
	)
	return returns
}

func (e *ExperimentalClass) GetMutableProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		e,
		"mutableProperty",
		&returns,
	)
	return returns
}


func NewExperimentalClass(readonlyString interface{}, mutableNumber interface{}) ExperimentalClassIface {
	_init_.Initialize()
	self := ExperimentalClass{}
	_jsii_.Create(
		"jsii-calc.ExperimentalClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (e *ExperimentalClass) SetMutableProperty(val interface{}) {
	_jsii_.Set(
		e,
		"mutableProperty",
		val,
	)
}

func (e *ExperimentalClass) Method() {
	var returns interface{}
	_jsii_.Invoke(
		e,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

// Experimental.
type ExperimentalEnum string

const (
	ExperimentalEnumOptionA ExperimentalEnum = "OPTION_A"
	ExperimentalEnumOptionB ExperimentalEnum = "OPTION_B"
)

// ExperimentalStructIface is the public interface for the custom type ExperimentalStruct
// Experimental.
type ExperimentalStructIface interface {
	GetReadonlyProperty() interface{}
}

// Experimental.
// Struct proxy
type ExperimentalStruct struct {
	// Experimental.
	ReadonlyProperty interface{} \`json:"readonlyProperty"\`
}

func (e *ExperimentalStruct) GetReadonlyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		e,
		"readonlyProperty",
		&returns,
	)
	return returns
}


// Class interface
type ExportedBaseClassIface interface {
	GetSuccess() interface{}
}

// Struct proxy
type ExportedBaseClass struct {
	Success interface{} \`json:"success"\`
}

func (e *ExportedBaseClass) GetSuccess() interface{} {
	var returns interface{}
	_jsii_.Get(
		e,
		"success",
		&returns,
	)
	return returns
}


func NewExportedBaseClass(success interface{}) ExportedBaseClassIface {
	_init_.Initialize()
	self := ExportedBaseClass{}
	_jsii_.Create(
		"jsii-calc.ExportedBaseClass",
		[]interface{}{success},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// ExtendsInternalInterfaceIface is the public interface for the custom type ExtendsInternalInterface
type ExtendsInternalInterfaceIface interface {
	GetBoom() interface{}
	GetProp() interface{}
}

// Struct proxy
type ExtendsInternalInterface struct {
	Boom interface{} \`json:"boom"\`
	Prop interface{} \`json:"prop"\`
}

func (e *ExtendsInternalInterface) GetBoom() interface{} {
	var returns interface{}
	_jsii_.Get(
		e,
		"boom",
		&returns,
	)
	return returns
}

func (e *ExtendsInternalInterface) GetProp() interface{} {
	var returns interface{}
	_jsii_.Get(
		e,
		"prop",
		&returns,
	)
	return returns
}


// Class interface
type ExternalClassIface interface {
	GetReadonlyProperty() interface{}
	GetMutableProperty() interface{}
	SetMutableProperty(val interface{})
	Method()
}

// Struct proxy
type ExternalClass struct {
	ReadonlyProperty interface{} \`json:"readonlyProperty"\`
	MutableProperty interface{} \`json:"mutableProperty"\`
}

func (e *ExternalClass) GetReadonlyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		e,
		"readonlyProperty",
		&returns,
	)
	return returns
}

func (e *ExternalClass) GetMutableProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		e,
		"mutableProperty",
		&returns,
	)
	return returns
}


func NewExternalClass(readonlyString interface{}, mutableNumber interface{}) ExternalClassIface {
	_init_.Initialize()
	self := ExternalClass{}
	_jsii_.Create(
		"jsii-calc.ExternalClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (e *ExternalClass) SetMutableProperty(val interface{}) {
	_jsii_.Set(
		e,
		"mutableProperty",
		val,
	)
}

func (e *ExternalClass) Method() {
	var returns interface{}
	_jsii_.Invoke(
		e,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

type ExternalEnum string

const (
	ExternalEnumOptionA ExternalEnum = "OPTION_A"
	ExternalEnumOptionB ExternalEnum = "OPTION_B"
)

// ExternalStructIface is the public interface for the custom type ExternalStruct
type ExternalStructIface interface {
	GetReadonlyProperty() interface{}
}

// Struct proxy
type ExternalStruct struct {
	ReadonlyProperty interface{} \`json:"readonlyProperty"\`
}

func (e *ExternalStruct) GetReadonlyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		e,
		"readonlyProperty",
		&returns,
	)
	return returns
}


// Class interface
type GiveMeStructsIface interface {
	GetStructLiteral() scopejsiicalclib.StructWithOnlyOptionalsIface
	DerivedToFirst(derived DerivedStructIface) scopejsiicalclib.MyFirstStructIface
	ReadDerivedNonPrimitive(derived DerivedStructIface) DoubleTroubleIface
	ReadFirstNumber(first scopejsiicalclib.MyFirstStructIface) interface{}
}

// Struct proxy
type GiveMeStructs struct {
	StructLiteral scopejsiicalclib.StructWithOnlyOptionalsIface \`json:"structLiteral"\`
}

func (g *GiveMeStructs) GetStructLiteral() scopejsiicalclib.StructWithOnlyOptionalsIface {
	var returns scopejsiicalclib.StructWithOnlyOptionalsIface
	_jsii_.Get(
		g,
		"structLiteral",
		&returns,
	)
	return returns
}


func NewGiveMeStructs() GiveMeStructsIface {
	_init_.Initialize()
	self := GiveMeStructs{}
	_jsii_.Create(
		"jsii-calc.GiveMeStructs",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (g *GiveMeStructs) DerivedToFirst(derived DerivedStructIface) scopejsiicalclib.MyFirstStructIface {
	var returns *scopejsiicalclib.MyFirstStruct
	_jsii_.Invoke(
		g,
		"derivedToFirst",
		[]interface{}{derived},
		true,
		returns,
	)
	return returns
}

func (g *GiveMeStructs) ReadDerivedNonPrimitive(derived DerivedStructIface) DoubleTroubleIface {
	var returns *DoubleTrouble
	_jsii_.Invoke(
		g,
		"readDerivedNonPrimitive",
		[]interface{}{derived},
		true,
		returns,
	)
	return returns
}

func (g *GiveMeStructs) ReadFirstNumber(first scopejsiicalclib.MyFirstStructIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		g,
		"readFirstNumber",
		[]interface{}{first},
		true,
		&returns,
	)
	return returns
}

// GreeteeIface is the public interface for the custom type Greetee
type GreeteeIface interface {
	GetName() interface{}
}

// These are some arguments you can pass to a method.
// Struct proxy
type Greetee struct {
	// The name of the greetee.
	Name interface{} \`json:"name"\`
}

func (g *Greetee) GetName() interface{} {
	var returns interface{}
	_jsii_.Get(
		g,
		"name",
		&returns,
	)
	return returns
}


// Class interface
type GreetingAugmenterIface interface {
	BetterGreeting(friendly scopejsiicalclib.IFriendlyIface) interface{}
}

// Struct proxy
type GreetingAugmenter struct {
}

func NewGreetingAugmenter() GreetingAugmenterIface {
	_init_.Initialize()
	self := GreetingAugmenter{}
	_jsii_.Create(
		"jsii-calc.GreetingAugmenter",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (g *GreetingAugmenter) BetterGreeting(friendly scopejsiicalclib.IFriendlyIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		g,
		"betterGreeting",
		[]interface{}{friendly},
		true,
		&returns,
	)
	return returns
}

// We can return an anonymous interface implementation from an override without losing the interface declarations.
type IAnonymousImplementationProviderIface interface {
	ProvideAsClass() ImplementationIface
	ProvideAsInterface() IAnonymouslyImplementMeIface
}

type IAnonymousImplementationProvider struct {}

func (i *IAnonymousImplementationProvider) ProvideAsClass() ImplementationIface {
	var returns *Implementation
	_jsii_.Invoke(
		i,
		"provideAsClass",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

func (i *IAnonymousImplementationProvider) ProvideAsInterface() IAnonymouslyImplementMeIface {
	var returns *IAnonymouslyImplementMe
	_jsii_.Invoke(
		i,
		"provideAsInterface",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

type IAnonymouslyImplementMeIface interface {
	Verb() interface{}
	GetValue() interface{}
}

type IAnonymouslyImplementMe struct {}

func (i *IAnonymouslyImplementMe) Verb() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"verb",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (i *IAnonymouslyImplementMe) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"value",
		&returns,
	)
	return returns
}

type IAnotherPublicInterfaceIface interface {
	GetA() interface{}
}

type IAnotherPublicInterface struct {}

func (i *IAnotherPublicInterface) GetA() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"a",
		&returns,
	)
	return returns
}

func (i *IAnotherPublicInterface) SetA(val interface{}) {
	_jsii_.Set(
		i,
		"a",
		val,
	)
}

type IBellIface interface {
	Ring()
}

type IBell struct {}

func (i *IBell) Ring() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"ring",
		[]interface{}{},
		false,
		&returns,
	)
}

// Takes the object parameter as an interface.
type IBellRingerIface interface {
	YourTurn(bell IBellIface)
}

type IBellRinger struct {}

func (i *IBellRinger) YourTurn(bell IBellIface) {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"yourTurn",
		[]interface{}{bell},
		false,
		&returns,
	)
}

// Takes the object parameter as a calss.
type IConcreteBellRingerIface interface {
	YourTurn(bell BellIface)
}

type IConcreteBellRinger struct {}

func (i *IConcreteBellRinger) YourTurn(bell BellIface) {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"yourTurn",
		[]interface{}{bell},
		false,
		&returns,
	)
}

// Deprecated: useless interface
type IDeprecatedInterfaceIface interface {
	// Deprecated: services no purpose
	Method()
	// Deprecated: could be better
	GetMutableProperty() interface{}
}

type IDeprecatedInterface struct {}

func (i *IDeprecatedInterface) Method() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *IDeprecatedInterface) GetMutableProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (i *IDeprecatedInterface) SetMutableProperty(val interface{}) {
	_jsii_.Set(
		i,
		"mutableProperty",
		val,
	)
}

// Experimental.
type IExperimentalInterfaceIface interface {
	// Experimental.
	Method()
	// Experimental.
	GetMutableProperty() interface{}
}

type IExperimentalInterface struct {}

func (i *IExperimentalInterface) Method() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *IExperimentalInterface) GetMutableProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (i *IExperimentalInterface) SetMutableProperty(val interface{}) {
	_jsii_.Set(
		i,
		"mutableProperty",
		val,
	)
}

type IExtendsPrivateInterfaceIface interface {
	GetMoreThings() []interface{}
	GetPrivate() interface{}
}

type IExtendsPrivateInterface struct {}

func (i *IExtendsPrivateInterface) GetMoreThings() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		i,
		"moreThings",
		&returns,
	)
	return returns
}

func (i *IExtendsPrivateInterface) GetPrivate() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"private",
		&returns,
	)
	return returns
}

func (i *IExtendsPrivateInterface) SetPrivate(val interface{}) {
	_jsii_.Set(
		i,
		"private",
		val,
	)
}

type IExternalInterfaceIface interface {
	Method()
	GetMutableProperty() interface{}
}

type IExternalInterface struct {}

func (i *IExternalInterface) Method() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *IExternalInterface) GetMutableProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (i *IExternalInterface) SetMutableProperty(val interface{}) {
	_jsii_.Set(
		i,
		"mutableProperty",
		val,
	)
}

// Even friendlier classes can implement this interface.
type IFriendlierIface interface {
	scopejsiicalclib.IFriendlyIface
	// Say farewell.
	Farewell() interface{}
	// Say goodbye.
	//
	// Returns: A goodbye blessing.
	Goodbye() interface{}
}

type IFriendlier struct {}

func (i *IFriendlier) Hello() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (i *IFriendlier) Farewell() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"farewell",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (i *IFriendlier) Goodbye() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"goodbye",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type IFriendlyRandomGeneratorIface interface {
	IRandomNumberGeneratorIface
	scopejsiicalclib.IFriendlyIface
}

type IFriendlyRandomGenerator struct {}

func (i *IFriendlyRandomGenerator) Next() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"next",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (i *IFriendlyRandomGenerator) Hello() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// awslabs/jsii#220 Abstract return type.
type IInterfaceImplementedByAbstractClassIface interface {
	GetPropFromInterface() interface{}
}

type IInterfaceImplementedByAbstractClass struct {}

func (i *IInterfaceImplementedByAbstractClass) GetPropFromInterface() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"propFromInterface",
		&returns,
	)
	return returns
}

// Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.
type IInterfaceThatShouldNotBeADataTypeIface interface {
	IInterfaceWithMethodsIface
	GetOtherValue() interface{}
}

type IInterfaceThatShouldNotBeADataType struct {}

func (i *IInterfaceThatShouldNotBeADataType) DoThings() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"doThings",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *IInterfaceThatShouldNotBeADataType) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"value",
		&returns,
	)
	return returns
}

func (i *IInterfaceThatShouldNotBeADataType) GetOtherValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"otherValue",
		&returns,
	)
	return returns
}

type IInterfaceWithInternalIface interface {
	Visible()
}

type IInterfaceWithInternal struct {}

func (i *IInterfaceWithInternal) Visible() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"visible",
		[]interface{}{},
		false,
		&returns,
	)
}

type IInterfaceWithMethodsIface interface {
	DoThings()
	GetValue() interface{}
}

type IInterfaceWithMethods struct {}

func (i *IInterfaceWithMethods) DoThings() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"doThings",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *IInterfaceWithMethods) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"value",
		&returns,
	)
	return returns
}

// awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.
type IInterfaceWithOptionalMethodArgumentsIface interface {
	Hello(arg1 interface{}, arg2 interface{})
}

type IInterfaceWithOptionalMethodArguments struct {}

func (i *IInterfaceWithOptionalMethodArguments) Hello(arg1 interface{}, arg2 interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"hello",
		[]interface{}{arg1, arg2},
		false,
		&returns,
	)
}

type IInterfaceWithPropertiesIface interface {
	GetReadOnlyString() interface{}
	GetReadWriteString() interface{}
}

type IInterfaceWithProperties struct {}

func (i *IInterfaceWithProperties) GetReadOnlyString() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"readOnlyString",
		&returns,
	)
	return returns
}

func (i *IInterfaceWithProperties) GetReadWriteString() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"readWriteString",
		&returns,
	)
	return returns
}

func (i *IInterfaceWithProperties) SetReadWriteString(val interface{}) {
	_jsii_.Set(
		i,
		"readWriteString",
		val,
	)
}

type IInterfaceWithPropertiesExtensionIface interface {
	IInterfaceWithPropertiesIface
	GetFoo() interface{}
}

type IInterfaceWithPropertiesExtension struct {}

func (i *IInterfaceWithPropertiesExtension) GetReadOnlyString() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"readOnlyString",
		&returns,
	)
	return returns
}

func (i *IInterfaceWithPropertiesExtension) GetReadWriteString() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"readWriteString",
		&returns,
	)
	return returns
}

func (i *IInterfaceWithPropertiesExtension) SetReadWriteString(val interface{}) {
	_jsii_.Set(
		i,
		"readWriteString",
		val,
	)
}

func (i *IInterfaceWithPropertiesExtension) GetFoo() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"foo",
		&returns,
	)
	return returns
}

func (i *IInterfaceWithPropertiesExtension) SetFoo(val interface{}) {
	_jsii_.Set(
		i,
		"foo",
		val,
	)
}

type Ijsii417DerivedIface interface {
	Ijsii417PublicBaseOfBaseIface
	Bar()
	Baz()
	GetProperty() interface{}
}

type Ijsii417Derived struct {}

func (i *Ijsii417Derived) Foo() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"foo",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *Ijsii417Derived) Bar() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"bar",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *Ijsii417Derived) Baz() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"baz",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *Ijsii417Derived) GetHasRoot() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"hasRoot",
		&returns,
	)
	return returns
}

func (i *Ijsii417Derived) GetProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"property",
		&returns,
	)
	return returns
}

type Ijsii417PublicBaseOfBaseIface interface {
	Foo()
	GetHasRoot() interface{}
}

type Ijsii417PublicBaseOfBase struct {}

func (i *Ijsii417PublicBaseOfBase) Foo() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"foo",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *Ijsii417PublicBaseOfBase) GetHasRoot() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"hasRoot",
		&returns,
	)
	return returns
}

type IJsii487ExternalIface interface {
}

type IJsii487External struct {}

type IJsii487External2Iface interface {
}

type IJsii487External2 struct {}

type IJsii496Iface interface {
}

type IJsii496 struct {}

type IMutableObjectLiteralIface interface {
	GetValue() interface{}
}

type IMutableObjectLiteral struct {}

func (i *IMutableObjectLiteral) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"value",
		&returns,
	)
	return returns
}

func (i *IMutableObjectLiteral) SetValue(val interface{}) {
	_jsii_.Set(
		i,
		"value",
		val,
	)
}

type INonInternalInterfaceIface interface {
	IAnotherPublicInterfaceIface
	GetB() interface{}
	GetC() interface{}
}

type INonInternalInterface struct {}

func (i *INonInternalInterface) GetA() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"a",
		&returns,
	)
	return returns
}

func (i *INonInternalInterface) SetA(val interface{}) {
	_jsii_.Set(
		i,
		"a",
		val,
	)
}

func (i *INonInternalInterface) GetB() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"b",
		&returns,
	)
	return returns
}

func (i *INonInternalInterface) SetB(val interface{}) {
	_jsii_.Set(
		i,
		"b",
		val,
	)
}

func (i *INonInternalInterface) GetC() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"c",
		&returns,
	)
	return returns
}

func (i *INonInternalInterface) SetC(val interface{}) {
	_jsii_.Set(
		i,
		"c",
		val,
	)
}

// Make sure that setters are properly called on objects with interfaces.
type IObjectWithPropertyIface interface {
	WasSet() interface{}
	GetProperty() interface{}
}

type IObjectWithProperty struct {}

func (i *IObjectWithProperty) WasSet() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"wasSet",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (i *IObjectWithProperty) GetProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"property",
		&returns,
	)
	return returns
}

func (i *IObjectWithProperty) SetProperty(val interface{}) {
	_jsii_.Set(
		i,
		"property",
		val,
	)
}

// Checks that optional result from interface method code generates correctly.
type IOptionalMethodIface interface {
	Optional() interface{}
}

type IOptionalMethod struct {}

func (i *IOptionalMethod) Optional() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"optional",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type IPrivatelyImplementedIface interface {
	GetSuccess() interface{}
}

type IPrivatelyImplemented struct {}

func (i *IPrivatelyImplemented) GetSuccess() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"success",
		&returns,
	)
	return returns
}

type IPublicInterfaceIface interface {
	Bye() interface{}
}

type IPublicInterface struct {}

func (i *IPublicInterface) Bye() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"bye",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type IPublicInterface2Iface interface {
	Ciao() interface{}
}

type IPublicInterface2 struct {}

func (i *IPublicInterface2) Ciao() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"ciao",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Generates random numbers.
type IRandomNumberGeneratorIface interface {
	// Returns another random number.
	//
	// Returns: A random number.
	Next() interface{}
}

type IRandomNumberGenerator struct {}

func (i *IRandomNumberGenerator) Next() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"next",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Returns a subclass of a known class which implements an interface.
type IReturnJsii976Iface interface {
	GetFoo() interface{}
}

type IReturnJsii976 struct {}

func (i *IReturnJsii976) GetFoo() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"foo",
		&returns,
	)
	return returns
}

type IReturnsNumberIface interface {
	ObtainNumber() scopejsiicalclib.IDoublableIface
	GetNumberProp() scopejsiicalclib.NumberIface
}

type IReturnsNumber struct {}

func (i *IReturnsNumber) ObtainNumber() scopejsiicalclib.IDoublableIface {
	var returns *scopejsiicalclib.IDoublable
	_jsii_.Invoke(
		i,
		"obtainNumber",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

func (i *IReturnsNumber) GetNumberProp() scopejsiicalclib.NumberIface {
	var returns scopejsiicalclib.NumberIface
	_jsii_.Get(
		i,
		"numberProp",
		&returns,
	)
	return returns
}

type IStableInterfaceIface interface {
	Method()
	GetMutableProperty() interface{}
}

type IStableInterface struct {}

func (i *IStableInterface) Method() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *IStableInterface) GetMutableProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (i *IStableInterface) SetMutableProperty(val interface{}) {
	_jsii_.Set(
		i,
		"mutableProperty",
		val,
	)
}

// Verifies that a "pure" implementation of an interface works correctly.
type IStructReturningDelegateIface interface {
	ReturnStruct() StructBIface
}

type IStructReturningDelegate struct {}

func (i *IStructReturningDelegate) ReturnStruct() StructBIface {
	var returns *StructB
	_jsii_.Invoke(
		i,
		"returnStruct",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

// Implement this interface.
type IWallClockIface interface {
	// Returns the current time, formatted as an ISO-8601 string.
	Iso8601Now() interface{}
}

type IWallClock struct {}

func (i *IWallClock) Iso8601Now() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"iso8601Now",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type ImplementInternalInterfaceIface interface {
	GetProp() interface{}
	SetProp(val interface{})
}

// Struct proxy
type ImplementInternalInterface struct {
	Prop interface{} \`json:"prop"\`
}

func (i *ImplementInternalInterface) GetProp() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"prop",
		&returns,
	)
	return returns
}


func NewImplementInternalInterface() ImplementInternalInterfaceIface {
	_init_.Initialize()
	self := ImplementInternalInterface{}
	_jsii_.Create(
		"jsii-calc.ImplementInternalInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *ImplementInternalInterface) SetProp(val interface{}) {
	_jsii_.Set(
		i,
		"prop",
		val,
	)
}

// Class interface
type ImplementationIface interface {
	GetValue() interface{}
}

// Struct proxy
type Implementation struct {
	Value interface{} \`json:"value"\`
}

func (i *Implementation) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"value",
		&returns,
	)
	return returns
}


func NewImplementation() ImplementationIface {
	_init_.Initialize()
	self := Implementation{}
	_jsii_.Create(
		"jsii-calc.Implementation",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type ImplementsInterfaceWithInternalIface interface {
	IInterfaceWithInternalIface
	Visible()
}

// Struct proxy
type ImplementsInterfaceWithInternal struct {
}

func NewImplementsInterfaceWithInternal() ImplementsInterfaceWithInternalIface {
	_init_.Initialize()
	self := ImplementsInterfaceWithInternal{}
	_jsii_.Create(
		"jsii-calc.ImplementsInterfaceWithInternal",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IInterfaceWithInternal"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *ImplementsInterfaceWithInternal) Visible() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"visible",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type ImplementsInterfaceWithInternalSubclassIface interface {
	IInterfaceWithInternalIface
	Visible()
}

// Struct proxy
type ImplementsInterfaceWithInternalSubclass struct {
}

func NewImplementsInterfaceWithInternalSubclass() ImplementsInterfaceWithInternalSubclassIface {
	_init_.Initialize()
	self := ImplementsInterfaceWithInternalSubclass{}
	_jsii_.Create(
		"jsii-calc.ImplementsInterfaceWithInternalSubclass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *ImplementsInterfaceWithInternalSubclass) Visible() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"visible",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type ImplementsPrivateInterfaceIface interface {
	GetPrivate() interface{}
	SetPrivate(val interface{})
}

// Struct proxy
type ImplementsPrivateInterface struct {
	Private interface{} \`json:"private"\`
}

func (i *ImplementsPrivateInterface) GetPrivate() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"private",
		&returns,
	)
	return returns
}


func NewImplementsPrivateInterface() ImplementsPrivateInterfaceIface {
	_init_.Initialize()
	self := ImplementsPrivateInterface{}
	_jsii_.Create(
		"jsii-calc.ImplementsPrivateInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *ImplementsPrivateInterface) SetPrivate(val interface{}) {
	_jsii_.Set(
		i,
		"private",
		val,
	)
}

// ImplictBaseOfBaseIface is the public interface for the custom type ImplictBaseOfBase
type ImplictBaseOfBaseIface interface {
	GetFoo() scopejsiicalcbaseofbase.VeryIface
	GetBar() interface{}
	GetGoo() interface{}
}

// Struct proxy
type ImplictBaseOfBase struct {
	Foo scopejsiicalcbaseofbase.VeryIface \`json:"foo"\`
	Bar interface{} \`json:"bar"\`
	Goo interface{} \`json:"goo"\`
}

func (i *ImplictBaseOfBase) GetFoo() scopejsiicalcbaseofbase.VeryIface {
	var returns scopejsiicalcbaseofbase.VeryIface
	_jsii_.Get(
		i,
		"foo",
		&returns,
	)
	return returns
}

func (i *ImplictBaseOfBase) GetBar() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"bar",
		&returns,
	)
	return returns
}

func (i *ImplictBaseOfBase) GetGoo() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"goo",
		&returns,
	)
	return returns
}


// Class interface
type InbetweenClassIface interface {
	IPublicInterface2Iface
	Hello()
	Ciao() interface{}
}

// Struct proxy
type InbetweenClass struct {
}

func NewInbetweenClass() InbetweenClassIface {
	_init_.Initialize()
	self := InbetweenClass{}
	_jsii_.Create(
		"jsii-calc.InbetweenClass",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IPublicInterface2"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *InbetweenClass) Hello() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"hello",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *InbetweenClass) Ciao() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"ciao",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type InterfaceCollectionsIface interface {
}

// Verifies that collections of interfaces or structs are correctly handled.
// 
// See: https://github.com/aws/jsii/issues/1196
// Struct proxy
type InterfaceCollections struct {
}

func InterfaceCollections_ListOfInterfaces() []IBellIface {
	_init_.Initialize()
	var returns []IBellIface
	_jsii_.InvokeStatic(
		"jsii-calc.InterfaceCollections",
		"listOfInterfaces",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func InterfaceCollections_ListOfStructs() []StructAIface {
	_init_.Initialize()
	var returns []StructAIface
	_jsii_.InvokeStatic(
		"jsii-calc.InterfaceCollections",
		"listOfStructs",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func InterfaceCollections_MapOfInterfaces() map[string]IBellIface {
	_init_.Initialize()
	var returns map[string]IBellIface
	_jsii_.InvokeStatic(
		"jsii-calc.InterfaceCollections",
		"mapOfInterfaces",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func InterfaceCollections_MapOfStructs() map[string]StructAIface {
	_init_.Initialize()
	var returns map[string]StructAIface
	_jsii_.InvokeStatic(
		"jsii-calc.InterfaceCollections",
		"mapOfStructs",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type InterfacesMakerIface interface {
}

// We can return arrays of interfaces See aws/aws-cdk#2362.
// Struct proxy
type InterfacesMaker struct {
}

func InterfacesMaker_MakeInterfaces(count interface{}) []scopejsiicalclib.IDoublableIface {
	_init_.Initialize()
	var returns []scopejsiicalclib.IDoublableIface
	_jsii_.InvokeStatic(
		"jsii-calc.InterfacesMaker",
		"makeInterfaces",
		[]interface{}{count},
		true,
		&returns,
	)
	return returns
}

// Class interface
type IsomorphismIface interface {
	Myself() IsomorphismIface
}

// Checks the "same instance" isomorphism is preserved within the constructor.
// 
// Create a subclass of this, and assert that \`this.myself()\` actually returns
// \`this\` from within the constructor.
// Struct proxy
type Isomorphism struct {
}

func NewIsomorphism() IsomorphismIface {
	_init_.Initialize()
	self := Isomorphism{}
	_jsii_.Create(
		"jsii-calc.Isomorphism",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *Isomorphism) Myself() IsomorphismIface {
	var returns *Isomorphism
	_jsii_.Invoke(
		i,
		"myself",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

// Class interface
type Jsii417DerivedIface interface {
	GetHasRoot() interface{}
	GetProperty() interface{}
	Foo()
	Bar()
	Baz()
}

// Struct proxy
type Jsii417Derived struct {
	HasRoot interface{} \`json:"hasRoot"\`
	Property interface{} \`json:"property"\`
}

func (j *Jsii417Derived) GetHasRoot() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"hasRoot",
		&returns,
	)
	return returns
}

func (j *Jsii417Derived) GetProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"property",
		&returns,
	)
	return returns
}


func NewJsii417Derived(property interface{}) Jsii417DerivedIface {
	_init_.Initialize()
	self := Jsii417Derived{}
	_jsii_.Create(
		"jsii-calc.JSII417Derived",
		[]interface{}{property},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func Jsii417Derived_MakeInstance() Jsii417PublicBaseOfBaseIface {
	_init_.Initialize()
	var returns *Jsii417PublicBaseOfBase
	_jsii_.InvokeStatic(
		"jsii-calc.JSII417Derived",
		"makeInstance",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (j *Jsii417Derived) Foo() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"foo",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *Jsii417Derived) Bar() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"bar",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *Jsii417Derived) Baz() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"baz",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type Jsii417PublicBaseOfBaseIface interface {
	GetHasRoot() interface{}
	Foo()
}

// Struct proxy
type Jsii417PublicBaseOfBase struct {
	HasRoot interface{} \`json:"hasRoot"\`
}

func (j *Jsii417PublicBaseOfBase) GetHasRoot() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"hasRoot",
		&returns,
	)
	return returns
}


func NewJsii417PublicBaseOfBase() Jsii417PublicBaseOfBaseIface {
	_init_.Initialize()
	self := Jsii417PublicBaseOfBase{}
	_jsii_.Create(
		"jsii-calc.JSII417PublicBaseOfBase",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func Jsii417PublicBaseOfBase_MakeInstance() Jsii417PublicBaseOfBaseIface {
	_init_.Initialize()
	var returns *Jsii417PublicBaseOfBase
	_jsii_.InvokeStatic(
		"jsii-calc.JSII417PublicBaseOfBase",
		"makeInstance",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (j *Jsii417PublicBaseOfBase) Foo() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"foo",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type JsObjectLiteralForInterfaceIface interface {
	GiveMeFriendly() scopejsiicalclib.IFriendlyIface
	GiveMeFriendlyGenerator() IFriendlyRandomGeneratorIface
}

// Struct proxy
type JsObjectLiteralForInterface struct {
}

func NewJsObjectLiteralForInterface() JsObjectLiteralForInterfaceIface {
	_init_.Initialize()
	self := JsObjectLiteralForInterface{}
	_jsii_.Create(
		"jsii-calc.JSObjectLiteralForInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (j *JsObjectLiteralForInterface) GiveMeFriendly() scopejsiicalclib.IFriendlyIface {
	var returns *scopejsiicalclib.IFriendly
	_jsii_.Invoke(
		j,
		"giveMeFriendly",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

func (j *JsObjectLiteralForInterface) GiveMeFriendlyGenerator() IFriendlyRandomGeneratorIface {
	var returns *IFriendlyRandomGenerator
	_jsii_.Invoke(
		j,
		"giveMeFriendlyGenerator",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

// Class interface
type JsObjectLiteralToNativeIface interface {
	ReturnLiteral() JsObjectLiteralToNativeClassIface
}

// Struct proxy
type JsObjectLiteralToNative struct {
}

func NewJsObjectLiteralToNative() JsObjectLiteralToNativeIface {
	_init_.Initialize()
	self := JsObjectLiteralToNative{}
	_jsii_.Create(
		"jsii-calc.JSObjectLiteralToNative",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (j *JsObjectLiteralToNative) ReturnLiteral() JsObjectLiteralToNativeClassIface {
	var returns *JsObjectLiteralToNativeClass
	_jsii_.Invoke(
		j,
		"returnLiteral",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

// Class interface
type JsObjectLiteralToNativeClassIface interface {
	GetPropA() interface{}
	SetPropA(val interface{})
	GetPropB() interface{}
	SetPropB(val interface{})
}

// Struct proxy
type JsObjectLiteralToNativeClass struct {
	PropA interface{} \`json:"propA"\`
	PropB interface{} \`json:"propB"\`
}

func (j *JsObjectLiteralToNativeClass) GetPropA() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"propA",
		&returns,
	)
	return returns
}

func (j *JsObjectLiteralToNativeClass) GetPropB() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"propB",
		&returns,
	)
	return returns
}


func NewJsObjectLiteralToNativeClass() JsObjectLiteralToNativeClassIface {
	_init_.Initialize()
	self := JsObjectLiteralToNativeClass{}
	_jsii_.Create(
		"jsii-calc.JSObjectLiteralToNativeClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (j *JsObjectLiteralToNativeClass) SetPropA(val interface{}) {
	_jsii_.Set(
		j,
		"propA",
		val,
	)
}

func (j *JsObjectLiteralToNativeClass) SetPropB(val interface{}) {
	_jsii_.Set(
		j,
		"propB",
		val,
	)
}

// Class interface
type JavaReservedWordsIface interface {
	GetWhile() interface{}
	SetWhile(val interface{})
	Abstract()
	Assert()
	Boolean()
	Break()
	Byte()
	Case()
	Catch()
	Char()
	Class()
	Const()
	Continue()
	Default()
	Do()
	Double()
	Else()
	Enum()
	Extends()
	False()
	Final()
	Finally()
	Float()
	For()
	Goto()
	If()
	Implements()
	Import()
	Instanceof()
	Int()
	Interface()
	Long()
	Native()
	New()
	Null()
	Package()
	Private()
	Protected()
	Public()
	Return()
	Short()
	Static()
	Strictfp()
	Super()
	Switch()
	Synchronized()
	This()
	Throw()
	Throws()
	Transient()
	True()
	Try()
	Void()
	Volatile()
}

// Struct proxy
type JavaReservedWords struct {
	While interface{} \`json:"while"\`
}

func (j *JavaReservedWords) GetWhile() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"while",
		&returns,
	)
	return returns
}


func NewJavaReservedWords() JavaReservedWordsIface {
	_init_.Initialize()
	self := JavaReservedWords{}
	_jsii_.Create(
		"jsii-calc.JavaReservedWords",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (j *JavaReservedWords) SetWhile(val interface{}) {
	_jsii_.Set(
		j,
		"while",
		val,
	)
}

func (j *JavaReservedWords) Abstract() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"abstract",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Assert() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"assert",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Boolean() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"boolean",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Break() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"break",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Byte() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"byte",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Case() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"case",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Catch() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"catch",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Char() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"char",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Class() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"class",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Const() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"const",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Continue() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"continue",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Default() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"default",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Do() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"do",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Double() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"double",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Else() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"else",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Enum() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"enum",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Extends() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"extends",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) False() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"false",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Final() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"final",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Finally() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"finally",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Float() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"float",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) For() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"for",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Goto() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"goto",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) If() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"if",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Implements() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"implements",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Import() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"import",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Instanceof() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"instanceof",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Int() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"int",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Interface() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"interface",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Long() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"long",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Native() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"native",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) New() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"new",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Null() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"null",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Package() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"package",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Private() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"private",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Protected() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"protected",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Public() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"public",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Return() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"return",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Short() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"short",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Static() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"static",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Strictfp() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"strictfp",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Super() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"super",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Switch() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"switch",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Synchronized() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"synchronized",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) This() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"this",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Throw() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"throw",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Throws() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"throws",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Transient() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"transient",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) True() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"true",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Try() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"try",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Void() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"void",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *JavaReservedWords) Volatile() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"volatile",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type Jsii487DerivedIface interface {
	IJsii487External2Iface
	IJsii487ExternalIface
}

// Struct proxy
type Jsii487Derived struct {
}

func NewJsii487Derived() Jsii487DerivedIface {
	_init_.Initialize()
	self := Jsii487Derived{}
	_jsii_.Create(
		"jsii-calc.Jsii487Derived",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IJsii487External2", "jsii-calc.IJsii487External"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type Jsii496DerivedIface interface {
	IJsii496Iface
}

// Struct proxy
type Jsii496Derived struct {
}

func NewJsii496Derived() Jsii496DerivedIface {
	_init_.Initialize()
	self := Jsii496Derived{}
	_jsii_.Create(
		"jsii-calc.Jsii496Derived",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IJsii496"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type JsiiAgentIface interface {
}

// Host runtime version should be set via JSII_AGENT.
// Struct proxy
type JsiiAgent struct {
}

func NewJsiiAgent() JsiiAgentIface {
	_init_.Initialize()
	self := JsiiAgent{}
	_jsii_.Create(
		"jsii-calc.JsiiAgent",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func JsiiAgent_Value() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticGet(
		"jsii-calc.JsiiAgent",
		"value",
		&returns,
	)
	return returns
}

// Class interface
type JsonFormatterIface interface {
}

// Make sure structs are un-decorated on the way in.
// See: https://github.com/aws/aws-cdk/issues/5066
//
// Struct proxy
type JsonFormatter struct {
}

func JsonFormatter_AnyArray() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyArray",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyBooleanFalse() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyBooleanFalse",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyBooleanTrue() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyBooleanTrue",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyDate() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyDate",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyEmptyString() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyEmptyString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyFunction() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyFunction",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyHash() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyHash",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyNull() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyNull",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyNumber() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyNumber",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyRef() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyRef",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyString() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyUndefined() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyUndefined",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyZero() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyZero",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_Stringify(value interface{}) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"stringify",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

// Class interface
type LevelOneIface interface {
	GetProps() LevelOnePropsIface
}

// Validates that nested classes get correct code generation for the occasional forward reference.
// Struct proxy
type LevelOne struct {
	Props LevelOnePropsIface \`json:"props"\`
}

func (l *LevelOne) GetProps() LevelOnePropsIface {
	var returns LevelOnePropsIface
	_jsii_.Get(
		l,
		"props",
		&returns,
	)
	return returns
}


func NewLevelOne(props LevelOnePropsIface) LevelOneIface {
	_init_.Initialize()
	self := LevelOne{}
	_jsii_.Create(
		"jsii-calc.LevelOne",
		[]interface{}{props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// PropBooleanValueIface is the public interface for the custom type PropBooleanValue
type PropBooleanValueIface interface {
	GetValue() interface{}
}

// Struct proxy
type PropBooleanValue struct {
	Value interface{} \`json:"value"\`
}

func (p *PropBooleanValue) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		p,
		"value",
		&returns,
	)
	return returns
}


// PropPropertyIface is the public interface for the custom type PropProperty
type PropPropertyIface interface {
	GetProp() PropBooleanValueIface
}

// Struct proxy
type PropProperty struct {
	Prop PropBooleanValueIface \`json:"prop"\`
}

func (p *PropProperty) GetProp() PropBooleanValueIface {
	var returns PropBooleanValueIface
	_jsii_.Get(
		p,
		"prop",
		&returns,
	)
	return returns
}


// LevelOnePropsIface is the public interface for the custom type LevelOneProps
type LevelOnePropsIface interface {
	GetProp() PropPropertyIface
}

// Struct proxy
type LevelOneProps struct {
	Prop PropPropertyIface \`json:"prop"\`
}

func (l *LevelOneProps) GetProp() PropPropertyIface {
	var returns PropPropertyIface
	_jsii_.Get(
		l,
		"prop",
		&returns,
	)
	return returns
}


// LoadBalancedFargateServicePropsIface is the public interface for the custom type LoadBalancedFargateServiceProps
type LoadBalancedFargateServicePropsIface interface {
	GetContainerPort() interface{}
	GetCpu() interface{}
	GetMemoryMiB() interface{}
	GetPublicLoadBalancer() interface{}
	GetPublicTasks() interface{}
}

// jsii#298: show default values in sphinx documentation, and respect newlines.
// Struct proxy
type LoadBalancedFargateServiceProps struct {
	// The container port of the application load balancer attached to your Fargate service.
	// 
	// Corresponds to container port mapping.
	ContainerPort interface{} \`json:"containerPort"\`
	// The number of cpu units used by the task.
	// 
	// Valid values, which determines your range of valid values for the memory parameter:
	// 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
	// 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
	// 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
	// 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
	// 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
	// 
	// This default is set in the underlying FargateTaskDefinition construct.
	Cpu interface{} \`json:"cpu"\`
	// The amount (in MiB) of memory used by the task.
	// 
	// This field is required and you must use one of the following values, which determines your range of valid values
	// for the cpu parameter:
	// 
	// 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
	// 
	// 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
	// 
	// 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
	// 
	// Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
	// 
	// Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
	// 
	// This default is set in the underlying FargateTaskDefinition construct.
	MemoryMiB interface{} \`json:"memoryMiB"\`
	// Determines whether the Application Load Balancer will be internet-facing.
	PublicLoadBalancer interface{} \`json:"publicLoadBalancer"\`
	// Determines whether your Fargate Service will be assigned a public IP address.
	PublicTasks interface{} \`json:"publicTasks"\`
}

func (l *LoadBalancedFargateServiceProps) GetContainerPort() interface{} {
	var returns interface{}
	_jsii_.Get(
		l,
		"containerPort",
		&returns,
	)
	return returns
}

func (l *LoadBalancedFargateServiceProps) GetCpu() interface{} {
	var returns interface{}
	_jsii_.Get(
		l,
		"cpu",
		&returns,
	)
	return returns
}

func (l *LoadBalancedFargateServiceProps) GetMemoryMiB() interface{} {
	var returns interface{}
	_jsii_.Get(
		l,
		"memoryMiB",
		&returns,
	)
	return returns
}

func (l *LoadBalancedFargateServiceProps) GetPublicLoadBalancer() interface{} {
	var returns interface{}
	_jsii_.Get(
		l,
		"publicLoadBalancer",
		&returns,
	)
	return returns
}

func (l *LoadBalancedFargateServiceProps) GetPublicTasks() interface{} {
	var returns interface{}
	_jsii_.Get(
		l,
		"publicTasks",
		&returns,
	)
	return returns
}


// Class interface
type MethodNamedPropertyIface interface {
	GetElite() interface{}
	Property() interface{}
}

// Struct proxy
type MethodNamedProperty struct {
	Elite interface{} \`json:"elite"\`
}

func (m *MethodNamedProperty) GetElite() interface{} {
	var returns interface{}
	_jsii_.Get(
		m,
		"elite",
		&returns,
	)
	return returns
}


func NewMethodNamedProperty() MethodNamedPropertyIface {
	_init_.Initialize()
	self := MethodNamedProperty{}
	_jsii_.Create(
		"jsii-calc.MethodNamedProperty",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (m *MethodNamedProperty) Property() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		m,
		"property",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type MultiplyIface interface {
	scopejsiicalclib.IFriendlyIface
	IFriendlierIface
	scopejsiicalclib.IFriendlyIface
	IRandomNumberGeneratorIface
	GetValue() interface{}
	GetLhs() scopejsiicalclib.NumericValueIface
	GetRhs() scopejsiicalclib.NumericValueIface
	TypeName() interface{}
	ToString() interface{}
	Hello() interface{}
	Farewell() interface{}
	Goodbye() interface{}
	Next() interface{}
}

// The "*" binary operation.
// Struct proxy
type Multiply struct {
	// (deprecated) The value.
	Value interface{} \`json:"value"\`
	// Left-hand side operand.
	Lhs scopejsiicalclib.NumericValueIface \`json:"lhs"\`
	// Right-hand side operand.
	Rhs scopejsiicalclib.NumericValueIface \`json:"rhs"\`
}

func (m *Multiply) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		m,
		"value",
		&returns,
	)
	return returns
}

func (m *Multiply) GetLhs() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		m,
		"lhs",
		&returns,
	)
	return returns
}

func (m *Multiply) GetRhs() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		m,
		"rhs",
		&returns,
	)
	return returns
}


// Creates a BinaryOperation.
func NewMultiply(lhs scopejsiicalclib.NumericValueIface, rhs scopejsiicalclib.NumericValueIface) MultiplyIface {
	_init_.Initialize()
	self := Multiply{}
	_jsii_.Create(
		"jsii-calc.Multiply",
		[]interface{}{lhs, rhs},
		[]_jsii_.FQN{"jsii-calc.IFriendlier", "jsii-calc.IRandomNumberGenerator"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (m *Multiply) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		m,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (m *Multiply) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		m,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (m *Multiply) Hello() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		m,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (m *Multiply) Farewell() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		m,
		"farewell",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (m *Multiply) Goodbye() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		m,
		"goodbye",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (m *Multiply) Next() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		m,
		"next",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type NegateIface interface {
	IFriendlierIface
	scopejsiicalclib.IFriendlyIface
	GetValue() interface{}
	GetOperand() scopejsiicalclib.NumericValueIface
	TypeName() interface{}
	ToString() interface{}
	Farewell() interface{}
	Goodbye() interface{}
	Hello() interface{}
}

// The negation operation ("-value").
// Struct proxy
type Negate struct {
	// (deprecated) The value.
	Value interface{} \`json:"value"\`
	Operand scopejsiicalclib.NumericValueIface \`json:"operand"\`
}

func (n *Negate) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		n,
		"value",
		&returns,
	)
	return returns
}

func (n *Negate) GetOperand() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		n,
		"operand",
		&returns,
	)
	return returns
}


func NewNegate(operand scopejsiicalclib.NumericValueIface) NegateIface {
	_init_.Initialize()
	self := Negate{}
	_jsii_.Create(
		"jsii-calc.Negate",
		[]interface{}{operand},
		[]_jsii_.FQN{"jsii-calc.IFriendlier"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *Negate) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (n *Negate) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (n *Negate) Farewell() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"farewell",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (n *Negate) Goodbye() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"goodbye",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (n *Negate) Hello() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type NestedClassInstanceIface interface {
}

// Struct proxy
type NestedClassInstance struct {
}

func NestedClassInstance_MakeInstance() submodule.NestedClassIface {
	_init_.Initialize()
	var returns *submodule.NestedClass
	_jsii_.InvokeStatic(
		"jsii-calc.NestedClassInstance",
		"makeInstance",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// NestedStructIface is the public interface for the custom type NestedStruct
type NestedStructIface interface {
	GetNumberProp() interface{}
}

// Struct proxy
type NestedStruct struct {
	// When provided, must be > 0.
	NumberProp interface{} \`json:"numberProp"\`
}

func (n *NestedStruct) GetNumberProp() interface{} {
	var returns interface{}
	_jsii_.Get(
		n,
		"numberProp",
		&returns,
	)
	return returns
}


// Class interface
type NodeStandardLibraryIface interface {
	GetOsPlatform() interface{}
	CryptoSha256() interface{}
	FsReadFile() interface{}
	FsReadFileSync() interface{}
}

// Test fixture to verify that jsii modules can use the node standard library.
// Struct proxy
type NodeStandardLibrary struct {
	// Returns the current os.platform() from the "os" node module.
	OsPlatform interface{} \`json:"osPlatform"\`
}

func (n *NodeStandardLibrary) GetOsPlatform() interface{} {
	var returns interface{}
	_jsii_.Get(
		n,
		"osPlatform",
		&returns,
	)
	return returns
}


func NewNodeStandardLibrary() NodeStandardLibraryIface {
	_init_.Initialize()
	self := NodeStandardLibrary{}
	_jsii_.Create(
		"jsii-calc.NodeStandardLibrary",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *NodeStandardLibrary) CryptoSha256() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"cryptoSha256",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (n *NodeStandardLibrary) FsReadFile() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"fsReadFile",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (n *NodeStandardLibrary) FsReadFileSync() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"fsReadFileSync",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type NullShouldBeTreatedAsUndefinedIface interface {
	GetChangeMeToUndefined() interface{}
	SetChangeMeToUndefined(val interface{})
	GiveMeUndefined(value interface{})
	GiveMeUndefinedInsideAnObject(input NullShouldBeTreatedAsUndefinedDataIface)
	VerifyPropertyIsUndefined()
}

// jsii#282, aws-cdk#157: null should be treated as "undefined".
// Struct proxy
type NullShouldBeTreatedAsUndefined struct {
	ChangeMeToUndefined interface{} \`json:"changeMeToUndefined"\`
}

func (n *NullShouldBeTreatedAsUndefined) GetChangeMeToUndefined() interface{} {
	var returns interface{}
	_jsii_.Get(
		n,
		"changeMeToUndefined",
		&returns,
	)
	return returns
}


func NewNullShouldBeTreatedAsUndefined(_param1 interface{}, optional interface{}) NullShouldBeTreatedAsUndefinedIface {
	_init_.Initialize()
	self := NullShouldBeTreatedAsUndefined{}
	_jsii_.Create(
		"jsii-calc.NullShouldBeTreatedAsUndefined",
		[]interface{}{_param1, optional},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *NullShouldBeTreatedAsUndefined) SetChangeMeToUndefined(val interface{}) {
	_jsii_.Set(
		n,
		"changeMeToUndefined",
		val,
	)
}

func (n *NullShouldBeTreatedAsUndefined) GiveMeUndefined(value interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"giveMeUndefined",
		[]interface{}{value},
		false,
		&returns,
	)
}

func (n *NullShouldBeTreatedAsUndefined) GiveMeUndefinedInsideAnObject(input NullShouldBeTreatedAsUndefinedDataIface) {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"giveMeUndefinedInsideAnObject",
		[]interface{}{input},
		false,
		&returns,
	)
}

func (n *NullShouldBeTreatedAsUndefined) VerifyPropertyIsUndefined() {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"verifyPropertyIsUndefined",
		[]interface{}{},
		false,
		&returns,
	)
}

// NullShouldBeTreatedAsUndefinedDataIface is the public interface for the custom type NullShouldBeTreatedAsUndefinedData
type NullShouldBeTreatedAsUndefinedDataIface interface {
	GetArrayWithThreeElementsAndUndefinedAsSecondArgument() []interface{}
	GetThisShouldBeUndefined() interface{}
}

// Struct proxy
type NullShouldBeTreatedAsUndefinedData struct {
	ArrayWithThreeElementsAndUndefinedAsSecondArgument []interface{} \`json:"arrayWithThreeElementsAndUndefinedAsSecondArgument"\`
	ThisShouldBeUndefined interface{} \`json:"thisShouldBeUndefined"\`
}

func (n *NullShouldBeTreatedAsUndefinedData) GetArrayWithThreeElementsAndUndefinedAsSecondArgument() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		n,
		"arrayWithThreeElementsAndUndefinedAsSecondArgument",
		&returns,
	)
	return returns
}

func (n *NullShouldBeTreatedAsUndefinedData) GetThisShouldBeUndefined() interface{} {
	var returns interface{}
	_jsii_.Get(
		n,
		"thisShouldBeUndefined",
		&returns,
	)
	return returns
}


// Class interface
type NumberGeneratorIface interface {
	GetGenerator() IRandomNumberGeneratorIface
	SetGenerator(val IRandomNumberGeneratorIface)
	IsSameGenerator(gen IRandomNumberGeneratorIface) interface{}
	NextTimes100() interface{}
}

// This allows us to test that a reference can be stored for objects that implement interfaces.
// Struct proxy
type NumberGenerator struct {
	Generator IRandomNumberGeneratorIface \`json:"generator"\`
}

func (n *NumberGenerator) GetGenerator() IRandomNumberGeneratorIface {
	var returns IRandomNumberGeneratorIface
	_jsii_.Get(
		n,
		"generator",
		&returns,
	)
	return returns
}


func NewNumberGenerator(generator IRandomNumberGeneratorIface) NumberGeneratorIface {
	_init_.Initialize()
	self := NumberGenerator{}
	_jsii_.Create(
		"jsii-calc.NumberGenerator",
		[]interface{}{generator},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *NumberGenerator) SetGenerator(val IRandomNumberGeneratorIface) {
	_jsii_.Set(
		n,
		"generator",
		val,
	)
}

func (n *NumberGenerator) IsSameGenerator(gen IRandomNumberGeneratorIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"isSameGenerator",
		[]interface{}{gen},
		true,
		&returns,
	)
	return returns
}

func (n *NumberGenerator) NextTimes100() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"nextTimes100",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type ObjectRefsInCollectionsIface interface {
	SumFromArray(values []scopejsiicalclib.NumericValueIface) interface{}
	SumFromMap(values map[string]scopejsiicalclib.NumericValueIface) interface{}
}

// Verify that object references can be passed inside collections.
// Struct proxy
type ObjectRefsInCollections struct {
}

func NewObjectRefsInCollections() ObjectRefsInCollectionsIface {
	_init_.Initialize()
	self := ObjectRefsInCollections{}
	_jsii_.Create(
		"jsii-calc.ObjectRefsInCollections",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *ObjectRefsInCollections) SumFromArray(values []scopejsiicalclib.NumericValueIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"sumFromArray",
		[]interface{}{values},
		true,
		&returns,
	)
	return returns
}

func (o *ObjectRefsInCollections) SumFromMap(values map[string]scopejsiicalclib.NumericValueIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"sumFromMap",
		[]interface{}{values},
		true,
		&returns,
	)
	return returns
}

// Class interface
type ObjectWithPropertyProviderIface interface {
}

// Struct proxy
type ObjectWithPropertyProvider struct {
}

func ObjectWithPropertyProvider_Provide() IObjectWithPropertyIface {
	_init_.Initialize()
	var returns *IObjectWithProperty
	_jsii_.InvokeStatic(
		"jsii-calc.ObjectWithPropertyProvider",
		"provide",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type OldIface interface {
	DoAThing()
}

// Old class.
// Deprecated: Use the new class
// Struct proxy
type Old struct {
}

func NewOld() OldIface {
	_init_.Initialize()
	self := Old{}
	_jsii_.Create(
		"jsii-calc.Old",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *Old) DoAThing() {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"doAThing",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type OptionalArgumentInvokerIface interface {
	InvokeWithOptional()
	InvokeWithoutOptional()
}

// Struct proxy
type OptionalArgumentInvoker struct {
}

func NewOptionalArgumentInvoker(delegate IInterfaceWithOptionalMethodArgumentsIface) OptionalArgumentInvokerIface {
	_init_.Initialize()
	self := OptionalArgumentInvoker{}
	_jsii_.Create(
		"jsii-calc.OptionalArgumentInvoker",
		[]interface{}{delegate},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *OptionalArgumentInvoker) InvokeWithOptional() {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"invokeWithOptional",
		[]interface{}{},
		false,
		&returns,
	)
}

func (o *OptionalArgumentInvoker) InvokeWithoutOptional() {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"invokeWithoutOptional",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type OptionalConstructorArgumentIface interface {
	GetArg1() interface{}
	GetArg2() interface{}
	GetArg3() interface{}
}

// Struct proxy
type OptionalConstructorArgument struct {
	Arg1 interface{} \`json:"arg1"\`
	Arg2 interface{} \`json:"arg2"\`
	Arg3 interface{} \`json:"arg3"\`
}

func (o *OptionalConstructorArgument) GetArg1() interface{} {
	var returns interface{}
	_jsii_.Get(
		o,
		"arg1",
		&returns,
	)
	return returns
}

func (o *OptionalConstructorArgument) GetArg2() interface{} {
	var returns interface{}
	_jsii_.Get(
		o,
		"arg2",
		&returns,
	)
	return returns
}

func (o *OptionalConstructorArgument) GetArg3() interface{} {
	var returns interface{}
	_jsii_.Get(
		o,
		"arg3",
		&returns,
	)
	return returns
}


func NewOptionalConstructorArgument(arg1 interface{}, arg2 interface{}, arg3 interface{}) OptionalConstructorArgumentIface {
	_init_.Initialize()
	self := OptionalConstructorArgument{}
	_jsii_.Create(
		"jsii-calc.OptionalConstructorArgument",
		[]interface{}{arg1, arg2, arg3},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// OptionalStructIface is the public interface for the custom type OptionalStruct
type OptionalStructIface interface {
	GetField() interface{}
}

// Struct proxy
type OptionalStruct struct {
	Field interface{} \`json:"field"\`
}

func (o *OptionalStruct) GetField() interface{} {
	var returns interface{}
	_jsii_.Get(
		o,
		"field",
		&returns,
	)
	return returns
}


// Class interface
type OptionalStructConsumerIface interface {
	GetParameterWasUndefined() interface{}
	GetFieldValue() interface{}
}

// Struct proxy
type OptionalStructConsumer struct {
	ParameterWasUndefined interface{} \`json:"parameterWasUndefined"\`
	FieldValue interface{} \`json:"fieldValue"\`
}

func (o *OptionalStructConsumer) GetParameterWasUndefined() interface{} {
	var returns interface{}
	_jsii_.Get(
		o,
		"parameterWasUndefined",
		&returns,
	)
	return returns
}

func (o *OptionalStructConsumer) GetFieldValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		o,
		"fieldValue",
		&returns,
	)
	return returns
}


func NewOptionalStructConsumer(optionalStruct OptionalStructIface) OptionalStructConsumerIface {
	_init_.Initialize()
	self := OptionalStructConsumer{}
	_jsii_.Create(
		"jsii-calc.OptionalStructConsumer",
		[]interface{}{optionalStruct},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type OverridableProtectedMemberIface interface {
	GetOverrideReadOnly() interface{}
	GetOverrideReadWrite() interface{}
	OverrideMe() interface{}
	SwitchModes()
	ValueFromProtected() interface{}
}

// See: https://github.com/aws/jsii/issues/903
//
// Struct proxy
type OverridableProtectedMember struct {
	OverrideReadOnly interface{} \`json:"overrideReadOnly"\`
	OverrideReadWrite interface{} \`json:"overrideReadWrite"\`
}

func (o *OverridableProtectedMember) GetOverrideReadOnly() interface{} {
	var returns interface{}
	_jsii_.Get(
		o,
		"overrideReadOnly",
		&returns,
	)
	return returns
}

func (o *OverridableProtectedMember) GetOverrideReadWrite() interface{} {
	var returns interface{}
	_jsii_.Get(
		o,
		"overrideReadWrite",
		&returns,
	)
	return returns
}


func NewOverridableProtectedMember() OverridableProtectedMemberIface {
	_init_.Initialize()
	self := OverridableProtectedMember{}
	_jsii_.Create(
		"jsii-calc.OverridableProtectedMember",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *OverridableProtectedMember) SetOverrideReadWrite(val interface{}) {
	_jsii_.Set(
		o,
		"overrideReadWrite",
		val,
	)
}

func (o *OverridableProtectedMember) OverrideMe() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"overrideMe",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (o *OverridableProtectedMember) SwitchModes() {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"switchModes",
		[]interface{}{},
		false,
		&returns,
	)
}

func (o *OverridableProtectedMember) ValueFromProtected() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"valueFromProtected",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type OverrideReturnsObjectIface interface {
	Test(obj IReturnsNumberIface) interface{}
}

// Struct proxy
type OverrideReturnsObject struct {
}

func NewOverrideReturnsObject() OverrideReturnsObjectIface {
	_init_.Initialize()
	self := OverrideReturnsObject{}
	_jsii_.Create(
		"jsii-calc.OverrideReturnsObject",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *OverrideReturnsObject) Test(obj IReturnsNumberIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"test",
		[]interface{}{obj},
		true,
		&returns,
	)
	return returns
}

// ParentStruct982Iface is the public interface for the custom type ParentStruct982
type ParentStruct982Iface interface {
	GetFoo() interface{}
}

// https://github.com/aws/jsii/issues/982.
// Struct proxy
type ParentStruct982 struct {
	Foo interface{} \`json:"foo"\`
}

func (p *ParentStruct982) GetFoo() interface{} {
	var returns interface{}
	_jsii_.Get(
		p,
		"foo",
		&returns,
	)
	return returns
}


// Class interface
type PartiallyInitializedThisConsumerIface interface {
	ConsumePartiallyInitializedThis(obj ConstructorPassesThisOutIface, dt interface{}, ev AllTypesEnum) interface{}
}

// Struct proxy
type PartiallyInitializedThisConsumer struct {
}

func NewPartiallyInitializedThisConsumer() PartiallyInitializedThisConsumerIface {
	_init_.Initialize()
	self := PartiallyInitializedThisConsumer{}
	_jsii_.Create(
		"jsii-calc.PartiallyInitializedThisConsumer",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (p *PartiallyInitializedThisConsumer) ConsumePartiallyInitializedThis(obj ConstructorPassesThisOutIface, dt interface{}, ev AllTypesEnum) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"consumePartiallyInitializedThis",
		[]interface{}{obj, dt, ev},
		true,
		&returns,
	)
	return returns
}

// Class interface
type PolymorphismIface interface {
	SayHello(friendly scopejsiicalclib.IFriendlyIface) interface{}
}

// Struct proxy
type Polymorphism struct {
}

func NewPolymorphism() PolymorphismIface {
	_init_.Initialize()
	self := Polymorphism{}
	_jsii_.Create(
		"jsii-calc.Polymorphism",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (p *Polymorphism) SayHello(friendly scopejsiicalclib.IFriendlyIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"sayHello",
		[]interface{}{friendly},
		true,
		&returns,
	)
	return returns
}

// Class interface
type PowerIface interface {
	GetValue() interface{}
	GetExpression() scopejsiicalclib.NumericValueIface
	GetDecorationPostfixes() []interface{}
	SetDecorationPostfixes(val []interface{})
	GetDecorationPrefixes() []interface{}
	SetDecorationPrefixes(val []interface{})
	GetStringStyle() composition.CompositionStringStyle
	SetStringStyle(val composition.CompositionStringStyle)
	GetBase() scopejsiicalclib.NumericValueIface
	GetPow() scopejsiicalclib.NumericValueIface
	TypeName() interface{}
	ToString() interface{}
}

// The power operation.
// Struct proxy
type Power struct {
	// (deprecated) The value.
	Value interface{} \`json:"value"\`
	// The expression that this operation consists of.
	// 
	// Must be implemented by derived classes.
	Expression scopejsiicalclib.NumericValueIface \`json:"expression"\`
	// A set of postfixes to include in a decorated .toString().
	DecorationPostfixes []interface{} \`json:"decorationPostfixes"\`
	// A set of prefixes to include in a decorated .toString().
	DecorationPrefixes []interface{} \`json:"decorationPrefixes"\`
	// The .toString() style.
	StringStyle composition.CompositionStringStyle \`json:"stringStyle"\`
	// The base of the power.
	Base scopejsiicalclib.NumericValueIface \`json:"base"\`
	// The number of times to multiply.
	Pow scopejsiicalclib.NumericValueIface \`json:"pow"\`
}

func (p *Power) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		p,
		"value",
		&returns,
	)
	return returns
}

func (p *Power) GetExpression() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		p,
		"expression",
		&returns,
	)
	return returns
}

func (p *Power) GetDecorationPostfixes() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		p,
		"decorationPostfixes",
		&returns,
	)
	return returns
}

func (p *Power) GetDecorationPrefixes() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		p,
		"decorationPrefixes",
		&returns,
	)
	return returns
}

func (p *Power) GetStringStyle() composition.CompositionStringStyle {
	var returns composition.CompositionStringStyle
	_jsii_.Get(
		p,
		"stringStyle",
		&returns,
	)
	return returns
}

func (p *Power) GetBase() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		p,
		"base",
		&returns,
	)
	return returns
}

func (p *Power) GetPow() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		p,
		"pow",
		&returns,
	)
	return returns
}


// Creates a Power operation.
func NewPower(base scopejsiicalclib.NumericValueIface, pow scopejsiicalclib.NumericValueIface) PowerIface {
	_init_.Initialize()
	self := Power{}
	_jsii_.Create(
		"jsii-calc.Power",
		[]interface{}{base, pow},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (p *Power) SetDecorationPostfixes(val []interface{}) {
	_jsii_.Set(
		p,
		"decorationPostfixes",
		val,
	)
}

func (p *Power) SetDecorationPrefixes(val []interface{}) {
	_jsii_.Set(
		p,
		"decorationPrefixes",
		val,
	)
}

func (p *Power) SetStringStyle(val composition.CompositionStringStyle) {
	_jsii_.Set(
		p,
		"stringStyle",
		val,
	)
}

func (p *Power) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (p *Power) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type PropertyNamedPropertyIface interface {
	GetProperty() interface{}
	GetYetAnoterOne() interface{}
}

// Reproduction for https://github.com/aws/jsii/issues/1113 Where a method or property named "property" would result in impossible to load Python code.
// Struct proxy
type PropertyNamedProperty struct {
	Property interface{} \`json:"property"\`
	YetAnoterOne interface{} \`json:"yetAnoterOne"\`
}

func (p *PropertyNamedProperty) GetProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		p,
		"property",
		&returns,
	)
	return returns
}

func (p *PropertyNamedProperty) GetYetAnoterOne() interface{} {
	var returns interface{}
	_jsii_.Get(
		p,
		"yetAnoterOne",
		&returns,
	)
	return returns
}


func NewPropertyNamedProperty() PropertyNamedPropertyIface {
	_init_.Initialize()
	self := PropertyNamedProperty{}
	_jsii_.Create(
		"jsii-calc.PropertyNamedProperty",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type PublicClassIface interface {
	Hello()
}

// Struct proxy
type PublicClass struct {
}

func NewPublicClass() PublicClassIface {
	_init_.Initialize()
	self := PublicClass{}
	_jsii_.Create(
		"jsii-calc.PublicClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (p *PublicClass) Hello() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"hello",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type PythonReservedWordsIface interface {
	And()
	As()
	Assert()
	Async()
	Await()
	Break()
	Class()
	Continue()
	Def()
	Del()
	Elif()
	Else()
	Except()
	Finally()
	For()
	From()
	Global()
	If()
	Import()
	In()
	Is()
	Lambda()
	Nonlocal()
	Not()
	Or()
	Pass()
	Raise()
	Return()
	Try()
	While()
	With()
	Yield()
}

// Struct proxy
type PythonReservedWords struct {
}

func NewPythonReservedWords() PythonReservedWordsIface {
	_init_.Initialize()
	self := PythonReservedWords{}
	_jsii_.Create(
		"jsii-calc.PythonReservedWords",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (p *PythonReservedWords) And() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"and",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) As() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"as",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Assert() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"assert",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Async() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"async",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Await() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"await",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Break() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"break",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Class() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"class",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Continue() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"continue",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Def() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"def",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Del() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"del",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Elif() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"elif",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Else() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"else",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Except() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"except",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Finally() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"finally",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) For() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"for",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) From() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"from",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Global() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"global",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) If() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"if",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Import() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"import",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) In() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"in",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Is() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"is",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Lambda() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"lambda",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Nonlocal() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"nonlocal",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Not() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"not",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Or() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"or",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Pass() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"pass",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Raise() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"raise",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Return() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"return",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Try() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"try",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) While() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"while",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) With() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"with",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *PythonReservedWords) Yield() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"yield",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type ReferenceEnumFromScopedPackageIface interface {
	GetFoo() scopejsiicalclib.EnumFromScopedModule
	SetFoo(val scopejsiicalclib.EnumFromScopedModule)
	LoadFoo() scopejsiicalclib.EnumFromScopedModule
	SaveFoo(value scopejsiicalclib.EnumFromScopedModule)
}

// See awslabs/jsii#138.
// Struct proxy
type ReferenceEnumFromScopedPackage struct {
	Foo scopejsiicalclib.EnumFromScopedModule \`json:"foo"\`
}

func (r *ReferenceEnumFromScopedPackage) GetFoo() scopejsiicalclib.EnumFromScopedModule {
	var returns scopejsiicalclib.EnumFromScopedModule
	_jsii_.Get(
		r,
		"foo",
		&returns,
	)
	return returns
}


func NewReferenceEnumFromScopedPackage() ReferenceEnumFromScopedPackageIface {
	_init_.Initialize()
	self := ReferenceEnumFromScopedPackage{}
	_jsii_.Create(
		"jsii-calc.ReferenceEnumFromScopedPackage",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (r *ReferenceEnumFromScopedPackage) SetFoo(val scopejsiicalclib.EnumFromScopedModule) {
	_jsii_.Set(
		r,
		"foo",
		val,
	)
}

func (r *ReferenceEnumFromScopedPackage) LoadFoo() scopejsiicalclib.EnumFromScopedModule {
	var returns scopejsiicalclib.EnumFromScopedModule
	_jsii_.Invoke(
		r,
		"loadFoo",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (r *ReferenceEnumFromScopedPackage) SaveFoo(value scopejsiicalclib.EnumFromScopedModule) {
	var returns interface{}
	_jsii_.Invoke(
		r,
		"saveFoo",
		[]interface{}{value},
		false,
		&returns,
	)
}

// Class interface
type ReturnsPrivateImplementationOfInterfaceIface interface {
	GetPrivateImplementation() IPrivatelyImplementedIface
}

// Helps ensure the JSII kernel & runtime cooperate correctly when an un-exported instance of a class is returned with a declared type that is an exported interface, and the instance inherits from an exported class.
//
// Returns: an instance of an un-exported class that extends \`ExportedBaseClass\`, declared as \`IPrivatelyImplemented\`.
// See: https://github.com/aws/jsii/issues/320
//
// Struct proxy
type ReturnsPrivateImplementationOfInterface struct {
	PrivateImplementation IPrivatelyImplementedIface \`json:"privateImplementation"\`
}

func (r *ReturnsPrivateImplementationOfInterface) GetPrivateImplementation() IPrivatelyImplementedIface {
	var returns IPrivatelyImplementedIface
	_jsii_.Get(
		r,
		"privateImplementation",
		&returns,
	)
	return returns
}


func NewReturnsPrivateImplementationOfInterface() ReturnsPrivateImplementationOfInterfaceIface {
	_init_.Initialize()
	self := ReturnsPrivateImplementationOfInterface{}
	_jsii_.Create(
		"jsii-calc.ReturnsPrivateImplementationOfInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// RootStructIface is the public interface for the custom type RootStruct
type RootStructIface interface {
	GetStringProp() interface{}
	GetNestedStruct() NestedStructIface
}

// This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.
// 
// This is cheating with the (current) declared types, but this is the "more
// idiomatic" way for Pythonists.
// Struct proxy
type RootStruct struct {
	// May not be empty.
	StringProp interface{} \`json:"stringProp"\`
	NestedStruct NestedStructIface \`json:"nestedStruct"\`
}

func (r *RootStruct) GetStringProp() interface{} {
	var returns interface{}
	_jsii_.Get(
		r,
		"stringProp",
		&returns,
	)
	return returns
}

func (r *RootStruct) GetNestedStruct() NestedStructIface {
	var returns NestedStructIface
	_jsii_.Get(
		r,
		"nestedStruct",
		&returns,
	)
	return returns
}


// Class interface
type RootStructValidatorIface interface {
}

// Struct proxy
type RootStructValidator struct {
}

func RootStructValidator_Validate(struct_ RootStructIface) {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.RootStructValidator",
		"validate",
		[]interface{}{struct_},
		false,
		&returns,
	)
}

// Class interface
type RuntimeTypeCheckingIface interface {
	MethodWithDefaultedArguments(arg1 interface{}, arg2 interface{}, arg3 interface{})
	MethodWithOptionalAnyArgument(arg interface{})
	MethodWithOptionalArguments(arg1 interface{}, arg2 interface{}, arg3 interface{})
}

// Struct proxy
type RuntimeTypeChecking struct {
}

func NewRuntimeTypeChecking() RuntimeTypeCheckingIface {
	_init_.Initialize()
	self := RuntimeTypeChecking{}
	_jsii_.Create(
		"jsii-calc.RuntimeTypeChecking",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (r *RuntimeTypeChecking) MethodWithDefaultedArguments(arg1 interface{}, arg2 interface{}, arg3 interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		r,
		"methodWithDefaultedArguments",
		[]interface{}{arg1, arg2, arg3},
		false,
		&returns,
	)
}

func (r *RuntimeTypeChecking) MethodWithOptionalAnyArgument(arg interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		r,
		"methodWithOptionalAnyArgument",
		[]interface{}{arg},
		false,
		&returns,
	)
}

func (r *RuntimeTypeChecking) MethodWithOptionalArguments(arg1 interface{}, arg2 interface{}, arg3 interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		r,
		"methodWithOptionalArguments",
		[]interface{}{arg1, arg2, arg3},
		false,
		&returns,
	)
}

// SecondLevelStructIface is the public interface for the custom type SecondLevelStruct
type SecondLevelStructIface interface {
	GetDeeperRequiredProp() interface{}
	GetDeeperOptionalProp() interface{}
}

// Struct proxy
type SecondLevelStruct struct {
	// It's long and required.
	DeeperRequiredProp interface{} \`json:"deeperRequiredProp"\`
	// It's long, but you'll almost never pass it.
	DeeperOptionalProp interface{} \`json:"deeperOptionalProp"\`
}

func (s *SecondLevelStruct) GetDeeperRequiredProp() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"deeperRequiredProp",
		&returns,
	)
	return returns
}

func (s *SecondLevelStruct) GetDeeperOptionalProp() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"deeperOptionalProp",
		&returns,
	)
	return returns
}


// Class interface
type SingleInstanceTwoTypesIface interface {
	Interface1() InbetweenClassIface
	Interface2() IPublicInterfaceIface
}

// Test that a single instance can be returned under two different FQNs.
// 
// JSII clients can instantiate 2 different strongly-typed wrappers for the same
// object. Unfortunately, this will break object equality, but if we didn't do
// this it would break runtime type checks in the JVM or CLR.
// Struct proxy
type SingleInstanceTwoTypes struct {
}

func NewSingleInstanceTwoTypes() SingleInstanceTwoTypesIface {
	_init_.Initialize()
	self := SingleInstanceTwoTypes{}
	_jsii_.Create(
		"jsii-calc.SingleInstanceTwoTypes",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (s *SingleInstanceTwoTypes) Interface1() InbetweenClassIface {
	var returns *InbetweenClass
	_jsii_.Invoke(
		s,
		"interface1",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

func (s *SingleInstanceTwoTypes) Interface2() IPublicInterfaceIface {
	var returns *IPublicInterface
	_jsii_.Invoke(
		s,
		"interface2",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

// Class interface
type SingletonIntIface interface {
	IsSingletonInt(value interface{}) interface{}
}

// Verifies that singleton enums are handled correctly.
// 
// https://github.com/aws/jsii/issues/231
// Struct proxy
type SingletonInt struct {
}

func (s *SingletonInt) IsSingletonInt(value interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"isSingletonInt",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

// A singleton integer.
type SingletonIntEnum string

const (
	SingletonIntEnumSingletonInt SingletonIntEnum = "SINGLETON_INT"
)

// Class interface
type SingletonStringIface interface {
	IsSingletonString(value interface{}) interface{}
}

// Verifies that singleton enums are handled correctly.
// 
// https://github.com/aws/jsii/issues/231
// Struct proxy
type SingletonString struct {
}

func (s *SingletonString) IsSingletonString(value interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"isSingletonString",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

// A singleton string.
type SingletonStringEnum string

const (
	SingletonStringEnumSingletonString SingletonStringEnum = "SINGLETON_STRING"
)

// SmellyStructIface is the public interface for the custom type SmellyStruct
type SmellyStructIface interface {
	GetProperty() interface{}
	GetYetAnoterOne() interface{}
}

// Struct proxy
type SmellyStruct struct {
	Property interface{} \`json:"property"\`
	YetAnoterOne interface{} \`json:"yetAnoterOne"\`
}

func (s *SmellyStruct) GetProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"property",
		&returns,
	)
	return returns
}

func (s *SmellyStruct) GetYetAnoterOne() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"yetAnoterOne",
		&returns,
	)
	return returns
}


// Class interface
type SomeTypeJsii976Iface interface {
}

// Struct proxy
type SomeTypeJsii976 struct {
}

func NewSomeTypeJsii976() SomeTypeJsii976Iface {
	_init_.Initialize()
	self := SomeTypeJsii976{}
	_jsii_.Create(
		"jsii-calc.SomeTypeJsii976",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func SomeTypeJsii976_ReturnAnonymous() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.SomeTypeJsii976",
		"returnAnonymous",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func SomeTypeJsii976_ReturnReturn() IReturnJsii976Iface {
	_init_.Initialize()
	var returns *IReturnJsii976
	_jsii_.InvokeStatic(
		"jsii-calc.SomeTypeJsii976",
		"returnReturn",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type StableClassIface interface {
	GetReadonlyProperty() interface{}
	GetMutableProperty() interface{}
	SetMutableProperty(val interface{})
	Method()
}

// Struct proxy
type StableClass struct {
	ReadonlyProperty interface{} \`json:"readonlyProperty"\`
	MutableProperty interface{} \`json:"mutableProperty"\`
}

func (s *StableClass) GetReadonlyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"readonlyProperty",
		&returns,
	)
	return returns
}

func (s *StableClass) GetMutableProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"mutableProperty",
		&returns,
	)
	return returns
}


func NewStableClass(readonlyString interface{}, mutableNumber interface{}) StableClassIface {
	_init_.Initialize()
	self := StableClass{}
	_jsii_.Create(
		"jsii-calc.StableClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (s *StableClass) SetMutableProperty(val interface{}) {
	_jsii_.Set(
		s,
		"mutableProperty",
		val,
	)
}

func (s *StableClass) Method() {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

type StableEnum string

const (
	StableEnumOptionA StableEnum = "OPTION_A"
	StableEnumOptionB StableEnum = "OPTION_B"
)

// StableStructIface is the public interface for the custom type StableStruct
type StableStructIface interface {
	GetReadonlyProperty() interface{}
}

// Struct proxy
type StableStruct struct {
	ReadonlyProperty interface{} \`json:"readonlyProperty"\`
}

func (s *StableStruct) GetReadonlyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"readonlyProperty",
		&returns,
	)
	return returns
}


// Class interface
type StaticContextIface interface {
}

// This is used to validate the ability to use \`this\` from within a static context.
// 
// https://github.com/awslabs/aws-cdk/issues/2304
// Struct proxy
type StaticContext struct {
}

func StaticContext_CanAccessStaticContext() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.StaticContext",
		"canAccessStaticContext",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func StaticContext_StaticVariable() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticGet(
		"jsii-calc.StaticContext",
		"staticVariable",
		&returns,
	)
	return returns
}

func StaticContext_SetStaticVariable(val interface{}) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.StaticContext",
		"staticVariable",
		val,
	)
}

// Class interface
type StaticsIface interface {
	GetValue() interface{}
	JustMethod() interface{}
}

// Struct proxy
type Statics struct {
	Value interface{} \`json:"value"\`
}

func (s *Statics) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"value",
		&returns,
	)
	return returns
}


func NewStatics(value interface{}) StaticsIface {
	_init_.Initialize()
	self := Statics{}
	_jsii_.Create(
		"jsii-calc.Statics",
		[]interface{}{value},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func Statics_StaticMethod(name interface{}) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.Statics",
		"staticMethod",
		[]interface{}{name},
		true,
		&returns,
	)
	return returns
}

func Statics_Bar() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"BAR",
		&returns,
	)
	return returns
}

func Statics_ConstObj() DoubleTroubleIface {
	_init_.Initialize()
	var returns DoubleTroubleIface
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"ConstObj",
		&returns,
	)
	return returns
}

func Statics_Foo() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"Foo",
		&returns,
	)
	return returns
}

func Statics_ZooBar() map[string]interface{} {
	_init_.Initialize()
	var returns map[string]interface{}
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"zooBar",
		&returns,
	)
	return returns
}

func Statics_Instance() StaticsIface {
	_init_.Initialize()
	var returns StaticsIface
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"instance",
		&returns,
	)
	return returns
}

func Statics_SetInstance(val StaticsIface) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.Statics",
		"instance",
		val,
	)
}

func Statics_NonConstStatic() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"nonConstStatic",
		&returns,
	)
	return returns
}

func Statics_SetNonConstStatic(val interface{}) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.Statics",
		"nonConstStatic",
		val,
	)
}

func (s *Statics) JustMethod() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"justMethod",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type StringEnum string

const (
	StringEnumA StringEnum = "A"
	StringEnumB StringEnum = "B"
	StringEnumC StringEnum = "C"
)

// Class interface
type StripInternalIface interface {
	GetYouSeeMe() interface{}
	SetYouSeeMe(val interface{})
}

// Struct proxy
type StripInternal struct {
	YouSeeMe interface{} \`json:"youSeeMe"\`
}

func (s *StripInternal) GetYouSeeMe() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"youSeeMe",
		&returns,
	)
	return returns
}


func NewStripInternal() StripInternalIface {
	_init_.Initialize()
	self := StripInternal{}
	_jsii_.Create(
		"jsii-calc.StripInternal",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (s *StripInternal) SetYouSeeMe(val interface{}) {
	_jsii_.Set(
		s,
		"youSeeMe",
		val,
	)
}

// StructAIface is the public interface for the custom type StructA
type StructAIface interface {
	GetRequiredString() interface{}
	GetOptionalNumber() interface{}
	GetOptionalString() interface{}
}

// We can serialize and deserialize structs without silently ignoring optional fields.
// Struct proxy
type StructA struct {
	RequiredString interface{} \`json:"requiredString"\`
	OptionalNumber interface{} \`json:"optionalNumber"\`
	OptionalString interface{} \`json:"optionalString"\`
}

func (s *StructA) GetRequiredString() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"requiredString",
		&returns,
	)
	return returns
}

func (s *StructA) GetOptionalNumber() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"optionalNumber",
		&returns,
	)
	return returns
}

func (s *StructA) GetOptionalString() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"optionalString",
		&returns,
	)
	return returns
}


// StructBIface is the public interface for the custom type StructB
type StructBIface interface {
	GetRequiredString() interface{}
	GetOptionalBoolean() interface{}
	GetOptionalStructA() StructAIface
}

// This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.
// Struct proxy
type StructB struct {
	RequiredString interface{} \`json:"requiredString"\`
	OptionalBoolean interface{} \`json:"optionalBoolean"\`
	OptionalStructA StructAIface \`json:"optionalStructA"\`
}

func (s *StructB) GetRequiredString() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"requiredString",
		&returns,
	)
	return returns
}

func (s *StructB) GetOptionalBoolean() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"optionalBoolean",
		&returns,
	)
	return returns
}

func (s *StructB) GetOptionalStructA() StructAIface {
	var returns StructAIface
	_jsii_.Get(
		s,
		"optionalStructA",
		&returns,
	)
	return returns
}


// StructParameterTypeIface is the public interface for the custom type StructParameterType
type StructParameterTypeIface interface {
	GetScope() interface{}
	GetProps() interface{}
}

// Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.
// 
// See: https://github.com/aws/aws-cdk/issues/4302
// Struct proxy
type StructParameterType struct {
	Scope interface{} \`json:"scope"\`
	Props interface{} \`json:"props"\`
}

func (s *StructParameterType) GetScope() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"scope",
		&returns,
	)
	return returns
}

func (s *StructParameterType) GetProps() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"props",
		&returns,
	)
	return returns
}


// Class interface
type StructPassingIface interface {
}

// Just because we can.
// Struct proxy
type StructPassing struct {
}

func NewStructPassing() StructPassingIface {
	_init_.Initialize()
	self := StructPassing{}
	_jsii_.Create(
		"jsii-calc.StructPassing",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func StructPassing_HowManyVarArgsDidIPass(_positional interface{}, inputs TopLevelStructIface) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.StructPassing",
		"howManyVarArgsDidIPass",
		[]interface{}{_positional, inputs},
		true,
		&returns,
	)
	return returns
}

func StructPassing_RoundTrip(_positional interface{}, input TopLevelStructIface) TopLevelStructIface {
	_init_.Initialize()
	var returns *TopLevelStruct
	_jsii_.InvokeStatic(
		"jsii-calc.StructPassing",
		"roundTrip",
		[]interface{}{_positional, input},
		true,
		&returns,
	)
	return returns
}

// Class interface
type StructUnionConsumerIface interface {
}

// Struct proxy
type StructUnionConsumer struct {
}

func StructUnionConsumer_IsStructA(struct_ interface{}) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.StructUnionConsumer",
		"isStructA",
		[]interface{}{struct_},
		true,
		&returns,
	)
	return returns
}

func StructUnionConsumer_IsStructB(struct_ interface{}) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.StructUnionConsumer",
		"isStructB",
		[]interface{}{struct_},
		true,
		&returns,
	)
	return returns
}

// StructWithJavaReservedWordsIface is the public interface for the custom type StructWithJavaReservedWords
type StructWithJavaReservedWordsIface interface {
	GetDefault() interface{}
	GetAssert() interface{}
	GetResult() interface{}
	GetThat() interface{}
}

// Struct proxy
type StructWithJavaReservedWords struct {
	Default interface{} \`json:"default"\`
	Assert interface{} \`json:"assert"\`
	Result interface{} \`json:"result"\`
	That interface{} \`json:"that"\`
}

func (s *StructWithJavaReservedWords) GetDefault() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"default",
		&returns,
	)
	return returns
}

func (s *StructWithJavaReservedWords) GetAssert() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"assert",
		&returns,
	)
	return returns
}

func (s *StructWithJavaReservedWords) GetResult() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"result",
		&returns,
	)
	return returns
}

func (s *StructWithJavaReservedWords) GetThat() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"that",
		&returns,
	)
	return returns
}


// Class interface
type SumIface interface {
	GetValue() interface{}
	GetExpression() scopejsiicalclib.NumericValueIface
	GetDecorationPostfixes() []interface{}
	SetDecorationPostfixes(val []interface{})
	GetDecorationPrefixes() []interface{}
	SetDecorationPrefixes(val []interface{})
	GetStringStyle() composition.CompositionStringStyle
	SetStringStyle(val composition.CompositionStringStyle)
	GetParts() []scopejsiicalclib.NumericValueIface
	SetParts(val []scopejsiicalclib.NumericValueIface)
	TypeName() interface{}
	ToString() interface{}
}

// An operation that sums multiple values.
// Struct proxy
type Sum struct {
	// (deprecated) The value.
	Value interface{} \`json:"value"\`
	// The expression that this operation consists of.
	// 
	// Must be implemented by derived classes.
	Expression scopejsiicalclib.NumericValueIface \`json:"expression"\`
	// A set of postfixes to include in a decorated .toString().
	DecorationPostfixes []interface{} \`json:"decorationPostfixes"\`
	// A set of prefixes to include in a decorated .toString().
	DecorationPrefixes []interface{} \`json:"decorationPrefixes"\`
	// The .toString() style.
	StringStyle composition.CompositionStringStyle \`json:"stringStyle"\`
	// The parts to sum.
	Parts []scopejsiicalclib.NumericValueIface \`json:"parts"\`
}

func (s *Sum) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"value",
		&returns,
	)
	return returns
}

func (s *Sum) GetExpression() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		s,
		"expression",
		&returns,
	)
	return returns
}

func (s *Sum) GetDecorationPostfixes() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		s,
		"decorationPostfixes",
		&returns,
	)
	return returns
}

func (s *Sum) GetDecorationPrefixes() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		s,
		"decorationPrefixes",
		&returns,
	)
	return returns
}

func (s *Sum) GetStringStyle() composition.CompositionStringStyle {
	var returns composition.CompositionStringStyle
	_jsii_.Get(
		s,
		"stringStyle",
		&returns,
	)
	return returns
}

func (s *Sum) GetParts() []scopejsiicalclib.NumericValueIface {
	var returns []scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		s,
		"parts",
		&returns,
	)
	return returns
}


func NewSum() SumIface {
	_init_.Initialize()
	self := Sum{}
	_jsii_.Create(
		"jsii-calc.Sum",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (s *Sum) SetDecorationPostfixes(val []interface{}) {
	_jsii_.Set(
		s,
		"decorationPostfixes",
		val,
	)
}

func (s *Sum) SetDecorationPrefixes(val []interface{}) {
	_jsii_.Set(
		s,
		"decorationPrefixes",
		val,
	)
}

func (s *Sum) SetStringStyle(val composition.CompositionStringStyle) {
	_jsii_.Set(
		s,
		"stringStyle",
		val,
	)
}

func (s *Sum) SetParts(val []scopejsiicalclib.NumericValueIface) {
	_jsii_.Set(
		s,
		"parts",
		val,
	)
}

func (s *Sum) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *Sum) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type SupportsNiceJavaBuilderIface interface {
	GetBar() interface{}
	GetId() interface{}
	GetPropId() interface{}
	GetRest() []interface{}
}

// Struct proxy
type SupportsNiceJavaBuilder struct {
	Bar interface{} \`json:"bar"\`
	// some identifier.
	Id interface{} \`json:"id"\`
	PropId interface{} \`json:"propId"\`
	Rest []interface{} \`json:"rest"\`
}

func (s *SupportsNiceJavaBuilder) GetBar() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"bar",
		&returns,
	)
	return returns
}

func (s *SupportsNiceJavaBuilder) GetId() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"id",
		&returns,
	)
	return returns
}

func (s *SupportsNiceJavaBuilder) GetPropId() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"propId",
		&returns,
	)
	return returns
}

func (s *SupportsNiceJavaBuilder) GetRest() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		s,
		"rest",
		&returns,
	)
	return returns
}


func NewSupportsNiceJavaBuilder(id interface{}, defaultBar interface{}, props SupportsNiceJavaBuilderPropsIface, rest interface{}) SupportsNiceJavaBuilderIface {
	_init_.Initialize()
	self := SupportsNiceJavaBuilder{}
	_jsii_.Create(
		"jsii-calc.SupportsNiceJavaBuilder",
		[]interface{}{id, defaultBar, props, rest},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// SupportsNiceJavaBuilderPropsIface is the public interface for the custom type SupportsNiceJavaBuilderProps
type SupportsNiceJavaBuilderPropsIface interface {
	GetBar() interface{}
	GetId() interface{}
}

// Struct proxy
type SupportsNiceJavaBuilderProps struct {
	// Some number, like 42.
	Bar interface{} \`json:"bar"\`
	// An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
	// 
	// But here we are, doing it like we didn't care.
	Id interface{} \`json:"id"\`
}

func (s *SupportsNiceJavaBuilderProps) GetBar() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"bar",
		&returns,
	)
	return returns
}

func (s *SupportsNiceJavaBuilderProps) GetId() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"id",
		&returns,
	)
	return returns
}


// Class interface
type SupportsNiceJavaBuilderWithRequiredPropsIface interface {
	GetBar() interface{}
	GetId() interface{}
	GetPropId() interface{}
}

// We can generate fancy builders in Java for classes which take a mix of positional & struct parameters.
// Struct proxy
type SupportsNiceJavaBuilderWithRequiredProps struct {
	Bar interface{} \`json:"bar"\`
	// some identifier of your choice.
	Id interface{} \`json:"id"\`
	PropId interface{} \`json:"propId"\`
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) GetBar() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"bar",
		&returns,
	)
	return returns
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) GetId() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"id",
		&returns,
	)
	return returns
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) GetPropId() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"propId",
		&returns,
	)
	return returns
}


func NewSupportsNiceJavaBuilderWithRequiredProps(id interface{}, props SupportsNiceJavaBuilderPropsIface) SupportsNiceJavaBuilderWithRequiredPropsIface {
	_init_.Initialize()
	self := SupportsNiceJavaBuilderWithRequiredProps{}
	_jsii_.Create(
		"jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
		[]interface{}{id, props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type SyncVirtualMethodsIface interface {
	GetReadonlyProperty() interface{}
	GetA() interface{}
	SetA(val interface{})
	GetCallerIsProperty() interface{}
	SetCallerIsProperty(val interface{})
	GetOtherProperty() interface{}
	SetOtherProperty(val interface{})
	GetTheProperty() interface{}
	SetTheProperty(val interface{})
	GetValueOfOtherProperty() interface{}
	SetValueOfOtherProperty(val interface{})
	CallerIsAsync() interface{}
	CallerIsMethod() interface{}
	ModifyOtherProperty(value interface{})
	ModifyValueOfTheProperty(value interface{})
	ReadA() interface{}
	RetrieveOtherProperty() interface{}
	RetrieveReadOnlyProperty() interface{}
	RetrieveValueOfTheProperty() interface{}
	VirtualMethod(n interface{}) interface{}
	WriteA(value interface{})
}

// Struct proxy
type SyncVirtualMethods struct {
	ReadonlyProperty interface{} \`json:"readonlyProperty"\`
	A interface{} \`json:"a"\`
	CallerIsProperty interface{} \`json:"callerIsProperty"\`
	OtherProperty interface{} \`json:"otherProperty"\`
	TheProperty interface{} \`json:"theProperty"\`
	ValueOfOtherProperty interface{} \`json:"valueOfOtherProperty"\`
}

func (s *SyncVirtualMethods) GetReadonlyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"readonlyProperty",
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) GetA() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"a",
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) GetCallerIsProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"callerIsProperty",
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) GetOtherProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"otherProperty",
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) GetTheProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"theProperty",
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) GetValueOfOtherProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"valueOfOtherProperty",
		&returns,
	)
	return returns
}


func NewSyncVirtualMethods() SyncVirtualMethodsIface {
	_init_.Initialize()
	self := SyncVirtualMethods{}
	_jsii_.Create(
		"jsii-calc.SyncVirtualMethods",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (s *SyncVirtualMethods) SetA(val interface{}) {
	_jsii_.Set(
		s,
		"a",
		val,
	)
}

func (s *SyncVirtualMethods) SetCallerIsProperty(val interface{}) {
	_jsii_.Set(
		s,
		"callerIsProperty",
		val,
	)
}

func (s *SyncVirtualMethods) SetOtherProperty(val interface{}) {
	_jsii_.Set(
		s,
		"otherProperty",
		val,
	)
}

func (s *SyncVirtualMethods) SetTheProperty(val interface{}) {
	_jsii_.Set(
		s,
		"theProperty",
		val,
	)
}

func (s *SyncVirtualMethods) SetValueOfOtherProperty(val interface{}) {
	_jsii_.Set(
		s,
		"valueOfOtherProperty",
		val,
	)
}

func (s *SyncVirtualMethods) CallerIsAsync() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"callerIsAsync",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) CallerIsMethod() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"callerIsMethod",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) ModifyOtherProperty(value interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"modifyOtherProperty",
		[]interface{}{value},
		false,
		&returns,
	)
}

func (s *SyncVirtualMethods) ModifyValueOfTheProperty(value interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"modifyValueOfTheProperty",
		[]interface{}{value},
		false,
		&returns,
	)
}

func (s *SyncVirtualMethods) ReadA() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"readA",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) RetrieveOtherProperty() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"retrieveOtherProperty",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) RetrieveReadOnlyProperty() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"retrieveReadOnlyProperty",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) RetrieveValueOfTheProperty() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"retrieveValueOfTheProperty",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) VirtualMethod(n interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"virtualMethod",
		[]interface{}{n},
		true,
		&returns,
	)
	return returns
}

func (s *SyncVirtualMethods) WriteA(value interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"writeA",
		[]interface{}{value},
		false,
		&returns,
	)
}

// Class interface
type ThrowerIface interface {
	ThrowError()
}

// Struct proxy
type Thrower struct {
}

func NewThrower() ThrowerIface {
	_init_.Initialize()
	self := Thrower{}
	_jsii_.Create(
		"jsii-calc.Thrower",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (t *Thrower) ThrowError() {
	var returns interface{}
	_jsii_.Invoke(
		t,
		"throwError",
		[]interface{}{},
		false,
		&returns,
	)
}

// TopLevelStructIface is the public interface for the custom type TopLevelStruct
type TopLevelStructIface interface {
	GetRequired() interface{}
	GetSecondLevel() interface{}
	GetOptional() interface{}
}

// Struct proxy
type TopLevelStruct struct {
	// This is a required field.
	Required interface{} \`json:"required"\`
	// A union to really stress test our serialization.
	SecondLevel interface{} \`json:"secondLevel"\`
	// You don't have to pass this.
	Optional interface{} \`json:"optional"\`
}

func (t *TopLevelStruct) GetRequired() interface{} {
	var returns interface{}
	_jsii_.Get(
		t,
		"required",
		&returns,
	)
	return returns
}

func (t *TopLevelStruct) GetSecondLevel() interface{} {
	var returns interface{}
	_jsii_.Get(
		t,
		"secondLevel",
		&returns,
	)
	return returns
}

func (t *TopLevelStruct) GetOptional() interface{} {
	var returns interface{}
	_jsii_.Get(
		t,
		"optional",
		&returns,
	)
	return returns
}


// Class interface
type UmaskCheckIface interface {
}

// Checks the current file permissions are cool (no funky UMASK down-scoping happened).
// See: https://github.com/aws/jsii/issues/1765
//
// Struct proxy
type UmaskCheck struct {
}

func UmaskCheck_Mode() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.UmaskCheck",
		"mode",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type UnaryOperationIface interface {
	GetValue() interface{}
	GetOperand() scopejsiicalclib.NumericValueIface
	TypeName() interface{}
	ToString() interface{}
}

// An operation on a single operand.
// Struct proxy
type UnaryOperation struct {
	// The value.
	// Deprecated.
	Value interface{} \`json:"value"\`
	Operand scopejsiicalclib.NumericValueIface \`json:"operand"\`
}

func (u *UnaryOperation) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		u,
		"value",
		&returns,
	)
	return returns
}

func (u *UnaryOperation) GetOperand() scopejsiicalclib.NumericValueIface {
	var returns scopejsiicalclib.NumericValueIface
	_jsii_.Get(
		u,
		"operand",
		&returns,
	)
	return returns
}


func NewUnaryOperation(operand scopejsiicalclib.NumericValueIface) UnaryOperationIface {
	_init_.Initialize()
	self := UnaryOperation{}
	_jsii_.Create(
		"jsii-calc.UnaryOperation",
		[]interface{}{operand},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (u *UnaryOperation) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		u,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (u *UnaryOperation) ToString() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		u,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// UnionPropertiesIface is the public interface for the custom type UnionProperties
type UnionPropertiesIface interface {
	GetBar() interface{}
	GetFoo() interface{}
}

// Struct proxy
type UnionProperties struct {
	Bar interface{} \`json:"bar"\`
	Foo interface{} \`json:"foo"\`
}

func (u *UnionProperties) GetBar() interface{} {
	var returns interface{}
	_jsii_.Get(
		u,
		"bar",
		&returns,
	)
	return returns
}

func (u *UnionProperties) GetFoo() interface{} {
	var returns interface{}
	_jsii_.Get(
		u,
		"foo",
		&returns,
	)
	return returns
}


// Class interface
type UpcasingReflectableIface interface {
	submodule.IReflectableIface
	GetEntries() []submodule.ReflectableEntryIface
}

// Ensures submodule-imported types from dependencies can be used correctly.
// Struct proxy
type UpcasingReflectable struct {
	Entries []submodule.ReflectableEntryIface \`json:"entries"\`
}

func (u *UpcasingReflectable) GetEntries() []submodule.ReflectableEntryIface {
	var returns []submodule.ReflectableEntryIface
	_jsii_.Get(
		u,
		"entries",
		&returns,
	)
	return returns
}


func NewUpcasingReflectable(delegate map[string]interface{}) UpcasingReflectableIface {
	_init_.Initialize()
	self := UpcasingReflectable{}
	_jsii_.Create(
		"jsii-calc.UpcasingReflectable",
		[]interface{}{delegate},
		[]_jsii_.FQN{"@scope/jsii-calc-lib.submodule.IReflectable"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func UpcasingReflectable_Reflector() submodule.ReflectorIface {
	_init_.Initialize()
	var returns submodule.ReflectorIface
	_jsii_.StaticGet(
		"jsii-calc.UpcasingReflectable",
		"reflector",
		&returns,
	)
	return returns
}

// Class interface
type UseBundledDependencyIface interface {
	Value() interface{}
}

// Struct proxy
type UseBundledDependency struct {
}

func NewUseBundledDependency() UseBundledDependencyIface {
	_init_.Initialize()
	self := UseBundledDependency{}
	_jsii_.Create(
		"jsii-calc.UseBundledDependency",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (u *UseBundledDependency) Value() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		u,
		"value",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Class interface
type UseCalcBaseIface interface {
	Hello() scopejsiicalcbase.BaseIface
}

// Depend on a type from jsii-calc-base as a test for awslabs/jsii#128.
// Struct proxy
type UseCalcBase struct {
}

func NewUseCalcBase() UseCalcBaseIface {
	_init_.Initialize()
	self := UseCalcBase{}
	_jsii_.Create(
		"jsii-calc.UseCalcBase",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (u *UseCalcBase) Hello() scopejsiicalcbase.BaseIface {
	var returns *scopejsiicalcbase.Base
	_jsii_.Invoke(
		u,
		"hello",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}

// Class interface
type UsesInterfaceWithPropertiesIface interface {
	GetObj() IInterfaceWithPropertiesIface
	JustRead() interface{}
	ReadStringAndNumber(ext IInterfaceWithPropertiesExtensionIface) interface{}
	WriteAndRead(value interface{}) interface{}
}

// Struct proxy
type UsesInterfaceWithProperties struct {
	Obj IInterfaceWithPropertiesIface \`json:"obj"\`
}

func (u *UsesInterfaceWithProperties) GetObj() IInterfaceWithPropertiesIface {
	var returns IInterfaceWithPropertiesIface
	_jsii_.Get(
		u,
		"obj",
		&returns,
	)
	return returns
}


func NewUsesInterfaceWithProperties(obj IInterfaceWithPropertiesIface) UsesInterfaceWithPropertiesIface {
	_init_.Initialize()
	self := UsesInterfaceWithProperties{}
	_jsii_.Create(
		"jsii-calc.UsesInterfaceWithProperties",
		[]interface{}{obj},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (u *UsesInterfaceWithProperties) JustRead() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		u,
		"justRead",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (u *UsesInterfaceWithProperties) ReadStringAndNumber(ext IInterfaceWithPropertiesExtensionIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		u,
		"readStringAndNumber",
		[]interface{}{ext},
		true,
		&returns,
	)
	return returns
}

func (u *UsesInterfaceWithProperties) WriteAndRead(value interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		u,
		"writeAndRead",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

// Class interface
type VariadicInvokerIface interface {
	AsArray(values interface{}) []interface{}
}

// Struct proxy
type VariadicInvoker struct {
}

func NewVariadicInvoker(method VariadicMethodIface) VariadicInvokerIface {
	_init_.Initialize()
	self := VariadicInvoker{}
	_jsii_.Create(
		"jsii-calc.VariadicInvoker",
		[]interface{}{method},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (v *VariadicInvoker) AsArray(values interface{}) []interface{} {
	var returns []interface{}
	_jsii_.Invoke(
		v,
		"asArray",
		[]interface{}{values},
		true,
		&returns,
	)
	return returns
}

// Class interface
type VariadicMethodIface interface {
	AsArray(first interface{}, others interface{}) []interface{}
}

// Struct proxy
type VariadicMethod struct {
}

func NewVariadicMethod(prefix interface{}) VariadicMethodIface {
	_init_.Initialize()
	self := VariadicMethod{}
	_jsii_.Create(
		"jsii-calc.VariadicMethod",
		[]interface{}{prefix},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (v *VariadicMethod) AsArray(first interface{}, others interface{}) []interface{} {
	var returns []interface{}
	_jsii_.Invoke(
		v,
		"asArray",
		[]interface{}{first, others},
		true,
		&returns,
	)
	return returns
}

// Class interface
type VirtualMethodPlaygroundIface interface {
	OverrideMeAsync(index interface{}) interface{}
	OverrideMeSync(index interface{}) interface{}
	ParallelSumAsync(count interface{}) interface{}
	SerialSumAsync(count interface{}) interface{}
	SumSync(count interface{}) interface{}
}

// Struct proxy
type VirtualMethodPlayground struct {
}

func NewVirtualMethodPlayground() VirtualMethodPlaygroundIface {
	_init_.Initialize()
	self := VirtualMethodPlayground{}
	_jsii_.Create(
		"jsii-calc.VirtualMethodPlayground",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (v *VirtualMethodPlayground) OverrideMeAsync(index interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		v,
		"overrideMeAsync",
		[]interface{}{index},
		true,
		&returns,
	)
	return returns
}

func (v *VirtualMethodPlayground) OverrideMeSync(index interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		v,
		"overrideMeSync",
		[]interface{}{index},
		true,
		&returns,
	)
	return returns
}

func (v *VirtualMethodPlayground) ParallelSumAsync(count interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		v,
		"parallelSumAsync",
		[]interface{}{count},
		true,
		&returns,
	)
	return returns
}

func (v *VirtualMethodPlayground) SerialSumAsync(count interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		v,
		"serialSumAsync",
		[]interface{}{count},
		true,
		&returns,
	)
	return returns
}

func (v *VirtualMethodPlayground) SumSync(count interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		v,
		"sumSync",
		[]interface{}{count},
		true,
		&returns,
	)
	return returns
}

// Class interface
type VoidCallbackIface interface {
	GetMethodWasCalled() interface{}
	CallMe()
	OverrideMe()
}

// This test is used to validate the runtimes can return correctly from a void callback.
// 
// - Implement \`overrideMe\` (method does not have to do anything).
// - Invoke \`callMe\`
// - Verify that \`methodWasCalled\` is \`true\`.
// Struct proxy
type VoidCallback struct {
	MethodWasCalled interface{} \`json:"methodWasCalled"\`
}

func (v *VoidCallback) GetMethodWasCalled() interface{} {
	var returns interface{}
	_jsii_.Get(
		v,
		"methodWasCalled",
		&returns,
	)
	return returns
}


func NewVoidCallback() VoidCallbackIface {
	_init_.Initialize()
	self := VoidCallback{}
	_jsii_.Create(
		"jsii-calc.VoidCallback",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (v *VoidCallback) CallMe() {
	var returns interface{}
	_jsii_.Invoke(
		v,
		"callMe",
		[]interface{}{},
		false,
		&returns,
	)
}

func (v *VoidCallback) OverrideMe() {
	var returns interface{}
	_jsii_.Invoke(
		v,
		"overrideMe",
		[]interface{}{},
		false,
		&returns,
	)
}

// Class interface
type WithPrivatePropertyInConstructorIface interface {
	GetSuccess() interface{}
}

// Verifies that private property declarations in constructor arguments are hidden.
// Struct proxy
type WithPrivatePropertyInConstructor struct {
	Success interface{} \`json:"success"\`
}

func (w *WithPrivatePropertyInConstructor) GetSuccess() interface{} {
	var returns interface{}
	_jsii_.Get(
		w,
		"success",
		&returns,
	)
	return returns
}


func NewWithPrivatePropertyInConstructor(privateField interface{}) WithPrivatePropertyInConstructorIface {
	_init_.Initialize()
	self := WithPrivatePropertyInConstructor{}
	_jsii_.Create(
		"jsii-calc.WithPrivatePropertyInConstructor",
		[]interface{}{privateField},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/pythonself/pythonself.go 1`] = `
package pythonself

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type ClassWithSelfIface interface {
	GetSelf() interface{}
	Method(self interface{}) interface{}
}

// Struct proxy
type ClassWithSelf struct {
	Self interface{} \`json:"self"\`
}

func (c *ClassWithSelf) GetSelf() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"self",
		&returns,
	)
	return returns
}


func NewClassWithSelf(self interface{}) ClassWithSelfIface {
	_init_.Initialize()
	self_ := ClassWithSelf{}
	_jsii_.Create(
		"jsii-calc.PythonSelf.ClassWithSelf",
		[]interface{}{self},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self_,
	)
	return &self_
}

func (c *ClassWithSelf) Method(self interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"method",
		[]interface{}{self},
		true,
		&returns,
	)
	return returns
}

// Class interface
type ClassWithSelfKwargIface interface {
	GetProps() StructWithSelfIface
}

// Struct proxy
type ClassWithSelfKwarg struct {
	Props StructWithSelfIface \`json:"props"\`
}

func (c *ClassWithSelfKwarg) GetProps() StructWithSelfIface {
	var returns StructWithSelfIface
	_jsii_.Get(
		c,
		"props",
		&returns,
	)
	return returns
}


func NewClassWithSelfKwarg(props StructWithSelfIface) ClassWithSelfKwargIface {
	_init_.Initialize()
	self := ClassWithSelfKwarg{}
	_jsii_.Create(
		"jsii-calc.PythonSelf.ClassWithSelfKwarg",
		[]interface{}{props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

type IInterfaceWithSelfIface interface {
	Method(self interface{}) interface{}
}

type IInterfaceWithSelf struct {}

func (i *IInterfaceWithSelf) Method(self interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"method",
		[]interface{}{self},
		true,
		&returns,
	)
	return returns
}

// StructWithSelfIface is the public interface for the custom type StructWithSelf
type StructWithSelfIface interface {
	GetSelf() interface{}
}

// Struct proxy
type StructWithSelf struct {
	Self interface{} \`json:"self"\`
}

func (s *StructWithSelf) GetSelf() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"self",
		&returns,
	)
	return returns
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/backreferences/backreferences.go 1`] = `
package backreferences

import (
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule"
)

// MyClassReferenceIface is the public interface for the custom type MyClassReference
type MyClassReferenceIface interface {
	GetReference() submodule.MyClassIface
}

// Struct proxy
type MyClassReference struct {
	Reference submodule.MyClassIface \`json:"reference"\`
}

func (m *MyClassReference) GetReference() submodule.MyClassIface {
	var returns submodule.MyClassIface
	_jsii_.Get(
		m,
		"reference",
		&returns,
	)
	return returns
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/child/child.go 1`] = `
package child

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

type Awesomeness string

const (
	AwesomenessAwesome Awesomeness = "AWESOME"
)

type Goodness string

const (
	GoodnessPrettyGood Goodness = "PRETTY_GOOD"
	GoodnessReallyGood Goodness = "REALLY_GOOD"
	GoodnessAmazinglyGood Goodness = "AMAZINGLY_GOOD"
)

// Class interface
type InnerClassIface interface {
}

// Struct proxy
type InnerClass struct {
}

func NewInnerClass() InnerClassIface {
	_init_.Initialize()
	self := InnerClass{}
	_jsii_.Create(
		"jsii-calc.submodule.child.InnerClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func InnerClass_StaticProp() SomeStructIface {
	_init_.Initialize()
	var returns SomeStructIface
	_jsii_.StaticGet(
		"jsii-calc.submodule.child.InnerClass",
		"staticProp",
		&returns,
	)
	return returns
}

// KwargsPropsIface is the public interface for the custom type KwargsProps
type KwargsPropsIface interface {
	GetProp() SomeEnum
	GetExtra() interface{}
}

// Struct proxy
type KwargsProps struct {
	Prop SomeEnum \`json:"prop"\`
	Extra interface{} \`json:"extra"\`
}

func (k *KwargsProps) GetProp() SomeEnum {
	var returns SomeEnum
	_jsii_.Get(
		k,
		"prop",
		&returns,
	)
	return returns
}

func (k *KwargsProps) GetExtra() interface{} {
	var returns interface{}
	_jsii_.Get(
		k,
		"extra",
		&returns,
	)
	return returns
}


// Class interface
type OuterClassIface interface {
	GetInnerClass() InnerClassIface
}

// Checks that classes can self-reference during initialization.
// See: : https://github.com/aws/jsii/pull/1706
//
// Struct proxy
type OuterClass struct {
	InnerClass InnerClassIface \`json:"innerClass"\`
}

func (o *OuterClass) GetInnerClass() InnerClassIface {
	var returns InnerClassIface
	_jsii_.Get(
		o,
		"innerClass",
		&returns,
	)
	return returns
}


func NewOuterClass() OuterClassIface {
	_init_.Initialize()
	self := OuterClass{}
	_jsii_.Create(
		"jsii-calc.submodule.child.OuterClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

type SomeEnum string

const (
	SomeEnumSome SomeEnum = "SOME"
)

// SomeStructIface is the public interface for the custom type SomeStruct
type SomeStructIface interface {
	GetProp() SomeEnum
}

// Struct proxy
type SomeStruct struct {
	Prop SomeEnum \`json:"prop"\`
}

func (s *SomeStruct) GetProp() SomeEnum {
	var returns SomeEnum
	_jsii_.Get(
		s,
		"prop",
		&returns,
	)
	return returns
}


// StructureIface is the public interface for the custom type Structure
type StructureIface interface {
	GetBool() interface{}
}

// Struct proxy
type Structure struct {
	Bool interface{} \`json:"bool"\`
}

func (s *Structure) GetBool() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"bool",
		&returns,
	)
	return returns
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/isolated/isolated.go 1`] = `
package isolated

import (
)

// Class interface
type KwargsIface interface {
}

// Ensures imports are correctly registered for kwargs lifted properties from super-structs.
// Struct proxy
type Kwargs struct {
}

func Kwargs_Method(props child.KwargsPropsIface) interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.InvokeStatic(
		"jsii-calc.submodule.isolated.Kwargs",
		"method",
		[]interface{}{props},
		true,
		&returns,
	)
	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/deeplynested/deeplynested.go 1`] = `
package deeplynested

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
)

type INamespacedIface interface {
	GetDefinedAt() interface{}
}

type INamespaced struct {}

func (i *INamespaced) GetDefinedAt() interface{} {
	var returns interface{}
	_jsii_.Get(
		i,
		"definedAt",
		&returns,
	)
	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/nestedsubmodule.go 1`] = `
package nestedsubmodule

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/nestedsubmodule/deeplynested"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/child"
)

// Class interface
type NamespacedIface interface {
	deeplynested.INamespacedIface
	GetDefinedAt() interface{}
	GetGoodness() child.Goodness
}

// Struct proxy
type Namespaced struct {
	DefinedAt interface{} \`json:"definedAt"\`
	Goodness child.Goodness \`json:"goodness"\`
}

func (n *Namespaced) GetDefinedAt() interface{} {
	var returns interface{}
	_jsii_.Get(
		n,
		"definedAt",
		&returns,
	)
	return returns
}

func (n *Namespaced) GetGoodness() child.Goodness {
	var returns child.Goodness
	_jsii_.Get(
		n,
		"goodness",
		&returns,
	)
	return returns
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/param/param.go 1`] = `
package param

import (
)

// SpecialParameterIface is the public interface for the custom type SpecialParameter
type SpecialParameterIface interface {
	GetValue() interface{}
}

// Struct proxy
type SpecialParameter struct {
	Value interface{} \`json:"value"\`
}

func (s *SpecialParameter) GetValue() interface{} {
	var returns interface{}
	_jsii_.Get(
		s,
		"value",
		&returns,
	)
	return returns
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/returnsparam/returnsparam.go 1`] = `
package returnsparam

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/param"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type ReturnsSpecialParameterIface interface {
	ReturnsSpecialParam() param.SpecialParameterIface
}

// Struct proxy
type ReturnsSpecialParameter struct {
}

func NewReturnsSpecialParameter() ReturnsSpecialParameterIface {
	_init_.Initialize()
	self := ReturnsSpecialParameter{}
	_jsii_.Create(
		"jsii-calc.submodule.returnsparam.ReturnsSpecialParameter",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (r *ReturnsSpecialParameter) ReturnsSpecialParam() param.SpecialParameterIface {
	var returns *param.SpecialParameter
	_jsii_.Invoke(
		r,
		"returnsSpecialParam",
		[]interface{}{},
		true,
		returns,
	)
	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/submodule.go 1`] = `
package submodule

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/nestedsubmodule/deeplynested"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/child"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/param"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type MyClassIface interface {
	deeplynested.INamespacedIface
	GetAwesomeness() child.Awesomeness
	GetDefinedAt() interface{}
	GetGoodness() child.Goodness
	GetProps() child.SomeStructIface
	GetAllTypes() jsiicalc.AllTypesIface
	SetAllTypes(val jsiicalc.AllTypesIface)
	MethodWithSpecialParam(param param.SpecialParameterIface) interface{}
}

// Struct proxy
type MyClass struct {
	Awesomeness child.Awesomeness \`json:"awesomeness"\`
	DefinedAt interface{} \`json:"definedAt"\`
	Goodness child.Goodness \`json:"goodness"\`
	Props child.SomeStructIface \`json:"props"\`
	AllTypes jsiicalc.AllTypesIface \`json:"allTypes"\`
}

func (m *MyClass) GetAwesomeness() child.Awesomeness {
	var returns child.Awesomeness
	_jsii_.Get(
		m,
		"awesomeness",
		&returns,
	)
	return returns
}

func (m *MyClass) GetDefinedAt() interface{} {
	var returns interface{}
	_jsii_.Get(
		m,
		"definedAt",
		&returns,
	)
	return returns
}

func (m *MyClass) GetGoodness() child.Goodness {
	var returns child.Goodness
	_jsii_.Get(
		m,
		"goodness",
		&returns,
	)
	return returns
}

func (m *MyClass) GetProps() child.SomeStructIface {
	var returns child.SomeStructIface
	_jsii_.Get(
		m,
		"props",
		&returns,
	)
	return returns
}

func (m *MyClass) GetAllTypes() jsiicalc.AllTypesIface {
	var returns jsiicalc.AllTypesIface
	_jsii_.Get(
		m,
		"allTypes",
		&returns,
	)
	return returns
}


func NewMyClass(props child.SomeStructIface) MyClassIface {
	_init_.Initialize()
	self := MyClass{}
	_jsii_.Create(
		"jsii-calc.submodule.MyClass",
		[]interface{}{props},
		[]_jsii_.FQN{"jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (m *MyClass) SetAllTypes(val jsiicalc.AllTypesIface) {
	_jsii_.Set(
		m,
		"allTypes",
		val,
	)
}

func (m *MyClass) MethodWithSpecialParam(param param.SpecialParameterIface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		m,
		"methodWithSpecialParam",
		[]interface{}{param},
		true,
		&returns,
	)
	return returns
}


`;
