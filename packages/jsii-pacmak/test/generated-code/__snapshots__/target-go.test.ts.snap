// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ go
    ‚îó‚îÅ üìÅ jcb
       ‚î£‚îÅ üìÑ go.mod
       ‚î£‚îÅ üìÅ internal
       ‚îÉ  ‚îó‚îÅ üìÑ types.go
       ‚î£‚îÅ üìÑ jcb.go
       ‚î£‚îÅ üìÑ jcb.init.go
       ‚î£‚îÅ üìÅ jsii
       ‚îÉ  ‚î£‚îÅ üìÑ jsii.go
       ‚îÉ  ‚îó‚îÅ üìÑ scope-jsii-calc-base-0.0.0.tgz
       ‚î£‚îÅ üìÑ LICENSE
       ‚î£‚îÅ üìÑ NOTICE
       ‚îó‚îÅ üìÑ version
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/jcb/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/jcb/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/jcb/go.mod 1`] = `
module github.com/aws/jsii/jsii-calc/go/jcb

go 1.16

require (
	github.com/aws/jsii-runtime-go v0.0.0
	github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2 v2.1.1
)

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/jcb/internal/types.go 1`] = `
package internal
import (
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2"
)
type Type__scopejsiicalcbaseofbaseIVeryBaseInterface = scopejsiicalcbaseofbase.IVeryBaseInterface

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/jcb/jcb.go 1`] = `
// An example direct dependency for jsii-calc.
package jcb

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jcb/jsii"

	"github.com/aws/jsii/jsii-calc/go/jcb/internal"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2"
)

// A base class.
type Base interface {
	TypeName() interface{}
}

// The jsii proxy struct for Base
type jsiiProxy_Base struct {
	_ byte // padding
}

func NewBase_Override(b Base) {
	_init_.Initialize()

	_jsii_.Create(
		"@scope/jsii-calc-base.Base",
		nil, // no parameters
		b,
	)
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (b *jsiiProxy_Base) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		b,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

type BaseProps struct {
	Foo scopejsiicalcbaseofbase.Very \`json:"foo"\`
	Bar *string \`json:"bar"\`
}

type IBaseInterface interface {
	scopejsiicalcbaseofbase.IVeryBaseInterface
	Bar()
}

// The jsii proxy for IBaseInterface
type jsiiProxy_IBaseInterface struct {
	internal.Type__scopejsiicalcbaseofbaseIVeryBaseInterface
}

func (i *jsiiProxy_IBaseInterface) Bar() {
	_jsii_.InvokeVoid(
		i,
		"bar",
		nil, // no parameters
	)
}

// Hides the transitive dependency of base-of-base.
type StaticConsumer interface {
}

// The jsii proxy struct for StaticConsumer
type jsiiProxy_StaticConsumer struct {
	_ byte // padding
}

func NewStaticConsumer() StaticConsumer {
	_init_.Initialize()

	j := jsiiProxy_StaticConsumer{}

	_jsii_.Create(
		"@scope/jsii-calc-base.StaticConsumer",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewStaticConsumer_Override(s StaticConsumer) {
	_init_.Initialize()

	_jsii_.Create(
		"@scope/jsii-calc-base.StaticConsumer",
		nil, // no parameters
		s,
	)
}

func StaticConsumer_Consume(args ...interface{}) {
	_init_.Initialize()

	args_ := []interface{}{}
	for _, a := range args {
		args_ = append(args_, a)
	}

	_jsii_.StaticInvokeVoid(
		"@scope/jsii-calc-base.StaticConsumer",
		"consume",
		args_,
	)
}


`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/jcb/jcb.init.go 1`] = `
package jcb

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"@scope/jsii-calc-base.Base",
		reflect.TypeOf((*Base)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
		},
		func() interface{} {
			return &jsiiProxy_Base{}
		},
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-base.BaseProps",
		reflect.TypeOf((*BaseProps)(nil)).Elem(),
	)
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-base.IBaseInterface",
		reflect.TypeOf((*IBaseInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bar", GoMethod: "Bar"},
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
		},
		func() interface{} {
			j := jsiiProxy_IBaseInterface{}
			_jsii_.InitJsiiProxy(&j.Type__scopejsiicalcbaseofbaseIVeryBaseInterface)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-base.StaticConsumer",
		reflect.TypeOf((*StaticConsumer)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_StaticConsumer{}
		},
	)
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/jcb/jsii/jsii.go 1`] = `
// Package jsii contains the functionaility needed for jsii packages to
// initialize their dependencies and themselves. Users should never need to use this package
// directly. If you find you need to - please report a bug at
// https://github.com/aws/jsii/issues/new/choose
package jsii

import (
	_                       "embed"

	_jsii_                  "github.com/aws/jsii-runtime-go"

	scopejsiicalcbaseofbase "github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2/jsii"
)

//go:embed scope-jsii-calc-base-0.0.0.tgz
var tarball []byte

// Initialize loads the necessary packages in the @jsii/kernel to support the enclosing module.
// The implementation is idempotent (and hence safe to be called over and over).
func Initialize() {
	// Ensure all dependencies are initialized
	scopejsiicalcbaseofbase.Initialize()

	// Load this library into the kernel
	_jsii_.Load("@scope/jsii-calc-base", "0.0.0", tarball)
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/jcb/jsii/scope-jsii-calc-base-0.0.0.tgz 1`] = `go/jcb/jsii/scope-jsii-calc-base-0.0.0.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/jcb/version 1`] = `
0.0.0

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ go
    ‚îó‚îÅ üìÅ scopejsiicalcbaseofbase
       ‚î£‚îÅ üìÑ go.mod
       ‚î£‚îÅ üìÅ jsii
       ‚îÉ  ‚î£‚îÅ üìÑ jsii.go
       ‚îÉ  ‚îó‚îÅ üìÑ scope-jsii-calc-base-of-base-2.1.1.tgz
       ‚î£‚îÅ üìÑ LICENSE
       ‚î£‚îÅ üìÑ NOTICE
       ‚î£‚îÅ üìÑ scopejsiicalcbaseofbase.go
       ‚î£‚îÅ üìÑ scopejsiicalcbaseofbase.init.go
       ‚îó‚îÅ üìÑ version
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/go.mod 1`] = `
module github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2

go 1.16

require (
	github.com/aws/jsii-runtime-go v0.0.0
)

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/jsii/jsii.go 1`] = `
// Package jsii contains the functionaility needed for jsii packages to
// initialize their dependencies and themselves. Users should never need to use this package
// directly. If you find you need to - please report a bug at
// https://github.com/aws/jsii/issues/new/choose
package jsii

import (
	_      "embed"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

//go:embed scope-jsii-calc-base-of-base-2.1.1.tgz
var tarball []byte

// Initialize loads the necessary packages in the @jsii/kernel to support the enclosing module.
// The implementation is idempotent (and hence safe to be called over and over).
func Initialize() {
	// Load this library into the kernel
	_jsii_.Load("@scope/jsii-calc-base-of-base", "2.1.1", tarball)
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/jsii/scope-jsii-calc-base-of-base-2.1.1.tgz 1`] = `go/scopejsiicalcbaseofbase/jsii/scope-jsii-calc-base-of-base-2.1.1.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/scopejsiicalcbaseofbase.go 1`] = `
// An example transitive dependency for jsii-calc.
package scopejsiicalcbaseofbase

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2/jsii"
)

type IVeryBaseInterface interface {
	Foo()
}

// The jsii proxy for IVeryBaseInterface
type jsiiProxy_IVeryBaseInterface struct {
	_ byte // padding
}

func (i *jsiiProxy_IVeryBaseInterface) Foo() {
	_jsii_.InvokeVoid(
		i,
		"foo",
		nil, // no parameters
	)
}

type StaticConsumer interface {
}

// The jsii proxy struct for StaticConsumer
type jsiiProxy_StaticConsumer struct {
	_ byte // padding
}

func StaticConsumer_Consume(_args ...interface{}) {
	_init_.Initialize()

	args := []interface{}{}
	for _, a := range _args {
		args = append(args, a)
	}

	_jsii_.StaticInvokeVoid(
		"@scope/jsii-calc-base-of-base.StaticConsumer",
		"consume",
		args,
	)
}

// Something here.
// Experimental.
type Very interface {
	Hey() *float64
}

// The jsii proxy struct for Very
type jsiiProxy_Very struct {
	_ byte // padding
}

// Experimental.
func NewVery() Very {
	_init_.Initialize()

	j := jsiiProxy_Very{}

	_jsii_.Create(
		"@scope/jsii-calc-base-of-base.Very",
		nil, // no parameters
		&j,
	)

	return &j
}

// Experimental.
func NewVery_Override(v Very) {
	_init_.Initialize()

	_jsii_.Create(
		"@scope/jsii-calc-base-of-base.Very",
		nil, // no parameters
		v,
	)
}

// Experimental.
func (v *jsiiProxy_Very) Hey() *float64 {
	var returns *float64

	_jsii_.Invoke(
		v,
		"hey",
		nil, // no parameters
		&returns,
	)

	return returns
}

type VeryBaseProps struct {
	Foo Very \`json:"foo"\`
}


`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/scopejsiicalcbaseofbase.init.go 1`] = `
package scopejsiicalcbaseofbase

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-base-of-base.IVeryBaseInterface",
		reflect.TypeOf((*IVeryBaseInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
		},
		func() interface{} {
			return &jsiiProxy_IVeryBaseInterface{}
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-base-of-base.StaticConsumer",
		reflect.TypeOf((*StaticConsumer)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_StaticConsumer{}
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-base-of-base.Very",
		reflect.TypeOf((*Very)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "hey", GoMethod: "Hey"},
		},
		func() interface{} {
			return &jsiiProxy_Very{}
		},
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-base-of-base.VeryBaseProps",
		reflect.TypeOf((*VeryBaseProps)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/version 1`] = `
2.1.1

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ go
    ‚îó‚îÅ üìÅ scopejsiicalclib
       ‚î£‚îÅ üìÅ customsubmodulename
       ‚îÉ  ‚î£‚îÅ üìÑ customsubmodulename.go
       ‚îÉ  ‚îó‚îÅ üìÑ customsubmodulename.init.go
       ‚î£‚îÅ üìÑ go.mod
       ‚î£‚îÅ üìÅ internal
       ‚îÉ  ‚îó‚îÅ üìÑ types.go
       ‚î£‚îÅ üìÅ jsii
       ‚îÉ  ‚î£‚îÅ üìÑ jsii.go
       ‚îÉ  ‚îó‚îÅ üìÑ scope-jsii-calc-lib-0.0.0.tgz
       ‚î£‚îÅ üìÑ LICENSE
       ‚î£‚îÅ üìÑ NOTICE
       ‚î£‚îÅ üìÑ scopejsiicalclib.go
       ‚î£‚îÅ üìÑ scopejsiicalclib.init.go
       ‚îó‚îÅ üìÑ version
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/customsubmodulename/customsubmodulename.go 1`] = `
package customsubmodulename

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/scopejsiicalclib/jsii"
)

// Deprecated.
type IReflectable interface {
	// Deprecated.
	Entries() *[]*ReflectableEntry
}

// The jsii proxy for IReflectable
type jsiiProxy_IReflectable struct {
	_ byte // padding
}

func (j *jsiiProxy_IReflectable) Entries() *[]*ReflectableEntry {
	var returns *[]*ReflectableEntry
	_jsii_.Get(
		j,
		"entries",
		&returns,
	)
	return returns
}

// This class is here to show we can use nested classes across module boundaries.
// Deprecated.
type NestingClass interface {
}

// The jsii proxy struct for NestingClass
type jsiiProxy_NestingClass struct {
	_ byte // padding
}

// This class is here to show we can use nested classes across module boundaries.
// Deprecated.
type NestingClass_NestedClass interface {
	Property() *string
}

// The jsii proxy struct for NestingClass_NestedClass
type jsiiProxy_NestingClass_NestedClass struct {
	_ byte // padding
}

func (j *jsiiProxy_NestingClass_NestedClass) Property() *string {
	var returns *string
	_jsii_.Get(
		j,
		"property",
		&returns,
	)
	return returns
}


// Deprecated.
func NewNestingClass_NestedClass() NestingClass_NestedClass {
	_init_.Initialize()

	j := jsiiProxy_NestingClass_NestedClass{}

	_jsii_.Create(
		"@scope/jsii-calc-lib.submodule.NestingClass.NestedClass",
		nil, // no parameters
		&j,
	)

	return &j
}

// Deprecated.
func NewNestingClass_NestedClass_Override(n NestingClass_NestedClass) {
	_init_.Initialize()

	_jsii_.Create(
		"@scope/jsii-calc-lib.submodule.NestingClass.NestedClass",
		nil, // no parameters
		n,
	)
}

// This is a struct, nested within a class.
//
// Normal.
// Deprecated.
type NestingClass_NestedStruct struct {
	// Deprecated.
	Name *string \`json:"name"\`
}

// Deprecated.
type ReflectableEntry struct {
	// Deprecated.
	Key *string \`json:"key"\`
	// Deprecated.
	Value interface{} \`json:"value"\`
}

// Deprecated.
type Reflector interface {
	AsMap(reflectable IReflectable) *map[string]interface{}
}

// The jsii proxy struct for Reflector
type jsiiProxy_Reflector struct {
	_ byte // padding
}

// Deprecated.
func NewReflector() Reflector {
	_init_.Initialize()

	j := jsiiProxy_Reflector{}

	_jsii_.Create(
		"@scope/jsii-calc-lib.submodule.Reflector",
		nil, // no parameters
		&j,
	)

	return &j
}

// Deprecated.
func NewReflector_Override(r Reflector) {
	_init_.Initialize()

	_jsii_.Create(
		"@scope/jsii-calc-lib.submodule.Reflector",
		nil, // no parameters
		r,
	)
}

// Deprecated.
func (r *jsiiProxy_Reflector) AsMap(reflectable IReflectable) *map[string]interface{} {
	var returns *map[string]interface{}

	_jsii_.Invoke(
		r,
		"asMap",
		[]interface{}{reflectable},
		&returns,
	)

	return returns
}


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/customsubmodulename/customsubmodulename.init.go 1`] = `
package customsubmodulename

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-lib.submodule.IReflectable",
		reflect.TypeOf((*IReflectable)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "entries", GoGetter: "Entries"},
		},
		func() interface{} {
			return &jsiiProxy_IReflectable{}
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.submodule.NestingClass",
		reflect.TypeOf((*NestingClass)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_NestingClass{}
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.submodule.NestingClass.NestedClass",
		reflect.TypeOf((*NestingClass_NestedClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "property", GoGetter: "Property"},
		},
		func() interface{} {
			return &jsiiProxy_NestingClass_NestedClass{}
		},
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct",
		reflect.TypeOf((*NestingClass_NestedStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.submodule.ReflectableEntry",
		reflect.TypeOf((*ReflectableEntry)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.submodule.Reflector",
		reflect.TypeOf((*Reflector)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "asMap", GoMethod: "AsMap"},
		},
		func() interface{} {
			return &jsiiProxy_Reflector{}
		},
	)
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/go.mod 1`] = `
module github.com/aws/jsii/jsii-calc/go/scopejsiicalclib

go 1.16

require (
	github.com/aws/jsii-runtime-go v0.0.0
	github.com/aws/jsii/jsii-calc/go/jcb v0.0.0
	github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2 v2.1.1
)

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/internal/types.go 1`] = `
package internal
import (
	"github.com/aws/jsii/jsii-calc/go/jcb"
)
type Type__jcbIBaseInterface = jcb.IBaseInterface
type Type__jcbBase = jcb.Base

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/jsii/jsii.go 1`] = `
// Package jsii contains the functionaility needed for jsii packages to
// initialize their dependencies and themselves. Users should never need to use this package
// directly. If you find you need to - please report a bug at
// https://github.com/aws/jsii/issues/new/choose
package jsii

import (
	_                       "embed"

	_jsii_                  "github.com/aws/jsii-runtime-go"

	jcb                     "github.com/aws/jsii/jsii-calc/go/jcb/jsii"
	scopejsiicalcbaseofbase "github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2/jsii"
)

//go:embed scope-jsii-calc-lib-0.0.0.tgz
var tarball []byte

// Initialize loads the necessary packages in the @jsii/kernel to support the enclosing module.
// The implementation is idempotent (and hence safe to be called over and over).
func Initialize() {
	// Ensure all dependencies are initialized
	jcb.Initialize()
	scopejsiicalcbaseofbase.Initialize()

	// Load this library into the kernel
	_jsii_.Load("@scope/jsii-calc-lib", "0.0.0", tarball)
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/jsii/scope-jsii-calc-lib-0.0.0.tgz 1`] = `go/scopejsiicalclib/jsii/scope-jsii-calc-lib-0.0.0.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/scopejsiicalclib.go 1`] = `
// A simple calcuator library built on JSII.
package scopejsiicalclib

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/scopejsiicalclib/jsii"

	"github.com/aws/jsii/jsii-calc/go/jcb"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib/internal"
)

// A base class for testing #2647.
//
// The method \`foo\` has a parameter that uses a type
// from a dependent module. Since Go "reimplments" this method, it will also need
// to include an "import" statement for the calc-base module.
// See: https://github.com/aws/jsii/issues/2647
//
// Deprecated.
type BaseFor2647 interface {
	Foo(obj jcb.IBaseInterface)
}

// The jsii proxy struct for BaseFor2647
type jsiiProxy_BaseFor2647 struct {
	_ byte // padding
}

// Deprecated.
func NewBaseFor2647(very scopejsiicalcbaseofbase.Very) BaseFor2647 {
	_init_.Initialize()

	j := jsiiProxy_BaseFor2647{}

	_jsii_.Create(
		"@scope/jsii-calc-lib.BaseFor2647",
		[]interface{}{very},
		&j,
	)

	return &j
}

// Deprecated.
func NewBaseFor2647_Override(b BaseFor2647, very scopejsiicalcbaseofbase.Very) {
	_init_.Initialize()

	_jsii_.Create(
		"@scope/jsii-calc-lib.BaseFor2647",
		[]interface{}{very},
		b,
	)
}

// Deprecated.
func (b *jsiiProxy_BaseFor2647) Foo(obj jcb.IBaseInterface) {
	_jsii_.InvokeVoid(
		b,
		"foo",
		[]interface{}{obj},
	)
}

// Deprecated.
type DiamondLeft struct {
	// Deprecated.
	HoistedTop *string \`json:"hoistedTop"\`
	// Deprecated.
	Left *float64 \`json:"left"\`
}

// Deprecated.
type DiamondRight struct {
	// Deprecated.
	HoistedTop *string \`json:"hoistedTop"\`
	// Deprecated.
	Right *bool \`json:"right"\`
}

// Check that enums from \\@scoped packages can be references.
//
// See awslabs/jsii#138
// Deprecated.
type EnumFromScopedModule string

const (
	EnumFromScopedModule_VALUE1 EnumFromScopedModule = "VALUE1"
	EnumFromScopedModule_VALUE2 EnumFromScopedModule = "VALUE2"
)

// The general contract for a concrete number.
// Deprecated.
type IDoublable interface {
	// Deprecated.
	DoubleValue() *float64
}

// The jsii proxy for IDoublable
type jsiiProxy_IDoublable struct {
	_ byte // padding
}

func (j *jsiiProxy_IDoublable) DoubleValue() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"doubleValue",
		&returns,
	)
	return returns
}

// Applies to classes that are considered friendly.
//
// These classes can be greeted with
// a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.
// Deprecated.
type IFriendly interface {
	// Say hello!
	// Deprecated.
	Hello() *string
}

// The jsii proxy for IFriendly
type jsiiProxy_IFriendly struct {
	_ byte // padding
}

func (i *jsiiProxy_IFriendly) Hello() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"hello",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Interface that inherits from packages 2 levels up the tree.
//
// Their presence validates that .NET/Java/jsii-reflect can track all fields
// far enough up the tree.
// Deprecated.
type IThreeLevelsInterface interface {
	jcb.IBaseInterface
	// Deprecated.
	Baz()
}

// The jsii proxy for IThreeLevelsInterface
type jsiiProxy_IThreeLevelsInterface struct {
	internal.Type__jcbIBaseInterface
}

func (i *jsiiProxy_IThreeLevelsInterface) Baz() {
	_jsii_.InvokeVoid(
		i,
		"baz",
		nil, // no parameters
	)
}

// This is the first struct we have created in jsii.
// Deprecated.
type MyFirstStruct struct {
	// An awesome number value.
	// Deprecated.
	Anumber *float64 \`json:"anumber"\`
	// A string value.
	// Deprecated.
	Astring *string \`json:"astring"\`
	// Deprecated.
	FirstOptional *[]*string \`json:"firstOptional"\`
}

// Represents a concrete number.
// Deprecated.
type Number interface {
	NumericValue
	IDoublable
	DoubleValue() *float64
	Value() *float64
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for Number
type jsiiProxy_Number struct {
	jsiiProxy_NumericValue
	jsiiProxy_IDoublable
}

func (j *jsiiProxy_Number) DoubleValue() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"doubleValue",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Number) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


// Creates a Number object.
// Deprecated.
func NewNumber(value *float64) Number {
	_init_.Initialize()

	j := jsiiProxy_Number{}

	_jsii_.Create(
		"@scope/jsii-calc-lib.Number",
		[]interface{}{value},
		&j,
	)

	return &j
}

// Creates a Number object.
// Deprecated.
func NewNumber_Override(n Number, value *float64) {
	_init_.Initialize()

	_jsii_.Create(
		"@scope/jsii-calc-lib.Number",
		[]interface{}{value},
		n,
	)
}

// String representation of the value.
// Deprecated.
func (n *jsiiProxy_Number) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
// Deprecated.
func (n *jsiiProxy_Number) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		n,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Abstract class which represents a numeric value.
// Deprecated.
type NumericValue interface {
	jcb.Base
	Value() *float64
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for NumericValue
type jsiiProxy_NumericValue struct {
	internal.Type__jcbBase
}

func (j *jsiiProxy_NumericValue) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


// Deprecated.
func NewNumericValue_Override(n NumericValue) {
	_init_.Initialize()

	_jsii_.Create(
		"@scope/jsii-calc-lib.NumericValue",
		nil, // no parameters
		n,
	)
}

// String representation of the value.
// Deprecated.
func (n *jsiiProxy_NumericValue) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
// Deprecated.
func (n *jsiiProxy_NumericValue) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		n,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Represents an operation on values.
// Deprecated.
type Operation interface {
	NumericValue
	Value() *float64
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for Operation
type jsiiProxy_Operation struct {
	jsiiProxy_NumericValue
}

func (j *jsiiProxy_Operation) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


// Deprecated.
func NewOperation_Override(o Operation) {
	_init_.Initialize()

	_jsii_.Create(
		"@scope/jsii-calc-lib.Operation",
		nil, // no parameters
		o,
	)
}

// String representation of the value.
// Deprecated.
func (o *jsiiProxy_Operation) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		o,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
// Deprecated.
func (o *jsiiProxy_Operation) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

// This is a struct with only optional properties.
// Deprecated.
type StructWithOnlyOptionals struct {
	// The first optional!
	// Deprecated.
	Optional1 *string \`json:"optional1"\`
	// Deprecated.
	Optional2 *float64 \`json:"optional2"\`
	// Deprecated.
	Optional3 *bool \`json:"optional3"\`
}


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/scopejsiicalclib.init.go 1`] = `
package scopejsiicalclib

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.BaseFor2647",
		reflect.TypeOf((*BaseFor2647)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
		},
		func() interface{} {
			return &jsiiProxy_BaseFor2647{}
		},
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.DiamondLeft",
		reflect.TypeOf((*DiamondLeft)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.DiamondRight",
		reflect.TypeOf((*DiamondRight)(nil)).Elem(),
	)
	_jsii_.RegisterEnum(
		"@scope/jsii-calc-lib.EnumFromScopedModule",
		reflect.TypeOf((*EnumFromScopedModule)(nil)).Elem(),
		map[string]interface{}{
			"VALUE1": EnumFromScopedModule_VALUE1,
			"VALUE2": EnumFromScopedModule_VALUE2,
		},
	)
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-lib.IDoublable",
		reflect.TypeOf((*IDoublable)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "doubleValue", GoGetter: "DoubleValue"},
		},
		func() interface{} {
			return &jsiiProxy_IDoublable{}
		},
	)
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-lib.IFriendly",
		reflect.TypeOf((*IFriendly)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
		},
		func() interface{} {
			return &jsiiProxy_IFriendly{}
		},
	)
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-lib.IThreeLevelsInterface",
		reflect.TypeOf((*IThreeLevelsInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bar", GoMethod: "Bar"},
			_jsii_.MemberMethod{JsiiMethod: "baz", GoMethod: "Baz"},
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
		},
		func() interface{} {
			j := jsiiProxy_IThreeLevelsInterface{}
			_jsii_.InitJsiiProxy(&j.Type__jcbIBaseInterface)
			return &j
		},
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.MyFirstStruct",
		reflect.TypeOf((*MyFirstStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.Number",
		reflect.TypeOf((*Number)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "doubleValue", GoGetter: "DoubleValue"},
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_Number{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_NumericValue)
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IDoublable)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.NumericValue",
		reflect.TypeOf((*NumericValue)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_NumericValue{}
			_jsii_.InitJsiiProxy(&j.Type__jcbBase)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.Operation",
		reflect.TypeOf((*Operation)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_Operation{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_NumericValue)
			return &j
		},
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.StructWithOnlyOptionals",
		reflect.TypeOf((*StructWithOnlyOptionals)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/version 1`] = `
0.0.0-devpreview

`;

exports[`Generated code for "jsii-calc": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ go
    ‚îó‚îÅ üìÅ jsiicalc
       ‚î£‚îÅ üìÅ composition
       ‚îÉ  ‚î£‚îÅ üìÑ composition.go
       ‚îÉ  ‚î£‚îÅ üìÑ composition.init.go
       ‚îÉ  ‚îó‚îÅ üìÅ internal
       ‚îÉ     ‚îó‚îÅ üìÑ types.go
       ‚î£‚îÅ üìÅ derivedclasshasnoproperties
       ‚îÉ  ‚î£‚îÅ üìÑ derivedclasshasnoproperties.go
       ‚îÉ  ‚îó‚îÅ üìÑ derivedclasshasnoproperties.init.go
       ‚î£‚îÅ üìÑ go.mod
       ‚î£‚îÅ üìÅ interfaceinnamespaceincludesclasses
       ‚îÉ  ‚î£‚îÅ üìÑ interfaceinnamespaceincludesclasses.go
       ‚îÉ  ‚îó‚îÅ üìÑ interfaceinnamespaceincludesclasses.init.go
       ‚î£‚îÅ üìÅ interfaceinnamespaceonlyinterface
       ‚îÉ  ‚î£‚îÅ üìÑ interfaceinnamespaceonlyinterface.go
       ‚îÉ  ‚îó‚îÅ üìÑ interfaceinnamespaceonlyinterface.init.go
       ‚î£‚îÅ üìÅ internal
       ‚îÉ  ‚îó‚îÅ üìÑ types.go
       ‚î£‚îÅ üìÅ jsii
       ‚îÉ  ‚î£‚îÅ üìÑ jsii-calc-3.20.120.tgz
       ‚îÉ  ‚îó‚îÅ üìÑ jsii.go
       ‚î£‚îÅ üìÑ jsiicalc.go
       ‚î£‚îÅ üìÑ jsiicalc.init.go
       ‚î£‚îÅ üìÑ LICENSE
       ‚î£‚îÅ üìÅ module2530
       ‚îÉ  ‚î£‚îÅ üìÑ module2530.go
       ‚îÉ  ‚îó‚îÅ üìÑ module2530.init.go
       ‚î£‚îÅ üìÅ module2617
       ‚îÉ  ‚î£‚îÅ üìÑ module2617.go
       ‚îÉ  ‚îó‚îÅ üìÑ module2617.init.go
       ‚î£‚îÅ üìÅ module2647
       ‚îÉ  ‚î£‚îÅ üìÅ internal
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ types.go
       ‚îÉ  ‚î£‚îÅ üìÑ module2647.go
       ‚îÉ  ‚îó‚îÅ üìÑ module2647.init.go
       ‚î£‚îÅ üìÅ module2689
       ‚îÉ  ‚î£‚îÅ üìÅ methods
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ methods.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ methods.init.go
       ‚îÉ  ‚î£‚îÅ üìÑ module2689.go
       ‚îÉ  ‚î£‚îÅ üìÅ props
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ props.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ props.init.go
       ‚îÉ  ‚î£‚îÅ üìÅ retval
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ retval.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ retval.init.go
       ‚îÉ  ‚îó‚îÅ üìÅ structs
       ‚îÉ     ‚î£‚îÅ üìÑ structs.go
       ‚îÉ     ‚îó‚îÅ üìÑ structs.init.go
       ‚î£‚îÅ üìÅ module2692
       ‚îÉ  ‚î£‚îÅ üìÑ module2692.go
       ‚îÉ  ‚î£‚îÅ üìÅ submodule1
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ submodule1.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ submodule1.init.go
       ‚îÉ  ‚îó‚îÅ üìÅ submodule2
       ‚îÉ     ‚î£‚îÅ üìÑ submodule2.go
       ‚îÉ     ‚îó‚îÅ üìÑ submodule2.init.go
       ‚î£‚îÅ üìÅ module2700
       ‚îÉ  ‚î£‚îÅ üìÑ module2700.go
       ‚îÉ  ‚îó‚îÅ üìÑ module2700.init.go
       ‚î£‚îÅ üìÅ module2702
       ‚îÉ  ‚î£‚îÅ üìÅ internal
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ types.go
       ‚îÉ  ‚î£‚îÅ üìÑ module2702.go
       ‚îÉ  ‚îó‚îÅ üìÑ module2702.init.go
       ‚î£‚îÅ üìÅ nodirect
       ‚îÉ  ‚î£‚îÅ üìÑ nodirect.go
       ‚îÉ  ‚î£‚îÅ üìÅ sub1
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ sub1.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ sub1.init.go
       ‚îÉ  ‚îó‚îÅ üìÅ sub2
       ‚îÉ     ‚î£‚îÅ üìÑ sub2.go
       ‚îÉ     ‚îó‚îÅ üìÑ sub2.init.go
       ‚î£‚îÅ üìÑ NOTICE
       ‚î£‚îÅ üìÅ onlystatic
       ‚îÉ  ‚î£‚îÅ üìÑ onlystatic.go
       ‚îÉ  ‚îó‚îÅ üìÑ onlystatic.init.go
       ‚î£‚îÅ üìÅ pythonself
       ‚îÉ  ‚î£‚îÅ üìÑ pythonself.go
       ‚îÉ  ‚îó‚îÅ üìÑ pythonself.init.go
       ‚î£‚îÅ üìÑ README.md
       ‚î£‚îÅ üìÅ submodule
       ‚îÉ  ‚î£‚îÅ üìÅ backreferences
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ backreferences.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ backreferences.init.go
       ‚îÉ  ‚î£‚îÅ üìÅ child
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ child.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ child.init.go
       ‚îÉ  ‚î£‚îÅ üìÅ internal
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ types.go
       ‚îÉ  ‚î£‚îÅ üìÅ isolated
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ isolated.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ isolated.init.go
       ‚îÉ  ‚î£‚îÅ üìÅ nestedsubmodule
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÅ deeplynested
       ‚îÉ  ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ deeplynested.go
       ‚îÉ  ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ deeplynested.init.go
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÅ internal
       ‚îÉ  ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ types.go
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ nestedsubmodule.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ nestedsubmodule.init.go
       ‚îÉ  ‚î£‚îÅ üìÅ param
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ param.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ param.init.go
       ‚îÉ  ‚î£‚îÅ üìÅ returnsparam
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ returnsparam.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ returnsparam.init.go
       ‚îÉ  ‚î£‚îÅ üìÑ submodule.go
       ‚îÉ  ‚îó‚îÅ üìÑ submodule.init.go
       ‚îó‚îÅ üìÑ version
`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/README.md 1`] = `
# jsii Calculator

This library is used to demonstrate and test the features of JSII

## How to use running sum API:

First, create a calculator:

\`\`\`ts
const calculator = new calc.Calculator();
\`\`\`

Then call some operations:


\`\`\`ts fixture=with-calculator
calculator.add(10);
\`\`\`

## Code Samples

\`\`\`ts
/* This is totes a magic comment in here, just you wait! */
const foo = 'bar';
\`\`\`


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/composition/composition.go 1`] = `
package composition

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/composition/internal"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
)

// Abstract operation composed from an expression of other operations.
type CompositeOperation interface {
	scopejsiicalclib.Operation
	DecorationPostfixes() *[]*string
	SetDecorationPostfixes(val *[]*string)
	DecorationPrefixes() *[]*string
	SetDecorationPrefixes(val *[]*string)
	Expression() scopejsiicalclib.NumericValue
	StringStyle() CompositeOperation_CompositionStringStyle
	SetStringStyle(val CompositeOperation_CompositionStringStyle)
	Value() *float64
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for CompositeOperation
type jsiiProxy_CompositeOperation struct {
	internal.Type__scopejsiicalclibOperation
}

func (j *jsiiProxy_CompositeOperation) DecorationPostfixes() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"decorationPostfixes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeOperation) DecorationPrefixes() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"decorationPrefixes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeOperation) Expression() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"expression",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeOperation) StringStyle() CompositeOperation_CompositionStringStyle {
	var returns CompositeOperation_CompositionStringStyle
	_jsii_.Get(
		j,
		"stringStyle",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CompositeOperation) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


func NewCompositeOperation_Override(c CompositeOperation) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.composition.CompositeOperation",
		nil, // no parameters
		c,
	)
}

func (j *jsiiProxy_CompositeOperation) SetDecorationPostfixes(val *[]*string) {
	_jsii_.Set(
		j,
		"decorationPostfixes",
		val,
	)
}

func (j *jsiiProxy_CompositeOperation) SetDecorationPrefixes(val *[]*string) {
	_jsii_.Set(
		j,
		"decorationPrefixes",
		val,
	)
}

func (j *jsiiProxy_CompositeOperation) SetStringStyle(val CompositeOperation_CompositionStringStyle) {
	_jsii_.Set(
		j,
		"stringStyle",
		val,
	)
}

// (deprecated) String representation of the value.
func (c *jsiiProxy_CompositeOperation) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (c *jsiiProxy_CompositeOperation) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Style of .toString() output for CompositeOperation.
type CompositeOperation_CompositionStringStyle string

const (
	CompositeOperation_CompositionStringStyle_NORMAL CompositeOperation_CompositionStringStyle = "NORMAL"
	CompositeOperation_CompositionStringStyle_DECORATED CompositeOperation_CompositionStringStyle = "DECORATED"
)


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/composition/composition.init.go 1`] = `
package composition

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.composition.CompositeOperation",
		reflect.TypeOf((*CompositeOperation)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "decorationPostfixes", GoGetter: "DecorationPostfixes"},
			_jsii_.MemberProperty{JsiiProperty: "decorationPrefixes", GoGetter: "DecorationPrefixes"},
			_jsii_.MemberProperty{JsiiProperty: "expression", GoGetter: "Expression"},
			_jsii_.MemberProperty{JsiiProperty: "stringStyle", GoGetter: "StringStyle"},
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_CompositeOperation{}
			_jsii_.InitJsiiProxy(&j.Type__scopejsiicalclibOperation)
			return &j
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.composition.CompositeOperation.CompositionStringStyle",
		reflect.TypeOf((*CompositeOperation_CompositionStringStyle)(nil)).Elem(),
		map[string]interface{}{
			"NORMAL": CompositeOperation_CompositionStringStyle_NORMAL,
			"DECORATED": CompositeOperation_CompositionStringStyle_DECORATED,
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/composition/internal/types.go 1`] = `
package internal
import (
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
)
type Type__scopejsiicalclibOperation = scopejsiicalclib.Operation

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/derivedclasshasnoproperties/derivedclasshasnoproperties.go 1`] = `
package derivedclasshasnoproperties

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type Base interface {
	Prop() *string
	SetProp(val *string)
}

// The jsii proxy struct for Base
type jsiiProxy_Base struct {
	_ byte // padding
}

func (j *jsiiProxy_Base) Prop() *string {
	var returns *string
	_jsii_.Get(
		j,
		"prop",
		&returns,
	)
	return returns
}


func NewBase() Base {
	_init_.Initialize()

	j := jsiiProxy_Base{}

	_jsii_.Create(
		"jsii-calc.DerivedClassHasNoProperties.Base",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewBase_Override(b Base) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DerivedClassHasNoProperties.Base",
		nil, // no parameters
		b,
	)
}

func (j *jsiiProxy_Base) SetProp(val *string) {
	_jsii_.Set(
		j,
		"prop",
		val,
	)
}

type Derived interface {
	Base
	Prop() *string
	SetProp(val *string)
}

// The jsii proxy struct for Derived
type jsiiProxy_Derived struct {
	jsiiProxy_Base
}

func (j *jsiiProxy_Derived) Prop() *string {
	var returns *string
	_jsii_.Get(
		j,
		"prop",
		&returns,
	)
	return returns
}


func NewDerived() Derived {
	_init_.Initialize()

	j := jsiiProxy_Derived{}

	_jsii_.Create(
		"jsii-calc.DerivedClassHasNoProperties.Derived",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewDerived_Override(d Derived) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DerivedClassHasNoProperties.Derived",
		nil, // no parameters
		d,
	)
}

func (j *jsiiProxy_Derived) SetProp(val *string) {
	_jsii_.Set(
		j,
		"prop",
		val,
	)
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/derivedclasshasnoproperties/derivedclasshasnoproperties.init.go 1`] = `
package derivedclasshasnoproperties

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.DerivedClassHasNoProperties.Base",
		reflect.TypeOf((*Base)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "prop", GoGetter: "Prop"},
		},
		func() interface{} {
			return &jsiiProxy_Base{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DerivedClassHasNoProperties.Derived",
		reflect.TypeOf((*Derived)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "prop", GoGetter: "Prop"},
		},
		func() interface{} {
			j := jsiiProxy_Derived{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_Base)
			return &j
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/go.mod 1`] = `
module github.com/aws/jsii/jsii-calc/go/jsiicalc/v3

go 1.16

require (
	github.com/aws/jsii-runtime-go v0.0.0
	github.com/aws/jsii/jsii-calc/go/jcb v0.0.0
	github.com/aws/jsii/jsii-calc/go/scopejsiicalclib v0.0.0-devpreview
	github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2 v2.1.1 // indirect
)

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceincludesclasses/interfaceinnamespaceincludesclasses.go 1`] = `
package interfaceinnamespaceincludesclasses

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type Foo interface {
	Bar() *string
	SetBar(val *string)
}

// The jsii proxy struct for Foo
type jsiiProxy_Foo struct {
	_ byte // padding
}

func (j *jsiiProxy_Foo) Bar() *string {
	var returns *string
	_jsii_.Get(
		j,
		"bar",
		&returns,
	)
	return returns
}


func NewFoo() Foo {
	_init_.Initialize()

	j := jsiiProxy_Foo{}

	_jsii_.Create(
		"jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewFoo_Override(f Foo) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
		nil, // no parameters
		f,
	)
}

func (j *jsiiProxy_Foo) SetBar(val *string) {
	_jsii_.Set(
		j,
		"bar",
		val,
	)
}

type Hello struct {
	Foo *float64 \`json:"foo"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceincludesclasses/interfaceinnamespaceincludesclasses.init.go 1`] = `
package interfaceinnamespaceincludesclasses

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
		reflect.TypeOf((*Foo)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "bar", GoGetter: "Bar"},
		},
		func() interface{} {
			return &jsiiProxy_Foo{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.InterfaceInNamespaceIncludesClasses.Hello",
		reflect.TypeOf((*Hello)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceonlyinterface/interfaceinnamespaceonlyinterface.go 1`] = `
package interfaceinnamespaceonlyinterface


type Hello struct {
	Foo *float64 \`json:"foo"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceonlyinterface/interfaceinnamespaceonlyinterface.init.go 1`] = `
package interfaceinnamespaceonlyinterface

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterStruct(
		"jsii-calc.InterfaceInNamespaceOnlyInterface.Hello",
		reflect.TypeOf((*Hello)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/internal/types.go 1`] = `
package internal
import (
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/composition"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib/customsubmodulename"
)
type Type__scopejsiicalclibOperation = scopejsiicalclib.Operation
type Type__scopejsiicalclibIFriendly = scopejsiicalclib.IFriendly
type Type__compositionCompositeOperation = composition.CompositeOperation
type Type__customsubmodulenameIReflectable = customsubmodulename.IReflectable

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsii/jsii.go 1`] = `
// Package jsii contains the functionaility needed for jsii packages to
// initialize their dependencies and themselves. Users should never need to use this package
// directly. If you find you need to - please report a bug at
// https://github.com/aws/jsii/issues/new/choose
package jsii

import (
	_                "embed"

	_jsii_           "github.com/aws/jsii-runtime-go"

	jcb              "github.com/aws/jsii/jsii-calc/go/jcb/jsii"
	scopejsiicalclib "github.com/aws/jsii/jsii-calc/go/scopejsiicalclib/jsii"
)

//go:embed jsii-calc-3.20.120.tgz
var tarball []byte

// Initialize loads the necessary packages in the @jsii/kernel to support the enclosing module.
// The implementation is idempotent (and hence safe to be called over and over).
func Initialize() {
	// Ensure all dependencies are initialized
	jcb.Initialize()
	scopejsiicalclib.Initialize()

	// Load this library into the kernel
	_jsii_.Load("jsii-calc", "3.20.120", tarball)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsii/jsii-calc-3.20.120.tgz 1`] = `go/jsiicalc/jsii/jsii-calc-3.20.120.tgz is a tarball`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsiicalc.go 1`] = `
// A simple calcuator built on JSII.
package jsiicalc

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jcb"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/composition"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/internal"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib/customsubmodulename"
)

type AbstractClass interface {
	AbstractClassBase
	IInterfaceImplementedByAbstractClass
	AbstractProperty() *string
	PropFromInterface() *string
	AbstractMethod(name *string) *string
	NonAbstractMethod() *float64
}

// The jsii proxy struct for AbstractClass
type jsiiProxy_AbstractClass struct {
	jsiiProxy_AbstractClassBase
	jsiiProxy_IInterfaceImplementedByAbstractClass
}

func (j *jsiiProxy_AbstractClass) AbstractProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"abstractProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AbstractClass) PropFromInterface() *string {
	var returns *string
	_jsii_.Get(
		j,
		"propFromInterface",
		&returns,
	)
	return returns
}


func NewAbstractClass_Override(a AbstractClass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.AbstractClass",
		nil, // no parameters
		a,
	)
}

func (a *jsiiProxy_AbstractClass) AbstractMethod(name *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"abstractMethod",
		[]interface{}{name},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AbstractClass) NonAbstractMethod() *float64 {
	var returns *float64

	_jsii_.Invoke(
		a,
		"nonAbstractMethod",
		nil, // no parameters
		&returns,
	)

	return returns
}

type AbstractClassBase interface {
	AbstractProperty() *string
}

// The jsii proxy struct for AbstractClassBase
type jsiiProxy_AbstractClassBase struct {
	_ byte // padding
}

func (j *jsiiProxy_AbstractClassBase) AbstractProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"abstractProperty",
		&returns,
	)
	return returns
}


func NewAbstractClassBase_Override(a AbstractClassBase) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.AbstractClassBase",
		nil, // no parameters
		a,
	)
}

type AbstractClassReturner interface {
	ReturnAbstractFromProperty() AbstractClassBase
	GiveMeAbstract() AbstractClass
	GiveMeInterface() IInterfaceImplementedByAbstractClass
}

// The jsii proxy struct for AbstractClassReturner
type jsiiProxy_AbstractClassReturner struct {
	_ byte // padding
}

func (j *jsiiProxy_AbstractClassReturner) ReturnAbstractFromProperty() AbstractClassBase {
	var returns AbstractClassBase
	_jsii_.Get(
		j,
		"returnAbstractFromProperty",
		&returns,
	)
	return returns
}


func NewAbstractClassReturner() AbstractClassReturner {
	_init_.Initialize()

	j := jsiiProxy_AbstractClassReturner{}

	_jsii_.Create(
		"jsii-calc.AbstractClassReturner",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewAbstractClassReturner_Override(a AbstractClassReturner) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.AbstractClassReturner",
		nil, // no parameters
		a,
	)
}

func (a *jsiiProxy_AbstractClassReturner) GiveMeAbstract() AbstractClass {
	var returns AbstractClass

	_jsii_.Invoke(
		a,
		"giveMeAbstract",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AbstractClassReturner) GiveMeInterface() IInterfaceImplementedByAbstractClass {
	var returns IInterfaceImplementedByAbstractClass

	_jsii_.Invoke(
		a,
		"giveMeInterface",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Ensures abstract members implementations correctly register overrides in various languages.
type AbstractSuite interface {
	Property() *string
	SomeMethod(str *string) *string
	WorkItAll(seed *string) *string
}

// The jsii proxy struct for AbstractSuite
type jsiiProxy_AbstractSuite struct {
	_ byte // padding
}

func (j *jsiiProxy_AbstractSuite) Property() *string {
	var returns *string
	_jsii_.Get(
		j,
		"property",
		&returns,
	)
	return returns
}


func NewAbstractSuite_Override(a AbstractSuite) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.AbstractSuite",
		nil, // no parameters
		a,
	)
}

func (j *jsiiProxy_AbstractSuite) SetProperty(val *string) {
	_jsii_.Set(
		j,
		"property",
		val,
	)
}

func (a *jsiiProxy_AbstractSuite) SomeMethod(str *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"someMethod",
		[]interface{}{str},
		&returns,
	)

	return returns
}

// Sets \`seed\` to \`this.property\`, then calls \`someMethod\` with \`this.property\` and returns the result.
func (a *jsiiProxy_AbstractSuite) WorkItAll(seed *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"workItAll",
		[]interface{}{seed},
		&returns,
	)

	return returns
}

// The "+" binary operation.
type Add interface {
	BinaryOperation
	Lhs() scopejsiicalclib.NumericValue
	Rhs() scopejsiicalclib.NumericValue
	Value() *float64
	Hello() *string
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for Add
type jsiiProxy_Add struct {
	jsiiProxy_BinaryOperation
}

func (j *jsiiProxy_Add) Lhs() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"lhs",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Add) Rhs() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"rhs",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Add) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


// Creates a BinaryOperation.
func NewAdd(lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) Add {
	_init_.Initialize()

	j := jsiiProxy_Add{}

	_jsii_.Create(
		"jsii-calc.Add",
		[]interface{}{lhs, rhs},
		&j,
	)

	return &j
}

// Creates a BinaryOperation.
func NewAdd_Override(a Add, lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Add",
		[]interface{}{lhs, rhs},
		a,
	)
}

// (deprecated) Say hello!
func (a *jsiiProxy_Add) Hello() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"hello",
		nil, // no parameters
		&returns,
	)

	return returns
}

// (deprecated) String representation of the value.
func (a *jsiiProxy_Add) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (a *jsiiProxy_Add) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

// This class includes property for all types supported by jsii.
//
// The setters will validate
// that the value set is of the expected type and throw otherwise.
type AllTypes interface {
	AnyArrayProperty() *[]interface{}
	SetAnyArrayProperty(val *[]interface{})
	AnyMapProperty() *map[string]interface{}
	SetAnyMapProperty(val *map[string]interface{})
	AnyProperty() interface{}
	SetAnyProperty(val interface{})
	ArrayProperty() *[]*string
	SetArrayProperty(val *[]*string)
	BooleanProperty() *bool
	SetBooleanProperty(val *bool)
	DateProperty() *string
	SetDateProperty(val *string)
	EnumProperty() AllTypesEnum
	SetEnumProperty(val AllTypesEnum)
	EnumPropertyValue() *float64
	JsonProperty() *map[string]interface{}
	SetJsonProperty(val *map[string]interface{})
	MapProperty() *map[string]scopejsiicalclib.Number
	SetMapProperty(val *map[string]scopejsiicalclib.Number)
	NumberProperty() *float64
	SetNumberProperty(val *float64)
	OptionalEnumValue() StringEnum
	SetOptionalEnumValue(val StringEnum)
	StringProperty() *string
	SetStringProperty(val *string)
	UnionArrayProperty() *[]interface{}
	SetUnionArrayProperty(val *[]interface{})
	UnionMapProperty() *map[string]interface{}
	SetUnionMapProperty(val *map[string]interface{})
	UnionProperty() interface{}
	SetUnionProperty(val interface{})
	UnknownArrayProperty() *[]interface{}
	SetUnknownArrayProperty(val *[]interface{})
	UnknownMapProperty() *map[string]interface{}
	SetUnknownMapProperty(val *map[string]interface{})
	UnknownProperty() interface{}
	SetUnknownProperty(val interface{})
	AnyIn(inp interface{})
	AnyOut() interface{}
	EnumMethod(value StringEnum) StringEnum
}

// The jsii proxy struct for AllTypes
type jsiiProxy_AllTypes struct {
	_ byte // padding
}

func (j *jsiiProxy_AllTypes) AnyArrayProperty() *[]interface{} {
	var returns *[]interface{}
	_jsii_.Get(
		j,
		"anyArrayProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) AnyMapProperty() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"anyMapProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) AnyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"anyProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) ArrayProperty() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"arrayProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) BooleanProperty() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"booleanProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) DateProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dateProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) EnumProperty() AllTypesEnum {
	var returns AllTypesEnum
	_jsii_.Get(
		j,
		"enumProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) EnumPropertyValue() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"enumPropertyValue",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) JsonProperty() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"jsonProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) MapProperty() *map[string]scopejsiicalclib.Number {
	var returns *map[string]scopejsiicalclib.Number
	_jsii_.Get(
		j,
		"mapProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) NumberProperty() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"numberProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) OptionalEnumValue() StringEnum {
	var returns StringEnum
	_jsii_.Get(
		j,
		"optionalEnumValue",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) StringProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"stringProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) UnionArrayProperty() *[]interface{} {
	var returns *[]interface{}
	_jsii_.Get(
		j,
		"unionArrayProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) UnionMapProperty() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"unionMapProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) UnionProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"unionProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) UnknownArrayProperty() *[]interface{} {
	var returns *[]interface{}
	_jsii_.Get(
		j,
		"unknownArrayProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) UnknownMapProperty() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"unknownMapProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AllTypes) UnknownProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"unknownProperty",
		&returns,
	)
	return returns
}


func NewAllTypes() AllTypes {
	_init_.Initialize()

	j := jsiiProxy_AllTypes{}

	_jsii_.Create(
		"jsii-calc.AllTypes",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewAllTypes_Override(a AllTypes) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.AllTypes",
		nil, // no parameters
		a,
	)
}

func (j *jsiiProxy_AllTypes) SetAnyArrayProperty(val *[]interface{}) {
	_jsii_.Set(
		j,
		"anyArrayProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetAnyMapProperty(val *map[string]interface{}) {
	_jsii_.Set(
		j,
		"anyMapProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetAnyProperty(val interface{}) {
	_jsii_.Set(
		j,
		"anyProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetArrayProperty(val *[]*string) {
	_jsii_.Set(
		j,
		"arrayProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetBooleanProperty(val *bool) {
	_jsii_.Set(
		j,
		"booleanProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetDateProperty(val *string) {
	_jsii_.Set(
		j,
		"dateProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetEnumProperty(val AllTypesEnum) {
	_jsii_.Set(
		j,
		"enumProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetJsonProperty(val *map[string]interface{}) {
	_jsii_.Set(
		j,
		"jsonProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetMapProperty(val *map[string]scopejsiicalclib.Number) {
	_jsii_.Set(
		j,
		"mapProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetNumberProperty(val *float64) {
	_jsii_.Set(
		j,
		"numberProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetOptionalEnumValue(val StringEnum) {
	_jsii_.Set(
		j,
		"optionalEnumValue",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetStringProperty(val *string) {
	_jsii_.Set(
		j,
		"stringProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetUnionArrayProperty(val *[]interface{}) {
	_jsii_.Set(
		j,
		"unionArrayProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetUnionMapProperty(val *map[string]interface{}) {
	_jsii_.Set(
		j,
		"unionMapProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetUnionProperty(val interface{}) {
	_jsii_.Set(
		j,
		"unionProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetUnknownArrayProperty(val *[]interface{}) {
	_jsii_.Set(
		j,
		"unknownArrayProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetUnknownMapProperty(val *map[string]interface{}) {
	_jsii_.Set(
		j,
		"unknownMapProperty",
		val,
	)
}

func (j *jsiiProxy_AllTypes) SetUnknownProperty(val interface{}) {
	_jsii_.Set(
		j,
		"unknownProperty",
		val,
	)
}

func (a *jsiiProxy_AllTypes) AnyIn(inp interface{}) {
	_jsii_.InvokeVoid(
		a,
		"anyIn",
		[]interface{}{inp},
	)
}

func (a *jsiiProxy_AllTypes) AnyOut() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"anyOut",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AllTypes) EnumMethod(value StringEnum) StringEnum {
	var returns StringEnum

	_jsii_.Invoke(
		a,
		"enumMethod",
		[]interface{}{value},
		&returns,
	)

	return returns
}

type AllTypesEnum string

const (
	AllTypesEnum_MY_ENUM_VALUE AllTypesEnum = "MY_ENUM_VALUE"
	AllTypesEnum_YOUR_ENUM_VALUE AllTypesEnum = "YOUR_ENUM_VALUE"
	AllTypesEnum_THIS_IS_GREAT AllTypesEnum = "THIS_IS_GREAT"
)

type AllowedMethodNames interface {
	GetBar(_p1 *string, _p2 *float64)
	GetFoo(withParam *string) *string
	SetBar(_x *string, _y *float64, _z *bool)
	SetFoo(_x *string, _y *float64)
}

// The jsii proxy struct for AllowedMethodNames
type jsiiProxy_AllowedMethodNames struct {
	_ byte // padding
}

func NewAllowedMethodNames() AllowedMethodNames {
	_init_.Initialize()

	j := jsiiProxy_AllowedMethodNames{}

	_jsii_.Create(
		"jsii-calc.AllowedMethodNames",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewAllowedMethodNames_Override(a AllowedMethodNames) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.AllowedMethodNames",
		nil, // no parameters
		a,
	)
}

func (a *jsiiProxy_AllowedMethodNames) GetBar(_p1 *string, _p2 *float64) {
	_jsii_.InvokeVoid(
		a,
		"getBar",
		[]interface{}{_p1, _p2},
	)
}

// getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay.
func (a *jsiiProxy_AllowedMethodNames) GetFoo(withParam *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getFoo",
		[]interface{}{withParam},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AllowedMethodNames) SetBar(_x *string, _y *float64, _z *bool) {
	_jsii_.InvokeVoid(
		a,
		"setBar",
		[]interface{}{_x, _y, _z},
	)
}

// setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay.
func (a *jsiiProxy_AllowedMethodNames) SetFoo(_x *string, _y *float64) {
	_jsii_.InvokeVoid(
		a,
		"setFoo",
		[]interface{}{_x, _y},
	)
}

type AmbiguousParameters interface {
	Props() *StructParameterType
	Scope() Bell
}

// The jsii proxy struct for AmbiguousParameters
type jsiiProxy_AmbiguousParameters struct {
	_ byte // padding
}

func (j *jsiiProxy_AmbiguousParameters) Props() *StructParameterType {
	var returns *StructParameterType
	_jsii_.Get(
		j,
		"props",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AmbiguousParameters) Scope() Bell {
	var returns Bell
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}


func NewAmbiguousParameters(scope Bell, props *StructParameterType) AmbiguousParameters {
	_init_.Initialize()

	j := jsiiProxy_AmbiguousParameters{}

	_jsii_.Create(
		"jsii-calc.AmbiguousParameters",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

func NewAmbiguousParameters_Override(a AmbiguousParameters, scope Bell, props *StructParameterType) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.AmbiguousParameters",
		[]interface{}{scope, props},
		a,
	)
}

type AnonymousImplementationProvider interface {
	IAnonymousImplementationProvider
	ProvideAsClass() Implementation
	ProvideAsInterface() IAnonymouslyImplementMe
}

// The jsii proxy struct for AnonymousImplementationProvider
type jsiiProxy_AnonymousImplementationProvider struct {
	jsiiProxy_IAnonymousImplementationProvider
}

func NewAnonymousImplementationProvider() AnonymousImplementationProvider {
	_init_.Initialize()

	j := jsiiProxy_AnonymousImplementationProvider{}

	_jsii_.Create(
		"jsii-calc.AnonymousImplementationProvider",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewAnonymousImplementationProvider_Override(a AnonymousImplementationProvider) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.AnonymousImplementationProvider",
		nil, // no parameters
		a,
	)
}

func (a *jsiiProxy_AnonymousImplementationProvider) ProvideAsClass() Implementation {
	var returns Implementation

	_jsii_.Invoke(
		a,
		"provideAsClass",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AnonymousImplementationProvider) ProvideAsInterface() IAnonymouslyImplementMe {
	var returns IAnonymouslyImplementMe

	_jsii_.Invoke(
		a,
		"provideAsInterface",
		nil, // no parameters
		&returns,
	)

	return returns
}

type AsyncVirtualMethods interface {
	CallMe() *float64
	CallMe2() *float64
	CallMeDoublePromise() *float64
	DontOverrideMe() *float64
	OverrideMe(mult *float64) *float64
	OverrideMeToo() *float64
}

// The jsii proxy struct for AsyncVirtualMethods
type jsiiProxy_AsyncVirtualMethods struct {
	_ byte // padding
}

func NewAsyncVirtualMethods() AsyncVirtualMethods {
	_init_.Initialize()

	j := jsiiProxy_AsyncVirtualMethods{}

	_jsii_.Create(
		"jsii-calc.AsyncVirtualMethods",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewAsyncVirtualMethods_Override(a AsyncVirtualMethods) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.AsyncVirtualMethods",
		nil, // no parameters
		a,
	)
}

func (a *jsiiProxy_AsyncVirtualMethods) CallMe() *float64 {
	var returns *float64

	_jsii_.Invoke(
		a,
		"callMe",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Just calls "overrideMeToo".
func (a *jsiiProxy_AsyncVirtualMethods) CallMe2() *float64 {
	var returns *float64

	_jsii_.Invoke(
		a,
		"callMe2",
		nil, // no parameters
		&returns,
	)

	return returns
}

// This method calls the "callMe" async method indirectly, which will then invoke a virtual method.
//
// This is a "double promise" situation, which
// means that callbacks are not going to be available immediate, but only
// after an "immediates" cycle.
func (a *jsiiProxy_AsyncVirtualMethods) CallMeDoublePromise() *float64 {
	var returns *float64

	_jsii_.Invoke(
		a,
		"callMeDoublePromise",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AsyncVirtualMethods) DontOverrideMe() *float64 {
	var returns *float64

	_jsii_.Invoke(
		a,
		"dontOverrideMe",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AsyncVirtualMethods) OverrideMe(mult *float64) *float64 {
	var returns *float64

	_jsii_.Invoke(
		a,
		"overrideMe",
		[]interface{}{mult},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AsyncVirtualMethods) OverrideMeToo() *float64 {
	var returns *float64

	_jsii_.Invoke(
		a,
		"overrideMeToo",
		nil, // no parameters
		&returns,
	)

	return returns
}

type AugmentableClass interface {
	MethodOne()
	MethodTwo()
}

// The jsii proxy struct for AugmentableClass
type jsiiProxy_AugmentableClass struct {
	_ byte // padding
}

func NewAugmentableClass() AugmentableClass {
	_init_.Initialize()

	j := jsiiProxy_AugmentableClass{}

	_jsii_.Create(
		"jsii-calc.AugmentableClass",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewAugmentableClass_Override(a AugmentableClass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.AugmentableClass",
		nil, // no parameters
		a,
	)
}

func (a *jsiiProxy_AugmentableClass) MethodOne() {
	_jsii_.InvokeVoid(
		a,
		"methodOne",
		nil, // no parameters
	)
}

func (a *jsiiProxy_AugmentableClass) MethodTwo() {
	_jsii_.InvokeVoid(
		a,
		"methodTwo",
		nil, // no parameters
	)
}

type BaseJsii976 interface {
}

// The jsii proxy struct for BaseJsii976
type jsiiProxy_BaseJsii976 struct {
	_ byte // padding
}

func NewBaseJsii976() BaseJsii976 {
	_init_.Initialize()

	j := jsiiProxy_BaseJsii976{}

	_jsii_.Create(
		"jsii-calc.BaseJsii976",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewBaseJsii976_Override(b BaseJsii976) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.BaseJsii976",
		nil, // no parameters
		b,
	)
}

type Bell interface {
	IBell
	Rung() *bool
	SetRung(val *bool)
	Ring()
}

// The jsii proxy struct for Bell
type jsiiProxy_Bell struct {
	jsiiProxy_IBell
}

func (j *jsiiProxy_Bell) Rung() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"rung",
		&returns,
	)
	return returns
}


func NewBell() Bell {
	_init_.Initialize()

	j := jsiiProxy_Bell{}

	_jsii_.Create(
		"jsii-calc.Bell",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewBell_Override(b Bell) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Bell",
		nil, // no parameters
		b,
	)
}

func (j *jsiiProxy_Bell) SetRung(val *bool) {
	_jsii_.Set(
		j,
		"rung",
		val,
	)
}

func (b *jsiiProxy_Bell) Ring() {
	_jsii_.InvokeVoid(
		b,
		"ring",
		nil, // no parameters
	)
}

// Represents an operation with two operands.
type BinaryOperation interface {
	scopejsiicalclib.Operation
	scopejsiicalclib.IFriendly
	Lhs() scopejsiicalclib.NumericValue
	Rhs() scopejsiicalclib.NumericValue
	Value() *float64
	Hello() *string
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for BinaryOperation
type jsiiProxy_BinaryOperation struct {
	internal.Type__scopejsiicalclibOperation
	internal.Type__scopejsiicalclibIFriendly
}

func (j *jsiiProxy_BinaryOperation) Lhs() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"lhs",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BinaryOperation) Rhs() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"rhs",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BinaryOperation) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


// Creates a BinaryOperation.
func NewBinaryOperation_Override(b BinaryOperation, lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.BinaryOperation",
		[]interface{}{lhs, rhs},
		b,
	)
}

// (deprecated) Say hello!
func (b *jsiiProxy_BinaryOperation) Hello() *string {
	var returns *string

	_jsii_.Invoke(
		b,
		"hello",
		nil, // no parameters
		&returns,
	)

	return returns
}

// String representation of the value.
// Deprecated.
func (b *jsiiProxy_BinaryOperation) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		b,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (b *jsiiProxy_BinaryOperation) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		b,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

// See https://github.com/aws/aws-cdk/issues/7977.
type BurriedAnonymousObject interface {
	Check() *bool
	GiveItBack(value interface{}) interface{}
}

// The jsii proxy struct for BurriedAnonymousObject
type jsiiProxy_BurriedAnonymousObject struct {
	_ byte // padding
}

func NewBurriedAnonymousObject_Override(b BurriedAnonymousObject) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.BurriedAnonymousObject",
		nil, // no parameters
		b,
	)
}

func (b *jsiiProxy_BurriedAnonymousObject) Check() *bool {
	var returns *bool

	_jsii_.Invoke(
		b,
		"check",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Implement this method and have it return it's parameter.
//
// Returns: \`value\`
func (b *jsiiProxy_BurriedAnonymousObject) GiveItBack(value interface{}) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		b,
		"giveItBack",
		[]interface{}{value},
		&returns,
	)

	return returns
}

// A calculator which maintains a current value and allows adding operations.
//
// Here's how you use it:
//
// \`\`\`ts
// const calculator = new calc.Calculator();
// calculator.add(5);
// calculator.mul(3);
// console.log(calculator.expression.value);
// \`\`\`
//
// I will repeat this example again, but in an @example tag.
//
// TODO: EXAMPLE
//
type Calculator interface {
	composition.CompositeOperation
	Curr() scopejsiicalclib.NumericValue
	SetCurr(val scopejsiicalclib.NumericValue)
	DecorationPostfixes() *[]*string
	SetDecorationPostfixes(val *[]*string)
	DecorationPrefixes() *[]*string
	SetDecorationPrefixes(val *[]*string)
	Expression() scopejsiicalclib.NumericValue
	MaxValue() *float64
	SetMaxValue(val *float64)
	OperationsLog() *[]scopejsiicalclib.NumericValue
	OperationsMap() *map[string]*[]scopejsiicalclib.NumericValue
	StringStyle() composition.CompositeOperation_CompositionStringStyle
	SetStringStyle(val composition.CompositeOperation_CompositionStringStyle)
	UnionProperty() interface{}
	SetUnionProperty(val interface{})
	Value() *float64
	Add(value *float64)
	Mul(value *float64)
	Neg()
	Pow(value *float64)
	ReadUnionValue() *float64
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for Calculator
type jsiiProxy_Calculator struct {
	internal.Type__compositionCompositeOperation
}

func (j *jsiiProxy_Calculator) Curr() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"curr",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Calculator) DecorationPostfixes() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"decorationPostfixes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Calculator) DecorationPrefixes() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"decorationPrefixes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Calculator) Expression() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"expression",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Calculator) MaxValue() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"maxValue",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Calculator) OperationsLog() *[]scopejsiicalclib.NumericValue {
	var returns *[]scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"operationsLog",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Calculator) OperationsMap() *map[string]*[]scopejsiicalclib.NumericValue {
	var returns *map[string]*[]scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"operationsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Calculator) StringStyle() composition.CompositeOperation_CompositionStringStyle {
	var returns composition.CompositeOperation_CompositionStringStyle
	_jsii_.Get(
		j,
		"stringStyle",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Calculator) UnionProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"unionProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Calculator) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


// Creates a Calculator object.
func NewCalculator(props *CalculatorProps) Calculator {
	_init_.Initialize()

	j := jsiiProxy_Calculator{}

	_jsii_.Create(
		"jsii-calc.Calculator",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Creates a Calculator object.
func NewCalculator_Override(c Calculator, props *CalculatorProps) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Calculator",
		[]interface{}{props},
		c,
	)
}

func (j *jsiiProxy_Calculator) SetCurr(val scopejsiicalclib.NumericValue) {
	_jsii_.Set(
		j,
		"curr",
		val,
	)
}

func (j *jsiiProxy_Calculator) SetDecorationPostfixes(val *[]*string) {
	_jsii_.Set(
		j,
		"decorationPostfixes",
		val,
	)
}

func (j *jsiiProxy_Calculator) SetDecorationPrefixes(val *[]*string) {
	_jsii_.Set(
		j,
		"decorationPrefixes",
		val,
	)
}

func (j *jsiiProxy_Calculator) SetMaxValue(val *float64) {
	_jsii_.Set(
		j,
		"maxValue",
		val,
	)
}

func (j *jsiiProxy_Calculator) SetStringStyle(val composition.CompositeOperation_CompositionStringStyle) {
	_jsii_.Set(
		j,
		"stringStyle",
		val,
	)
}

func (j *jsiiProxy_Calculator) SetUnionProperty(val interface{}) {
	_jsii_.Set(
		j,
		"unionProperty",
		val,
	)
}

// Adds a number to the current value.
func (c *jsiiProxy_Calculator) Add(value *float64) {
	_jsii_.InvokeVoid(
		c,
		"add",
		[]interface{}{value},
	)
}

// Multiplies the current value by a number.
func (c *jsiiProxy_Calculator) Mul(value *float64) {
	_jsii_.InvokeVoid(
		c,
		"mul",
		[]interface{}{value},
	)
}

// Negates the current value.
func (c *jsiiProxy_Calculator) Neg() {
	_jsii_.InvokeVoid(
		c,
		"neg",
		nil, // no parameters
	)
}

// Raises the current value by a power.
func (c *jsiiProxy_Calculator) Pow(value *float64) {
	_jsii_.InvokeVoid(
		c,
		"pow",
		[]interface{}{value},
	)
}

// Returns teh value of the union property (if defined).
func (c *jsiiProxy_Calculator) ReadUnionValue() *float64 {
	var returns *float64

	_jsii_.Invoke(
		c,
		"readUnionValue",
		nil, // no parameters
		&returns,
	)

	return returns
}

// (deprecated) String representation of the value.
func (c *jsiiProxy_Calculator) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (c *jsiiProxy_Calculator) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties for Calculator.
type CalculatorProps struct {
	// The initial value of the calculator.
	//
	// NOTE: Any number works here, it's fine.
	InitialValue *float64 \`json:"initialValue"\`
	// The maximum value the calculator can store.
	MaximumValue *float64 \`json:"maximumValue"\`
}

type ChildStruct982 struct {
	Foo *string \`json:"foo"\`
	Bar *float64 \`json:"bar"\`
}

type ClassThatImplementsTheInternalInterface interface {
	INonInternalInterface
	A() *string
	SetA(val *string)
	B() *string
	SetB(val *string)
	C() *string
	SetC(val *string)
	D() *string
	SetD(val *string)
}

// The jsii proxy struct for ClassThatImplementsTheInternalInterface
type jsiiProxy_ClassThatImplementsTheInternalInterface struct {
	jsiiProxy_INonInternalInterface
}

func (j *jsiiProxy_ClassThatImplementsTheInternalInterface) A() *string {
	var returns *string
	_jsii_.Get(
		j,
		"a",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ClassThatImplementsTheInternalInterface) B() *string {
	var returns *string
	_jsii_.Get(
		j,
		"b",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ClassThatImplementsTheInternalInterface) C() *string {
	var returns *string
	_jsii_.Get(
		j,
		"c",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ClassThatImplementsTheInternalInterface) D() *string {
	var returns *string
	_jsii_.Get(
		j,
		"d",
		&returns,
	)
	return returns
}


func NewClassThatImplementsTheInternalInterface() ClassThatImplementsTheInternalInterface {
	_init_.Initialize()

	j := jsiiProxy_ClassThatImplementsTheInternalInterface{}

	_jsii_.Create(
		"jsii-calc.ClassThatImplementsTheInternalInterface",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewClassThatImplementsTheInternalInterface_Override(c ClassThatImplementsTheInternalInterface) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ClassThatImplementsTheInternalInterface",
		nil, // no parameters
		c,
	)
}

func (j *jsiiProxy_ClassThatImplementsTheInternalInterface) SetA(val *string) {
	_jsii_.Set(
		j,
		"a",
		val,
	)
}

func (j *jsiiProxy_ClassThatImplementsTheInternalInterface) SetB(val *string) {
	_jsii_.Set(
		j,
		"b",
		val,
	)
}

func (j *jsiiProxy_ClassThatImplementsTheInternalInterface) SetC(val *string) {
	_jsii_.Set(
		j,
		"c",
		val,
	)
}

func (j *jsiiProxy_ClassThatImplementsTheInternalInterface) SetD(val *string) {
	_jsii_.Set(
		j,
		"d",
		val,
	)
}

type ClassThatImplementsThePrivateInterface interface {
	INonInternalInterface
	A() *string
	SetA(val *string)
	B() *string
	SetB(val *string)
	C() *string
	SetC(val *string)
	E() *string
	SetE(val *string)
}

// The jsii proxy struct for ClassThatImplementsThePrivateInterface
type jsiiProxy_ClassThatImplementsThePrivateInterface struct {
	jsiiProxy_INonInternalInterface
}

func (j *jsiiProxy_ClassThatImplementsThePrivateInterface) A() *string {
	var returns *string
	_jsii_.Get(
		j,
		"a",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ClassThatImplementsThePrivateInterface) B() *string {
	var returns *string
	_jsii_.Get(
		j,
		"b",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ClassThatImplementsThePrivateInterface) C() *string {
	var returns *string
	_jsii_.Get(
		j,
		"c",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ClassThatImplementsThePrivateInterface) E() *string {
	var returns *string
	_jsii_.Get(
		j,
		"e",
		&returns,
	)
	return returns
}


func NewClassThatImplementsThePrivateInterface() ClassThatImplementsThePrivateInterface {
	_init_.Initialize()

	j := jsiiProxy_ClassThatImplementsThePrivateInterface{}

	_jsii_.Create(
		"jsii-calc.ClassThatImplementsThePrivateInterface",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewClassThatImplementsThePrivateInterface_Override(c ClassThatImplementsThePrivateInterface) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ClassThatImplementsThePrivateInterface",
		nil, // no parameters
		c,
	)
}

func (j *jsiiProxy_ClassThatImplementsThePrivateInterface) SetA(val *string) {
	_jsii_.Set(
		j,
		"a",
		val,
	)
}

func (j *jsiiProxy_ClassThatImplementsThePrivateInterface) SetB(val *string) {
	_jsii_.Set(
		j,
		"b",
		val,
	)
}

func (j *jsiiProxy_ClassThatImplementsThePrivateInterface) SetC(val *string) {
	_jsii_.Set(
		j,
		"c",
		val,
	)
}

func (j *jsiiProxy_ClassThatImplementsThePrivateInterface) SetE(val *string) {
	_jsii_.Set(
		j,
		"e",
		val,
	)
}

type ClassWithCollections interface {
	Array() *[]*string
	SetArray(val *[]*string)
	Map() *map[string]*string
	SetMap(val *map[string]*string)
}

// The jsii proxy struct for ClassWithCollections
type jsiiProxy_ClassWithCollections struct {
	_ byte // padding
}

func (j *jsiiProxy_ClassWithCollections) Array() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"array",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ClassWithCollections) Map() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"map",
		&returns,
	)
	return returns
}


func NewClassWithCollections(map_ *map[string]*string, array *[]*string) ClassWithCollections {
	_init_.Initialize()

	j := jsiiProxy_ClassWithCollections{}

	_jsii_.Create(
		"jsii-calc.ClassWithCollections",
		[]interface{}{map_, array},
		&j,
	)

	return &j
}

func NewClassWithCollections_Override(c ClassWithCollections, map_ *map[string]*string, array *[]*string) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ClassWithCollections",
		[]interface{}{map_, array},
		c,
	)
}

func (j *jsiiProxy_ClassWithCollections) SetArray(val *[]*string) {
	_jsii_.Set(
		j,
		"array",
		val,
	)
}

func (j *jsiiProxy_ClassWithCollections) SetMap(val *map[string]*string) {
	_jsii_.Set(
		j,
		"map",
		val,
	)
}

func ClassWithCollections_CreateAList() *[]*string {
	_init_.Initialize()

	var returns *[]*string

	_jsii_.StaticInvoke(
		"jsii-calc.ClassWithCollections",
		"createAList",
		nil, // no parameters
		&returns,
	)

	return returns
}

func ClassWithCollections_CreateAMap() *map[string]*string {
	_init_.Initialize()

	var returns *map[string]*string

	_jsii_.StaticInvoke(
		"jsii-calc.ClassWithCollections",
		"createAMap",
		nil, // no parameters
		&returns,
	)

	return returns
}

func ClassWithCollections_StaticArray() *[]*string {
	_init_.Initialize()
	var returns *[]*string
	_jsii_.StaticGet(
		"jsii-calc.ClassWithCollections",
		"staticArray",
		&returns,
	)
	return returns
}

func ClassWithCollections_SetStaticArray(val *[]*string) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.ClassWithCollections",
		"staticArray",
		val,
	)
}

func ClassWithCollections_StaticMap() *map[string]*string {
	_init_.Initialize()
	var returns *map[string]*string
	_jsii_.StaticGet(
		"jsii-calc.ClassWithCollections",
		"staticMap",
		&returns,
	)
	return returns
}

func ClassWithCollections_SetStaticMap(val *map[string]*string) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.ClassWithCollections",
		"staticMap",
		val,
	)
}

// This class has docs.
//
// The docs are great. They're a bunch of tags.
//
// TODO: EXAMPLE
//
// See: https://aws.amazon.com/
//
type ClassWithDocs interface {
}

// The jsii proxy struct for ClassWithDocs
type jsiiProxy_ClassWithDocs struct {
	_ byte // padding
}

func NewClassWithDocs() ClassWithDocs {
	_init_.Initialize()

	j := jsiiProxy_ClassWithDocs{}

	_jsii_.Create(
		"jsii-calc.ClassWithDocs",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewClassWithDocs_Override(c ClassWithDocs) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ClassWithDocs",
		nil, // no parameters
		c,
	)
}

type ClassWithJavaReservedWords interface {
	Int() *string
	Import(assert *string) *string
}

// The jsii proxy struct for ClassWithJavaReservedWords
type jsiiProxy_ClassWithJavaReservedWords struct {
	_ byte // padding
}

func (j *jsiiProxy_ClassWithJavaReservedWords) Int() *string {
	var returns *string
	_jsii_.Get(
		j,
		"int",
		&returns,
	)
	return returns
}


func NewClassWithJavaReservedWords(int *string) ClassWithJavaReservedWords {
	_init_.Initialize()

	j := jsiiProxy_ClassWithJavaReservedWords{}

	_jsii_.Create(
		"jsii-calc.ClassWithJavaReservedWords",
		[]interface{}{int},
		&j,
	)

	return &j
}

func NewClassWithJavaReservedWords_Override(c ClassWithJavaReservedWords, int *string) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ClassWithJavaReservedWords",
		[]interface{}{int},
		c,
	)
}

func (c *jsiiProxy_ClassWithJavaReservedWords) Import(assert *string) *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"import",
		[]interface{}{assert},
		&returns,
	)

	return returns
}

type ClassWithMutableObjectLiteralProperty interface {
	MutableObject() IMutableObjectLiteral
	SetMutableObject(val IMutableObjectLiteral)
}

// The jsii proxy struct for ClassWithMutableObjectLiteralProperty
type jsiiProxy_ClassWithMutableObjectLiteralProperty struct {
	_ byte // padding
}

func (j *jsiiProxy_ClassWithMutableObjectLiteralProperty) MutableObject() IMutableObjectLiteral {
	var returns IMutableObjectLiteral
	_jsii_.Get(
		j,
		"mutableObject",
		&returns,
	)
	return returns
}


func NewClassWithMutableObjectLiteralProperty() ClassWithMutableObjectLiteralProperty {
	_init_.Initialize()

	j := jsiiProxy_ClassWithMutableObjectLiteralProperty{}

	_jsii_.Create(
		"jsii-calc.ClassWithMutableObjectLiteralProperty",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewClassWithMutableObjectLiteralProperty_Override(c ClassWithMutableObjectLiteralProperty) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ClassWithMutableObjectLiteralProperty",
		nil, // no parameters
		c,
	)
}

func (j *jsiiProxy_ClassWithMutableObjectLiteralProperty) SetMutableObject(val IMutableObjectLiteral) {
	_jsii_.Set(
		j,
		"mutableObject",
		val,
	)
}

// Class that implements interface properties automatically, but using a private constructor.
type ClassWithPrivateConstructorAndAutomaticProperties interface {
	IInterfaceWithProperties
	ReadOnlyString() *string
	ReadWriteString() *string
	SetReadWriteString(val *string)
}

// The jsii proxy struct for ClassWithPrivateConstructorAndAutomaticProperties
type jsiiProxy_ClassWithPrivateConstructorAndAutomaticProperties struct {
	jsiiProxy_IInterfaceWithProperties
}

func (j *jsiiProxy_ClassWithPrivateConstructorAndAutomaticProperties) ReadOnlyString() *string {
	var returns *string
	_jsii_.Get(
		j,
		"readOnlyString",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ClassWithPrivateConstructorAndAutomaticProperties) ReadWriteString() *string {
	var returns *string
	_jsii_.Get(
		j,
		"readWriteString",
		&returns,
	)
	return returns
}


func (j *jsiiProxy_ClassWithPrivateConstructorAndAutomaticProperties) SetReadWriteString(val *string) {
	_jsii_.Set(
		j,
		"readWriteString",
		val,
	)
}

func ClassWithPrivateConstructorAndAutomaticProperties_Create(readOnlyString *string, readWriteString *string) ClassWithPrivateConstructorAndAutomaticProperties {
	_init_.Initialize()

	var returns ClassWithPrivateConstructorAndAutomaticProperties

	_jsii_.StaticInvoke(
		"jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties",
		"create",
		[]interface{}{readOnlyString, readWriteString},
		&returns,
	)

	return returns
}

// This tries to confuse Jackson by having overloaded property setters.
// See: https://github.com/aws/aws-cdk/issues/4080
//
type ConfusingToJackson interface {
	UnionProperty() interface{}
	SetUnionProperty(val interface{})
}

// The jsii proxy struct for ConfusingToJackson
type jsiiProxy_ConfusingToJackson struct {
	_ byte // padding
}

func (j *jsiiProxy_ConfusingToJackson) UnionProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"unionProperty",
		&returns,
	)
	return returns
}


func (j *jsiiProxy_ConfusingToJackson) SetUnionProperty(val interface{}) {
	_jsii_.Set(
		j,
		"unionProperty",
		val,
	)
}

func ConfusingToJackson_MakeInstance() ConfusingToJackson {
	_init_.Initialize()

	var returns ConfusingToJackson

	_jsii_.StaticInvoke(
		"jsii-calc.ConfusingToJackson",
		"makeInstance",
		nil, // no parameters
		&returns,
	)

	return returns
}

func ConfusingToJackson_MakeStructInstance() *ConfusingToJacksonStruct {
	_init_.Initialize()

	var returns *ConfusingToJacksonStruct

	_jsii_.StaticInvoke(
		"jsii-calc.ConfusingToJackson",
		"makeStructInstance",
		nil, // no parameters
		&returns,
	)

	return returns
}

type ConfusingToJacksonStruct struct {
	UnionProperty interface{} \`json:"unionProperty"\`
}

type ConstructorPassesThisOut interface {
}

// The jsii proxy struct for ConstructorPassesThisOut
type jsiiProxy_ConstructorPassesThisOut struct {
	_ byte // padding
}

func NewConstructorPassesThisOut(consumer PartiallyInitializedThisConsumer) ConstructorPassesThisOut {
	_init_.Initialize()

	j := jsiiProxy_ConstructorPassesThisOut{}

	_jsii_.Create(
		"jsii-calc.ConstructorPassesThisOut",
		[]interface{}{consumer},
		&j,
	)

	return &j
}

func NewConstructorPassesThisOut_Override(c ConstructorPassesThisOut, consumer PartiallyInitializedThisConsumer) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ConstructorPassesThisOut",
		[]interface{}{consumer},
		c,
	)
}

type Constructors interface {
}

// The jsii proxy struct for Constructors
type jsiiProxy_Constructors struct {
	_ byte // padding
}

func NewConstructors() Constructors {
	_init_.Initialize()

	j := jsiiProxy_Constructors{}

	_jsii_.Create(
		"jsii-calc.Constructors",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewConstructors_Override(c Constructors) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Constructors",
		nil, // no parameters
		c,
	)
}

func Constructors_HiddenInterface() IPublicInterface {
	_init_.Initialize()

	var returns IPublicInterface

	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"hiddenInterface",
		nil, // no parameters
		&returns,
	)

	return returns
}

func Constructors_HiddenInterfaces() *[]IPublicInterface {
	_init_.Initialize()

	var returns *[]IPublicInterface

	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"hiddenInterfaces",
		nil, // no parameters
		&returns,
	)

	return returns
}

func Constructors_HiddenSubInterfaces() *[]IPublicInterface {
	_init_.Initialize()

	var returns *[]IPublicInterface

	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"hiddenSubInterfaces",
		nil, // no parameters
		&returns,
	)

	return returns
}

func Constructors_MakeClass() PublicClass {
	_init_.Initialize()

	var returns PublicClass

	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"makeClass",
		nil, // no parameters
		&returns,
	)

	return returns
}

func Constructors_MakeInterface() IPublicInterface {
	_init_.Initialize()

	var returns IPublicInterface

	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"makeInterface",
		nil, // no parameters
		&returns,
	)

	return returns
}

func Constructors_MakeInterface2() IPublicInterface2 {
	_init_.Initialize()

	var returns IPublicInterface2

	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"makeInterface2",
		nil, // no parameters
		&returns,
	)

	return returns
}

func Constructors_MakeInterfaces() *[]IPublicInterface {
	_init_.Initialize()

	var returns *[]IPublicInterface

	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"makeInterfaces",
		nil, // no parameters
		&returns,
	)

	return returns
}

type ConsumePureInterface interface {
	WorkItBaby() *StructB
}

// The jsii proxy struct for ConsumePureInterface
type jsiiProxy_ConsumePureInterface struct {
	_ byte // padding
}

func NewConsumePureInterface(delegate IStructReturningDelegate) ConsumePureInterface {
	_init_.Initialize()

	j := jsiiProxy_ConsumePureInterface{}

	_jsii_.Create(
		"jsii-calc.ConsumePureInterface",
		[]interface{}{delegate},
		&j,
	)

	return &j
}

func NewConsumePureInterface_Override(c ConsumePureInterface, delegate IStructReturningDelegate) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ConsumePureInterface",
		[]interface{}{delegate},
		c,
	)
}

func (c *jsiiProxy_ConsumePureInterface) WorkItBaby() *StructB {
	var returns *StructB

	_jsii_.Invoke(
		c,
		"workItBaby",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Test calling back to consumers that implement interfaces.
//
// Check that if a JSII consumer implements IConsumerWithInterfaceParam, they can call
// the method on the argument that they're passed...
type ConsumerCanRingBell interface {
	ImplementedByObjectLiteral(ringer IBellRinger) *bool
	ImplementedByPrivateClass(ringer IBellRinger) *bool
	ImplementedByPublicClass(ringer IBellRinger) *bool
	WhenTypedAsClass(ringer IConcreteBellRinger) *bool
}

// The jsii proxy struct for ConsumerCanRingBell
type jsiiProxy_ConsumerCanRingBell struct {
	_ byte // padding
}

func NewConsumerCanRingBell() ConsumerCanRingBell {
	_init_.Initialize()

	j := jsiiProxy_ConsumerCanRingBell{}

	_jsii_.Create(
		"jsii-calc.ConsumerCanRingBell",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewConsumerCanRingBell_Override(c ConsumerCanRingBell) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ConsumerCanRingBell",
		nil, // no parameters
		c,
	)
}

// ...if the interface is implemented using an object literal.
//
// Returns whether the bell was rung.
func ConsumerCanRingBell_StaticImplementedByObjectLiteral(ringer IBellRinger) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByObjectLiteral",
		[]interface{}{ringer},
		&returns,
	)

	return returns
}

// ...if the interface is implemented using a private class.
//
// Return whether the bell was rung.
func ConsumerCanRingBell_StaticImplementedByPrivateClass(ringer IBellRinger) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByPrivateClass",
		[]interface{}{ringer},
		&returns,
	)

	return returns
}

// ...if the interface is implemented using a public class.
//
// Return whether the bell was rung.
func ConsumerCanRingBell_StaticImplementedByPublicClass(ringer IBellRinger) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByPublicClass",
		[]interface{}{ringer},
		&returns,
	)

	return returns
}

// If the parameter is a concrete class instead of an interface.
//
// Return whether the bell was rung.
func ConsumerCanRingBell_StaticWhenTypedAsClass(ringer IConcreteBellRinger) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"jsii-calc.ConsumerCanRingBell",
		"staticWhenTypedAsClass",
		[]interface{}{ringer},
		&returns,
	)

	return returns
}

// ...if the interface is implemented using an object literal.
//
// Returns whether the bell was rung.
func (c *jsiiProxy_ConsumerCanRingBell) ImplementedByObjectLiteral(ringer IBellRinger) *bool {
	var returns *bool

	_jsii_.Invoke(
		c,
		"implementedByObjectLiteral",
		[]interface{}{ringer},
		&returns,
	)

	return returns
}

// ...if the interface is implemented using a private class.
//
// Return whether the bell was rung.
func (c *jsiiProxy_ConsumerCanRingBell) ImplementedByPrivateClass(ringer IBellRinger) *bool {
	var returns *bool

	_jsii_.Invoke(
		c,
		"implementedByPrivateClass",
		[]interface{}{ringer},
		&returns,
	)

	return returns
}

// ...if the interface is implemented using a public class.
//
// Return whether the bell was rung.
func (c *jsiiProxy_ConsumerCanRingBell) ImplementedByPublicClass(ringer IBellRinger) *bool {
	var returns *bool

	_jsii_.Invoke(
		c,
		"implementedByPublicClass",
		[]interface{}{ringer},
		&returns,
	)

	return returns
}

// If the parameter is a concrete class instead of an interface.
//
// Return whether the bell was rung.
func (c *jsiiProxy_ConsumerCanRingBell) WhenTypedAsClass(ringer IConcreteBellRinger) *bool {
	var returns *bool

	_jsii_.Invoke(
		c,
		"whenTypedAsClass",
		[]interface{}{ringer},
		&returns,
	)

	return returns
}

type ConsumersOfThisCrazyTypeSystem interface {
	ConsumeAnotherPublicInterface(obj IAnotherPublicInterface) *string
	ConsumeNonInternalInterface(obj INonInternalInterface) interface{}
}

// The jsii proxy struct for ConsumersOfThisCrazyTypeSystem
type jsiiProxy_ConsumersOfThisCrazyTypeSystem struct {
	_ byte // padding
}

func NewConsumersOfThisCrazyTypeSystem() ConsumersOfThisCrazyTypeSystem {
	_init_.Initialize()

	j := jsiiProxy_ConsumersOfThisCrazyTypeSystem{}

	_jsii_.Create(
		"jsii-calc.ConsumersOfThisCrazyTypeSystem",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewConsumersOfThisCrazyTypeSystem_Override(c ConsumersOfThisCrazyTypeSystem) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ConsumersOfThisCrazyTypeSystem",
		nil, // no parameters
		c,
	)
}

func (c *jsiiProxy_ConsumersOfThisCrazyTypeSystem) ConsumeAnotherPublicInterface(obj IAnotherPublicInterface) *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"consumeAnotherPublicInterface",
		[]interface{}{obj},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_ConsumersOfThisCrazyTypeSystem) ConsumeNonInternalInterface(obj INonInternalInterface) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"consumeNonInternalInterface",
		[]interface{}{obj},
		&returns,
	)

	return returns
}

// Verifies proper type handling through dynamic overrides.
type DataRenderer interface {
	Render(data *scopejsiicalclib.MyFirstStruct) *string
	RenderArbitrary(data *map[string]interface{}) *string
	RenderMap(map_ *map[string]interface{}) *string
}

// The jsii proxy struct for DataRenderer
type jsiiProxy_DataRenderer struct {
	_ byte // padding
}

func NewDataRenderer() DataRenderer {
	_init_.Initialize()

	j := jsiiProxy_DataRenderer{}

	_jsii_.Create(
		"jsii-calc.DataRenderer",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewDataRenderer_Override(d DataRenderer) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DataRenderer",
		nil, // no parameters
		d,
	)
}

func (d *jsiiProxy_DataRenderer) Render(data *scopejsiicalclib.MyFirstStruct) *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"render",
		[]interface{}{data},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DataRenderer) RenderArbitrary(data *map[string]interface{}) *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"renderArbitrary",
		[]interface{}{data},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DataRenderer) RenderMap(map_ *map[string]interface{}) *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"renderMap",
		[]interface{}{map_},
		&returns,
	)

	return returns
}

// A class named "Default".
// See: https://github.com/aws/jsii/issues/2637
//
type Default interface {
	PleaseCompile()
}

// The jsii proxy struct for Default
type jsiiProxy_Default struct {
	_ byte // padding
}

func NewDefault() Default {
	_init_.Initialize()

	j := jsiiProxy_Default{}

	_jsii_.Create(
		"jsii-calc.Default",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewDefault_Override(d Default) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Default",
		nil, // no parameters
		d,
	)
}

func (d *jsiiProxy_Default) PleaseCompile() {
	_jsii_.InvokeVoid(
		d,
		"pleaseCompile",
		nil, // no parameters
	)
}

type DefaultedConstructorArgument interface {
	Arg1() *float64
	Arg2() *string
	Arg3() *string
}

// The jsii proxy struct for DefaultedConstructorArgument
type jsiiProxy_DefaultedConstructorArgument struct {
	_ byte // padding
}

func (j *jsiiProxy_DefaultedConstructorArgument) Arg1() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"arg1",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DefaultedConstructorArgument) Arg2() *string {
	var returns *string
	_jsii_.Get(
		j,
		"arg2",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DefaultedConstructorArgument) Arg3() *string {
	var returns *string
	_jsii_.Get(
		j,
		"arg3",
		&returns,
	)
	return returns
}


func NewDefaultedConstructorArgument(arg1 *float64, arg2 *string, arg3 *string) DefaultedConstructorArgument {
	_init_.Initialize()

	j := jsiiProxy_DefaultedConstructorArgument{}

	_jsii_.Create(
		"jsii-calc.DefaultedConstructorArgument",
		[]interface{}{arg1, arg2, arg3},
		&j,
	)

	return &j
}

func NewDefaultedConstructorArgument_Override(d DefaultedConstructorArgument, arg1 *float64, arg2 *string, arg3 *string) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DefaultedConstructorArgument",
		[]interface{}{arg1, arg2, arg3},
		d,
	)
}

// 1.
//
// call #takeThis() -> An ObjectRef will be provisioned for the value (it'll be re-used!)
// 2. call #takeThisToo() -> The ObjectRef from before will need to be down-cased to the ParentStruct982 type
type Demonstrate982 interface {
}

// The jsii proxy struct for Demonstrate982
type jsiiProxy_Demonstrate982 struct {
	_ byte // padding
}

func NewDemonstrate982() Demonstrate982 {
	_init_.Initialize()

	j := jsiiProxy_Demonstrate982{}

	_jsii_.Create(
		"jsii-calc.Demonstrate982",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewDemonstrate982_Override(d Demonstrate982) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Demonstrate982",
		nil, // no parameters
		d,
	)
}

// It's dangerous to go alone!
func Demonstrate982_TakeThis() *ChildStruct982 {
	_init_.Initialize()

	var returns *ChildStruct982

	_jsii_.StaticInvoke(
		"jsii-calc.Demonstrate982",
		"takeThis",
		nil, // no parameters
		&returns,
	)

	return returns
}

// It's dangerous to go alone!
func Demonstrate982_TakeThisToo() *ParentStruct982 {
	_init_.Initialize()

	var returns *ParentStruct982

	_jsii_.StaticInvoke(
		"jsii-calc.Demonstrate982",
		"takeThisToo",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Deprecated: a pretty boring class
type DeprecatedClass interface {
	MutableProperty() *float64
	SetMutableProperty(val *float64)
	ReadonlyProperty() *string
	Method()
}

// The jsii proxy struct for DeprecatedClass
type jsiiProxy_DeprecatedClass struct {
	_ byte // padding
}

func (j *jsiiProxy_DeprecatedClass) MutableProperty() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DeprecatedClass) ReadonlyProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"readonlyProperty",
		&returns,
	)
	return returns
}


// Deprecated: this constructor is "just" okay
func NewDeprecatedClass(readonlyString *string, mutableNumber *float64) DeprecatedClass {
	_init_.Initialize()

	j := jsiiProxy_DeprecatedClass{}

	_jsii_.Create(
		"jsii-calc.DeprecatedClass",
		[]interface{}{readonlyString, mutableNumber},
		&j,
	)

	return &j
}

// Deprecated: this constructor is "just" okay
func NewDeprecatedClass_Override(d DeprecatedClass, readonlyString *string, mutableNumber *float64) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DeprecatedClass",
		[]interface{}{readonlyString, mutableNumber},
		d,
	)
}

func (j *jsiiProxy_DeprecatedClass) SetMutableProperty(val *float64) {
	_jsii_.Set(
		j,
		"mutableProperty",
		val,
	)
}

// Deprecated: it was a bad idea
func (d *jsiiProxy_DeprecatedClass) Method() {
	_jsii_.InvokeVoid(
		d,
		"method",
		nil, // no parameters
	)
}

// Deprecated: your deprecated selection of bad options
type DeprecatedEnum string

const (
	DeprecatedEnum_OPTION_A DeprecatedEnum = "OPTION_A"
	DeprecatedEnum_OPTION_B DeprecatedEnum = "OPTION_B"
)

// Deprecated: it just wraps a string
type DeprecatedStruct struct {
	// Deprecated: well, yeah
	ReadonlyProperty *string \`json:"readonlyProperty"\`
}

// A struct which derives from another struct.
type DerivedStruct struct {
	// An awesome number value.
	// Deprecated.
	Anumber *float64 \`json:"anumber"\`
	// A string value.
	// Deprecated.
	Astring *string \`json:"astring"\`
	// Deprecated.
	FirstOptional *[]*string \`json:"firstOptional"\`
	AnotherRequired *string \`json:"anotherRequired"\`
	Bool *bool \`json:"bool"\`
	// An example of a non primitive property.
	NonPrimitive DoubleTrouble \`json:"nonPrimitive"\`
	// This is optional.
	AnotherOptional *map[string]scopejsiicalclib.NumericValue \`json:"anotherOptional"\`
	OptionalAny interface{} \`json:"optionalAny"\`
	OptionalArray *[]*string \`json:"optionalArray"\`
}

type DiamondBottom struct {
	// Deprecated.
	HoistedTop *string \`json:"hoistedTop"\`
	// Deprecated.
	Left *float64 \`json:"left"\`
	// Deprecated.
	Right *bool \`json:"right"\`
	Bottom *string \`json:"bottom"\`
}

type DiamondInheritanceBaseLevelStruct struct {
	BaseLevelProperty *string \`json:"baseLevelProperty"\`
}

type DiamondInheritanceFirstMidLevelStruct struct {
	BaseLevelProperty *string \`json:"baseLevelProperty"\`
	FirstMidLevelProperty *string \`json:"firstMidLevelProperty"\`
}

type DiamondInheritanceSecondMidLevelStruct struct {
	BaseLevelProperty *string \`json:"baseLevelProperty"\`
	SecondMidLevelProperty *string \`json:"secondMidLevelProperty"\`
}

type DiamondInheritanceTopLevelStruct struct {
	BaseLevelProperty *string \`json:"baseLevelProperty"\`
	FirstMidLevelProperty *string \`json:"firstMidLevelProperty"\`
	SecondMidLevelProperty *string \`json:"secondMidLevelProperty"\`
	TopLevelProperty *string \`json:"topLevelProperty"\`
}

// Verifies that null/undefined can be returned for optional collections.
//
// This source of collections is disappointing - it'll always give you nothing :(
type DisappointingCollectionSource interface {
}

// The jsii proxy struct for DisappointingCollectionSource
type jsiiProxy_DisappointingCollectionSource struct {
	_ byte // padding
}

func DisappointingCollectionSource_MaybeList() *[]*string {
	_init_.Initialize()
	var returns *[]*string
	_jsii_.StaticGet(
		"jsii-calc.DisappointingCollectionSource",
		"maybeList",
		&returns,
	)
	return returns
}

func DisappointingCollectionSource_MaybeMap() *map[string]*float64 {
	_init_.Initialize()
	var returns *map[string]*float64
	_jsii_.StaticGet(
		"jsii-calc.DisappointingCollectionSource",
		"maybeMap",
		&returns,
	)
	return returns
}

type DoNotOverridePrivates interface {
	ChangePrivatePropertyValue(newValue *string)
	PrivateMethodValue() *string
	PrivatePropertyValue() *string
}

// The jsii proxy struct for DoNotOverridePrivates
type jsiiProxy_DoNotOverridePrivates struct {
	_ byte // padding
}

func NewDoNotOverridePrivates() DoNotOverridePrivates {
	_init_.Initialize()

	j := jsiiProxy_DoNotOverridePrivates{}

	_jsii_.Create(
		"jsii-calc.DoNotOverridePrivates",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewDoNotOverridePrivates_Override(d DoNotOverridePrivates) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DoNotOverridePrivates",
		nil, // no parameters
		d,
	)
}

func (d *jsiiProxy_DoNotOverridePrivates) ChangePrivatePropertyValue(newValue *string) {
	_jsii_.InvokeVoid(
		d,
		"changePrivatePropertyValue",
		[]interface{}{newValue},
	)
}

func (d *jsiiProxy_DoNotOverridePrivates) PrivateMethodValue() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"privateMethodValue",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DoNotOverridePrivates) PrivatePropertyValue() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"privatePropertyValue",
		nil, // no parameters
		&returns,
	)

	return returns
}

// jsii#284: do not recognize "any" as an optional argument.
type DoNotRecognizeAnyAsOptional interface {
	Method(_requiredAny interface{}, _optionalAny interface{}, _optionalString *string)
}

// The jsii proxy struct for DoNotRecognizeAnyAsOptional
type jsiiProxy_DoNotRecognizeAnyAsOptional struct {
	_ byte // padding
}

func NewDoNotRecognizeAnyAsOptional() DoNotRecognizeAnyAsOptional {
	_init_.Initialize()

	j := jsiiProxy_DoNotRecognizeAnyAsOptional{}

	_jsii_.Create(
		"jsii-calc.DoNotRecognizeAnyAsOptional",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewDoNotRecognizeAnyAsOptional_Override(d DoNotRecognizeAnyAsOptional) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DoNotRecognizeAnyAsOptional",
		nil, // no parameters
		d,
	)
}

func (d *jsiiProxy_DoNotRecognizeAnyAsOptional) Method(_requiredAny interface{}, _optionalAny interface{}, _optionalString *string) {
	_jsii_.InvokeVoid(
		d,
		"method",
		[]interface{}{_requiredAny, _optionalAny, _optionalString},
	)
}

// Here's the first line of the TSDoc comment.
//
// This is the meat of the TSDoc comment. It may contain
// multiple lines and multiple paragraphs.
//
// Multiple paragraphs are separated by an empty line.
//
// TODO: EXAMPLE
//
type DocumentedClass interface {
	Greet(greetee *Greetee) *float64
	Hola()
}

// The jsii proxy struct for DocumentedClass
type jsiiProxy_DocumentedClass struct {
	_ byte // padding
}

func NewDocumentedClass() DocumentedClass {
	_init_.Initialize()

	j := jsiiProxy_DocumentedClass{}

	_jsii_.Create(
		"jsii-calc.DocumentedClass",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewDocumentedClass_Override(d DocumentedClass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DocumentedClass",
		nil, // no parameters
		d,
	)
}

// Greet the indicated person.
//
// This will print out a friendly greeting intended for the indicated person.
//
// Returns: A number that everyone knows very well and represents the answer
// to the ultimate question
func (d *jsiiProxy_DocumentedClass) Greet(greetee *Greetee) *float64 {
	var returns *float64

	_jsii_.Invoke(
		d,
		"greet",
		[]interface{}{greetee},
		&returns,
	)

	return returns
}

// Say ¬°Hola!
// Experimental.
func (d *jsiiProxy_DocumentedClass) Hola() {
	_jsii_.InvokeVoid(
		d,
		"hola",
		nil, // no parameters
	)
}

type DontComplainAboutVariadicAfterOptional interface {
	OptionalAndVariadic(optional *string, things ...*string) *string
}

// The jsii proxy struct for DontComplainAboutVariadicAfterOptional
type jsiiProxy_DontComplainAboutVariadicAfterOptional struct {
	_ byte // padding
}

func NewDontComplainAboutVariadicAfterOptional() DontComplainAboutVariadicAfterOptional {
	_init_.Initialize()

	j := jsiiProxy_DontComplainAboutVariadicAfterOptional{}

	_jsii_.Create(
		"jsii-calc.DontComplainAboutVariadicAfterOptional",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewDontComplainAboutVariadicAfterOptional_Override(d DontComplainAboutVariadicAfterOptional) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DontComplainAboutVariadicAfterOptional",
		nil, // no parameters
		d,
	)
}

func (d *jsiiProxy_DontComplainAboutVariadicAfterOptional) OptionalAndVariadic(optional *string, things ...*string) *string {
	args := []interface{}{optional}
	for _, a := range things {
		args = append(args, a)
	}

	var returns *string

	_jsii_.Invoke(
		d,
		"optionalAndVariadic",
		args,
		&returns,
	)

	return returns
}

type DoubleTrouble interface {
	IFriendlyRandomGenerator
	Hello() *string
	Next() *float64
}

// The jsii proxy struct for DoubleTrouble
type jsiiProxy_DoubleTrouble struct {
	jsiiProxy_IFriendlyRandomGenerator
}

func NewDoubleTrouble() DoubleTrouble {
	_init_.Initialize()

	j := jsiiProxy_DoubleTrouble{}

	_jsii_.Create(
		"jsii-calc.DoubleTrouble",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewDoubleTrouble_Override(d DoubleTrouble) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DoubleTrouble",
		nil, // no parameters
		d,
	)
}

// (deprecated) Say hello!
func (d *jsiiProxy_DoubleTrouble) Hello() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"hello",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns another random number.
func (d *jsiiProxy_DoubleTrouble) Next() *float64 {
	var returns *float64

	_jsii_.Invoke(
		d,
		"next",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Ensures we can override a dynamic property that was inherited.
type DynamicPropertyBearer interface {
	DynamicProperty() *string
	SetDynamicProperty(val *string)
	ValueStore() *string
	SetValueStore(val *string)
}

// The jsii proxy struct for DynamicPropertyBearer
type jsiiProxy_DynamicPropertyBearer struct {
	_ byte // padding
}

func (j *jsiiProxy_DynamicPropertyBearer) DynamicProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dynamicProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamicPropertyBearer) ValueStore() *string {
	var returns *string
	_jsii_.Get(
		j,
		"valueStore",
		&returns,
	)
	return returns
}


func NewDynamicPropertyBearer(valueStore *string) DynamicPropertyBearer {
	_init_.Initialize()

	j := jsiiProxy_DynamicPropertyBearer{}

	_jsii_.Create(
		"jsii-calc.DynamicPropertyBearer",
		[]interface{}{valueStore},
		&j,
	)

	return &j
}

func NewDynamicPropertyBearer_Override(d DynamicPropertyBearer, valueStore *string) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DynamicPropertyBearer",
		[]interface{}{valueStore},
		d,
	)
}

func (j *jsiiProxy_DynamicPropertyBearer) SetDynamicProperty(val *string) {
	_jsii_.Set(
		j,
		"dynamicProperty",
		val,
	)
}

func (j *jsiiProxy_DynamicPropertyBearer) SetValueStore(val *string) {
	_jsii_.Set(
		j,
		"valueStore",
		val,
	)
}

type DynamicPropertyBearerChild interface {
	DynamicPropertyBearer
	DynamicProperty() *string
	SetDynamicProperty(val *string)
	OriginalValue() *string
	ValueStore() *string
	SetValueStore(val *string)
	OverrideValue(newValue *string) *string
}

// The jsii proxy struct for DynamicPropertyBearerChild
type jsiiProxy_DynamicPropertyBearerChild struct {
	jsiiProxy_DynamicPropertyBearer
}

func (j *jsiiProxy_DynamicPropertyBearerChild) DynamicProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dynamicProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamicPropertyBearerChild) OriginalValue() *string {
	var returns *string
	_jsii_.Get(
		j,
		"originalValue",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamicPropertyBearerChild) ValueStore() *string {
	var returns *string
	_jsii_.Get(
		j,
		"valueStore",
		&returns,
	)
	return returns
}


func NewDynamicPropertyBearerChild(originalValue *string) DynamicPropertyBearerChild {
	_init_.Initialize()

	j := jsiiProxy_DynamicPropertyBearerChild{}

	_jsii_.Create(
		"jsii-calc.DynamicPropertyBearerChild",
		[]interface{}{originalValue},
		&j,
	)

	return &j
}

func NewDynamicPropertyBearerChild_Override(d DynamicPropertyBearerChild, originalValue *string) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.DynamicPropertyBearerChild",
		[]interface{}{originalValue},
		d,
	)
}

func (j *jsiiProxy_DynamicPropertyBearerChild) SetDynamicProperty(val *string) {
	_jsii_.Set(
		j,
		"dynamicProperty",
		val,
	)
}

func (j *jsiiProxy_DynamicPropertyBearerChild) SetValueStore(val *string) {
	_jsii_.Set(
		j,
		"valueStore",
		val,
	)
}

// Sets \`this.dynamicProperty\` to the new value, and returns the old value.
//
// Returns: the old value that was set.
func (d *jsiiProxy_DynamicPropertyBearerChild) OverrideValue(newValue *string) *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"overrideValue",
		[]interface{}{newValue},
		&returns,
	)

	return returns
}

// This class is used to validate that serialization and deserialization does not interpret ISO-8601-formatted timestampts to the native date/time object, as the jsii protocol has a $jsii$date wrapper for this purpose (node's JSON parsing does *NOT* detect dates automatically in this way, so host libraries should not either).
type Entropy interface {
	Increase() *string
	Repeat(word *string) *string
}

// The jsii proxy struct for Entropy
type jsiiProxy_Entropy struct {
	_ byte // padding
}

// Creates a new instance of Entropy.
func NewEntropy_Override(e Entropy, clock IWallClock) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Entropy",
		[]interface{}{clock},
		e,
	)
}

// Increases entropy by consuming time from the clock (yes, this is a long shot, please don't judge).
//
// Returns: the time from the \`WallClock\`.
func (e *jsiiProxy_Entropy) Increase() *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"increase",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Implement this method such that it returns \`word\`.
//
// Returns: \`word\`.
func (e *jsiiProxy_Entropy) Repeat(word *string) *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"repeat",
		[]interface{}{word},
		&returns,
	)

	return returns
}

type EnumDispenser interface {
}

// The jsii proxy struct for EnumDispenser
type jsiiProxy_EnumDispenser struct {
	_ byte // padding
}

func EnumDispenser_RandomIntegerLikeEnum() AllTypesEnum {
	_init_.Initialize()

	var returns AllTypesEnum

	_jsii_.StaticInvoke(
		"jsii-calc.EnumDispenser",
		"randomIntegerLikeEnum",
		nil, // no parameters
		&returns,
	)

	return returns
}

func EnumDispenser_RandomStringLikeEnum() StringEnum {
	_init_.Initialize()

	var returns StringEnum

	_jsii_.StaticInvoke(
		"jsii-calc.EnumDispenser",
		"randomStringLikeEnum",
		nil, // no parameters
		&returns,
	)

	return returns
}

type EraseUndefinedHashValues interface {
}

// The jsii proxy struct for EraseUndefinedHashValues
type jsiiProxy_EraseUndefinedHashValues struct {
	_ byte // padding
}

func NewEraseUndefinedHashValues() EraseUndefinedHashValues {
	_init_.Initialize()

	j := jsiiProxy_EraseUndefinedHashValues{}

	_jsii_.Create(
		"jsii-calc.EraseUndefinedHashValues",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewEraseUndefinedHashValues_Override(e EraseUndefinedHashValues) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.EraseUndefinedHashValues",
		nil, // no parameters
		e,
	)
}

// Returns \`true\` if \`key\` is defined in \`opts\`.
//
// Used to check that undefined/null hash values
// are being erased when sending values from native code to JS.
func EraseUndefinedHashValues_DoesKeyExist(opts *EraseUndefinedHashValuesOptions, key *string) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"jsii-calc.EraseUndefinedHashValues",
		"doesKeyExist",
		[]interface{}{opts, key},
		&returns,
	)

	return returns
}

// We expect "prop1" to be erased.
func EraseUndefinedHashValues_Prop1IsNull() *map[string]interface{} {
	_init_.Initialize()

	var returns *map[string]interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.EraseUndefinedHashValues",
		"prop1IsNull",
		nil, // no parameters
		&returns,
	)

	return returns
}

// We expect "prop2" to be erased.
func EraseUndefinedHashValues_Prop2IsUndefined() *map[string]interface{} {
	_init_.Initialize()

	var returns *map[string]interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.EraseUndefinedHashValues",
		"prop2IsUndefined",
		nil, // no parameters
		&returns,
	)

	return returns
}

type EraseUndefinedHashValuesOptions struct {
	Option1 *string \`json:"option1"\`
	Option2 *string \`json:"option2"\`
}

// Experimental.
type ExperimentalClass interface {
	MutableProperty() *float64
	SetMutableProperty(val *float64)
	ReadonlyProperty() *string
	Method()
}

// The jsii proxy struct for ExperimentalClass
type jsiiProxy_ExperimentalClass struct {
	_ byte // padding
}

func (j *jsiiProxy_ExperimentalClass) MutableProperty() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ExperimentalClass) ReadonlyProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"readonlyProperty",
		&returns,
	)
	return returns
}


// Experimental.
func NewExperimentalClass(readonlyString *string, mutableNumber *float64) ExperimentalClass {
	_init_.Initialize()

	j := jsiiProxy_ExperimentalClass{}

	_jsii_.Create(
		"jsii-calc.ExperimentalClass",
		[]interface{}{readonlyString, mutableNumber},
		&j,
	)

	return &j
}

// Experimental.
func NewExperimentalClass_Override(e ExperimentalClass, readonlyString *string, mutableNumber *float64) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ExperimentalClass",
		[]interface{}{readonlyString, mutableNumber},
		e,
	)
}

func (j *jsiiProxy_ExperimentalClass) SetMutableProperty(val *float64) {
	_jsii_.Set(
		j,
		"mutableProperty",
		val,
	)
}

// Experimental.
func (e *jsiiProxy_ExperimentalClass) Method() {
	_jsii_.InvokeVoid(
		e,
		"method",
		nil, // no parameters
	)
}

// Experimental.
type ExperimentalEnum string

const (
	ExperimentalEnum_OPTION_A ExperimentalEnum = "OPTION_A"
	ExperimentalEnum_OPTION_B ExperimentalEnum = "OPTION_B"
)

// Experimental.
type ExperimentalStruct struct {
	// Experimental.
	ReadonlyProperty *string \`json:"readonlyProperty"\`
}

type ExportedBaseClass interface {
	Success() *bool
}

// The jsii proxy struct for ExportedBaseClass
type jsiiProxy_ExportedBaseClass struct {
	_ byte // padding
}

func (j *jsiiProxy_ExportedBaseClass) Success() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"success",
		&returns,
	)
	return returns
}


func NewExportedBaseClass(success *bool) ExportedBaseClass {
	_init_.Initialize()

	j := jsiiProxy_ExportedBaseClass{}

	_jsii_.Create(
		"jsii-calc.ExportedBaseClass",
		[]interface{}{success},
		&j,
	)

	return &j
}

func NewExportedBaseClass_Override(e ExportedBaseClass, success *bool) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ExportedBaseClass",
		[]interface{}{success},
		e,
	)
}

type ExtendsInternalInterface struct {
	Boom *bool \`json:"boom"\`
	Prop *string \`json:"prop"\`
}

type ExternalClass interface {
	MutableProperty() *float64
	SetMutableProperty(val *float64)
	ReadonlyProperty() *string
	Method()
}

// The jsii proxy struct for ExternalClass
type jsiiProxy_ExternalClass struct {
	_ byte // padding
}

func (j *jsiiProxy_ExternalClass) MutableProperty() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ExternalClass) ReadonlyProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"readonlyProperty",
		&returns,
	)
	return returns
}


func NewExternalClass(readonlyString *string, mutableNumber *float64) ExternalClass {
	_init_.Initialize()

	j := jsiiProxy_ExternalClass{}

	_jsii_.Create(
		"jsii-calc.ExternalClass",
		[]interface{}{readonlyString, mutableNumber},
		&j,
	)

	return &j
}

func NewExternalClass_Override(e ExternalClass, readonlyString *string, mutableNumber *float64) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ExternalClass",
		[]interface{}{readonlyString, mutableNumber},
		e,
	)
}

func (j *jsiiProxy_ExternalClass) SetMutableProperty(val *float64) {
	_jsii_.Set(
		j,
		"mutableProperty",
		val,
	)
}

func (e *jsiiProxy_ExternalClass) Method() {
	_jsii_.InvokeVoid(
		e,
		"method",
		nil, // no parameters
	)
}

type ExternalEnum string

const (
	ExternalEnum_OPTION_A ExternalEnum = "OPTION_A"
	ExternalEnum_OPTION_B ExternalEnum = "OPTION_B"
)

type ExternalStruct struct {
	ReadonlyProperty *string \`json:"readonlyProperty"\`
}

type GiveMeStructs interface {
	StructLiteral() *scopejsiicalclib.StructWithOnlyOptionals
	DerivedToFirst(derived *DerivedStruct) *scopejsiicalclib.MyFirstStruct
	ReadDerivedNonPrimitive(derived *DerivedStruct) DoubleTrouble
	ReadFirstNumber(first *scopejsiicalclib.MyFirstStruct) *float64
}

// The jsii proxy struct for GiveMeStructs
type jsiiProxy_GiveMeStructs struct {
	_ byte // padding
}

func (j *jsiiProxy_GiveMeStructs) StructLiteral() *scopejsiicalclib.StructWithOnlyOptionals {
	var returns *scopejsiicalclib.StructWithOnlyOptionals
	_jsii_.Get(
		j,
		"structLiteral",
		&returns,
	)
	return returns
}


func NewGiveMeStructs() GiveMeStructs {
	_init_.Initialize()

	j := jsiiProxy_GiveMeStructs{}

	_jsii_.Create(
		"jsii-calc.GiveMeStructs",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewGiveMeStructs_Override(g GiveMeStructs) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.GiveMeStructs",
		nil, // no parameters
		g,
	)
}

// Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct.
func (g *jsiiProxy_GiveMeStructs) DerivedToFirst(derived *DerivedStruct) *scopejsiicalclib.MyFirstStruct {
	var returns *scopejsiicalclib.MyFirstStruct

	_jsii_.Invoke(
		g,
		"derivedToFirst",
		[]interface{}{derived},
		&returns,
	)

	return returns
}

// Returns the boolean from a DerivedStruct struct.
func (g *jsiiProxy_GiveMeStructs) ReadDerivedNonPrimitive(derived *DerivedStruct) DoubleTrouble {
	var returns DoubleTrouble

	_jsii_.Invoke(
		g,
		"readDerivedNonPrimitive",
		[]interface{}{derived},
		&returns,
	)

	return returns
}

// Returns the "anumber" from a MyFirstStruct struct;
func (g *jsiiProxy_GiveMeStructs) ReadFirstNumber(first *scopejsiicalclib.MyFirstStruct) *float64 {
	var returns *float64

	_jsii_.Invoke(
		g,
		"readFirstNumber",
		[]interface{}{first},
		&returns,
	)

	return returns
}

// These are some arguments you can pass to a method.
type Greetee struct {
	// The name of the greetee.
	Name *string \`json:"name"\`
}

type GreetingAugmenter interface {
	BetterGreeting(friendly scopejsiicalclib.IFriendly) *string
}

// The jsii proxy struct for GreetingAugmenter
type jsiiProxy_GreetingAugmenter struct {
	_ byte // padding
}

func NewGreetingAugmenter() GreetingAugmenter {
	_init_.Initialize()

	j := jsiiProxy_GreetingAugmenter{}

	_jsii_.Create(
		"jsii-calc.GreetingAugmenter",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewGreetingAugmenter_Override(g GreetingAugmenter) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.GreetingAugmenter",
		nil, // no parameters
		g,
	)
}

func (g *jsiiProxy_GreetingAugmenter) BetterGreeting(friendly scopejsiicalclib.IFriendly) *string {
	var returns *string

	_jsii_.Invoke(
		g,
		"betterGreeting",
		[]interface{}{friendly},
		&returns,
	)

	return returns
}

// We can return an anonymous interface implementation from an override without losing the interface declarations.
type IAnonymousImplementationProvider interface {
	ProvideAsClass() Implementation
	ProvideAsInterface() IAnonymouslyImplementMe
}

// The jsii proxy for IAnonymousImplementationProvider
type jsiiProxy_IAnonymousImplementationProvider struct {
	_ byte // padding
}

func (i *jsiiProxy_IAnonymousImplementationProvider) ProvideAsClass() Implementation {
	var returns Implementation

	_jsii_.Invoke(
		i,
		"provideAsClass",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IAnonymousImplementationProvider) ProvideAsInterface() IAnonymouslyImplementMe {
	var returns IAnonymouslyImplementMe

	_jsii_.Invoke(
		i,
		"provideAsInterface",
		nil, // no parameters
		&returns,
	)

	return returns
}

type IAnonymouslyImplementMe interface {
	Verb() *string
	Value() *float64
}

// The jsii proxy for IAnonymouslyImplementMe
type jsiiProxy_IAnonymouslyImplementMe struct {
	_ byte // padding
}

func (i *jsiiProxy_IAnonymouslyImplementMe) Verb() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"verb",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (j *jsiiProxy_IAnonymouslyImplementMe) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}

type IAnotherPublicInterface interface {
	A() *string
}

// The jsii proxy for IAnotherPublicInterface
type jsiiProxy_IAnotherPublicInterface struct {
	_ byte // padding
}

func (j *jsiiProxy_IAnotherPublicInterface) A() *string {
	var returns *string
	_jsii_.Get(
		j,
		"a",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IAnotherPublicInterface) SetA(val *string) {
	_jsii_.Set(
		j,
		"a",
		val,
	)
}

type IBell interface {
	Ring()
}

// The jsii proxy for IBell
type jsiiProxy_IBell struct {
	_ byte // padding
}

func (i *jsiiProxy_IBell) Ring() {
	_jsii_.InvokeVoid(
		i,
		"ring",
		nil, // no parameters
	)
}

// Takes the object parameter as an interface.
type IBellRinger interface {
	YourTurn(bell IBell)
}

// The jsii proxy for IBellRinger
type jsiiProxy_IBellRinger struct {
	_ byte // padding
}

func (i *jsiiProxy_IBellRinger) YourTurn(bell IBell) {
	_jsii_.InvokeVoid(
		i,
		"yourTurn",
		[]interface{}{bell},
	)
}

// Takes the object parameter as a calss.
type IConcreteBellRinger interface {
	YourTurn(bell Bell)
}

// The jsii proxy for IConcreteBellRinger
type jsiiProxy_IConcreteBellRinger struct {
	_ byte // padding
}

func (i *jsiiProxy_IConcreteBellRinger) YourTurn(bell Bell) {
	_jsii_.InvokeVoid(
		i,
		"yourTurn",
		[]interface{}{bell},
	)
}

// Deprecated: useless interface
type IDeprecatedInterface interface {
	// Deprecated: services no purpose
	Method()
	// Deprecated: could be better
	MutableProperty() *float64
}

// The jsii proxy for IDeprecatedInterface
type jsiiProxy_IDeprecatedInterface struct {
	_ byte // padding
}

func (i *jsiiProxy_IDeprecatedInterface) Method() {
	_jsii_.InvokeVoid(
		i,
		"method",
		nil, // no parameters
	)
}

func (j *jsiiProxy_IDeprecatedInterface) MutableProperty() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IDeprecatedInterface) SetMutableProperty(val *float64) {
	_jsii_.Set(
		j,
		"mutableProperty",
		val,
	)
}

// Experimental.
type IExperimentalInterface interface {
	// Experimental.
	Method()
	// Experimental.
	MutableProperty() *float64
}

// The jsii proxy for IExperimentalInterface
type jsiiProxy_IExperimentalInterface struct {
	_ byte // padding
}

func (i *jsiiProxy_IExperimentalInterface) Method() {
	_jsii_.InvokeVoid(
		i,
		"method",
		nil, // no parameters
	)
}

func (j *jsiiProxy_IExperimentalInterface) MutableProperty() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IExperimentalInterface) SetMutableProperty(val *float64) {
	_jsii_.Set(
		j,
		"mutableProperty",
		val,
	)
}

type IExtendsPrivateInterface interface {
	MoreThings() *[]*string
	Private() *string
}

// The jsii proxy for IExtendsPrivateInterface
type jsiiProxy_IExtendsPrivateInterface struct {
	_ byte // padding
}

func (j *jsiiProxy_IExtendsPrivateInterface) MoreThings() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"moreThings",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IExtendsPrivateInterface) Private() *string {
	var returns *string
	_jsii_.Get(
		j,
		"private",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IExtendsPrivateInterface) SetPrivate(val *string) {
	_jsii_.Set(
		j,
		"private",
		val,
	)
}

type IExternalInterface interface {
	Method()
	MutableProperty() *float64
}

// The jsii proxy for IExternalInterface
type jsiiProxy_IExternalInterface struct {
	_ byte // padding
}

func (i *jsiiProxy_IExternalInterface) Method() {
	_jsii_.InvokeVoid(
		i,
		"method",
		nil, // no parameters
	)
}

func (j *jsiiProxy_IExternalInterface) MutableProperty() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IExternalInterface) SetMutableProperty(val *float64) {
	_jsii_.Set(
		j,
		"mutableProperty",
		val,
	)
}

// Even friendlier classes can implement this interface.
type IFriendlier interface {
	scopejsiicalclib.IFriendly
	// Say farewell.
	Farewell() *string
	// Say goodbye.
	//
	// Returns: A goodbye blessing.
	Goodbye() *string
}

// The jsii proxy for IFriendlier
type jsiiProxy_IFriendlier struct {
	internal.Type__scopejsiicalclibIFriendly
}

func (i *jsiiProxy_IFriendlier) Farewell() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"farewell",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IFriendlier) Goodbye() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"goodbye",
		nil, // no parameters
		&returns,
	)

	return returns
}

type IFriendlyRandomGenerator interface {
	scopejsiicalclib.IFriendly
	IRandomNumberGenerator
}

// The jsii proxy for IFriendlyRandomGenerator
type jsiiProxy_IFriendlyRandomGenerator struct {
	internal.Type__scopejsiicalclibIFriendly
	jsiiProxy_IRandomNumberGenerator
}

func (i *jsiiProxy_IFriendlyRandomGenerator) Hello() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"hello",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IFriendlyRandomGenerator) Next() *float64 {
	var returns *float64

	_jsii_.Invoke(
		i,
		"next",
		nil, // no parameters
		&returns,
	)

	return returns
}

// awslabs/jsii#220 Abstract return type.
type IInterfaceImplementedByAbstractClass interface {
	PropFromInterface() *string
}

// The jsii proxy for IInterfaceImplementedByAbstractClass
type jsiiProxy_IInterfaceImplementedByAbstractClass struct {
	_ byte // padding
}

func (j *jsiiProxy_IInterfaceImplementedByAbstractClass) PropFromInterface() *string {
	var returns *string
	_jsii_.Get(
		j,
		"propFromInterface",
		&returns,
	)
	return returns
}

// Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.
type IInterfaceThatShouldNotBeADataType interface {
	IInterfaceWithMethods
	OtherValue() *string
}

// The jsii proxy for IInterfaceThatShouldNotBeADataType
type jsiiProxy_IInterfaceThatShouldNotBeADataType struct {
	jsiiProxy_IInterfaceWithMethods
}

func (j *jsiiProxy_IInterfaceThatShouldNotBeADataType) OtherValue() *string {
	var returns *string
	_jsii_.Get(
		j,
		"otherValue",
		&returns,
	)
	return returns
}

type IInterfaceWithInternal interface {
	Visible()
}

// The jsii proxy for IInterfaceWithInternal
type jsiiProxy_IInterfaceWithInternal struct {
	_ byte // padding
}

func (i *jsiiProxy_IInterfaceWithInternal) Visible() {
	_jsii_.InvokeVoid(
		i,
		"visible",
		nil, // no parameters
	)
}

type IInterfaceWithMethods interface {
	DoThings()
	Value() *string
}

// The jsii proxy for IInterfaceWithMethods
type jsiiProxy_IInterfaceWithMethods struct {
	_ byte // padding
}

func (i *jsiiProxy_IInterfaceWithMethods) DoThings() {
	_jsii_.InvokeVoid(
		i,
		"doThings",
		nil, // no parameters
	)
}

func (j *jsiiProxy_IInterfaceWithMethods) Value() *string {
	var returns *string
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}

// awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.
type IInterfaceWithOptionalMethodArguments interface {
	Hello(arg1 *string, arg2 *float64)
}

// The jsii proxy for IInterfaceWithOptionalMethodArguments
type jsiiProxy_IInterfaceWithOptionalMethodArguments struct {
	_ byte // padding
}

func (i *jsiiProxy_IInterfaceWithOptionalMethodArguments) Hello(arg1 *string, arg2 *float64) {
	_jsii_.InvokeVoid(
		i,
		"hello",
		[]interface{}{arg1, arg2},
	)
}

type IInterfaceWithProperties interface {
	ReadOnlyString() *string
	ReadWriteString() *string
}

// The jsii proxy for IInterfaceWithProperties
type jsiiProxy_IInterfaceWithProperties struct {
	_ byte // padding
}

func (j *jsiiProxy_IInterfaceWithProperties) ReadOnlyString() *string {
	var returns *string
	_jsii_.Get(
		j,
		"readOnlyString",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IInterfaceWithProperties) ReadWriteString() *string {
	var returns *string
	_jsii_.Get(
		j,
		"readWriteString",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IInterfaceWithProperties) SetReadWriteString(val *string) {
	_jsii_.Set(
		j,
		"readWriteString",
		val,
	)
}

type IInterfaceWithPropertiesExtension interface {
	IInterfaceWithProperties
	Foo() *float64
}

// The jsii proxy for IInterfaceWithPropertiesExtension
type jsiiProxy_IInterfaceWithPropertiesExtension struct {
	jsiiProxy_IInterfaceWithProperties
}

func (j *jsiiProxy_IInterfaceWithPropertiesExtension) Foo() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"foo",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IInterfaceWithPropertiesExtension) SetFoo(val *float64) {
	_jsii_.Set(
		j,
		"foo",
		val,
	)
}

type IJSII417Derived interface {
	IJSII417PublicBaseOfBase
	Bar()
	Baz()
	Property() *string
}

// The jsii proxy for IJSII417Derived
type jsiiProxy_IJSII417Derived struct {
	jsiiProxy_IJSII417PublicBaseOfBase
}

func (i *jsiiProxy_IJSII417Derived) Bar() {
	_jsii_.InvokeVoid(
		i,
		"bar",
		nil, // no parameters
	)
}

func (i *jsiiProxy_IJSII417Derived) Baz() {
	_jsii_.InvokeVoid(
		i,
		"baz",
		nil, // no parameters
	)
}

func (j *jsiiProxy_IJSII417Derived) Property() *string {
	var returns *string
	_jsii_.Get(
		j,
		"property",
		&returns,
	)
	return returns
}

type IJSII417PublicBaseOfBase interface {
	Foo()
	HasRoot() *bool
}

// The jsii proxy for IJSII417PublicBaseOfBase
type jsiiProxy_IJSII417PublicBaseOfBase struct {
	_ byte // padding
}

func (i *jsiiProxy_IJSII417PublicBaseOfBase) Foo() {
	_jsii_.InvokeVoid(
		i,
		"foo",
		nil, // no parameters
	)
}

func (j *jsiiProxy_IJSII417PublicBaseOfBase) HasRoot() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"hasRoot",
		&returns,
	)
	return returns
}

type IJsii487External interface {
}

// The jsii proxy for IJsii487External
type jsiiProxy_IJsii487External struct {
	_ byte // padding
}

type IJsii487External2 interface {
}

// The jsii proxy for IJsii487External2
type jsiiProxy_IJsii487External2 struct {
	_ byte // padding
}

type IJsii496 interface {
}

// The jsii proxy for IJsii496
type jsiiProxy_IJsii496 struct {
	_ byte // padding
}

type IMutableObjectLiteral interface {
	Value() *string
}

// The jsii proxy for IMutableObjectLiteral
type jsiiProxy_IMutableObjectLiteral struct {
	_ byte // padding
}

func (j *jsiiProxy_IMutableObjectLiteral) Value() *string {
	var returns *string
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IMutableObjectLiteral) SetValue(val *string) {
	_jsii_.Set(
		j,
		"value",
		val,
	)
}

type INonInternalInterface interface {
	IAnotherPublicInterface
	B() *string
	C() *string
}

// The jsii proxy for INonInternalInterface
type jsiiProxy_INonInternalInterface struct {
	jsiiProxy_IAnotherPublicInterface
}

func (j *jsiiProxy_INonInternalInterface) B() *string {
	var returns *string
	_jsii_.Get(
		j,
		"b",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_INonInternalInterface) SetB(val *string) {
	_jsii_.Set(
		j,
		"b",
		val,
	)
}

func (j *jsiiProxy_INonInternalInterface) C() *string {
	var returns *string
	_jsii_.Get(
		j,
		"c",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_INonInternalInterface) SetC(val *string) {
	_jsii_.Set(
		j,
		"c",
		val,
	)
}

// Make sure that setters are properly called on objects with interfaces.
type IObjectWithProperty interface {
	WasSet() *bool
	Property() *string
}

// The jsii proxy for IObjectWithProperty
type jsiiProxy_IObjectWithProperty struct {
	_ byte // padding
}

func (i *jsiiProxy_IObjectWithProperty) WasSet() *bool {
	var returns *bool

	_jsii_.Invoke(
		i,
		"wasSet",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (j *jsiiProxy_IObjectWithProperty) Property() *string {
	var returns *string
	_jsii_.Get(
		j,
		"property",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IObjectWithProperty) SetProperty(val *string) {
	_jsii_.Set(
		j,
		"property",
		val,
	)
}

// Checks that optional result from interface method code generates correctly.
type IOptionalMethod interface {
	Optional() *string
}

// The jsii proxy for IOptionalMethod
type jsiiProxy_IOptionalMethod struct {
	_ byte // padding
}

func (i *jsiiProxy_IOptionalMethod) Optional() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"optional",
		nil, // no parameters
		&returns,
	)

	return returns
}

type IPrivatelyImplemented interface {
	Success() *bool
}

// The jsii proxy for IPrivatelyImplemented
type jsiiProxy_IPrivatelyImplemented struct {
	_ byte // padding
}

func (j *jsiiProxy_IPrivatelyImplemented) Success() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"success",
		&returns,
	)
	return returns
}

type IPublicInterface interface {
	Bye() *string
}

// The jsii proxy for IPublicInterface
type jsiiProxy_IPublicInterface struct {
	_ byte // padding
}

func (i *jsiiProxy_IPublicInterface) Bye() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"bye",
		nil, // no parameters
		&returns,
	)

	return returns
}

type IPublicInterface2 interface {
	Ciao() *string
}

// The jsii proxy for IPublicInterface2
type jsiiProxy_IPublicInterface2 struct {
	_ byte // padding
}

func (i *jsiiProxy_IPublicInterface2) Ciao() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"ciao",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Generates random numbers.
type IRandomNumberGenerator interface {
	// Returns another random number.
	//
	// Returns: A random number.
	Next() *float64
}

// The jsii proxy for IRandomNumberGenerator
type jsiiProxy_IRandomNumberGenerator struct {
	_ byte // padding
}

func (i *jsiiProxy_IRandomNumberGenerator) Next() *float64 {
	var returns *float64

	_jsii_.Invoke(
		i,
		"next",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns a subclass of a known class which implements an interface.
type IReturnJsii976 interface {
	Foo() *float64
}

// The jsii proxy for IReturnJsii976
type jsiiProxy_IReturnJsii976 struct {
	_ byte // padding
}

func (j *jsiiProxy_IReturnJsii976) Foo() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"foo",
		&returns,
	)
	return returns
}

type IReturnsNumber interface {
	ObtainNumber() scopejsiicalclib.IDoublable
	NumberProp() scopejsiicalclib.Number
}

// The jsii proxy for IReturnsNumber
type jsiiProxy_IReturnsNumber struct {
	_ byte // padding
}

func (i *jsiiProxy_IReturnsNumber) ObtainNumber() scopejsiicalclib.IDoublable {
	var returns scopejsiicalclib.IDoublable

	_jsii_.Invoke(
		i,
		"obtainNumber",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (j *jsiiProxy_IReturnsNumber) NumberProp() scopejsiicalclib.Number {
	var returns scopejsiicalclib.Number
	_jsii_.Get(
		j,
		"numberProp",
		&returns,
	)
	return returns
}

type IStableInterface interface {
	Method()
	MutableProperty() *float64
}

// The jsii proxy for IStableInterface
type jsiiProxy_IStableInterface struct {
	_ byte // padding
}

func (i *jsiiProxy_IStableInterface) Method() {
	_jsii_.InvokeVoid(
		i,
		"method",
		nil, // no parameters
	)
}

func (j *jsiiProxy_IStableInterface) MutableProperty() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IStableInterface) SetMutableProperty(val *float64) {
	_jsii_.Set(
		j,
		"mutableProperty",
		val,
	)
}

// Verifies that a "pure" implementation of an interface works correctly.
type IStructReturningDelegate interface {
	ReturnStruct() *StructB
}

// The jsii proxy for IStructReturningDelegate
type jsiiProxy_IStructReturningDelegate struct {
	_ byte // padding
}

func (i *jsiiProxy_IStructReturningDelegate) ReturnStruct() *StructB {
	var returns *StructB

	_jsii_.Invoke(
		i,
		"returnStruct",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Implement this interface.
type IWallClock interface {
	// Returns the current time, formatted as an ISO-8601 string.
	Iso8601Now() *string
}

// The jsii proxy for IWallClock
type jsiiProxy_IWallClock struct {
	_ byte // padding
}

func (i *jsiiProxy_IWallClock) Iso8601Now() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"iso8601Now",
		nil, // no parameters
		&returns,
	)

	return returns
}

type ImplementInternalInterface interface {
	Prop() *string
	SetProp(val *string)
}

// The jsii proxy struct for ImplementInternalInterface
type jsiiProxy_ImplementInternalInterface struct {
	_ byte // padding
}

func (j *jsiiProxy_ImplementInternalInterface) Prop() *string {
	var returns *string
	_jsii_.Get(
		j,
		"prop",
		&returns,
	)
	return returns
}


func NewImplementInternalInterface() ImplementInternalInterface {
	_init_.Initialize()

	j := jsiiProxy_ImplementInternalInterface{}

	_jsii_.Create(
		"jsii-calc.ImplementInternalInterface",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewImplementInternalInterface_Override(i ImplementInternalInterface) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ImplementInternalInterface",
		nil, // no parameters
		i,
	)
}

func (j *jsiiProxy_ImplementInternalInterface) SetProp(val *string) {
	_jsii_.Set(
		j,
		"prop",
		val,
	)
}

type Implementation interface {
	Value() *float64
}

// The jsii proxy struct for Implementation
type jsiiProxy_Implementation struct {
	_ byte // padding
}

func (j *jsiiProxy_Implementation) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


func NewImplementation() Implementation {
	_init_.Initialize()

	j := jsiiProxy_Implementation{}

	_jsii_.Create(
		"jsii-calc.Implementation",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewImplementation_Override(i Implementation) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Implementation",
		nil, // no parameters
		i,
	)
}

type ImplementsInterfaceWithInternal interface {
	IInterfaceWithInternal
	Visible()
}

// The jsii proxy struct for ImplementsInterfaceWithInternal
type jsiiProxy_ImplementsInterfaceWithInternal struct {
	jsiiProxy_IInterfaceWithInternal
}

func NewImplementsInterfaceWithInternal() ImplementsInterfaceWithInternal {
	_init_.Initialize()

	j := jsiiProxy_ImplementsInterfaceWithInternal{}

	_jsii_.Create(
		"jsii-calc.ImplementsInterfaceWithInternal",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewImplementsInterfaceWithInternal_Override(i ImplementsInterfaceWithInternal) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ImplementsInterfaceWithInternal",
		nil, // no parameters
		i,
	)
}

func (i *jsiiProxy_ImplementsInterfaceWithInternal) Visible() {
	_jsii_.InvokeVoid(
		i,
		"visible",
		nil, // no parameters
	)
}

type ImplementsInterfaceWithInternalSubclass interface {
	ImplementsInterfaceWithInternal
	Visible()
}

// The jsii proxy struct for ImplementsInterfaceWithInternalSubclass
type jsiiProxy_ImplementsInterfaceWithInternalSubclass struct {
	jsiiProxy_ImplementsInterfaceWithInternal
}

func NewImplementsInterfaceWithInternalSubclass() ImplementsInterfaceWithInternalSubclass {
	_init_.Initialize()

	j := jsiiProxy_ImplementsInterfaceWithInternalSubclass{}

	_jsii_.Create(
		"jsii-calc.ImplementsInterfaceWithInternalSubclass",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewImplementsInterfaceWithInternalSubclass_Override(i ImplementsInterfaceWithInternalSubclass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ImplementsInterfaceWithInternalSubclass",
		nil, // no parameters
		i,
	)
}

func (i *jsiiProxy_ImplementsInterfaceWithInternalSubclass) Visible() {
	_jsii_.InvokeVoid(
		i,
		"visible",
		nil, // no parameters
	)
}

type ImplementsPrivateInterface interface {
	Private() *string
	SetPrivate(val *string)
}

// The jsii proxy struct for ImplementsPrivateInterface
type jsiiProxy_ImplementsPrivateInterface struct {
	_ byte // padding
}

func (j *jsiiProxy_ImplementsPrivateInterface) Private() *string {
	var returns *string
	_jsii_.Get(
		j,
		"private",
		&returns,
	)
	return returns
}


func NewImplementsPrivateInterface() ImplementsPrivateInterface {
	_init_.Initialize()

	j := jsiiProxy_ImplementsPrivateInterface{}

	_jsii_.Create(
		"jsii-calc.ImplementsPrivateInterface",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewImplementsPrivateInterface_Override(i ImplementsPrivateInterface) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ImplementsPrivateInterface",
		nil, // no parameters
		i,
	)
}

func (j *jsiiProxy_ImplementsPrivateInterface) SetPrivate(val *string) {
	_jsii_.Set(
		j,
		"private",
		val,
	)
}

type ImplictBaseOfBase struct {
	Foo scopejsiicalcbaseofbase.Very \`json:"foo"\`
	Bar *string \`json:"bar"\`
	Goo *string \`json:"goo"\`
}

type InbetweenClass interface {
	PublicClass
	IPublicInterface2
	Ciao() *string
	Hello()
}

// The jsii proxy struct for InbetweenClass
type jsiiProxy_InbetweenClass struct {
	jsiiProxy_PublicClass
	jsiiProxy_IPublicInterface2
}

func NewInbetweenClass() InbetweenClass {
	_init_.Initialize()

	j := jsiiProxy_InbetweenClass{}

	_jsii_.Create(
		"jsii-calc.InbetweenClass",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewInbetweenClass_Override(i InbetweenClass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.InbetweenClass",
		nil, // no parameters
		i,
	)
}

func (i *jsiiProxy_InbetweenClass) Ciao() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"ciao",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_InbetweenClass) Hello() {
	_jsii_.InvokeVoid(
		i,
		"hello",
		nil, // no parameters
	)
}

// Verifies that collections of interfaces or structs are correctly handled.
//
// See: https://github.com/aws/jsii/issues/1196
type InterfaceCollections interface {
}

// The jsii proxy struct for InterfaceCollections
type jsiiProxy_InterfaceCollections struct {
	_ byte // padding
}

func InterfaceCollections_ListOfInterfaces() *[]IBell {
	_init_.Initialize()

	var returns *[]IBell

	_jsii_.StaticInvoke(
		"jsii-calc.InterfaceCollections",
		"listOfInterfaces",
		nil, // no parameters
		&returns,
	)

	return returns
}

func InterfaceCollections_ListOfStructs() *[]*StructA {
	_init_.Initialize()

	var returns *[]*StructA

	_jsii_.StaticInvoke(
		"jsii-calc.InterfaceCollections",
		"listOfStructs",
		nil, // no parameters
		&returns,
	)

	return returns
}

func InterfaceCollections_MapOfInterfaces() *map[string]IBell {
	_init_.Initialize()

	var returns *map[string]IBell

	_jsii_.StaticInvoke(
		"jsii-calc.InterfaceCollections",
		"mapOfInterfaces",
		nil, // no parameters
		&returns,
	)

	return returns
}

func InterfaceCollections_MapOfStructs() *map[string]*StructA {
	_init_.Initialize()

	var returns *map[string]*StructA

	_jsii_.StaticInvoke(
		"jsii-calc.InterfaceCollections",
		"mapOfStructs",
		nil, // no parameters
		&returns,
	)

	return returns
}

// We can return arrays of interfaces See aws/aws-cdk#2362.
type InterfacesMaker interface {
}

// The jsii proxy struct for InterfacesMaker
type jsiiProxy_InterfacesMaker struct {
	_ byte // padding
}

func InterfacesMaker_MakeInterfaces(count *float64) *[]scopejsiicalclib.IDoublable {
	_init_.Initialize()

	var returns *[]scopejsiicalclib.IDoublable

	_jsii_.StaticInvoke(
		"jsii-calc.InterfacesMaker",
		"makeInterfaces",
		[]interface{}{count},
		&returns,
	)

	return returns
}

// Checks the "same instance" isomorphism is preserved within the constructor.
//
// Create a subclass of this, and assert that \`this.myself()\` actually returns
// \`this\` from within the constructor.
type Isomorphism interface {
	Myself() Isomorphism
}

// The jsii proxy struct for Isomorphism
type jsiiProxy_Isomorphism struct {
	_ byte // padding
}

func NewIsomorphism_Override(i Isomorphism) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Isomorphism",
		nil, // no parameters
		i,
	)
}

func (i *jsiiProxy_Isomorphism) Myself() Isomorphism {
	var returns Isomorphism

	_jsii_.Invoke(
		i,
		"myself",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Docstrings with period.
// See: https://github.com/aws/jsii/issues/2638
//
type Issue2638 interface {
}

// The jsii proxy struct for Issue2638
type jsiiProxy_Issue2638 struct {
	_ byte // padding
}

// First sentence.
//
// Second sentence. Third sentence.
func NewIssue2638() Issue2638 {
	_init_.Initialize()

	j := jsiiProxy_Issue2638{}

	_jsii_.Create(
		"jsii-calc.Issue2638",
		nil, // no parameters
		&j,
	)

	return &j
}

// First sentence.
//
// Second sentence. Third sentence.
func NewIssue2638_Override(i Issue2638) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Issue2638",
		nil, // no parameters
		i,
	)
}

type Issue2638B interface {
}

// The jsii proxy struct for Issue2638B
type jsiiProxy_Issue2638B struct {
	_ byte // padding
}

func NewIssue2638B() Issue2638B {
	_init_.Initialize()

	j := jsiiProxy_Issue2638B{}

	_jsii_.Create(
		"jsii-calc.Issue2638B",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewIssue2638B_Override(i Issue2638B) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Issue2638B",
		nil, // no parameters
		i,
	)
}

type JSII417Derived interface {
	JSII417PublicBaseOfBase
	HasRoot() *bool
	Property() *string
	Bar()
	Baz()
	Foo()
}

// The jsii proxy struct for JSII417Derived
type jsiiProxy_JSII417Derived struct {
	jsiiProxy_JSII417PublicBaseOfBase
}

func (j *jsiiProxy_JSII417Derived) HasRoot() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"hasRoot",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_JSII417Derived) Property() *string {
	var returns *string
	_jsii_.Get(
		j,
		"property",
		&returns,
	)
	return returns
}


func NewJSII417Derived(property *string) JSII417Derived {
	_init_.Initialize()

	j := jsiiProxy_JSII417Derived{}

	_jsii_.Create(
		"jsii-calc.JSII417Derived",
		[]interface{}{property},
		&j,
	)

	return &j
}

func NewJSII417Derived_Override(j JSII417Derived, property *string) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.JSII417Derived",
		[]interface{}{property},
		j,
	)
}

func JSII417Derived_MakeInstance() JSII417PublicBaseOfBase {
	_init_.Initialize()

	var returns JSII417PublicBaseOfBase

	_jsii_.StaticInvoke(
		"jsii-calc.JSII417Derived",
		"makeInstance",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (j *jsiiProxy_JSII417Derived) Bar() {
	_jsii_.InvokeVoid(
		j,
		"bar",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JSII417Derived) Baz() {
	_jsii_.InvokeVoid(
		j,
		"baz",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JSII417Derived) Foo() {
	_jsii_.InvokeVoid(
		j,
		"foo",
		nil, // no parameters
	)
}

type JSII417PublicBaseOfBase interface {
	HasRoot() *bool
	Foo()
}

// The jsii proxy struct for JSII417PublicBaseOfBase
type jsiiProxy_JSII417PublicBaseOfBase struct {
	_ byte // padding
}

func (j *jsiiProxy_JSII417PublicBaseOfBase) HasRoot() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"hasRoot",
		&returns,
	)
	return returns
}


func NewJSII417PublicBaseOfBase() JSII417PublicBaseOfBase {
	_init_.Initialize()

	j := jsiiProxy_JSII417PublicBaseOfBase{}

	_jsii_.Create(
		"jsii-calc.JSII417PublicBaseOfBase",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewJSII417PublicBaseOfBase_Override(j JSII417PublicBaseOfBase) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.JSII417PublicBaseOfBase",
		nil, // no parameters
		j,
	)
}

func JSII417PublicBaseOfBase_MakeInstance() JSII417PublicBaseOfBase {
	_init_.Initialize()

	var returns JSII417PublicBaseOfBase

	_jsii_.StaticInvoke(
		"jsii-calc.JSII417PublicBaseOfBase",
		"makeInstance",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (j *jsiiProxy_JSII417PublicBaseOfBase) Foo() {
	_jsii_.InvokeVoid(
		j,
		"foo",
		nil, // no parameters
	)
}

type JSObjectLiteralForInterface interface {
	GiveMeFriendly() scopejsiicalclib.IFriendly
	GiveMeFriendlyGenerator() IFriendlyRandomGenerator
}

// The jsii proxy struct for JSObjectLiteralForInterface
type jsiiProxy_JSObjectLiteralForInterface struct {
	_ byte // padding
}

func NewJSObjectLiteralForInterface() JSObjectLiteralForInterface {
	_init_.Initialize()

	j := jsiiProxy_JSObjectLiteralForInterface{}

	_jsii_.Create(
		"jsii-calc.JSObjectLiteralForInterface",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewJSObjectLiteralForInterface_Override(j JSObjectLiteralForInterface) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.JSObjectLiteralForInterface",
		nil, // no parameters
		j,
	)
}

func (j *jsiiProxy_JSObjectLiteralForInterface) GiveMeFriendly() scopejsiicalclib.IFriendly {
	var returns scopejsiicalclib.IFriendly

	_jsii_.Invoke(
		j,
		"giveMeFriendly",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (j *jsiiProxy_JSObjectLiteralForInterface) GiveMeFriendlyGenerator() IFriendlyRandomGenerator {
	var returns IFriendlyRandomGenerator

	_jsii_.Invoke(
		j,
		"giveMeFriendlyGenerator",
		nil, // no parameters
		&returns,
	)

	return returns
}

type JSObjectLiteralToNative interface {
	ReturnLiteral() JSObjectLiteralToNativeClass
}

// The jsii proxy struct for JSObjectLiteralToNative
type jsiiProxy_JSObjectLiteralToNative struct {
	_ byte // padding
}

func NewJSObjectLiteralToNative() JSObjectLiteralToNative {
	_init_.Initialize()

	j := jsiiProxy_JSObjectLiteralToNative{}

	_jsii_.Create(
		"jsii-calc.JSObjectLiteralToNative",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewJSObjectLiteralToNative_Override(j JSObjectLiteralToNative) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.JSObjectLiteralToNative",
		nil, // no parameters
		j,
	)
}

func (j *jsiiProxy_JSObjectLiteralToNative) ReturnLiteral() JSObjectLiteralToNativeClass {
	var returns JSObjectLiteralToNativeClass

	_jsii_.Invoke(
		j,
		"returnLiteral",
		nil, // no parameters
		&returns,
	)

	return returns
}

type JSObjectLiteralToNativeClass interface {
	PropA() *string
	SetPropA(val *string)
	PropB() *float64
	SetPropB(val *float64)
}

// The jsii proxy struct for JSObjectLiteralToNativeClass
type jsiiProxy_JSObjectLiteralToNativeClass struct {
	_ byte // padding
}

func (j *jsiiProxy_JSObjectLiteralToNativeClass) PropA() *string {
	var returns *string
	_jsii_.Get(
		j,
		"propA",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_JSObjectLiteralToNativeClass) PropB() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"propB",
		&returns,
	)
	return returns
}


func NewJSObjectLiteralToNativeClass() JSObjectLiteralToNativeClass {
	_init_.Initialize()

	j := jsiiProxy_JSObjectLiteralToNativeClass{}

	_jsii_.Create(
		"jsii-calc.JSObjectLiteralToNativeClass",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewJSObjectLiteralToNativeClass_Override(j JSObjectLiteralToNativeClass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.JSObjectLiteralToNativeClass",
		nil, // no parameters
		j,
	)
}

func (j *jsiiProxy_JSObjectLiteralToNativeClass) SetPropA(val *string) {
	_jsii_.Set(
		j,
		"propA",
		val,
	)
}

func (j *jsiiProxy_JSObjectLiteralToNativeClass) SetPropB(val *float64) {
	_jsii_.Set(
		j,
		"propB",
		val,
	)
}

type JavaReservedWords interface {
	While() *string
	SetWhile(val *string)
	Abstract()
	Assert()
	Boolean()
	Break()
	Byte()
	Case()
	Catch()
	Char()
	Class()
	Const()
	Continue()
	Default()
	Do()
	Double()
	Else()
	Enum()
	Extends()
	False()
	Final()
	Finally()
	Float()
	For()
	Goto()
	If()
	Implements()
	Import()
	Instanceof()
	Int()
	Interface()
	Long()
	Native()
	New()
	Null()
	Package()
	Private()
	Protected()
	Public()
	Return()
	Short()
	Static()
	Strictfp()
	Super()
	Switch()
	Synchronized()
	This()
	Throw()
	Throws()
	Transient()
	True()
	Try()
	Void()
	Volatile()
}

// The jsii proxy struct for JavaReservedWords
type jsiiProxy_JavaReservedWords struct {
	_ byte // padding
}

func (j *jsiiProxy_JavaReservedWords) While() *string {
	var returns *string
	_jsii_.Get(
		j,
		"while",
		&returns,
	)
	return returns
}


func NewJavaReservedWords() JavaReservedWords {
	_init_.Initialize()

	j := jsiiProxy_JavaReservedWords{}

	_jsii_.Create(
		"jsii-calc.JavaReservedWords",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewJavaReservedWords_Override(j JavaReservedWords) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.JavaReservedWords",
		nil, // no parameters
		j,
	)
}

func (j *jsiiProxy_JavaReservedWords) SetWhile(val *string) {
	_jsii_.Set(
		j,
		"while",
		val,
	)
}

func (j *jsiiProxy_JavaReservedWords) Abstract() {
	_jsii_.InvokeVoid(
		j,
		"abstract",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Assert() {
	_jsii_.InvokeVoid(
		j,
		"assert",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Boolean() {
	_jsii_.InvokeVoid(
		j,
		"boolean",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Break() {
	_jsii_.InvokeVoid(
		j,
		"break",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Byte() {
	_jsii_.InvokeVoid(
		j,
		"byte",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Case() {
	_jsii_.InvokeVoid(
		j,
		"case",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Catch() {
	_jsii_.InvokeVoid(
		j,
		"catch",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Char() {
	_jsii_.InvokeVoid(
		j,
		"char",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Class() {
	_jsii_.InvokeVoid(
		j,
		"class",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Const() {
	_jsii_.InvokeVoid(
		j,
		"const",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Continue() {
	_jsii_.InvokeVoid(
		j,
		"continue",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Default() {
	_jsii_.InvokeVoid(
		j,
		"default",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Do() {
	_jsii_.InvokeVoid(
		j,
		"do",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Double() {
	_jsii_.InvokeVoid(
		j,
		"double",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Else() {
	_jsii_.InvokeVoid(
		j,
		"else",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Enum() {
	_jsii_.InvokeVoid(
		j,
		"enum",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Extends() {
	_jsii_.InvokeVoid(
		j,
		"extends",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) False() {
	_jsii_.InvokeVoid(
		j,
		"false",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Final() {
	_jsii_.InvokeVoid(
		j,
		"final",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Finally() {
	_jsii_.InvokeVoid(
		j,
		"finally",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Float() {
	_jsii_.InvokeVoid(
		j,
		"float",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) For() {
	_jsii_.InvokeVoid(
		j,
		"for",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Goto() {
	_jsii_.InvokeVoid(
		j,
		"goto",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) If() {
	_jsii_.InvokeVoid(
		j,
		"if",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Implements() {
	_jsii_.InvokeVoid(
		j,
		"implements",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Import() {
	_jsii_.InvokeVoid(
		j,
		"import",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Instanceof() {
	_jsii_.InvokeVoid(
		j,
		"instanceof",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Int() {
	_jsii_.InvokeVoid(
		j,
		"int",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Interface() {
	_jsii_.InvokeVoid(
		j,
		"interface",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Long() {
	_jsii_.InvokeVoid(
		j,
		"long",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Native() {
	_jsii_.InvokeVoid(
		j,
		"native",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) New() {
	_jsii_.InvokeVoid(
		j,
		"new",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Null() {
	_jsii_.InvokeVoid(
		j,
		"null",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Package() {
	_jsii_.InvokeVoid(
		j,
		"package",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Private() {
	_jsii_.InvokeVoid(
		j,
		"private",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Protected() {
	_jsii_.InvokeVoid(
		j,
		"protected",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Public() {
	_jsii_.InvokeVoid(
		j,
		"public",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Return() {
	_jsii_.InvokeVoid(
		j,
		"return",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Short() {
	_jsii_.InvokeVoid(
		j,
		"short",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Static() {
	_jsii_.InvokeVoid(
		j,
		"static",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Strictfp() {
	_jsii_.InvokeVoid(
		j,
		"strictfp",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Super() {
	_jsii_.InvokeVoid(
		j,
		"super",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Switch() {
	_jsii_.InvokeVoid(
		j,
		"switch",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Synchronized() {
	_jsii_.InvokeVoid(
		j,
		"synchronized",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) This() {
	_jsii_.InvokeVoid(
		j,
		"this",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Throw() {
	_jsii_.InvokeVoid(
		j,
		"throw",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Throws() {
	_jsii_.InvokeVoid(
		j,
		"throws",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Transient() {
	_jsii_.InvokeVoid(
		j,
		"transient",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) True() {
	_jsii_.InvokeVoid(
		j,
		"true",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Try() {
	_jsii_.InvokeVoid(
		j,
		"try",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Void() {
	_jsii_.InvokeVoid(
		j,
		"void",
		nil, // no parameters
	)
}

func (j *jsiiProxy_JavaReservedWords) Volatile() {
	_jsii_.InvokeVoid(
		j,
		"volatile",
		nil, // no parameters
	)
}

type Jsii487Derived interface {
	IJsii487External
	IJsii487External2
}

// The jsii proxy struct for Jsii487Derived
type jsiiProxy_Jsii487Derived struct {
	jsiiProxy_IJsii487External
	jsiiProxy_IJsii487External2
}

func NewJsii487Derived() Jsii487Derived {
	_init_.Initialize()

	j := jsiiProxy_Jsii487Derived{}

	_jsii_.Create(
		"jsii-calc.Jsii487Derived",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewJsii487Derived_Override(j Jsii487Derived) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Jsii487Derived",
		nil, // no parameters
		j,
	)
}

type Jsii496Derived interface {
	IJsii496
}

// The jsii proxy struct for Jsii496Derived
type jsiiProxy_Jsii496Derived struct {
	jsiiProxy_IJsii496
}

func NewJsii496Derived() Jsii496Derived {
	_init_.Initialize()

	j := jsiiProxy_Jsii496Derived{}

	_jsii_.Create(
		"jsii-calc.Jsii496Derived",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewJsii496Derived_Override(j Jsii496Derived) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Jsii496Derived",
		nil, // no parameters
		j,
	)
}

// Host runtime version should be set via JSII_AGENT.
type JsiiAgent interface {
}

// The jsii proxy struct for JsiiAgent
type jsiiProxy_JsiiAgent struct {
	_ byte // padding
}

func NewJsiiAgent() JsiiAgent {
	_init_.Initialize()

	j := jsiiProxy_JsiiAgent{}

	_jsii_.Create(
		"jsii-calc.JsiiAgent",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewJsiiAgent_Override(j JsiiAgent) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.JsiiAgent",
		nil, // no parameters
		j,
	)
}

func JsiiAgent_Value() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"jsii-calc.JsiiAgent",
		"value",
		&returns,
	)
	return returns
}

// Make sure structs are un-decorated on the way in.
// See: https://github.com/aws/aws-cdk/issues/5066
//
type JsonFormatter interface {
}

// The jsii proxy struct for JsonFormatter
type jsiiProxy_JsonFormatter struct {
	_ byte // padding
}

func JsonFormatter_AnyArray() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyArray",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyBooleanFalse() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyBooleanFalse",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyBooleanTrue() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyBooleanTrue",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyDate() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyDate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyEmptyString() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyEmptyString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyFunction() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyFunction",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyHash() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyHash",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyNull() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyNull",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyNumber() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyNumber",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyRef() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyRef",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyString() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyUndefined() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyUndefined",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_AnyZero() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyZero",
		nil, // no parameters
		&returns,
	)

	return returns
}

func JsonFormatter_Stringify(value interface{}) *string {
	_init_.Initialize()

	var returns *string

	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"stringify",
		[]interface{}{value},
		&returns,
	)

	return returns
}

// Validates that nested classes get correct code generation for the occasional forward reference.
type LevelOne interface {
	Props() *LevelOneProps
}

// The jsii proxy struct for LevelOne
type jsiiProxy_LevelOne struct {
	_ byte // padding
}

func (j *jsiiProxy_LevelOne) Props() *LevelOneProps {
	var returns *LevelOneProps
	_jsii_.Get(
		j,
		"props",
		&returns,
	)
	return returns
}


func NewLevelOne(props *LevelOneProps) LevelOne {
	_init_.Initialize()

	j := jsiiProxy_LevelOne{}

	_jsii_.Create(
		"jsii-calc.LevelOne",
		[]interface{}{props},
		&j,
	)

	return &j
}

func NewLevelOne_Override(l LevelOne, props *LevelOneProps) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.LevelOne",
		[]interface{}{props},
		l,
	)
}

type LevelOne_PropBooleanValue struct {
	Value *bool \`json:"value"\`
}

type LevelOne_PropProperty struct {
	Prop *LevelOne_PropBooleanValue \`json:"prop"\`
}

type LevelOneProps struct {
	Prop *LevelOne_PropProperty \`json:"prop"\`
}

// jsii#298: show default values in sphinx documentation, and respect newlines.
type LoadBalancedFargateServiceProps struct {
	// The container port of the application load balancer attached to your Fargate service.
	//
	// Corresponds to container port mapping.
	ContainerPort *float64 \`json:"containerPort"\`
	// The number of cpu units used by the task.
	//
	// Valid values, which determines your range of valid values for the memory parameter:
	// 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
	// 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
	// 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
	// 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
	// 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
	//
	// This default is set in the underlying FargateTaskDefinition construct.
	Cpu *string \`json:"cpu"\`
	// The amount (in MiB) of memory used by the task.
	//
	// This field is required and you must use one of the following values, which determines your range of valid values
	// for the cpu parameter:
	//
	// 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
	//
	// 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
	//
	// 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
	//
	// Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
	//
	// Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
	//
	// This default is set in the underlying FargateTaskDefinition construct.
	MemoryMiB *string \`json:"memoryMiB"\`
	// Determines whether the Application Load Balancer will be internet-facing.
	PublicLoadBalancer *bool \`json:"publicLoadBalancer"\`
	// Determines whether your Fargate Service will be assigned a public IP address.
	PublicTasks *bool \`json:"publicTasks"\`
}

type MethodNamedProperty interface {
	Elite() *float64
	Property() *string
}

// The jsii proxy struct for MethodNamedProperty
type jsiiProxy_MethodNamedProperty struct {
	_ byte // padding
}

func (j *jsiiProxy_MethodNamedProperty) Elite() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"elite",
		&returns,
	)
	return returns
}


func NewMethodNamedProperty() MethodNamedProperty {
	_init_.Initialize()

	j := jsiiProxy_MethodNamedProperty{}

	_jsii_.Create(
		"jsii-calc.MethodNamedProperty",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewMethodNamedProperty_Override(m MethodNamedProperty) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.MethodNamedProperty",
		nil, // no parameters
		m,
	)
}

func (m *jsiiProxy_MethodNamedProperty) Property() *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"property",
		nil, // no parameters
		&returns,
	)

	return returns
}

// The "*" binary operation.
type Multiply interface {
	BinaryOperation
	IFriendlier
	IRandomNumberGenerator
	Lhs() scopejsiicalclib.NumericValue
	Rhs() scopejsiicalclib.NumericValue
	Value() *float64
	Farewell() *string
	Goodbye() *string
	Hello() *string
	Next() *float64
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for Multiply
type jsiiProxy_Multiply struct {
	jsiiProxy_BinaryOperation
	jsiiProxy_IFriendlier
	jsiiProxy_IRandomNumberGenerator
}

func (j *jsiiProxy_Multiply) Lhs() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"lhs",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Multiply) Rhs() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"rhs",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Multiply) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


// Creates a BinaryOperation.
func NewMultiply(lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) Multiply {
	_init_.Initialize()

	j := jsiiProxy_Multiply{}

	_jsii_.Create(
		"jsii-calc.Multiply",
		[]interface{}{lhs, rhs},
		&j,
	)

	return &j
}

// Creates a BinaryOperation.
func NewMultiply_Override(m Multiply, lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Multiply",
		[]interface{}{lhs, rhs},
		m,
	)
}

// Say farewell.
func (m *jsiiProxy_Multiply) Farewell() *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"farewell",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Say goodbye.
func (m *jsiiProxy_Multiply) Goodbye() *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"goodbye",
		nil, // no parameters
		&returns,
	)

	return returns
}

// (deprecated) Say hello!
func (m *jsiiProxy_Multiply) Hello() *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"hello",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns another random number.
func (m *jsiiProxy_Multiply) Next() *float64 {
	var returns *float64

	_jsii_.Invoke(
		m,
		"next",
		nil, // no parameters
		&returns,
	)

	return returns
}

// (deprecated) String representation of the value.
func (m *jsiiProxy_Multiply) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (m *jsiiProxy_Multiply) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		m,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

// The negation operation ("-value").
type Negate interface {
	UnaryOperation
	IFriendlier
	Operand() scopejsiicalclib.NumericValue
	Value() *float64
	Farewell() *string
	Goodbye() *string
	Hello() *string
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for Negate
type jsiiProxy_Negate struct {
	jsiiProxy_UnaryOperation
	jsiiProxy_IFriendlier
}

func (j *jsiiProxy_Negate) Operand() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"operand",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Negate) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


func NewNegate(operand scopejsiicalclib.NumericValue) Negate {
	_init_.Initialize()

	j := jsiiProxy_Negate{}

	_jsii_.Create(
		"jsii-calc.Negate",
		[]interface{}{operand},
		&j,
	)

	return &j
}

func NewNegate_Override(n Negate, operand scopejsiicalclib.NumericValue) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Negate",
		[]interface{}{operand},
		n,
	)
}

// Say farewell.
func (n *jsiiProxy_Negate) Farewell() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"farewell",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Say goodbye.
func (n *jsiiProxy_Negate) Goodbye() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"goodbye",
		nil, // no parameters
		&returns,
	)

	return returns
}

// (deprecated) Say hello!
func (n *jsiiProxy_Negate) Hello() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"hello",
		nil, // no parameters
		&returns,
	)

	return returns
}

// (deprecated) String representation of the value.
func (n *jsiiProxy_Negate) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (n *jsiiProxy_Negate) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		n,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

type NestedClassInstance interface {
}

// The jsii proxy struct for NestedClassInstance
type jsiiProxy_NestedClassInstance struct {
	_ byte // padding
}

func NestedClassInstance_MakeInstance() customsubmodulename.NestingClass_NestedClass {
	_init_.Initialize()

	var returns customsubmodulename.NestingClass_NestedClass

	_jsii_.StaticInvoke(
		"jsii-calc.NestedClassInstance",
		"makeInstance",
		nil, // no parameters
		&returns,
	)

	return returns
}

type NestedStruct struct {
	// When provided, must be > 0.
	NumberProp *float64 \`json:"numberProp"\`
}

// Test fixture to verify that jsii modules can use the node standard library.
type NodeStandardLibrary interface {
	OsPlatform() *string
	CryptoSha256() *string
	FsReadFile() *string
	FsReadFileSync() *string
}

// The jsii proxy struct for NodeStandardLibrary
type jsiiProxy_NodeStandardLibrary struct {
	_ byte // padding
}

func (j *jsiiProxy_NodeStandardLibrary) OsPlatform() *string {
	var returns *string
	_jsii_.Get(
		j,
		"osPlatform",
		&returns,
	)
	return returns
}


func NewNodeStandardLibrary() NodeStandardLibrary {
	_init_.Initialize()

	j := jsiiProxy_NodeStandardLibrary{}

	_jsii_.Create(
		"jsii-calc.NodeStandardLibrary",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewNodeStandardLibrary_Override(n NodeStandardLibrary) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.NodeStandardLibrary",
		nil, // no parameters
		n,
	)
}

// Uses node.js "crypto" module to calculate sha256 of a string.
//
// Returns: "6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50"
func (n *jsiiProxy_NodeStandardLibrary) CryptoSha256() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"cryptoSha256",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Reads a local resource file (resource.txt) asynchronously.
//
// Returns: "Hello, resource!"
func (n *jsiiProxy_NodeStandardLibrary) FsReadFile() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"fsReadFile",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Sync version of fsReadFile.
//
// Returns: "Hello, resource! SYNC!"
func (n *jsiiProxy_NodeStandardLibrary) FsReadFileSync() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"fsReadFileSync",
		nil, // no parameters
		&returns,
	)

	return returns
}

// jsii#282, aws-cdk#157: null should be treated as "undefined".
type NullShouldBeTreatedAsUndefined interface {
	ChangeMeToUndefined() *string
	SetChangeMeToUndefined(val *string)
	GiveMeUndefined(value interface{})
	GiveMeUndefinedInsideAnObject(input *NullShouldBeTreatedAsUndefinedData)
	VerifyPropertyIsUndefined()
}

// The jsii proxy struct for NullShouldBeTreatedAsUndefined
type jsiiProxy_NullShouldBeTreatedAsUndefined struct {
	_ byte // padding
}

func (j *jsiiProxy_NullShouldBeTreatedAsUndefined) ChangeMeToUndefined() *string {
	var returns *string
	_jsii_.Get(
		j,
		"changeMeToUndefined",
		&returns,
	)
	return returns
}


func NewNullShouldBeTreatedAsUndefined(_param1 *string, optional interface{}) NullShouldBeTreatedAsUndefined {
	_init_.Initialize()

	j := jsiiProxy_NullShouldBeTreatedAsUndefined{}

	_jsii_.Create(
		"jsii-calc.NullShouldBeTreatedAsUndefined",
		[]interface{}{_param1, optional},
		&j,
	)

	return &j
}

func NewNullShouldBeTreatedAsUndefined_Override(n NullShouldBeTreatedAsUndefined, _param1 *string, optional interface{}) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.NullShouldBeTreatedAsUndefined",
		[]interface{}{_param1, optional},
		n,
	)
}

func (j *jsiiProxy_NullShouldBeTreatedAsUndefined) SetChangeMeToUndefined(val *string) {
	_jsii_.Set(
		j,
		"changeMeToUndefined",
		val,
	)
}

func (n *jsiiProxy_NullShouldBeTreatedAsUndefined) GiveMeUndefined(value interface{}) {
	_jsii_.InvokeVoid(
		n,
		"giveMeUndefined",
		[]interface{}{value},
	)
}

func (n *jsiiProxy_NullShouldBeTreatedAsUndefined) GiveMeUndefinedInsideAnObject(input *NullShouldBeTreatedAsUndefinedData) {
	_jsii_.InvokeVoid(
		n,
		"giveMeUndefinedInsideAnObject",
		[]interface{}{input},
	)
}

func (n *jsiiProxy_NullShouldBeTreatedAsUndefined) VerifyPropertyIsUndefined() {
	_jsii_.InvokeVoid(
		n,
		"verifyPropertyIsUndefined",
		nil, // no parameters
	)
}

type NullShouldBeTreatedAsUndefinedData struct {
	ArrayWithThreeElementsAndUndefinedAsSecondArgument *[]interface{} \`json:"arrayWithThreeElementsAndUndefinedAsSecondArgument"\`
	ThisShouldBeUndefined interface{} \`json:"thisShouldBeUndefined"\`
}

// This allows us to test that a reference can be stored for objects that implement interfaces.
type NumberGenerator interface {
	Generator() IRandomNumberGenerator
	SetGenerator(val IRandomNumberGenerator)
	IsSameGenerator(gen IRandomNumberGenerator) *bool
	NextTimes100() *float64
}

// The jsii proxy struct for NumberGenerator
type jsiiProxy_NumberGenerator struct {
	_ byte // padding
}

func (j *jsiiProxy_NumberGenerator) Generator() IRandomNumberGenerator {
	var returns IRandomNumberGenerator
	_jsii_.Get(
		j,
		"generator",
		&returns,
	)
	return returns
}


func NewNumberGenerator(generator IRandomNumberGenerator) NumberGenerator {
	_init_.Initialize()

	j := jsiiProxy_NumberGenerator{}

	_jsii_.Create(
		"jsii-calc.NumberGenerator",
		[]interface{}{generator},
		&j,
	)

	return &j
}

func NewNumberGenerator_Override(n NumberGenerator, generator IRandomNumberGenerator) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.NumberGenerator",
		[]interface{}{generator},
		n,
	)
}

func (j *jsiiProxy_NumberGenerator) SetGenerator(val IRandomNumberGenerator) {
	_jsii_.Set(
		j,
		"generator",
		val,
	)
}

func (n *jsiiProxy_NumberGenerator) IsSameGenerator(gen IRandomNumberGenerator) *bool {
	var returns *bool

	_jsii_.Invoke(
		n,
		"isSameGenerator",
		[]interface{}{gen},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NumberGenerator) NextTimes100() *float64 {
	var returns *float64

	_jsii_.Invoke(
		n,
		"nextTimes100",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Verify that object references can be passed inside collections.
type ObjectRefsInCollections interface {
	SumFromArray(values *[]scopejsiicalclib.NumericValue) *float64
	SumFromMap(values *map[string]scopejsiicalclib.NumericValue) *float64
}

// The jsii proxy struct for ObjectRefsInCollections
type jsiiProxy_ObjectRefsInCollections struct {
	_ byte // padding
}

func NewObjectRefsInCollections() ObjectRefsInCollections {
	_init_.Initialize()

	j := jsiiProxy_ObjectRefsInCollections{}

	_jsii_.Create(
		"jsii-calc.ObjectRefsInCollections",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewObjectRefsInCollections_Override(o ObjectRefsInCollections) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ObjectRefsInCollections",
		nil, // no parameters
		o,
	)
}

// Returns the sum of all values.
func (o *jsiiProxy_ObjectRefsInCollections) SumFromArray(values *[]scopejsiicalclib.NumericValue) *float64 {
	var returns *float64

	_jsii_.Invoke(
		o,
		"sumFromArray",
		[]interface{}{values},
		&returns,
	)

	return returns
}

// Returns the sum of all values in a map.
func (o *jsiiProxy_ObjectRefsInCollections) SumFromMap(values *map[string]scopejsiicalclib.NumericValue) *float64 {
	var returns *float64

	_jsii_.Invoke(
		o,
		"sumFromMap",
		[]interface{}{values},
		&returns,
	)

	return returns
}

type ObjectWithPropertyProvider interface {
}

// The jsii proxy struct for ObjectWithPropertyProvider
type jsiiProxy_ObjectWithPropertyProvider struct {
	_ byte // padding
}

func ObjectWithPropertyProvider_Provide() IObjectWithProperty {
	_init_.Initialize()

	var returns IObjectWithProperty

	_jsii_.StaticInvoke(
		"jsii-calc.ObjectWithPropertyProvider",
		"provide",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Old class.
// Deprecated: Use the new class or the old class whatever you want because
// whatever you like is always the best
type Old interface {
	DoAThing()
}

// The jsii proxy struct for Old
type jsiiProxy_Old struct {
	_ byte // padding
}

// Deprecated: Use the new class or the old class whatever you want because
// whatever you like is always the best
func NewOld() Old {
	_init_.Initialize()

	j := jsiiProxy_Old{}

	_jsii_.Create(
		"jsii-calc.Old",
		nil, // no parameters
		&j,
	)

	return &j
}

// Deprecated: Use the new class or the old class whatever you want because
// whatever you like is always the best
func NewOld_Override(o Old) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Old",
		nil, // no parameters
		o,
	)
}

// Doo wop that thing.
// Deprecated: Use the new class or the old class whatever you want because
// whatever you like is always the best
func (o *jsiiProxy_Old) DoAThing() {
	_jsii_.InvokeVoid(
		o,
		"doAThing",
		nil, // no parameters
	)
}

type OptionalArgumentInvoker interface {
	InvokeWithOptional()
	InvokeWithoutOptional()
}

// The jsii proxy struct for OptionalArgumentInvoker
type jsiiProxy_OptionalArgumentInvoker struct {
	_ byte // padding
}

func NewOptionalArgumentInvoker(delegate IInterfaceWithOptionalMethodArguments) OptionalArgumentInvoker {
	_init_.Initialize()

	j := jsiiProxy_OptionalArgumentInvoker{}

	_jsii_.Create(
		"jsii-calc.OptionalArgumentInvoker",
		[]interface{}{delegate},
		&j,
	)

	return &j
}

func NewOptionalArgumentInvoker_Override(o OptionalArgumentInvoker, delegate IInterfaceWithOptionalMethodArguments) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.OptionalArgumentInvoker",
		[]interface{}{delegate},
		o,
	)
}

func (o *jsiiProxy_OptionalArgumentInvoker) InvokeWithOptional() {
	_jsii_.InvokeVoid(
		o,
		"invokeWithOptional",
		nil, // no parameters
	)
}

func (o *jsiiProxy_OptionalArgumentInvoker) InvokeWithoutOptional() {
	_jsii_.InvokeVoid(
		o,
		"invokeWithoutOptional",
		nil, // no parameters
	)
}

type OptionalConstructorArgument interface {
	Arg1() *float64
	Arg2() *string
	Arg3() *string
}

// The jsii proxy struct for OptionalConstructorArgument
type jsiiProxy_OptionalConstructorArgument struct {
	_ byte // padding
}

func (j *jsiiProxy_OptionalConstructorArgument) Arg1() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"arg1",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OptionalConstructorArgument) Arg2() *string {
	var returns *string
	_jsii_.Get(
		j,
		"arg2",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OptionalConstructorArgument) Arg3() *string {
	var returns *string
	_jsii_.Get(
		j,
		"arg3",
		&returns,
	)
	return returns
}


func NewOptionalConstructorArgument(arg1 *float64, arg2 *string, arg3 *string) OptionalConstructorArgument {
	_init_.Initialize()

	j := jsiiProxy_OptionalConstructorArgument{}

	_jsii_.Create(
		"jsii-calc.OptionalConstructorArgument",
		[]interface{}{arg1, arg2, arg3},
		&j,
	)

	return &j
}

func NewOptionalConstructorArgument_Override(o OptionalConstructorArgument, arg1 *float64, arg2 *string, arg3 *string) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.OptionalConstructorArgument",
		[]interface{}{arg1, arg2, arg3},
		o,
	)
}

type OptionalStruct struct {
	Field *string \`json:"field"\`
}

type OptionalStructConsumer interface {
	FieldValue() *string
	ParameterWasUndefined() *bool
}

// The jsii proxy struct for OptionalStructConsumer
type jsiiProxy_OptionalStructConsumer struct {
	_ byte // padding
}

func (j *jsiiProxy_OptionalStructConsumer) FieldValue() *string {
	var returns *string
	_jsii_.Get(
		j,
		"fieldValue",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OptionalStructConsumer) ParameterWasUndefined() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"parameterWasUndefined",
		&returns,
	)
	return returns
}


func NewOptionalStructConsumer(optionalStruct *OptionalStruct) OptionalStructConsumer {
	_init_.Initialize()

	j := jsiiProxy_OptionalStructConsumer{}

	_jsii_.Create(
		"jsii-calc.OptionalStructConsumer",
		[]interface{}{optionalStruct},
		&j,
	)

	return &j
}

func NewOptionalStructConsumer_Override(o OptionalStructConsumer, optionalStruct *OptionalStruct) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.OptionalStructConsumer",
		[]interface{}{optionalStruct},
		o,
	)
}

// See: https://github.com/aws/jsii/issues/903
//
type OverridableProtectedMember interface {
	OverrideReadOnly() *string
	OverrideReadWrite() *string
	OverrideMe() *string
	SwitchModes()
	ValueFromProtected() *string
}

// The jsii proxy struct for OverridableProtectedMember
type jsiiProxy_OverridableProtectedMember struct {
	_ byte // padding
}

func (j *jsiiProxy_OverridableProtectedMember) OverrideReadOnly() *string {
	var returns *string
	_jsii_.Get(
		j,
		"overrideReadOnly",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OverridableProtectedMember) OverrideReadWrite() *string {
	var returns *string
	_jsii_.Get(
		j,
		"overrideReadWrite",
		&returns,
	)
	return returns
}


func NewOverridableProtectedMember() OverridableProtectedMember {
	_init_.Initialize()

	j := jsiiProxy_OverridableProtectedMember{}

	_jsii_.Create(
		"jsii-calc.OverridableProtectedMember",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewOverridableProtectedMember_Override(o OverridableProtectedMember) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.OverridableProtectedMember",
		nil, // no parameters
		o,
	)
}

func (j *jsiiProxy_OverridableProtectedMember) SetOverrideReadWrite(val *string) {
	_jsii_.Set(
		j,
		"overrideReadWrite",
		val,
	)
}

func (o *jsiiProxy_OverridableProtectedMember) OverrideMe() *string {
	var returns *string

	_jsii_.Invoke(
		o,
		"overrideMe",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OverridableProtectedMember) SwitchModes() {
	_jsii_.InvokeVoid(
		o,
		"switchModes",
		nil, // no parameters
	)
}

func (o *jsiiProxy_OverridableProtectedMember) ValueFromProtected() *string {
	var returns *string

	_jsii_.Invoke(
		o,
		"valueFromProtected",
		nil, // no parameters
		&returns,
	)

	return returns
}

type OverrideReturnsObject interface {
	Test(obj IReturnsNumber) *float64
}

// The jsii proxy struct for OverrideReturnsObject
type jsiiProxy_OverrideReturnsObject struct {
	_ byte // padding
}

func NewOverrideReturnsObject() OverrideReturnsObject {
	_init_.Initialize()

	j := jsiiProxy_OverrideReturnsObject{}

	_jsii_.Create(
		"jsii-calc.OverrideReturnsObject",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewOverrideReturnsObject_Override(o OverrideReturnsObject) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.OverrideReturnsObject",
		nil, // no parameters
		o,
	)
}

func (o *jsiiProxy_OverrideReturnsObject) Test(obj IReturnsNumber) *float64 {
	var returns *float64

	_jsii_.Invoke(
		o,
		"test",
		[]interface{}{obj},
		&returns,
	)

	return returns
}

// https://github.com/aws/jsii/issues/982.
type ParentStruct982 struct {
	Foo *string \`json:"foo"\`
}

type PartiallyInitializedThisConsumer interface {
	ConsumePartiallyInitializedThis(obj ConstructorPassesThisOut, dt *string, ev AllTypesEnum) *string
}

// The jsii proxy struct for PartiallyInitializedThisConsumer
type jsiiProxy_PartiallyInitializedThisConsumer struct {
	_ byte // padding
}

func NewPartiallyInitializedThisConsumer_Override(p PartiallyInitializedThisConsumer) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.PartiallyInitializedThisConsumer",
		nil, // no parameters
		p,
	)
}

func (p *jsiiProxy_PartiallyInitializedThisConsumer) ConsumePartiallyInitializedThis(obj ConstructorPassesThisOut, dt *string, ev AllTypesEnum) *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"consumePartiallyInitializedThis",
		[]interface{}{obj, dt, ev},
		&returns,
	)

	return returns
}

type Polymorphism interface {
	SayHello(friendly scopejsiicalclib.IFriendly) *string
}

// The jsii proxy struct for Polymorphism
type jsiiProxy_Polymorphism struct {
	_ byte // padding
}

func NewPolymorphism() Polymorphism {
	_init_.Initialize()

	j := jsiiProxy_Polymorphism{}

	_jsii_.Create(
		"jsii-calc.Polymorphism",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewPolymorphism_Override(p Polymorphism) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Polymorphism",
		nil, // no parameters
		p,
	)
}

func (p *jsiiProxy_Polymorphism) SayHello(friendly scopejsiicalclib.IFriendly) *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"sayHello",
		[]interface{}{friendly},
		&returns,
	)

	return returns
}

// The power operation.
type Power interface {
	composition.CompositeOperation
	Base() scopejsiicalclib.NumericValue
	DecorationPostfixes() *[]*string
	SetDecorationPostfixes(val *[]*string)
	DecorationPrefixes() *[]*string
	SetDecorationPrefixes(val *[]*string)
	Expression() scopejsiicalclib.NumericValue
	Pow() scopejsiicalclib.NumericValue
	StringStyle() composition.CompositeOperation_CompositionStringStyle
	SetStringStyle(val composition.CompositeOperation_CompositionStringStyle)
	Value() *float64
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for Power
type jsiiProxy_Power struct {
	internal.Type__compositionCompositeOperation
}

func (j *jsiiProxy_Power) Base() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"base",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Power) DecorationPostfixes() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"decorationPostfixes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Power) DecorationPrefixes() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"decorationPrefixes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Power) Expression() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"expression",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Power) Pow() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"pow",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Power) StringStyle() composition.CompositeOperation_CompositionStringStyle {
	var returns composition.CompositeOperation_CompositionStringStyle
	_jsii_.Get(
		j,
		"stringStyle",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Power) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


// Creates a Power operation.
func NewPower(base scopejsiicalclib.NumericValue, pow scopejsiicalclib.NumericValue) Power {
	_init_.Initialize()

	j := jsiiProxy_Power{}

	_jsii_.Create(
		"jsii-calc.Power",
		[]interface{}{base, pow},
		&j,
	)

	return &j
}

// Creates a Power operation.
func NewPower_Override(p Power, base scopejsiicalclib.NumericValue, pow scopejsiicalclib.NumericValue) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Power",
		[]interface{}{base, pow},
		p,
	)
}

func (j *jsiiProxy_Power) SetDecorationPostfixes(val *[]*string) {
	_jsii_.Set(
		j,
		"decorationPostfixes",
		val,
	)
}

func (j *jsiiProxy_Power) SetDecorationPrefixes(val *[]*string) {
	_jsii_.Set(
		j,
		"decorationPrefixes",
		val,
	)
}

func (j *jsiiProxy_Power) SetStringStyle(val composition.CompositeOperation_CompositionStringStyle) {
	_jsii_.Set(
		j,
		"stringStyle",
		val,
	)
}

// (deprecated) String representation of the value.
func (p *jsiiProxy_Power) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (p *jsiiProxy_Power) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		p,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Reproduction for https://github.com/aws/jsii/issues/1113 Where a method or property named "property" would result in impossible to load Python code.
type PropertyNamedProperty interface {
	Property() *string
	YetAnoterOne() *bool
}

// The jsii proxy struct for PropertyNamedProperty
type jsiiProxy_PropertyNamedProperty struct {
	_ byte // padding
}

func (j *jsiiProxy_PropertyNamedProperty) Property() *string {
	var returns *string
	_jsii_.Get(
		j,
		"property",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PropertyNamedProperty) YetAnoterOne() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"yetAnoterOne",
		&returns,
	)
	return returns
}


func NewPropertyNamedProperty() PropertyNamedProperty {
	_init_.Initialize()

	j := jsiiProxy_PropertyNamedProperty{}

	_jsii_.Create(
		"jsii-calc.PropertyNamedProperty",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewPropertyNamedProperty_Override(p PropertyNamedProperty) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.PropertyNamedProperty",
		nil, // no parameters
		p,
	)
}

type PublicClass interface {
	Hello()
}

// The jsii proxy struct for PublicClass
type jsiiProxy_PublicClass struct {
	_ byte // padding
}

func NewPublicClass() PublicClass {
	_init_.Initialize()

	j := jsiiProxy_PublicClass{}

	_jsii_.Create(
		"jsii-calc.PublicClass",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewPublicClass_Override(p PublicClass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.PublicClass",
		nil, // no parameters
		p,
	)
}

func (p *jsiiProxy_PublicClass) Hello() {
	_jsii_.InvokeVoid(
		p,
		"hello",
		nil, // no parameters
	)
}

type PythonReservedWords interface {
	And()
	As()
	Assert()
	Async()
	Await()
	Break()
	Class()
	Continue()
	Def()
	Del()
	Elif()
	Else()
	Except()
	Finally()
	For()
	From()
	Global()
	If()
	Import()
	In()
	Is()
	Lambda()
	Nonlocal()
	Not()
	Or()
	Pass()
	Raise()
	Return()
	Try()
	While()
	With()
	Yield()
}

// The jsii proxy struct for PythonReservedWords
type jsiiProxy_PythonReservedWords struct {
	_ byte // padding
}

func NewPythonReservedWords() PythonReservedWords {
	_init_.Initialize()

	j := jsiiProxy_PythonReservedWords{}

	_jsii_.Create(
		"jsii-calc.PythonReservedWords",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewPythonReservedWords_Override(p PythonReservedWords) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.PythonReservedWords",
		nil, // no parameters
		p,
	)
}

func (p *jsiiProxy_PythonReservedWords) And() {
	_jsii_.InvokeVoid(
		p,
		"and",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) As() {
	_jsii_.InvokeVoid(
		p,
		"as",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Assert() {
	_jsii_.InvokeVoid(
		p,
		"assert",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Async() {
	_jsii_.InvokeVoid(
		p,
		"async",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Await() {
	_jsii_.InvokeVoid(
		p,
		"await",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Break() {
	_jsii_.InvokeVoid(
		p,
		"break",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Class() {
	_jsii_.InvokeVoid(
		p,
		"class",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Continue() {
	_jsii_.InvokeVoid(
		p,
		"continue",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Def() {
	_jsii_.InvokeVoid(
		p,
		"def",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Del() {
	_jsii_.InvokeVoid(
		p,
		"del",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Elif() {
	_jsii_.InvokeVoid(
		p,
		"elif",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Else() {
	_jsii_.InvokeVoid(
		p,
		"else",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Except() {
	_jsii_.InvokeVoid(
		p,
		"except",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Finally() {
	_jsii_.InvokeVoid(
		p,
		"finally",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) For() {
	_jsii_.InvokeVoid(
		p,
		"for",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) From() {
	_jsii_.InvokeVoid(
		p,
		"from",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Global() {
	_jsii_.InvokeVoid(
		p,
		"global",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) If() {
	_jsii_.InvokeVoid(
		p,
		"if",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Import() {
	_jsii_.InvokeVoid(
		p,
		"import",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) In() {
	_jsii_.InvokeVoid(
		p,
		"in",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Is() {
	_jsii_.InvokeVoid(
		p,
		"is",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Lambda() {
	_jsii_.InvokeVoid(
		p,
		"lambda",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Nonlocal() {
	_jsii_.InvokeVoid(
		p,
		"nonlocal",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Not() {
	_jsii_.InvokeVoid(
		p,
		"not",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Or() {
	_jsii_.InvokeVoid(
		p,
		"or",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Pass() {
	_jsii_.InvokeVoid(
		p,
		"pass",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Raise() {
	_jsii_.InvokeVoid(
		p,
		"raise",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Return() {
	_jsii_.InvokeVoid(
		p,
		"return",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Try() {
	_jsii_.InvokeVoid(
		p,
		"try",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) While() {
	_jsii_.InvokeVoid(
		p,
		"while",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) With() {
	_jsii_.InvokeVoid(
		p,
		"with",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PythonReservedWords) Yield() {
	_jsii_.InvokeVoid(
		p,
		"yield",
		nil, // no parameters
	)
}

// See awslabs/jsii#138.
type ReferenceEnumFromScopedPackage interface {
	Foo() scopejsiicalclib.EnumFromScopedModule
	SetFoo(val scopejsiicalclib.EnumFromScopedModule)
	LoadFoo() scopejsiicalclib.EnumFromScopedModule
	SaveFoo(value scopejsiicalclib.EnumFromScopedModule)
}

// The jsii proxy struct for ReferenceEnumFromScopedPackage
type jsiiProxy_ReferenceEnumFromScopedPackage struct {
	_ byte // padding
}

func (j *jsiiProxy_ReferenceEnumFromScopedPackage) Foo() scopejsiicalclib.EnumFromScopedModule {
	var returns scopejsiicalclib.EnumFromScopedModule
	_jsii_.Get(
		j,
		"foo",
		&returns,
	)
	return returns
}


func NewReferenceEnumFromScopedPackage() ReferenceEnumFromScopedPackage {
	_init_.Initialize()

	j := jsiiProxy_ReferenceEnumFromScopedPackage{}

	_jsii_.Create(
		"jsii-calc.ReferenceEnumFromScopedPackage",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewReferenceEnumFromScopedPackage_Override(r ReferenceEnumFromScopedPackage) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ReferenceEnumFromScopedPackage",
		nil, // no parameters
		r,
	)
}

func (j *jsiiProxy_ReferenceEnumFromScopedPackage) SetFoo(val scopejsiicalclib.EnumFromScopedModule) {
	_jsii_.Set(
		j,
		"foo",
		val,
	)
}

func (r *jsiiProxy_ReferenceEnumFromScopedPackage) LoadFoo() scopejsiicalclib.EnumFromScopedModule {
	var returns scopejsiicalclib.EnumFromScopedModule

	_jsii_.Invoke(
		r,
		"loadFoo",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_ReferenceEnumFromScopedPackage) SaveFoo(value scopejsiicalclib.EnumFromScopedModule) {
	_jsii_.InvokeVoid(
		r,
		"saveFoo",
		[]interface{}{value},
	)
}

// Helps ensure the JSII kernel & runtime cooperate correctly when an un-exported instance of a class is returned with a declared type that is an exported interface, and the instance inherits from an exported class.
//
// Returns: an instance of an un-exported class that extends \`ExportedBaseClass\`, declared as \`IPrivatelyImplemented\`.
// See: https://github.com/aws/jsii/issues/320
//
type ReturnsPrivateImplementationOfInterface interface {
	PrivateImplementation() IPrivatelyImplemented
}

// The jsii proxy struct for ReturnsPrivateImplementationOfInterface
type jsiiProxy_ReturnsPrivateImplementationOfInterface struct {
	_ byte // padding
}

func (j *jsiiProxy_ReturnsPrivateImplementationOfInterface) PrivateImplementation() IPrivatelyImplemented {
	var returns IPrivatelyImplemented
	_jsii_.Get(
		j,
		"privateImplementation",
		&returns,
	)
	return returns
}


func NewReturnsPrivateImplementationOfInterface() ReturnsPrivateImplementationOfInterface {
	_init_.Initialize()

	j := jsiiProxy_ReturnsPrivateImplementationOfInterface{}

	_jsii_.Create(
		"jsii-calc.ReturnsPrivateImplementationOfInterface",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewReturnsPrivateImplementationOfInterface_Override(r ReturnsPrivateImplementationOfInterface) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.ReturnsPrivateImplementationOfInterface",
		nil, // no parameters
		r,
	)
}

// This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.
//
// This is cheating with the (current) declared types, but this is the "more
// idiomatic" way for Pythonists.
type RootStruct struct {
	// May not be empty.
	StringProp *string \`json:"stringProp"\`
	NestedStruct *NestedStruct \`json:"nestedStruct"\`
}

type RootStructValidator interface {
}

// The jsii proxy struct for RootStructValidator
type jsiiProxy_RootStructValidator struct {
	_ byte // padding
}

func RootStructValidator_Validate(struct_ *RootStruct) {
	_init_.Initialize()

	_jsii_.StaticInvokeVoid(
		"jsii-calc.RootStructValidator",
		"validate",
		[]interface{}{struct_},
	)
}

type RuntimeTypeChecking interface {
	MethodWithDefaultedArguments(arg1 *float64, arg2 *string, arg3 *string)
	MethodWithOptionalAnyArgument(arg interface{})
	MethodWithOptionalArguments(arg1 *float64, arg2 *string, arg3 *string)
}

// The jsii proxy struct for RuntimeTypeChecking
type jsiiProxy_RuntimeTypeChecking struct {
	_ byte // padding
}

func NewRuntimeTypeChecking() RuntimeTypeChecking {
	_init_.Initialize()

	j := jsiiProxy_RuntimeTypeChecking{}

	_jsii_.Create(
		"jsii-calc.RuntimeTypeChecking",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewRuntimeTypeChecking_Override(r RuntimeTypeChecking) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.RuntimeTypeChecking",
		nil, // no parameters
		r,
	)
}

func (r *jsiiProxy_RuntimeTypeChecking) MethodWithDefaultedArguments(arg1 *float64, arg2 *string, arg3 *string) {
	_jsii_.InvokeVoid(
		r,
		"methodWithDefaultedArguments",
		[]interface{}{arg1, arg2, arg3},
	)
}

func (r *jsiiProxy_RuntimeTypeChecking) MethodWithOptionalAnyArgument(arg interface{}) {
	_jsii_.InvokeVoid(
		r,
		"methodWithOptionalAnyArgument",
		[]interface{}{arg},
	)
}

// Used to verify verification of number of method arguments.
func (r *jsiiProxy_RuntimeTypeChecking) MethodWithOptionalArguments(arg1 *float64, arg2 *string, arg3 *string) {
	_jsii_.InvokeVoid(
		r,
		"methodWithOptionalArguments",
		[]interface{}{arg1, arg2, arg3},
	)
}

type SecondLevelStruct struct {
	// It's long and required.
	DeeperRequiredProp *string \`json:"deeperRequiredProp"\`
	// It's long, but you'll almost never pass it.
	DeeperOptionalProp *string \`json:"deeperOptionalProp"\`
}

// Test that a single instance can be returned under two different FQNs.
//
// JSII clients can instantiate 2 different strongly-typed wrappers for the same
// object. Unfortunately, this will break object equality, but if we didn't do
// this it would break runtime type checks in the JVM or CLR.
type SingleInstanceTwoTypes interface {
	Interface1() InbetweenClass
	Interface2() IPublicInterface
}

// The jsii proxy struct for SingleInstanceTwoTypes
type jsiiProxy_SingleInstanceTwoTypes struct {
	_ byte // padding
}

func NewSingleInstanceTwoTypes() SingleInstanceTwoTypes {
	_init_.Initialize()

	j := jsiiProxy_SingleInstanceTwoTypes{}

	_jsii_.Create(
		"jsii-calc.SingleInstanceTwoTypes",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewSingleInstanceTwoTypes_Override(s SingleInstanceTwoTypes) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.SingleInstanceTwoTypes",
		nil, // no parameters
		s,
	)
}

func (s *jsiiProxy_SingleInstanceTwoTypes) Interface1() InbetweenClass {
	var returns InbetweenClass

	_jsii_.Invoke(
		s,
		"interface1",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SingleInstanceTwoTypes) Interface2() IPublicInterface {
	var returns IPublicInterface

	_jsii_.Invoke(
		s,
		"interface2",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Verifies that singleton enums are handled correctly.
//
// https://github.com/aws/jsii/issues/231
type SingletonInt interface {
	IsSingletonInt(value *float64) *bool
}

// The jsii proxy struct for SingletonInt
type jsiiProxy_SingletonInt struct {
	_ byte // padding
}

func (s *jsiiProxy_SingletonInt) IsSingletonInt(value *float64) *bool {
	var returns *bool

	_jsii_.Invoke(
		s,
		"isSingletonInt",
		[]interface{}{value},
		&returns,
	)

	return returns
}

// A singleton integer.
type SingletonIntEnum string

const (
	SingletonIntEnum_SINGLETON_INT SingletonIntEnum = "SINGLETON_INT"
)

// Verifies that singleton enums are handled correctly.
//
// https://github.com/aws/jsii/issues/231
type SingletonString interface {
	IsSingletonString(value *string) *bool
}

// The jsii proxy struct for SingletonString
type jsiiProxy_SingletonString struct {
	_ byte // padding
}

func (s *jsiiProxy_SingletonString) IsSingletonString(value *string) *bool {
	var returns *bool

	_jsii_.Invoke(
		s,
		"isSingletonString",
		[]interface{}{value},
		&returns,
	)

	return returns
}

// A singleton string.
type SingletonStringEnum string

const (
	SingletonStringEnum_SINGLETON_STRING SingletonStringEnum = "SINGLETON_STRING"
)

type SmellyStruct struct {
	Property *string \`json:"property"\`
	YetAnoterOne *bool \`json:"yetAnoterOne"\`
}

type SomeTypeJsii976 interface {
}

// The jsii proxy struct for SomeTypeJsii976
type jsiiProxy_SomeTypeJsii976 struct {
	_ byte // padding
}

func NewSomeTypeJsii976() SomeTypeJsii976 {
	_init_.Initialize()

	j := jsiiProxy_SomeTypeJsii976{}

	_jsii_.Create(
		"jsii-calc.SomeTypeJsii976",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewSomeTypeJsii976_Override(s SomeTypeJsii976) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.SomeTypeJsii976",
		nil, // no parameters
		s,
	)
}

func SomeTypeJsii976_ReturnAnonymous() interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"jsii-calc.SomeTypeJsii976",
		"returnAnonymous",
		nil, // no parameters
		&returns,
	)

	return returns
}

func SomeTypeJsii976_ReturnReturn() IReturnJsii976 {
	_init_.Initialize()

	var returns IReturnJsii976

	_jsii_.StaticInvoke(
		"jsii-calc.SomeTypeJsii976",
		"returnReturn",
		nil, // no parameters
		&returns,
	)

	return returns
}

type StableClass interface {
	MutableProperty() *float64
	SetMutableProperty(val *float64)
	ReadonlyProperty() *string
	Method()
}

// The jsii proxy struct for StableClass
type jsiiProxy_StableClass struct {
	_ byte // padding
}

func (j *jsiiProxy_StableClass) MutableProperty() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StableClass) ReadonlyProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"readonlyProperty",
		&returns,
	)
	return returns
}


func NewStableClass(readonlyString *string, mutableNumber *float64) StableClass {
	_init_.Initialize()

	j := jsiiProxy_StableClass{}

	_jsii_.Create(
		"jsii-calc.StableClass",
		[]interface{}{readonlyString, mutableNumber},
		&j,
	)

	return &j
}

func NewStableClass_Override(s StableClass, readonlyString *string, mutableNumber *float64) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.StableClass",
		[]interface{}{readonlyString, mutableNumber},
		s,
	)
}

func (j *jsiiProxy_StableClass) SetMutableProperty(val *float64) {
	_jsii_.Set(
		j,
		"mutableProperty",
		val,
	)
}

func (s *jsiiProxy_StableClass) Method() {
	_jsii_.InvokeVoid(
		s,
		"method",
		nil, // no parameters
	)
}

type StableEnum string

const (
	StableEnum_OPTION_A StableEnum = "OPTION_A"
	StableEnum_OPTION_B StableEnum = "OPTION_B"
)

type StableStruct struct {
	ReadonlyProperty *string \`json:"readonlyProperty"\`
}

// This is used to validate the ability to use \`this\` from within a static context.
//
// https://github.com/awslabs/aws-cdk/issues/2304
type StaticContext interface {
}

// The jsii proxy struct for StaticContext
type jsiiProxy_StaticContext struct {
	_ byte // padding
}

func StaticContext_CanAccessStaticContext() *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"jsii-calc.StaticContext",
		"canAccessStaticContext",
		nil, // no parameters
		&returns,
	)

	return returns
}

func StaticContext_StaticVariable() *bool {
	_init_.Initialize()
	var returns *bool
	_jsii_.StaticGet(
		"jsii-calc.StaticContext",
		"staticVariable",
		&returns,
	)
	return returns
}

func StaticContext_SetStaticVariable(val *bool) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.StaticContext",
		"staticVariable",
		val,
	)
}

type StaticHelloChild interface {
	StaticHelloParent
}

// The jsii proxy struct for StaticHelloChild
type jsiiProxy_StaticHelloChild struct {
	jsiiProxy_StaticHelloParent
}

func StaticHelloChild_Method() {
	_init_.Initialize()

	_jsii_.StaticInvokeVoid(
		"jsii-calc.StaticHelloChild",
		"method",
		nil, // no parameters
	)
}

func StaticHelloChild_Property() *float64 {
	_init_.Initialize()
	var returns *float64
	_jsii_.StaticGet(
		"jsii-calc.StaticHelloChild",
		"property",
		&returns,
	)
	return returns
}

// Static methods that override parent class are technically overrides (the inheritance of statics is part of the ES6 specification), but certain other languages such as Java do not carry statics in the inheritance chain at all, so they cannot be overridden, only hidden.
//
// The difference is fairly minor (for typical use-cases, the end result is the
// same), however this has implications on what the generated code should look
// like.
type StaticHelloParent interface {
}

// The jsii proxy struct for StaticHelloParent
type jsiiProxy_StaticHelloParent struct {
	_ byte // padding
}

func NewStaticHelloParent() StaticHelloParent {
	_init_.Initialize()

	j := jsiiProxy_StaticHelloParent{}

	_jsii_.Create(
		"jsii-calc.StaticHelloParent",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewStaticHelloParent_Override(s StaticHelloParent) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.StaticHelloParent",
		nil, // no parameters
		s,
	)
}

func StaticHelloParent_Method() {
	_init_.Initialize()

	_jsii_.StaticInvokeVoid(
		"jsii-calc.StaticHelloParent",
		"method",
		nil, // no parameters
	)
}

func StaticHelloParent_Property() *float64 {
	_init_.Initialize()
	var returns *float64
	_jsii_.StaticGet(
		"jsii-calc.StaticHelloParent",
		"property",
		&returns,
	)
	return returns
}

type Statics interface {
	Value() *string
	JustMethod() *string
}

// The jsii proxy struct for Statics
type jsiiProxy_Statics struct {
	_ byte // padding
}

func (j *jsiiProxy_Statics) Value() *string {
	var returns *string
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


func NewStatics(value *string) Statics {
	_init_.Initialize()

	j := jsiiProxy_Statics{}

	_jsii_.Create(
		"jsii-calc.Statics",
		[]interface{}{value},
		&j,
	)

	return &j
}

func NewStatics_Override(s Statics, value *string) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Statics",
		[]interface{}{value},
		s,
	)
}

// Jsdocs for static method.
func Statics_StaticMethod(name *string) *string {
	_init_.Initialize()

	var returns *string

	_jsii_.StaticInvoke(
		"jsii-calc.Statics",
		"staticMethod",
		[]interface{}{name},
		&returns,
	)

	return returns
}

func Statics_BAR() *float64 {
	_init_.Initialize()
	var returns *float64
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"BAR",
		&returns,
	)
	return returns
}

func Statics_ConstObj() DoubleTrouble {
	_init_.Initialize()
	var returns DoubleTrouble
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"ConstObj",
		&returns,
	)
	return returns
}

func Statics_Foo() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"Foo",
		&returns,
	)
	return returns
}

func Statics_Instance() Statics {
	_init_.Initialize()
	var returns Statics
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"instance",
		&returns,
	)
	return returns
}

func Statics_SetInstance(val Statics) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.Statics",
		"instance",
		val,
	)
}

func Statics_NonConstStatic() *float64 {
	_init_.Initialize()
	var returns *float64
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"nonConstStatic",
		&returns,
	)
	return returns
}

func Statics_SetNonConstStatic(val *float64) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.Statics",
		"nonConstStatic",
		val,
	)
}

func Statics_ZooBar() *map[string]*string {
	_init_.Initialize()
	var returns *map[string]*string
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"zooBar",
		&returns,
	)
	return returns
}

func (s *jsiiProxy_Statics) JustMethod() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"justMethod",
		nil, // no parameters
		&returns,
	)

	return returns
}

type StringEnum string

const (
	StringEnum_A StringEnum = "A"
	StringEnum_B StringEnum = "B"
	StringEnum_C StringEnum = "C"
)

type StripInternal interface {
	YouSeeMe() *string
	SetYouSeeMe(val *string)
}

// The jsii proxy struct for StripInternal
type jsiiProxy_StripInternal struct {
	_ byte // padding
}

func (j *jsiiProxy_StripInternal) YouSeeMe() *string {
	var returns *string
	_jsii_.Get(
		j,
		"youSeeMe",
		&returns,
	)
	return returns
}


func NewStripInternal() StripInternal {
	_init_.Initialize()

	j := jsiiProxy_StripInternal{}

	_jsii_.Create(
		"jsii-calc.StripInternal",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewStripInternal_Override(s StripInternal) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.StripInternal",
		nil, // no parameters
		s,
	)
}

func (j *jsiiProxy_StripInternal) SetYouSeeMe(val *string) {
	_jsii_.Set(
		j,
		"youSeeMe",
		val,
	)
}

// We can serialize and deserialize structs without silently ignoring optional fields.
type StructA struct {
	RequiredString *string \`json:"requiredString"\`
	OptionalNumber *float64 \`json:"optionalNumber"\`
	OptionalString *string \`json:"optionalString"\`
}

// This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.
type StructB struct {
	RequiredString *string \`json:"requiredString"\`
	OptionalBoolean *bool \`json:"optionalBoolean"\`
	OptionalStructA *StructA \`json:"optionalStructA"\`
}

// Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.
//
// See: https://github.com/aws/aws-cdk/issues/4302
type StructParameterType struct {
	Scope *string \`json:"scope"\`
	Props *bool \`json:"props"\`
}

// Just because we can.
type StructPassing interface {
}

// The jsii proxy struct for StructPassing
type jsiiProxy_StructPassing struct {
	_ byte // padding
}

func NewStructPassing() StructPassing {
	_init_.Initialize()

	j := jsiiProxy_StructPassing{}

	_jsii_.Create(
		"jsii-calc.StructPassing",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewStructPassing_Override(s StructPassing) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.StructPassing",
		nil, // no parameters
		s,
	)
}

func StructPassing_HowManyVarArgsDidIPass(_positional *float64, inputs ...*TopLevelStruct) *float64 {
	_init_.Initialize()

	args := []interface{}{_positional}
	for _, a := range inputs {
		args = append(args, a)
	}

	var returns *float64

	_jsii_.StaticInvoke(
		"jsii-calc.StructPassing",
		"howManyVarArgsDidIPass",
		args,
		&returns,
	)

	return returns
}

func StructPassing_RoundTrip(_positional *float64, input *TopLevelStruct) *TopLevelStruct {
	_init_.Initialize()

	var returns *TopLevelStruct

	_jsii_.StaticInvoke(
		"jsii-calc.StructPassing",
		"roundTrip",
		[]interface{}{_positional, input},
		&returns,
	)

	return returns
}

type StructUnionConsumer interface {
}

// The jsii proxy struct for StructUnionConsumer
type jsiiProxy_StructUnionConsumer struct {
	_ byte // padding
}

func StructUnionConsumer_IsStructA(struct_ interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"jsii-calc.StructUnionConsumer",
		"isStructA",
		[]interface{}{struct_},
		&returns,
	)

	return returns
}

func StructUnionConsumer_IsStructB(struct_ interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"jsii-calc.StructUnionConsumer",
		"isStructB",
		[]interface{}{struct_},
		&returns,
	)

	return returns
}

type StructWithEnum struct {
	// An enum value.
	Foo StringEnum \`json:"foo"\`
	// Optional enum value (of type integer).
	Bar AllTypesEnum \`json:"bar"\`
}

type StructWithJavaReservedWords struct {
	Default *string \`json:"default"\`
	Assert *string \`json:"assert"\`
	Result *string \`json:"result"\`
	That *string \`json:"that"\`
}

// An operation that sums multiple values.
type Sum interface {
	composition.CompositeOperation
	DecorationPostfixes() *[]*string
	SetDecorationPostfixes(val *[]*string)
	DecorationPrefixes() *[]*string
	SetDecorationPrefixes(val *[]*string)
	Expression() scopejsiicalclib.NumericValue
	Parts() *[]scopejsiicalclib.NumericValue
	SetParts(val *[]scopejsiicalclib.NumericValue)
	StringStyle() composition.CompositeOperation_CompositionStringStyle
	SetStringStyle(val composition.CompositeOperation_CompositionStringStyle)
	Value() *float64
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for Sum
type jsiiProxy_Sum struct {
	internal.Type__compositionCompositeOperation
}

func (j *jsiiProxy_Sum) DecorationPostfixes() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"decorationPostfixes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Sum) DecorationPrefixes() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"decorationPrefixes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Sum) Expression() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"expression",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Sum) Parts() *[]scopejsiicalclib.NumericValue {
	var returns *[]scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"parts",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Sum) StringStyle() composition.CompositeOperation_CompositionStringStyle {
	var returns composition.CompositeOperation_CompositionStringStyle
	_jsii_.Get(
		j,
		"stringStyle",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Sum) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


func NewSum() Sum {
	_init_.Initialize()

	j := jsiiProxy_Sum{}

	_jsii_.Create(
		"jsii-calc.Sum",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewSum_Override(s Sum) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Sum",
		nil, // no parameters
		s,
	)
}

func (j *jsiiProxy_Sum) SetDecorationPostfixes(val *[]*string) {
	_jsii_.Set(
		j,
		"decorationPostfixes",
		val,
	)
}

func (j *jsiiProxy_Sum) SetDecorationPrefixes(val *[]*string) {
	_jsii_.Set(
		j,
		"decorationPrefixes",
		val,
	)
}

func (j *jsiiProxy_Sum) SetParts(val *[]scopejsiicalclib.NumericValue) {
	_jsii_.Set(
		j,
		"parts",
		val,
	)
}

func (j *jsiiProxy_Sum) SetStringStyle(val composition.CompositeOperation_CompositionStringStyle) {
	_jsii_.Set(
		j,
		"stringStyle",
		val,
	)
}

// (deprecated) String representation of the value.
func (s *jsiiProxy_Sum) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (s *jsiiProxy_Sum) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

type SupportsNiceJavaBuilder interface {
	SupportsNiceJavaBuilderWithRequiredProps
	Bar() *float64
	Id() *float64
	PropId() *string
	Rest() *[]*string
}

// The jsii proxy struct for SupportsNiceJavaBuilder
type jsiiProxy_SupportsNiceJavaBuilder struct {
	jsiiProxy_SupportsNiceJavaBuilderWithRequiredProps
}

func (j *jsiiProxy_SupportsNiceJavaBuilder) Bar() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"bar",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SupportsNiceJavaBuilder) Id() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"id",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SupportsNiceJavaBuilder) PropId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"propId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SupportsNiceJavaBuilder) Rest() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"rest",
		&returns,
	)
	return returns
}


func NewSupportsNiceJavaBuilder(id *float64, defaultBar *float64, props *SupportsNiceJavaBuilderProps, rest ...*string) SupportsNiceJavaBuilder {
	_init_.Initialize()

	args := []interface{}{id, defaultBar, props}
	for _, a := range rest {
		args = append(args, a)
	}

	j := jsiiProxy_SupportsNiceJavaBuilder{}

	_jsii_.Create(
		"jsii-calc.SupportsNiceJavaBuilder",
		args,
		&j,
	)

	return &j
}

func NewSupportsNiceJavaBuilder_Override(s SupportsNiceJavaBuilder, id *float64, defaultBar *float64, props *SupportsNiceJavaBuilderProps, rest ...*string) {
	_init_.Initialize()

	args := []interface{}{id, defaultBar, props}
	for _, a := range rest {
		args = append(args, a)
	}

	_jsii_.Create(
		"jsii-calc.SupportsNiceJavaBuilder",
		args,
		s,
	)
}

type SupportsNiceJavaBuilderProps struct {
	// Some number, like 42.
	Bar *float64 \`json:"bar"\`
	// An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
	//
	// But here we are, doing it like we didn't care.
	Id *string \`json:"id"\`
}

// We can generate fancy builders in Java for classes which take a mix of positional & struct parameters.
type SupportsNiceJavaBuilderWithRequiredProps interface {
	Bar() *float64
	Id() *float64
	PropId() *string
}

// The jsii proxy struct for SupportsNiceJavaBuilderWithRequiredProps
type jsiiProxy_SupportsNiceJavaBuilderWithRequiredProps struct {
	_ byte // padding
}

func (j *jsiiProxy_SupportsNiceJavaBuilderWithRequiredProps) Bar() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"bar",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SupportsNiceJavaBuilderWithRequiredProps) Id() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"id",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SupportsNiceJavaBuilderWithRequiredProps) PropId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"propId",
		&returns,
	)
	return returns
}


func NewSupportsNiceJavaBuilderWithRequiredProps(id *float64, props *SupportsNiceJavaBuilderProps) SupportsNiceJavaBuilderWithRequiredProps {
	_init_.Initialize()

	j := jsiiProxy_SupportsNiceJavaBuilderWithRequiredProps{}

	_jsii_.Create(
		"jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
		[]interface{}{id, props},
		&j,
	)

	return &j
}

func NewSupportsNiceJavaBuilderWithRequiredProps_Override(s SupportsNiceJavaBuilderWithRequiredProps, id *float64, props *SupportsNiceJavaBuilderProps) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
		[]interface{}{id, props},
		s,
	)
}

type SyncVirtualMethods interface {
	A() *float64
	SetA(val *float64)
	CallerIsProperty() *float64
	SetCallerIsProperty(val *float64)
	OtherProperty() *string
	SetOtherProperty(val *string)
	ReadonlyProperty() *string
	TheProperty() *string
	SetTheProperty(val *string)
	ValueOfOtherProperty() *string
	SetValueOfOtherProperty(val *string)
	CallerIsAsync() *float64
	CallerIsMethod() *float64
	ModifyOtherProperty(value *string)
	ModifyValueOfTheProperty(value *string)
	ReadA() *float64
	RetrieveOtherProperty() *string
	RetrieveReadOnlyProperty() *string
	RetrieveValueOfTheProperty() *string
	VirtualMethod(n *float64) *float64
	WriteA(value *float64)
}

// The jsii proxy struct for SyncVirtualMethods
type jsiiProxy_SyncVirtualMethods struct {
	_ byte // padding
}

func (j *jsiiProxy_SyncVirtualMethods) A() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"a",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyncVirtualMethods) CallerIsProperty() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"callerIsProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyncVirtualMethods) OtherProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"otherProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyncVirtualMethods) ReadonlyProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"readonlyProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyncVirtualMethods) TheProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"theProperty",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyncVirtualMethods) ValueOfOtherProperty() *string {
	var returns *string
	_jsii_.Get(
		j,
		"valueOfOtherProperty",
		&returns,
	)
	return returns
}


func NewSyncVirtualMethods() SyncVirtualMethods {
	_init_.Initialize()

	j := jsiiProxy_SyncVirtualMethods{}

	_jsii_.Create(
		"jsii-calc.SyncVirtualMethods",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewSyncVirtualMethods_Override(s SyncVirtualMethods) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.SyncVirtualMethods",
		nil, // no parameters
		s,
	)
}

func (j *jsiiProxy_SyncVirtualMethods) SetA(val *float64) {
	_jsii_.Set(
		j,
		"a",
		val,
	)
}

func (j *jsiiProxy_SyncVirtualMethods) SetCallerIsProperty(val *float64) {
	_jsii_.Set(
		j,
		"callerIsProperty",
		val,
	)
}

func (j *jsiiProxy_SyncVirtualMethods) SetOtherProperty(val *string) {
	_jsii_.Set(
		j,
		"otherProperty",
		val,
	)
}

func (j *jsiiProxy_SyncVirtualMethods) SetTheProperty(val *string) {
	_jsii_.Set(
		j,
		"theProperty",
		val,
	)
}

func (j *jsiiProxy_SyncVirtualMethods) SetValueOfOtherProperty(val *string) {
	_jsii_.Set(
		j,
		"valueOfOtherProperty",
		val,
	)
}

func (s *jsiiProxy_SyncVirtualMethods) CallerIsAsync() *float64 {
	var returns *float64

	_jsii_.Invoke(
		s,
		"callerIsAsync",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyncVirtualMethods) CallerIsMethod() *float64 {
	var returns *float64

	_jsii_.Invoke(
		s,
		"callerIsMethod",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyncVirtualMethods) ModifyOtherProperty(value *string) {
	_jsii_.InvokeVoid(
		s,
		"modifyOtherProperty",
		[]interface{}{value},
	)
}

func (s *jsiiProxy_SyncVirtualMethods) ModifyValueOfTheProperty(value *string) {
	_jsii_.InvokeVoid(
		s,
		"modifyValueOfTheProperty",
		[]interface{}{value},
	)
}

func (s *jsiiProxy_SyncVirtualMethods) ReadA() *float64 {
	var returns *float64

	_jsii_.Invoke(
		s,
		"readA",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyncVirtualMethods) RetrieveOtherProperty() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"retrieveOtherProperty",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyncVirtualMethods) RetrieveReadOnlyProperty() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"retrieveReadOnlyProperty",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyncVirtualMethods) RetrieveValueOfTheProperty() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"retrieveValueOfTheProperty",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyncVirtualMethods) VirtualMethod(n *float64) *float64 {
	var returns *float64

	_jsii_.Invoke(
		s,
		"virtualMethod",
		[]interface{}{n},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyncVirtualMethods) WriteA(value *float64) {
	_jsii_.InvokeVoid(
		s,
		"writeA",
		[]interface{}{value},
	)
}

type TestStructWithEnum interface {
	StructWithFoo() *StructWithEnum
	StructWithFooBar() *StructWithEnum
	IsStringEnumA(input *StructWithEnum) *bool
	IsStringEnumB(input *StructWithEnum) *bool
}

// The jsii proxy struct for TestStructWithEnum
type jsiiProxy_TestStructWithEnum struct {
	_ byte // padding
}

func (j *jsiiProxy_TestStructWithEnum) StructWithFoo() *StructWithEnum {
	var returns *StructWithEnum
	_jsii_.Get(
		j,
		"structWithFoo",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TestStructWithEnum) StructWithFooBar() *StructWithEnum {
	var returns *StructWithEnum
	_jsii_.Get(
		j,
		"structWithFooBar",
		&returns,
	)
	return returns
}


func NewTestStructWithEnum() TestStructWithEnum {
	_init_.Initialize()

	j := jsiiProxy_TestStructWithEnum{}

	_jsii_.Create(
		"jsii-calc.TestStructWithEnum",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewTestStructWithEnum_Override(t TestStructWithEnum) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.TestStructWithEnum",
		nil, // no parameters
		t,
	)
}

// Returns true if \`foo\` is \`StringEnum.A\`.
func (t *jsiiProxy_TestStructWithEnum) IsStringEnumA(input *StructWithEnum) *bool {
	var returns *bool

	_jsii_.Invoke(
		t,
		"isStringEnumA",
		[]interface{}{input},
		&returns,
	)

	return returns
}

// Returns true if \`foo\` is \`StringEnum.B\` and \`bar\` is \`AllTypesEnum.THIS_IS_GREAT\`.
func (t *jsiiProxy_TestStructWithEnum) IsStringEnumB(input *StructWithEnum) *bool {
	var returns *bool

	_jsii_.Invoke(
		t,
		"isStringEnumB",
		[]interface{}{input},
		&returns,
	)

	return returns
}

type Thrower interface {
	ThrowError()
}

// The jsii proxy struct for Thrower
type jsiiProxy_Thrower struct {
	_ byte // padding
}

func NewThrower() Thrower {
	_init_.Initialize()

	j := jsiiProxy_Thrower{}

	_jsii_.Create(
		"jsii-calc.Thrower",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewThrower_Override(t Thrower) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.Thrower",
		nil, // no parameters
		t,
	)
}

func (t *jsiiProxy_Thrower) ThrowError() {
	_jsii_.InvokeVoid(
		t,
		"throwError",
		nil, // no parameters
	)
}

type TopLevelStruct struct {
	// This is a required field.
	Required *string \`json:"required"\`
	// A union to really stress test our serialization.
	SecondLevel interface{} \`json:"secondLevel"\`
	// You don't have to pass this.
	Optional *string \`json:"optional"\`
}

// In TypeScript it is possible to have two methods with the same name but different capitalization.
// See: https://github.com/aws/jsii/issues/2508
//
type TwoMethodsWithSimilarCapitalization interface {
	FooBar() *float64
	FooBAR() *float64
	ToIsoString() *string
	ToIsOString() *string
	ToISOString() *string
}

// The jsii proxy struct for TwoMethodsWithSimilarCapitalization
type jsiiProxy_TwoMethodsWithSimilarCapitalization struct {
	_ byte // padding
}

func (j *jsiiProxy_TwoMethodsWithSimilarCapitalization) FooBar() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"fooBar",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TwoMethodsWithSimilarCapitalization) FooBAR() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"fooBAR",
		&returns,
	)
	return returns
}


func NewTwoMethodsWithSimilarCapitalization() TwoMethodsWithSimilarCapitalization {
	_init_.Initialize()

	j := jsiiProxy_TwoMethodsWithSimilarCapitalization{}

	_jsii_.Create(
		"jsii-calc.TwoMethodsWithSimilarCapitalization",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewTwoMethodsWithSimilarCapitalization_Override(t TwoMethodsWithSimilarCapitalization) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.TwoMethodsWithSimilarCapitalization",
		nil, // no parameters
		t,
	)
}

func (t *jsiiProxy_TwoMethodsWithSimilarCapitalization) ToIsoString() *string {
	var returns *string

	_jsii_.Invoke(
		t,
		"toIsoString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Deprecated: python requires that all alternatives are deprecated
func (t *jsiiProxy_TwoMethodsWithSimilarCapitalization) ToIsOString() *string {
	var returns *string

	_jsii_.Invoke(
		t,
		"toIsOString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Deprecated: python requires that all alternatives are deprecated
func (t *jsiiProxy_TwoMethodsWithSimilarCapitalization) ToISOString() *string {
	var returns *string

	_jsii_.Invoke(
		t,
		"toISOString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Checks the current file permissions are cool (no funky UMASK down-scoping happened).
// See: https://github.com/aws/jsii/issues/1765
//
type UmaskCheck interface {
}

// The jsii proxy struct for UmaskCheck
type jsiiProxy_UmaskCheck struct {
	_ byte // padding
}

// This should return 0o644 (-rw-r--r--).
func UmaskCheck_Mode() *float64 {
	_init_.Initialize()

	var returns *float64

	_jsii_.StaticInvoke(
		"jsii-calc.UmaskCheck",
		"mode",
		nil, // no parameters
		&returns,
	)

	return returns
}

// An operation on a single operand.
type UnaryOperation interface {
	scopejsiicalclib.Operation
	Operand() scopejsiicalclib.NumericValue
	Value() *float64
	ToString() *string
	TypeName() interface{}
}

// The jsii proxy struct for UnaryOperation
type jsiiProxy_UnaryOperation struct {
	internal.Type__scopejsiicalclibOperation
}

func (j *jsiiProxy_UnaryOperation) Operand() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		j,
		"operand",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_UnaryOperation) Value() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"value",
		&returns,
	)
	return returns
}


func NewUnaryOperation_Override(u UnaryOperation, operand scopejsiicalclib.NumericValue) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.UnaryOperation",
		[]interface{}{operand},
		u,
	)
}

// String representation of the value.
// Deprecated.
func (u *jsiiProxy_UnaryOperation) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		u,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (u *jsiiProxy_UnaryOperation) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		u,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

type UnionProperties struct {
	Bar interface{} \`json:"bar"\`
	Foo interface{} \`json:"foo"\`
}

// Ensures submodule-imported types from dependencies can be used correctly.
type UpcasingReflectable interface {
	customsubmodulename.IReflectable
	Entries() *[]*customsubmodulename.ReflectableEntry
}

// The jsii proxy struct for UpcasingReflectable
type jsiiProxy_UpcasingReflectable struct {
	internal.Type__customsubmodulenameIReflectable
}

func (j *jsiiProxy_UpcasingReflectable) Entries() *[]*customsubmodulename.ReflectableEntry {
	var returns *[]*customsubmodulename.ReflectableEntry
	_jsii_.Get(
		j,
		"entries",
		&returns,
	)
	return returns
}


func NewUpcasingReflectable(delegate *map[string]interface{}) UpcasingReflectable {
	_init_.Initialize()

	j := jsiiProxy_UpcasingReflectable{}

	_jsii_.Create(
		"jsii-calc.UpcasingReflectable",
		[]interface{}{delegate},
		&j,
	)

	return &j
}

func NewUpcasingReflectable_Override(u UpcasingReflectable, delegate *map[string]interface{}) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.UpcasingReflectable",
		[]interface{}{delegate},
		u,
	)
}

func UpcasingReflectable_Reflector() customsubmodulename.Reflector {
	_init_.Initialize()
	var returns customsubmodulename.Reflector
	_jsii_.StaticGet(
		"jsii-calc.UpcasingReflectable",
		"reflector",
		&returns,
	)
	return returns
}

type UseBundledDependency interface {
	Value() interface{}
}

// The jsii proxy struct for UseBundledDependency
type jsiiProxy_UseBundledDependency struct {
	_ byte // padding
}

func NewUseBundledDependency() UseBundledDependency {
	_init_.Initialize()

	j := jsiiProxy_UseBundledDependency{}

	_jsii_.Create(
		"jsii-calc.UseBundledDependency",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewUseBundledDependency_Override(u UseBundledDependency) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.UseBundledDependency",
		nil, // no parameters
		u,
	)
}

func (u *jsiiProxy_UseBundledDependency) Value() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		u,
		"value",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Depend on a type from jsii-calc-base as a test for awslabs/jsii#128.
type UseCalcBase interface {
	Hello() jcb.Base
}

// The jsii proxy struct for UseCalcBase
type jsiiProxy_UseCalcBase struct {
	_ byte // padding
}

func NewUseCalcBase() UseCalcBase {
	_init_.Initialize()

	j := jsiiProxy_UseCalcBase{}

	_jsii_.Create(
		"jsii-calc.UseCalcBase",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewUseCalcBase_Override(u UseCalcBase) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.UseCalcBase",
		nil, // no parameters
		u,
	)
}

func (u *jsiiProxy_UseCalcBase) Hello() jcb.Base {
	var returns jcb.Base

	_jsii_.Invoke(
		u,
		"hello",
		nil, // no parameters
		&returns,
	)

	return returns
}

type UsesInterfaceWithProperties interface {
	Obj() IInterfaceWithProperties
	JustRead() *string
	ReadStringAndNumber(ext IInterfaceWithPropertiesExtension) *string
	WriteAndRead(value *string) *string
}

// The jsii proxy struct for UsesInterfaceWithProperties
type jsiiProxy_UsesInterfaceWithProperties struct {
	_ byte // padding
}

func (j *jsiiProxy_UsesInterfaceWithProperties) Obj() IInterfaceWithProperties {
	var returns IInterfaceWithProperties
	_jsii_.Get(
		j,
		"obj",
		&returns,
	)
	return returns
}


func NewUsesInterfaceWithProperties(obj IInterfaceWithProperties) UsesInterfaceWithProperties {
	_init_.Initialize()

	j := jsiiProxy_UsesInterfaceWithProperties{}

	_jsii_.Create(
		"jsii-calc.UsesInterfaceWithProperties",
		[]interface{}{obj},
		&j,
	)

	return &j
}

func NewUsesInterfaceWithProperties_Override(u UsesInterfaceWithProperties, obj IInterfaceWithProperties) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.UsesInterfaceWithProperties",
		[]interface{}{obj},
		u,
	)
}

func (u *jsiiProxy_UsesInterfaceWithProperties) JustRead() *string {
	var returns *string

	_jsii_.Invoke(
		u,
		"justRead",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UsesInterfaceWithProperties) ReadStringAndNumber(ext IInterfaceWithPropertiesExtension) *string {
	var returns *string

	_jsii_.Invoke(
		u,
		"readStringAndNumber",
		[]interface{}{ext},
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UsesInterfaceWithProperties) WriteAndRead(value *string) *string {
	var returns *string

	_jsii_.Invoke(
		u,
		"writeAndRead",
		[]interface{}{value},
		&returns,
	)

	return returns
}

type VariadicInvoker interface {
	AsArray(values ...*float64) *[]*float64
}

// The jsii proxy struct for VariadicInvoker
type jsiiProxy_VariadicInvoker struct {
	_ byte // padding
}

func NewVariadicInvoker(method VariadicMethod) VariadicInvoker {
	_init_.Initialize()

	j := jsiiProxy_VariadicInvoker{}

	_jsii_.Create(
		"jsii-calc.VariadicInvoker",
		[]interface{}{method},
		&j,
	)

	return &j
}

func NewVariadicInvoker_Override(v VariadicInvoker, method VariadicMethod) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.VariadicInvoker",
		[]interface{}{method},
		v,
	)
}

func (v *jsiiProxy_VariadicInvoker) AsArray(values ...*float64) *[]*float64 {
	args := []interface{}{}
	for _, a := range values {
		args = append(args, a)
	}

	var returns *[]*float64

	_jsii_.Invoke(
		v,
		"asArray",
		args,
		&returns,
	)

	return returns
}

type VariadicMethod interface {
	AsArray(first *float64, others ...*float64) *[]*float64
}

// The jsii proxy struct for VariadicMethod
type jsiiProxy_VariadicMethod struct {
	_ byte // padding
}

func NewVariadicMethod(prefix ...*float64) VariadicMethod {
	_init_.Initialize()

	args := []interface{}{}
	for _, a := range prefix {
		args = append(args, a)
	}

	j := jsiiProxy_VariadicMethod{}

	_jsii_.Create(
		"jsii-calc.VariadicMethod",
		args,
		&j,
	)

	return &j
}

func NewVariadicMethod_Override(v VariadicMethod, prefix ...*float64) {
	_init_.Initialize()

	args := []interface{}{}
	for _, a := range prefix {
		args = append(args, a)
	}

	_jsii_.Create(
		"jsii-calc.VariadicMethod",
		args,
		v,
	)
}

func (v *jsiiProxy_VariadicMethod) AsArray(first *float64, others ...*float64) *[]*float64 {
	args := []interface{}{first}
	for _, a := range others {
		args = append(args, a)
	}

	var returns *[]*float64

	_jsii_.Invoke(
		v,
		"asArray",
		args,
		&returns,
	)

	return returns
}

type VirtualMethodPlayground interface {
	OverrideMeAsync(index *float64) *float64
	OverrideMeSync(index *float64) *float64
	ParallelSumAsync(count *float64) *float64
	SerialSumAsync(count *float64) *float64
	SumSync(count *float64) *float64
}

// The jsii proxy struct for VirtualMethodPlayground
type jsiiProxy_VirtualMethodPlayground struct {
	_ byte // padding
}

func NewVirtualMethodPlayground() VirtualMethodPlayground {
	_init_.Initialize()

	j := jsiiProxy_VirtualMethodPlayground{}

	_jsii_.Create(
		"jsii-calc.VirtualMethodPlayground",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewVirtualMethodPlayground_Override(v VirtualMethodPlayground) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.VirtualMethodPlayground",
		nil, // no parameters
		v,
	)
}

func (v *jsiiProxy_VirtualMethodPlayground) OverrideMeAsync(index *float64) *float64 {
	var returns *float64

	_jsii_.Invoke(
		v,
		"overrideMeAsync",
		[]interface{}{index},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VirtualMethodPlayground) OverrideMeSync(index *float64) *float64 {
	var returns *float64

	_jsii_.Invoke(
		v,
		"overrideMeSync",
		[]interface{}{index},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VirtualMethodPlayground) ParallelSumAsync(count *float64) *float64 {
	var returns *float64

	_jsii_.Invoke(
		v,
		"parallelSumAsync",
		[]interface{}{count},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VirtualMethodPlayground) SerialSumAsync(count *float64) *float64 {
	var returns *float64

	_jsii_.Invoke(
		v,
		"serialSumAsync",
		[]interface{}{count},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VirtualMethodPlayground) SumSync(count *float64) *float64 {
	var returns *float64

	_jsii_.Invoke(
		v,
		"sumSync",
		[]interface{}{count},
		&returns,
	)

	return returns
}

// This test is used to validate the runtimes can return correctly from a void callback.
//
// - Implement \`overrideMe\` (method does not have to do anything).
// - Invoke \`callMe\`
// - Verify that \`methodWasCalled\` is \`true\`.
type VoidCallback interface {
	MethodWasCalled() *bool
	CallMe()
	OverrideMe()
}

// The jsii proxy struct for VoidCallback
type jsiiProxy_VoidCallback struct {
	_ byte // padding
}

func (j *jsiiProxy_VoidCallback) MethodWasCalled() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"methodWasCalled",
		&returns,
	)
	return returns
}


func NewVoidCallback_Override(v VoidCallback) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.VoidCallback",
		nil, // no parameters
		v,
	)
}

func (v *jsiiProxy_VoidCallback) CallMe() {
	_jsii_.InvokeVoid(
		v,
		"callMe",
		nil, // no parameters
	)
}

func (v *jsiiProxy_VoidCallback) OverrideMe() {
	_jsii_.InvokeVoid(
		v,
		"overrideMe",
		nil, // no parameters
	)
}

// Verifies that private property declarations in constructor arguments are hidden.
type WithPrivatePropertyInConstructor interface {
	Success() *bool
}

// The jsii proxy struct for WithPrivatePropertyInConstructor
type jsiiProxy_WithPrivatePropertyInConstructor struct {
	_ byte // padding
}

func (j *jsiiProxy_WithPrivatePropertyInConstructor) Success() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"success",
		&returns,
	)
	return returns
}


func NewWithPrivatePropertyInConstructor(privateField *string) WithPrivatePropertyInConstructor {
	_init_.Initialize()

	j := jsiiProxy_WithPrivatePropertyInConstructor{}

	_jsii_.Create(
		"jsii-calc.WithPrivatePropertyInConstructor",
		[]interface{}{privateField},
		&j,
	)

	return &j
}

func NewWithPrivatePropertyInConstructor_Override(w WithPrivatePropertyInConstructor, privateField *string) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.WithPrivatePropertyInConstructor",
		[]interface{}{privateField},
		w,
	)
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsiicalc.init.go 1`] = `
package jsiicalc

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.AbstractClass",
		reflect.TypeOf((*AbstractClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "abstractMethod", GoMethod: "AbstractMethod"},
			_jsii_.MemberProperty{JsiiProperty: "abstractProperty", GoGetter: "AbstractProperty"},
			_jsii_.MemberMethod{JsiiMethod: "nonAbstractMethod", GoMethod: "NonAbstractMethod"},
			_jsii_.MemberProperty{JsiiProperty: "propFromInterface", GoGetter: "PropFromInterface"},
		},
		func() interface{} {
			j := jsiiProxy_AbstractClass{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_AbstractClassBase)
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IInterfaceImplementedByAbstractClass)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AbstractClassBase",
		reflect.TypeOf((*AbstractClassBase)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "abstractProperty", GoGetter: "AbstractProperty"},
		},
		func() interface{} {
			return &jsiiProxy_AbstractClassBase{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AbstractClassReturner",
		reflect.TypeOf((*AbstractClassReturner)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "giveMeAbstract", GoMethod: "GiveMeAbstract"},
			_jsii_.MemberMethod{JsiiMethod: "giveMeInterface", GoMethod: "GiveMeInterface"},
			_jsii_.MemberProperty{JsiiProperty: "returnAbstractFromProperty", GoGetter: "ReturnAbstractFromProperty"},
		},
		func() interface{} {
			return &jsiiProxy_AbstractClassReturner{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AbstractSuite",
		reflect.TypeOf((*AbstractSuite)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "property", GoGetter: "Property"},
			_jsii_.MemberMethod{JsiiMethod: "someMethod", GoMethod: "SomeMethod"},
			_jsii_.MemberMethod{JsiiMethod: "workItAll", GoMethod: "WorkItAll"},
		},
		func() interface{} {
			return &jsiiProxy_AbstractSuite{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Add",
		reflect.TypeOf((*Add)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
			_jsii_.MemberProperty{JsiiProperty: "lhs", GoGetter: "Lhs"},
			_jsii_.MemberProperty{JsiiProperty: "rhs", GoGetter: "Rhs"},
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_Add{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_BinaryOperation)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AllTypes",
		reflect.TypeOf((*AllTypes)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "anyArrayProperty", GoGetter: "AnyArrayProperty"},
			_jsii_.MemberMethod{JsiiMethod: "anyIn", GoMethod: "AnyIn"},
			_jsii_.MemberProperty{JsiiProperty: "anyMapProperty", GoGetter: "AnyMapProperty"},
			_jsii_.MemberMethod{JsiiMethod: "anyOut", GoMethod: "AnyOut"},
			_jsii_.MemberProperty{JsiiProperty: "anyProperty", GoGetter: "AnyProperty"},
			_jsii_.MemberProperty{JsiiProperty: "arrayProperty", GoGetter: "ArrayProperty"},
			_jsii_.MemberProperty{JsiiProperty: "booleanProperty", GoGetter: "BooleanProperty"},
			_jsii_.MemberProperty{JsiiProperty: "dateProperty", GoGetter: "DateProperty"},
			_jsii_.MemberMethod{JsiiMethod: "enumMethod", GoMethod: "EnumMethod"},
			_jsii_.MemberProperty{JsiiProperty: "enumProperty", GoGetter: "EnumProperty"},
			_jsii_.MemberProperty{JsiiProperty: "enumPropertyValue", GoGetter: "EnumPropertyValue"},
			_jsii_.MemberProperty{JsiiProperty: "jsonProperty", GoGetter: "JsonProperty"},
			_jsii_.MemberProperty{JsiiProperty: "mapProperty", GoGetter: "MapProperty"},
			_jsii_.MemberProperty{JsiiProperty: "numberProperty", GoGetter: "NumberProperty"},
			_jsii_.MemberProperty{JsiiProperty: "optionalEnumValue", GoGetter: "OptionalEnumValue"},
			_jsii_.MemberProperty{JsiiProperty: "stringProperty", GoGetter: "StringProperty"},
			_jsii_.MemberProperty{JsiiProperty: "unionArrayProperty", GoGetter: "UnionArrayProperty"},
			_jsii_.MemberProperty{JsiiProperty: "unionMapProperty", GoGetter: "UnionMapProperty"},
			_jsii_.MemberProperty{JsiiProperty: "unionProperty", GoGetter: "UnionProperty"},
			_jsii_.MemberProperty{JsiiProperty: "unknownArrayProperty", GoGetter: "UnknownArrayProperty"},
			_jsii_.MemberProperty{JsiiProperty: "unknownMapProperty", GoGetter: "UnknownMapProperty"},
			_jsii_.MemberProperty{JsiiProperty: "unknownProperty", GoGetter: "UnknownProperty"},
		},
		func() interface{} {
			return &jsiiProxy_AllTypes{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.AllTypesEnum",
		reflect.TypeOf((*AllTypesEnum)(nil)).Elem(),
		map[string]interface{}{
			"MY_ENUM_VALUE": AllTypesEnum_MY_ENUM_VALUE,
			"YOUR_ENUM_VALUE": AllTypesEnum_YOUR_ENUM_VALUE,
			"THIS_IS_GREAT": AllTypesEnum_THIS_IS_GREAT,
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AllowedMethodNames",
		reflect.TypeOf((*AllowedMethodNames)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "getBar", GoMethod: "GetBar"},
			_jsii_.MemberMethod{JsiiMethod: "getFoo", GoMethod: "GetFoo"},
			_jsii_.MemberMethod{JsiiMethod: "setBar", GoMethod: "SetBar"},
			_jsii_.MemberMethod{JsiiMethod: "setFoo", GoMethod: "SetFoo"},
		},
		func() interface{} {
			return &jsiiProxy_AllowedMethodNames{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AmbiguousParameters",
		reflect.TypeOf((*AmbiguousParameters)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "props", GoGetter: "Props"},
			_jsii_.MemberProperty{JsiiProperty: "scope", GoGetter: "Scope"},
		},
		func() interface{} {
			return &jsiiProxy_AmbiguousParameters{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AnonymousImplementationProvider",
		reflect.TypeOf((*AnonymousImplementationProvider)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "provideAsClass", GoMethod: "ProvideAsClass"},
			_jsii_.MemberMethod{JsiiMethod: "provideAsInterface", GoMethod: "ProvideAsInterface"},
		},
		func() interface{} {
			j := jsiiProxy_AnonymousImplementationProvider{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IAnonymousImplementationProvider)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AsyncVirtualMethods",
		reflect.TypeOf((*AsyncVirtualMethods)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "callMe", GoMethod: "CallMe"},
			_jsii_.MemberMethod{JsiiMethod: "callMe2", GoMethod: "CallMe2"},
			_jsii_.MemberMethod{JsiiMethod: "callMeDoublePromise", GoMethod: "CallMeDoublePromise"},
			_jsii_.MemberMethod{JsiiMethod: "dontOverrideMe", GoMethod: "DontOverrideMe"},
			_jsii_.MemberMethod{JsiiMethod: "overrideMe", GoMethod: "OverrideMe"},
			_jsii_.MemberMethod{JsiiMethod: "overrideMeToo", GoMethod: "OverrideMeToo"},
		},
		func() interface{} {
			return &jsiiProxy_AsyncVirtualMethods{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AugmentableClass",
		reflect.TypeOf((*AugmentableClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "methodOne", GoMethod: "MethodOne"},
			_jsii_.MemberMethod{JsiiMethod: "methodTwo", GoMethod: "MethodTwo"},
		},
		func() interface{} {
			return &jsiiProxy_AugmentableClass{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.BaseJsii976",
		reflect.TypeOf((*BaseJsii976)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_BaseJsii976{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Bell",
		reflect.TypeOf((*Bell)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "ring", GoMethod: "Ring"},
			_jsii_.MemberProperty{JsiiProperty: "rung", GoGetter: "Rung"},
		},
		func() interface{} {
			j := jsiiProxy_Bell{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IBell)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.BinaryOperation",
		reflect.TypeOf((*BinaryOperation)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
			_jsii_.MemberProperty{JsiiProperty: "lhs", GoGetter: "Lhs"},
			_jsii_.MemberProperty{JsiiProperty: "rhs", GoGetter: "Rhs"},
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_BinaryOperation{}
			_jsii_.InitJsiiProxy(&j.Type__scopejsiicalclibOperation)
			_jsii_.InitJsiiProxy(&j.Type__scopejsiicalclibIFriendly)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.BurriedAnonymousObject",
		reflect.TypeOf((*BurriedAnonymousObject)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "check", GoMethod: "Check"},
			_jsii_.MemberMethod{JsiiMethod: "giveItBack", GoMethod: "GiveItBack"},
		},
		func() interface{} {
			return &jsiiProxy_BurriedAnonymousObject{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Calculator",
		reflect.TypeOf((*Calculator)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "add", GoMethod: "Add"},
			_jsii_.MemberProperty{JsiiProperty: "curr", GoGetter: "Curr"},
			_jsii_.MemberProperty{JsiiProperty: "decorationPostfixes", GoGetter: "DecorationPostfixes"},
			_jsii_.MemberProperty{JsiiProperty: "decorationPrefixes", GoGetter: "DecorationPrefixes"},
			_jsii_.MemberProperty{JsiiProperty: "expression", GoGetter: "Expression"},
			_jsii_.MemberProperty{JsiiProperty: "maxValue", GoGetter: "MaxValue"},
			_jsii_.MemberMethod{JsiiMethod: "mul", GoMethod: "Mul"},
			_jsii_.MemberMethod{JsiiMethod: "neg", GoMethod: "Neg"},
			_jsii_.MemberProperty{JsiiProperty: "operationsLog", GoGetter: "OperationsLog"},
			_jsii_.MemberProperty{JsiiProperty: "operationsMap", GoGetter: "OperationsMap"},
			_jsii_.MemberMethod{JsiiMethod: "pow", GoMethod: "Pow"},
			_jsii_.MemberMethod{JsiiMethod: "readUnionValue", GoMethod: "ReadUnionValue"},
			_jsii_.MemberProperty{JsiiProperty: "stringStyle", GoGetter: "StringStyle"},
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "unionProperty", GoGetter: "UnionProperty"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_Calculator{}
			_jsii_.InitJsiiProxy(&j.Type__compositionCompositeOperation)
			return &j
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.CalculatorProps",
		reflect.TypeOf((*CalculatorProps)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ChildStruct982",
		reflect.TypeOf((*ChildStruct982)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassThatImplementsTheInternalInterface",
		reflect.TypeOf((*ClassThatImplementsTheInternalInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "a", GoGetter: "A"},
			_jsii_.MemberProperty{JsiiProperty: "b", GoGetter: "B"},
			_jsii_.MemberProperty{JsiiProperty: "c", GoGetter: "C"},
			_jsii_.MemberProperty{JsiiProperty: "d", GoGetter: "D"},
		},
		func() interface{} {
			j := jsiiProxy_ClassThatImplementsTheInternalInterface{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_INonInternalInterface)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassThatImplementsThePrivateInterface",
		reflect.TypeOf((*ClassThatImplementsThePrivateInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "a", GoGetter: "A"},
			_jsii_.MemberProperty{JsiiProperty: "b", GoGetter: "B"},
			_jsii_.MemberProperty{JsiiProperty: "c", GoGetter: "C"},
			_jsii_.MemberProperty{JsiiProperty: "e", GoGetter: "E"},
		},
		func() interface{} {
			j := jsiiProxy_ClassThatImplementsThePrivateInterface{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_INonInternalInterface)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassWithCollections",
		reflect.TypeOf((*ClassWithCollections)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "array", GoGetter: "Array"},
			_jsii_.MemberProperty{JsiiProperty: "map", GoGetter: "Map"},
		},
		func() interface{} {
			return &jsiiProxy_ClassWithCollections{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassWithDocs",
		reflect.TypeOf((*ClassWithDocs)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_ClassWithDocs{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassWithJavaReservedWords",
		reflect.TypeOf((*ClassWithJavaReservedWords)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "import", GoMethod: "Import"},
			_jsii_.MemberProperty{JsiiProperty: "int", GoGetter: "Int"},
		},
		func() interface{} {
			return &jsiiProxy_ClassWithJavaReservedWords{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassWithMutableObjectLiteralProperty",
		reflect.TypeOf((*ClassWithMutableObjectLiteralProperty)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "mutableObject", GoGetter: "MutableObject"},
		},
		func() interface{} {
			return &jsiiProxy_ClassWithMutableObjectLiteralProperty{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties",
		reflect.TypeOf((*ClassWithPrivateConstructorAndAutomaticProperties)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "readOnlyString", GoGetter: "ReadOnlyString"},
			_jsii_.MemberProperty{JsiiProperty: "readWriteString", GoGetter: "ReadWriteString"},
		},
		func() interface{} {
			j := jsiiProxy_ClassWithPrivateConstructorAndAutomaticProperties{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IInterfaceWithProperties)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ConfusingToJackson",
		reflect.TypeOf((*ConfusingToJackson)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "unionProperty", GoGetter: "UnionProperty"},
		},
		func() interface{} {
			return &jsiiProxy_ConfusingToJackson{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ConfusingToJacksonStruct",
		reflect.TypeOf((*ConfusingToJacksonStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.ConstructorPassesThisOut",
		reflect.TypeOf((*ConstructorPassesThisOut)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_ConstructorPassesThisOut{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Constructors",
		reflect.TypeOf((*Constructors)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_Constructors{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ConsumePureInterface",
		reflect.TypeOf((*ConsumePureInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "workItBaby", GoMethod: "WorkItBaby"},
		},
		func() interface{} {
			return &jsiiProxy_ConsumePureInterface{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ConsumerCanRingBell",
		reflect.TypeOf((*ConsumerCanRingBell)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "implementedByObjectLiteral", GoMethod: "ImplementedByObjectLiteral"},
			_jsii_.MemberMethod{JsiiMethod: "implementedByPrivateClass", GoMethod: "ImplementedByPrivateClass"},
			_jsii_.MemberMethod{JsiiMethod: "implementedByPublicClass", GoMethod: "ImplementedByPublicClass"},
			_jsii_.MemberMethod{JsiiMethod: "whenTypedAsClass", GoMethod: "WhenTypedAsClass"},
		},
		func() interface{} {
			return &jsiiProxy_ConsumerCanRingBell{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ConsumersOfThisCrazyTypeSystem",
		reflect.TypeOf((*ConsumersOfThisCrazyTypeSystem)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "consumeAnotherPublicInterface", GoMethod: "ConsumeAnotherPublicInterface"},
			_jsii_.MemberMethod{JsiiMethod: "consumeNonInternalInterface", GoMethod: "ConsumeNonInternalInterface"},
		},
		func() interface{} {
			return &jsiiProxy_ConsumersOfThisCrazyTypeSystem{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DataRenderer",
		reflect.TypeOf((*DataRenderer)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "render", GoMethod: "Render"},
			_jsii_.MemberMethod{JsiiMethod: "renderArbitrary", GoMethod: "RenderArbitrary"},
			_jsii_.MemberMethod{JsiiMethod: "renderMap", GoMethod: "RenderMap"},
		},
		func() interface{} {
			return &jsiiProxy_DataRenderer{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Default",
		reflect.TypeOf((*Default)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "pleaseCompile", GoMethod: "PleaseCompile"},
		},
		func() interface{} {
			return &jsiiProxy_Default{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DefaultedConstructorArgument",
		reflect.TypeOf((*DefaultedConstructorArgument)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "arg1", GoGetter: "Arg1"},
			_jsii_.MemberProperty{JsiiProperty: "arg2", GoGetter: "Arg2"},
			_jsii_.MemberProperty{JsiiProperty: "arg3", GoGetter: "Arg3"},
		},
		func() interface{} {
			return &jsiiProxy_DefaultedConstructorArgument{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Demonstrate982",
		reflect.TypeOf((*Demonstrate982)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_Demonstrate982{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DeprecatedClass",
		reflect.TypeOf((*DeprecatedClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "method", GoMethod: "Method"},
			_jsii_.MemberProperty{JsiiProperty: "mutableProperty", GoGetter: "MutableProperty"},
			_jsii_.MemberProperty{JsiiProperty: "readonlyProperty", GoGetter: "ReadonlyProperty"},
		},
		func() interface{} {
			return &jsiiProxy_DeprecatedClass{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.DeprecatedEnum",
		reflect.TypeOf((*DeprecatedEnum)(nil)).Elem(),
		map[string]interface{}{
			"OPTION_A": DeprecatedEnum_OPTION_A,
			"OPTION_B": DeprecatedEnum_OPTION_B,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DeprecatedStruct",
		reflect.TypeOf((*DeprecatedStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DerivedStruct",
		reflect.TypeOf((*DerivedStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DiamondBottom",
		reflect.TypeOf((*DiamondBottom)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DiamondInheritanceBaseLevelStruct",
		reflect.TypeOf((*DiamondInheritanceBaseLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DiamondInheritanceFirstMidLevelStruct",
		reflect.TypeOf((*DiamondInheritanceFirstMidLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DiamondInheritanceSecondMidLevelStruct",
		reflect.TypeOf((*DiamondInheritanceSecondMidLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DiamondInheritanceTopLevelStruct",
		reflect.TypeOf((*DiamondInheritanceTopLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.DisappointingCollectionSource",
		reflect.TypeOf((*DisappointingCollectionSource)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_DisappointingCollectionSource{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DoNotOverridePrivates",
		reflect.TypeOf((*DoNotOverridePrivates)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "changePrivatePropertyValue", GoMethod: "ChangePrivatePropertyValue"},
			_jsii_.MemberMethod{JsiiMethod: "privateMethodValue", GoMethod: "PrivateMethodValue"},
			_jsii_.MemberMethod{JsiiMethod: "privatePropertyValue", GoMethod: "PrivatePropertyValue"},
		},
		func() interface{} {
			return &jsiiProxy_DoNotOverridePrivates{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DoNotRecognizeAnyAsOptional",
		reflect.TypeOf((*DoNotRecognizeAnyAsOptional)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "method", GoMethod: "Method"},
		},
		func() interface{} {
			return &jsiiProxy_DoNotRecognizeAnyAsOptional{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DocumentedClass",
		reflect.TypeOf((*DocumentedClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "greet", GoMethod: "Greet"},
			_jsii_.MemberMethod{JsiiMethod: "hola", GoMethod: "Hola"},
		},
		func() interface{} {
			return &jsiiProxy_DocumentedClass{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DontComplainAboutVariadicAfterOptional",
		reflect.TypeOf((*DontComplainAboutVariadicAfterOptional)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "optionalAndVariadic", GoMethod: "OptionalAndVariadic"},
		},
		func() interface{} {
			return &jsiiProxy_DontComplainAboutVariadicAfterOptional{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DoubleTrouble",
		reflect.TypeOf((*DoubleTrouble)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
			_jsii_.MemberMethod{JsiiMethod: "next", GoMethod: "Next"},
		},
		func() interface{} {
			j := jsiiProxy_DoubleTrouble{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IFriendlyRandomGenerator)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DynamicPropertyBearer",
		reflect.TypeOf((*DynamicPropertyBearer)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "dynamicProperty", GoGetter: "DynamicProperty"},
			_jsii_.MemberProperty{JsiiProperty: "valueStore", GoGetter: "ValueStore"},
		},
		func() interface{} {
			return &jsiiProxy_DynamicPropertyBearer{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DynamicPropertyBearerChild",
		reflect.TypeOf((*DynamicPropertyBearerChild)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "dynamicProperty", GoGetter: "DynamicProperty"},
			_jsii_.MemberProperty{JsiiProperty: "originalValue", GoGetter: "OriginalValue"},
			_jsii_.MemberMethod{JsiiMethod: "overrideValue", GoMethod: "OverrideValue"},
			_jsii_.MemberProperty{JsiiProperty: "valueStore", GoGetter: "ValueStore"},
		},
		func() interface{} {
			j := jsiiProxy_DynamicPropertyBearerChild{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_DynamicPropertyBearer)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Entropy",
		reflect.TypeOf((*Entropy)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "increase", GoMethod: "Increase"},
			_jsii_.MemberMethod{JsiiMethod: "repeat", GoMethod: "Repeat"},
		},
		func() interface{} {
			return &jsiiProxy_Entropy{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.EnumDispenser",
		reflect.TypeOf((*EnumDispenser)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_EnumDispenser{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.EraseUndefinedHashValues",
		reflect.TypeOf((*EraseUndefinedHashValues)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_EraseUndefinedHashValues{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.EraseUndefinedHashValuesOptions",
		reflect.TypeOf((*EraseUndefinedHashValuesOptions)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.ExperimentalClass",
		reflect.TypeOf((*ExperimentalClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "method", GoMethod: "Method"},
			_jsii_.MemberProperty{JsiiProperty: "mutableProperty", GoGetter: "MutableProperty"},
			_jsii_.MemberProperty{JsiiProperty: "readonlyProperty", GoGetter: "ReadonlyProperty"},
		},
		func() interface{} {
			return &jsiiProxy_ExperimentalClass{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.ExperimentalEnum",
		reflect.TypeOf((*ExperimentalEnum)(nil)).Elem(),
		map[string]interface{}{
			"OPTION_A": ExperimentalEnum_OPTION_A,
			"OPTION_B": ExperimentalEnum_OPTION_B,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ExperimentalStruct",
		reflect.TypeOf((*ExperimentalStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.ExportedBaseClass",
		reflect.TypeOf((*ExportedBaseClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "success", GoGetter: "Success"},
		},
		func() interface{} {
			return &jsiiProxy_ExportedBaseClass{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ExtendsInternalInterface",
		reflect.TypeOf((*ExtendsInternalInterface)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.ExternalClass",
		reflect.TypeOf((*ExternalClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "method", GoMethod: "Method"},
			_jsii_.MemberProperty{JsiiProperty: "mutableProperty", GoGetter: "MutableProperty"},
			_jsii_.MemberProperty{JsiiProperty: "readonlyProperty", GoGetter: "ReadonlyProperty"},
		},
		func() interface{} {
			return &jsiiProxy_ExternalClass{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.ExternalEnum",
		reflect.TypeOf((*ExternalEnum)(nil)).Elem(),
		map[string]interface{}{
			"OPTION_A": ExternalEnum_OPTION_A,
			"OPTION_B": ExternalEnum_OPTION_B,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ExternalStruct",
		reflect.TypeOf((*ExternalStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.GiveMeStructs",
		reflect.TypeOf((*GiveMeStructs)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "derivedToFirst", GoMethod: "DerivedToFirst"},
			_jsii_.MemberMethod{JsiiMethod: "readDerivedNonPrimitive", GoMethod: "ReadDerivedNonPrimitive"},
			_jsii_.MemberMethod{JsiiMethod: "readFirstNumber", GoMethod: "ReadFirstNumber"},
			_jsii_.MemberProperty{JsiiProperty: "structLiteral", GoGetter: "StructLiteral"},
		},
		func() interface{} {
			return &jsiiProxy_GiveMeStructs{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.Greetee",
		reflect.TypeOf((*Greetee)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.GreetingAugmenter",
		reflect.TypeOf((*GreetingAugmenter)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "betterGreeting", GoMethod: "BetterGreeting"},
		},
		func() interface{} {
			return &jsiiProxy_GreetingAugmenter{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IAnonymousImplementationProvider",
		reflect.TypeOf((*IAnonymousImplementationProvider)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "provideAsClass", GoMethod: "ProvideAsClass"},
			_jsii_.MemberMethod{JsiiMethod: "provideAsInterface", GoMethod: "ProvideAsInterface"},
		},
		func() interface{} {
			return &jsiiProxy_IAnonymousImplementationProvider{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IAnonymouslyImplementMe",
		reflect.TypeOf((*IAnonymouslyImplementMe)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
			_jsii_.MemberMethod{JsiiMethod: "verb", GoMethod: "Verb"},
		},
		func() interface{} {
			return &jsiiProxy_IAnonymouslyImplementMe{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IAnotherPublicInterface",
		reflect.TypeOf((*IAnotherPublicInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "a", GoGetter: "A"},
		},
		func() interface{} {
			return &jsiiProxy_IAnotherPublicInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IBell",
		reflect.TypeOf((*IBell)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "ring", GoMethod: "Ring"},
		},
		func() interface{} {
			return &jsiiProxy_IBell{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IBellRinger",
		reflect.TypeOf((*IBellRinger)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "yourTurn", GoMethod: "YourTurn"},
		},
		func() interface{} {
			return &jsiiProxy_IBellRinger{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IConcreteBellRinger",
		reflect.TypeOf((*IConcreteBellRinger)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "yourTurn", GoMethod: "YourTurn"},
		},
		func() interface{} {
			return &jsiiProxy_IConcreteBellRinger{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IDeprecatedInterface",
		reflect.TypeOf((*IDeprecatedInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "method", GoMethod: "Method"},
			_jsii_.MemberProperty{JsiiProperty: "mutableProperty", GoGetter: "MutableProperty"},
		},
		func() interface{} {
			return &jsiiProxy_IDeprecatedInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IExperimentalInterface",
		reflect.TypeOf((*IExperimentalInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "method", GoMethod: "Method"},
			_jsii_.MemberProperty{JsiiProperty: "mutableProperty", GoGetter: "MutableProperty"},
		},
		func() interface{} {
			return &jsiiProxy_IExperimentalInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IExtendsPrivateInterface",
		reflect.TypeOf((*IExtendsPrivateInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "moreThings", GoGetter: "MoreThings"},
			_jsii_.MemberProperty{JsiiProperty: "private", GoGetter: "Private"},
		},
		func() interface{} {
			return &jsiiProxy_IExtendsPrivateInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IExternalInterface",
		reflect.TypeOf((*IExternalInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "method", GoMethod: "Method"},
			_jsii_.MemberProperty{JsiiProperty: "mutableProperty", GoGetter: "MutableProperty"},
		},
		func() interface{} {
			return &jsiiProxy_IExternalInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IFriendlier",
		reflect.TypeOf((*IFriendlier)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "farewell", GoMethod: "Farewell"},
			_jsii_.MemberMethod{JsiiMethod: "goodbye", GoMethod: "Goodbye"},
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
		},
		func() interface{} {
			j := jsiiProxy_IFriendlier{}
			_jsii_.InitJsiiProxy(&j.Type__scopejsiicalclibIFriendly)
			return &j
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IFriendlyRandomGenerator",
		reflect.TypeOf((*IFriendlyRandomGenerator)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
			_jsii_.MemberMethod{JsiiMethod: "next", GoMethod: "Next"},
		},
		func() interface{} {
			j := jsiiProxy_IFriendlyRandomGenerator{}
			_jsii_.InitJsiiProxy(&j.Type__scopejsiicalclibIFriendly)
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IRandomNumberGenerator)
			return &j
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceImplementedByAbstractClass",
		reflect.TypeOf((*IInterfaceImplementedByAbstractClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "propFromInterface", GoGetter: "PropFromInterface"},
		},
		func() interface{} {
			return &jsiiProxy_IInterfaceImplementedByAbstractClass{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceThatShouldNotBeADataType",
		reflect.TypeOf((*IInterfaceThatShouldNotBeADataType)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "doThings", GoMethod: "DoThings"},
			_jsii_.MemberProperty{JsiiProperty: "otherValue", GoGetter: "OtherValue"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_IInterfaceThatShouldNotBeADataType{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IInterfaceWithMethods)
			return &j
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceWithInternal",
		reflect.TypeOf((*IInterfaceWithInternal)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "visible", GoMethod: "Visible"},
		},
		func() interface{} {
			return &jsiiProxy_IInterfaceWithInternal{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceWithMethods",
		reflect.TypeOf((*IInterfaceWithMethods)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "doThings", GoMethod: "DoThings"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			return &jsiiProxy_IInterfaceWithMethods{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceWithOptionalMethodArguments",
		reflect.TypeOf((*IInterfaceWithOptionalMethodArguments)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
		},
		func() interface{} {
			return &jsiiProxy_IInterfaceWithOptionalMethodArguments{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceWithProperties",
		reflect.TypeOf((*IInterfaceWithProperties)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "readOnlyString", GoGetter: "ReadOnlyString"},
			_jsii_.MemberProperty{JsiiProperty: "readWriteString", GoGetter: "ReadWriteString"},
		},
		func() interface{} {
			return &jsiiProxy_IInterfaceWithProperties{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceWithPropertiesExtension",
		reflect.TypeOf((*IInterfaceWithPropertiesExtension)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "foo", GoGetter: "Foo"},
			_jsii_.MemberProperty{JsiiProperty: "readOnlyString", GoGetter: "ReadOnlyString"},
			_jsii_.MemberProperty{JsiiProperty: "readWriteString", GoGetter: "ReadWriteString"},
		},
		func() interface{} {
			j := jsiiProxy_IInterfaceWithPropertiesExtension{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IInterfaceWithProperties)
			return &j
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IJSII417Derived",
		reflect.TypeOf((*IJSII417Derived)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bar", GoMethod: "Bar"},
			_jsii_.MemberMethod{JsiiMethod: "baz", GoMethod: "Baz"},
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
			_jsii_.MemberProperty{JsiiProperty: "hasRoot", GoGetter: "HasRoot"},
			_jsii_.MemberProperty{JsiiProperty: "property", GoGetter: "Property"},
		},
		func() interface{} {
			j := jsiiProxy_IJSII417Derived{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IJSII417PublicBaseOfBase)
			return &j
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IJSII417PublicBaseOfBase",
		reflect.TypeOf((*IJSII417PublicBaseOfBase)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
			_jsii_.MemberProperty{JsiiProperty: "hasRoot", GoGetter: "HasRoot"},
		},
		func() interface{} {
			return &jsiiProxy_IJSII417PublicBaseOfBase{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IJsii487External",
		reflect.TypeOf((*IJsii487External)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_IJsii487External{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IJsii487External2",
		reflect.TypeOf((*IJsii487External2)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_IJsii487External2{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IJsii496",
		reflect.TypeOf((*IJsii496)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_IJsii496{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IMutableObjectLiteral",
		reflect.TypeOf((*IMutableObjectLiteral)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			return &jsiiProxy_IMutableObjectLiteral{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.INonInternalInterface",
		reflect.TypeOf((*INonInternalInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "a", GoGetter: "A"},
			_jsii_.MemberProperty{JsiiProperty: "b", GoGetter: "B"},
			_jsii_.MemberProperty{JsiiProperty: "c", GoGetter: "C"},
		},
		func() interface{} {
			j := jsiiProxy_INonInternalInterface{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IAnotherPublicInterface)
			return &j
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IObjectWithProperty",
		reflect.TypeOf((*IObjectWithProperty)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "property", GoGetter: "Property"},
			_jsii_.MemberMethod{JsiiMethod: "wasSet", GoMethod: "WasSet"},
		},
		func() interface{} {
			return &jsiiProxy_IObjectWithProperty{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IOptionalMethod",
		reflect.TypeOf((*IOptionalMethod)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "optional", GoMethod: "Optional"},
		},
		func() interface{} {
			return &jsiiProxy_IOptionalMethod{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IPrivatelyImplemented",
		reflect.TypeOf((*IPrivatelyImplemented)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "success", GoGetter: "Success"},
		},
		func() interface{} {
			return &jsiiProxy_IPrivatelyImplemented{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IPublicInterface",
		reflect.TypeOf((*IPublicInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bye", GoMethod: "Bye"},
		},
		func() interface{} {
			return &jsiiProxy_IPublicInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IPublicInterface2",
		reflect.TypeOf((*IPublicInterface2)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "ciao", GoMethod: "Ciao"},
		},
		func() interface{} {
			return &jsiiProxy_IPublicInterface2{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IRandomNumberGenerator",
		reflect.TypeOf((*IRandomNumberGenerator)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "next", GoMethod: "Next"},
		},
		func() interface{} {
			return &jsiiProxy_IRandomNumberGenerator{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IReturnJsii976",
		reflect.TypeOf((*IReturnJsii976)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "foo", GoGetter: "Foo"},
		},
		func() interface{} {
			return &jsiiProxy_IReturnJsii976{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IReturnsNumber",
		reflect.TypeOf((*IReturnsNumber)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "numberProp", GoGetter: "NumberProp"},
			_jsii_.MemberMethod{JsiiMethod: "obtainNumber", GoMethod: "ObtainNumber"},
		},
		func() interface{} {
			return &jsiiProxy_IReturnsNumber{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IStableInterface",
		reflect.TypeOf((*IStableInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "method", GoMethod: "Method"},
			_jsii_.MemberProperty{JsiiProperty: "mutableProperty", GoGetter: "MutableProperty"},
		},
		func() interface{} {
			return &jsiiProxy_IStableInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IStructReturningDelegate",
		reflect.TypeOf((*IStructReturningDelegate)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "returnStruct", GoMethod: "ReturnStruct"},
		},
		func() interface{} {
			return &jsiiProxy_IStructReturningDelegate{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IWallClock",
		reflect.TypeOf((*IWallClock)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "iso8601Now", GoMethod: "Iso8601Now"},
		},
		func() interface{} {
			return &jsiiProxy_IWallClock{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ImplementInternalInterface",
		reflect.TypeOf((*ImplementInternalInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "prop", GoGetter: "Prop"},
		},
		func() interface{} {
			return &jsiiProxy_ImplementInternalInterface{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Implementation",
		reflect.TypeOf((*Implementation)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			return &jsiiProxy_Implementation{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ImplementsInterfaceWithInternal",
		reflect.TypeOf((*ImplementsInterfaceWithInternal)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "visible", GoMethod: "Visible"},
		},
		func() interface{} {
			j := jsiiProxy_ImplementsInterfaceWithInternal{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IInterfaceWithInternal)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ImplementsInterfaceWithInternalSubclass",
		reflect.TypeOf((*ImplementsInterfaceWithInternalSubclass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "visible", GoMethod: "Visible"},
		},
		func() interface{} {
			j := jsiiProxy_ImplementsInterfaceWithInternalSubclass{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_ImplementsInterfaceWithInternal)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ImplementsPrivateInterface",
		reflect.TypeOf((*ImplementsPrivateInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "private", GoGetter: "Private"},
		},
		func() interface{} {
			return &jsiiProxy_ImplementsPrivateInterface{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ImplictBaseOfBase",
		reflect.TypeOf((*ImplictBaseOfBase)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.InbetweenClass",
		reflect.TypeOf((*InbetweenClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "ciao", GoMethod: "Ciao"},
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
		},
		func() interface{} {
			j := jsiiProxy_InbetweenClass{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_PublicClass)
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IPublicInterface2)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.InterfaceCollections",
		reflect.TypeOf((*InterfaceCollections)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_InterfaceCollections{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.InterfacesMaker",
		reflect.TypeOf((*InterfacesMaker)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_InterfacesMaker{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Isomorphism",
		reflect.TypeOf((*Isomorphism)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "myself", GoMethod: "Myself"},
		},
		func() interface{} {
			return &jsiiProxy_Isomorphism{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Issue2638",
		reflect.TypeOf((*Issue2638)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_Issue2638{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Issue2638B",
		reflect.TypeOf((*Issue2638B)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_Issue2638B{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JSII417Derived",
		reflect.TypeOf((*JSII417Derived)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bar", GoMethod: "Bar"},
			_jsii_.MemberMethod{JsiiMethod: "baz", GoMethod: "Baz"},
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
			_jsii_.MemberProperty{JsiiProperty: "hasRoot", GoGetter: "HasRoot"},
			_jsii_.MemberProperty{JsiiProperty: "property", GoGetter: "Property"},
		},
		func() interface{} {
			j := jsiiProxy_JSII417Derived{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_JSII417PublicBaseOfBase)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JSII417PublicBaseOfBase",
		reflect.TypeOf((*JSII417PublicBaseOfBase)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
			_jsii_.MemberProperty{JsiiProperty: "hasRoot", GoGetter: "HasRoot"},
		},
		func() interface{} {
			return &jsiiProxy_JSII417PublicBaseOfBase{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JSObjectLiteralForInterface",
		reflect.TypeOf((*JSObjectLiteralForInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "giveMeFriendly", GoMethod: "GiveMeFriendly"},
			_jsii_.MemberMethod{JsiiMethod: "giveMeFriendlyGenerator", GoMethod: "GiveMeFriendlyGenerator"},
		},
		func() interface{} {
			return &jsiiProxy_JSObjectLiteralForInterface{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JSObjectLiteralToNative",
		reflect.TypeOf((*JSObjectLiteralToNative)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "returnLiteral", GoMethod: "ReturnLiteral"},
		},
		func() interface{} {
			return &jsiiProxy_JSObjectLiteralToNative{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JSObjectLiteralToNativeClass",
		reflect.TypeOf((*JSObjectLiteralToNativeClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "propA", GoGetter: "PropA"},
			_jsii_.MemberProperty{JsiiProperty: "propB", GoGetter: "PropB"},
		},
		func() interface{} {
			return &jsiiProxy_JSObjectLiteralToNativeClass{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JavaReservedWords",
		reflect.TypeOf((*JavaReservedWords)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "abstract", GoMethod: "Abstract"},
			_jsii_.MemberMethod{JsiiMethod: "assert", GoMethod: "Assert"},
			_jsii_.MemberMethod{JsiiMethod: "boolean", GoMethod: "Boolean"},
			_jsii_.MemberMethod{JsiiMethod: "break", GoMethod: "Break"},
			_jsii_.MemberMethod{JsiiMethod: "byte", GoMethod: "Byte"},
			_jsii_.MemberMethod{JsiiMethod: "case", GoMethod: "Case"},
			_jsii_.MemberMethod{JsiiMethod: "catch", GoMethod: "Catch"},
			_jsii_.MemberMethod{JsiiMethod: "char", GoMethod: "Char"},
			_jsii_.MemberMethod{JsiiMethod: "class", GoMethod: "Class"},
			_jsii_.MemberMethod{JsiiMethod: "const", GoMethod: "Const"},
			_jsii_.MemberMethod{JsiiMethod: "continue", GoMethod: "Continue"},
			_jsii_.MemberMethod{JsiiMethod: "default", GoMethod: "Default"},
			_jsii_.MemberMethod{JsiiMethod: "do", GoMethod: "Do"},
			_jsii_.MemberMethod{JsiiMethod: "double", GoMethod: "Double"},
			_jsii_.MemberMethod{JsiiMethod: "else", GoMethod: "Else"},
			_jsii_.MemberMethod{JsiiMethod: "enum", GoMethod: "Enum"},
			_jsii_.MemberMethod{JsiiMethod: "extends", GoMethod: "Extends"},
			_jsii_.MemberMethod{JsiiMethod: "false", GoMethod: "False"},
			_jsii_.MemberMethod{JsiiMethod: "final", GoMethod: "Final"},
			_jsii_.MemberMethod{JsiiMethod: "finally", GoMethod: "Finally"},
			_jsii_.MemberMethod{JsiiMethod: "float", GoMethod: "Float"},
			_jsii_.MemberMethod{JsiiMethod: "for", GoMethod: "For"},
			_jsii_.MemberMethod{JsiiMethod: "goto", GoMethod: "Goto"},
			_jsii_.MemberMethod{JsiiMethod: "if", GoMethod: "If"},
			_jsii_.MemberMethod{JsiiMethod: "implements", GoMethod: "Implements"},
			_jsii_.MemberMethod{JsiiMethod: "import", GoMethod: "Import"},
			_jsii_.MemberMethod{JsiiMethod: "instanceof", GoMethod: "Instanceof"},
			_jsii_.MemberMethod{JsiiMethod: "int", GoMethod: "Int"},
			_jsii_.MemberMethod{JsiiMethod: "interface", GoMethod: "Interface"},
			_jsii_.MemberMethod{JsiiMethod: "long", GoMethod: "Long"},
			_jsii_.MemberMethod{JsiiMethod: "native", GoMethod: "Native"},
			_jsii_.MemberMethod{JsiiMethod: "new", GoMethod: "New"},
			_jsii_.MemberMethod{JsiiMethod: "null", GoMethod: "Null"},
			_jsii_.MemberMethod{JsiiMethod: "package", GoMethod: "Package"},
			_jsii_.MemberMethod{JsiiMethod: "private", GoMethod: "Private"},
			_jsii_.MemberMethod{JsiiMethod: "protected", GoMethod: "Protected"},
			_jsii_.MemberMethod{JsiiMethod: "public", GoMethod: "Public"},
			_jsii_.MemberMethod{JsiiMethod: "return", GoMethod: "Return"},
			_jsii_.MemberMethod{JsiiMethod: "short", GoMethod: "Short"},
			_jsii_.MemberMethod{JsiiMethod: "static", GoMethod: "Static"},
			_jsii_.MemberMethod{JsiiMethod: "strictfp", GoMethod: "Strictfp"},
			_jsii_.MemberMethod{JsiiMethod: "super", GoMethod: "Super"},
			_jsii_.MemberMethod{JsiiMethod: "switch", GoMethod: "Switch"},
			_jsii_.MemberMethod{JsiiMethod: "synchronized", GoMethod: "Synchronized"},
			_jsii_.MemberMethod{JsiiMethod: "this", GoMethod: "This"},
			_jsii_.MemberMethod{JsiiMethod: "throw", GoMethod: "Throw"},
			_jsii_.MemberMethod{JsiiMethod: "throws", GoMethod: "Throws"},
			_jsii_.MemberMethod{JsiiMethod: "transient", GoMethod: "Transient"},
			_jsii_.MemberMethod{JsiiMethod: "true", GoMethod: "True"},
			_jsii_.MemberMethod{JsiiMethod: "try", GoMethod: "Try"},
			_jsii_.MemberMethod{JsiiMethod: "void", GoMethod: "Void"},
			_jsii_.MemberMethod{JsiiMethod: "volatile", GoMethod: "Volatile"},
			_jsii_.MemberProperty{JsiiProperty: "while", GoGetter: "While"},
		},
		func() interface{} {
			return &jsiiProxy_JavaReservedWords{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Jsii487Derived",
		reflect.TypeOf((*Jsii487Derived)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			j := jsiiProxy_Jsii487Derived{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IJsii487External)
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IJsii487External2)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Jsii496Derived",
		reflect.TypeOf((*Jsii496Derived)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			j := jsiiProxy_Jsii496Derived{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IJsii496)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JsiiAgent",
		reflect.TypeOf((*JsiiAgent)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_JsiiAgent{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JsonFormatter",
		reflect.TypeOf((*JsonFormatter)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_JsonFormatter{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.LevelOne",
		reflect.TypeOf((*LevelOne)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "props", GoGetter: "Props"},
		},
		func() interface{} {
			return &jsiiProxy_LevelOne{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.LevelOne.PropBooleanValue",
		reflect.TypeOf((*LevelOne_PropBooleanValue)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.LevelOne.PropProperty",
		reflect.TypeOf((*LevelOne_PropProperty)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.LevelOneProps",
		reflect.TypeOf((*LevelOneProps)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.LoadBalancedFargateServiceProps",
		reflect.TypeOf((*LoadBalancedFargateServiceProps)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.MethodNamedProperty",
		reflect.TypeOf((*MethodNamedProperty)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "elite", GoGetter: "Elite"},
			_jsii_.MemberMethod{JsiiMethod: "property", GoMethod: "Property"},
		},
		func() interface{} {
			return &jsiiProxy_MethodNamedProperty{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Multiply",
		reflect.TypeOf((*Multiply)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "farewell", GoMethod: "Farewell"},
			_jsii_.MemberMethod{JsiiMethod: "goodbye", GoMethod: "Goodbye"},
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
			_jsii_.MemberProperty{JsiiProperty: "lhs", GoGetter: "Lhs"},
			_jsii_.MemberMethod{JsiiMethod: "next", GoMethod: "Next"},
			_jsii_.MemberProperty{JsiiProperty: "rhs", GoGetter: "Rhs"},
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_Multiply{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_BinaryOperation)
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IFriendlier)
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IRandomNumberGenerator)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Negate",
		reflect.TypeOf((*Negate)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "farewell", GoMethod: "Farewell"},
			_jsii_.MemberMethod{JsiiMethod: "goodbye", GoMethod: "Goodbye"},
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
			_jsii_.MemberProperty{JsiiProperty: "operand", GoGetter: "Operand"},
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_Negate{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_UnaryOperation)
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IFriendlier)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.NestedClassInstance",
		reflect.TypeOf((*NestedClassInstance)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_NestedClassInstance{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.NestedStruct",
		reflect.TypeOf((*NestedStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.NodeStandardLibrary",
		reflect.TypeOf((*NodeStandardLibrary)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "cryptoSha256", GoMethod: "CryptoSha256"},
			_jsii_.MemberMethod{JsiiMethod: "fsReadFile", GoMethod: "FsReadFile"},
			_jsii_.MemberMethod{JsiiMethod: "fsReadFileSync", GoMethod: "FsReadFileSync"},
			_jsii_.MemberProperty{JsiiProperty: "osPlatform", GoGetter: "OsPlatform"},
		},
		func() interface{} {
			return &jsiiProxy_NodeStandardLibrary{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.NullShouldBeTreatedAsUndefined",
		reflect.TypeOf((*NullShouldBeTreatedAsUndefined)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "changeMeToUndefined", GoGetter: "ChangeMeToUndefined"},
			_jsii_.MemberMethod{JsiiMethod: "giveMeUndefined", GoMethod: "GiveMeUndefined"},
			_jsii_.MemberMethod{JsiiMethod: "giveMeUndefinedInsideAnObject", GoMethod: "GiveMeUndefinedInsideAnObject"},
			_jsii_.MemberMethod{JsiiMethod: "verifyPropertyIsUndefined", GoMethod: "VerifyPropertyIsUndefined"},
		},
		func() interface{} {
			return &jsiiProxy_NullShouldBeTreatedAsUndefined{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.NullShouldBeTreatedAsUndefinedData",
		reflect.TypeOf((*NullShouldBeTreatedAsUndefinedData)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.NumberGenerator",
		reflect.TypeOf((*NumberGenerator)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "generator", GoGetter: "Generator"},
			_jsii_.MemberMethod{JsiiMethod: "isSameGenerator", GoMethod: "IsSameGenerator"},
			_jsii_.MemberMethod{JsiiMethod: "nextTimes100", GoMethod: "NextTimes100"},
		},
		func() interface{} {
			return &jsiiProxy_NumberGenerator{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ObjectRefsInCollections",
		reflect.TypeOf((*ObjectRefsInCollections)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "sumFromArray", GoMethod: "SumFromArray"},
			_jsii_.MemberMethod{JsiiMethod: "sumFromMap", GoMethod: "SumFromMap"},
		},
		func() interface{} {
			return &jsiiProxy_ObjectRefsInCollections{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ObjectWithPropertyProvider",
		reflect.TypeOf((*ObjectWithPropertyProvider)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_ObjectWithPropertyProvider{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Old",
		reflect.TypeOf((*Old)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "doAThing", GoMethod: "DoAThing"},
		},
		func() interface{} {
			return &jsiiProxy_Old{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.OptionalArgumentInvoker",
		reflect.TypeOf((*OptionalArgumentInvoker)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "invokeWithOptional", GoMethod: "InvokeWithOptional"},
			_jsii_.MemberMethod{JsiiMethod: "invokeWithoutOptional", GoMethod: "InvokeWithoutOptional"},
		},
		func() interface{} {
			return &jsiiProxy_OptionalArgumentInvoker{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.OptionalConstructorArgument",
		reflect.TypeOf((*OptionalConstructorArgument)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "arg1", GoGetter: "Arg1"},
			_jsii_.MemberProperty{JsiiProperty: "arg2", GoGetter: "Arg2"},
			_jsii_.MemberProperty{JsiiProperty: "arg3", GoGetter: "Arg3"},
		},
		func() interface{} {
			return &jsiiProxy_OptionalConstructorArgument{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.OptionalStruct",
		reflect.TypeOf((*OptionalStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.OptionalStructConsumer",
		reflect.TypeOf((*OptionalStructConsumer)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "fieldValue", GoGetter: "FieldValue"},
			_jsii_.MemberProperty{JsiiProperty: "parameterWasUndefined", GoGetter: "ParameterWasUndefined"},
		},
		func() interface{} {
			return &jsiiProxy_OptionalStructConsumer{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.OverridableProtectedMember",
		reflect.TypeOf((*OverridableProtectedMember)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "overrideMe", GoMethod: "OverrideMe"},
			_jsii_.MemberProperty{JsiiProperty: "overrideReadOnly", GoGetter: "OverrideReadOnly"},
			_jsii_.MemberProperty{JsiiProperty: "overrideReadWrite", GoGetter: "OverrideReadWrite"},
			_jsii_.MemberMethod{JsiiMethod: "switchModes", GoMethod: "SwitchModes"},
			_jsii_.MemberMethod{JsiiMethod: "valueFromProtected", GoMethod: "ValueFromProtected"},
		},
		func() interface{} {
			return &jsiiProxy_OverridableProtectedMember{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.OverrideReturnsObject",
		reflect.TypeOf((*OverrideReturnsObject)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "test", GoMethod: "Test"},
		},
		func() interface{} {
			return &jsiiProxy_OverrideReturnsObject{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ParentStruct982",
		reflect.TypeOf((*ParentStruct982)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.PartiallyInitializedThisConsumer",
		reflect.TypeOf((*PartiallyInitializedThisConsumer)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "consumePartiallyInitializedThis", GoMethod: "ConsumePartiallyInitializedThis"},
		},
		func() interface{} {
			return &jsiiProxy_PartiallyInitializedThisConsumer{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Polymorphism",
		reflect.TypeOf((*Polymorphism)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "sayHello", GoMethod: "SayHello"},
		},
		func() interface{} {
			return &jsiiProxy_Polymorphism{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Power",
		reflect.TypeOf((*Power)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "base", GoGetter: "Base"},
			_jsii_.MemberProperty{JsiiProperty: "decorationPostfixes", GoGetter: "DecorationPostfixes"},
			_jsii_.MemberProperty{JsiiProperty: "decorationPrefixes", GoGetter: "DecorationPrefixes"},
			_jsii_.MemberProperty{JsiiProperty: "expression", GoGetter: "Expression"},
			_jsii_.MemberProperty{JsiiProperty: "pow", GoGetter: "Pow"},
			_jsii_.MemberProperty{JsiiProperty: "stringStyle", GoGetter: "StringStyle"},
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_Power{}
			_jsii_.InitJsiiProxy(&j.Type__compositionCompositeOperation)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.PropertyNamedProperty",
		reflect.TypeOf((*PropertyNamedProperty)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "property", GoGetter: "Property"},
			_jsii_.MemberProperty{JsiiProperty: "yetAnoterOne", GoGetter: "YetAnoterOne"},
		},
		func() interface{} {
			return &jsiiProxy_PropertyNamedProperty{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.PublicClass",
		reflect.TypeOf((*PublicClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
		},
		func() interface{} {
			return &jsiiProxy_PublicClass{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.PythonReservedWords",
		reflect.TypeOf((*PythonReservedWords)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "and", GoMethod: "And"},
			_jsii_.MemberMethod{JsiiMethod: "as", GoMethod: "As"},
			_jsii_.MemberMethod{JsiiMethod: "assert", GoMethod: "Assert"},
			_jsii_.MemberMethod{JsiiMethod: "async", GoMethod: "Async"},
			_jsii_.MemberMethod{JsiiMethod: "await", GoMethod: "Await"},
			_jsii_.MemberMethod{JsiiMethod: "break", GoMethod: "Break"},
			_jsii_.MemberMethod{JsiiMethod: "class", GoMethod: "Class"},
			_jsii_.MemberMethod{JsiiMethod: "continue", GoMethod: "Continue"},
			_jsii_.MemberMethod{JsiiMethod: "def", GoMethod: "Def"},
			_jsii_.MemberMethod{JsiiMethod: "del", GoMethod: "Del"},
			_jsii_.MemberMethod{JsiiMethod: "elif", GoMethod: "Elif"},
			_jsii_.MemberMethod{JsiiMethod: "else", GoMethod: "Else"},
			_jsii_.MemberMethod{JsiiMethod: "except", GoMethod: "Except"},
			_jsii_.MemberMethod{JsiiMethod: "finally", GoMethod: "Finally"},
			_jsii_.MemberMethod{JsiiMethod: "for", GoMethod: "For"},
			_jsii_.MemberMethod{JsiiMethod: "from", GoMethod: "From"},
			_jsii_.MemberMethod{JsiiMethod: "global", GoMethod: "Global"},
			_jsii_.MemberMethod{JsiiMethod: "if", GoMethod: "If"},
			_jsii_.MemberMethod{JsiiMethod: "import", GoMethod: "Import"},
			_jsii_.MemberMethod{JsiiMethod: "in", GoMethod: "In"},
			_jsii_.MemberMethod{JsiiMethod: "is", GoMethod: "Is"},
			_jsii_.MemberMethod{JsiiMethod: "lambda", GoMethod: "Lambda"},
			_jsii_.MemberMethod{JsiiMethod: "nonlocal", GoMethod: "Nonlocal"},
			_jsii_.MemberMethod{JsiiMethod: "not", GoMethod: "Not"},
			_jsii_.MemberMethod{JsiiMethod: "or", GoMethod: "Or"},
			_jsii_.MemberMethod{JsiiMethod: "pass", GoMethod: "Pass"},
			_jsii_.MemberMethod{JsiiMethod: "raise", GoMethod: "Raise"},
			_jsii_.MemberMethod{JsiiMethod: "return", GoMethod: "Return"},
			_jsii_.MemberMethod{JsiiMethod: "try", GoMethod: "Try"},
			_jsii_.MemberMethod{JsiiMethod: "while", GoMethod: "While"},
			_jsii_.MemberMethod{JsiiMethod: "with", GoMethod: "With"},
			_jsii_.MemberMethod{JsiiMethod: "yield", GoMethod: "Yield"},
		},
		func() interface{} {
			return &jsiiProxy_PythonReservedWords{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ReferenceEnumFromScopedPackage",
		reflect.TypeOf((*ReferenceEnumFromScopedPackage)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "foo", GoGetter: "Foo"},
			_jsii_.MemberMethod{JsiiMethod: "loadFoo", GoMethod: "LoadFoo"},
			_jsii_.MemberMethod{JsiiMethod: "saveFoo", GoMethod: "SaveFoo"},
		},
		func() interface{} {
			return &jsiiProxy_ReferenceEnumFromScopedPackage{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ReturnsPrivateImplementationOfInterface",
		reflect.TypeOf((*ReturnsPrivateImplementationOfInterface)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "privateImplementation", GoGetter: "PrivateImplementation"},
		},
		func() interface{} {
			return &jsiiProxy_ReturnsPrivateImplementationOfInterface{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.RootStruct",
		reflect.TypeOf((*RootStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.RootStructValidator",
		reflect.TypeOf((*RootStructValidator)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_RootStructValidator{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.RuntimeTypeChecking",
		reflect.TypeOf((*RuntimeTypeChecking)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "methodWithDefaultedArguments", GoMethod: "MethodWithDefaultedArguments"},
			_jsii_.MemberMethod{JsiiMethod: "methodWithOptionalAnyArgument", GoMethod: "MethodWithOptionalAnyArgument"},
			_jsii_.MemberMethod{JsiiMethod: "methodWithOptionalArguments", GoMethod: "MethodWithOptionalArguments"},
		},
		func() interface{} {
			return &jsiiProxy_RuntimeTypeChecking{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.SecondLevelStruct",
		reflect.TypeOf((*SecondLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.SingleInstanceTwoTypes",
		reflect.TypeOf((*SingleInstanceTwoTypes)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "interface1", GoMethod: "Interface1"},
			_jsii_.MemberMethod{JsiiMethod: "interface2", GoMethod: "Interface2"},
		},
		func() interface{} {
			return &jsiiProxy_SingleInstanceTwoTypes{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.SingletonInt",
		reflect.TypeOf((*SingletonInt)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "isSingletonInt", GoMethod: "IsSingletonInt"},
		},
		func() interface{} {
			return &jsiiProxy_SingletonInt{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.SingletonIntEnum",
		reflect.TypeOf((*SingletonIntEnum)(nil)).Elem(),
		map[string]interface{}{
			"SINGLETON_INT": SingletonIntEnum_SINGLETON_INT,
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.SingletonString",
		reflect.TypeOf((*SingletonString)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "isSingletonString", GoMethod: "IsSingletonString"},
		},
		func() interface{} {
			return &jsiiProxy_SingletonString{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.SingletonStringEnum",
		reflect.TypeOf((*SingletonStringEnum)(nil)).Elem(),
		map[string]interface{}{
			"SINGLETON_STRING": SingletonStringEnum_SINGLETON_STRING,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.SmellyStruct",
		reflect.TypeOf((*SmellyStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.SomeTypeJsii976",
		reflect.TypeOf((*SomeTypeJsii976)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_SomeTypeJsii976{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.StableClass",
		reflect.TypeOf((*StableClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "method", GoMethod: "Method"},
			_jsii_.MemberProperty{JsiiProperty: "mutableProperty", GoGetter: "MutableProperty"},
			_jsii_.MemberProperty{JsiiProperty: "readonlyProperty", GoGetter: "ReadonlyProperty"},
		},
		func() interface{} {
			return &jsiiProxy_StableClass{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.StableEnum",
		reflect.TypeOf((*StableEnum)(nil)).Elem(),
		map[string]interface{}{
			"OPTION_A": StableEnum_OPTION_A,
			"OPTION_B": StableEnum_OPTION_B,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.StableStruct",
		reflect.TypeOf((*StableStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.StaticContext",
		reflect.TypeOf((*StaticContext)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_StaticContext{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.StaticHelloChild",
		reflect.TypeOf((*StaticHelloChild)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			j := jsiiProxy_StaticHelloChild{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_StaticHelloParent)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.StaticHelloParent",
		reflect.TypeOf((*StaticHelloParent)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_StaticHelloParent{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Statics",
		reflect.TypeOf((*Statics)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "justMethod", GoMethod: "JustMethod"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			return &jsiiProxy_Statics{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.StringEnum",
		reflect.TypeOf((*StringEnum)(nil)).Elem(),
		map[string]interface{}{
			"A": StringEnum_A,
			"B": StringEnum_B,
			"C": StringEnum_C,
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.StripInternal",
		reflect.TypeOf((*StripInternal)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "youSeeMe", GoGetter: "YouSeeMe"},
		},
		func() interface{} {
			return &jsiiProxy_StripInternal{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.StructA",
		reflect.TypeOf((*StructA)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.StructB",
		reflect.TypeOf((*StructB)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.StructParameterType",
		reflect.TypeOf((*StructParameterType)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.StructPassing",
		reflect.TypeOf((*StructPassing)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_StructPassing{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.StructUnionConsumer",
		reflect.TypeOf((*StructUnionConsumer)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_StructUnionConsumer{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.StructWithEnum",
		reflect.TypeOf((*StructWithEnum)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.StructWithJavaReservedWords",
		reflect.TypeOf((*StructWithJavaReservedWords)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.Sum",
		reflect.TypeOf((*Sum)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "decorationPostfixes", GoGetter: "DecorationPostfixes"},
			_jsii_.MemberProperty{JsiiProperty: "decorationPrefixes", GoGetter: "DecorationPrefixes"},
			_jsii_.MemberProperty{JsiiProperty: "expression", GoGetter: "Expression"},
			_jsii_.MemberProperty{JsiiProperty: "parts", GoGetter: "Parts"},
			_jsii_.MemberProperty{JsiiProperty: "stringStyle", GoGetter: "StringStyle"},
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_Sum{}
			_jsii_.InitJsiiProxy(&j.Type__compositionCompositeOperation)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.SupportsNiceJavaBuilder",
		reflect.TypeOf((*SupportsNiceJavaBuilder)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "bar", GoGetter: "Bar"},
			_jsii_.MemberProperty{JsiiProperty: "id", GoGetter: "Id"},
			_jsii_.MemberProperty{JsiiProperty: "propId", GoGetter: "PropId"},
			_jsii_.MemberProperty{JsiiProperty: "rest", GoGetter: "Rest"},
		},
		func() interface{} {
			j := jsiiProxy_SupportsNiceJavaBuilder{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_SupportsNiceJavaBuilderWithRequiredProps)
			return &j
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.SupportsNiceJavaBuilderProps",
		reflect.TypeOf((*SupportsNiceJavaBuilderProps)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
		reflect.TypeOf((*SupportsNiceJavaBuilderWithRequiredProps)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "bar", GoGetter: "Bar"},
			_jsii_.MemberProperty{JsiiProperty: "id", GoGetter: "Id"},
			_jsii_.MemberProperty{JsiiProperty: "propId", GoGetter: "PropId"},
		},
		func() interface{} {
			return &jsiiProxy_SupportsNiceJavaBuilderWithRequiredProps{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.SyncVirtualMethods",
		reflect.TypeOf((*SyncVirtualMethods)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "a", GoGetter: "A"},
			_jsii_.MemberMethod{JsiiMethod: "callerIsAsync", GoMethod: "CallerIsAsync"},
			_jsii_.MemberMethod{JsiiMethod: "callerIsMethod", GoMethod: "CallerIsMethod"},
			_jsii_.MemberProperty{JsiiProperty: "callerIsProperty", GoGetter: "CallerIsProperty"},
			_jsii_.MemberMethod{JsiiMethod: "modifyOtherProperty", GoMethod: "ModifyOtherProperty"},
			_jsii_.MemberMethod{JsiiMethod: "modifyValueOfTheProperty", GoMethod: "ModifyValueOfTheProperty"},
			_jsii_.MemberProperty{JsiiProperty: "otherProperty", GoGetter: "OtherProperty"},
			_jsii_.MemberMethod{JsiiMethod: "readA", GoMethod: "ReadA"},
			_jsii_.MemberProperty{JsiiProperty: "readonlyProperty", GoGetter: "ReadonlyProperty"},
			_jsii_.MemberMethod{JsiiMethod: "retrieveOtherProperty", GoMethod: "RetrieveOtherProperty"},
			_jsii_.MemberMethod{JsiiMethod: "retrieveReadOnlyProperty", GoMethod: "RetrieveReadOnlyProperty"},
			_jsii_.MemberMethod{JsiiMethod: "retrieveValueOfTheProperty", GoMethod: "RetrieveValueOfTheProperty"},
			_jsii_.MemberProperty{JsiiProperty: "theProperty", GoGetter: "TheProperty"},
			_jsii_.MemberProperty{JsiiProperty: "valueOfOtherProperty", GoGetter: "ValueOfOtherProperty"},
			_jsii_.MemberMethod{JsiiMethod: "virtualMethod", GoMethod: "VirtualMethod"},
			_jsii_.MemberMethod{JsiiMethod: "writeA", GoMethod: "WriteA"},
		},
		func() interface{} {
			return &jsiiProxy_SyncVirtualMethods{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.TestStructWithEnum",
		reflect.TypeOf((*TestStructWithEnum)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "isStringEnumA", GoMethod: "IsStringEnumA"},
			_jsii_.MemberMethod{JsiiMethod: "isStringEnumB", GoMethod: "IsStringEnumB"},
			_jsii_.MemberProperty{JsiiProperty: "structWithFoo", GoGetter: "StructWithFoo"},
			_jsii_.MemberProperty{JsiiProperty: "structWithFooBar", GoGetter: "StructWithFooBar"},
		},
		func() interface{} {
			return &jsiiProxy_TestStructWithEnum{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Thrower",
		reflect.TypeOf((*Thrower)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "throwError", GoMethod: "ThrowError"},
		},
		func() interface{} {
			return &jsiiProxy_Thrower{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.TopLevelStruct",
		reflect.TypeOf((*TopLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.TwoMethodsWithSimilarCapitalization",
		reflect.TypeOf((*TwoMethodsWithSimilarCapitalization)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "fooBar", GoGetter: "FooBar"},
			_jsii_.MemberProperty{JsiiProperty: "fooBAR", GoGetter: "FooBAR"},
			_jsii_.MemberMethod{JsiiMethod: "toIsoString", GoMethod: "ToIsoString"},
			_jsii_.MemberMethod{JsiiMethod: "toIsOString", GoMethod: "ToIsOString"},
			_jsii_.MemberMethod{JsiiMethod: "toISOString", GoMethod: "ToISOString"},
		},
		func() interface{} {
			return &jsiiProxy_TwoMethodsWithSimilarCapitalization{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.UmaskCheck",
		reflect.TypeOf((*UmaskCheck)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_UmaskCheck{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.UnaryOperation",
		reflect.TypeOf((*UnaryOperation)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "operand", GoGetter: "Operand"},
			_jsii_.MemberMethod{JsiiMethod: "toString", GoMethod: "ToString"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
			_jsii_.MemberProperty{JsiiProperty: "value", GoGetter: "Value"},
		},
		func() interface{} {
			j := jsiiProxy_UnaryOperation{}
			_jsii_.InitJsiiProxy(&j.Type__scopejsiicalclibOperation)
			return &j
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.UnionProperties",
		reflect.TypeOf((*UnionProperties)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.UpcasingReflectable",
		reflect.TypeOf((*UpcasingReflectable)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "entries", GoGetter: "Entries"},
		},
		func() interface{} {
			j := jsiiProxy_UpcasingReflectable{}
			_jsii_.InitJsiiProxy(&j.Type__customsubmodulenameIReflectable)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.UseBundledDependency",
		reflect.TypeOf((*UseBundledDependency)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "value", GoMethod: "Value"},
		},
		func() interface{} {
			return &jsiiProxy_UseBundledDependency{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.UseCalcBase",
		reflect.TypeOf((*UseCalcBase)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
		},
		func() interface{} {
			return &jsiiProxy_UseCalcBase{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.UsesInterfaceWithProperties",
		reflect.TypeOf((*UsesInterfaceWithProperties)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "justRead", GoMethod: "JustRead"},
			_jsii_.MemberProperty{JsiiProperty: "obj", GoGetter: "Obj"},
			_jsii_.MemberMethod{JsiiMethod: "readStringAndNumber", GoMethod: "ReadStringAndNumber"},
			_jsii_.MemberMethod{JsiiMethod: "writeAndRead", GoMethod: "WriteAndRead"},
		},
		func() interface{} {
			return &jsiiProxy_UsesInterfaceWithProperties{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.VariadicInvoker",
		reflect.TypeOf((*VariadicInvoker)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "asArray", GoMethod: "AsArray"},
		},
		func() interface{} {
			return &jsiiProxy_VariadicInvoker{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.VariadicMethod",
		reflect.TypeOf((*VariadicMethod)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "asArray", GoMethod: "AsArray"},
		},
		func() interface{} {
			return &jsiiProxy_VariadicMethod{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.VirtualMethodPlayground",
		reflect.TypeOf((*VirtualMethodPlayground)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "overrideMeAsync", GoMethod: "OverrideMeAsync"},
			_jsii_.MemberMethod{JsiiMethod: "overrideMeSync", GoMethod: "OverrideMeSync"},
			_jsii_.MemberMethod{JsiiMethod: "parallelSumAsync", GoMethod: "ParallelSumAsync"},
			_jsii_.MemberMethod{JsiiMethod: "serialSumAsync", GoMethod: "SerialSumAsync"},
			_jsii_.MemberMethod{JsiiMethod: "sumSync", GoMethod: "SumSync"},
		},
		func() interface{} {
			return &jsiiProxy_VirtualMethodPlayground{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.VoidCallback",
		reflect.TypeOf((*VoidCallback)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "callMe", GoMethod: "CallMe"},
			_jsii_.MemberProperty{JsiiProperty: "methodWasCalled", GoGetter: "MethodWasCalled"},
			_jsii_.MemberMethod{JsiiMethod: "overrideMe", GoMethod: "OverrideMe"},
		},
		func() interface{} {
			return &jsiiProxy_VoidCallback{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.WithPrivatePropertyInConstructor",
		reflect.TypeOf((*WithPrivatePropertyInConstructor)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "success", GoGetter: "Success"},
		},
		func() interface{} {
			return &jsiiProxy_WithPrivatePropertyInConstructor{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2530/module2530.go 1`] = `
package module2530

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

// Verifies a method with parameters "_" can be generated.
// See: https://github.com/aws/jsii/issues/2530
//
type MyClass interface {
	Foo(_arg *string)
}

// The jsii proxy struct for MyClass
type jsiiProxy_MyClass struct {
	_ byte // padding
}

func NewMyClass(_arg *float64) MyClass {
	_init_.Initialize()

	j := jsiiProxy_MyClass{}

	_jsii_.Create(
		"jsii-calc.module2530.MyClass",
		[]interface{}{_arg},
		&j,
	)

	return &j
}

func NewMyClass_Override(m MyClass, _arg *float64) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.module2530.MyClass",
		[]interface{}{_arg},
		m,
	)
}

func MyClass_Bar(_arg *bool) {
	_init_.Initialize()

	_jsii_.StaticInvokeVoid(
		"jsii-calc.module2530.MyClass",
		"bar",
		[]interface{}{_arg},
	)
}

func (m *jsiiProxy_MyClass) Foo(_arg *string) {
	_jsii_.InvokeVoid(
		m,
		"foo",
		[]interface{}{_arg},
	)
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2530/module2530.init.go 1`] = `
package module2530

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.module2530.MyClass",
		reflect.TypeOf((*MyClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
		},
		func() interface{} {
			return &jsiiProxy_MyClass{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2617/module2617.go 1`] = `
package module2617

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type OnlyStatics interface {
}

// The jsii proxy struct for OnlyStatics
type jsiiProxy_OnlyStatics struct {
	_ byte // padding
}

func OnlyStatics_Bar() {
	_init_.Initialize()

	_jsii_.StaticInvokeVoid(
		"jsii-calc.module2617.OnlyStatics",
		"bar",
		nil, // no parameters
	)
}

func OnlyStatics_Foo() {
	_init_.Initialize()

	_jsii_.StaticInvokeVoid(
		"jsii-calc.module2617.OnlyStatics",
		"foo",
		nil, // no parameters
	)
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2617/module2617.init.go 1`] = `
package module2617

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.module2617.OnlyStatics",
		reflect.TypeOf((*OnlyStatics)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_OnlyStatics{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2647/internal/types.go 1`] = `
package internal
import (
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
)
type Type__scopejsiicalclibBaseFor2647 = scopejsiicalclib.BaseFor2647
type Type__scopejsiicalclibIFriendly = scopejsiicalclib.IFriendly

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2647/module2647.go 1`] = `
package module2647

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jcb"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/module2647/internal"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
)

// This class falls into the category of "multiple bases" from a different module from a go code gen perspective.
// See: https://github.com/aws/jsii/issues/2647
//
type ExtendAndImplement interface {
	scopejsiicalclib.BaseFor2647
	scopejsiicalclib.IFriendly
	Foo(obj jcb.IBaseInterface)
	Hello() *string
	LocalMethod() *string
}

// The jsii proxy struct for ExtendAndImplement
type jsiiProxy_ExtendAndImplement struct {
	internal.Type__scopejsiicalclibBaseFor2647
	internal.Type__scopejsiicalclibIFriendly
}

// Deprecated.
func NewExtendAndImplement(very scopejsiicalcbaseofbase.Very) ExtendAndImplement {
	_init_.Initialize()

	j := jsiiProxy_ExtendAndImplement{}

	_jsii_.Create(
		"jsii-calc.module2647.ExtendAndImplement",
		[]interface{}{very},
		&j,
	)

	return &j
}

// Deprecated.
func NewExtendAndImplement_Override(e ExtendAndImplement, very scopejsiicalcbaseofbase.Very) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.module2647.ExtendAndImplement",
		[]interface{}{very},
		e,
	)
}

// Deprecated.
func (e *jsiiProxy_ExtendAndImplement) Foo(obj jcb.IBaseInterface) {
	_jsii_.InvokeVoid(
		e,
		"foo",
		[]interface{}{obj},
	)
}

// (deprecated) Say hello!
func (e *jsiiProxy_ExtendAndImplement) Hello() *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"hello",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ExtendAndImplement) LocalMethod() *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"localMethod",
		nil, // no parameters
		&returns,
	)

	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2647/module2647.init.go 1`] = `
package module2647

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.module2647.ExtendAndImplement",
		reflect.TypeOf((*ExtendAndImplement)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
			_jsii_.MemberMethod{JsiiMethod: "hello", GoMethod: "Hello"},
			_jsii_.MemberMethod{JsiiMethod: "localMethod", GoMethod: "LocalMethod"},
		},
		func() interface{} {
			j := jsiiProxy_ExtendAndImplement{}
			_jsii_.InitJsiiProxy(&j.Type__scopejsiicalclibBaseFor2647)
			_jsii_.InitJsiiProxy(&j.Type__scopejsiicalclibIFriendly)
			return &j
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2689/methods/methods.go 1`] = `
package methods

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jcb"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
)

type MyClass interface {
	Bar(_bar *map[string]*jcb.BaseProps)
	Foo(_values *[]scopejsiicalclib.Number)
}

// The jsii proxy struct for MyClass
type jsiiProxy_MyClass struct {
	_ byte // padding
}

func NewMyClass() MyClass {
	_init_.Initialize()

	j := jsiiProxy_MyClass{}

	_jsii_.Create(
		"jsii-calc.module2689.methods.MyClass",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewMyClass_Override(m MyClass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.module2689.methods.MyClass",
		nil, // no parameters
		m,
	)
}

func (m *jsiiProxy_MyClass) Bar(_bar *map[string]*jcb.BaseProps) {
	_jsii_.InvokeVoid(
		m,
		"bar",
		[]interface{}{_bar},
	)
}

func (m *jsiiProxy_MyClass) Foo(_values *[]scopejsiicalclib.Number) {
	_jsii_.InvokeVoid(
		m,
		"foo",
		[]interface{}{_values},
	)
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2689/methods/methods.init.go 1`] = `
package methods

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.module2689.methods.MyClass",
		reflect.TypeOf((*MyClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bar", GoMethod: "Bar"},
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
		},
		func() interface{} {
			return &jsiiProxy_MyClass{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2689/module2689.go 1`] = `
package module2689



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2689/props/props.go 1`] = `
package props

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jcb"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
)

type MyClass interface {
	Bar() *map[string]*jcb.BaseProps
	Foo() *[]scopejsiicalclib.Number
}

// The jsii proxy struct for MyClass
type jsiiProxy_MyClass struct {
	_ byte // padding
}

func (j *jsiiProxy_MyClass) Bar() *map[string]*jcb.BaseProps {
	var returns *map[string]*jcb.BaseProps
	_jsii_.Get(
		j,
		"bar",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MyClass) Foo() *[]scopejsiicalclib.Number {
	var returns *[]scopejsiicalclib.Number
	_jsii_.Get(
		j,
		"foo",
		&returns,
	)
	return returns
}


func NewMyClass() MyClass {
	_init_.Initialize()

	j := jsiiProxy_MyClass{}

	_jsii_.Create(
		"jsii-calc.module2689.props.MyClass",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewMyClass_Override(m MyClass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.module2689.props.MyClass",
		nil, // no parameters
		m,
	)
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2689/props/props.init.go 1`] = `
package props

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.module2689.props.MyClass",
		reflect.TypeOf((*MyClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "bar", GoGetter: "Bar"},
			_jsii_.MemberProperty{JsiiProperty: "foo", GoGetter: "Foo"},
		},
		func() interface{} {
			return &jsiiProxy_MyClass{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2689/retval/retval.go 1`] = `
package retval

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jcb"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
)

type MyClass interface {
	Bar() *map[string]*jcb.BaseProps
	Foo() *[]scopejsiicalclib.Number
}

// The jsii proxy struct for MyClass
type jsiiProxy_MyClass struct {
	_ byte // padding
}

func NewMyClass() MyClass {
	_init_.Initialize()

	j := jsiiProxy_MyClass{}

	_jsii_.Create(
		"jsii-calc.module2689.retval.MyClass",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewMyClass_Override(m MyClass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.module2689.retval.MyClass",
		nil, // no parameters
		m,
	)
}

func (m *jsiiProxy_MyClass) Bar() *map[string]*jcb.BaseProps {
	var returns *map[string]*jcb.BaseProps

	_jsii_.Invoke(
		m,
		"bar",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MyClass) Foo() *[]scopejsiicalclib.Number {
	var returns *[]scopejsiicalclib.Number

	_jsii_.Invoke(
		m,
		"foo",
		nil, // no parameters
		&returns,
	)

	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2689/retval/retval.init.go 1`] = `
package retval

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.module2689.retval.MyClass",
		reflect.TypeOf((*MyClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bar", GoMethod: "Bar"},
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
		},
		func() interface{} {
			return &jsiiProxy_MyClass{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2689/structs/structs.go 1`] = `
package structs

import (
	"github.com/aws/jsii/jsii-calc/go/jcb"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
)

type MyStruct struct {
	BaseMap *map[string]*jcb.BaseProps \`json:"baseMap"\`
	Numbers *[]scopejsiicalclib.Number \`json:"numbers"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2689/structs/structs.init.go 1`] = `
package structs

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterStruct(
		"jsii-calc.module2689.structs.MyStruct",
		reflect.TypeOf((*MyStruct)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2692/module2692.go 1`] = `
package module2692



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2692/submodule1/submodule1.go 1`] = `
package submodule1


type Bar struct {
	Bar1 *string \`json:"bar1"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2692/submodule1/submodule1.init.go 1`] = `
package submodule1

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterStruct(
		"jsii-calc.module2692.submodule1.Bar",
		reflect.TypeOf((*Bar)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2692/submodule2/submodule2.go 1`] = `
package submodule2


type Bar struct {
	Bar2 *string \`json:"bar2"\`
}

type Foo struct {
	Bar2 *string \`json:"bar2"\`
	Bar1 *string \`json:"bar1"\`
	Foo2 *string \`json:"foo2"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2692/submodule2/submodule2.init.go 1`] = `
package submodule2

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterStruct(
		"jsii-calc.module2692.submodule2.Bar",
		reflect.TypeOf((*Bar)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.module2692.submodule2.Foo",
		reflect.TypeOf((*Foo)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2700/module2700.go 1`] = `
package module2700

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type Base interface {
	IFoo
	Baz() *float64
	Bar() *string
}

// The jsii proxy struct for Base
type jsiiProxy_Base struct {
	jsiiProxy_IFoo
}

func (j *jsiiProxy_Base) Baz() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"baz",
		&returns,
	)
	return returns
}


func NewBase() Base {
	_init_.Initialize()

	j := jsiiProxy_Base{}

	_jsii_.Create(
		"jsii-calc.module2700.Base",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewBase_Override(b Base) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.module2700.Base",
		nil, // no parameters
		b,
	)
}

func (b *jsiiProxy_Base) Bar() *string {
	var returns *string

	_jsii_.Invoke(
		b,
		"bar",
		nil, // no parameters
		&returns,
	)

	return returns
}

type Derived interface {
	Base
	IFoo
	Baz() *float64
	Bar() *string
	Zoo() *string
}

// The jsii proxy struct for Derived
type jsiiProxy_Derived struct {
	jsiiProxy_Base
	jsiiProxy_IFoo
}

func (j *jsiiProxy_Derived) Baz() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"baz",
		&returns,
	)
	return returns
}


func NewDerived() Derived {
	_init_.Initialize()

	j := jsiiProxy_Derived{}

	_jsii_.Create(
		"jsii-calc.module2700.Derived",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewDerived_Override(d Derived) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.module2700.Derived",
		nil, // no parameters
		d,
	)
}

func (d *jsiiProxy_Derived) Bar() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"bar",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_Derived) Zoo() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"zoo",
		nil, // no parameters
		&returns,
	)

	return returns
}

type IFoo interface {
	Bar() *string
	Baz() *float64
}

// The jsii proxy for IFoo
type jsiiProxy_IFoo struct {
	_ byte // padding
}

func (i *jsiiProxy_IFoo) Bar() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"bar",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (j *jsiiProxy_IFoo) Baz() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"baz",
		&returns,
	)
	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2700/module2700.init.go 1`] = `
package module2700

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.module2700.Base",
		reflect.TypeOf((*Base)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bar", GoMethod: "Bar"},
			_jsii_.MemberProperty{JsiiProperty: "baz", GoGetter: "Baz"},
		},
		func() interface{} {
			j := jsiiProxy_Base{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IFoo)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.module2700.Derived",
		reflect.TypeOf((*Derived)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bar", GoMethod: "Bar"},
			_jsii_.MemberProperty{JsiiProperty: "baz", GoGetter: "Baz"},
			_jsii_.MemberMethod{JsiiMethod: "zoo", GoMethod: "Zoo"},
		},
		func() interface{} {
			j := jsiiProxy_Derived{}
			_jsii_.InitJsiiProxy(&j.jsiiProxy_Base)
			_jsii_.InitJsiiProxy(&j.jsiiProxy_IFoo)
			return &j
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.module2700.IFoo",
		reflect.TypeOf((*IFoo)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bar", GoMethod: "Bar"},
			_jsii_.MemberProperty{JsiiProperty: "baz", GoGetter: "Baz"},
		},
		func() interface{} {
			return &jsiiProxy_IFoo{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2702/internal/types.go 1`] = `
package internal
import (
	"github.com/aws/jsii/jsii-calc/go/jcb"
)
type Type__jcbBase = jcb.Base
type Type__jcbIBaseInterface = jcb.IBaseInterface

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2702/module2702.go 1`] = `
package module2702

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jcb"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/module2702/internal"
)

type Class1 interface {
	jcb.Base
	Base()
	TypeName() interface{}
}

// The jsii proxy struct for Class1
type jsiiProxy_Class1 struct {
	internal.Type__jcbBase
}

func NewClass1() Class1 {
	_init_.Initialize()

	j := jsiiProxy_Class1{}

	_jsii_.Create(
		"jsii-calc.module2702.Class1",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewClass1_Override(c Class1) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.module2702.Class1",
		nil, // no parameters
		c,
	)
}

func (c *jsiiProxy_Class1) Base() {
	_jsii_.InvokeVoid(
		c,
		"base",
		nil, // no parameters
	)
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (c *jsiiProxy_Class1) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

type Class2 interface {
	jcb.Base
	Base() *string
	TypeName() interface{}
}

// The jsii proxy struct for Class2
type jsiiProxy_Class2 struct {
	internal.Type__jcbBase
}

func (j *jsiiProxy_Class2) Base() *string {
	var returns *string
	_jsii_.Get(
		j,
		"base",
		&returns,
	)
	return returns
}


func NewClass2() Class2 {
	_init_.Initialize()

	j := jsiiProxy_Class2{}

	_jsii_.Create(
		"jsii-calc.module2702.Class2",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewClass2_Override(c Class2) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.module2702.Class2",
		nil, // no parameters
		c,
	)
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (c *jsiiProxy_Class2) TypeName() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"typeName",
		nil, // no parameters
		&returns,
	)

	return returns
}

type Class3 interface {
	jcb.IBaseInterface
	Bar()
	Foo()
	IBaseInterface()
}

// The jsii proxy struct for Class3
type jsiiProxy_Class3 struct {
	internal.Type__jcbIBaseInterface
}

func NewClass3() Class3 {
	_init_.Initialize()

	j := jsiiProxy_Class3{}

	_jsii_.Create(
		"jsii-calc.module2702.Class3",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewClass3_Override(c Class3) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.module2702.Class3",
		nil, // no parameters
		c,
	)
}

func (c *jsiiProxy_Class3) Bar() {
	_jsii_.InvokeVoid(
		c,
		"bar",
		nil, // no parameters
	)
}

func (c *jsiiProxy_Class3) Foo() {
	_jsii_.InvokeVoid(
		c,
		"foo",
		nil, // no parameters
	)
}

func (c *jsiiProxy_Class3) IBaseInterface() {
	_jsii_.InvokeVoid(
		c,
		"iBaseInterface",
		nil, // no parameters
	)
}

type IFoo interface {
	jcb.IBaseInterface
	IBaseInterface() *string
}

// The jsii proxy for IFoo
type jsiiProxy_IFoo struct {
	internal.Type__jcbIBaseInterface
}

func (j *jsiiProxy_IFoo) IBaseInterface() *string {
	var returns *string
	_jsii_.Get(
		j,
		"iBaseInterface",
		&returns,
	)
	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/module2702/module2702.init.go 1`] = `
package module2702

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.module2702.Class1",
		reflect.TypeOf((*Class1)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "base", GoMethod: "Base"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
		},
		func() interface{} {
			j := jsiiProxy_Class1{}
			_jsii_.InitJsiiProxy(&j.Type__jcbBase)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.module2702.Class2",
		reflect.TypeOf((*Class2)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "base", GoGetter: "Base"},
			_jsii_.MemberMethod{JsiiMethod: "typeName", GoMethod: "TypeName"},
		},
		func() interface{} {
			j := jsiiProxy_Class2{}
			_jsii_.InitJsiiProxy(&j.Type__jcbBase)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.module2702.Class3",
		reflect.TypeOf((*Class3)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bar", GoMethod: "Bar"},
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
			_jsii_.MemberMethod{JsiiMethod: "iBaseInterface", GoMethod: "IBaseInterface"},
		},
		func() interface{} {
			j := jsiiProxy_Class3{}
			_jsii_.InitJsiiProxy(&j.Type__jcbIBaseInterface)
			return &j
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.module2702.IFoo",
		reflect.TypeOf((*IFoo)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "bar", GoMethod: "Bar"},
			_jsii_.MemberMethod{JsiiMethod: "foo", GoMethod: "Foo"},
			_jsii_.MemberProperty{JsiiProperty: "iBaseInterface", GoGetter: "IBaseInterface"},
		},
		func() interface{} {
			j := jsiiProxy_IFoo{}
			_jsii_.InitJsiiProxy(&j.Type__jcbIBaseInterface)
			return &j
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/nodirect/nodirect.go 1`] = `
package nodirect



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/nodirect/sub1/sub1.go 1`] = `
package sub1

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type TypeFromSub1 interface {
	Sub1() *string
}

// The jsii proxy struct for TypeFromSub1
type jsiiProxy_TypeFromSub1 struct {
	_ byte // padding
}

func NewTypeFromSub1() TypeFromSub1 {
	_init_.Initialize()

	j := jsiiProxy_TypeFromSub1{}

	_jsii_.Create(
		"jsii-calc.nodirect.sub1.TypeFromSub1",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewTypeFromSub1_Override(t TypeFromSub1) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.nodirect.sub1.TypeFromSub1",
		nil, // no parameters
		t,
	)
}

func (t *jsiiProxy_TypeFromSub1) Sub1() *string {
	var returns *string

	_jsii_.Invoke(
		t,
		"sub1",
		nil, // no parameters
		&returns,
	)

	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/nodirect/sub1/sub1.init.go 1`] = `
package sub1

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.nodirect.sub1.TypeFromSub1",
		reflect.TypeOf((*TypeFromSub1)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "sub1", GoMethod: "Sub1"},
		},
		func() interface{} {
			return &jsiiProxy_TypeFromSub1{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/nodirect/sub2/sub2.go 1`] = `
package sub2

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type TypeFromSub2 interface {
	Sub2() *string
}

// The jsii proxy struct for TypeFromSub2
type jsiiProxy_TypeFromSub2 struct {
	_ byte // padding
}

func NewTypeFromSub2() TypeFromSub2 {
	_init_.Initialize()

	j := jsiiProxy_TypeFromSub2{}

	_jsii_.Create(
		"jsii-calc.nodirect.sub2.TypeFromSub2",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewTypeFromSub2_Override(t TypeFromSub2) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.nodirect.sub2.TypeFromSub2",
		nil, // no parameters
		t,
	)
}

func (t *jsiiProxy_TypeFromSub2) Sub2() *string {
	var returns *string

	_jsii_.Invoke(
		t,
		"sub2",
		nil, // no parameters
		&returns,
	)

	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/nodirect/sub2/sub2.init.go 1`] = `
package sub2

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.nodirect.sub2.TypeFromSub2",
		reflect.TypeOf((*TypeFromSub2)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "sub2", GoMethod: "Sub2"},
		},
		func() interface{} {
			return &jsiiProxy_TypeFromSub2{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/onlystatic/onlystatic.go 1`] = `
package onlystatic

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

// Test for https://github.com/aws/jsii/issues/2617.
type OnlyStaticMethods interface {
}

// The jsii proxy struct for OnlyStaticMethods
type jsiiProxy_OnlyStaticMethods struct {
	_ byte // padding
}

func OnlyStaticMethods_StaticMethod() *string {
	_init_.Initialize()

	var returns *string

	_jsii_.StaticInvoke(
		"jsii-calc.onlystatic.OnlyStaticMethods",
		"staticMethod",
		nil, // no parameters
		&returns,
	)

	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/onlystatic/onlystatic.init.go 1`] = `
package onlystatic

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.onlystatic.OnlyStaticMethods",
		reflect.TypeOf((*OnlyStaticMethods)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_OnlyStaticMethods{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/pythonself/pythonself.go 1`] = `
package pythonself

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type ClassWithSelf interface {
	Self() *string
	Method(self *float64) *string
}

// The jsii proxy struct for ClassWithSelf
type jsiiProxy_ClassWithSelf struct {
	_ byte // padding
}

func (j *jsiiProxy_ClassWithSelf) Self() *string {
	var returns *string
	_jsii_.Get(
		j,
		"self",
		&returns,
	)
	return returns
}


func NewClassWithSelf(self *string) ClassWithSelf {
	_init_.Initialize()

	j := jsiiProxy_ClassWithSelf{}

	_jsii_.Create(
		"jsii-calc.PythonSelf.ClassWithSelf",
		[]interface{}{self},
		&j,
	)

	return &j
}

func NewClassWithSelf_Override(c ClassWithSelf, self *string) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.PythonSelf.ClassWithSelf",
		[]interface{}{self},
		c,
	)
}

func (c *jsiiProxy_ClassWithSelf) Method(self *float64) *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"method",
		[]interface{}{self},
		&returns,
	)

	return returns
}

type ClassWithSelfKwarg interface {
	Props() *StructWithSelf
}

// The jsii proxy struct for ClassWithSelfKwarg
type jsiiProxy_ClassWithSelfKwarg struct {
	_ byte // padding
}

func (j *jsiiProxy_ClassWithSelfKwarg) Props() *StructWithSelf {
	var returns *StructWithSelf
	_jsii_.Get(
		j,
		"props",
		&returns,
	)
	return returns
}


func NewClassWithSelfKwarg(props *StructWithSelf) ClassWithSelfKwarg {
	_init_.Initialize()

	j := jsiiProxy_ClassWithSelfKwarg{}

	_jsii_.Create(
		"jsii-calc.PythonSelf.ClassWithSelfKwarg",
		[]interface{}{props},
		&j,
	)

	return &j
}

func NewClassWithSelfKwarg_Override(c ClassWithSelfKwarg, props *StructWithSelf) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.PythonSelf.ClassWithSelfKwarg",
		[]interface{}{props},
		c,
	)
}

type IInterfaceWithSelf interface {
	Method(self *float64) *string
}

// The jsii proxy for IInterfaceWithSelf
type jsiiProxy_IInterfaceWithSelf struct {
	_ byte // padding
}

func (i *jsiiProxy_IInterfaceWithSelf) Method(self *float64) *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"method",
		[]interface{}{self},
		&returns,
	)

	return returns
}

type StructWithSelf struct {
	Self *string \`json:"self"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/pythonself/pythonself.init.go 1`] = `
package pythonself

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.PythonSelf.ClassWithSelf",
		reflect.TypeOf((*ClassWithSelf)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "method", GoMethod: "Method"},
			_jsii_.MemberProperty{JsiiProperty: "self", GoGetter: "Self"},
		},
		func() interface{} {
			return &jsiiProxy_ClassWithSelf{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.PythonSelf.ClassWithSelfKwarg",
		reflect.TypeOf((*ClassWithSelfKwarg)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "props", GoGetter: "Props"},
		},
		func() interface{} {
			return &jsiiProxy_ClassWithSelfKwarg{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.PythonSelf.IInterfaceWithSelf",
		reflect.TypeOf((*IInterfaceWithSelf)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "method", GoMethod: "Method"},
		},
		func() interface{} {
			return &jsiiProxy_IInterfaceWithSelf{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.PythonSelf.StructWithSelf",
		reflect.TypeOf((*StructWithSelf)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/backreferences/backreferences.go 1`] = `
package backreferences

import (
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule"
)

type MyClassReference struct {
	Reference submodule.MyClass \`json:"reference"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/backreferences/backreferences.init.go 1`] = `
package backreferences

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterStruct(
		"jsii-calc.submodule.back_references.MyClassReference",
		reflect.TypeOf((*MyClassReference)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/child/child.go 1`] = `
package child

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type Awesomeness string

const (
	Awesomeness_AWESOME Awesomeness = "AWESOME"
)

type Goodness string

const (
	Goodness_PRETTY_GOOD Goodness = "PRETTY_GOOD"
	Goodness_REALLY_GOOD Goodness = "REALLY_GOOD"
	Goodness_AMAZINGLY_GOOD Goodness = "AMAZINGLY_GOOD"
)

type InnerClass interface {
}

// The jsii proxy struct for InnerClass
type jsiiProxy_InnerClass struct {
	_ byte // padding
}

func NewInnerClass() InnerClass {
	_init_.Initialize()

	j := jsiiProxy_InnerClass{}

	_jsii_.Create(
		"jsii-calc.submodule.child.InnerClass",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewInnerClass_Override(i InnerClass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.submodule.child.InnerClass",
		nil, // no parameters
		i,
	)
}

func InnerClass_StaticProp() *SomeStruct {
	_init_.Initialize()
	var returns *SomeStruct
	_jsii_.StaticGet(
		"jsii-calc.submodule.child.InnerClass",
		"staticProp",
		&returns,
	)
	return returns
}

type KwargsProps struct {
	Prop SomeEnum \`json:"prop"\`
	Extra *string \`json:"extra"\`
}

// Checks that classes can self-reference during initialization.
// See: : https://github.com/aws/jsii/pull/1706
//
type OuterClass interface {
	InnerClass() InnerClass
}

// The jsii proxy struct for OuterClass
type jsiiProxy_OuterClass struct {
	_ byte // padding
}

func (j *jsiiProxy_OuterClass) InnerClass() InnerClass {
	var returns InnerClass
	_jsii_.Get(
		j,
		"innerClass",
		&returns,
	)
	return returns
}


func NewOuterClass() OuterClass {
	_init_.Initialize()

	j := jsiiProxy_OuterClass{}

	_jsii_.Create(
		"jsii-calc.submodule.child.OuterClass",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewOuterClass_Override(o OuterClass) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.submodule.child.OuterClass",
		nil, // no parameters
		o,
	)
}

type SomeEnum string

const (
	SomeEnum_SOME SomeEnum = "SOME"
)

type SomeStruct struct {
	Prop SomeEnum \`json:"prop"\`
}

type Structure struct {
	Bool *bool \`json:"bool"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/child/child.init.go 1`] = `
package child

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterEnum(
		"jsii-calc.submodule.child.Awesomeness",
		reflect.TypeOf((*Awesomeness)(nil)).Elem(),
		map[string]interface{}{
			"AWESOME": Awesomeness_AWESOME,
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.submodule.child.Goodness",
		reflect.TypeOf((*Goodness)(nil)).Elem(),
		map[string]interface{}{
			"PRETTY_GOOD": Goodness_PRETTY_GOOD,
			"REALLY_GOOD": Goodness_REALLY_GOOD,
			"AMAZINGLY_GOOD": Goodness_AMAZINGLY_GOOD,
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.submodule.child.InnerClass",
		reflect.TypeOf((*InnerClass)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_InnerClass{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.submodule.child.KwargsProps",
		reflect.TypeOf((*KwargsProps)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.submodule.child.OuterClass",
		reflect.TypeOf((*OuterClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "innerClass", GoGetter: "InnerClass"},
		},
		func() interface{} {
			return &jsiiProxy_OuterClass{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.submodule.child.SomeEnum",
		reflect.TypeOf((*SomeEnum)(nil)).Elem(),
		map[string]interface{}{
			"SOME": SomeEnum_SOME,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.submodule.child.SomeStruct",
		reflect.TypeOf((*SomeStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.submodule.child.Structure",
		reflect.TypeOf((*Structure)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/internal/types.go 1`] = `
package internal
import (
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/nestedsubmodule/deeplynested"
)
type Type__deeplynestedINamespaced = deeplynested.INamespaced

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/isolated/isolated.go 1`] = `
package isolated

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/child"
)

// Ensures imports are correctly registered for kwargs lifted properties from super-structs.
type Kwargs interface {
}

// The jsii proxy struct for Kwargs
type jsiiProxy_Kwargs struct {
	_ byte // padding
}

func Kwargs_Method(props *child.KwargsProps) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"jsii-calc.submodule.isolated.Kwargs",
		"method",
		[]interface{}{props},
		&returns,
	)

	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/isolated/isolated.init.go 1`] = `
package isolated

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.submodule.isolated.Kwargs",
		reflect.TypeOf((*Kwargs)(nil)).Elem(),
		nil, // no members
		func() interface{} {
			return &jsiiProxy_Kwargs{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/deeplynested/deeplynested.go 1`] = `
package deeplynested

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
)

type INamespaced interface {
	DefinedAt() *string
}

// The jsii proxy for INamespaced
type jsiiProxy_INamespaced struct {
	_ byte // padding
}

func (j *jsiiProxy_INamespaced) DefinedAt() *string {
	var returns *string
	_jsii_.Get(
		j,
		"definedAt",
		&returns,
	)
	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/deeplynested/deeplynested.init.go 1`] = `
package deeplynested

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterInterface(
		"jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced",
		reflect.TypeOf((*INamespaced)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "definedAt", GoGetter: "DefinedAt"},
		},
		func() interface{} {
			return &jsiiProxy_INamespaced{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/internal/types.go 1`] = `
package internal
import (
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/nestedsubmodule/deeplynested"
)
type Type__deeplynestedINamespaced = deeplynested.INamespaced

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/nestedsubmodule.go 1`] = `
package nestedsubmodule

import (
	_jsii_ "github.com/aws/jsii-runtime-go"

	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/child"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/nestedsubmodule/deeplynested"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/nestedsubmodule/internal"
)

type Namespaced interface {
	deeplynested.INamespaced
	DefinedAt() *string
	Goodness() child.Goodness
}

// The jsii proxy struct for Namespaced
type jsiiProxy_Namespaced struct {
	internal.Type__deeplynestedINamespaced
}

func (j *jsiiProxy_Namespaced) DefinedAt() *string {
	var returns *string
	_jsii_.Get(
		j,
		"definedAt",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Namespaced) Goodness() child.Goodness {
	var returns child.Goodness
	_jsii_.Get(
		j,
		"goodness",
		&returns,
	)
	return returns
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/nestedsubmodule.init.go 1`] = `
package nestedsubmodule

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.submodule.nested_submodule.Namespaced",
		reflect.TypeOf((*Namespaced)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "definedAt", GoGetter: "DefinedAt"},
			_jsii_.MemberProperty{JsiiProperty: "goodness", GoGetter: "Goodness"},
		},
		func() interface{} {
			j := jsiiProxy_Namespaced{}
			_jsii_.InitJsiiProxy(&j.Type__deeplynestedINamespaced)
			return &j
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/param/param.go 1`] = `
package param


type SpecialParameter struct {
	Value *string \`json:"value"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/param/param.init.go 1`] = `
package param

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterStruct(
		"jsii-calc.submodule.param.SpecialParameter",
		reflect.TypeOf((*SpecialParameter)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/returnsparam/returnsparam.go 1`] = `
package returnsparam

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/param"
)

type ReturnsSpecialParameter interface {
	ReturnsSpecialParam() *param.SpecialParameter
}

// The jsii proxy struct for ReturnsSpecialParameter
type jsiiProxy_ReturnsSpecialParameter struct {
	_ byte // padding
}

func NewReturnsSpecialParameter() ReturnsSpecialParameter {
	_init_.Initialize()

	j := jsiiProxy_ReturnsSpecialParameter{}

	_jsii_.Create(
		"jsii-calc.submodule.returnsparam.ReturnsSpecialParameter",
		nil, // no parameters
		&j,
	)

	return &j
}

func NewReturnsSpecialParameter_Override(r ReturnsSpecialParameter) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.submodule.returnsparam.ReturnsSpecialParameter",
		nil, // no parameters
		r,
	)
}

func (r *jsiiProxy_ReturnsSpecialParameter) ReturnsSpecialParam() *param.SpecialParameter {
	var returns *param.SpecialParameter

	_jsii_.Invoke(
		r,
		"returnsSpecialParam",
		nil, // no parameters
		&returns,
	)

	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/returnsparam/returnsparam.init.go 1`] = `
package returnsparam

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.submodule.returnsparam.ReturnsSpecialParameter",
		reflect.TypeOf((*ReturnsSpecialParameter)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberMethod{JsiiMethod: "returnsSpecialParam", GoMethod: "ReturnsSpecialParam"},
		},
		func() interface{} {
			return &jsiiProxy_ReturnsSpecialParameter{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/submodule.go 1`] = `
package submodule

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/child"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/internal"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/nestedsubmodule/deeplynested"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/param"
)

// A struct named "Default".
// See: https://github.com/aws/jsii/issues/2637
//
type Default struct {
	Foo *float64 \`json:"foo"\`
}

type MyClass interface {
	deeplynested.INamespaced
	AllTypes() jsiicalc.AllTypes
	SetAllTypes(val jsiicalc.AllTypes)
	Awesomeness() child.Awesomeness
	DefinedAt() *string
	Goodness() child.Goodness
	Props() *child.SomeStruct
	MethodWithSpecialParam(param *param.SpecialParameter) *string
}

// The jsii proxy struct for MyClass
type jsiiProxy_MyClass struct {
	internal.Type__deeplynestedINamespaced
}

func (j *jsiiProxy_MyClass) AllTypes() jsiicalc.AllTypes {
	var returns jsiicalc.AllTypes
	_jsii_.Get(
		j,
		"allTypes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MyClass) Awesomeness() child.Awesomeness {
	var returns child.Awesomeness
	_jsii_.Get(
		j,
		"awesomeness",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MyClass) DefinedAt() *string {
	var returns *string
	_jsii_.Get(
		j,
		"definedAt",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MyClass) Goodness() child.Goodness {
	var returns child.Goodness
	_jsii_.Get(
		j,
		"goodness",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MyClass) Props() *child.SomeStruct {
	var returns *child.SomeStruct
	_jsii_.Get(
		j,
		"props",
		&returns,
	)
	return returns
}


func NewMyClass(props *child.SomeStruct) MyClass {
	_init_.Initialize()

	j := jsiiProxy_MyClass{}

	_jsii_.Create(
		"jsii-calc.submodule.MyClass",
		[]interface{}{props},
		&j,
	)

	return &j
}

func NewMyClass_Override(m MyClass, props *child.SomeStruct) {
	_init_.Initialize()

	_jsii_.Create(
		"jsii-calc.submodule.MyClass",
		[]interface{}{props},
		m,
	)
}

func (j *jsiiProxy_MyClass) SetAllTypes(val jsiicalc.AllTypes) {
	_jsii_.Set(
		j,
		"allTypes",
		val,
	)
}

func (m *jsiiProxy_MyClass) MethodWithSpecialParam(param *param.SpecialParameter) *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"methodWithSpecialParam",
		[]interface{}{param},
		&returns,
	)

	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/submodule.init.go 1`] = `
package submodule

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterStruct(
		"jsii-calc.submodule.Default",
		reflect.TypeOf((*Default)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.submodule.MyClass",
		reflect.TypeOf((*MyClass)(nil)).Elem(),
		[]_jsii_.Member{
			_jsii_.MemberProperty{JsiiProperty: "allTypes", GoGetter: "AllTypes"},
			_jsii_.MemberProperty{JsiiProperty: "awesomeness", GoGetter: "Awesomeness"},
			_jsii_.MemberProperty{JsiiProperty: "definedAt", GoGetter: "DefinedAt"},
			_jsii_.MemberProperty{JsiiProperty: "goodness", GoGetter: "Goodness"},
			_jsii_.MemberMethod{JsiiMethod: "methodWithSpecialParam", GoMethod: "MethodWithSpecialParam"},
			_jsii_.MemberProperty{JsiiProperty: "props", GoGetter: "Props"},
		},
		func() interface{} {
			j := jsiiProxy_MyClass{}
			_jsii_.InitJsiiProxy(&j.Type__deeplynestedINamespaced)
			return &j
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/version 1`] = `
3.20.120

`;
