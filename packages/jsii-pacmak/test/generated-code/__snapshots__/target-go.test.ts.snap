// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ go
    ‚îó‚îÅ üìÅ scopejsiicalcbase
       ‚î£‚îÅ üìÑ go.mod
       ‚î£‚îÅ üìÅ jsii
       ‚îÉ  ‚î£‚îÅ üìÑ jsii.go
       ‚îÉ  ‚îó‚îÅ üìÑ scope-jsii-calc-base-0.0.0.tgz
       ‚î£‚îÅ üìÑ LICENSE
       ‚î£‚îÅ üìÑ NOTICE
       ‚î£‚îÅ üìÑ scopejsiicalcbase.go
       ‚î£‚îÅ üìÑ scopejsiicalcbase.init.go
       ‚îó‚îÅ üìÑ version
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/go.mod 1`] = `
module github.com/aws/jsii/jsii-calc/go/scopejsiicalcbase

go 1.16

require (
	github.com/aws/jsii-runtime-go v0.0.0
	github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2 v2.1.1
)

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/jsii/jsii.go 1`] = `
package jsii

import (
	_                       "embed"
	"sync"

	_jsii_                  "github.com/aws/jsii-runtime-go"

	scopejsiicalcbaseofbase "github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2/jsii"
)

//go:embed scope-jsii-calc-base-0.0.0.tgz
var tarball []byte
var once    sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Ensure all dependencies are initialized
		scopejsiicalcbaseofbase.Initialize()

		// Load this library into the kernel
		_jsii_.Load("@scope/jsii-calc-base", "0.0.0", tarball)
	})
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/jsii/scope-jsii-calc-base-0.0.0.tgz 1`] = `go/scopejsiicalcbase/jsii/scope-jsii-calc-base-0.0.0.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/scopejsiicalcbase.go 1`] = `
// An example direct dependency for jsii-calc.
package scopejsiicalcbase

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/scopejsiicalcbase/jsii"

	"github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2"
)

// A base class.
type Base interface {
	TypeName() interface{}
}

// The jsii proxy struct for Base
type base struct {
	_ byte // padding
}

func NewBase() Base {
	_init_.Initialize()
	b := base{}

	_jsii_.Create(
		"@scope/jsii-calc-base.Base",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&b,
	)
	return &b
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (b *base) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		b,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type BaseProps struct {
	Foo scopejsiicalcbaseofbase.Very \`json:"foo"\`
	Bar string \`json:"bar"\`
}

// ToVeryBaseProps is a convenience function to obtain a new scopejsiicalcbaseofbase.VeryBaseProps from this BaseProps.
func (b *BaseProps) ToVeryBaseProps() scopejsiicalcbaseofbase.VeryBaseProps {
	return scopejsiicalcbaseofbase.VeryBaseProps {
		Foo: b.Foo,
	}
}

type IBaseInterface interface {
	scopejsiicalcbaseofbase.IVeryBaseInterface
	Bar()
}

// The jsii proxy for IBaseInterface
type iBaseInterface struct {
	scopejsiicalcbaseofbase.IVeryBaseInterface // extends @scope/jsii-calc-base-of-base.IVeryBaseInterface
}

func (i *iBaseInterface) Bar() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"bar",
		[]interface{}{},
		false,
		&returns,
	)
}

// Hides the transitive dependency of base-of-base.
type StaticConsumer interface {
}

// The jsii proxy struct for StaticConsumer
type staticConsumer struct {
	_ byte // padding
}

func NewStaticConsumer() StaticConsumer {
	_init_.Initialize()
	s := staticConsumer{}

	_jsii_.Create(
		"@scope/jsii-calc-base.StaticConsumer",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

func StaticConsumer_Consume(args interface{}) {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"@scope/jsii-calc-base.StaticConsumer",
		"consume",
		[]interface{}{args},
		false,
		&returns,
	)
}


`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/scopejsiicalcbase.init.go 1`] = `
package scopejsiicalcbase

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"@scope/jsii-calc-base.Base",
		reflect.TypeOf((*Base)(nil)).Elem(),
		func() interface{} {
			return &base{}
		},
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-base.BaseProps",
		reflect.TypeOf((*BaseProps)(nil)).Elem(),
	)
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-base.IBaseInterface",
		reflect.TypeOf((*IBaseInterface)(nil)).Elem(),
		func() interface{} {
			i := iBaseInterface{}
			_jsii_.InitJsiiProxy(&i.IVeryBaseInterface)
			return &i
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-base.StaticConsumer",
		reflect.TypeOf((*StaticConsumer)(nil)).Elem(),
		func() interface{} {
			return &staticConsumer{}
		},
	)
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/version 1`] = `
0.0.0

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ go
    ‚îó‚îÅ üìÅ scopejsiicalcbaseofbase
       ‚î£‚îÅ üìÑ go.mod
       ‚î£‚îÅ üìÅ jsii
       ‚îÉ  ‚î£‚îÅ üìÑ jsii.go
       ‚îÉ  ‚îó‚îÅ üìÑ scope-jsii-calc-base-of-base-2.1.1.tgz
       ‚î£‚îÅ üìÑ LICENSE
       ‚î£‚îÅ üìÑ NOTICE
       ‚î£‚îÅ üìÑ scopejsiicalcbaseofbase.go
       ‚î£‚îÅ üìÑ scopejsiicalcbaseofbase.init.go
       ‚îó‚îÅ üìÑ version
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/go.mod 1`] = `
module github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2

go 1.16

require (
	github.com/aws/jsii-runtime-go v0.0.0
)

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/jsii/jsii.go 1`] = `
package jsii

import (
	_      "embed"
	"sync"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

//go:embed scope-jsii-calc-base-of-base-2.1.1.tgz
var tarball []byte
var once    sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Load this library into the kernel
		_jsii_.Load("@scope/jsii-calc-base-of-base", "2.1.1", tarball)
	})
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/jsii/scope-jsii-calc-base-of-base-2.1.1.tgz 1`] = `go/scopejsiicalcbaseofbase/jsii/scope-jsii-calc-base-of-base-2.1.1.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/scopejsiicalcbaseofbase.go 1`] = `
// An example transitive dependency for jsii-calc.
package scopejsiicalcbaseofbase

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2/jsii"
)

type IVeryBaseInterface interface {
	Foo()
}

// The jsii proxy for IVeryBaseInterface
type iVeryBaseInterface struct {
	_ byte // padding
}

func (i *iVeryBaseInterface) Foo() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"foo",
		[]interface{}{},
		false,
		&returns,
	)
}

type StaticConsumer interface {
}

// The jsii proxy struct for StaticConsumer
type staticConsumer struct {
	_ byte // padding
}

func StaticConsumer_Consume(_args interface{}) {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"@scope/jsii-calc-base-of-base.StaticConsumer",
		"consume",
		[]interface{}{_args},
		false,
		&returns,
	)
}

// Something here.
// Experimental.
type Very interface {
	Hey() float64
}

// The jsii proxy struct for Very
type very struct {
	_ byte // padding
}

func NewVery() Very {
	_init_.Initialize()
	v := very{}

	_jsii_.Create(
		"@scope/jsii-calc-base-of-base.Very",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&v,
	)
	return &v
}

// Experimental.
func (v *very) Hey() float64 {
	var returns float64
	_jsii_.Invoke(
		v,
		"hey",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type VeryBaseProps struct {
	Foo Very \`json:"foo"\`
}


`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/scopejsiicalcbaseofbase.init.go 1`] = `
package scopejsiicalcbaseofbase

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-base-of-base.IVeryBaseInterface",
		reflect.TypeOf((*IVeryBaseInterface)(nil)).Elem(),
		func() interface{} {
			return &iVeryBaseInterface{}
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-base-of-base.StaticConsumer",
		reflect.TypeOf((*StaticConsumer)(nil)).Elem(),
		func() interface{} {
			return &staticConsumer{}
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-base-of-base.Very",
		reflect.TypeOf((*Very)(nil)).Elem(),
		func() interface{} {
			return &very{}
		},
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-base-of-base.VeryBaseProps",
		reflect.TypeOf((*VeryBaseProps)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/version 1`] = `
2.1.1

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ go
    ‚îó‚îÅ üìÅ scopejsiicalclib
       ‚î£‚îÅ üìÑ go.mod
       ‚î£‚îÅ üìÅ jsii
       ‚îÉ  ‚î£‚îÅ üìÑ jsii.go
       ‚îÉ  ‚îó‚îÅ üìÑ scope-jsii-calc-lib-0.0.0.tgz
       ‚î£‚îÅ üìÑ LICENSE
       ‚î£‚îÅ üìÑ NOTICE
       ‚î£‚îÅ üìÑ scopejsiicalclib.go
       ‚î£‚îÅ üìÑ scopejsiicalclib.init.go
       ‚î£‚îÅ üìÅ submodule
       ‚îÉ  ‚î£‚îÅ üìÑ submodule.go
       ‚îÉ  ‚îó‚îÅ üìÑ submodule.init.go
       ‚îó‚îÅ üìÑ version
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/go.mod 1`] = `
module github.com/aws/jsii/jsii-calc/go/scopejsiicalclib

go 1.16

require (
	github.com/aws/jsii-runtime-go v0.0.0
	github.com/aws/jsii/jsii-calc/go/scopejsiicalcbase v0.0.0
	github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2 v2.1.1
)

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/jsii/jsii.go 1`] = `
package jsii

import (
	_                       "embed"
	"sync"

	_jsii_                  "github.com/aws/jsii-runtime-go"

	scopejsiicalcbase       "github.com/aws/jsii/jsii-calc/go/scopejsiicalcbase/jsii"
	scopejsiicalcbaseofbase "github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2/jsii"
)

//go:embed scope-jsii-calc-lib-0.0.0.tgz
var tarball []byte
var once    sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Ensure all dependencies are initialized
		scopejsiicalcbase.Initialize()
		scopejsiicalcbaseofbase.Initialize()

		// Load this library into the kernel
		_jsii_.Load("@scope/jsii-calc-lib", "0.0.0", tarball)
	})
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/jsii/scope-jsii-calc-lib-0.0.0.tgz 1`] = `go/scopejsiicalclib/jsii/scope-jsii-calc-lib-0.0.0.tgz is a tarball`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/scopejsiicalclib.go 1`] = `
// A simple calcuator library built on JSII.
package scopejsiicalclib

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/scopejsiicalclib/jsii"

	"github.com/aws/jsii/jsii-calc/go/scopejsiicalcbase"
)

// Deprecated.
type DiamondLeft struct {
	// Deprecated.
	HoistedTop string \`json:"hoistedTop"\`
	// Deprecated.
	Left float64 \`json:"left"\`
}

// Deprecated.
type DiamondRight struct {
	// Deprecated.
	HoistedTop string \`json:"hoistedTop"\`
	// Deprecated.
	Right bool \`json:"right"\`
}

// Check that enums from \\@scoped packages can be references.
//
// See awslabs/jsii#138
// Deprecated.
type EnumFromScopedModule string

const (
	EnumFromScopedModule_VALUE1 EnumFromScopedModule = "VALUE1"
	EnumFromScopedModule_VALUE2 EnumFromScopedModule = "VALUE2"
)

// The general contract for a concrete number.
// Deprecated.
type IDoublable interface {
	// Deprecated.
	DoubleValue() float64
}

// The jsii proxy for IDoublable
type iDoublable struct {
	_ byte // padding
}

func (i *iDoublable) DoubleValue() float64 {
	var returns float64
	_jsii_.Get(
		i,
		"doubleValue",
		&returns,
	)
	return returns
}

// Applies to classes that are considered friendly.
//
// These classes can be greeted with
// a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.
// Deprecated.
type IFriendly interface {
	// Say hello!
	// Deprecated.
	Hello() string
}

// The jsii proxy for IFriendly
type iFriendly struct {
	_ byte // padding
}

func (i *iFriendly) Hello() string {
	var returns string
	_jsii_.Invoke(
		i,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Interface that inherits from packages 2 levels up the tree.
//
// Their presence validates that .NET/Java/jsii-reflect can track all fields
// far enough up the tree.
// Deprecated.
type IThreeLevelsInterface interface {
	scopejsiicalcbase.IBaseInterface
	// Deprecated.
	Baz()
}

// The jsii proxy for IThreeLevelsInterface
type iThreeLevelsInterface struct {
	scopejsiicalcbase.IBaseInterface // extends @scope/jsii-calc-base.IBaseInterface
}

func (i *iThreeLevelsInterface) Baz() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"baz",
		[]interface{}{},
		false,
		&returns,
	)
}

// This is the first struct we have created in jsii.
// Deprecated.
type MyFirstStruct struct {
	// An awesome number value.
	// Deprecated.
	Anumber float64 \`json:"anumber"\`
	// A string value.
	// Deprecated.
	Astring string \`json:"astring"\`
	// Deprecated.
	FirstOptional []string \`json:"firstOptional"\`
}

// Represents a concrete number.
// Deprecated.
type Number interface {
	NumericValue
	IDoublable
	DoubleValue() float64
	Value() float64
}

// The jsii proxy struct for Number
type number struct {
	numericValue // extends @scope/jsii-calc-lib.NumericValue
	iDoublable // implements @scope/jsii-calc-lib.IDoublable
}

func (n *number) DoubleValue() float64 {
	var returns float64
	_jsii_.Get(
		n,
		"doubleValue",
		&returns,
	)
	return returns
}

func (n *number) Value() float64 {
	var returns float64
	_jsii_.Get(
		n,
		"value",
		&returns,
	)
	return returns
}


// Creates a Number object.
func NewNumber(value float64) Number {
	_init_.Initialize()
	n := number{}

	_jsii_.Create(
		"@scope/jsii-calc-lib.Number",
		[]interface{}{value},
		[]_jsii_.FQN{"@scope/jsii-calc-lib.IDoublable"},
		[]_jsii_.Override{},
		&n,
	)
	return &n
}

// String representation of the value.
// Deprecated.
func (n *number) ToString() string {
	var returns string
	_jsii_.Invoke(
		n,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
// Deprecated.
func (n *number) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Abstract class which represents a numeric value.
// Deprecated.
type NumericValue interface {
	scopejsiicalcbase.Base
	Value() float64
	ToString() string
}

// The jsii proxy struct for NumericValue
type numericValue struct {
	scopejsiicalcbase.Base // extends @scope/jsii-calc-base.Base
}

func (n *numericValue) Value() float64 {
	var returns float64
	_jsii_.Get(
		n,
		"value",
		&returns,
	)
	return returns
}


func NewNumericValue() NumericValue {
	_init_.Initialize()
	n := numericValue{}

	_jsii_.Create(
		"@scope/jsii-calc-lib.NumericValue",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&n,
	)
	return &n
}

// String representation of the value.
// Deprecated.
func (n *numericValue) ToString() string {
	var returns string
	_jsii_.Invoke(
		n,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Represents an operation on values.
// Deprecated.
type Operation interface {
	NumericValue
	ToString() string
}

// The jsii proxy struct for Operation
type operation struct {
	numericValue // extends @scope/jsii-calc-lib.NumericValue
}

func NewOperation() Operation {
	_init_.Initialize()
	o := operation{}

	_jsii_.Create(
		"@scope/jsii-calc-lib.Operation",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&o,
	)
	return &o
}

// String representation of the value.
// Deprecated.
func (o *operation) ToString() string {
	var returns string
	_jsii_.Invoke(
		o,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// This is a struct with only optional properties.
// Deprecated.
type StructWithOnlyOptionals struct {
	// The first optional!
	// Deprecated.
	Optional1 string \`json:"optional1"\`
	// Deprecated.
	Optional2 float64 \`json:"optional2"\`
	// Deprecated.
	Optional3 bool \`json:"optional3"\`
}


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/scopejsiicalclib.init.go 1`] = `
package scopejsiicalclib

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.DiamondLeft",
		reflect.TypeOf((*DiamondLeft)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.DiamondRight",
		reflect.TypeOf((*DiamondRight)(nil)).Elem(),
	)
	_jsii_.RegisterEnum(
		"@scope/jsii-calc-lib.EnumFromScopedModule",
		reflect.TypeOf((*EnumFromScopedModule)(nil)).Elem(),
		map[string]interface{}{
			"VALUE1": EnumFromScopedModule_VALUE1,
			"VALUE2": EnumFromScopedModule_VALUE2,
		},
	)
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-lib.IDoublable",
		reflect.TypeOf((*IDoublable)(nil)).Elem(),
		func() interface{} {
			return &iDoublable{}
		},
	)
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-lib.IFriendly",
		reflect.TypeOf((*IFriendly)(nil)).Elem(),
		func() interface{} {
			return &iFriendly{}
		},
	)
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-lib.IThreeLevelsInterface",
		reflect.TypeOf((*IThreeLevelsInterface)(nil)).Elem(),
		func() interface{} {
			i := iThreeLevelsInterface{}
			_jsii_.InitJsiiProxy(&i.IBaseInterface)
			return &i
		},
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.MyFirstStruct",
		reflect.TypeOf((*MyFirstStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.Number",
		reflect.TypeOf((*Number)(nil)).Elem(),
		func() interface{} {
			n := number{}
			_jsii_.InitJsiiProxy(&n.numericValue)
			_jsii_.InitJsiiProxy(&n.iDoublable)
			return &n
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.NumericValue",
		reflect.TypeOf((*NumericValue)(nil)).Elem(),
		func() interface{} {
			n := numericValue{}
			_jsii_.InitJsiiProxy(&n.Base)
			return &n
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.Operation",
		reflect.TypeOf((*Operation)(nil)).Elem(),
		func() interface{} {
			o := operation{}
			_jsii_.InitJsiiProxy(&o.numericValue)
			return &o
		},
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.StructWithOnlyOptionals",
		reflect.TypeOf((*StructWithOnlyOptionals)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/submodule/submodule.go 1`] = `
package submodule

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/scopejsiicalclib/jsii"
)

// Deprecated.
type IReflectable interface {
	// Deprecated.
	Entries() []ReflectableEntry
}

// The jsii proxy for IReflectable
type iReflectable struct {
	_ byte // padding
}

func (i *iReflectable) Entries() []ReflectableEntry {
	var returns []ReflectableEntry
	_jsii_.Get(
		i,
		"entries",
		&returns,
	)
	return returns
}

// This class is here to show we can use nested classes across module boundaries.
// Deprecated.
type NestingClass interface {
}

// The jsii proxy struct for NestingClass
type nestingClass struct {
	_ byte // padding
}

// This class is here to show we can use nested classes across module boundaries.
// Deprecated.
type NestedClass interface {
	Property() string
}

// The jsii proxy struct for NestedClass
type nestedClass struct {
	_ byte // padding
}

func (n *nestedClass) Property() string {
	var returns string
	_jsii_.Get(
		n,
		"property",
		&returns,
	)
	return returns
}


func NewNestedClass() NestedClass {
	_init_.Initialize()
	n := nestedClass{}

	_jsii_.Create(
		"@scope/jsii-calc-lib.submodule.NestingClass.NestedClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&n,
	)
	return &n
}

// This is a struct, nested within a class.
//
// Normal.
// Deprecated.
type NestedStruct struct {
	// Deprecated.
	Name string \`json:"name"\`
}

// Deprecated.
type ReflectableEntry struct {
	// Deprecated.
	Key string \`json:"key"\`
	// Deprecated.
	Value interface{} \`json:"value"\`
}

// Deprecated.
type Reflector interface {
	AsMap(reflectable IReflectable) map[string]interface{}
}

// The jsii proxy struct for Reflector
type reflector struct {
	_ byte // padding
}

func NewReflector() Reflector {
	_init_.Initialize()
	r := reflector{}

	_jsii_.Create(
		"@scope/jsii-calc-lib.submodule.Reflector",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&r,
	)
	return &r
}

// Deprecated.
func (r *reflector) AsMap(reflectable IReflectable) map[string]interface{} {
	var returns map[string]interface{}
	_jsii_.Invoke(
		r,
		"asMap",
		[]interface{}{reflectable},
		true,
		&returns,
	)
	return returns
}


`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/submodule/submodule.init.go 1`] = `
package submodule

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterInterface(
		"@scope/jsii-calc-lib.submodule.IReflectable",
		reflect.TypeOf((*IReflectable)(nil)).Elem(),
		func() interface{} {
			return &iReflectable{}
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.submodule.NestingClass",
		reflect.TypeOf((*NestingClass)(nil)).Elem(),
		func() interface{} {
			return &nestingClass{}
		},
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.submodule.NestingClass.NestedClass",
		reflect.TypeOf((*NestedClass)(nil)).Elem(),
		func() interface{} {
			return &nestedClass{}
		},
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.submodule.NestingClass.NestedStruct",
		reflect.TypeOf((*NestedStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"@scope/jsii-calc-lib.submodule.ReflectableEntry",
		reflect.TypeOf((*ReflectableEntry)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"@scope/jsii-calc-lib.submodule.Reflector",
		reflect.TypeOf((*Reflector)(nil)).Elem(),
		func() interface{} {
			return &reflector{}
		},
	)
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/version 1`] = `
0.0.0

`;

exports[`Generated code for "jsii-calc": <outDir>/ 1`] = `
<root>
 ‚îó‚îÅ üìÅ go
    ‚îó‚îÅ üìÅ jsiicalc
       ‚î£‚îÅ üìÅ composition
       ‚îÉ  ‚î£‚îÅ üìÑ composition.go
       ‚îÉ  ‚îó‚îÅ üìÑ composition.init.go
       ‚î£‚îÅ üìÅ derivedclasshasnoproperties
       ‚îÉ  ‚î£‚îÅ üìÑ derivedclasshasnoproperties.go
       ‚îÉ  ‚îó‚îÅ üìÑ derivedclasshasnoproperties.init.go
       ‚î£‚îÅ üìÑ go.mod
       ‚î£‚îÅ üìÅ interfaceinnamespaceincludesclasses
       ‚îÉ  ‚î£‚îÅ üìÑ interfaceinnamespaceincludesclasses.go
       ‚îÉ  ‚îó‚îÅ üìÑ interfaceinnamespaceincludesclasses.init.go
       ‚î£‚îÅ üìÅ interfaceinnamespaceonlyinterface
       ‚îÉ  ‚î£‚îÅ üìÑ interfaceinnamespaceonlyinterface.go
       ‚îÉ  ‚îó‚îÅ üìÑ interfaceinnamespaceonlyinterface.init.go
       ‚î£‚îÅ üìÅ jsii
       ‚îÉ  ‚î£‚îÅ üìÑ jsii-calc-3.20.120.tgz
       ‚îÉ  ‚îó‚îÅ üìÑ jsii.go
       ‚î£‚îÅ üìÑ jsiicalc.go
       ‚î£‚îÅ üìÑ jsiicalc.init.go
       ‚î£‚îÅ üìÑ LICENSE
       ‚î£‚îÅ üìÑ NOTICE
       ‚î£‚îÅ üìÅ pythonself
       ‚îÉ  ‚î£‚îÅ üìÑ pythonself.go
       ‚îÉ  ‚îó‚îÅ üìÑ pythonself.init.go
       ‚î£‚îÅ üìÑ README.md
       ‚î£‚îÅ üìÅ submodule
       ‚îÉ  ‚î£‚îÅ üìÅ backreferences
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ backreferences.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ backreferences.init.go
       ‚îÉ  ‚î£‚îÅ üìÅ child
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ child.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ child.init.go
       ‚îÉ  ‚î£‚îÅ üìÅ isolated
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ isolated.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ isolated.init.go
       ‚îÉ  ‚î£‚îÅ üìÅ nestedsubmodule
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÅ deeplynested
       ‚îÉ  ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ deeplynested.go
       ‚îÉ  ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ deeplynested.init.go
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ nestedsubmodule.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ nestedsubmodule.init.go
       ‚îÉ  ‚î£‚îÅ üìÅ param
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ param.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ param.init.go
       ‚îÉ  ‚î£‚îÅ üìÅ returnsparam
       ‚îÉ  ‚îÉ  ‚î£‚îÅ üìÑ returnsparam.go
       ‚îÉ  ‚îÉ  ‚îó‚îÅ üìÑ returnsparam.init.go
       ‚îÉ  ‚î£‚îÅ üìÑ submodule.go
       ‚îÉ  ‚îó‚îÅ üìÑ submodule.init.go
       ‚îó‚îÅ üìÑ version
`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/LICENSE 1`] = `

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/NOTICE 1`] = `
jsii
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/README.md 1`] = `
# jsii Calculator

This library is used to demonstrate and test the features of JSII

## How to use running sum API:

First, create a calculator:

\`\`\`ts
const calculator = new calc.Calculator();
\`\`\`

Then call some operations:


\`\`\`ts fixture=with-calculator
calculator.add(10);
\`\`\`

## Code Samples

\`\`\`ts
/* This is totes a magic comment in here, just you wait! */
const foo = 'bar';
\`\`\`


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/composition/composition.go 1`] = `
package composition

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
)

// Abstract operation composed from an expression of other operations.
type CompositeOperation interface {
	scopejsiicalclib.Operation
	DecorationPostfixes() []string
	SetDecorationPostfixes(val []string)
	DecorationPrefixes() []string
	SetDecorationPrefixes(val []string)
	Expression() scopejsiicalclib.NumericValue
	StringStyle() CompositionStringStyle
	SetStringStyle(val CompositionStringStyle)
	Value() float64
	ToString() string
}

// The jsii proxy struct for CompositeOperation
type compositeOperation struct {
	scopejsiicalclib.Operation // extends @scope/jsii-calc-lib.Operation
}

func (c *compositeOperation) DecorationPostfixes() []string {
	var returns []string
	_jsii_.Get(
		c,
		"decorationPostfixes",
		&returns,
	)
	return returns
}

func (c *compositeOperation) DecorationPrefixes() []string {
	var returns []string
	_jsii_.Get(
		c,
		"decorationPrefixes",
		&returns,
	)
	return returns
}

func (c *compositeOperation) Expression() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		c,
		"expression",
		&returns,
	)
	return returns
}

func (c *compositeOperation) StringStyle() CompositionStringStyle {
	var returns CompositionStringStyle
	_jsii_.Get(
		c,
		"stringStyle",
		&returns,
	)
	return returns
}

func (c *compositeOperation) Value() float64 {
	var returns float64
	_jsii_.Get(
		c,
		"value",
		&returns,
	)
	return returns
}


func NewCompositeOperation() CompositeOperation {
	_init_.Initialize()
	c := compositeOperation{}

	_jsii_.Create(
		"jsii-calc.composition.CompositeOperation",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

func (c *compositeOperation) SetDecorationPostfixes(val []string) {
	_jsii_.Set(
		c,
		"decorationPostfixes",
		val,
	)
}

func (c *compositeOperation) SetDecorationPrefixes(val []string) {
	_jsii_.Set(
		c,
		"decorationPrefixes",
		val,
	)
}

func (c *compositeOperation) SetStringStyle(val CompositionStringStyle) {
	_jsii_.Set(
		c,
		"stringStyle",
		val,
	)
}

// (deprecated) String representation of the value.
func (c *compositeOperation) ToString() string {
	var returns string
	_jsii_.Invoke(
		c,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Style of .toString() output for CompositeOperation.
type CompositionStringStyle string

const (
	CompositionStringStyle_NORMAL CompositionStringStyle = "NORMAL"
	CompositionStringStyle_DECORATED CompositionStringStyle = "DECORATED"
)


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/composition/composition.init.go 1`] = `
package composition

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.composition.CompositeOperation",
		reflect.TypeOf((*CompositeOperation)(nil)).Elem(),
		func() interface{} {
			c := compositeOperation{}
			_jsii_.InitJsiiProxy(&c.Operation)
			return &c
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.composition.CompositeOperation.CompositionStringStyle",
		reflect.TypeOf((*CompositionStringStyle)(nil)).Elem(),
		map[string]interface{}{
			"NORMAL": CompositionStringStyle_NORMAL,
			"DECORATED": CompositionStringStyle_DECORATED,
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/derivedclasshasnoproperties/derivedclasshasnoproperties.go 1`] = `
package derivedclasshasnoproperties

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type Base interface {
	Prop() string
	SetProp(val string)
}

// The jsii proxy struct for Base
type base struct {
	_ byte // padding
}

func (b *base) Prop() string {
	var returns string
	_jsii_.Get(
		b,
		"prop",
		&returns,
	)
	return returns
}


func NewBase() Base {
	_init_.Initialize()
	b := base{}

	_jsii_.Create(
		"jsii-calc.DerivedClassHasNoProperties.Base",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&b,
	)
	return &b
}

func (b *base) SetProp(val string) {
	_jsii_.Set(
		b,
		"prop",
		val,
	)
}

type Derived interface {
	Base
}

// The jsii proxy struct for Derived
type derived struct {
	base // extends jsii-calc.DerivedClassHasNoProperties.Base
}

func NewDerived() Derived {
	_init_.Initialize()
	d := derived{}

	_jsii_.Create(
		"jsii-calc.DerivedClassHasNoProperties.Derived",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/derivedclasshasnoproperties/derivedclasshasnoproperties.init.go 1`] = `
package derivedclasshasnoproperties

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.DerivedClassHasNoProperties.Base",
		reflect.TypeOf((*Base)(nil)).Elem(),
		func() interface{} {
			return &base{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DerivedClassHasNoProperties.Derived",
		reflect.TypeOf((*Derived)(nil)).Elem(),
		func() interface{} {
			d := derived{}
			_jsii_.InitJsiiProxy(&d.base)
			return &d
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/go.mod 1`] = `
module github.com/aws/jsii/jsii-calc/go/jsiicalc/v3

go 1.16

require (
	github.com/aws/jsii-runtime-go v0.0.0
	github.com/aws/jsii/jsii-calc/go/scopejsiicalcbase v0.0.0
	github.com/aws/jsii/jsii-calc/go/scopejsiicalclib v0.0.0
	github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2 v2.1.1 // indirect
)

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceincludesclasses/interfaceinnamespaceincludesclasses.go 1`] = `
package interfaceinnamespaceincludesclasses

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type Foo interface {
	Bar() string
	SetBar(val string)
}

// The jsii proxy struct for Foo
type foo struct {
	_ byte // padding
}

func (f *foo) Bar() string {
	var returns string
	_jsii_.Get(
		f,
		"bar",
		&returns,
	)
	return returns
}


func NewFoo() Foo {
	_init_.Initialize()
	f := foo{}

	_jsii_.Create(
		"jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&f,
	)
	return &f
}

func (f *foo) SetBar(val string) {
	_jsii_.Set(
		f,
		"bar",
		val,
	)
}

type Hello struct {
	Foo float64 \`json:"foo"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceincludesclasses/interfaceinnamespaceincludesclasses.init.go 1`] = `
package interfaceinnamespaceincludesclasses

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
		reflect.TypeOf((*Foo)(nil)).Elem(),
		func() interface{} {
			return &foo{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.InterfaceInNamespaceIncludesClasses.Hello",
		reflect.TypeOf((*Hello)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceonlyinterface/interfaceinnamespaceonlyinterface.go 1`] = `
package interfaceinnamespaceonlyinterface


type Hello struct {
	Foo float64 \`json:"foo"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceonlyinterface/interfaceinnamespaceonlyinterface.init.go 1`] = `
package interfaceinnamespaceonlyinterface

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterStruct(
		"jsii-calc.InterfaceInNamespaceOnlyInterface.Hello",
		reflect.TypeOf((*Hello)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsii/jsii.go 1`] = `
package jsii

import (
	_                 "embed"
	"sync"

	_jsii_            "github.com/aws/jsii-runtime-go"

	scopejsiicalcbase "github.com/aws/jsii/jsii-calc/go/scopejsiicalcbase/jsii"
	scopejsiicalclib  "github.com/aws/jsii/jsii-calc/go/scopejsiicalclib/jsii"
)

//go:embed jsii-calc-3.20.120.tgz
var tarball []byte
var once    sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Ensure all dependencies are initialized
		scopejsiicalcbase.Initialize()
		scopejsiicalclib.Initialize()

		// Load this library into the kernel
		_jsii_.Load("jsii-calc", "3.20.120", tarball)
	})
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsii/jsii-calc-3.20.120.tgz 1`] = `go/jsiicalc/jsii/jsii-calc-3.20.120.tgz is a tarball`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsiicalc.go 1`] = `
// A simple calcuator built on JSII.
package jsiicalc

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/composition"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalcbase"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalcbaseofbase/v2"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib"
	"github.com/aws/jsii/jsii-calc/go/scopejsiicalclib/submodule"
)

type AbstractClass interface {
	AbstractClassBase
	IInterfaceImplementedByAbstractClass
	PropFromInterface() string
	AbstractMethod(name string) string
	NonAbstractMethod() float64
}

// The jsii proxy struct for AbstractClass
type abstractClass struct {
	abstractClassBase // extends jsii-calc.AbstractClassBase
	iInterfaceImplementedByAbstractClass // implements jsii-calc.IInterfaceImplementedByAbstractClass
}

func (a *abstractClass) PropFromInterface() string {
	var returns string
	_jsii_.Get(
		a,
		"propFromInterface",
		&returns,
	)
	return returns
}


func NewAbstractClass() AbstractClass {
	_init_.Initialize()
	a := abstractClass{}

	_jsii_.Create(
		"jsii-calc.AbstractClass",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IInterfaceImplementedByAbstractClass"},
		[]_jsii_.Override{},
		&a,
	)
	return &a
}

func (a *abstractClass) AbstractMethod(name string) string {
	var returns string
	_jsii_.Invoke(
		a,
		"abstractMethod",
		[]interface{}{name},
		true,
		&returns,
	)
	return returns
}

func (a *abstractClass) NonAbstractMethod() float64 {
	var returns float64
	_jsii_.Invoke(
		a,
		"nonAbstractMethod",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type AbstractClassBase interface {
	AbstractProperty() string
}

// The jsii proxy struct for AbstractClassBase
type abstractClassBase struct {
	_ byte // padding
}

func (a *abstractClassBase) AbstractProperty() string {
	var returns string
	_jsii_.Get(
		a,
		"abstractProperty",
		&returns,
	)
	return returns
}


func NewAbstractClassBase() AbstractClassBase {
	_init_.Initialize()
	a := abstractClassBase{}

	_jsii_.Create(
		"jsii-calc.AbstractClassBase",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&a,
	)
	return &a
}

type AbstractClassReturner interface {
	ReturnAbstractFromProperty() AbstractClassBase
	GiveMeAbstract() AbstractClass
	GiveMeInterface() IInterfaceImplementedByAbstractClass
}

// The jsii proxy struct for AbstractClassReturner
type abstractClassReturner struct {
	_ byte // padding
}

func (a *abstractClassReturner) ReturnAbstractFromProperty() AbstractClassBase {
	var returns AbstractClassBase
	_jsii_.Get(
		a,
		"returnAbstractFromProperty",
		&returns,
	)
	return returns
}


func NewAbstractClassReturner() AbstractClassReturner {
	_init_.Initialize()
	a := abstractClassReturner{}

	_jsii_.Create(
		"jsii-calc.AbstractClassReturner",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&a,
	)
	return &a
}

func (a *abstractClassReturner) GiveMeAbstract() AbstractClass {
	var returns AbstractClass
	_jsii_.Invoke(
		a,
		"giveMeAbstract",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *abstractClassReturner) GiveMeInterface() IInterfaceImplementedByAbstractClass {
	var returns IInterfaceImplementedByAbstractClass
	_jsii_.Invoke(
		a,
		"giveMeInterface",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Ensures abstract members implementations correctly register overrides in various languages.
type AbstractSuite interface {
	Property() string
	SomeMethod(str string) string
	WorkItAll(seed string) string
}

// The jsii proxy struct for AbstractSuite
type abstractSuite struct {
	_ byte // padding
}

func (a *abstractSuite) Property() string {
	var returns string
	_jsii_.Get(
		a,
		"property",
		&returns,
	)
	return returns
}


func NewAbstractSuite() AbstractSuite {
	_init_.Initialize()
	a := abstractSuite{}

	_jsii_.Create(
		"jsii-calc.AbstractSuite",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&a,
	)
	return &a
}

func (a *abstractSuite) SetProperty(val string) {
	_jsii_.Set(
		a,
		"property",
		val,
	)
}

func (a *abstractSuite) SomeMethod(str string) string {
	var returns string
	_jsii_.Invoke(
		a,
		"someMethod",
		[]interface{}{str},
		true,
		&returns,
	)
	return returns
}

// Sets \`seed\` to \`this.property\`, then calls \`someMethod\` with \`this.property\` and returns the result.
func (a *abstractSuite) WorkItAll(seed string) string {
	var returns string
	_jsii_.Invoke(
		a,
		"workItAll",
		[]interface{}{seed},
		true,
		&returns,
	)
	return returns
}

// The "+" binary operation.
type Add interface {
	BinaryOperation
	Value() float64
	ToString() string
}

// The jsii proxy struct for Add
type add struct {
	binaryOperation // extends jsii-calc.BinaryOperation
}

func (a *add) Value() float64 {
	var returns float64
	_jsii_.Get(
		a,
		"value",
		&returns,
	)
	return returns
}


// Creates a BinaryOperation.
func NewAdd(lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) Add {
	_init_.Initialize()
	a := add{}

	_jsii_.Create(
		"jsii-calc.Add",
		[]interface{}{lhs, rhs},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&a,
	)
	return &a
}

// (deprecated) String representation of the value.
func (a *add) ToString() string {
	var returns string
	_jsii_.Invoke(
		a,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// This class includes property for all types supported by jsii.
//
// The setters will validate
// that the value set is of the expected type and throw otherwise.
type AllTypes interface {
	AnyArrayProperty() []interface{}
	SetAnyArrayProperty(val []interface{})
	AnyMapProperty() map[string]interface{}
	SetAnyMapProperty(val map[string]interface{})
	AnyProperty() interface{}
	SetAnyProperty(val interface{})
	ArrayProperty() []string
	SetArrayProperty(val []string)
	BooleanProperty() bool
	SetBooleanProperty(val bool)
	DateProperty() string
	SetDateProperty(val string)
	EnumProperty() AllTypesEnum
	SetEnumProperty(val AllTypesEnum)
	EnumPropertyValue() float64
	JsonProperty() map[string]interface{}
	SetJsonProperty(val map[string]interface{})
	MapProperty() map[string]scopejsiicalclib.Number
	SetMapProperty(val map[string]scopejsiicalclib.Number)
	NumberProperty() float64
	SetNumberProperty(val float64)
	OptionalEnumValue() StringEnum
	SetOptionalEnumValue(val StringEnum)
	StringProperty() string
	SetStringProperty(val string)
	UnionArrayProperty() []interface{}
	SetUnionArrayProperty(val []interface{})
	UnionMapProperty() map[string]interface{}
	SetUnionMapProperty(val map[string]interface{})
	UnionProperty() interface{}
	SetUnionProperty(val interface{})
	UnknownArrayProperty() []interface{}
	SetUnknownArrayProperty(val []interface{})
	UnknownMapProperty() map[string]interface{}
	SetUnknownMapProperty(val map[string]interface{})
	UnknownProperty() interface{}
	SetUnknownProperty(val interface{})
	AnyIn(inp interface{})
	AnyOut() interface{}
	EnumMethod(value StringEnum) StringEnum
}

// The jsii proxy struct for AllTypes
type allTypes struct {
	_ byte // padding
}

func (a *allTypes) AnyArrayProperty() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		a,
		"anyArrayProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) AnyMapProperty() map[string]interface{} {
	var returns map[string]interface{}
	_jsii_.Get(
		a,
		"anyMapProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) AnyProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"anyProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) ArrayProperty() []string {
	var returns []string
	_jsii_.Get(
		a,
		"arrayProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) BooleanProperty() bool {
	var returns bool
	_jsii_.Get(
		a,
		"booleanProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) DateProperty() string {
	var returns string
	_jsii_.Get(
		a,
		"dateProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) EnumProperty() AllTypesEnum {
	var returns AllTypesEnum
	_jsii_.Get(
		a,
		"enumProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) EnumPropertyValue() float64 {
	var returns float64
	_jsii_.Get(
		a,
		"enumPropertyValue",
		&returns,
	)
	return returns
}

func (a *allTypes) JsonProperty() map[string]interface{} {
	var returns map[string]interface{}
	_jsii_.Get(
		a,
		"jsonProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) MapProperty() map[string]scopejsiicalclib.Number {
	var returns map[string]scopejsiicalclib.Number
	_jsii_.Get(
		a,
		"mapProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) NumberProperty() float64 {
	var returns float64
	_jsii_.Get(
		a,
		"numberProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) OptionalEnumValue() StringEnum {
	var returns StringEnum
	_jsii_.Get(
		a,
		"optionalEnumValue",
		&returns,
	)
	return returns
}

func (a *allTypes) StringProperty() string {
	var returns string
	_jsii_.Get(
		a,
		"stringProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) UnionArrayProperty() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		a,
		"unionArrayProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) UnionMapProperty() map[string]interface{} {
	var returns map[string]interface{}
	_jsii_.Get(
		a,
		"unionMapProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) UnionProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"unionProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) UnknownArrayProperty() []interface{} {
	var returns []interface{}
	_jsii_.Get(
		a,
		"unknownArrayProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) UnknownMapProperty() map[string]interface{} {
	var returns map[string]interface{}
	_jsii_.Get(
		a,
		"unknownMapProperty",
		&returns,
	)
	return returns
}

func (a *allTypes) UnknownProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		a,
		"unknownProperty",
		&returns,
	)
	return returns
}


func NewAllTypes() AllTypes {
	_init_.Initialize()
	a := allTypes{}

	_jsii_.Create(
		"jsii-calc.AllTypes",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&a,
	)
	return &a
}

func (a *allTypes) SetAnyArrayProperty(val []interface{}) {
	_jsii_.Set(
		a,
		"anyArrayProperty",
		val,
	)
}

func (a *allTypes) SetAnyMapProperty(val map[string]interface{}) {
	_jsii_.Set(
		a,
		"anyMapProperty",
		val,
	)
}

func (a *allTypes) SetAnyProperty(val interface{}) {
	_jsii_.Set(
		a,
		"anyProperty",
		val,
	)
}

func (a *allTypes) SetArrayProperty(val []string) {
	_jsii_.Set(
		a,
		"arrayProperty",
		val,
	)
}

func (a *allTypes) SetBooleanProperty(val bool) {
	_jsii_.Set(
		a,
		"booleanProperty",
		val,
	)
}

func (a *allTypes) SetDateProperty(val string) {
	_jsii_.Set(
		a,
		"dateProperty",
		val,
	)
}

func (a *allTypes) SetEnumProperty(val AllTypesEnum) {
	_jsii_.Set(
		a,
		"enumProperty",
		val,
	)
}

func (a *allTypes) SetJsonProperty(val map[string]interface{}) {
	_jsii_.Set(
		a,
		"jsonProperty",
		val,
	)
}

func (a *allTypes) SetMapProperty(val map[string]scopejsiicalclib.Number) {
	_jsii_.Set(
		a,
		"mapProperty",
		val,
	)
}

func (a *allTypes) SetNumberProperty(val float64) {
	_jsii_.Set(
		a,
		"numberProperty",
		val,
	)
}

func (a *allTypes) SetOptionalEnumValue(val StringEnum) {
	_jsii_.Set(
		a,
		"optionalEnumValue",
		val,
	)
}

func (a *allTypes) SetStringProperty(val string) {
	_jsii_.Set(
		a,
		"stringProperty",
		val,
	)
}

func (a *allTypes) SetUnionArrayProperty(val []interface{}) {
	_jsii_.Set(
		a,
		"unionArrayProperty",
		val,
	)
}

func (a *allTypes) SetUnionMapProperty(val map[string]interface{}) {
	_jsii_.Set(
		a,
		"unionMapProperty",
		val,
	)
}

func (a *allTypes) SetUnionProperty(val interface{}) {
	_jsii_.Set(
		a,
		"unionProperty",
		val,
	)
}

func (a *allTypes) SetUnknownArrayProperty(val []interface{}) {
	_jsii_.Set(
		a,
		"unknownArrayProperty",
		val,
	)
}

func (a *allTypes) SetUnknownMapProperty(val map[string]interface{}) {
	_jsii_.Set(
		a,
		"unknownMapProperty",
		val,
	)
}

func (a *allTypes) SetUnknownProperty(val interface{}) {
	_jsii_.Set(
		a,
		"unknownProperty",
		val,
	)
}

func (a *allTypes) AnyIn(inp interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"anyIn",
		[]interface{}{inp},
		false,
		&returns,
	)
}

func (a *allTypes) AnyOut() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"anyOut",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *allTypes) EnumMethod(value StringEnum) StringEnum {
	var returns StringEnum
	_jsii_.Invoke(
		a,
		"enumMethod",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

type AllTypesEnum string

const (
	AllTypesEnum_MY_ENUM_VALUE AllTypesEnum = "MY_ENUM_VALUE"
	AllTypesEnum_YOUR_ENUM_VALUE AllTypesEnum = "YOUR_ENUM_VALUE"
	AllTypesEnum_THIS_IS_GREAT AllTypesEnum = "THIS_IS_GREAT"
)

type AllowedMethodNames interface {
	GetBar(_p1 string, _p2 float64)
	GetFoo(withParam string) string
	SetBar(_x string, _y float64, _z bool)
	SetFoo(_x string, _y float64)
}

// The jsii proxy struct for AllowedMethodNames
type allowedMethodNames struct {
	_ byte // padding
}

func NewAllowedMethodNames() AllowedMethodNames {
	_init_.Initialize()
	a := allowedMethodNames{}

	_jsii_.Create(
		"jsii-calc.AllowedMethodNames",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&a,
	)
	return &a
}

func (a *allowedMethodNames) GetBar(_p1 string, _p2 float64) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"getBar",
		[]interface{}{_p1, _p2},
		false,
		&returns,
	)
}

// getXxx() is not allowed (see negatives), but getXxx(a, ...) is okay.
func (a *allowedMethodNames) GetFoo(withParam string) string {
	var returns string
	_jsii_.Invoke(
		a,
		"getFoo",
		[]interface{}{withParam},
		true,
		&returns,
	)
	return returns
}

func (a *allowedMethodNames) SetBar(_x string, _y float64, _z bool) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"setBar",
		[]interface{}{_x, _y, _z},
		false,
		&returns,
	)
}

// setFoo(x) is not allowed (see negatives), but setXxx(a, b, ...) is okay.
func (a *allowedMethodNames) SetFoo(_x string, _y float64) {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"setFoo",
		[]interface{}{_x, _y},
		false,
		&returns,
	)
}

type AmbiguousParameters interface {
	Props() StructParameterType
	Scope() Bell
}

// The jsii proxy struct for AmbiguousParameters
type ambiguousParameters struct {
	_ byte // padding
}

func (a *ambiguousParameters) Props() StructParameterType {
	var returns StructParameterType
	_jsii_.Get(
		a,
		"props",
		&returns,
	)
	return returns
}

func (a *ambiguousParameters) Scope() Bell {
	var returns Bell
	_jsii_.Get(
		a,
		"scope",
		&returns,
	)
	return returns
}


func NewAmbiguousParameters(scope Bell, props StructParameterType) AmbiguousParameters {
	_init_.Initialize()
	a := ambiguousParameters{}

	_jsii_.Create(
		"jsii-calc.AmbiguousParameters",
		[]interface{}{scope, props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&a,
	)
	return &a
}

type AnonymousImplementationProvider interface {
	IAnonymousImplementationProvider
	ProvideAsClass() Implementation
	ProvideAsInterface() IAnonymouslyImplementMe
}

// The jsii proxy struct for AnonymousImplementationProvider
type anonymousImplementationProvider struct {
	iAnonymousImplementationProvider // implements jsii-calc.IAnonymousImplementationProvider
}

func NewAnonymousImplementationProvider() AnonymousImplementationProvider {
	_init_.Initialize()
	a := anonymousImplementationProvider{}

	_jsii_.Create(
		"jsii-calc.AnonymousImplementationProvider",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IAnonymousImplementationProvider"},
		[]_jsii_.Override{},
		&a,
	)
	return &a
}

func (a *anonymousImplementationProvider) ProvideAsClass() Implementation {
	var returns Implementation
	_jsii_.Invoke(
		a,
		"provideAsClass",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *anonymousImplementationProvider) ProvideAsInterface() IAnonymouslyImplementMe {
	var returns IAnonymouslyImplementMe
	_jsii_.Invoke(
		a,
		"provideAsInterface",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type AsyncVirtualMethods interface {
	CallMe() float64
	CallMe2() float64
	CallMeDoublePromise() float64
	DontOverrideMe() float64
	OverrideMe(mult float64) float64
	OverrideMeToo() float64
}

// The jsii proxy struct for AsyncVirtualMethods
type asyncVirtualMethods struct {
	_ byte // padding
}

func NewAsyncVirtualMethods() AsyncVirtualMethods {
	_init_.Initialize()
	a := asyncVirtualMethods{}

	_jsii_.Create(
		"jsii-calc.AsyncVirtualMethods",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&a,
	)
	return &a
}

func (a *asyncVirtualMethods) CallMe() float64 {
	var returns float64
	_jsii_.Invoke(
		a,
		"callMe",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Just calls "overrideMeToo".
func (a *asyncVirtualMethods) CallMe2() float64 {
	var returns float64
	_jsii_.Invoke(
		a,
		"callMe2",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// This method calls the "callMe" async method indirectly, which will then invoke a virtual method.
//
// This is a "double promise" situation, which
// means that callbacks are not going to be available immediate, but only
// after an "immediates" cycle.
func (a *asyncVirtualMethods) CallMeDoublePromise() float64 {
	var returns float64
	_jsii_.Invoke(
		a,
		"callMeDoublePromise",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *asyncVirtualMethods) DontOverrideMe() float64 {
	var returns float64
	_jsii_.Invoke(
		a,
		"dontOverrideMe",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (a *asyncVirtualMethods) OverrideMe(mult float64) float64 {
	var returns float64
	_jsii_.Invoke(
		a,
		"overrideMe",
		[]interface{}{mult},
		true,
		&returns,
	)
	return returns
}

func (a *asyncVirtualMethods) OverrideMeToo() float64 {
	var returns float64
	_jsii_.Invoke(
		a,
		"overrideMeToo",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type AugmentableClass interface {
	MethodOne()
	MethodTwo()
}

// The jsii proxy struct for AugmentableClass
type augmentableClass struct {
	_ byte // padding
}

func NewAugmentableClass() AugmentableClass {
	_init_.Initialize()
	a := augmentableClass{}

	_jsii_.Create(
		"jsii-calc.AugmentableClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&a,
	)
	return &a
}

func (a *augmentableClass) MethodOne() {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"methodOne",
		[]interface{}{},
		false,
		&returns,
	)
}

func (a *augmentableClass) MethodTwo() {
	var returns interface{}
	_jsii_.Invoke(
		a,
		"methodTwo",
		[]interface{}{},
		false,
		&returns,
	)
}

type BaseJsii976 interface {
}

// The jsii proxy struct for BaseJsii976
type baseJsii976 struct {
	_ byte // padding
}

func NewBaseJsii976() BaseJsii976 {
	_init_.Initialize()
	b := baseJsii976{}

	_jsii_.Create(
		"jsii-calc.BaseJsii976",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&b,
	)
	return &b
}

type Bell interface {
	IBell
	Rung() bool
	SetRung(val bool)
	Ring()
}

// The jsii proxy struct for Bell
type bell struct {
	iBell // implements jsii-calc.IBell
}

func (b *bell) Rung() bool {
	var returns bool
	_jsii_.Get(
		b,
		"rung",
		&returns,
	)
	return returns
}


func NewBell() Bell {
	_init_.Initialize()
	b := bell{}

	_jsii_.Create(
		"jsii-calc.Bell",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IBell"},
		[]_jsii_.Override{},
		&b,
	)
	return &b
}

func (b *bell) SetRung(val bool) {
	_jsii_.Set(
		b,
		"rung",
		val,
	)
}

func (b *bell) Ring() {
	var returns interface{}
	_jsii_.Invoke(
		b,
		"ring",
		[]interface{}{},
		false,
		&returns,
	)
}

// Represents an operation with two operands.
type BinaryOperation interface {
	scopejsiicalclib.Operation
	scopejsiicalclib.IFriendly
	Lhs() scopejsiicalclib.NumericValue
	Rhs() scopejsiicalclib.NumericValue
	Hello() string
}

// The jsii proxy struct for BinaryOperation
type binaryOperation struct {
	scopejsiicalclib.Operation // extends @scope/jsii-calc-lib.Operation
	scopejsiicalclib.IFriendly // implements @scope/jsii-calc-lib.IFriendly
}

func (b *binaryOperation) Lhs() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		b,
		"lhs",
		&returns,
	)
	return returns
}

func (b *binaryOperation) Rhs() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		b,
		"rhs",
		&returns,
	)
	return returns
}

func (b *binaryOperation) Value() float64 {
	var returns float64
	_jsii_.Get(
		b,
		"value",
		&returns,
	)
	return returns
}


// Creates a BinaryOperation.
func NewBinaryOperation(lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) BinaryOperation {
	_init_.Initialize()
	b := binaryOperation{}

	_jsii_.Create(
		"jsii-calc.BinaryOperation",
		[]interface{}{lhs, rhs},
		[]_jsii_.FQN{"@scope/jsii-calc-lib.IFriendly"},
		[]_jsii_.Override{},
		&b,
	)
	return &b
}

// (deprecated) Say hello!
func (b *binaryOperation) Hello() string {
	var returns string
	_jsii_.Invoke(
		b,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// String representation of the value.
// Deprecated.
func (b *binaryOperation) ToString() string {
	var returns string
	_jsii_.Invoke(
		b,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (b *binaryOperation) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		b,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// See https://github.com/aws/aws-cdk/issues/7977.
type BurriedAnonymousObject interface {
	Check() bool
	GiveItBack(value interface{}) interface{}
}

// The jsii proxy struct for BurriedAnonymousObject
type burriedAnonymousObject struct {
	_ byte // padding
}

func NewBurriedAnonymousObject() BurriedAnonymousObject {
	_init_.Initialize()
	b := burriedAnonymousObject{}

	_jsii_.Create(
		"jsii-calc.BurriedAnonymousObject",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&b,
	)
	return &b
}

func (b *burriedAnonymousObject) Check() bool {
	var returns bool
	_jsii_.Invoke(
		b,
		"check",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Implement this method and have it return it's parameter.
//
// Returns: \`value\`
func (b *burriedAnonymousObject) GiveItBack(value interface{}) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		b,
		"giveItBack",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

// A calculator which maintains a current value and allows adding operations.
//
// Here's how you use it:
//
// \`\`\`ts
// const calculator = new calc.Calculator();
// calculator.add(5);
// calculator.mul(3);
// console.log(calculator.expression.value);
// \`\`\`
//
// I will repeat this example again, but in an @example tag.
//
// TODO: EXAMPLE
//
type Calculator interface {
	composition.CompositeOperation
	Curr() scopejsiicalclib.NumericValue
	SetCurr(val scopejsiicalclib.NumericValue)
	Expression() scopejsiicalclib.NumericValue
	MaxValue() float64
	SetMaxValue(val float64)
	OperationsLog() []scopejsiicalclib.NumericValue
	OperationsMap() map[string][]scopejsiicalclib.NumericValue
	UnionProperty() interface{}
	SetUnionProperty(val interface{})
	Add(value float64)
	Mul(value float64)
	Neg()
	Pow(value float64)
	ReadUnionValue() float64
}

// The jsii proxy struct for Calculator
type calculator struct {
	composition.CompositeOperation // extends jsii-calc.composition.CompositeOperation
}

func (c *calculator) Curr() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		c,
		"curr",
		&returns,
	)
	return returns
}

func (c *calculator) Expression() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		c,
		"expression",
		&returns,
	)
	return returns
}

func (c *calculator) MaxValue() float64 {
	var returns float64
	_jsii_.Get(
		c,
		"maxValue",
		&returns,
	)
	return returns
}

func (c *calculator) OperationsLog() []scopejsiicalclib.NumericValue {
	var returns []scopejsiicalclib.NumericValue
	_jsii_.Get(
		c,
		"operationsLog",
		&returns,
	)
	return returns
}

func (c *calculator) OperationsMap() map[string][]scopejsiicalclib.NumericValue {
	var returns map[string][]scopejsiicalclib.NumericValue
	_jsii_.Get(
		c,
		"operationsMap",
		&returns,
	)
	return returns
}

func (c *calculator) UnionProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"unionProperty",
		&returns,
	)
	return returns
}


// Creates a Calculator object.
func NewCalculator(props CalculatorProps) Calculator {
	_init_.Initialize()
	c := calculator{}

	_jsii_.Create(
		"jsii-calc.Calculator",
		[]interface{}{props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

func (c *calculator) SetCurr(val scopejsiicalclib.NumericValue) {
	_jsii_.Set(
		c,
		"curr",
		val,
	)
}

func (c *calculator) SetMaxValue(val float64) {
	_jsii_.Set(
		c,
		"maxValue",
		val,
	)
}

func (c *calculator) SetUnionProperty(val interface{}) {
	_jsii_.Set(
		c,
		"unionProperty",
		val,
	)
}

// Adds a number to the current value.
func (c *calculator) Add(value float64) {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"add",
		[]interface{}{value},
		false,
		&returns,
	)
}

// Multiplies the current value by a number.
func (c *calculator) Mul(value float64) {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"mul",
		[]interface{}{value},
		false,
		&returns,
	)
}

// Negates the current value.
func (c *calculator) Neg() {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"neg",
		[]interface{}{},
		false,
		&returns,
	)
}

// Raises the current value by a power.
func (c *calculator) Pow(value float64) {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"pow",
		[]interface{}{value},
		false,
		&returns,
	)
}

// Returns teh value of the union property (if defined).
func (c *calculator) ReadUnionValue() float64 {
	var returns float64
	_jsii_.Invoke(
		c,
		"readUnionValue",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Properties for Calculator.
type CalculatorProps struct {
	// The initial value of the calculator.
	//
	// NOTE: Any number works here, it's fine.
	InitialValue float64 \`json:"initialValue"\`
	// The maximum value the calculator can store.
	MaximumValue float64 \`json:"maximumValue"\`
}

type ChildStruct982 struct {
	Foo string \`json:"foo"\`
	Bar float64 \`json:"bar"\`
}

// ToParentStruct982 is a convenience function to obtain a new ParentStruct982 from this ChildStruct982.
func (c *ChildStruct982) ToParentStruct982() ParentStruct982 {
	return ParentStruct982 {
		Foo: c.Foo,
	}
}

type ClassThatImplementsTheInternalInterface interface {
	INonInternalInterface
	A() string
	SetA(val string)
	B() string
	SetB(val string)
	C() string
	SetC(val string)
	D() string
	SetD(val string)
}

// The jsii proxy struct for ClassThatImplementsTheInternalInterface
type classThatImplementsTheInternalInterface struct {
	iNonInternalInterface // implements jsii-calc.INonInternalInterface
}

func (c *classThatImplementsTheInternalInterface) A() string {
	var returns string
	_jsii_.Get(
		c,
		"a",
		&returns,
	)
	return returns
}

func (c *classThatImplementsTheInternalInterface) B() string {
	var returns string
	_jsii_.Get(
		c,
		"b",
		&returns,
	)
	return returns
}

func (c *classThatImplementsTheInternalInterface) C() string {
	var returns string
	_jsii_.Get(
		c,
		"c",
		&returns,
	)
	return returns
}

func (c *classThatImplementsTheInternalInterface) D() string {
	var returns string
	_jsii_.Get(
		c,
		"d",
		&returns,
	)
	return returns
}


func NewClassThatImplementsTheInternalInterface() ClassThatImplementsTheInternalInterface {
	_init_.Initialize()
	c := classThatImplementsTheInternalInterface{}

	_jsii_.Create(
		"jsii-calc.ClassThatImplementsTheInternalInterface",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.INonInternalInterface"},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

func (c *classThatImplementsTheInternalInterface) SetA(val string) {
	_jsii_.Set(
		c,
		"a",
		val,
	)
}

func (c *classThatImplementsTheInternalInterface) SetB(val string) {
	_jsii_.Set(
		c,
		"b",
		val,
	)
}

func (c *classThatImplementsTheInternalInterface) SetC(val string) {
	_jsii_.Set(
		c,
		"c",
		val,
	)
}

func (c *classThatImplementsTheInternalInterface) SetD(val string) {
	_jsii_.Set(
		c,
		"d",
		val,
	)
}

type ClassThatImplementsThePrivateInterface interface {
	INonInternalInterface
	A() string
	SetA(val string)
	B() string
	SetB(val string)
	C() string
	SetC(val string)
	E() string
	SetE(val string)
}

// The jsii proxy struct for ClassThatImplementsThePrivateInterface
type classThatImplementsThePrivateInterface struct {
	iNonInternalInterface // implements jsii-calc.INonInternalInterface
}

func (c *classThatImplementsThePrivateInterface) A() string {
	var returns string
	_jsii_.Get(
		c,
		"a",
		&returns,
	)
	return returns
}

func (c *classThatImplementsThePrivateInterface) B() string {
	var returns string
	_jsii_.Get(
		c,
		"b",
		&returns,
	)
	return returns
}

func (c *classThatImplementsThePrivateInterface) C() string {
	var returns string
	_jsii_.Get(
		c,
		"c",
		&returns,
	)
	return returns
}

func (c *classThatImplementsThePrivateInterface) E() string {
	var returns string
	_jsii_.Get(
		c,
		"e",
		&returns,
	)
	return returns
}


func NewClassThatImplementsThePrivateInterface() ClassThatImplementsThePrivateInterface {
	_init_.Initialize()
	c := classThatImplementsThePrivateInterface{}

	_jsii_.Create(
		"jsii-calc.ClassThatImplementsThePrivateInterface",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.INonInternalInterface"},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

func (c *classThatImplementsThePrivateInterface) SetA(val string) {
	_jsii_.Set(
		c,
		"a",
		val,
	)
}

func (c *classThatImplementsThePrivateInterface) SetB(val string) {
	_jsii_.Set(
		c,
		"b",
		val,
	)
}

func (c *classThatImplementsThePrivateInterface) SetC(val string) {
	_jsii_.Set(
		c,
		"c",
		val,
	)
}

func (c *classThatImplementsThePrivateInterface) SetE(val string) {
	_jsii_.Set(
		c,
		"e",
		val,
	)
}

type ClassWithCollections interface {
	Array() []string
	SetArray(val []string)
	Map() map[string]string
	SetMap(val map[string]string)
}

// The jsii proxy struct for ClassWithCollections
type classWithCollections struct {
	_ byte // padding
}

func (c *classWithCollections) Array() []string {
	var returns []string
	_jsii_.Get(
		c,
		"array",
		&returns,
	)
	return returns
}

func (c *classWithCollections) Map() map[string]string {
	var returns map[string]string
	_jsii_.Get(
		c,
		"map",
		&returns,
	)
	return returns
}


func NewClassWithCollections(map_ map[string]string, array []string) ClassWithCollections {
	_init_.Initialize()
	c := classWithCollections{}

	_jsii_.Create(
		"jsii-calc.ClassWithCollections",
		[]interface{}{map_, array},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

func (c *classWithCollections) SetArray(val []string) {
	_jsii_.Set(
		c,
		"array",
		val,
	)
}

func (c *classWithCollections) SetMap(val map[string]string) {
	_jsii_.Set(
		c,
		"map",
		val,
	)
}

func ClassWithCollections_CreateAList() []string {
	_init_.Initialize()
	var returns []string
	_jsii_.StaticInvoke(
		"jsii-calc.ClassWithCollections",
		"createAList",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func ClassWithCollections_CreateAMap() map[string]string {
	_init_.Initialize()
	var returns map[string]string
	_jsii_.StaticInvoke(
		"jsii-calc.ClassWithCollections",
		"createAMap",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func ClassWithCollections_StaticArray() []string {
	_init_.Initialize()
	var returns []string
	_jsii_.StaticGet(
		"jsii-calc.ClassWithCollections",
		"staticArray",
		&returns,
	)
	return returns
}

func ClassWithCollections_SetStaticArray(val []string) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.ClassWithCollections",
		"staticArray",
		val,
	)
}

func ClassWithCollections_StaticMap() map[string]string {
	_init_.Initialize()
	var returns map[string]string
	_jsii_.StaticGet(
		"jsii-calc.ClassWithCollections",
		"staticMap",
		&returns,
	)
	return returns
}

func ClassWithCollections_SetStaticMap(val map[string]string) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.ClassWithCollections",
		"staticMap",
		val,
	)
}

// This class has docs.
//
// The docs are great. They're a bunch of tags.
//
// TODO: EXAMPLE
//
// See: https://aws.amazon.com/
//
type ClassWithDocs interface {
}

// The jsii proxy struct for ClassWithDocs
type classWithDocs struct {
	_ byte // padding
}

func NewClassWithDocs() ClassWithDocs {
	_init_.Initialize()
	c := classWithDocs{}

	_jsii_.Create(
		"jsii-calc.ClassWithDocs",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

type ClassWithJavaReservedWords interface {
	Int() string
	Import(assert string) string
}

// The jsii proxy struct for ClassWithJavaReservedWords
type classWithJavaReservedWords struct {
	_ byte // padding
}

func (c *classWithJavaReservedWords) Int() string {
	var returns string
	_jsii_.Get(
		c,
		"int",
		&returns,
	)
	return returns
}


func NewClassWithJavaReservedWords(int string) ClassWithJavaReservedWords {
	_init_.Initialize()
	c := classWithJavaReservedWords{}

	_jsii_.Create(
		"jsii-calc.ClassWithJavaReservedWords",
		[]interface{}{int},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

func (c *classWithJavaReservedWords) Import(assert string) string {
	var returns string
	_jsii_.Invoke(
		c,
		"import",
		[]interface{}{assert},
		true,
		&returns,
	)
	return returns
}

type ClassWithMutableObjectLiteralProperty interface {
	MutableObject() IMutableObjectLiteral
	SetMutableObject(val IMutableObjectLiteral)
}

// The jsii proxy struct for ClassWithMutableObjectLiteralProperty
type classWithMutableObjectLiteralProperty struct {
	_ byte // padding
}

func (c *classWithMutableObjectLiteralProperty) MutableObject() IMutableObjectLiteral {
	var returns IMutableObjectLiteral
	_jsii_.Get(
		c,
		"mutableObject",
		&returns,
	)
	return returns
}


func NewClassWithMutableObjectLiteralProperty() ClassWithMutableObjectLiteralProperty {
	_init_.Initialize()
	c := classWithMutableObjectLiteralProperty{}

	_jsii_.Create(
		"jsii-calc.ClassWithMutableObjectLiteralProperty",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

func (c *classWithMutableObjectLiteralProperty) SetMutableObject(val IMutableObjectLiteral) {
	_jsii_.Set(
		c,
		"mutableObject",
		val,
	)
}

// Class that implements interface properties automatically, but using a private constructor.
type ClassWithPrivateConstructorAndAutomaticProperties interface {
	IInterfaceWithProperties
	ReadOnlyString() string
	ReadWriteString() string
	SetReadWriteString(val string)
}

// The jsii proxy struct for ClassWithPrivateConstructorAndAutomaticProperties
type classWithPrivateConstructorAndAutomaticProperties struct {
	iInterfaceWithProperties // implements jsii-calc.IInterfaceWithProperties
}

func (c *classWithPrivateConstructorAndAutomaticProperties) ReadOnlyString() string {
	var returns string
	_jsii_.Get(
		c,
		"readOnlyString",
		&returns,
	)
	return returns
}

func (c *classWithPrivateConstructorAndAutomaticProperties) ReadWriteString() string {
	var returns string
	_jsii_.Get(
		c,
		"readWriteString",
		&returns,
	)
	return returns
}


func (c *classWithPrivateConstructorAndAutomaticProperties) SetReadWriteString(val string) {
	_jsii_.Set(
		c,
		"readWriteString",
		val,
	)
}

func ClassWithPrivateConstructorAndAutomaticProperties_Create(readOnlyString string, readWriteString string) ClassWithPrivateConstructorAndAutomaticProperties {
	_init_.Initialize()
	var returns ClassWithPrivateConstructorAndAutomaticProperties
	_jsii_.StaticInvoke(
		"jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties",
		"create",
		[]interface{}{readOnlyString, readWriteString},
		true,
		&returns,
	)
	return returns
}

// This tries to confuse Jackson by having overloaded property setters.
// See: https://github.com/aws/aws-cdk/issues/4080
//
type ConfusingToJackson interface {
	UnionProperty() interface{}
	SetUnionProperty(val interface{})
}

// The jsii proxy struct for ConfusingToJackson
type confusingToJackson struct {
	_ byte // padding
}

func (c *confusingToJackson) UnionProperty() interface{} {
	var returns interface{}
	_jsii_.Get(
		c,
		"unionProperty",
		&returns,
	)
	return returns
}


func (c *confusingToJackson) SetUnionProperty(val interface{}) {
	_jsii_.Set(
		c,
		"unionProperty",
		val,
	)
}

func ConfusingToJackson_MakeInstance() ConfusingToJackson {
	_init_.Initialize()
	var returns ConfusingToJackson
	_jsii_.StaticInvoke(
		"jsii-calc.ConfusingToJackson",
		"makeInstance",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func ConfusingToJackson_MakeStructInstance() ConfusingToJacksonStruct {
	_init_.Initialize()
	var returns ConfusingToJacksonStruct
	_jsii_.StaticInvoke(
		"jsii-calc.ConfusingToJackson",
		"makeStructInstance",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type ConfusingToJacksonStruct struct {
	UnionProperty interface{} \`json:"unionProperty"\`
}

type ConstructorPassesThisOut interface {
}

// The jsii proxy struct for ConstructorPassesThisOut
type constructorPassesThisOut struct {
	_ byte // padding
}

func NewConstructorPassesThisOut(consumer PartiallyInitializedThisConsumer) ConstructorPassesThisOut {
	_init_.Initialize()
	c := constructorPassesThisOut{}

	_jsii_.Create(
		"jsii-calc.ConstructorPassesThisOut",
		[]interface{}{consumer},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

type Constructors interface {
}

// The jsii proxy struct for Constructors
type constructors struct {
	_ byte // padding
}

func NewConstructors() Constructors {
	_init_.Initialize()
	c := constructors{}

	_jsii_.Create(
		"jsii-calc.Constructors",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

func Constructors_HiddenInterface() IPublicInterface {
	_init_.Initialize()
	var returns IPublicInterface
	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"hiddenInterface",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_HiddenInterfaces() []IPublicInterface {
	_init_.Initialize()
	var returns []IPublicInterface
	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"hiddenInterfaces",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_HiddenSubInterfaces() []IPublicInterface {
	_init_.Initialize()
	var returns []IPublicInterface
	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"hiddenSubInterfaces",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_MakeClass() PublicClass {
	_init_.Initialize()
	var returns PublicClass
	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"makeClass",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_MakeInterface() IPublicInterface {
	_init_.Initialize()
	var returns IPublicInterface
	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"makeInterface",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_MakeInterface2() IPublicInterface2 {
	_init_.Initialize()
	var returns IPublicInterface2
	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"makeInterface2",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func Constructors_MakeInterfaces() []IPublicInterface {
	_init_.Initialize()
	var returns []IPublicInterface
	_jsii_.StaticInvoke(
		"jsii-calc.Constructors",
		"makeInterfaces",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type ConsumePureInterface interface {
	WorkItBaby() StructB
}

// The jsii proxy struct for ConsumePureInterface
type consumePureInterface struct {
	_ byte // padding
}

func NewConsumePureInterface(delegate IStructReturningDelegate) ConsumePureInterface {
	_init_.Initialize()
	c := consumePureInterface{}

	_jsii_.Create(
		"jsii-calc.ConsumePureInterface",
		[]interface{}{delegate},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

func (c *consumePureInterface) WorkItBaby() StructB {
	var returns StructB
	_jsii_.Invoke(
		c,
		"workItBaby",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Test calling back to consumers that implement interfaces.
//
// Check that if a JSII consumer implements IConsumerWithInterfaceParam, they can call
// the method on the argument that they're passed...
type ConsumerCanRingBell interface {
	ImplementedByObjectLiteral(ringer IBellRinger) bool
	ImplementedByPrivateClass(ringer IBellRinger) bool
	ImplementedByPublicClass(ringer IBellRinger) bool
	WhenTypedAsClass(ringer IConcreteBellRinger) bool
}

// The jsii proxy struct for ConsumerCanRingBell
type consumerCanRingBell struct {
	_ byte // padding
}

func NewConsumerCanRingBell() ConsumerCanRingBell {
	_init_.Initialize()
	c := consumerCanRingBell{}

	_jsii_.Create(
		"jsii-calc.ConsumerCanRingBell",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

// ...if the interface is implemented using an object literal.
//
// Returns whether the bell was rung.
func ConsumerCanRingBell_StaticImplementedByObjectLiteral(ringer IBellRinger) bool {
	_init_.Initialize()
	var returns bool
	_jsii_.StaticInvoke(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByObjectLiteral",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

// ...if the interface is implemented using a private class.
//
// Return whether the bell was rung.
func ConsumerCanRingBell_StaticImplementedByPrivateClass(ringer IBellRinger) bool {
	_init_.Initialize()
	var returns bool
	_jsii_.StaticInvoke(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByPrivateClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

// ...if the interface is implemented using a public class.
//
// Return whether the bell was rung.
func ConsumerCanRingBell_StaticImplementedByPublicClass(ringer IBellRinger) bool {
	_init_.Initialize()
	var returns bool
	_jsii_.StaticInvoke(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByPublicClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

// If the parameter is a concrete class instead of an interface.
//
// Return whether the bell was rung.
func ConsumerCanRingBell_StaticWhenTypedAsClass(ringer IConcreteBellRinger) bool {
	_init_.Initialize()
	var returns bool
	_jsii_.StaticInvoke(
		"jsii-calc.ConsumerCanRingBell",
		"staticWhenTypedAsClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

// ...if the interface is implemented using an object literal.
//
// Returns whether the bell was rung.
func (c *consumerCanRingBell) ImplementedByObjectLiteral(ringer IBellRinger) bool {
	var returns bool
	_jsii_.Invoke(
		c,
		"implementedByObjectLiteral",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

// ...if the interface is implemented using a private class.
//
// Return whether the bell was rung.
func (c *consumerCanRingBell) ImplementedByPrivateClass(ringer IBellRinger) bool {
	var returns bool
	_jsii_.Invoke(
		c,
		"implementedByPrivateClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

// ...if the interface is implemented using a public class.
//
// Return whether the bell was rung.
func (c *consumerCanRingBell) ImplementedByPublicClass(ringer IBellRinger) bool {
	var returns bool
	_jsii_.Invoke(
		c,
		"implementedByPublicClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

// If the parameter is a concrete class instead of an interface.
//
// Return whether the bell was rung.
func (c *consumerCanRingBell) WhenTypedAsClass(ringer IConcreteBellRinger) bool {
	var returns bool
	_jsii_.Invoke(
		c,
		"whenTypedAsClass",
		[]interface{}{ringer},
		true,
		&returns,
	)
	return returns
}

type ConsumersOfThisCrazyTypeSystem interface {
	ConsumeAnotherPublicInterface(obj IAnotherPublicInterface) string
	ConsumeNonInternalInterface(obj INonInternalInterface) interface{}
}

// The jsii proxy struct for ConsumersOfThisCrazyTypeSystem
type consumersOfThisCrazyTypeSystem struct {
	_ byte // padding
}

func NewConsumersOfThisCrazyTypeSystem() ConsumersOfThisCrazyTypeSystem {
	_init_.Initialize()
	c := consumersOfThisCrazyTypeSystem{}

	_jsii_.Create(
		"jsii-calc.ConsumersOfThisCrazyTypeSystem",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

func (c *consumersOfThisCrazyTypeSystem) ConsumeAnotherPublicInterface(obj IAnotherPublicInterface) string {
	var returns string
	_jsii_.Invoke(
		c,
		"consumeAnotherPublicInterface",
		[]interface{}{obj},
		true,
		&returns,
	)
	return returns
}

func (c *consumersOfThisCrazyTypeSystem) ConsumeNonInternalInterface(obj INonInternalInterface) interface{} {
	var returns interface{}
	_jsii_.Invoke(
		c,
		"consumeNonInternalInterface",
		[]interface{}{obj},
		true,
		&returns,
	)
	return returns
}

// Verifies proper type handling through dynamic overrides.
type DataRenderer interface {
	Render(data scopejsiicalclib.MyFirstStruct) string
	RenderArbitrary(data map[string]interface{}) string
	RenderMap(map_ map[string]interface{}) string
}

// The jsii proxy struct for DataRenderer
type dataRenderer struct {
	_ byte // padding
}

func NewDataRenderer() DataRenderer {
	_init_.Initialize()
	d := dataRenderer{}

	_jsii_.Create(
		"jsii-calc.DataRenderer",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}

func (d *dataRenderer) Render(data scopejsiicalclib.MyFirstStruct) string {
	var returns string
	_jsii_.Invoke(
		d,
		"render",
		[]interface{}{data},
		true,
		&returns,
	)
	return returns
}

func (d *dataRenderer) RenderArbitrary(data map[string]interface{}) string {
	var returns string
	_jsii_.Invoke(
		d,
		"renderArbitrary",
		[]interface{}{data},
		true,
		&returns,
	)
	return returns
}

func (d *dataRenderer) RenderMap(map_ map[string]interface{}) string {
	var returns string
	_jsii_.Invoke(
		d,
		"renderMap",
		[]interface{}{map_},
		true,
		&returns,
	)
	return returns
}

type DefaultedConstructorArgument interface {
	Arg1() float64
	Arg2() string
	Arg3() string
}

// The jsii proxy struct for DefaultedConstructorArgument
type defaultedConstructorArgument struct {
	_ byte // padding
}

func (d *defaultedConstructorArgument) Arg1() float64 {
	var returns float64
	_jsii_.Get(
		d,
		"arg1",
		&returns,
	)
	return returns
}

func (d *defaultedConstructorArgument) Arg2() string {
	var returns string
	_jsii_.Get(
		d,
		"arg2",
		&returns,
	)
	return returns
}

func (d *defaultedConstructorArgument) Arg3() string {
	var returns string
	_jsii_.Get(
		d,
		"arg3",
		&returns,
	)
	return returns
}


func NewDefaultedConstructorArgument(arg1 float64, arg2 string, arg3 string) DefaultedConstructorArgument {
	_init_.Initialize()
	d := defaultedConstructorArgument{}

	_jsii_.Create(
		"jsii-calc.DefaultedConstructorArgument",
		[]interface{}{arg1, arg2, arg3},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}

// 1.
//
// call #takeThis() -> An ObjectRef will be provisioned for the value (it'll be re-used!)
// 2. call #takeThisToo() -> The ObjectRef from before will need to be down-cased to the ParentStruct982 type
type Demonstrate982 interface {
}

// The jsii proxy struct for Demonstrate982
type demonstrate982 struct {
	_ byte // padding
}

func NewDemonstrate982() Demonstrate982 {
	_init_.Initialize()
	d := demonstrate982{}

	_jsii_.Create(
		"jsii-calc.Demonstrate982",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}

// It's dangerous to go alone!
func Demonstrate982_TakeThis() ChildStruct982 {
	_init_.Initialize()
	var returns ChildStruct982
	_jsii_.StaticInvoke(
		"jsii-calc.Demonstrate982",
		"takeThis",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// It's dangerous to go alone!
func Demonstrate982_TakeThisToo() ParentStruct982 {
	_init_.Initialize()
	var returns ParentStruct982
	_jsii_.StaticInvoke(
		"jsii-calc.Demonstrate982",
		"takeThisToo",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Deprecated: a pretty boring class
type DeprecatedClass interface {
	MutableProperty() float64
	SetMutableProperty(val float64)
	ReadonlyProperty() string
	Method()
}

// The jsii proxy struct for DeprecatedClass
type deprecatedClass struct {
	_ byte // padding
}

func (d *deprecatedClass) MutableProperty() float64 {
	var returns float64
	_jsii_.Get(
		d,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (d *deprecatedClass) ReadonlyProperty() string {
	var returns string
	_jsii_.Get(
		d,
		"readonlyProperty",
		&returns,
	)
	return returns
}


func NewDeprecatedClass(readonlyString string, mutableNumber float64) DeprecatedClass {
	_init_.Initialize()
	d := deprecatedClass{}

	_jsii_.Create(
		"jsii-calc.DeprecatedClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}

func (d *deprecatedClass) SetMutableProperty(val float64) {
	_jsii_.Set(
		d,
		"mutableProperty",
		val,
	)
}

// Deprecated: it was a bad idea
func (d *deprecatedClass) Method() {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

// Deprecated: your deprecated selection of bad options
type DeprecatedEnum string

const (
	DeprecatedEnum_OPTION_A DeprecatedEnum = "OPTION_A"
	DeprecatedEnum_OPTION_B DeprecatedEnum = "OPTION_B"
)

// Deprecated: it just wraps a string
type DeprecatedStruct struct {
	// Deprecated: well, yeah
	ReadonlyProperty string \`json:"readonlyProperty"\`
}

// A struct which derives from another struct.
type DerivedStruct struct {
	// An awesome number value.
	// Deprecated.
	Anumber float64 \`json:"anumber"\`
	// A string value.
	// Deprecated.
	Astring string \`json:"astring"\`
	// Deprecated.
	FirstOptional []string \`json:"firstOptional"\`
	AnotherRequired string \`json:"anotherRequired"\`
	Bool bool \`json:"bool"\`
	// An example of a non primitive property.
	NonPrimitive DoubleTrouble \`json:"nonPrimitive"\`
	// This is optional.
	AnotherOptional map[string]scopejsiicalclib.NumericValue \`json:"anotherOptional"\`
	OptionalAny interface{} \`json:"optionalAny"\`
	OptionalArray []string \`json:"optionalArray"\`
}

// ToMyFirstStruct is a convenience function to obtain a new scopejsiicalclib.MyFirstStruct from this DerivedStruct.
func (d *DerivedStruct) ToMyFirstStruct() scopejsiicalclib.MyFirstStruct {
	return scopejsiicalclib.MyFirstStruct {
		Anumber: d.Anumber,
		Astring: d.Astring,
		FirstOptional: d.FirstOptional,
	}
}

type DiamondBottom struct {
	// Deprecated.
	HoistedTop string \`json:"hoistedTop"\`
	// Deprecated.
	Left float64 \`json:"left"\`
	// Deprecated.
	Right bool \`json:"right"\`
	Bottom string \`json:"bottom"\`
}

// ToDiamondLeft is a convenience function to obtain a new scopejsiicalclib.DiamondLeft from this DiamondBottom.
func (d *DiamondBottom) ToDiamondLeft() scopejsiicalclib.DiamondLeft {
	return scopejsiicalclib.DiamondLeft {
		HoistedTop: d.HoistedTop,
		Left: d.Left,
	}
}

// ToDiamondRight is a convenience function to obtain a new scopejsiicalclib.DiamondRight from this DiamondBottom.
func (d *DiamondBottom) ToDiamondRight() scopejsiicalclib.DiamondRight {
	return scopejsiicalclib.DiamondRight {
		HoistedTop: d.HoistedTop,
		Right: d.Right,
	}
}

type DiamondInheritanceBaseLevelStruct struct {
	BaseLevelProperty string \`json:"baseLevelProperty"\`
}

type DiamondInheritanceFirstMidLevelStruct struct {
	BaseLevelProperty string \`json:"baseLevelProperty"\`
	FirstMidLevelProperty string \`json:"firstMidLevelProperty"\`
}

// ToDiamondInheritanceBaseLevelStruct is a convenience function to obtain a new DiamondInheritanceBaseLevelStruct from this DiamondInheritanceFirstMidLevelStruct.
func (d *DiamondInheritanceFirstMidLevelStruct) ToDiamondInheritanceBaseLevelStruct() DiamondInheritanceBaseLevelStruct {
	return DiamondInheritanceBaseLevelStruct {
		BaseLevelProperty: d.BaseLevelProperty,
	}
}

type DiamondInheritanceSecondMidLevelStruct struct {
	BaseLevelProperty string \`json:"baseLevelProperty"\`
	SecondMidLevelProperty string \`json:"secondMidLevelProperty"\`
}

// ToDiamondInheritanceBaseLevelStruct is a convenience function to obtain a new DiamondInheritanceBaseLevelStruct from this DiamondInheritanceSecondMidLevelStruct.
func (d *DiamondInheritanceSecondMidLevelStruct) ToDiamondInheritanceBaseLevelStruct() DiamondInheritanceBaseLevelStruct {
	return DiamondInheritanceBaseLevelStruct {
		BaseLevelProperty: d.BaseLevelProperty,
	}
}

type DiamondInheritanceTopLevelStruct struct {
	BaseLevelProperty string \`json:"baseLevelProperty"\`
	FirstMidLevelProperty string \`json:"firstMidLevelProperty"\`
	SecondMidLevelProperty string \`json:"secondMidLevelProperty"\`
	TopLevelProperty string \`json:"topLevelProperty"\`
}

// ToDiamondInheritanceBaseLevelStruct is a convenience function to obtain a new DiamondInheritanceBaseLevelStruct from this DiamondInheritanceTopLevelStruct.
func (d *DiamondInheritanceTopLevelStruct) ToDiamondInheritanceBaseLevelStruct() DiamondInheritanceBaseLevelStruct {
	return DiamondInheritanceBaseLevelStruct {
		BaseLevelProperty: d.BaseLevelProperty,
	}
}

// ToDiamondInheritanceFirstMidLevelStruct is a convenience function to obtain a new DiamondInheritanceFirstMidLevelStruct from this DiamondInheritanceTopLevelStruct.
func (d *DiamondInheritanceTopLevelStruct) ToDiamondInheritanceFirstMidLevelStruct() DiamondInheritanceFirstMidLevelStruct {
	return DiamondInheritanceFirstMidLevelStruct {
		BaseLevelProperty: d.BaseLevelProperty,
		FirstMidLevelProperty: d.FirstMidLevelProperty,
	}
}

// ToDiamondInheritanceSecondMidLevelStruct is a convenience function to obtain a new DiamondInheritanceSecondMidLevelStruct from this DiamondInheritanceTopLevelStruct.
func (d *DiamondInheritanceTopLevelStruct) ToDiamondInheritanceSecondMidLevelStruct() DiamondInheritanceSecondMidLevelStruct {
	return DiamondInheritanceSecondMidLevelStruct {
		BaseLevelProperty: d.BaseLevelProperty,
		SecondMidLevelProperty: d.SecondMidLevelProperty,
	}
}

// Verifies that null/undefined can be returned for optional collections.
//
// This source of collections is disappointing - it'll always give you nothing :(
type DisappointingCollectionSource interface {
}

// The jsii proxy struct for DisappointingCollectionSource
type disappointingCollectionSource struct {
	_ byte // padding
}

func DisappointingCollectionSource_MaybeList() []string {
	_init_.Initialize()
	var returns []string
	_jsii_.StaticGet(
		"jsii-calc.DisappointingCollectionSource",
		"maybeList",
		&returns,
	)
	return returns
}

func DisappointingCollectionSource_MaybeMap() map[string]float64 {
	_init_.Initialize()
	var returns map[string]float64
	_jsii_.StaticGet(
		"jsii-calc.DisappointingCollectionSource",
		"maybeMap",
		&returns,
	)
	return returns
}

type DoNotOverridePrivates interface {
	ChangePrivatePropertyValue(newValue string)
	PrivateMethodValue() string
	PrivatePropertyValue() string
}

// The jsii proxy struct for DoNotOverridePrivates
type doNotOverridePrivates struct {
	_ byte // padding
}

func NewDoNotOverridePrivates() DoNotOverridePrivates {
	_init_.Initialize()
	d := doNotOverridePrivates{}

	_jsii_.Create(
		"jsii-calc.DoNotOverridePrivates",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}

func (d *doNotOverridePrivates) ChangePrivatePropertyValue(newValue string) {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"changePrivatePropertyValue",
		[]interface{}{newValue},
		false,
		&returns,
	)
}

func (d *doNotOverridePrivates) PrivateMethodValue() string {
	var returns string
	_jsii_.Invoke(
		d,
		"privateMethodValue",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (d *doNotOverridePrivates) PrivatePropertyValue() string {
	var returns string
	_jsii_.Invoke(
		d,
		"privatePropertyValue",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// jsii#284: do not recognize "any" as an optional argument.
type DoNotRecognizeAnyAsOptional interface {
	Method(_requiredAny interface{}, _optionalAny interface{}, _optionalString string)
}

// The jsii proxy struct for DoNotRecognizeAnyAsOptional
type doNotRecognizeAnyAsOptional struct {
	_ byte // padding
}

func NewDoNotRecognizeAnyAsOptional() DoNotRecognizeAnyAsOptional {
	_init_.Initialize()
	d := doNotRecognizeAnyAsOptional{}

	_jsii_.Create(
		"jsii-calc.DoNotRecognizeAnyAsOptional",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}

func (d *doNotRecognizeAnyAsOptional) Method(_requiredAny interface{}, _optionalAny interface{}, _optionalString string) {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"method",
		[]interface{}{_requiredAny, _optionalAny, _optionalString},
		false,
		&returns,
	)
}

// Here's the first line of the TSDoc comment.
//
// This is the meat of the TSDoc comment. It may contain
// multiple lines and multiple paragraphs.
//
// Multiple paragraphs are separated by an empty line.
//
// TODO: EXAMPLE
//
type DocumentedClass interface {
	Greet(greetee Greetee) float64
	Hola()
}

// The jsii proxy struct for DocumentedClass
type documentedClass struct {
	_ byte // padding
}

func NewDocumentedClass() DocumentedClass {
	_init_.Initialize()
	d := documentedClass{}

	_jsii_.Create(
		"jsii-calc.DocumentedClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}

// Greet the indicated person.
//
// This will print out a friendly greeting intended for the indicated person.
//
// Returns: A number that everyone knows very well and represents the answer
// to the ultimate question
func (d *documentedClass) Greet(greetee Greetee) float64 {
	var returns float64
	_jsii_.Invoke(
		d,
		"greet",
		[]interface{}{greetee},
		true,
		&returns,
	)
	return returns
}

// Say ¬°Hola!
// Experimental.
func (d *documentedClass) Hola() {
	var returns interface{}
	_jsii_.Invoke(
		d,
		"hola",
		[]interface{}{},
		false,
		&returns,
	)
}

type DontComplainAboutVariadicAfterOptional interface {
	OptionalAndVariadic(optional string, things string) string
}

// The jsii proxy struct for DontComplainAboutVariadicAfterOptional
type dontComplainAboutVariadicAfterOptional struct {
	_ byte // padding
}

func NewDontComplainAboutVariadicAfterOptional() DontComplainAboutVariadicAfterOptional {
	_init_.Initialize()
	d := dontComplainAboutVariadicAfterOptional{}

	_jsii_.Create(
		"jsii-calc.DontComplainAboutVariadicAfterOptional",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}

func (d *dontComplainAboutVariadicAfterOptional) OptionalAndVariadic(optional string, things string) string {
	var returns string
	_jsii_.Invoke(
		d,
		"optionalAndVariadic",
		[]interface{}{optional, things},
		true,
		&returns,
	)
	return returns
}

type DoubleTrouble interface {
	IFriendlyRandomGenerator
	Hello() string
	Next() float64
}

// The jsii proxy struct for DoubleTrouble
type doubleTrouble struct {
	iFriendlyRandomGenerator // implements jsii-calc.IFriendlyRandomGenerator
}

func NewDoubleTrouble() DoubleTrouble {
	_init_.Initialize()
	d := doubleTrouble{}

	_jsii_.Create(
		"jsii-calc.DoubleTrouble",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IFriendlyRandomGenerator"},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}

// (deprecated) Say hello!
func (d *doubleTrouble) Hello() string {
	var returns string
	_jsii_.Invoke(
		d,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Returns another random number.
func (d *doubleTrouble) Next() float64 {
	var returns float64
	_jsii_.Invoke(
		d,
		"next",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Ensures we can override a dynamic property that was inherited.
type DynamicPropertyBearer interface {
	DynamicProperty() string
	SetDynamicProperty(val string)
	ValueStore() string
	SetValueStore(val string)
}

// The jsii proxy struct for DynamicPropertyBearer
type dynamicPropertyBearer struct {
	_ byte // padding
}

func (d *dynamicPropertyBearer) DynamicProperty() string {
	var returns string
	_jsii_.Get(
		d,
		"dynamicProperty",
		&returns,
	)
	return returns
}

func (d *dynamicPropertyBearer) ValueStore() string {
	var returns string
	_jsii_.Get(
		d,
		"valueStore",
		&returns,
	)
	return returns
}


func NewDynamicPropertyBearer(valueStore string) DynamicPropertyBearer {
	_init_.Initialize()
	d := dynamicPropertyBearer{}

	_jsii_.Create(
		"jsii-calc.DynamicPropertyBearer",
		[]interface{}{valueStore},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}

func (d *dynamicPropertyBearer) SetDynamicProperty(val string) {
	_jsii_.Set(
		d,
		"dynamicProperty",
		val,
	)
}

func (d *dynamicPropertyBearer) SetValueStore(val string) {
	_jsii_.Set(
		d,
		"valueStore",
		val,
	)
}

type DynamicPropertyBearerChild interface {
	DynamicPropertyBearer
	OriginalValue() string
	OverrideValue(newValue string) string
}

// The jsii proxy struct for DynamicPropertyBearerChild
type dynamicPropertyBearerChild struct {
	dynamicPropertyBearer // extends jsii-calc.DynamicPropertyBearer
}

func (d *dynamicPropertyBearerChild) OriginalValue() string {
	var returns string
	_jsii_.Get(
		d,
		"originalValue",
		&returns,
	)
	return returns
}


func NewDynamicPropertyBearerChild(originalValue string) DynamicPropertyBearerChild {
	_init_.Initialize()
	d := dynamicPropertyBearerChild{}

	_jsii_.Create(
		"jsii-calc.DynamicPropertyBearerChild",
		[]interface{}{originalValue},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&d,
	)
	return &d
}

// Sets \`this.dynamicProperty\` to the new value, and returns the old value.
//
// Returns: the old value that was set.
func (d *dynamicPropertyBearerChild) OverrideValue(newValue string) string {
	var returns string
	_jsii_.Invoke(
		d,
		"overrideValue",
		[]interface{}{newValue},
		true,
		&returns,
	)
	return returns
}

// This class is used to validate that serialization and deserialization does not interpret ISO-8601-formatted timestampts to the native date/time object, as the jsii protocol has a $jsii$date wrapper for this purpose (node's JSON parsing does *NOT* detect dates automatically in this way, so host libraries should not either).
type Entropy interface {
	Increase() string
	Repeat(word string) string
}

// The jsii proxy struct for Entropy
type entropy struct {
	_ byte // padding
}

// Creates a new instance of Entropy.
func NewEntropy(clock IWallClock) Entropy {
	_init_.Initialize()
	e := entropy{}

	_jsii_.Create(
		"jsii-calc.Entropy",
		[]interface{}{clock},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&e,
	)
	return &e
}

// Increases entropy by consuming time from the clock (yes, this is a long shot, please don't judge).
//
// Returns: the time from the \`WallClock\`.
func (e *entropy) Increase() string {
	var returns string
	_jsii_.Invoke(
		e,
		"increase",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Implement this method such that it returns \`word\`.
//
// Returns: \`word\`.
func (e *entropy) Repeat(word string) string {
	var returns string
	_jsii_.Invoke(
		e,
		"repeat",
		[]interface{}{word},
		true,
		&returns,
	)
	return returns
}

type EnumDispenser interface {
}

// The jsii proxy struct for EnumDispenser
type enumDispenser struct {
	_ byte // padding
}

func EnumDispenser_RandomIntegerLikeEnum() AllTypesEnum {
	_init_.Initialize()
	var returns AllTypesEnum
	_jsii_.StaticInvoke(
		"jsii-calc.EnumDispenser",
		"randomIntegerLikeEnum",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func EnumDispenser_RandomStringLikeEnum() StringEnum {
	_init_.Initialize()
	var returns StringEnum
	_jsii_.StaticInvoke(
		"jsii-calc.EnumDispenser",
		"randomStringLikeEnum",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type EraseUndefinedHashValues interface {
}

// The jsii proxy struct for EraseUndefinedHashValues
type eraseUndefinedHashValues struct {
	_ byte // padding
}

func NewEraseUndefinedHashValues() EraseUndefinedHashValues {
	_init_.Initialize()
	e := eraseUndefinedHashValues{}

	_jsii_.Create(
		"jsii-calc.EraseUndefinedHashValues",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&e,
	)
	return &e
}

// Returns \`true\` if \`key\` is defined in \`opts\`.
//
// Used to check that undefined/null hash values
// are being erased when sending values from native code to JS.
func EraseUndefinedHashValues_DoesKeyExist(opts EraseUndefinedHashValuesOptions, key string) bool {
	_init_.Initialize()
	var returns bool
	_jsii_.StaticInvoke(
		"jsii-calc.EraseUndefinedHashValues",
		"doesKeyExist",
		[]interface{}{opts, key},
		true,
		&returns,
	)
	return returns
}

// We expect "prop1" to be erased.
func EraseUndefinedHashValues_Prop1IsNull() map[string]interface{} {
	_init_.Initialize()
	var returns map[string]interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.EraseUndefinedHashValues",
		"prop1IsNull",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// We expect "prop2" to be erased.
func EraseUndefinedHashValues_Prop2IsUndefined() map[string]interface{} {
	_init_.Initialize()
	var returns map[string]interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.EraseUndefinedHashValues",
		"prop2IsUndefined",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type EraseUndefinedHashValuesOptions struct {
	Option1 string \`json:"option1"\`
	Option2 string \`json:"option2"\`
}

// Experimental.
type ExperimentalClass interface {
	MutableProperty() float64
	SetMutableProperty(val float64)
	ReadonlyProperty() string
	Method()
}

// The jsii proxy struct for ExperimentalClass
type experimentalClass struct {
	_ byte // padding
}

func (e *experimentalClass) MutableProperty() float64 {
	var returns float64
	_jsii_.Get(
		e,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (e *experimentalClass) ReadonlyProperty() string {
	var returns string
	_jsii_.Get(
		e,
		"readonlyProperty",
		&returns,
	)
	return returns
}


func NewExperimentalClass(readonlyString string, mutableNumber float64) ExperimentalClass {
	_init_.Initialize()
	e := experimentalClass{}

	_jsii_.Create(
		"jsii-calc.ExperimentalClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&e,
	)
	return &e
}

func (e *experimentalClass) SetMutableProperty(val float64) {
	_jsii_.Set(
		e,
		"mutableProperty",
		val,
	)
}

// Experimental.
func (e *experimentalClass) Method() {
	var returns interface{}
	_jsii_.Invoke(
		e,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

// Experimental.
type ExperimentalEnum string

const (
	ExperimentalEnum_OPTION_A ExperimentalEnum = "OPTION_A"
	ExperimentalEnum_OPTION_B ExperimentalEnum = "OPTION_B"
)

// Experimental.
type ExperimentalStruct struct {
	// Experimental.
	ReadonlyProperty string \`json:"readonlyProperty"\`
}

type ExportedBaseClass interface {
	Success() bool
}

// The jsii proxy struct for ExportedBaseClass
type exportedBaseClass struct {
	_ byte // padding
}

func (e *exportedBaseClass) Success() bool {
	var returns bool
	_jsii_.Get(
		e,
		"success",
		&returns,
	)
	return returns
}


func NewExportedBaseClass(success bool) ExportedBaseClass {
	_init_.Initialize()
	e := exportedBaseClass{}

	_jsii_.Create(
		"jsii-calc.ExportedBaseClass",
		[]interface{}{success},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&e,
	)
	return &e
}

type ExtendsInternalInterface struct {
	Boom bool \`json:"boom"\`
	Prop string \`json:"prop"\`
}

type ExternalClass interface {
	MutableProperty() float64
	SetMutableProperty(val float64)
	ReadonlyProperty() string
	Method()
}

// The jsii proxy struct for ExternalClass
type externalClass struct {
	_ byte // padding
}

func (e *externalClass) MutableProperty() float64 {
	var returns float64
	_jsii_.Get(
		e,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (e *externalClass) ReadonlyProperty() string {
	var returns string
	_jsii_.Get(
		e,
		"readonlyProperty",
		&returns,
	)
	return returns
}


func NewExternalClass(readonlyString string, mutableNumber float64) ExternalClass {
	_init_.Initialize()
	e := externalClass{}

	_jsii_.Create(
		"jsii-calc.ExternalClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&e,
	)
	return &e
}

func (e *externalClass) SetMutableProperty(val float64) {
	_jsii_.Set(
		e,
		"mutableProperty",
		val,
	)
}

func (e *externalClass) Method() {
	var returns interface{}
	_jsii_.Invoke(
		e,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

type ExternalEnum string

const (
	ExternalEnum_OPTION_A ExternalEnum = "OPTION_A"
	ExternalEnum_OPTION_B ExternalEnum = "OPTION_B"
)

type ExternalStruct struct {
	ReadonlyProperty string \`json:"readonlyProperty"\`
}

type GiveMeStructs interface {
	StructLiteral() scopejsiicalclib.StructWithOnlyOptionals
	DerivedToFirst(derived DerivedStruct) scopejsiicalclib.MyFirstStruct
	ReadDerivedNonPrimitive(derived DerivedStruct) DoubleTrouble
	ReadFirstNumber(first scopejsiicalclib.MyFirstStruct) float64
}

// The jsii proxy struct for GiveMeStructs
type giveMeStructs struct {
	_ byte // padding
}

func (g *giveMeStructs) StructLiteral() scopejsiicalclib.StructWithOnlyOptionals {
	var returns scopejsiicalclib.StructWithOnlyOptionals
	_jsii_.Get(
		g,
		"structLiteral",
		&returns,
	)
	return returns
}


func NewGiveMeStructs() GiveMeStructs {
	_init_.Initialize()
	g := giveMeStructs{}

	_jsii_.Create(
		"jsii-calc.GiveMeStructs",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&g,
	)
	return &g
}

// Accepts a struct of type DerivedStruct and returns a struct of type FirstStruct.
func (g *giveMeStructs) DerivedToFirst(derived DerivedStruct) scopejsiicalclib.MyFirstStruct {
	var returns scopejsiicalclib.MyFirstStruct
	_jsii_.Invoke(
		g,
		"derivedToFirst",
		[]interface{}{derived},
		true,
		&returns,
	)
	return returns
}

// Returns the boolean from a DerivedStruct struct.
func (g *giveMeStructs) ReadDerivedNonPrimitive(derived DerivedStruct) DoubleTrouble {
	var returns DoubleTrouble
	_jsii_.Invoke(
		g,
		"readDerivedNonPrimitive",
		[]interface{}{derived},
		true,
		&returns,
	)
	return returns
}

// Returns the "anumber" from a MyFirstStruct struct;
func (g *giveMeStructs) ReadFirstNumber(first scopejsiicalclib.MyFirstStruct) float64 {
	var returns float64
	_jsii_.Invoke(
		g,
		"readFirstNumber",
		[]interface{}{first},
		true,
		&returns,
	)
	return returns
}

// These are some arguments you can pass to a method.
type Greetee struct {
	// The name of the greetee.
	Name string \`json:"name"\`
}

type GreetingAugmenter interface {
	BetterGreeting(friendly scopejsiicalclib.IFriendly) string
}

// The jsii proxy struct for GreetingAugmenter
type greetingAugmenter struct {
	_ byte // padding
}

func NewGreetingAugmenter() GreetingAugmenter {
	_init_.Initialize()
	g := greetingAugmenter{}

	_jsii_.Create(
		"jsii-calc.GreetingAugmenter",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&g,
	)
	return &g
}

func (g *greetingAugmenter) BetterGreeting(friendly scopejsiicalclib.IFriendly) string {
	var returns string
	_jsii_.Invoke(
		g,
		"betterGreeting",
		[]interface{}{friendly},
		true,
		&returns,
	)
	return returns
}

// We can return an anonymous interface implementation from an override without losing the interface declarations.
type IAnonymousImplementationProvider interface {
	ProvideAsClass() Implementation
	ProvideAsInterface() IAnonymouslyImplementMe
}

// The jsii proxy for IAnonymousImplementationProvider
type iAnonymousImplementationProvider struct {
	_ byte // padding
}

func (i *iAnonymousImplementationProvider) ProvideAsClass() Implementation {
	var returns Implementation
	_jsii_.Invoke(
		i,
		"provideAsClass",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (i *iAnonymousImplementationProvider) ProvideAsInterface() IAnonymouslyImplementMe {
	var returns IAnonymouslyImplementMe
	_jsii_.Invoke(
		i,
		"provideAsInterface",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type IAnonymouslyImplementMe interface {
	Verb() string
	Value() float64
}

// The jsii proxy for IAnonymouslyImplementMe
type iAnonymouslyImplementMe struct {
	_ byte // padding
}

func (i *iAnonymouslyImplementMe) Verb() string {
	var returns string
	_jsii_.Invoke(
		i,
		"verb",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (i *iAnonymouslyImplementMe) Value() float64 {
	var returns float64
	_jsii_.Get(
		i,
		"value",
		&returns,
	)
	return returns
}

type IAnotherPublicInterface interface {
	A() string
}

// The jsii proxy for IAnotherPublicInterface
type iAnotherPublicInterface struct {
	_ byte // padding
}

func (i *iAnotherPublicInterface) A() string {
	var returns string
	_jsii_.Get(
		i,
		"a",
		&returns,
	)
	return returns
}

func (i *iAnotherPublicInterface) SetA(val string) {
	_jsii_.Set(
		i,
		"a",
		val,
	)
}

type IBell interface {
	Ring()
}

// The jsii proxy for IBell
type iBell struct {
	_ byte // padding
}

func (i *iBell) Ring() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"ring",
		[]interface{}{},
		false,
		&returns,
	)
}

// Takes the object parameter as an interface.
type IBellRinger interface {
	YourTurn(bell IBell)
}

// The jsii proxy for IBellRinger
type iBellRinger struct {
	_ byte // padding
}

func (i *iBellRinger) YourTurn(bell IBell) {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"yourTurn",
		[]interface{}{bell},
		false,
		&returns,
	)
}

// Takes the object parameter as a calss.
type IConcreteBellRinger interface {
	YourTurn(bell Bell)
}

// The jsii proxy for IConcreteBellRinger
type iConcreteBellRinger struct {
	_ byte // padding
}

func (i *iConcreteBellRinger) YourTurn(bell Bell) {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"yourTurn",
		[]interface{}{bell},
		false,
		&returns,
	)
}

// Deprecated: useless interface
type IDeprecatedInterface interface {
	// Deprecated: services no purpose
	Method()
	// Deprecated: could be better
	MutableProperty() float64
}

// The jsii proxy for IDeprecatedInterface
type iDeprecatedInterface struct {
	_ byte // padding
}

func (i *iDeprecatedInterface) Method() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *iDeprecatedInterface) MutableProperty() float64 {
	var returns float64
	_jsii_.Get(
		i,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (i *iDeprecatedInterface) SetMutableProperty(val float64) {
	_jsii_.Set(
		i,
		"mutableProperty",
		val,
	)
}

// Experimental.
type IExperimentalInterface interface {
	// Experimental.
	Method()
	// Experimental.
	MutableProperty() float64
}

// The jsii proxy for IExperimentalInterface
type iExperimentalInterface struct {
	_ byte // padding
}

func (i *iExperimentalInterface) Method() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *iExperimentalInterface) MutableProperty() float64 {
	var returns float64
	_jsii_.Get(
		i,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (i *iExperimentalInterface) SetMutableProperty(val float64) {
	_jsii_.Set(
		i,
		"mutableProperty",
		val,
	)
}

type IExtendsPrivateInterface interface {
	MoreThings() []string
	Private() string
}

// The jsii proxy for IExtendsPrivateInterface
type iExtendsPrivateInterface struct {
	_ byte // padding
}

func (i *iExtendsPrivateInterface) MoreThings() []string {
	var returns []string
	_jsii_.Get(
		i,
		"moreThings",
		&returns,
	)
	return returns
}

func (i *iExtendsPrivateInterface) Private() string {
	var returns string
	_jsii_.Get(
		i,
		"private",
		&returns,
	)
	return returns
}

func (i *iExtendsPrivateInterface) SetPrivate(val string) {
	_jsii_.Set(
		i,
		"private",
		val,
	)
}

type IExternalInterface interface {
	Method()
	MutableProperty() float64
}

// The jsii proxy for IExternalInterface
type iExternalInterface struct {
	_ byte // padding
}

func (i *iExternalInterface) Method() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *iExternalInterface) MutableProperty() float64 {
	var returns float64
	_jsii_.Get(
		i,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (i *iExternalInterface) SetMutableProperty(val float64) {
	_jsii_.Set(
		i,
		"mutableProperty",
		val,
	)
}

// Even friendlier classes can implement this interface.
type IFriendlier interface {
	scopejsiicalclib.IFriendly
	// Say farewell.
	Farewell() string
	// Say goodbye.
	//
	// Returns: A goodbye blessing.
	Goodbye() string
}

// The jsii proxy for IFriendlier
type iFriendlier struct {
	scopejsiicalclib.IFriendly // extends @scope/jsii-calc-lib.IFriendly
}

func (i *iFriendlier) Farewell() string {
	var returns string
	_jsii_.Invoke(
		i,
		"farewell",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (i *iFriendlier) Goodbye() string {
	var returns string
	_jsii_.Invoke(
		i,
		"goodbye",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type IFriendlyRandomGenerator interface {
	scopejsiicalclib.IFriendly
	IRandomNumberGenerator
}

// The jsii proxy for IFriendlyRandomGenerator
type iFriendlyRandomGenerator struct {
	scopejsiicalclib.IFriendly // extends @scope/jsii-calc-lib.IFriendly
	iRandomNumberGenerator // extends jsii-calc.IRandomNumberGenerator
}

func (i *iFriendlyRandomGenerator) Hello() string {
	var returns string
	_jsii_.Invoke(
		i,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (i *iFriendlyRandomGenerator) Next() float64 {
	var returns float64
	_jsii_.Invoke(
		i,
		"next",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// awslabs/jsii#220 Abstract return type.
type IInterfaceImplementedByAbstractClass interface {
	PropFromInterface() string
}

// The jsii proxy for IInterfaceImplementedByAbstractClass
type iInterfaceImplementedByAbstractClass struct {
	_ byte // padding
}

func (i *iInterfaceImplementedByAbstractClass) PropFromInterface() string {
	var returns string
	_jsii_.Get(
		i,
		"propFromInterface",
		&returns,
	)
	return returns
}

// Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.
type IInterfaceThatShouldNotBeADataType interface {
	IInterfaceWithMethods
	OtherValue() string
}

// The jsii proxy for IInterfaceThatShouldNotBeADataType
type iInterfaceThatShouldNotBeADataType struct {
	iInterfaceWithMethods // extends jsii-calc.IInterfaceWithMethods
}

func (i *iInterfaceThatShouldNotBeADataType) OtherValue() string {
	var returns string
	_jsii_.Get(
		i,
		"otherValue",
		&returns,
	)
	return returns
}

type IInterfaceWithInternal interface {
	Visible()
}

// The jsii proxy for IInterfaceWithInternal
type iInterfaceWithInternal struct {
	_ byte // padding
}

func (i *iInterfaceWithInternal) Visible() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"visible",
		[]interface{}{},
		false,
		&returns,
	)
}

type IInterfaceWithMethods interface {
	DoThings()
	Value() string
}

// The jsii proxy for IInterfaceWithMethods
type iInterfaceWithMethods struct {
	_ byte // padding
}

func (i *iInterfaceWithMethods) DoThings() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"doThings",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *iInterfaceWithMethods) Value() string {
	var returns string
	_jsii_.Get(
		i,
		"value",
		&returns,
	)
	return returns
}

// awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.
type IInterfaceWithOptionalMethodArguments interface {
	Hello(arg1 string, arg2 float64)
}

// The jsii proxy for IInterfaceWithOptionalMethodArguments
type iInterfaceWithOptionalMethodArguments struct {
	_ byte // padding
}

func (i *iInterfaceWithOptionalMethodArguments) Hello(arg1 string, arg2 float64) {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"hello",
		[]interface{}{arg1, arg2},
		false,
		&returns,
	)
}

type IInterfaceWithProperties interface {
	ReadOnlyString() string
	ReadWriteString() string
}

// The jsii proxy for IInterfaceWithProperties
type iInterfaceWithProperties struct {
	_ byte // padding
}

func (i *iInterfaceWithProperties) ReadOnlyString() string {
	var returns string
	_jsii_.Get(
		i,
		"readOnlyString",
		&returns,
	)
	return returns
}

func (i *iInterfaceWithProperties) ReadWriteString() string {
	var returns string
	_jsii_.Get(
		i,
		"readWriteString",
		&returns,
	)
	return returns
}

func (i *iInterfaceWithProperties) SetReadWriteString(val string) {
	_jsii_.Set(
		i,
		"readWriteString",
		val,
	)
}

type IInterfaceWithPropertiesExtension interface {
	IInterfaceWithProperties
	Foo() float64
}

// The jsii proxy for IInterfaceWithPropertiesExtension
type iInterfaceWithPropertiesExtension struct {
	iInterfaceWithProperties // extends jsii-calc.IInterfaceWithProperties
}

func (i *iInterfaceWithPropertiesExtension) Foo() float64 {
	var returns float64
	_jsii_.Get(
		i,
		"foo",
		&returns,
	)
	return returns
}

func (i *iInterfaceWithPropertiesExtension) SetFoo(val float64) {
	_jsii_.Set(
		i,
		"foo",
		val,
	)
}

type Ijsii417Derived interface {
	Ijsii417PublicBaseOfBase
	Bar()
	Baz()
	Property() string
}

// The jsii proxy for Ijsii417Derived
type ijsii417Derived struct {
	ijsii417PublicBaseOfBase // extends jsii-calc.IJSII417PublicBaseOfBase
}

func (i *ijsii417Derived) Bar() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"bar",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *ijsii417Derived) Baz() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"baz",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *ijsii417Derived) Property() string {
	var returns string
	_jsii_.Get(
		i,
		"property",
		&returns,
	)
	return returns
}

type Ijsii417PublicBaseOfBase interface {
	Foo()
	HasRoot() bool
}

// The jsii proxy for Ijsii417PublicBaseOfBase
type ijsii417PublicBaseOfBase struct {
	_ byte // padding
}

func (i *ijsii417PublicBaseOfBase) Foo() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"foo",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *ijsii417PublicBaseOfBase) HasRoot() bool {
	var returns bool
	_jsii_.Get(
		i,
		"hasRoot",
		&returns,
	)
	return returns
}

type IJsii487External interface {
}

// The jsii proxy for IJsii487External
type iJsii487External struct {
	_ byte // padding
}

type IJsii487External2 interface {
}

// The jsii proxy for IJsii487External2
type iJsii487External2 struct {
	_ byte // padding
}

type IJsii496 interface {
}

// The jsii proxy for IJsii496
type iJsii496 struct {
	_ byte // padding
}

type IMutableObjectLiteral interface {
	Value() string
}

// The jsii proxy for IMutableObjectLiteral
type iMutableObjectLiteral struct {
	_ byte // padding
}

func (i *iMutableObjectLiteral) Value() string {
	var returns string
	_jsii_.Get(
		i,
		"value",
		&returns,
	)
	return returns
}

func (i *iMutableObjectLiteral) SetValue(val string) {
	_jsii_.Set(
		i,
		"value",
		val,
	)
}

type INonInternalInterface interface {
	IAnotherPublicInterface
	B() string
	C() string
}

// The jsii proxy for INonInternalInterface
type iNonInternalInterface struct {
	iAnotherPublicInterface // extends jsii-calc.IAnotherPublicInterface
}

func (i *iNonInternalInterface) B() string {
	var returns string
	_jsii_.Get(
		i,
		"b",
		&returns,
	)
	return returns
}

func (i *iNonInternalInterface) SetB(val string) {
	_jsii_.Set(
		i,
		"b",
		val,
	)
}

func (i *iNonInternalInterface) C() string {
	var returns string
	_jsii_.Get(
		i,
		"c",
		&returns,
	)
	return returns
}

func (i *iNonInternalInterface) SetC(val string) {
	_jsii_.Set(
		i,
		"c",
		val,
	)
}

// Make sure that setters are properly called on objects with interfaces.
type IObjectWithProperty interface {
	WasSet() bool
	Property() string
}

// The jsii proxy for IObjectWithProperty
type iObjectWithProperty struct {
	_ byte // padding
}

func (i *iObjectWithProperty) WasSet() bool {
	var returns bool
	_jsii_.Invoke(
		i,
		"wasSet",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (i *iObjectWithProperty) Property() string {
	var returns string
	_jsii_.Get(
		i,
		"property",
		&returns,
	)
	return returns
}

func (i *iObjectWithProperty) SetProperty(val string) {
	_jsii_.Set(
		i,
		"property",
		val,
	)
}

// Checks that optional result from interface method code generates correctly.
type IOptionalMethod interface {
	Optional() string
}

// The jsii proxy for IOptionalMethod
type iOptionalMethod struct {
	_ byte // padding
}

func (i *iOptionalMethod) Optional() string {
	var returns string
	_jsii_.Invoke(
		i,
		"optional",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type IPrivatelyImplemented interface {
	Success() bool
}

// The jsii proxy for IPrivatelyImplemented
type iPrivatelyImplemented struct {
	_ byte // padding
}

func (i *iPrivatelyImplemented) Success() bool {
	var returns bool
	_jsii_.Get(
		i,
		"success",
		&returns,
	)
	return returns
}

type IPublicInterface interface {
	Bye() string
}

// The jsii proxy for IPublicInterface
type iPublicInterface struct {
	_ byte // padding
}

func (i *iPublicInterface) Bye() string {
	var returns string
	_jsii_.Invoke(
		i,
		"bye",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type IPublicInterface2 interface {
	Ciao() string
}

// The jsii proxy for IPublicInterface2
type iPublicInterface2 struct {
	_ byte // padding
}

func (i *iPublicInterface2) Ciao() string {
	var returns string
	_jsii_.Invoke(
		i,
		"ciao",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Generates random numbers.
type IRandomNumberGenerator interface {
	// Returns another random number.
	//
	// Returns: A random number.
	Next() float64
}

// The jsii proxy for IRandomNumberGenerator
type iRandomNumberGenerator struct {
	_ byte // padding
}

func (i *iRandomNumberGenerator) Next() float64 {
	var returns float64
	_jsii_.Invoke(
		i,
		"next",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Returns a subclass of a known class which implements an interface.
type IReturnJsii976 interface {
	Foo() float64
}

// The jsii proxy for IReturnJsii976
type iReturnJsii976 struct {
	_ byte // padding
}

func (i *iReturnJsii976) Foo() float64 {
	var returns float64
	_jsii_.Get(
		i,
		"foo",
		&returns,
	)
	return returns
}

type IReturnsNumber interface {
	ObtainNumber() scopejsiicalclib.IDoublable
	NumberProp() scopejsiicalclib.Number
}

// The jsii proxy for IReturnsNumber
type iReturnsNumber struct {
	_ byte // padding
}

func (i *iReturnsNumber) ObtainNumber() scopejsiicalclib.IDoublable {
	var returns scopejsiicalclib.IDoublable
	_jsii_.Invoke(
		i,
		"obtainNumber",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (i *iReturnsNumber) NumberProp() scopejsiicalclib.Number {
	var returns scopejsiicalclib.Number
	_jsii_.Get(
		i,
		"numberProp",
		&returns,
	)
	return returns
}

type IStableInterface interface {
	Method()
	MutableProperty() float64
}

// The jsii proxy for IStableInterface
type iStableInterface struct {
	_ byte // padding
}

func (i *iStableInterface) Method() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

func (i *iStableInterface) MutableProperty() float64 {
	var returns float64
	_jsii_.Get(
		i,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (i *iStableInterface) SetMutableProperty(val float64) {
	_jsii_.Set(
		i,
		"mutableProperty",
		val,
	)
}

// Verifies that a "pure" implementation of an interface works correctly.
type IStructReturningDelegate interface {
	ReturnStruct() StructB
}

// The jsii proxy for IStructReturningDelegate
type iStructReturningDelegate struct {
	_ byte // padding
}

func (i *iStructReturningDelegate) ReturnStruct() StructB {
	var returns StructB
	_jsii_.Invoke(
		i,
		"returnStruct",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Implement this interface.
type IWallClock interface {
	// Returns the current time, formatted as an ISO-8601 string.
	Iso8601Now() string
}

// The jsii proxy for IWallClock
type iWallClock struct {
	_ byte // padding
}

func (i *iWallClock) Iso8601Now() string {
	var returns string
	_jsii_.Invoke(
		i,
		"iso8601Now",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type ImplementInternalInterface interface {
	Prop() string
	SetProp(val string)
}

// The jsii proxy struct for ImplementInternalInterface
type implementInternalInterface struct {
	_ byte // padding
}

func (i *implementInternalInterface) Prop() string {
	var returns string
	_jsii_.Get(
		i,
		"prop",
		&returns,
	)
	return returns
}


func NewImplementInternalInterface() ImplementInternalInterface {
	_init_.Initialize()
	i := implementInternalInterface{}

	_jsii_.Create(
		"jsii-calc.ImplementInternalInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&i,
	)
	return &i
}

func (i *implementInternalInterface) SetProp(val string) {
	_jsii_.Set(
		i,
		"prop",
		val,
	)
}

type Implementation interface {
	Value() float64
}

// The jsii proxy struct for Implementation
type implementation struct {
	_ byte // padding
}

func (i *implementation) Value() float64 {
	var returns float64
	_jsii_.Get(
		i,
		"value",
		&returns,
	)
	return returns
}


func NewImplementation() Implementation {
	_init_.Initialize()
	i := implementation{}

	_jsii_.Create(
		"jsii-calc.Implementation",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&i,
	)
	return &i
}

type ImplementsInterfaceWithInternal interface {
	IInterfaceWithInternal
	Visible()
}

// The jsii proxy struct for ImplementsInterfaceWithInternal
type implementsInterfaceWithInternal struct {
	iInterfaceWithInternal // implements jsii-calc.IInterfaceWithInternal
}

func NewImplementsInterfaceWithInternal() ImplementsInterfaceWithInternal {
	_init_.Initialize()
	i := implementsInterfaceWithInternal{}

	_jsii_.Create(
		"jsii-calc.ImplementsInterfaceWithInternal",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IInterfaceWithInternal"},
		[]_jsii_.Override{},
		&i,
	)
	return &i
}

func (i *implementsInterfaceWithInternal) Visible() {
	var returns interface{}
	_jsii_.Invoke(
		i,
		"visible",
		[]interface{}{},
		false,
		&returns,
	)
}

type ImplementsInterfaceWithInternalSubclass interface {
	ImplementsInterfaceWithInternal
}

// The jsii proxy struct for ImplementsInterfaceWithInternalSubclass
type implementsInterfaceWithInternalSubclass struct {
	implementsInterfaceWithInternal // extends jsii-calc.ImplementsInterfaceWithInternal
}

func NewImplementsInterfaceWithInternalSubclass() ImplementsInterfaceWithInternalSubclass {
	_init_.Initialize()
	i := implementsInterfaceWithInternalSubclass{}

	_jsii_.Create(
		"jsii-calc.ImplementsInterfaceWithInternalSubclass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&i,
	)
	return &i
}

type ImplementsPrivateInterface interface {
	Private() string
	SetPrivate(val string)
}

// The jsii proxy struct for ImplementsPrivateInterface
type implementsPrivateInterface struct {
	_ byte // padding
}

func (i *implementsPrivateInterface) Private() string {
	var returns string
	_jsii_.Get(
		i,
		"private",
		&returns,
	)
	return returns
}


func NewImplementsPrivateInterface() ImplementsPrivateInterface {
	_init_.Initialize()
	i := implementsPrivateInterface{}

	_jsii_.Create(
		"jsii-calc.ImplementsPrivateInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&i,
	)
	return &i
}

func (i *implementsPrivateInterface) SetPrivate(val string) {
	_jsii_.Set(
		i,
		"private",
		val,
	)
}

type ImplictBaseOfBase struct {
	Foo scopejsiicalcbaseofbase.Very \`json:"foo"\`
	Bar string \`json:"bar"\`
	Goo string \`json:"goo"\`
}

// ToVeryBaseProps is a convenience function to obtain a new scopejsiicalcbaseofbase.VeryBaseProps from this ImplictBaseOfBase.
func (i *ImplictBaseOfBase) ToVeryBaseProps() scopejsiicalcbaseofbase.VeryBaseProps {
	return scopejsiicalcbaseofbase.VeryBaseProps {
		Foo: i.Foo,
	}
}

// ToBaseProps is a convenience function to obtain a new scopejsiicalcbase.BaseProps from this ImplictBaseOfBase.
func (i *ImplictBaseOfBase) ToBaseProps() scopejsiicalcbase.BaseProps {
	return scopejsiicalcbase.BaseProps {
		Foo: i.Foo,
		Bar: i.Bar,
	}
}

type InbetweenClass interface {
	PublicClass
	IPublicInterface2
	Ciao() string
}

// The jsii proxy struct for InbetweenClass
type inbetweenClass struct {
	publicClass // extends jsii-calc.PublicClass
	iPublicInterface2 // implements jsii-calc.IPublicInterface2
}

func NewInbetweenClass() InbetweenClass {
	_init_.Initialize()
	i := inbetweenClass{}

	_jsii_.Create(
		"jsii-calc.InbetweenClass",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IPublicInterface2"},
		[]_jsii_.Override{},
		&i,
	)
	return &i
}

func (i *inbetweenClass) Ciao() string {
	var returns string
	_jsii_.Invoke(
		i,
		"ciao",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Verifies that collections of interfaces or structs are correctly handled.
//
// See: https://github.com/aws/jsii/issues/1196
type InterfaceCollections interface {
}

// The jsii proxy struct for InterfaceCollections
type interfaceCollections struct {
	_ byte // padding
}

func InterfaceCollections_ListOfInterfaces() []IBell {
	_init_.Initialize()
	var returns []IBell
	_jsii_.StaticInvoke(
		"jsii-calc.InterfaceCollections",
		"listOfInterfaces",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func InterfaceCollections_ListOfStructs() []StructA {
	_init_.Initialize()
	var returns []StructA
	_jsii_.StaticInvoke(
		"jsii-calc.InterfaceCollections",
		"listOfStructs",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func InterfaceCollections_MapOfInterfaces() map[string]IBell {
	_init_.Initialize()
	var returns map[string]IBell
	_jsii_.StaticInvoke(
		"jsii-calc.InterfaceCollections",
		"mapOfInterfaces",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func InterfaceCollections_MapOfStructs() map[string]StructA {
	_init_.Initialize()
	var returns map[string]StructA
	_jsii_.StaticInvoke(
		"jsii-calc.InterfaceCollections",
		"mapOfStructs",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// We can return arrays of interfaces See aws/aws-cdk#2362.
type InterfacesMaker interface {
}

// The jsii proxy struct for InterfacesMaker
type interfacesMaker struct {
	_ byte // padding
}

func InterfacesMaker_MakeInterfaces(count float64) []scopejsiicalclib.IDoublable {
	_init_.Initialize()
	var returns []scopejsiicalclib.IDoublable
	_jsii_.StaticInvoke(
		"jsii-calc.InterfacesMaker",
		"makeInterfaces",
		[]interface{}{count},
		true,
		&returns,
	)
	return returns
}

// Checks the "same instance" isomorphism is preserved within the constructor.
//
// Create a subclass of this, and assert that \`this.myself()\` actually returns
// \`this\` from within the constructor.
type Isomorphism interface {
	Myself() Isomorphism
}

// The jsii proxy struct for Isomorphism
type isomorphism struct {
	_ byte // padding
}

func NewIsomorphism() Isomorphism {
	_init_.Initialize()
	i := isomorphism{}

	_jsii_.Create(
		"jsii-calc.Isomorphism",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&i,
	)
	return &i
}

func (i *isomorphism) Myself() Isomorphism {
	var returns Isomorphism
	_jsii_.Invoke(
		i,
		"myself",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type Jsii417Derived interface {
	Jsii417PublicBaseOfBase
	Property() string
	Bar()
	Baz()
}

// The jsii proxy struct for Jsii417Derived
type jsii417Derived struct {
	jsii417PublicBaseOfBase // extends jsii-calc.JSII417PublicBaseOfBase
}

func (j *jsii417Derived) Property() string {
	var returns string
	_jsii_.Get(
		j,
		"property",
		&returns,
	)
	return returns
}


func NewJsii417Derived(property string) Jsii417Derived {
	_init_.Initialize()
	j := jsii417Derived{}

	_jsii_.Create(
		"jsii-calc.JSII417Derived",
		[]interface{}{property},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&j,
	)
	return &j
}

func (j *jsii417Derived) Bar() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"bar",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *jsii417Derived) Baz() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"baz",
		[]interface{}{},
		false,
		&returns,
	)
}

type Jsii417PublicBaseOfBase interface {
	HasRoot() bool
	Foo()
}

// The jsii proxy struct for Jsii417PublicBaseOfBase
type jsii417PublicBaseOfBase struct {
	_ byte // padding
}

func (j *jsii417PublicBaseOfBase) HasRoot() bool {
	var returns bool
	_jsii_.Get(
		j,
		"hasRoot",
		&returns,
	)
	return returns
}


func NewJsii417PublicBaseOfBase() Jsii417PublicBaseOfBase {
	_init_.Initialize()
	j := jsii417PublicBaseOfBase{}

	_jsii_.Create(
		"jsii-calc.JSII417PublicBaseOfBase",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&j,
	)
	return &j
}

func Jsii417PublicBaseOfBase_MakeInstance() Jsii417PublicBaseOfBase {
	_init_.Initialize()
	var returns Jsii417PublicBaseOfBase
	_jsii_.StaticInvoke(
		"jsii-calc.JSII417PublicBaseOfBase",
		"makeInstance",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (j *jsii417PublicBaseOfBase) Foo() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"foo",
		[]interface{}{},
		false,
		&returns,
	)
}

type JsObjectLiteralForInterface interface {
	GiveMeFriendly() scopejsiicalclib.IFriendly
	GiveMeFriendlyGenerator() IFriendlyRandomGenerator
}

// The jsii proxy struct for JsObjectLiteralForInterface
type jsObjectLiteralForInterface struct {
	_ byte // padding
}

func NewJsObjectLiteralForInterface() JsObjectLiteralForInterface {
	_init_.Initialize()
	j := jsObjectLiteralForInterface{}

	_jsii_.Create(
		"jsii-calc.JSObjectLiteralForInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&j,
	)
	return &j
}

func (j *jsObjectLiteralForInterface) GiveMeFriendly() scopejsiicalclib.IFriendly {
	var returns scopejsiicalclib.IFriendly
	_jsii_.Invoke(
		j,
		"giveMeFriendly",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (j *jsObjectLiteralForInterface) GiveMeFriendlyGenerator() IFriendlyRandomGenerator {
	var returns IFriendlyRandomGenerator
	_jsii_.Invoke(
		j,
		"giveMeFriendlyGenerator",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type JsObjectLiteralToNative interface {
	ReturnLiteral() JsObjectLiteralToNativeClass
}

// The jsii proxy struct for JsObjectLiteralToNative
type jsObjectLiteralToNative struct {
	_ byte // padding
}

func NewJsObjectLiteralToNative() JsObjectLiteralToNative {
	_init_.Initialize()
	j := jsObjectLiteralToNative{}

	_jsii_.Create(
		"jsii-calc.JSObjectLiteralToNative",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&j,
	)
	return &j
}

func (j *jsObjectLiteralToNative) ReturnLiteral() JsObjectLiteralToNativeClass {
	var returns JsObjectLiteralToNativeClass
	_jsii_.Invoke(
		j,
		"returnLiteral",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type JsObjectLiteralToNativeClass interface {
	PropA() string
	SetPropA(val string)
	PropB() float64
	SetPropB(val float64)
}

// The jsii proxy struct for JsObjectLiteralToNativeClass
type jsObjectLiteralToNativeClass struct {
	_ byte // padding
}

func (j *jsObjectLiteralToNativeClass) PropA() string {
	var returns string
	_jsii_.Get(
		j,
		"propA",
		&returns,
	)
	return returns
}

func (j *jsObjectLiteralToNativeClass) PropB() float64 {
	var returns float64
	_jsii_.Get(
		j,
		"propB",
		&returns,
	)
	return returns
}


func NewJsObjectLiteralToNativeClass() JsObjectLiteralToNativeClass {
	_init_.Initialize()
	j := jsObjectLiteralToNativeClass{}

	_jsii_.Create(
		"jsii-calc.JSObjectLiteralToNativeClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&j,
	)
	return &j
}

func (j *jsObjectLiteralToNativeClass) SetPropA(val string) {
	_jsii_.Set(
		j,
		"propA",
		val,
	)
}

func (j *jsObjectLiteralToNativeClass) SetPropB(val float64) {
	_jsii_.Set(
		j,
		"propB",
		val,
	)
}

type JavaReservedWords interface {
	While() string
	SetWhile(val string)
	Abstract()
	Assert()
	Boolean()
	Break()
	Byte()
	Case()
	Catch()
	Char()
	Class()
	Const()
	Continue()
	Default()
	Do()
	Double()
	Else()
	Enum()
	Extends()
	False()
	Final()
	Finally()
	Float()
	For()
	Goto()
	If()
	Implements()
	Import()
	Instanceof()
	Int()
	Interface()
	Long()
	Native()
	New()
	Null()
	Package()
	Private()
	Protected()
	Public()
	Return()
	Short()
	Static()
	Strictfp()
	Super()
	Switch()
	Synchronized()
	This()
	Throw()
	Throws()
	Transient()
	True()
	Try()
	Void()
	Volatile()
}

// The jsii proxy struct for JavaReservedWords
type javaReservedWords struct {
	_ byte // padding
}

func (j *javaReservedWords) While() string {
	var returns string
	_jsii_.Get(
		j,
		"while",
		&returns,
	)
	return returns
}


func NewJavaReservedWords() JavaReservedWords {
	_init_.Initialize()
	j := javaReservedWords{}

	_jsii_.Create(
		"jsii-calc.JavaReservedWords",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&j,
	)
	return &j
}

func (j *javaReservedWords) SetWhile(val string) {
	_jsii_.Set(
		j,
		"while",
		val,
	)
}

func (j *javaReservedWords) Abstract() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"abstract",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Assert() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"assert",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Boolean() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"boolean",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Break() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"break",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Byte() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"byte",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Case() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"case",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Catch() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"catch",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Char() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"char",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Class() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"class",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Const() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"const",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Continue() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"continue",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Default() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"default",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Do() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"do",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Double() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"double",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Else() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"else",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Enum() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"enum",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Extends() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"extends",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) False() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"false",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Final() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"final",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Finally() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"finally",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Float() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"float",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) For() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"for",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Goto() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"goto",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) If() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"if",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Implements() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"implements",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Import() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"import",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Instanceof() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"instanceof",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Int() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"int",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Interface() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"interface",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Long() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"long",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Native() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"native",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) New() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"new",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Null() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"null",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Package() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"package",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Private() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"private",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Protected() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"protected",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Public() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"public",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Return() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"return",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Short() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"short",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Static() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"static",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Strictfp() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"strictfp",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Super() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"super",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Switch() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"switch",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Synchronized() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"synchronized",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) This() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"this",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Throw() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"throw",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Throws() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"throws",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Transient() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"transient",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) True() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"true",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Try() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"try",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Void() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"void",
		[]interface{}{},
		false,
		&returns,
	)
}

func (j *javaReservedWords) Volatile() {
	var returns interface{}
	_jsii_.Invoke(
		j,
		"volatile",
		[]interface{}{},
		false,
		&returns,
	)
}

type Jsii487Derived interface {
	IJsii487External
	IJsii487External2
}

// The jsii proxy struct for Jsii487Derived
type jsii487Derived struct {
	iJsii487External // implements jsii-calc.IJsii487External
	iJsii487External2 // implements jsii-calc.IJsii487External2
}

func NewJsii487Derived() Jsii487Derived {
	_init_.Initialize()
	j := jsii487Derived{}

	_jsii_.Create(
		"jsii-calc.Jsii487Derived",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IJsii487External2", "jsii-calc.IJsii487External"},
		[]_jsii_.Override{},
		&j,
	)
	return &j
}

type Jsii496Derived interface {
	IJsii496
}

// The jsii proxy struct for Jsii496Derived
type jsii496Derived struct {
	iJsii496 // implements jsii-calc.IJsii496
}

func NewJsii496Derived() Jsii496Derived {
	_init_.Initialize()
	j := jsii496Derived{}

	_jsii_.Create(
		"jsii-calc.Jsii496Derived",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IJsii496"},
		[]_jsii_.Override{},
		&j,
	)
	return &j
}

// Host runtime version should be set via JSII_AGENT.
type JsiiAgent interface {
}

// The jsii proxy struct for JsiiAgent
type jsiiAgent struct {
	_ byte // padding
}

func NewJsiiAgent() JsiiAgent {
	_init_.Initialize()
	j := jsiiAgent{}

	_jsii_.Create(
		"jsii-calc.JsiiAgent",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&j,
	)
	return &j
}

func JsiiAgent_Value() string {
	_init_.Initialize()
	var returns string
	_jsii_.StaticGet(
		"jsii-calc.JsiiAgent",
		"value",
		&returns,
	)
	return returns
}

// Make sure structs are un-decorated on the way in.
// See: https://github.com/aws/aws-cdk/issues/5066
//
type JsonFormatter interface {
}

// The jsii proxy struct for JsonFormatter
type jsonFormatter struct {
	_ byte // padding
}

func JsonFormatter_AnyArray() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyArray",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyBooleanFalse() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyBooleanFalse",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyBooleanTrue() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyBooleanTrue",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyDate() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyDate",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyEmptyString() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyEmptyString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyFunction() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyFunction",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyHash() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyHash",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyNull() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyNull",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyNumber() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyNumber",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyRef() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyRef",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyString() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyUndefined() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyUndefined",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_AnyZero() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"anyZero",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func JsonFormatter_Stringify(value interface{}) string {
	_init_.Initialize()
	var returns string
	_jsii_.StaticInvoke(
		"jsii-calc.JsonFormatter",
		"stringify",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

// Validates that nested classes get correct code generation for the occasional forward reference.
type LevelOne interface {
	Props() LevelOneProps
}

// The jsii proxy struct for LevelOne
type levelOne struct {
	_ byte // padding
}

func (l *levelOne) Props() LevelOneProps {
	var returns LevelOneProps
	_jsii_.Get(
		l,
		"props",
		&returns,
	)
	return returns
}


func NewLevelOne(props LevelOneProps) LevelOne {
	_init_.Initialize()
	l := levelOne{}

	_jsii_.Create(
		"jsii-calc.LevelOne",
		[]interface{}{props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&l,
	)
	return &l
}

type PropBooleanValue struct {
	Value bool \`json:"value"\`
}

type PropProperty struct {
	Prop PropBooleanValue \`json:"prop"\`
}

type LevelOneProps struct {
	Prop PropProperty \`json:"prop"\`
}

// jsii#298: show default values in sphinx documentation, and respect newlines.
type LoadBalancedFargateServiceProps struct {
	// The container port of the application load balancer attached to your Fargate service.
	//
	// Corresponds to container port mapping.
	ContainerPort float64 \`json:"containerPort"\`
	// The number of cpu units used by the task.
	//
	// Valid values, which determines your range of valid values for the memory parameter:
	// 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
	// 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
	// 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
	// 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
	// 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
	//
	// This default is set in the underlying FargateTaskDefinition construct.
	Cpu string \`json:"cpu"\`
	// The amount (in MiB) of memory used by the task.
	//
	// This field is required and you must use one of the following values, which determines your range of valid values
	// for the cpu parameter:
	//
	// 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
	//
	// 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
	//
	// 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
	//
	// Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
	//
	// Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
	//
	// This default is set in the underlying FargateTaskDefinition construct.
	MemoryMiB string \`json:"memoryMiB"\`
	// Determines whether the Application Load Balancer will be internet-facing.
	PublicLoadBalancer bool \`json:"publicLoadBalancer"\`
	// Determines whether your Fargate Service will be assigned a public IP address.
	PublicTasks bool \`json:"publicTasks"\`
}

type MethodNamedProperty interface {
	Elite() float64
	Property() string
}

// The jsii proxy struct for MethodNamedProperty
type methodNamedProperty struct {
	_ byte // padding
}

func (m *methodNamedProperty) Elite() float64 {
	var returns float64
	_jsii_.Get(
		m,
		"elite",
		&returns,
	)
	return returns
}


func NewMethodNamedProperty() MethodNamedProperty {
	_init_.Initialize()
	m := methodNamedProperty{}

	_jsii_.Create(
		"jsii-calc.MethodNamedProperty",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&m,
	)
	return &m
}

func (m *methodNamedProperty) Property() string {
	var returns string
	_jsii_.Invoke(
		m,
		"property",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// The "*" binary operation.
type Multiply interface {
	BinaryOperation
	IFriendlier
	IRandomNumberGenerator
	Value() float64
	Farewell() string
	Goodbye() string
	Next() float64
	ToString() string
}

// The jsii proxy struct for Multiply
type multiply struct {
	binaryOperation // extends jsii-calc.BinaryOperation
	iFriendlier // implements jsii-calc.IFriendlier
	iRandomNumberGenerator // implements jsii-calc.IRandomNumberGenerator
}

func (m *multiply) Value() float64 {
	var returns float64
	_jsii_.Get(
		m,
		"value",
		&returns,
	)
	return returns
}

func (m *multiply) Lhs() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		m,
		"lhs",
		&returns,
	)
	return returns
}

func (m *multiply) Rhs() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		m,
		"rhs",
		&returns,
	)
	return returns
}


// Creates a BinaryOperation.
func NewMultiply(lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) Multiply {
	_init_.Initialize()
	m := multiply{}

	_jsii_.Create(
		"jsii-calc.Multiply",
		[]interface{}{lhs, rhs},
		[]_jsii_.FQN{"jsii-calc.IFriendlier", "jsii-calc.IRandomNumberGenerator"},
		[]_jsii_.Override{},
		&m,
	)
	return &m
}

// Say farewell.
func (m *multiply) Farewell() string {
	var returns string
	_jsii_.Invoke(
		m,
		"farewell",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Say goodbye.
func (m *multiply) Goodbye() string {
	var returns string
	_jsii_.Invoke(
		m,
		"goodbye",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Returns another random number.
func (m *multiply) Next() float64 {
	var returns float64
	_jsii_.Invoke(
		m,
		"next",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// (deprecated) String representation of the value.
func (m *multiply) ToString() string {
	var returns string
	_jsii_.Invoke(
		m,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// (deprecated) Say hello!
func (m *multiply) Hello() string {
	var returns string
	_jsii_.Invoke(
		m,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (m *multiply) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		m,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// The negation operation ("-value").
type Negate interface {
	UnaryOperation
	IFriendlier
	Value() float64
	Farewell() string
	Goodbye() string
	Hello() string
	ToString() string
}

// The jsii proxy struct for Negate
type negate struct {
	unaryOperation // extends jsii-calc.UnaryOperation
	iFriendlier // implements jsii-calc.IFriendlier
}

func (n *negate) Value() float64 {
	var returns float64
	_jsii_.Get(
		n,
		"value",
		&returns,
	)
	return returns
}

func (n *negate) Operand() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		n,
		"operand",
		&returns,
	)
	return returns
}


func NewNegate(operand scopejsiicalclib.NumericValue) Negate {
	_init_.Initialize()
	n := negate{}

	_jsii_.Create(
		"jsii-calc.Negate",
		[]interface{}{operand},
		[]_jsii_.FQN{"jsii-calc.IFriendlier"},
		[]_jsii_.Override{},
		&n,
	)
	return &n
}

// Say farewell.
func (n *negate) Farewell() string {
	var returns string
	_jsii_.Invoke(
		n,
		"farewell",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Say goodbye.
func (n *negate) Goodbye() string {
	var returns string
	_jsii_.Invoke(
		n,
		"goodbye",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// (deprecated) Say hello!
func (n *negate) Hello() string {
	var returns string
	_jsii_.Invoke(
		n,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// (deprecated) String representation of the value.
func (n *negate) ToString() string {
	var returns string
	_jsii_.Invoke(
		n,
		"toString",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Returns: the name of the class (to verify native type names are created for derived classes).
func (n *negate) TypeName() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"typeName",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type NestedClassInstance interface {
}

// The jsii proxy struct for NestedClassInstance
type nestedClassInstance struct {
	_ byte // padding
}

func NestedClassInstance_MakeInstance() submodule.NestedClass {
	_init_.Initialize()
	var returns submodule.NestedClass
	_jsii_.StaticInvoke(
		"jsii-calc.NestedClassInstance",
		"makeInstance",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type NestedStruct struct {
	// When provided, must be > 0.
	NumberProp float64 \`json:"numberProp"\`
}

// Test fixture to verify that jsii modules can use the node standard library.
type NodeStandardLibrary interface {
	OsPlatform() string
	CryptoSha256() string
	FsReadFile() string
	FsReadFileSync() string
}

// The jsii proxy struct for NodeStandardLibrary
type nodeStandardLibrary struct {
	_ byte // padding
}

func (n *nodeStandardLibrary) OsPlatform() string {
	var returns string
	_jsii_.Get(
		n,
		"osPlatform",
		&returns,
	)
	return returns
}


func NewNodeStandardLibrary() NodeStandardLibrary {
	_init_.Initialize()
	n := nodeStandardLibrary{}

	_jsii_.Create(
		"jsii-calc.NodeStandardLibrary",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&n,
	)
	return &n
}

// Uses node.js "crypto" module to calculate sha256 of a string.
//
// Returns: "6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50"
func (n *nodeStandardLibrary) CryptoSha256() string {
	var returns string
	_jsii_.Invoke(
		n,
		"cryptoSha256",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Reads a local resource file (resource.txt) asynchronously.
//
// Returns: "Hello, resource!"
func (n *nodeStandardLibrary) FsReadFile() string {
	var returns string
	_jsii_.Invoke(
		n,
		"fsReadFile",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Sync version of fsReadFile.
//
// Returns: "Hello, resource! SYNC!"
func (n *nodeStandardLibrary) FsReadFileSync() string {
	var returns string
	_jsii_.Invoke(
		n,
		"fsReadFileSync",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// jsii#282, aws-cdk#157: null should be treated as "undefined".
type NullShouldBeTreatedAsUndefined interface {
	ChangeMeToUndefined() string
	SetChangeMeToUndefined(val string)
	GiveMeUndefined(value interface{})
	GiveMeUndefinedInsideAnObject(input NullShouldBeTreatedAsUndefinedData)
	VerifyPropertyIsUndefined()
}

// The jsii proxy struct for NullShouldBeTreatedAsUndefined
type nullShouldBeTreatedAsUndefined struct {
	_ byte // padding
}

func (n *nullShouldBeTreatedAsUndefined) ChangeMeToUndefined() string {
	var returns string
	_jsii_.Get(
		n,
		"changeMeToUndefined",
		&returns,
	)
	return returns
}


func NewNullShouldBeTreatedAsUndefined(_param1 string, optional interface{}) NullShouldBeTreatedAsUndefined {
	_init_.Initialize()
	n := nullShouldBeTreatedAsUndefined{}

	_jsii_.Create(
		"jsii-calc.NullShouldBeTreatedAsUndefined",
		[]interface{}{_param1, optional},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&n,
	)
	return &n
}

func (n *nullShouldBeTreatedAsUndefined) SetChangeMeToUndefined(val string) {
	_jsii_.Set(
		n,
		"changeMeToUndefined",
		val,
	)
}

func (n *nullShouldBeTreatedAsUndefined) GiveMeUndefined(value interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"giveMeUndefined",
		[]interface{}{value},
		false,
		&returns,
	)
}

func (n *nullShouldBeTreatedAsUndefined) GiveMeUndefinedInsideAnObject(input NullShouldBeTreatedAsUndefinedData) {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"giveMeUndefinedInsideAnObject",
		[]interface{}{input},
		false,
		&returns,
	)
}

func (n *nullShouldBeTreatedAsUndefined) VerifyPropertyIsUndefined() {
	var returns interface{}
	_jsii_.Invoke(
		n,
		"verifyPropertyIsUndefined",
		[]interface{}{},
		false,
		&returns,
	)
}

type NullShouldBeTreatedAsUndefinedData struct {
	ArrayWithThreeElementsAndUndefinedAsSecondArgument []interface{} \`json:"arrayWithThreeElementsAndUndefinedAsSecondArgument"\`
	ThisShouldBeUndefined interface{} \`json:"thisShouldBeUndefined"\`
}

// This allows us to test that a reference can be stored for objects that implement interfaces.
type NumberGenerator interface {
	Generator() IRandomNumberGenerator
	SetGenerator(val IRandomNumberGenerator)
	IsSameGenerator(gen IRandomNumberGenerator) bool
	NextTimes100() float64
}

// The jsii proxy struct for NumberGenerator
type numberGenerator struct {
	_ byte // padding
}

func (n *numberGenerator) Generator() IRandomNumberGenerator {
	var returns IRandomNumberGenerator
	_jsii_.Get(
		n,
		"generator",
		&returns,
	)
	return returns
}


func NewNumberGenerator(generator IRandomNumberGenerator) NumberGenerator {
	_init_.Initialize()
	n := numberGenerator{}

	_jsii_.Create(
		"jsii-calc.NumberGenerator",
		[]interface{}{generator},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&n,
	)
	return &n
}

func (n *numberGenerator) SetGenerator(val IRandomNumberGenerator) {
	_jsii_.Set(
		n,
		"generator",
		val,
	)
}

func (n *numberGenerator) IsSameGenerator(gen IRandomNumberGenerator) bool {
	var returns bool
	_jsii_.Invoke(
		n,
		"isSameGenerator",
		[]interface{}{gen},
		true,
		&returns,
	)
	return returns
}

func (n *numberGenerator) NextTimes100() float64 {
	var returns float64
	_jsii_.Invoke(
		n,
		"nextTimes100",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Verify that object references can be passed inside collections.
type ObjectRefsInCollections interface {
	SumFromArray(values []scopejsiicalclib.NumericValue) float64
	SumFromMap(values map[string]scopejsiicalclib.NumericValue) float64
}

// The jsii proxy struct for ObjectRefsInCollections
type objectRefsInCollections struct {
	_ byte // padding
}

func NewObjectRefsInCollections() ObjectRefsInCollections {
	_init_.Initialize()
	o := objectRefsInCollections{}

	_jsii_.Create(
		"jsii-calc.ObjectRefsInCollections",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&o,
	)
	return &o
}

// Returns the sum of all values.
func (o *objectRefsInCollections) SumFromArray(values []scopejsiicalclib.NumericValue) float64 {
	var returns float64
	_jsii_.Invoke(
		o,
		"sumFromArray",
		[]interface{}{values},
		true,
		&returns,
	)
	return returns
}

// Returns the sum of all values in a map.
func (o *objectRefsInCollections) SumFromMap(values map[string]scopejsiicalclib.NumericValue) float64 {
	var returns float64
	_jsii_.Invoke(
		o,
		"sumFromMap",
		[]interface{}{values},
		true,
		&returns,
	)
	return returns
}

type ObjectWithPropertyProvider interface {
}

// The jsii proxy struct for ObjectWithPropertyProvider
type objectWithPropertyProvider struct {
	_ byte // padding
}

func ObjectWithPropertyProvider_Provide() IObjectWithProperty {
	_init_.Initialize()
	var returns IObjectWithProperty
	_jsii_.StaticInvoke(
		"jsii-calc.ObjectWithPropertyProvider",
		"provide",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Old class.
// Deprecated: Use the new class or the old class whatever you want because
// whatever you like is always the best
type Old interface {
	DoAThing()
}

// The jsii proxy struct for Old
type old struct {
	_ byte // padding
}

func NewOld() Old {
	_init_.Initialize()
	o := old{}

	_jsii_.Create(
		"jsii-calc.Old",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&o,
	)
	return &o
}

// Doo wop that thing.
// Deprecated: Use the new class or the old class whatever you want because
// whatever you like is always the best
func (o *old) DoAThing() {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"doAThing",
		[]interface{}{},
		false,
		&returns,
	)
}

type OptionalArgumentInvoker interface {
	InvokeWithOptional()
	InvokeWithoutOptional()
}

// The jsii proxy struct for OptionalArgumentInvoker
type optionalArgumentInvoker struct {
	_ byte // padding
}

func NewOptionalArgumentInvoker(delegate IInterfaceWithOptionalMethodArguments) OptionalArgumentInvoker {
	_init_.Initialize()
	o := optionalArgumentInvoker{}

	_jsii_.Create(
		"jsii-calc.OptionalArgumentInvoker",
		[]interface{}{delegate},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&o,
	)
	return &o
}

func (o *optionalArgumentInvoker) InvokeWithOptional() {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"invokeWithOptional",
		[]interface{}{},
		false,
		&returns,
	)
}

func (o *optionalArgumentInvoker) InvokeWithoutOptional() {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"invokeWithoutOptional",
		[]interface{}{},
		false,
		&returns,
	)
}

type OptionalConstructorArgument interface {
	Arg1() float64
	Arg2() string
	Arg3() string
}

// The jsii proxy struct for OptionalConstructorArgument
type optionalConstructorArgument struct {
	_ byte // padding
}

func (o *optionalConstructorArgument) Arg1() float64 {
	var returns float64
	_jsii_.Get(
		o,
		"arg1",
		&returns,
	)
	return returns
}

func (o *optionalConstructorArgument) Arg2() string {
	var returns string
	_jsii_.Get(
		o,
		"arg2",
		&returns,
	)
	return returns
}

func (o *optionalConstructorArgument) Arg3() string {
	var returns string
	_jsii_.Get(
		o,
		"arg3",
		&returns,
	)
	return returns
}


func NewOptionalConstructorArgument(arg1 float64, arg2 string, arg3 string) OptionalConstructorArgument {
	_init_.Initialize()
	o := optionalConstructorArgument{}

	_jsii_.Create(
		"jsii-calc.OptionalConstructorArgument",
		[]interface{}{arg1, arg2, arg3},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&o,
	)
	return &o
}

type OptionalStruct struct {
	Field string \`json:"field"\`
}

type OptionalStructConsumer interface {
	FieldValue() string
	ParameterWasUndefined() bool
}

// The jsii proxy struct for OptionalStructConsumer
type optionalStructConsumer struct {
	_ byte // padding
}

func (o *optionalStructConsumer) FieldValue() string {
	var returns string
	_jsii_.Get(
		o,
		"fieldValue",
		&returns,
	)
	return returns
}

func (o *optionalStructConsumer) ParameterWasUndefined() bool {
	var returns bool
	_jsii_.Get(
		o,
		"parameterWasUndefined",
		&returns,
	)
	return returns
}


func NewOptionalStructConsumer(optionalStruct OptionalStruct) OptionalStructConsumer {
	_init_.Initialize()
	o := optionalStructConsumer{}

	_jsii_.Create(
		"jsii-calc.OptionalStructConsumer",
		[]interface{}{optionalStruct},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&o,
	)
	return &o
}

// See: https://github.com/aws/jsii/issues/903
//
type OverridableProtectedMember interface {
	OverrideReadOnly() string
	OverrideReadWrite() string
	OverrideMe() string
	SwitchModes()
	ValueFromProtected() string
}

// The jsii proxy struct for OverridableProtectedMember
type overridableProtectedMember struct {
	_ byte // padding
}

func (o *overridableProtectedMember) OverrideReadOnly() string {
	var returns string
	_jsii_.Get(
		o,
		"overrideReadOnly",
		&returns,
	)
	return returns
}

func (o *overridableProtectedMember) OverrideReadWrite() string {
	var returns string
	_jsii_.Get(
		o,
		"overrideReadWrite",
		&returns,
	)
	return returns
}


func NewOverridableProtectedMember() OverridableProtectedMember {
	_init_.Initialize()
	o := overridableProtectedMember{}

	_jsii_.Create(
		"jsii-calc.OverridableProtectedMember",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&o,
	)
	return &o
}

func (o *overridableProtectedMember) SetOverrideReadWrite(val string) {
	_jsii_.Set(
		o,
		"overrideReadWrite",
		val,
	)
}

func (o *overridableProtectedMember) OverrideMe() string {
	var returns string
	_jsii_.Invoke(
		o,
		"overrideMe",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (o *overridableProtectedMember) SwitchModes() {
	var returns interface{}
	_jsii_.Invoke(
		o,
		"switchModes",
		[]interface{}{},
		false,
		&returns,
	)
}

func (o *overridableProtectedMember) ValueFromProtected() string {
	var returns string
	_jsii_.Invoke(
		o,
		"valueFromProtected",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type OverrideReturnsObject interface {
	Test(obj IReturnsNumber) float64
}

// The jsii proxy struct for OverrideReturnsObject
type overrideReturnsObject struct {
	_ byte // padding
}

func NewOverrideReturnsObject() OverrideReturnsObject {
	_init_.Initialize()
	o := overrideReturnsObject{}

	_jsii_.Create(
		"jsii-calc.OverrideReturnsObject",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&o,
	)
	return &o
}

func (o *overrideReturnsObject) Test(obj IReturnsNumber) float64 {
	var returns float64
	_jsii_.Invoke(
		o,
		"test",
		[]interface{}{obj},
		true,
		&returns,
	)
	return returns
}

// https://github.com/aws/jsii/issues/982.
type ParentStruct982 struct {
	Foo string \`json:"foo"\`
}

type PartiallyInitializedThisConsumer interface {
	ConsumePartiallyInitializedThis(obj ConstructorPassesThisOut, dt string, ev AllTypesEnum) string
}

// The jsii proxy struct for PartiallyInitializedThisConsumer
type partiallyInitializedThisConsumer struct {
	_ byte // padding
}

func NewPartiallyInitializedThisConsumer() PartiallyInitializedThisConsumer {
	_init_.Initialize()
	p := partiallyInitializedThisConsumer{}

	_jsii_.Create(
		"jsii-calc.PartiallyInitializedThisConsumer",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&p,
	)
	return &p
}

func (p *partiallyInitializedThisConsumer) ConsumePartiallyInitializedThis(obj ConstructorPassesThisOut, dt string, ev AllTypesEnum) string {
	var returns string
	_jsii_.Invoke(
		p,
		"consumePartiallyInitializedThis",
		[]interface{}{obj, dt, ev},
		true,
		&returns,
	)
	return returns
}

type Polymorphism interface {
	SayHello(friendly scopejsiicalclib.IFriendly) string
}

// The jsii proxy struct for Polymorphism
type polymorphism struct {
	_ byte // padding
}

func NewPolymorphism() Polymorphism {
	_init_.Initialize()
	p := polymorphism{}

	_jsii_.Create(
		"jsii-calc.Polymorphism",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&p,
	)
	return &p
}

func (p *polymorphism) SayHello(friendly scopejsiicalclib.IFriendly) string {
	var returns string
	_jsii_.Invoke(
		p,
		"sayHello",
		[]interface{}{friendly},
		true,
		&returns,
	)
	return returns
}

// The power operation.
type Power interface {
	composition.CompositeOperation
	Base() scopejsiicalclib.NumericValue
	Expression() scopejsiicalclib.NumericValue
	Pow() scopejsiicalclib.NumericValue
}

// The jsii proxy struct for Power
type power struct {
	composition.CompositeOperation // extends jsii-calc.composition.CompositeOperation
}

func (p *power) Base() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		p,
		"base",
		&returns,
	)
	return returns
}

func (p *power) Expression() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		p,
		"expression",
		&returns,
	)
	return returns
}

func (p *power) Pow() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		p,
		"pow",
		&returns,
	)
	return returns
}


// Creates a Power operation.
func NewPower(base scopejsiicalclib.NumericValue, pow scopejsiicalclib.NumericValue) Power {
	_init_.Initialize()
	p := power{}

	_jsii_.Create(
		"jsii-calc.Power",
		[]interface{}{base, pow},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&p,
	)
	return &p
}

// Reproduction for https://github.com/aws/jsii/issues/1113 Where a method or property named "property" would result in impossible to load Python code.
type PropertyNamedProperty interface {
	Property() string
	YetAnoterOne() bool
}

// The jsii proxy struct for PropertyNamedProperty
type propertyNamedProperty struct {
	_ byte // padding
}

func (p *propertyNamedProperty) Property() string {
	var returns string
	_jsii_.Get(
		p,
		"property",
		&returns,
	)
	return returns
}

func (p *propertyNamedProperty) YetAnoterOne() bool {
	var returns bool
	_jsii_.Get(
		p,
		"yetAnoterOne",
		&returns,
	)
	return returns
}


func NewPropertyNamedProperty() PropertyNamedProperty {
	_init_.Initialize()
	p := propertyNamedProperty{}

	_jsii_.Create(
		"jsii-calc.PropertyNamedProperty",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&p,
	)
	return &p
}

type PublicClass interface {
	Hello()
}

// The jsii proxy struct for PublicClass
type publicClass struct {
	_ byte // padding
}

func NewPublicClass() PublicClass {
	_init_.Initialize()
	p := publicClass{}

	_jsii_.Create(
		"jsii-calc.PublicClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&p,
	)
	return &p
}

func (p *publicClass) Hello() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"hello",
		[]interface{}{},
		false,
		&returns,
	)
}

type PythonReservedWords interface {
	And()
	As()
	Assert()
	Async()
	Await()
	Break()
	Class()
	Continue()
	Def()
	Del()
	Elif()
	Else()
	Except()
	Finally()
	For()
	From()
	Global()
	If()
	Import()
	In()
	Is()
	Lambda()
	Nonlocal()
	Not()
	Or()
	Pass()
	Raise()
	Return()
	Try()
	While()
	With()
	Yield()
}

// The jsii proxy struct for PythonReservedWords
type pythonReservedWords struct {
	_ byte // padding
}

func NewPythonReservedWords() PythonReservedWords {
	_init_.Initialize()
	p := pythonReservedWords{}

	_jsii_.Create(
		"jsii-calc.PythonReservedWords",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&p,
	)
	return &p
}

func (p *pythonReservedWords) And() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"and",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) As() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"as",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Assert() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"assert",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Async() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"async",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Await() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"await",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Break() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"break",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Class() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"class",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Continue() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"continue",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Def() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"def",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Del() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"del",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Elif() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"elif",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Else() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"else",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Except() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"except",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Finally() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"finally",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) For() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"for",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) From() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"from",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Global() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"global",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) If() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"if",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Import() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"import",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) In() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"in",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Is() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"is",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Lambda() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"lambda",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Nonlocal() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"nonlocal",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Not() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"not",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Or() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"or",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Pass() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"pass",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Raise() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"raise",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Return() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"return",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Try() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"try",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) While() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"while",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) With() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"with",
		[]interface{}{},
		false,
		&returns,
	)
}

func (p *pythonReservedWords) Yield() {
	var returns interface{}
	_jsii_.Invoke(
		p,
		"yield",
		[]interface{}{},
		false,
		&returns,
	)
}

// See awslabs/jsii#138.
type ReferenceEnumFromScopedPackage interface {
	Foo() scopejsiicalclib.EnumFromScopedModule
	SetFoo(val scopejsiicalclib.EnumFromScopedModule)
	LoadFoo() scopejsiicalclib.EnumFromScopedModule
	SaveFoo(value scopejsiicalclib.EnumFromScopedModule)
}

// The jsii proxy struct for ReferenceEnumFromScopedPackage
type referenceEnumFromScopedPackage struct {
	_ byte // padding
}

func (r *referenceEnumFromScopedPackage) Foo() scopejsiicalclib.EnumFromScopedModule {
	var returns scopejsiicalclib.EnumFromScopedModule
	_jsii_.Get(
		r,
		"foo",
		&returns,
	)
	return returns
}


func NewReferenceEnumFromScopedPackage() ReferenceEnumFromScopedPackage {
	_init_.Initialize()
	r := referenceEnumFromScopedPackage{}

	_jsii_.Create(
		"jsii-calc.ReferenceEnumFromScopedPackage",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&r,
	)
	return &r
}

func (r *referenceEnumFromScopedPackage) SetFoo(val scopejsiicalclib.EnumFromScopedModule) {
	_jsii_.Set(
		r,
		"foo",
		val,
	)
}

func (r *referenceEnumFromScopedPackage) LoadFoo() scopejsiicalclib.EnumFromScopedModule {
	var returns scopejsiicalclib.EnumFromScopedModule
	_jsii_.Invoke(
		r,
		"loadFoo",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (r *referenceEnumFromScopedPackage) SaveFoo(value scopejsiicalclib.EnumFromScopedModule) {
	var returns interface{}
	_jsii_.Invoke(
		r,
		"saveFoo",
		[]interface{}{value},
		false,
		&returns,
	)
}

// Helps ensure the JSII kernel & runtime cooperate correctly when an un-exported instance of a class is returned with a declared type that is an exported interface, and the instance inherits from an exported class.
//
// Returns: an instance of an un-exported class that extends \`ExportedBaseClass\`, declared as \`IPrivatelyImplemented\`.
// See: https://github.com/aws/jsii/issues/320
//
type ReturnsPrivateImplementationOfInterface interface {
	PrivateImplementation() IPrivatelyImplemented
}

// The jsii proxy struct for ReturnsPrivateImplementationOfInterface
type returnsPrivateImplementationOfInterface struct {
	_ byte // padding
}

func (r *returnsPrivateImplementationOfInterface) PrivateImplementation() IPrivatelyImplemented {
	var returns IPrivatelyImplemented
	_jsii_.Get(
		r,
		"privateImplementation",
		&returns,
	)
	return returns
}


func NewReturnsPrivateImplementationOfInterface() ReturnsPrivateImplementationOfInterface {
	_init_.Initialize()
	r := returnsPrivateImplementationOfInterface{}

	_jsii_.Create(
		"jsii-calc.ReturnsPrivateImplementationOfInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&r,
	)
	return &r
}

// This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.
//
// This is cheating with the (current) declared types, but this is the "more
// idiomatic" way for Pythonists.
type RootStruct struct {
	// May not be empty.
	StringProp string \`json:"stringProp"\`
	NestedStruct NestedStruct \`json:"nestedStruct"\`
}

type RootStructValidator interface {
}

// The jsii proxy struct for RootStructValidator
type rootStructValidator struct {
	_ byte // padding
}

func RootStructValidator_Validate(struct_ RootStruct) {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.RootStructValidator",
		"validate",
		[]interface{}{struct_},
		false,
		&returns,
	)
}

type RuntimeTypeChecking interface {
	MethodWithDefaultedArguments(arg1 float64, arg2 string, arg3 string)
	MethodWithOptionalAnyArgument(arg interface{})
	MethodWithOptionalArguments(arg1 float64, arg2 string, arg3 string)
}

// The jsii proxy struct for RuntimeTypeChecking
type runtimeTypeChecking struct {
	_ byte // padding
}

func NewRuntimeTypeChecking() RuntimeTypeChecking {
	_init_.Initialize()
	r := runtimeTypeChecking{}

	_jsii_.Create(
		"jsii-calc.RuntimeTypeChecking",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&r,
	)
	return &r
}

func (r *runtimeTypeChecking) MethodWithDefaultedArguments(arg1 float64, arg2 string, arg3 string) {
	var returns interface{}
	_jsii_.Invoke(
		r,
		"methodWithDefaultedArguments",
		[]interface{}{arg1, arg2, arg3},
		false,
		&returns,
	)
}

func (r *runtimeTypeChecking) MethodWithOptionalAnyArgument(arg interface{}) {
	var returns interface{}
	_jsii_.Invoke(
		r,
		"methodWithOptionalAnyArgument",
		[]interface{}{arg},
		false,
		&returns,
	)
}

// Used to verify verification of number of method arguments.
func (r *runtimeTypeChecking) MethodWithOptionalArguments(arg1 float64, arg2 string, arg3 string) {
	var returns interface{}
	_jsii_.Invoke(
		r,
		"methodWithOptionalArguments",
		[]interface{}{arg1, arg2, arg3},
		false,
		&returns,
	)
}

type SecondLevelStruct struct {
	// It's long and required.
	DeeperRequiredProp string \`json:"deeperRequiredProp"\`
	// It's long, but you'll almost never pass it.
	DeeperOptionalProp string \`json:"deeperOptionalProp"\`
}

// Test that a single instance can be returned under two different FQNs.
//
// JSII clients can instantiate 2 different strongly-typed wrappers for the same
// object. Unfortunately, this will break object equality, but if we didn't do
// this it would break runtime type checks in the JVM or CLR.
type SingleInstanceTwoTypes interface {
	Interface1() InbetweenClass
	Interface2() IPublicInterface
}

// The jsii proxy struct for SingleInstanceTwoTypes
type singleInstanceTwoTypes struct {
	_ byte // padding
}

func NewSingleInstanceTwoTypes() SingleInstanceTwoTypes {
	_init_.Initialize()
	s := singleInstanceTwoTypes{}

	_jsii_.Create(
		"jsii-calc.SingleInstanceTwoTypes",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

func (s *singleInstanceTwoTypes) Interface1() InbetweenClass {
	var returns InbetweenClass
	_jsii_.Invoke(
		s,
		"interface1",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *singleInstanceTwoTypes) Interface2() IPublicInterface {
	var returns IPublicInterface
	_jsii_.Invoke(
		s,
		"interface2",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Verifies that singleton enums are handled correctly.
//
// https://github.com/aws/jsii/issues/231
type SingletonInt interface {
	IsSingletonInt(value float64) bool
}

// The jsii proxy struct for SingletonInt
type singletonInt struct {
	_ byte // padding
}

func (s *singletonInt) IsSingletonInt(value float64) bool {
	var returns bool
	_jsii_.Invoke(
		s,
		"isSingletonInt",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

// A singleton integer.
type SingletonIntEnum string

const (
	SingletonIntEnum_SINGLETON_INT SingletonIntEnum = "SINGLETON_INT"
)

// Verifies that singleton enums are handled correctly.
//
// https://github.com/aws/jsii/issues/231
type SingletonString interface {
	IsSingletonString(value string) bool
}

// The jsii proxy struct for SingletonString
type singletonString struct {
	_ byte // padding
}

func (s *singletonString) IsSingletonString(value string) bool {
	var returns bool
	_jsii_.Invoke(
		s,
		"isSingletonString",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

// A singleton string.
type SingletonStringEnum string

const (
	SingletonStringEnum_SINGLETON_STRING SingletonStringEnum = "SINGLETON_STRING"
)

type SmellyStruct struct {
	Property string \`json:"property"\`
	YetAnoterOne bool \`json:"yetAnoterOne"\`
}

type SomeTypeJsii976 interface {
}

// The jsii proxy struct for SomeTypeJsii976
type someTypeJsii976 struct {
	_ byte // padding
}

func NewSomeTypeJsii976() SomeTypeJsii976 {
	_init_.Initialize()
	s := someTypeJsii976{}

	_jsii_.Create(
		"jsii-calc.SomeTypeJsii976",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

func SomeTypeJsii976_ReturnAnonymous() interface{} {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.SomeTypeJsii976",
		"returnAnonymous",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func SomeTypeJsii976_ReturnReturn() IReturnJsii976 {
	_init_.Initialize()
	var returns IReturnJsii976
	_jsii_.StaticInvoke(
		"jsii-calc.SomeTypeJsii976",
		"returnReturn",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type StableClass interface {
	MutableProperty() float64
	SetMutableProperty(val float64)
	ReadonlyProperty() string
	Method()
}

// The jsii proxy struct for StableClass
type stableClass struct {
	_ byte // padding
}

func (s *stableClass) MutableProperty() float64 {
	var returns float64
	_jsii_.Get(
		s,
		"mutableProperty",
		&returns,
	)
	return returns
}

func (s *stableClass) ReadonlyProperty() string {
	var returns string
	_jsii_.Get(
		s,
		"readonlyProperty",
		&returns,
	)
	return returns
}


func NewStableClass(readonlyString string, mutableNumber float64) StableClass {
	_init_.Initialize()
	s := stableClass{}

	_jsii_.Create(
		"jsii-calc.StableClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

func (s *stableClass) SetMutableProperty(val float64) {
	_jsii_.Set(
		s,
		"mutableProperty",
		val,
	)
}

func (s *stableClass) Method() {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

type StableEnum string

const (
	StableEnum_OPTION_A StableEnum = "OPTION_A"
	StableEnum_OPTION_B StableEnum = "OPTION_B"
)

type StableStruct struct {
	ReadonlyProperty string \`json:"readonlyProperty"\`
}

// This is used to validate the ability to use \`this\` from within a static context.
//
// https://github.com/awslabs/aws-cdk/issues/2304
type StaticContext interface {
}

// The jsii proxy struct for StaticContext
type staticContext struct {
	_ byte // padding
}

func StaticContext_CanAccessStaticContext() bool {
	_init_.Initialize()
	var returns bool
	_jsii_.StaticInvoke(
		"jsii-calc.StaticContext",
		"canAccessStaticContext",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func StaticContext_StaticVariable() bool {
	_init_.Initialize()
	var returns bool
	_jsii_.StaticGet(
		"jsii-calc.StaticContext",
		"staticVariable",
		&returns,
	)
	return returns
}

func StaticContext_SetStaticVariable(val bool) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.StaticContext",
		"staticVariable",
		val,
	)
}

type StaticHelloChild interface {
	StaticHelloParent
}

// The jsii proxy struct for StaticHelloChild
type staticHelloChild struct {
	staticHelloParent // extends jsii-calc.StaticHelloParent
}

func StaticHelloChild_Method() {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.StaticHelloChild",
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

func StaticHelloChild_Property() float64 {
	_init_.Initialize()
	var returns float64
	_jsii_.StaticGet(
		"jsii-calc.StaticHelloChild",
		"property",
		&returns,
	)
	return returns
}

// Static methods that override parent class are technically overrides (the inheritance of statics is part of the ES6 specification), but certain other languages such as Java do not carry statics in the inheritance chain at all, so they cannot be overridden, only hidden.
//
// The difference is fairly minor (for typical use-cases, the end result is the
// same), however this has implications on what the generated code should look
// like.
type StaticHelloParent interface {
}

// The jsii proxy struct for StaticHelloParent
type staticHelloParent struct {
	_ byte // padding
}

func NewStaticHelloParent() StaticHelloParent {
	_init_.Initialize()
	s := staticHelloParent{}

	_jsii_.Create(
		"jsii-calc.StaticHelloParent",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

func StaticHelloParent_Method() {
	_init_.Initialize()
	var returns interface{}
	_jsii_.StaticInvoke(
		"jsii-calc.StaticHelloParent",
		"method",
		[]interface{}{},
		false,
		&returns,
	)
}

func StaticHelloParent_Property() float64 {
	_init_.Initialize()
	var returns float64
	_jsii_.StaticGet(
		"jsii-calc.StaticHelloParent",
		"property",
		&returns,
	)
	return returns
}

type Statics interface {
	Value() string
	JustMethod() string
}

// The jsii proxy struct for Statics
type statics struct {
	_ byte // padding
}

func (s *statics) Value() string {
	var returns string
	_jsii_.Get(
		s,
		"value",
		&returns,
	)
	return returns
}


func NewStatics(value string) Statics {
	_init_.Initialize()
	s := statics{}

	_jsii_.Create(
		"jsii-calc.Statics",
		[]interface{}{value},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

// Jsdocs for static method.
func Statics_StaticMethod(name string) string {
	_init_.Initialize()
	var returns string
	_jsii_.StaticInvoke(
		"jsii-calc.Statics",
		"staticMethod",
		[]interface{}{name},
		true,
		&returns,
	)
	return returns
}

func Statics_Bar() float64 {
	_init_.Initialize()
	var returns float64
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"BAR",
		&returns,
	)
	return returns
}

func Statics_ConstObj() DoubleTrouble {
	_init_.Initialize()
	var returns DoubleTrouble
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"ConstObj",
		&returns,
	)
	return returns
}

func Statics_Foo() string {
	_init_.Initialize()
	var returns string
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"Foo",
		&returns,
	)
	return returns
}

func Statics_Instance() Statics {
	_init_.Initialize()
	var returns Statics
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"instance",
		&returns,
	)
	return returns
}

func Statics_SetInstance(val Statics) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.Statics",
		"instance",
		val,
	)
}

func Statics_NonConstStatic() float64 {
	_init_.Initialize()
	var returns float64
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"nonConstStatic",
		&returns,
	)
	return returns
}

func Statics_SetNonConstStatic(val float64) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.Statics",
		"nonConstStatic",
		val,
	)
}

func Statics_ZooBar() map[string]string {
	_init_.Initialize()
	var returns map[string]string
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"zooBar",
		&returns,
	)
	return returns
}

func (s *statics) JustMethod() string {
	var returns string
	_jsii_.Invoke(
		s,
		"justMethod",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type StringEnum string

const (
	StringEnum_A StringEnum = "A"
	StringEnum_B StringEnum = "B"
	StringEnum_C StringEnum = "C"
)

type StripInternal interface {
	YouSeeMe() string
	SetYouSeeMe(val string)
}

// The jsii proxy struct for StripInternal
type stripInternal struct {
	_ byte // padding
}

func (s *stripInternal) YouSeeMe() string {
	var returns string
	_jsii_.Get(
		s,
		"youSeeMe",
		&returns,
	)
	return returns
}


func NewStripInternal() StripInternal {
	_init_.Initialize()
	s := stripInternal{}

	_jsii_.Create(
		"jsii-calc.StripInternal",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

func (s *stripInternal) SetYouSeeMe(val string) {
	_jsii_.Set(
		s,
		"youSeeMe",
		val,
	)
}

// We can serialize and deserialize structs without silently ignoring optional fields.
type StructA struct {
	RequiredString string \`json:"requiredString"\`
	OptionalNumber float64 \`json:"optionalNumber"\`
	OptionalString string \`json:"optionalString"\`
}

// This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.
type StructB struct {
	RequiredString string \`json:"requiredString"\`
	OptionalBoolean bool \`json:"optionalBoolean"\`
	OptionalStructA StructA \`json:"optionalStructA"\`
}

// Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.
//
// See: https://github.com/aws/aws-cdk/issues/4302
type StructParameterType struct {
	Scope string \`json:"scope"\`
	Props bool \`json:"props"\`
}

// Just because we can.
type StructPassing interface {
}

// The jsii proxy struct for StructPassing
type structPassing struct {
	_ byte // padding
}

func NewStructPassing() StructPassing {
	_init_.Initialize()
	s := structPassing{}

	_jsii_.Create(
		"jsii-calc.StructPassing",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

func StructPassing_HowManyVarArgsDidIPass(_positional float64, inputs TopLevelStruct) float64 {
	_init_.Initialize()
	var returns float64
	_jsii_.StaticInvoke(
		"jsii-calc.StructPassing",
		"howManyVarArgsDidIPass",
		[]interface{}{_positional, inputs},
		true,
		&returns,
	)
	return returns
}

func StructPassing_RoundTrip(_positional float64, input TopLevelStruct) TopLevelStruct {
	_init_.Initialize()
	var returns TopLevelStruct
	_jsii_.StaticInvoke(
		"jsii-calc.StructPassing",
		"roundTrip",
		[]interface{}{_positional, input},
		true,
		&returns,
	)
	return returns
}

type StructUnionConsumer interface {
}

// The jsii proxy struct for StructUnionConsumer
type structUnionConsumer struct {
	_ byte // padding
}

func StructUnionConsumer_IsStructA(struct_ interface{}) bool {
	_init_.Initialize()
	var returns bool
	_jsii_.StaticInvoke(
		"jsii-calc.StructUnionConsumer",
		"isStructA",
		[]interface{}{struct_},
		true,
		&returns,
	)
	return returns
}

func StructUnionConsumer_IsStructB(struct_ interface{}) bool {
	_init_.Initialize()
	var returns bool
	_jsii_.StaticInvoke(
		"jsii-calc.StructUnionConsumer",
		"isStructB",
		[]interface{}{struct_},
		true,
		&returns,
	)
	return returns
}

type StructWithJavaReservedWords struct {
	Default string \`json:"default"\`
	Assert string \`json:"assert"\`
	Result string \`json:"result"\`
	That string \`json:"that"\`
}

// An operation that sums multiple values.
type Sum interface {
	composition.CompositeOperation
	Expression() scopejsiicalclib.NumericValue
	Parts() []scopejsiicalclib.NumericValue
	SetParts(val []scopejsiicalclib.NumericValue)
}

// The jsii proxy struct for Sum
type sum struct {
	composition.CompositeOperation // extends jsii-calc.composition.CompositeOperation
}

func (s *sum) Expression() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		s,
		"expression",
		&returns,
	)
	return returns
}

func (s *sum) Parts() []scopejsiicalclib.NumericValue {
	var returns []scopejsiicalclib.NumericValue
	_jsii_.Get(
		s,
		"parts",
		&returns,
	)
	return returns
}


func NewSum() Sum {
	_init_.Initialize()
	s := sum{}

	_jsii_.Create(
		"jsii-calc.Sum",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

func (s *sum) SetParts(val []scopejsiicalclib.NumericValue) {
	_jsii_.Set(
		s,
		"parts",
		val,
	)
}

type SupportsNiceJavaBuilder interface {
	SupportsNiceJavaBuilderWithRequiredProps
	Id() float64
	Rest() []string
}

// The jsii proxy struct for SupportsNiceJavaBuilder
type supportsNiceJavaBuilder struct {
	supportsNiceJavaBuilderWithRequiredProps // extends jsii-calc.SupportsNiceJavaBuilderWithRequiredProps
}

func (s *supportsNiceJavaBuilder) Id() float64 {
	var returns float64
	_jsii_.Get(
		s,
		"id",
		&returns,
	)
	return returns
}

func (s *supportsNiceJavaBuilder) Rest() []string {
	var returns []string
	_jsii_.Get(
		s,
		"rest",
		&returns,
	)
	return returns
}


func NewSupportsNiceJavaBuilder(id float64, defaultBar float64, props SupportsNiceJavaBuilderProps, rest string) SupportsNiceJavaBuilder {
	_init_.Initialize()
	s := supportsNiceJavaBuilder{}

	_jsii_.Create(
		"jsii-calc.SupportsNiceJavaBuilder",
		[]interface{}{id, defaultBar, props, rest},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

type SupportsNiceJavaBuilderProps struct {
	// Some number, like 42.
	Bar float64 \`json:"bar"\`
	// An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
	//
	// But here we are, doing it like we didn't care.
	Id string \`json:"id"\`
}

// We can generate fancy builders in Java for classes which take a mix of positional & struct parameters.
type SupportsNiceJavaBuilderWithRequiredProps interface {
	Bar() float64
	Id() float64
	PropId() string
}

// The jsii proxy struct for SupportsNiceJavaBuilderWithRequiredProps
type supportsNiceJavaBuilderWithRequiredProps struct {
	_ byte // padding
}

func (s *supportsNiceJavaBuilderWithRequiredProps) Bar() float64 {
	var returns float64
	_jsii_.Get(
		s,
		"bar",
		&returns,
	)
	return returns
}

func (s *supportsNiceJavaBuilderWithRequiredProps) Id() float64 {
	var returns float64
	_jsii_.Get(
		s,
		"id",
		&returns,
	)
	return returns
}

func (s *supportsNiceJavaBuilderWithRequiredProps) PropId() string {
	var returns string
	_jsii_.Get(
		s,
		"propId",
		&returns,
	)
	return returns
}


func NewSupportsNiceJavaBuilderWithRequiredProps(id float64, props SupportsNiceJavaBuilderProps) SupportsNiceJavaBuilderWithRequiredProps {
	_init_.Initialize()
	s := supportsNiceJavaBuilderWithRequiredProps{}

	_jsii_.Create(
		"jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
		[]interface{}{id, props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

type SyncVirtualMethods interface {
	A() float64
	SetA(val float64)
	CallerIsProperty() float64
	SetCallerIsProperty(val float64)
	OtherProperty() string
	SetOtherProperty(val string)
	ReadonlyProperty() string
	TheProperty() string
	SetTheProperty(val string)
	ValueOfOtherProperty() string
	SetValueOfOtherProperty(val string)
	CallerIsAsync() float64
	CallerIsMethod() float64
	ModifyOtherProperty(value string)
	ModifyValueOfTheProperty(value string)
	ReadA() float64
	RetrieveOtherProperty() string
	RetrieveReadOnlyProperty() string
	RetrieveValueOfTheProperty() string
	VirtualMethod(n float64) float64
	WriteA(value float64)
}

// The jsii proxy struct for SyncVirtualMethods
type syncVirtualMethods struct {
	_ byte // padding
}

func (s *syncVirtualMethods) A() float64 {
	var returns float64
	_jsii_.Get(
		s,
		"a",
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) CallerIsProperty() float64 {
	var returns float64
	_jsii_.Get(
		s,
		"callerIsProperty",
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) OtherProperty() string {
	var returns string
	_jsii_.Get(
		s,
		"otherProperty",
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) ReadonlyProperty() string {
	var returns string
	_jsii_.Get(
		s,
		"readonlyProperty",
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) TheProperty() string {
	var returns string
	_jsii_.Get(
		s,
		"theProperty",
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) ValueOfOtherProperty() string {
	var returns string
	_jsii_.Get(
		s,
		"valueOfOtherProperty",
		&returns,
	)
	return returns
}


func NewSyncVirtualMethods() SyncVirtualMethods {
	_init_.Initialize()
	s := syncVirtualMethods{}

	_jsii_.Create(
		"jsii-calc.SyncVirtualMethods",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&s,
	)
	return &s
}

func (s *syncVirtualMethods) SetA(val float64) {
	_jsii_.Set(
		s,
		"a",
		val,
	)
}

func (s *syncVirtualMethods) SetCallerIsProperty(val float64) {
	_jsii_.Set(
		s,
		"callerIsProperty",
		val,
	)
}

func (s *syncVirtualMethods) SetOtherProperty(val string) {
	_jsii_.Set(
		s,
		"otherProperty",
		val,
	)
}

func (s *syncVirtualMethods) SetTheProperty(val string) {
	_jsii_.Set(
		s,
		"theProperty",
		val,
	)
}

func (s *syncVirtualMethods) SetValueOfOtherProperty(val string) {
	_jsii_.Set(
		s,
		"valueOfOtherProperty",
		val,
	)
}

func (s *syncVirtualMethods) CallerIsAsync() float64 {
	var returns float64
	_jsii_.Invoke(
		s,
		"callerIsAsync",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) CallerIsMethod() float64 {
	var returns float64
	_jsii_.Invoke(
		s,
		"callerIsMethod",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) ModifyOtherProperty(value string) {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"modifyOtherProperty",
		[]interface{}{value},
		false,
		&returns,
	)
}

func (s *syncVirtualMethods) ModifyValueOfTheProperty(value string) {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"modifyValueOfTheProperty",
		[]interface{}{value},
		false,
		&returns,
	)
}

func (s *syncVirtualMethods) ReadA() float64 {
	var returns float64
	_jsii_.Invoke(
		s,
		"readA",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) RetrieveOtherProperty() string {
	var returns string
	_jsii_.Invoke(
		s,
		"retrieveOtherProperty",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) RetrieveReadOnlyProperty() string {
	var returns string
	_jsii_.Invoke(
		s,
		"retrieveReadOnlyProperty",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) RetrieveValueOfTheProperty() string {
	var returns string
	_jsii_.Invoke(
		s,
		"retrieveValueOfTheProperty",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) VirtualMethod(n float64) float64 {
	var returns float64
	_jsii_.Invoke(
		s,
		"virtualMethod",
		[]interface{}{n},
		true,
		&returns,
	)
	return returns
}

func (s *syncVirtualMethods) WriteA(value float64) {
	var returns interface{}
	_jsii_.Invoke(
		s,
		"writeA",
		[]interface{}{value},
		false,
		&returns,
	)
}

type Thrower interface {
	ThrowError()
}

// The jsii proxy struct for Thrower
type thrower struct {
	_ byte // padding
}

func NewThrower() Thrower {
	_init_.Initialize()
	t := thrower{}

	_jsii_.Create(
		"jsii-calc.Thrower",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&t,
	)
	return &t
}

func (t *thrower) ThrowError() {
	var returns interface{}
	_jsii_.Invoke(
		t,
		"throwError",
		[]interface{}{},
		false,
		&returns,
	)
}

type TopLevelStruct struct {
	// This is a required field.
	Required string \`json:"required"\`
	// A union to really stress test our serialization.
	SecondLevel interface{} \`json:"secondLevel"\`
	// You don't have to pass this.
	Optional string \`json:"optional"\`
}

// Checks the current file permissions are cool (no funky UMASK down-scoping happened).
// See: https://github.com/aws/jsii/issues/1765
//
type UmaskCheck interface {
}

// The jsii proxy struct for UmaskCheck
type umaskCheck struct {
	_ byte // padding
}

// This should return 0o644 (-rw-r--r--).
func UmaskCheck_Mode() float64 {
	_init_.Initialize()
	var returns float64
	_jsii_.StaticInvoke(
		"jsii-calc.UmaskCheck",
		"mode",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// An operation on a single operand.
type UnaryOperation interface {
	scopejsiicalclib.Operation
	Operand() scopejsiicalclib.NumericValue
}

// The jsii proxy struct for UnaryOperation
type unaryOperation struct {
	scopejsiicalclib.Operation // extends @scope/jsii-calc-lib.Operation
}

func (u *unaryOperation) Operand() scopejsiicalclib.NumericValue {
	var returns scopejsiicalclib.NumericValue
	_jsii_.Get(
		u,
		"operand",
		&returns,
	)
	return returns
}


func NewUnaryOperation(operand scopejsiicalclib.NumericValue) UnaryOperation {
	_init_.Initialize()
	u := unaryOperation{}

	_jsii_.Create(
		"jsii-calc.UnaryOperation",
		[]interface{}{operand},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&u,
	)
	return &u
}

type UnionProperties struct {
	Bar interface{} \`json:"bar"\`
	Foo interface{} \`json:"foo"\`
}

// Ensures submodule-imported types from dependencies can be used correctly.
type UpcasingReflectable interface {
	submodule.IReflectable
	Entries() []submodule.ReflectableEntry
}

// The jsii proxy struct for UpcasingReflectable
type upcasingReflectable struct {
	submodule.IReflectable // implements @scope/jsii-calc-lib.submodule.IReflectable
}

func (u *upcasingReflectable) Entries() []submodule.ReflectableEntry {
	var returns []submodule.ReflectableEntry
	_jsii_.Get(
		u,
		"entries",
		&returns,
	)
	return returns
}


func NewUpcasingReflectable(delegate map[string]interface{}) UpcasingReflectable {
	_init_.Initialize()
	u := upcasingReflectable{}

	_jsii_.Create(
		"jsii-calc.UpcasingReflectable",
		[]interface{}{delegate},
		[]_jsii_.FQN{"@scope/jsii-calc-lib.submodule.IReflectable"},
		[]_jsii_.Override{},
		&u,
	)
	return &u
}

func UpcasingReflectable_Reflector() submodule.Reflector {
	_init_.Initialize()
	var returns submodule.Reflector
	_jsii_.StaticGet(
		"jsii-calc.UpcasingReflectable",
		"reflector",
		&returns,
	)
	return returns
}

type UseBundledDependency interface {
	Value() interface{}
}

// The jsii proxy struct for UseBundledDependency
type useBundledDependency struct {
	_ byte // padding
}

func NewUseBundledDependency() UseBundledDependency {
	_init_.Initialize()
	u := useBundledDependency{}

	_jsii_.Create(
		"jsii-calc.UseBundledDependency",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&u,
	)
	return &u
}

func (u *useBundledDependency) Value() interface{} {
	var returns interface{}
	_jsii_.Invoke(
		u,
		"value",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

// Depend on a type from jsii-calc-base as a test for awslabs/jsii#128.
type UseCalcBase interface {
	Hello() scopejsiicalcbase.Base
}

// The jsii proxy struct for UseCalcBase
type useCalcBase struct {
	_ byte // padding
}

func NewUseCalcBase() UseCalcBase {
	_init_.Initialize()
	u := useCalcBase{}

	_jsii_.Create(
		"jsii-calc.UseCalcBase",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&u,
	)
	return &u
}

func (u *useCalcBase) Hello() scopejsiicalcbase.Base {
	var returns scopejsiicalcbase.Base
	_jsii_.Invoke(
		u,
		"hello",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

type UsesInterfaceWithProperties interface {
	Obj() IInterfaceWithProperties
	JustRead() string
	ReadStringAndNumber(ext IInterfaceWithPropertiesExtension) string
	WriteAndRead(value string) string
}

// The jsii proxy struct for UsesInterfaceWithProperties
type usesInterfaceWithProperties struct {
	_ byte // padding
}

func (u *usesInterfaceWithProperties) Obj() IInterfaceWithProperties {
	var returns IInterfaceWithProperties
	_jsii_.Get(
		u,
		"obj",
		&returns,
	)
	return returns
}


func NewUsesInterfaceWithProperties(obj IInterfaceWithProperties) UsesInterfaceWithProperties {
	_init_.Initialize()
	u := usesInterfaceWithProperties{}

	_jsii_.Create(
		"jsii-calc.UsesInterfaceWithProperties",
		[]interface{}{obj},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&u,
	)
	return &u
}

func (u *usesInterfaceWithProperties) JustRead() string {
	var returns string
	_jsii_.Invoke(
		u,
		"justRead",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}

func (u *usesInterfaceWithProperties) ReadStringAndNumber(ext IInterfaceWithPropertiesExtension) string {
	var returns string
	_jsii_.Invoke(
		u,
		"readStringAndNumber",
		[]interface{}{ext},
		true,
		&returns,
	)
	return returns
}

func (u *usesInterfaceWithProperties) WriteAndRead(value string) string {
	var returns string
	_jsii_.Invoke(
		u,
		"writeAndRead",
		[]interface{}{value},
		true,
		&returns,
	)
	return returns
}

type VariadicInvoker interface {
	AsArray(values float64) []float64
}

// The jsii proxy struct for VariadicInvoker
type variadicInvoker struct {
	_ byte // padding
}

func NewVariadicInvoker(method VariadicMethod) VariadicInvoker {
	_init_.Initialize()
	v := variadicInvoker{}

	_jsii_.Create(
		"jsii-calc.VariadicInvoker",
		[]interface{}{method},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&v,
	)
	return &v
}

func (v *variadicInvoker) AsArray(values float64) []float64 {
	var returns []float64
	_jsii_.Invoke(
		v,
		"asArray",
		[]interface{}{values},
		true,
		&returns,
	)
	return returns
}

type VariadicMethod interface {
	AsArray(first float64, others float64) []float64
}

// The jsii proxy struct for VariadicMethod
type variadicMethod struct {
	_ byte // padding
}

func NewVariadicMethod(prefix float64) VariadicMethod {
	_init_.Initialize()
	v := variadicMethod{}

	_jsii_.Create(
		"jsii-calc.VariadicMethod",
		[]interface{}{prefix},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&v,
	)
	return &v
}

func (v *variadicMethod) AsArray(first float64, others float64) []float64 {
	var returns []float64
	_jsii_.Invoke(
		v,
		"asArray",
		[]interface{}{first, others},
		true,
		&returns,
	)
	return returns
}

type VirtualMethodPlayground interface {
	OverrideMeAsync(index float64) float64
	OverrideMeSync(index float64) float64
	ParallelSumAsync(count float64) float64
	SerialSumAsync(count float64) float64
	SumSync(count float64) float64
}

// The jsii proxy struct for VirtualMethodPlayground
type virtualMethodPlayground struct {
	_ byte // padding
}

func NewVirtualMethodPlayground() VirtualMethodPlayground {
	_init_.Initialize()
	v := virtualMethodPlayground{}

	_jsii_.Create(
		"jsii-calc.VirtualMethodPlayground",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&v,
	)
	return &v
}

func (v *virtualMethodPlayground) OverrideMeAsync(index float64) float64 {
	var returns float64
	_jsii_.Invoke(
		v,
		"overrideMeAsync",
		[]interface{}{index},
		true,
		&returns,
	)
	return returns
}

func (v *virtualMethodPlayground) OverrideMeSync(index float64) float64 {
	var returns float64
	_jsii_.Invoke(
		v,
		"overrideMeSync",
		[]interface{}{index},
		true,
		&returns,
	)
	return returns
}

func (v *virtualMethodPlayground) ParallelSumAsync(count float64) float64 {
	var returns float64
	_jsii_.Invoke(
		v,
		"parallelSumAsync",
		[]interface{}{count},
		true,
		&returns,
	)
	return returns
}

func (v *virtualMethodPlayground) SerialSumAsync(count float64) float64 {
	var returns float64
	_jsii_.Invoke(
		v,
		"serialSumAsync",
		[]interface{}{count},
		true,
		&returns,
	)
	return returns
}

func (v *virtualMethodPlayground) SumSync(count float64) float64 {
	var returns float64
	_jsii_.Invoke(
		v,
		"sumSync",
		[]interface{}{count},
		true,
		&returns,
	)
	return returns
}

// This test is used to validate the runtimes can return correctly from a void callback.
//
// - Implement \`overrideMe\` (method does not have to do anything).
// - Invoke \`callMe\`
// - Verify that \`methodWasCalled\` is \`true\`.
type VoidCallback interface {
	MethodWasCalled() bool
	CallMe()
	OverrideMe()
}

// The jsii proxy struct for VoidCallback
type voidCallback struct {
	_ byte // padding
}

func (v *voidCallback) MethodWasCalled() bool {
	var returns bool
	_jsii_.Get(
		v,
		"methodWasCalled",
		&returns,
	)
	return returns
}


func NewVoidCallback() VoidCallback {
	_init_.Initialize()
	v := voidCallback{}

	_jsii_.Create(
		"jsii-calc.VoidCallback",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&v,
	)
	return &v
}

func (v *voidCallback) CallMe() {
	var returns interface{}
	_jsii_.Invoke(
		v,
		"callMe",
		[]interface{}{},
		false,
		&returns,
	)
}

func (v *voidCallback) OverrideMe() {
	var returns interface{}
	_jsii_.Invoke(
		v,
		"overrideMe",
		[]interface{}{},
		false,
		&returns,
	)
}

// Verifies that private property declarations in constructor arguments are hidden.
type WithPrivatePropertyInConstructor interface {
	Success() bool
}

// The jsii proxy struct for WithPrivatePropertyInConstructor
type withPrivatePropertyInConstructor struct {
	_ byte // padding
}

func (w *withPrivatePropertyInConstructor) Success() bool {
	var returns bool
	_jsii_.Get(
		w,
		"success",
		&returns,
	)
	return returns
}


func NewWithPrivatePropertyInConstructor(privateField string) WithPrivatePropertyInConstructor {
	_init_.Initialize()
	w := withPrivatePropertyInConstructor{}

	_jsii_.Create(
		"jsii-calc.WithPrivatePropertyInConstructor",
		[]interface{}{privateField},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&w,
	)
	return &w
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsiicalc.init.go 1`] = `
package jsiicalc

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.AbstractClass",
		reflect.TypeOf((*AbstractClass)(nil)).Elem(),
		func() interface{} {
			a := abstractClass{}
			_jsii_.InitJsiiProxy(&a.abstractClassBase)
			_jsii_.InitJsiiProxy(&a.iInterfaceImplementedByAbstractClass)
			return &a
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AbstractClassBase",
		reflect.TypeOf((*AbstractClassBase)(nil)).Elem(),
		func() interface{} {
			return &abstractClassBase{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AbstractClassReturner",
		reflect.TypeOf((*AbstractClassReturner)(nil)).Elem(),
		func() interface{} {
			return &abstractClassReturner{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AbstractSuite",
		reflect.TypeOf((*AbstractSuite)(nil)).Elem(),
		func() interface{} {
			return &abstractSuite{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Add",
		reflect.TypeOf((*Add)(nil)).Elem(),
		func() interface{} {
			a := add{}
			_jsii_.InitJsiiProxy(&a.binaryOperation)
			return &a
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AllTypes",
		reflect.TypeOf((*AllTypes)(nil)).Elem(),
		func() interface{} {
			return &allTypes{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.AllTypesEnum",
		reflect.TypeOf((*AllTypesEnum)(nil)).Elem(),
		map[string]interface{}{
			"MY_ENUM_VALUE": AllTypesEnum_MY_ENUM_VALUE,
			"YOUR_ENUM_VALUE": AllTypesEnum_YOUR_ENUM_VALUE,
			"THIS_IS_GREAT": AllTypesEnum_THIS_IS_GREAT,
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AllowedMethodNames",
		reflect.TypeOf((*AllowedMethodNames)(nil)).Elem(),
		func() interface{} {
			return &allowedMethodNames{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AmbiguousParameters",
		reflect.TypeOf((*AmbiguousParameters)(nil)).Elem(),
		func() interface{} {
			return &ambiguousParameters{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AnonymousImplementationProvider",
		reflect.TypeOf((*AnonymousImplementationProvider)(nil)).Elem(),
		func() interface{} {
			a := anonymousImplementationProvider{}
			_jsii_.InitJsiiProxy(&a.iAnonymousImplementationProvider)
			return &a
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AsyncVirtualMethods",
		reflect.TypeOf((*AsyncVirtualMethods)(nil)).Elem(),
		func() interface{} {
			return &asyncVirtualMethods{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.AugmentableClass",
		reflect.TypeOf((*AugmentableClass)(nil)).Elem(),
		func() interface{} {
			return &augmentableClass{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.BaseJsii976",
		reflect.TypeOf((*BaseJsii976)(nil)).Elem(),
		func() interface{} {
			return &baseJsii976{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Bell",
		reflect.TypeOf((*Bell)(nil)).Elem(),
		func() interface{} {
			b := bell{}
			_jsii_.InitJsiiProxy(&b.iBell)
			return &b
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.BinaryOperation",
		reflect.TypeOf((*BinaryOperation)(nil)).Elem(),
		func() interface{} {
			b := binaryOperation{}
			_jsii_.InitJsiiProxy(&b.Operation)
			_jsii_.InitJsiiProxy(&b.IFriendly)
			return &b
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.BurriedAnonymousObject",
		reflect.TypeOf((*BurriedAnonymousObject)(nil)).Elem(),
		func() interface{} {
			return &burriedAnonymousObject{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Calculator",
		reflect.TypeOf((*Calculator)(nil)).Elem(),
		func() interface{} {
			c := calculator{}
			_jsii_.InitJsiiProxy(&c.CompositeOperation)
			return &c
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.CalculatorProps",
		reflect.TypeOf((*CalculatorProps)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ChildStruct982",
		reflect.TypeOf((*ChildStruct982)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassThatImplementsTheInternalInterface",
		reflect.TypeOf((*ClassThatImplementsTheInternalInterface)(nil)).Elem(),
		func() interface{} {
			c := classThatImplementsTheInternalInterface{}
			_jsii_.InitJsiiProxy(&c.iNonInternalInterface)
			return &c
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassThatImplementsThePrivateInterface",
		reflect.TypeOf((*ClassThatImplementsThePrivateInterface)(nil)).Elem(),
		func() interface{} {
			c := classThatImplementsThePrivateInterface{}
			_jsii_.InitJsiiProxy(&c.iNonInternalInterface)
			return &c
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassWithCollections",
		reflect.TypeOf((*ClassWithCollections)(nil)).Elem(),
		func() interface{} {
			return &classWithCollections{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassWithDocs",
		reflect.TypeOf((*ClassWithDocs)(nil)).Elem(),
		func() interface{} {
			return &classWithDocs{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassWithJavaReservedWords",
		reflect.TypeOf((*ClassWithJavaReservedWords)(nil)).Elem(),
		func() interface{} {
			return &classWithJavaReservedWords{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassWithMutableObjectLiteralProperty",
		reflect.TypeOf((*ClassWithMutableObjectLiteralProperty)(nil)).Elem(),
		func() interface{} {
			return &classWithMutableObjectLiteralProperty{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties",
		reflect.TypeOf((*ClassWithPrivateConstructorAndAutomaticProperties)(nil)).Elem(),
		func() interface{} {
			c := classWithPrivateConstructorAndAutomaticProperties{}
			_jsii_.InitJsiiProxy(&c.iInterfaceWithProperties)
			return &c
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ConfusingToJackson",
		reflect.TypeOf((*ConfusingToJackson)(nil)).Elem(),
		func() interface{} {
			return &confusingToJackson{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ConfusingToJacksonStruct",
		reflect.TypeOf((*ConfusingToJacksonStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.ConstructorPassesThisOut",
		reflect.TypeOf((*ConstructorPassesThisOut)(nil)).Elem(),
		func() interface{} {
			return &constructorPassesThisOut{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Constructors",
		reflect.TypeOf((*Constructors)(nil)).Elem(),
		func() interface{} {
			return &constructors{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ConsumePureInterface",
		reflect.TypeOf((*ConsumePureInterface)(nil)).Elem(),
		func() interface{} {
			return &consumePureInterface{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ConsumerCanRingBell",
		reflect.TypeOf((*ConsumerCanRingBell)(nil)).Elem(),
		func() interface{} {
			return &consumerCanRingBell{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ConsumersOfThisCrazyTypeSystem",
		reflect.TypeOf((*ConsumersOfThisCrazyTypeSystem)(nil)).Elem(),
		func() interface{} {
			return &consumersOfThisCrazyTypeSystem{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DataRenderer",
		reflect.TypeOf((*DataRenderer)(nil)).Elem(),
		func() interface{} {
			return &dataRenderer{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DefaultedConstructorArgument",
		reflect.TypeOf((*DefaultedConstructorArgument)(nil)).Elem(),
		func() interface{} {
			return &defaultedConstructorArgument{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Demonstrate982",
		reflect.TypeOf((*Demonstrate982)(nil)).Elem(),
		func() interface{} {
			return &demonstrate982{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DeprecatedClass",
		reflect.TypeOf((*DeprecatedClass)(nil)).Elem(),
		func() interface{} {
			return &deprecatedClass{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.DeprecatedEnum",
		reflect.TypeOf((*DeprecatedEnum)(nil)).Elem(),
		map[string]interface{}{
			"OPTION_A": DeprecatedEnum_OPTION_A,
			"OPTION_B": DeprecatedEnum_OPTION_B,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DeprecatedStruct",
		reflect.TypeOf((*DeprecatedStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DerivedStruct",
		reflect.TypeOf((*DerivedStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DiamondBottom",
		reflect.TypeOf((*DiamondBottom)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DiamondInheritanceBaseLevelStruct",
		reflect.TypeOf((*DiamondInheritanceBaseLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DiamondInheritanceFirstMidLevelStruct",
		reflect.TypeOf((*DiamondInheritanceFirstMidLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DiamondInheritanceSecondMidLevelStruct",
		reflect.TypeOf((*DiamondInheritanceSecondMidLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.DiamondInheritanceTopLevelStruct",
		reflect.TypeOf((*DiamondInheritanceTopLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.DisappointingCollectionSource",
		reflect.TypeOf((*DisappointingCollectionSource)(nil)).Elem(),
		func() interface{} {
			return &disappointingCollectionSource{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DoNotOverridePrivates",
		reflect.TypeOf((*DoNotOverridePrivates)(nil)).Elem(),
		func() interface{} {
			return &doNotOverridePrivates{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DoNotRecognizeAnyAsOptional",
		reflect.TypeOf((*DoNotRecognizeAnyAsOptional)(nil)).Elem(),
		func() interface{} {
			return &doNotRecognizeAnyAsOptional{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DocumentedClass",
		reflect.TypeOf((*DocumentedClass)(nil)).Elem(),
		func() interface{} {
			return &documentedClass{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DontComplainAboutVariadicAfterOptional",
		reflect.TypeOf((*DontComplainAboutVariadicAfterOptional)(nil)).Elem(),
		func() interface{} {
			return &dontComplainAboutVariadicAfterOptional{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DoubleTrouble",
		reflect.TypeOf((*DoubleTrouble)(nil)).Elem(),
		func() interface{} {
			d := doubleTrouble{}
			_jsii_.InitJsiiProxy(&d.iFriendlyRandomGenerator)
			return &d
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DynamicPropertyBearer",
		reflect.TypeOf((*DynamicPropertyBearer)(nil)).Elem(),
		func() interface{} {
			return &dynamicPropertyBearer{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.DynamicPropertyBearerChild",
		reflect.TypeOf((*DynamicPropertyBearerChild)(nil)).Elem(),
		func() interface{} {
			d := dynamicPropertyBearerChild{}
			_jsii_.InitJsiiProxy(&d.dynamicPropertyBearer)
			return &d
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Entropy",
		reflect.TypeOf((*Entropy)(nil)).Elem(),
		func() interface{} {
			return &entropy{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.EnumDispenser",
		reflect.TypeOf((*EnumDispenser)(nil)).Elem(),
		func() interface{} {
			return &enumDispenser{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.EraseUndefinedHashValues",
		reflect.TypeOf((*EraseUndefinedHashValues)(nil)).Elem(),
		func() interface{} {
			return &eraseUndefinedHashValues{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.EraseUndefinedHashValuesOptions",
		reflect.TypeOf((*EraseUndefinedHashValuesOptions)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.ExperimentalClass",
		reflect.TypeOf((*ExperimentalClass)(nil)).Elem(),
		func() interface{} {
			return &experimentalClass{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.ExperimentalEnum",
		reflect.TypeOf((*ExperimentalEnum)(nil)).Elem(),
		map[string]interface{}{
			"OPTION_A": ExperimentalEnum_OPTION_A,
			"OPTION_B": ExperimentalEnum_OPTION_B,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ExperimentalStruct",
		reflect.TypeOf((*ExperimentalStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.ExportedBaseClass",
		reflect.TypeOf((*ExportedBaseClass)(nil)).Elem(),
		func() interface{} {
			return &exportedBaseClass{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ExtendsInternalInterface",
		reflect.TypeOf((*ExtendsInternalInterface)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.ExternalClass",
		reflect.TypeOf((*ExternalClass)(nil)).Elem(),
		func() interface{} {
			return &externalClass{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.ExternalEnum",
		reflect.TypeOf((*ExternalEnum)(nil)).Elem(),
		map[string]interface{}{
			"OPTION_A": ExternalEnum_OPTION_A,
			"OPTION_B": ExternalEnum_OPTION_B,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ExternalStruct",
		reflect.TypeOf((*ExternalStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.GiveMeStructs",
		reflect.TypeOf((*GiveMeStructs)(nil)).Elem(),
		func() interface{} {
			return &giveMeStructs{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.Greetee",
		reflect.TypeOf((*Greetee)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.GreetingAugmenter",
		reflect.TypeOf((*GreetingAugmenter)(nil)).Elem(),
		func() interface{} {
			return &greetingAugmenter{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IAnonymousImplementationProvider",
		reflect.TypeOf((*IAnonymousImplementationProvider)(nil)).Elem(),
		func() interface{} {
			return &iAnonymousImplementationProvider{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IAnonymouslyImplementMe",
		reflect.TypeOf((*IAnonymouslyImplementMe)(nil)).Elem(),
		func() interface{} {
			return &iAnonymouslyImplementMe{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IAnotherPublicInterface",
		reflect.TypeOf((*IAnotherPublicInterface)(nil)).Elem(),
		func() interface{} {
			return &iAnotherPublicInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IBell",
		reflect.TypeOf((*IBell)(nil)).Elem(),
		func() interface{} {
			return &iBell{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IBellRinger",
		reflect.TypeOf((*IBellRinger)(nil)).Elem(),
		func() interface{} {
			return &iBellRinger{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IConcreteBellRinger",
		reflect.TypeOf((*IConcreteBellRinger)(nil)).Elem(),
		func() interface{} {
			return &iConcreteBellRinger{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IDeprecatedInterface",
		reflect.TypeOf((*IDeprecatedInterface)(nil)).Elem(),
		func() interface{} {
			return &iDeprecatedInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IExperimentalInterface",
		reflect.TypeOf((*IExperimentalInterface)(nil)).Elem(),
		func() interface{} {
			return &iExperimentalInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IExtendsPrivateInterface",
		reflect.TypeOf((*IExtendsPrivateInterface)(nil)).Elem(),
		func() interface{} {
			return &iExtendsPrivateInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IExternalInterface",
		reflect.TypeOf((*IExternalInterface)(nil)).Elem(),
		func() interface{} {
			return &iExternalInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IFriendlier",
		reflect.TypeOf((*IFriendlier)(nil)).Elem(),
		func() interface{} {
			i := iFriendlier{}
			_jsii_.InitJsiiProxy(&i.IFriendly)
			return &i
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IFriendlyRandomGenerator",
		reflect.TypeOf((*IFriendlyRandomGenerator)(nil)).Elem(),
		func() interface{} {
			i := iFriendlyRandomGenerator{}
			_jsii_.InitJsiiProxy(&i.IFriendly)
			_jsii_.InitJsiiProxy(&i.iRandomNumberGenerator)
			return &i
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceImplementedByAbstractClass",
		reflect.TypeOf((*IInterfaceImplementedByAbstractClass)(nil)).Elem(),
		func() interface{} {
			return &iInterfaceImplementedByAbstractClass{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceThatShouldNotBeADataType",
		reflect.TypeOf((*IInterfaceThatShouldNotBeADataType)(nil)).Elem(),
		func() interface{} {
			i := iInterfaceThatShouldNotBeADataType{}
			_jsii_.InitJsiiProxy(&i.iInterfaceWithMethods)
			return &i
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceWithInternal",
		reflect.TypeOf((*IInterfaceWithInternal)(nil)).Elem(),
		func() interface{} {
			return &iInterfaceWithInternal{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceWithMethods",
		reflect.TypeOf((*IInterfaceWithMethods)(nil)).Elem(),
		func() interface{} {
			return &iInterfaceWithMethods{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceWithOptionalMethodArguments",
		reflect.TypeOf((*IInterfaceWithOptionalMethodArguments)(nil)).Elem(),
		func() interface{} {
			return &iInterfaceWithOptionalMethodArguments{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceWithProperties",
		reflect.TypeOf((*IInterfaceWithProperties)(nil)).Elem(),
		func() interface{} {
			return &iInterfaceWithProperties{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IInterfaceWithPropertiesExtension",
		reflect.TypeOf((*IInterfaceWithPropertiesExtension)(nil)).Elem(),
		func() interface{} {
			i := iInterfaceWithPropertiesExtension{}
			_jsii_.InitJsiiProxy(&i.iInterfaceWithProperties)
			return &i
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IJSII417Derived",
		reflect.TypeOf((*Ijsii417Derived)(nil)).Elem(),
		func() interface{} {
			i := ijsii417Derived{}
			_jsii_.InitJsiiProxy(&i.ijsii417PublicBaseOfBase)
			return &i
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IJSII417PublicBaseOfBase",
		reflect.TypeOf((*Ijsii417PublicBaseOfBase)(nil)).Elem(),
		func() interface{} {
			return &ijsii417PublicBaseOfBase{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IJsii487External",
		reflect.TypeOf((*IJsii487External)(nil)).Elem(),
		func() interface{} {
			return &iJsii487External{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IJsii487External2",
		reflect.TypeOf((*IJsii487External2)(nil)).Elem(),
		func() interface{} {
			return &iJsii487External2{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IJsii496",
		reflect.TypeOf((*IJsii496)(nil)).Elem(),
		func() interface{} {
			return &iJsii496{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IMutableObjectLiteral",
		reflect.TypeOf((*IMutableObjectLiteral)(nil)).Elem(),
		func() interface{} {
			return &iMutableObjectLiteral{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.INonInternalInterface",
		reflect.TypeOf((*INonInternalInterface)(nil)).Elem(),
		func() interface{} {
			i := iNonInternalInterface{}
			_jsii_.InitJsiiProxy(&i.iAnotherPublicInterface)
			return &i
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IObjectWithProperty",
		reflect.TypeOf((*IObjectWithProperty)(nil)).Elem(),
		func() interface{} {
			return &iObjectWithProperty{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IOptionalMethod",
		reflect.TypeOf((*IOptionalMethod)(nil)).Elem(),
		func() interface{} {
			return &iOptionalMethod{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IPrivatelyImplemented",
		reflect.TypeOf((*IPrivatelyImplemented)(nil)).Elem(),
		func() interface{} {
			return &iPrivatelyImplemented{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IPublicInterface",
		reflect.TypeOf((*IPublicInterface)(nil)).Elem(),
		func() interface{} {
			return &iPublicInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IPublicInterface2",
		reflect.TypeOf((*IPublicInterface2)(nil)).Elem(),
		func() interface{} {
			return &iPublicInterface2{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IRandomNumberGenerator",
		reflect.TypeOf((*IRandomNumberGenerator)(nil)).Elem(),
		func() interface{} {
			return &iRandomNumberGenerator{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IReturnJsii976",
		reflect.TypeOf((*IReturnJsii976)(nil)).Elem(),
		func() interface{} {
			return &iReturnJsii976{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IReturnsNumber",
		reflect.TypeOf((*IReturnsNumber)(nil)).Elem(),
		func() interface{} {
			return &iReturnsNumber{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IStableInterface",
		reflect.TypeOf((*IStableInterface)(nil)).Elem(),
		func() interface{} {
			return &iStableInterface{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IStructReturningDelegate",
		reflect.TypeOf((*IStructReturningDelegate)(nil)).Elem(),
		func() interface{} {
			return &iStructReturningDelegate{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.IWallClock",
		reflect.TypeOf((*IWallClock)(nil)).Elem(),
		func() interface{} {
			return &iWallClock{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ImplementInternalInterface",
		reflect.TypeOf((*ImplementInternalInterface)(nil)).Elem(),
		func() interface{} {
			return &implementInternalInterface{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Implementation",
		reflect.TypeOf((*Implementation)(nil)).Elem(),
		func() interface{} {
			return &implementation{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ImplementsInterfaceWithInternal",
		reflect.TypeOf((*ImplementsInterfaceWithInternal)(nil)).Elem(),
		func() interface{} {
			i := implementsInterfaceWithInternal{}
			_jsii_.InitJsiiProxy(&i.iInterfaceWithInternal)
			return &i
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ImplementsInterfaceWithInternalSubclass",
		reflect.TypeOf((*ImplementsInterfaceWithInternalSubclass)(nil)).Elem(),
		func() interface{} {
			i := implementsInterfaceWithInternalSubclass{}
			_jsii_.InitJsiiProxy(&i.implementsInterfaceWithInternal)
			return &i
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ImplementsPrivateInterface",
		reflect.TypeOf((*ImplementsPrivateInterface)(nil)).Elem(),
		func() interface{} {
			return &implementsPrivateInterface{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ImplictBaseOfBase",
		reflect.TypeOf((*ImplictBaseOfBase)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.InbetweenClass",
		reflect.TypeOf((*InbetweenClass)(nil)).Elem(),
		func() interface{} {
			i := inbetweenClass{}
			_jsii_.InitJsiiProxy(&i.publicClass)
			_jsii_.InitJsiiProxy(&i.iPublicInterface2)
			return &i
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.InterfaceCollections",
		reflect.TypeOf((*InterfaceCollections)(nil)).Elem(),
		func() interface{} {
			return &interfaceCollections{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.InterfacesMaker",
		reflect.TypeOf((*InterfacesMaker)(nil)).Elem(),
		func() interface{} {
			return &interfacesMaker{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Isomorphism",
		reflect.TypeOf((*Isomorphism)(nil)).Elem(),
		func() interface{} {
			return &isomorphism{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JSII417Derived",
		reflect.TypeOf((*Jsii417Derived)(nil)).Elem(),
		func() interface{} {
			j := jsii417Derived{}
			_jsii_.InitJsiiProxy(&j.jsii417PublicBaseOfBase)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JSII417PublicBaseOfBase",
		reflect.TypeOf((*Jsii417PublicBaseOfBase)(nil)).Elem(),
		func() interface{} {
			return &jsii417PublicBaseOfBase{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JSObjectLiteralForInterface",
		reflect.TypeOf((*JsObjectLiteralForInterface)(nil)).Elem(),
		func() interface{} {
			return &jsObjectLiteralForInterface{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JSObjectLiteralToNative",
		reflect.TypeOf((*JsObjectLiteralToNative)(nil)).Elem(),
		func() interface{} {
			return &jsObjectLiteralToNative{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JSObjectLiteralToNativeClass",
		reflect.TypeOf((*JsObjectLiteralToNativeClass)(nil)).Elem(),
		func() interface{} {
			return &jsObjectLiteralToNativeClass{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JavaReservedWords",
		reflect.TypeOf((*JavaReservedWords)(nil)).Elem(),
		func() interface{} {
			return &javaReservedWords{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Jsii487Derived",
		reflect.TypeOf((*Jsii487Derived)(nil)).Elem(),
		func() interface{} {
			j := jsii487Derived{}
			_jsii_.InitJsiiProxy(&j.iJsii487External)
			_jsii_.InitJsiiProxy(&j.iJsii487External2)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Jsii496Derived",
		reflect.TypeOf((*Jsii496Derived)(nil)).Elem(),
		func() interface{} {
			j := jsii496Derived{}
			_jsii_.InitJsiiProxy(&j.iJsii496)
			return &j
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JsiiAgent",
		reflect.TypeOf((*JsiiAgent)(nil)).Elem(),
		func() interface{} {
			return &jsiiAgent{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.JsonFormatter",
		reflect.TypeOf((*JsonFormatter)(nil)).Elem(),
		func() interface{} {
			return &jsonFormatter{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.LevelOne",
		reflect.TypeOf((*LevelOne)(nil)).Elem(),
		func() interface{} {
			return &levelOne{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.LevelOne.PropBooleanValue",
		reflect.TypeOf((*PropBooleanValue)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.LevelOne.PropProperty",
		reflect.TypeOf((*PropProperty)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.LevelOneProps",
		reflect.TypeOf((*LevelOneProps)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.LoadBalancedFargateServiceProps",
		reflect.TypeOf((*LoadBalancedFargateServiceProps)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.MethodNamedProperty",
		reflect.TypeOf((*MethodNamedProperty)(nil)).Elem(),
		func() interface{} {
			return &methodNamedProperty{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Multiply",
		reflect.TypeOf((*Multiply)(nil)).Elem(),
		func() interface{} {
			m := multiply{}
			_jsii_.InitJsiiProxy(&m.binaryOperation)
			_jsii_.InitJsiiProxy(&m.iFriendlier)
			_jsii_.InitJsiiProxy(&m.iRandomNumberGenerator)
			return &m
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Negate",
		reflect.TypeOf((*Negate)(nil)).Elem(),
		func() interface{} {
			n := negate{}
			_jsii_.InitJsiiProxy(&n.unaryOperation)
			_jsii_.InitJsiiProxy(&n.iFriendlier)
			return &n
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.NestedClassInstance",
		reflect.TypeOf((*NestedClassInstance)(nil)).Elem(),
		func() interface{} {
			return &nestedClassInstance{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.NestedStruct",
		reflect.TypeOf((*NestedStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.NodeStandardLibrary",
		reflect.TypeOf((*NodeStandardLibrary)(nil)).Elem(),
		func() interface{} {
			return &nodeStandardLibrary{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.NullShouldBeTreatedAsUndefined",
		reflect.TypeOf((*NullShouldBeTreatedAsUndefined)(nil)).Elem(),
		func() interface{} {
			return &nullShouldBeTreatedAsUndefined{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.NullShouldBeTreatedAsUndefinedData",
		reflect.TypeOf((*NullShouldBeTreatedAsUndefinedData)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.NumberGenerator",
		reflect.TypeOf((*NumberGenerator)(nil)).Elem(),
		func() interface{} {
			return &numberGenerator{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ObjectRefsInCollections",
		reflect.TypeOf((*ObjectRefsInCollections)(nil)).Elem(),
		func() interface{} {
			return &objectRefsInCollections{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ObjectWithPropertyProvider",
		reflect.TypeOf((*ObjectWithPropertyProvider)(nil)).Elem(),
		func() interface{} {
			return &objectWithPropertyProvider{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Old",
		reflect.TypeOf((*Old)(nil)).Elem(),
		func() interface{} {
			return &old{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.OptionalArgumentInvoker",
		reflect.TypeOf((*OptionalArgumentInvoker)(nil)).Elem(),
		func() interface{} {
			return &optionalArgumentInvoker{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.OptionalConstructorArgument",
		reflect.TypeOf((*OptionalConstructorArgument)(nil)).Elem(),
		func() interface{} {
			return &optionalConstructorArgument{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.OptionalStruct",
		reflect.TypeOf((*OptionalStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.OptionalStructConsumer",
		reflect.TypeOf((*OptionalStructConsumer)(nil)).Elem(),
		func() interface{} {
			return &optionalStructConsumer{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.OverridableProtectedMember",
		reflect.TypeOf((*OverridableProtectedMember)(nil)).Elem(),
		func() interface{} {
			return &overridableProtectedMember{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.OverrideReturnsObject",
		reflect.TypeOf((*OverrideReturnsObject)(nil)).Elem(),
		func() interface{} {
			return &overrideReturnsObject{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.ParentStruct982",
		reflect.TypeOf((*ParentStruct982)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.PartiallyInitializedThisConsumer",
		reflect.TypeOf((*PartiallyInitializedThisConsumer)(nil)).Elem(),
		func() interface{} {
			return &partiallyInitializedThisConsumer{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Polymorphism",
		reflect.TypeOf((*Polymorphism)(nil)).Elem(),
		func() interface{} {
			return &polymorphism{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Power",
		reflect.TypeOf((*Power)(nil)).Elem(),
		func() interface{} {
			p := power{}
			_jsii_.InitJsiiProxy(&p.CompositeOperation)
			return &p
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.PropertyNamedProperty",
		reflect.TypeOf((*PropertyNamedProperty)(nil)).Elem(),
		func() interface{} {
			return &propertyNamedProperty{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.PublicClass",
		reflect.TypeOf((*PublicClass)(nil)).Elem(),
		func() interface{} {
			return &publicClass{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.PythonReservedWords",
		reflect.TypeOf((*PythonReservedWords)(nil)).Elem(),
		func() interface{} {
			return &pythonReservedWords{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ReferenceEnumFromScopedPackage",
		reflect.TypeOf((*ReferenceEnumFromScopedPackage)(nil)).Elem(),
		func() interface{} {
			return &referenceEnumFromScopedPackage{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.ReturnsPrivateImplementationOfInterface",
		reflect.TypeOf((*ReturnsPrivateImplementationOfInterface)(nil)).Elem(),
		func() interface{} {
			return &returnsPrivateImplementationOfInterface{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.RootStruct",
		reflect.TypeOf((*RootStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.RootStructValidator",
		reflect.TypeOf((*RootStructValidator)(nil)).Elem(),
		func() interface{} {
			return &rootStructValidator{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.RuntimeTypeChecking",
		reflect.TypeOf((*RuntimeTypeChecking)(nil)).Elem(),
		func() interface{} {
			return &runtimeTypeChecking{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.SecondLevelStruct",
		reflect.TypeOf((*SecondLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.SingleInstanceTwoTypes",
		reflect.TypeOf((*SingleInstanceTwoTypes)(nil)).Elem(),
		func() interface{} {
			return &singleInstanceTwoTypes{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.SingletonInt",
		reflect.TypeOf((*SingletonInt)(nil)).Elem(),
		func() interface{} {
			return &singletonInt{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.SingletonIntEnum",
		reflect.TypeOf((*SingletonIntEnum)(nil)).Elem(),
		map[string]interface{}{
			"SINGLETON_INT": SingletonIntEnum_SINGLETON_INT,
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.SingletonString",
		reflect.TypeOf((*SingletonString)(nil)).Elem(),
		func() interface{} {
			return &singletonString{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.SingletonStringEnum",
		reflect.TypeOf((*SingletonStringEnum)(nil)).Elem(),
		map[string]interface{}{
			"SINGLETON_STRING": SingletonStringEnum_SINGLETON_STRING,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.SmellyStruct",
		reflect.TypeOf((*SmellyStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.SomeTypeJsii976",
		reflect.TypeOf((*SomeTypeJsii976)(nil)).Elem(),
		func() interface{} {
			return &someTypeJsii976{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.StableClass",
		reflect.TypeOf((*StableClass)(nil)).Elem(),
		func() interface{} {
			return &stableClass{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.StableEnum",
		reflect.TypeOf((*StableEnum)(nil)).Elem(),
		map[string]interface{}{
			"OPTION_A": StableEnum_OPTION_A,
			"OPTION_B": StableEnum_OPTION_B,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.StableStruct",
		reflect.TypeOf((*StableStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.StaticContext",
		reflect.TypeOf((*StaticContext)(nil)).Elem(),
		func() interface{} {
			return &staticContext{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.StaticHelloChild",
		reflect.TypeOf((*StaticHelloChild)(nil)).Elem(),
		func() interface{} {
			s := staticHelloChild{}
			_jsii_.InitJsiiProxy(&s.staticHelloParent)
			return &s
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.StaticHelloParent",
		reflect.TypeOf((*StaticHelloParent)(nil)).Elem(),
		func() interface{} {
			return &staticHelloParent{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Statics",
		reflect.TypeOf((*Statics)(nil)).Elem(),
		func() interface{} {
			return &statics{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.StringEnum",
		reflect.TypeOf((*StringEnum)(nil)).Elem(),
		map[string]interface{}{
			"A": StringEnum_A,
			"B": StringEnum_B,
			"C": StringEnum_C,
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.StripInternal",
		reflect.TypeOf((*StripInternal)(nil)).Elem(),
		func() interface{} {
			return &stripInternal{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.StructA",
		reflect.TypeOf((*StructA)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.StructB",
		reflect.TypeOf((*StructB)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.StructParameterType",
		reflect.TypeOf((*StructParameterType)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.StructPassing",
		reflect.TypeOf((*StructPassing)(nil)).Elem(),
		func() interface{} {
			return &structPassing{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.StructUnionConsumer",
		reflect.TypeOf((*StructUnionConsumer)(nil)).Elem(),
		func() interface{} {
			return &structUnionConsumer{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.StructWithJavaReservedWords",
		reflect.TypeOf((*StructWithJavaReservedWords)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.Sum",
		reflect.TypeOf((*Sum)(nil)).Elem(),
		func() interface{} {
			s := sum{}
			_jsii_.InitJsiiProxy(&s.CompositeOperation)
			return &s
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.SupportsNiceJavaBuilder",
		reflect.TypeOf((*SupportsNiceJavaBuilder)(nil)).Elem(),
		func() interface{} {
			s := supportsNiceJavaBuilder{}
			_jsii_.InitJsiiProxy(&s.supportsNiceJavaBuilderWithRequiredProps)
			return &s
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.SupportsNiceJavaBuilderProps",
		reflect.TypeOf((*SupportsNiceJavaBuilderProps)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
		reflect.TypeOf((*SupportsNiceJavaBuilderWithRequiredProps)(nil)).Elem(),
		func() interface{} {
			return &supportsNiceJavaBuilderWithRequiredProps{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.SyncVirtualMethods",
		reflect.TypeOf((*SyncVirtualMethods)(nil)).Elem(),
		func() interface{} {
			return &syncVirtualMethods{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.Thrower",
		reflect.TypeOf((*Thrower)(nil)).Elem(),
		func() interface{} {
			return &thrower{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.TopLevelStruct",
		reflect.TypeOf((*TopLevelStruct)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.UmaskCheck",
		reflect.TypeOf((*UmaskCheck)(nil)).Elem(),
		func() interface{} {
			return &umaskCheck{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.UnaryOperation",
		reflect.TypeOf((*UnaryOperation)(nil)).Elem(),
		func() interface{} {
			u := unaryOperation{}
			_jsii_.InitJsiiProxy(&u.Operation)
			return &u
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.UnionProperties",
		reflect.TypeOf((*UnionProperties)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.UpcasingReflectable",
		reflect.TypeOf((*UpcasingReflectable)(nil)).Elem(),
		func() interface{} {
			u := upcasingReflectable{}
			_jsii_.InitJsiiProxy(&u.IReflectable)
			return &u
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.UseBundledDependency",
		reflect.TypeOf((*UseBundledDependency)(nil)).Elem(),
		func() interface{} {
			return &useBundledDependency{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.UseCalcBase",
		reflect.TypeOf((*UseCalcBase)(nil)).Elem(),
		func() interface{} {
			return &useCalcBase{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.UsesInterfaceWithProperties",
		reflect.TypeOf((*UsesInterfaceWithProperties)(nil)).Elem(),
		func() interface{} {
			return &usesInterfaceWithProperties{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.VariadicInvoker",
		reflect.TypeOf((*VariadicInvoker)(nil)).Elem(),
		func() interface{} {
			return &variadicInvoker{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.VariadicMethod",
		reflect.TypeOf((*VariadicMethod)(nil)).Elem(),
		func() interface{} {
			return &variadicMethod{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.VirtualMethodPlayground",
		reflect.TypeOf((*VirtualMethodPlayground)(nil)).Elem(),
		func() interface{} {
			return &virtualMethodPlayground{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.VoidCallback",
		reflect.TypeOf((*VoidCallback)(nil)).Elem(),
		func() interface{} {
			return &voidCallback{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.WithPrivatePropertyInConstructor",
		reflect.TypeOf((*WithPrivatePropertyInConstructor)(nil)).Elem(),
		func() interface{} {
			return &withPrivatePropertyInConstructor{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/pythonself/pythonself.go 1`] = `
package pythonself

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type ClassWithSelf interface {
	Self() string
	Method(self float64) string
}

// The jsii proxy struct for ClassWithSelf
type classWithSelf struct {
	_ byte // padding
}

func (c *classWithSelf) Self() string {
	var returns string
	_jsii_.Get(
		c,
		"self",
		&returns,
	)
	return returns
}


func NewClassWithSelf(self string) ClassWithSelf {
	_init_.Initialize()
	c := classWithSelf{}

	_jsii_.Create(
		"jsii-calc.PythonSelf.ClassWithSelf",
		[]interface{}{self},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

func (c *classWithSelf) Method(self float64) string {
	var returns string
	_jsii_.Invoke(
		c,
		"method",
		[]interface{}{self},
		true,
		&returns,
	)
	return returns
}

type ClassWithSelfKwarg interface {
	Props() StructWithSelf
}

// The jsii proxy struct for ClassWithSelfKwarg
type classWithSelfKwarg struct {
	_ byte // padding
}

func (c *classWithSelfKwarg) Props() StructWithSelf {
	var returns StructWithSelf
	_jsii_.Get(
		c,
		"props",
		&returns,
	)
	return returns
}


func NewClassWithSelfKwarg(props StructWithSelf) ClassWithSelfKwarg {
	_init_.Initialize()
	c := classWithSelfKwarg{}

	_jsii_.Create(
		"jsii-calc.PythonSelf.ClassWithSelfKwarg",
		[]interface{}{props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&c,
	)
	return &c
}

type IInterfaceWithSelf interface {
	Method(self float64) string
}

// The jsii proxy for IInterfaceWithSelf
type iInterfaceWithSelf struct {
	_ byte // padding
}

func (i *iInterfaceWithSelf) Method(self float64) string {
	var returns string
	_jsii_.Invoke(
		i,
		"method",
		[]interface{}{self},
		true,
		&returns,
	)
	return returns
}

type StructWithSelf struct {
	Self string \`json:"self"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/pythonself/pythonself.init.go 1`] = `
package pythonself

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.PythonSelf.ClassWithSelf",
		reflect.TypeOf((*ClassWithSelf)(nil)).Elem(),
		func() interface{} {
			return &classWithSelf{}
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.PythonSelf.ClassWithSelfKwarg",
		reflect.TypeOf((*ClassWithSelfKwarg)(nil)).Elem(),
		func() interface{} {
			return &classWithSelfKwarg{}
		},
	)
	_jsii_.RegisterInterface(
		"jsii-calc.PythonSelf.IInterfaceWithSelf",
		reflect.TypeOf((*IInterfaceWithSelf)(nil)).Elem(),
		func() interface{} {
			return &iInterfaceWithSelf{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.PythonSelf.StructWithSelf",
		reflect.TypeOf((*StructWithSelf)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/backreferences/backreferences.go 1`] = `
package backreferences

import (
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule"
)

type MyClassReference struct {
	Reference submodule.MyClass \`json:"reference"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/backreferences/backreferences.init.go 1`] = `
package backreferences

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterStruct(
		"jsii-calc.submodule.back_references.MyClassReference",
		reflect.TypeOf((*MyClassReference)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/child/child.go 1`] = `
package child

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"
)

type Awesomeness string

const (
	Awesomeness_AWESOME Awesomeness = "AWESOME"
)

type Goodness string

const (
	Goodness_PRETTY_GOOD Goodness = "PRETTY_GOOD"
	Goodness_REALLY_GOOD Goodness = "REALLY_GOOD"
	Goodness_AMAZINGLY_GOOD Goodness = "AMAZINGLY_GOOD"
)

type InnerClass interface {
}

// The jsii proxy struct for InnerClass
type innerClass struct {
	_ byte // padding
}

func NewInnerClass() InnerClass {
	_init_.Initialize()
	i := innerClass{}

	_jsii_.Create(
		"jsii-calc.submodule.child.InnerClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&i,
	)
	return &i
}

func InnerClass_StaticProp() SomeStruct {
	_init_.Initialize()
	var returns SomeStruct
	_jsii_.StaticGet(
		"jsii-calc.submodule.child.InnerClass",
		"staticProp",
		&returns,
	)
	return returns
}

type KwargsProps struct {
	Prop SomeEnum \`json:"prop"\`
	Extra string \`json:"extra"\`
}

// ToSomeStruct is a convenience function to obtain a new SomeStruct from this KwargsProps.
func (k *KwargsProps) ToSomeStruct() SomeStruct {
	return SomeStruct {
		Prop: k.Prop,
	}
}

// Checks that classes can self-reference during initialization.
// See: : https://github.com/aws/jsii/pull/1706
//
type OuterClass interface {
	InnerClass() InnerClass
}

// The jsii proxy struct for OuterClass
type outerClass struct {
	_ byte // padding
}

func (o *outerClass) InnerClass() InnerClass {
	var returns InnerClass
	_jsii_.Get(
		o,
		"innerClass",
		&returns,
	)
	return returns
}


func NewOuterClass() OuterClass {
	_init_.Initialize()
	o := outerClass{}

	_jsii_.Create(
		"jsii-calc.submodule.child.OuterClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&o,
	)
	return &o
}

type SomeEnum string

const (
	SomeEnum_SOME SomeEnum = "SOME"
)

type SomeStruct struct {
	Prop SomeEnum \`json:"prop"\`
}

type Structure struct {
	Bool bool \`json:"bool"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/child/child.init.go 1`] = `
package child

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterEnum(
		"jsii-calc.submodule.child.Awesomeness",
		reflect.TypeOf((*Awesomeness)(nil)).Elem(),
		map[string]interface{}{
			"AWESOME": Awesomeness_AWESOME,
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.submodule.child.Goodness",
		reflect.TypeOf((*Goodness)(nil)).Elem(),
		map[string]interface{}{
			"PRETTY_GOOD": Goodness_PRETTY_GOOD,
			"REALLY_GOOD": Goodness_REALLY_GOOD,
			"AMAZINGLY_GOOD": Goodness_AMAZINGLY_GOOD,
		},
	)
	_jsii_.RegisterClass(
		"jsii-calc.submodule.child.InnerClass",
		reflect.TypeOf((*InnerClass)(nil)).Elem(),
		func() interface{} {
			return &innerClass{}
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.submodule.child.KwargsProps",
		reflect.TypeOf((*KwargsProps)(nil)).Elem(),
	)
	_jsii_.RegisterClass(
		"jsii-calc.submodule.child.OuterClass",
		reflect.TypeOf((*OuterClass)(nil)).Elem(),
		func() interface{} {
			return &outerClass{}
		},
	)
	_jsii_.RegisterEnum(
		"jsii-calc.submodule.child.SomeEnum",
		reflect.TypeOf((*SomeEnum)(nil)).Elem(),
		map[string]interface{}{
			"SOME": SomeEnum_SOME,
		},
	)
	_jsii_.RegisterStruct(
		"jsii-calc.submodule.child.SomeStruct",
		reflect.TypeOf((*SomeStruct)(nil)).Elem(),
	)
	_jsii_.RegisterStruct(
		"jsii-calc.submodule.child.Structure",
		reflect.TypeOf((*Structure)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/isolated/isolated.go 1`] = `
package isolated


// Ensures imports are correctly registered for kwargs lifted properties from super-structs.
type Kwargs interface {
}

// The jsii proxy struct for Kwargs
type kwargs struct {
	_ byte // padding
}

func Kwargs_Method(props child.KwargsProps) bool {
	_init_.Initialize()
	var returns bool
	_jsii_.StaticInvoke(
		"jsii-calc.submodule.isolated.Kwargs",
		"method",
		[]interface{}{props},
		true,
		&returns,
	)
	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/isolated/isolated.init.go 1`] = `
package isolated

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.submodule.isolated.Kwargs",
		reflect.TypeOf((*Kwargs)(nil)).Elem(),
		func() interface{} {
			return &kwargs{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/deeplynested/deeplynested.go 1`] = `
package deeplynested

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
)

type INamespaced interface {
	DefinedAt() string
}

// The jsii proxy for INamespaced
type iNamespaced struct {
	_ byte // padding
}

func (i *iNamespaced) DefinedAt() string {
	var returns string
	_jsii_.Get(
		i,
		"definedAt",
		&returns,
	)
	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/deeplynested/deeplynested.init.go 1`] = `
package deeplynested

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterInterface(
		"jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced",
		reflect.TypeOf((*INamespaced)(nil)).Elem(),
		func() interface{} {
			return &iNamespaced{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/nestedsubmodule.go 1`] = `
package nestedsubmodule

import (
	_jsii_ "github.com/aws/jsii-runtime-go"

	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/child"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/nestedsubmodule/deeplynested"
)

type Namespaced interface {
	deeplynested.INamespaced
	DefinedAt() string
	Goodness() child.Goodness
}

// The jsii proxy struct for Namespaced
type namespaced struct {
	deeplynested.INamespaced // implements jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced
}

func (n *namespaced) DefinedAt() string {
	var returns string
	_jsii_.Get(
		n,
		"definedAt",
		&returns,
	)
	return returns
}

func (n *namespaced) Goodness() child.Goodness {
	var returns child.Goodness
	_jsii_.Get(
		n,
		"goodness",
		&returns,
	)
	return returns
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/nestedsubmodule.init.go 1`] = `
package nestedsubmodule

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.submodule.nested_submodule.Namespaced",
		reflect.TypeOf((*Namespaced)(nil)).Elem(),
		func() interface{} {
			n := namespaced{}
			_jsii_.InitJsiiProxy(&n.INamespaced)
			return &n
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/param/param.go 1`] = `
package param


type SpecialParameter struct {
	Value string \`json:"value"\`
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/param/param.init.go 1`] = `
package param

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterStruct(
		"jsii-calc.submodule.param.SpecialParameter",
		reflect.TypeOf((*SpecialParameter)(nil)).Elem(),
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/returnsparam/returnsparam.go 1`] = `
package returnsparam

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/param"
)

type ReturnsSpecialParameter interface {
	ReturnsSpecialParam() param.SpecialParameter
}

// The jsii proxy struct for ReturnsSpecialParameter
type returnsSpecialParameter struct {
	_ byte // padding
}

func NewReturnsSpecialParameter() ReturnsSpecialParameter {
	_init_.Initialize()
	r := returnsSpecialParameter{}

	_jsii_.Create(
		"jsii-calc.submodule.returnsparam.ReturnsSpecialParameter",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&r,
	)
	return &r
}

func (r *returnsSpecialParameter) ReturnsSpecialParam() param.SpecialParameter {
	var returns param.SpecialParameter
	_jsii_.Invoke(
		r,
		"returnsSpecialParam",
		[]interface{}{},
		true,
		&returns,
	)
	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/returnsparam/returnsparam.init.go 1`] = `
package returnsparam

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.submodule.returnsparam.ReturnsSpecialParameter",
		reflect.TypeOf((*ReturnsSpecialParameter)(nil)).Elem(),
		func() interface{} {
			return &returnsSpecialParameter{}
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/submodule.go 1`] = `
package submodule

import (
	_jsii_ "github.com/aws/jsii-runtime-go"
	_init_ "github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/jsii"

	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/child"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/nestedsubmodule/deeplynested"
	"github.com/aws/jsii/jsii-calc/go/jsiicalc/v3/submodule/param"
)

type MyClass interface {
	deeplynested.INamespaced
	AllTypes() jsiicalc.AllTypes
	SetAllTypes(val jsiicalc.AllTypes)
	Awesomeness() child.Awesomeness
	DefinedAt() string
	Goodness() child.Goodness
	Props() child.SomeStruct
	MethodWithSpecialParam(param param.SpecialParameter) string
}

// The jsii proxy struct for MyClass
type myClass struct {
	deeplynested.INamespaced // implements jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced
}

func (m *myClass) AllTypes() jsiicalc.AllTypes {
	var returns jsiicalc.AllTypes
	_jsii_.Get(
		m,
		"allTypes",
		&returns,
	)
	return returns
}

func (m *myClass) Awesomeness() child.Awesomeness {
	var returns child.Awesomeness
	_jsii_.Get(
		m,
		"awesomeness",
		&returns,
	)
	return returns
}

func (m *myClass) DefinedAt() string {
	var returns string
	_jsii_.Get(
		m,
		"definedAt",
		&returns,
	)
	return returns
}

func (m *myClass) Goodness() child.Goodness {
	var returns child.Goodness
	_jsii_.Get(
		m,
		"goodness",
		&returns,
	)
	return returns
}

func (m *myClass) Props() child.SomeStruct {
	var returns child.SomeStruct
	_jsii_.Get(
		m,
		"props",
		&returns,
	)
	return returns
}


func NewMyClass(props child.SomeStruct) MyClass {
	_init_.Initialize()
	m := myClass{}

	_jsii_.Create(
		"jsii-calc.submodule.MyClass",
		[]interface{}{props},
		[]_jsii_.FQN{"jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced"},
		[]_jsii_.Override{},
		&m,
	)
	return &m
}

func (m *myClass) SetAllTypes(val jsiicalc.AllTypes) {
	_jsii_.Set(
		m,
		"allTypes",
		val,
	)
}

func (m *myClass) MethodWithSpecialParam(param param.SpecialParameter) string {
	var returns string
	_jsii_.Invoke(
		m,
		"methodWithSpecialParam",
		[]interface{}{param},
		true,
		&returns,
	)
	return returns
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/submodule.init.go 1`] = `
package submodule

import (
	"reflect"

	_jsii_ "github.com/aws/jsii-runtime-go"
)

func init() {
	_jsii_.RegisterClass(
		"jsii-calc.submodule.MyClass",
		reflect.TypeOf((*MyClass)(nil)).Elem(),
		func() interface{} {
			m := myClass{}
			_jsii_.InitJsiiProxy(&m.INamespaced)
			return &m
		},
	)
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/version 1`] = `
3.20.120

`;
