// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/ 1`] = `
<root>
 ┗━ 📁 go
    ┗━ 📁 scopejsiicalcbase
       ┣━ 📁 jsii
       ┃  ┣━ 📄 jsii.go
       ┃  ┗━ 📄 tarball.embedded.go
       ┗━ 📄 scopejsiicalcbase.go
`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/jsii/jsii.go 1`] = `
package jsii

import (
	rt "github.com/aws-cdk/jsii/jsii-experimental"
	"sync"
	// Initialization endpoints of dependencies
	scopejsiicalcbaseofbase "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase/jsii"
)

var once sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Ensure all dependencies are initialized
		scopejsiicalcbaseofbase.Initialize()

		// Load this library into the kernel
		rt.Load("@scope/jsii-calc-base", "0.0.0", tarball)
	})
}

`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/jsii/tarball.embedded.go 1`] = `go/scopejsiicalcbase/jsii/tarball.embedded.go embeds a tarball`;

exports[`Generated code for "@scope/jsii-calc-base": <outDir>/go/scopejsiicalcbase/scopejsiicalcbase.go 1`] = `
// An example direct dependency for jsii-calc.
package scopejsiicalcbase

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbase/jsii"
)

// Class interface
type BaseIface interface {
	TypeName() _jsii_.Any
}

// A base class.
// Struct proxy
type Base struct {
}

func NewBase() BaseIface {
	_init_.Initialize()
	self := Base{}
	_jsii_.Create(
		"@scope/jsii-calc-base.Base",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (b *Base) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		b,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

// BasePropsIface is the public interface for the custom type BaseProps
type BasePropsIface interface {
	GetFoo() scopejsiicalcbaseofbase.Very
	GetBar() string
}

// Struct proxy
type BaseProps struct {
	Foo scopejsiicalcbaseofbase.Very
	Bar string
}

func (b *BaseProps) GetFoo() scopejsiicalcbaseofbase.Very {
	_jsii_.Get(
		b,
		"foo",
	)
	return b.Foo
}

func (b *BaseProps) GetBar() string {
	_jsii_.Get(
		b,
		"bar",
	)
	return b.Bar
}


type IBaseInterface interface {
	scopejsiicalcbaseofbase.IVeryBaseInterface
	Bar()
}


`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/ 1`] = `
<root>
 ┗━ 📁 go
    ┗━ 📁 scopejsiicalcbaseofbase
       ┣━ 📁 jsii
       ┃  ┣━ 📄 jsii.go
       ┃  ┗━ 📄 tarball.embedded.go
       ┗━ 📄 scopejsiicalcbaseofbase.go
`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/jsii/jsii.go 1`] = `
package jsii

import (
	rt "github.com/aws-cdk/jsii/jsii-experimental"
	"sync"
)

var once sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Load this library into the kernel
		rt.Load("@scope/jsii-calc-base-of-base", "0.0.0", tarball)
	})
}

`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/jsii/tarball.embedded.go 1`] = `go/scopejsiicalcbaseofbase/jsii/tarball.embedded.go embeds a tarball`;

exports[`Generated code for "@scope/jsii-calc-base-of-base": <outDir>/go/scopejsiicalcbaseofbase/scopejsiicalcbaseofbase.go 1`] = `
// An example transitive dependency for jsii-calc.
package scopejsiicalcbaseofbase

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase/jsii"
)

type IVeryBaseInterface interface {
	Foo()
}

// Class interface
type StaticConsumerIface interface {
}

// Struct proxy
type StaticConsumer struct {
}

func StaticConsumer_Consume(_args _jsii_.Any) {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"@scope/jsii-calc-base-of-base.StaticConsumer",
		"consume",
		[]interface{}{_args},
		&returns,
	)
}

// Class interface
type VeryIface interface {
	Hey() float64
}

// Something here.
// Experimental.
// Struct proxy
type Very struct {
}

func NewVery() VeryIface {
	_init_.Initialize()
	self := Very{}
	_jsii_.Create(
		"@scope/jsii-calc-base-of-base.Very",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (v *Very) Hey() float64 {
	returns := ""
	_jsii_.Invoke(
		v,
		"hey",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

// VeryBasePropsIface is the public interface for the custom type VeryBaseProps
type VeryBasePropsIface interface {
	GetFoo() Very
}

// Struct proxy
type VeryBaseProps struct {
	Foo Very
}

func (v *VeryBaseProps) GetFoo() Very {
	_jsii_.Get(
		v,
		"foo",
	)
	return v.Foo
}



`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/ 1`] = `
<root>
 ┗━ 📁 go
    ┗━ 📁 scopejsiicalclib
       ┣━ 📁 jsii
       ┃  ┣━ 📄 jsii.go
       ┃  ┗━ 📄 tarball.embedded.go
       ┣━ 📄 scopejsiicalclib.go
       ┗━ 📁 submodule
          ┗━ 📄 submodule.go
`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/jsii/jsii.go 1`] = `
package jsii

import (
	rt "github.com/aws-cdk/jsii/jsii-experimental"
	"sync"
	// Initialization endpoints of dependencies
	scopejsiicalcbase "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbase/jsii"
	scopejsiicalcbaseofbase "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase/jsii"
)

var once sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Ensure all dependencies are initialized
		scopejsiicalcbase.Initialize()
		scopejsiicalcbaseofbase.Initialize()

		// Load this library into the kernel
		rt.Load("@scope/jsii-calc-lib", "0.0.0", tarball)
	})
}

`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/jsii/tarball.embedded.go 1`] = `go/scopejsiicalclib/jsii/tarball.embedded.go embeds a tarball`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/scopejsiicalclib.go 1`] = `
// A simple calcuator library built on JSII.
package scopejsiicalclib

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbase"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib/jsii"
)

// Check that enums from \\@scoped packages can be references.
// 
// See awslabs/jsii#138
// Deprecated.
type EnumFromScopedModule string

const (
	EnumFromScopedModuleValue1 EnumFromScopedModule = "VALUE1"
	EnumFromScopedModuleValue2 EnumFromScopedModule = "VALUE2"
)

// The general contract for a concrete number.
// Deprecated.
type IDoublable interface {
	// Deprecated.
	GetDoubleValue() float64
}

// Applies to classes that are considered friendly.
// 
// These classes can be greeted with
// a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.
// Deprecated.
type IFriendly interface {
	// Say hello!
	// Deprecated.
	Hello() string
}

// Interface that inherits from packages 2 levels up the tree.
// 
// Their presence validates that .NET/Java/jsii-reflect can track all fields
// far enough up the tree.
// Deprecated.
type IThreeLevelsInterface interface {
	scopejsiicalcbaseofbase.IVeryBaseInterface
	scopejsiicalcbase.IBaseInterface
	// Deprecated.
	Baz()
}

// MyFirstStructIface is the public interface for the custom type MyFirstStruct
// Deprecated.
type MyFirstStructIface interface {
	GetAnumber() float64
	GetAstring() string
	GetFirstOptional() []string
}

// This is the first struct we have created in jsii.
// Deprecated.
// Struct proxy
type MyFirstStruct struct {
	// An awesome number value.
	// Deprecated.
	Anumber float64
	// A string value.
	// Deprecated.
	Astring string
	// Deprecated.
	FirstOptional []string
}

func (m *MyFirstStruct) GetAnumber() float64 {
	_jsii_.Get(
		m,
		"anumber",
	)
	return m.Anumber
}

func (m *MyFirstStruct) GetAstring() string {
	_jsii_.Get(
		m,
		"astring",
	)
	return m.Astring
}

func (m *MyFirstStruct) GetFirstOptional() []string {
	_jsii_.Get(
		m,
		"firstOptional",
	)
	return m.FirstOptional
}


// Class interface
type NumberIface interface {
	IDoublable
	GetValue() float64
	GetDoubleValue() float64
	TypeName() _jsii_.Any
	ToString() string
}

// Represents a concrete number.
// Deprecated.
// Struct proxy
type Number struct {
	// The number.
	// Deprecated.
	Value float64
	// The number multiplied by 2.
	// Deprecated.
	DoubleValue float64
}

func (n *Number) GetValue() float64 {
	_jsii_.Get(
		n,
		"value",
	)
	return n.Value
}

func (n *Number) GetDoubleValue() float64 {
	_jsii_.Get(
		n,
		"doubleValue",
	)
	return n.DoubleValue
}


// Creates a Number object.
func NewNumber(value float64) NumberIface {
	_init_.Initialize()
	self := Number{}
	_jsii_.Create(
		"@scope/jsii-calc-lib.Number",
		[]interface{}{value},
		[]_jsii_.FQN{"@scope/jsii-calc-lib.IDoublable"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *Number) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		n,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (n *Number) ToString() string {
	returns := ""
	_jsii_.Invoke(
		n,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type NumericValueIface interface {
	GetValue() float64
	TypeName() _jsii_.Any
	ToString() string
}

// Abstract class which represents a numeric value.
// Deprecated.
// Struct proxy
type NumericValue struct {
	// The value.
	// Deprecated.
	Value float64
}

func (n *NumericValue) GetValue() float64 {
	_jsii_.Get(
		n,
		"value",
	)
	return n.Value
}


func NewNumericValue() NumericValueIface {
	_init_.Initialize()
	self := NumericValue{}
	_jsii_.Create(
		"@scope/jsii-calc-lib.NumericValue",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *NumericValue) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		n,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (n *NumericValue) ToString() string {
	returns := ""
	_jsii_.Invoke(
		n,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type OperationIface interface {
	GetValue() float64
	TypeName() _jsii_.Any
	ToString() string
}

// Represents an operation on values.
// Deprecated.
// Struct proxy
type Operation struct {
	// The value.
	// Deprecated.
	Value float64
}

func (o *Operation) GetValue() float64 {
	_jsii_.Get(
		o,
		"value",
	)
	return o.Value
}


func NewOperation() OperationIface {
	_init_.Initialize()
	self := Operation{}
	_jsii_.Create(
		"@scope/jsii-calc-lib.Operation",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *Operation) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		o,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (o *Operation) ToString() string {
	returns := ""
	_jsii_.Invoke(
		o,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// StructWithOnlyOptionalsIface is the public interface for the custom type StructWithOnlyOptionals
// Deprecated.
type StructWithOnlyOptionalsIface interface {
	GetOptional1() string
	GetOptional2() float64
	GetOptional3() bool
}

// This is a struct with only optional properties.
// Deprecated.
// Struct proxy
type StructWithOnlyOptionals struct {
	// The first optional!
	// Deprecated.
	Optional1 string
	// Deprecated.
	Optional2 float64
	// Deprecated.
	Optional3 bool
}

func (s *StructWithOnlyOptionals) GetOptional1() string {
	_jsii_.Get(
		s,
		"optional1",
	)
	return s.Optional1
}

func (s *StructWithOnlyOptionals) GetOptional2() float64 {
	_jsii_.Get(
		s,
		"optional2",
	)
	return s.Optional2
}

func (s *StructWithOnlyOptionals) GetOptional3() bool {
	_jsii_.Get(
		s,
		"optional3",
	)
	return s.Optional3
}



`;

exports[`Generated code for "@scope/jsii-calc-lib": <outDir>/go/scopejsiicalclib/submodule/submodule.go 1`] = `
package submodule

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib/jsii"
)

// Deprecated.
type IReflectable interface {
	// Deprecated.
	GetEntries() []ReflectableEntry
}

// Class interface
type NestingClassIface interface {
}

// This class is here to show we can use nested classes across module boundaries.
// Deprecated.
// Struct proxy
type NestingClass struct {
}

// Class interface
type NestedClassIface interface {
	GetProperty() string
}

// This class is here to show we can use nested classes across module boundaries.
// Deprecated.
// Struct proxy
type NestedClass struct {
	// Deprecated.
	Property string
}

func (n *NestedClass) GetProperty() string {
	_jsii_.Get(
		n,
		"property",
	)
	return n.Property
}


func NewNestedClass() NestedClassIface {
	_init_.Initialize()
	self := NestedClass{}
	_jsii_.Create(
		"@scope/jsii-calc-lib.submodule.NestingClass.NestedClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// NestedStructIface is the public interface for the custom type NestedStruct
// Deprecated.
type NestedStructIface interface {
	GetName() string
}

// This is a struct, nested within a class.
// 
// Normal.
// Deprecated.
// Struct proxy
type NestedStruct struct {
	// Deprecated.
	Name string
}

func (n *NestedStruct) GetName() string {
	_jsii_.Get(
		n,
		"name",
	)
	return n.Name
}


// ReflectableEntryIface is the public interface for the custom type ReflectableEntry
// Deprecated.
type ReflectableEntryIface interface {
	GetKey() string
	GetValue() _jsii_.Any
}

// Deprecated.
// Struct proxy
type ReflectableEntry struct {
	// Deprecated.
	Key string
	// Deprecated.
	Value _jsii_.Any
}

func (r *ReflectableEntry) GetKey() string {
	_jsii_.Get(
		r,
		"key",
	)
	return r.Key
}

func (r *ReflectableEntry) GetValue() _jsii_.Any {
	_jsii_.Get(
		r,
		"value",
	)
	return r.Value
}


// Class interface
type ReflectorIface interface {
	AsMap(reflectable IReflectable) map[string]_jsii_.Any
}

// Deprecated.
// Struct proxy
type Reflector struct {
}

func NewReflector() ReflectorIface {
	_init_.Initialize()
	self := Reflector{}
	_jsii_.Create(
		"@scope/jsii-calc-lib.submodule.Reflector",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (r *Reflector) AsMap(reflectable IReflectable) map[string]_jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		r,
		"asMap",
		[]interface{}{reflectable},
		&returns,
	)
	return nil
}


`;

exports[`Generated code for "jsii-calc": <outDir>/ 1`] = `
<root>
 ┗━ 📁 go
    ┗━ 📁 jsiicalc
       ┣━ 📁 composition
       ┃  ┗━ 📄 composition.go
       ┣━ 📁 derivedclasshasnoproperties
       ┃  ┗━ 📄 derivedclasshasnoproperties.go
       ┣━ 📁 interfaceinnamespaceincludesclasses
       ┃  ┗━ 📄 interfaceinnamespaceincludesclasses.go
       ┣━ 📁 interfaceinnamespaceonlyinterface
       ┃  ┗━ 📄 interfaceinnamespaceonlyinterface.go
       ┣━ 📁 jsii
       ┃  ┣━ 📄 jsii.go
       ┃  ┗━ 📄 tarball.embedded.go
       ┣━ 📄 jsiicalc.go
       ┣━ 📁 pythonself
       ┃  ┗━ 📄 pythonself.go
       ┣━ 📄 README.md
       ┗━ 📁 submodule
          ┣━ 📁 backreferences
          ┃  ┗━ 📄 backreferences.go
          ┣━ 📁 child
          ┃  ┗━ 📄 child.go
          ┣━ 📁 isolated
          ┃  ┗━ 📄 isolated.go
          ┣━ 📁 nestedsubmodule
          ┃  ┣━ 📁 deeplynested
          ┃  ┃  ┗━ 📄 deeplynested.go
          ┃  ┗━ 📄 nestedsubmodule.go
          ┣━ 📁 param
          ┃  ┗━ 📄 param.go
          ┣━ 📁 returnsparam
          ┃  ┗━ 📄 returnsparam.go
          ┗━ 📄 submodule.go
`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/README.md 1`] = `
# jsii Calculator

This library is used to demonstrate and test the features of JSII

## How to use running sum API:

First, create a calculator:

\`\`\`ts
const calculator = new calc.Calculator();
\`\`\`

Then call some operations:


\`\`\`ts fixture=with-calculator
calculator.add(10);
\`\`\`

## Code Samples

\`\`\`ts
/* This is totes a magic comment in here, just you wait! */
const foo = 'bar';
\`\`\`


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/composition/composition.go 1`] = `
package composition

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type CompositeOperationIface interface {
	GetValue() float64
	GetExpression() scopejsiicalclib.NumericValue
	GetDecorationPostfixes() []string
	SetDecorationPostfixes(val []string)
	GetDecorationPrefixes() []string
	SetDecorationPrefixes(val []string)
	GetStringStyle() CompositionStringStyle
	SetStringStyle(val CompositionStringStyle)
	TypeName() _jsii_.Any
	ToString() string
}

// Abstract operation composed from an expression of other operations.
// Struct proxy
type CompositeOperation struct {
	// (deprecated) The value.
	Value float64
	// The expression that this operation consists of.
	// 
	// Must be implemented by derived classes.
	Expression scopejsiicalclib.NumericValue
	// A set of postfixes to include in a decorated .toString().
	DecorationPostfixes []string
	// A set of prefixes to include in a decorated .toString().
	DecorationPrefixes []string
	// The .toString() style.
	StringStyle CompositionStringStyle
}

func (c *CompositeOperation) GetValue() float64 {
	_jsii_.Get(
		c,
		"value",
	)
	return c.Value
}

func (c *CompositeOperation) GetExpression() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		c,
		"expression",
	)
	return c.Expression
}

func (c *CompositeOperation) GetDecorationPostfixes() []string {
	_jsii_.Get(
		c,
		"decorationPostfixes",
	)
	return c.DecorationPostfixes
}

func (c *CompositeOperation) GetDecorationPrefixes() []string {
	_jsii_.Get(
		c,
		"decorationPrefixes",
	)
	return c.DecorationPrefixes
}

func (c *CompositeOperation) GetStringStyle() CompositionStringStyle {
	_jsii_.Get(
		c,
		"stringStyle",
	)
	return c.StringStyle
}


func NewCompositeOperation() CompositeOperationIface {
	_init_.Initialize()
	self := CompositeOperation{}
	_jsii_.Create(
		"jsii-calc.composition.CompositeOperation",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *CompositeOperation) SetDecorationPostfixes(val []string) {
	_jsii_.Set(
		c,
		"decorationPostfixes",
		val,
	)
	c.DecorationPostfixes = val
}

func (c *CompositeOperation) SetDecorationPrefixes(val []string) {
	_jsii_.Set(
		c,
		"decorationPrefixes",
		val,
	)
	c.DecorationPrefixes = val
}

func (c *CompositeOperation) SetStringStyle(val CompositionStringStyle) {
	_jsii_.Set(
		c,
		"stringStyle",
		val,
	)
	c.StringStyle = val
}

func (c *CompositeOperation) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		c,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (c *CompositeOperation) ToString() string {
	returns := ""
	_jsii_.Invoke(
		c,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Style of .toString() output for CompositeOperation.
type CompositionStringStyle string

const (
	CompositionStringStyleNormal CompositionStringStyle = "NORMAL"
	CompositionStringStyleDecorated CompositionStringStyle = "DECORATED"
)


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/derivedclasshasnoproperties/derivedclasshasnoproperties.go 1`] = `
package derivedclasshasnoproperties

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type BaseIface interface {
	GetProp() string
	SetProp(val string)
}

// Struct proxy
type Base struct {
	Prop string
}

func (b *Base) GetProp() string {
	_jsii_.Get(
		b,
		"prop",
	)
	return b.Prop
}


func NewBase() BaseIface {
	_init_.Initialize()
	self := Base{}
	_jsii_.Create(
		"jsii-calc.DerivedClassHasNoProperties.Base",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (b *Base) SetProp(val string) {
	_jsii_.Set(
		b,
		"prop",
		val,
	)
	b.Prop = val
}

// Class interface
type DerivedIface interface {
	GetProp() string
	SetProp(val string)
}

// Struct proxy
type Derived struct {
	Prop string
}

func (d *Derived) GetProp() string {
	_jsii_.Get(
		d,
		"prop",
	)
	return d.Prop
}


func NewDerived() DerivedIface {
	_init_.Initialize()
	self := Derived{}
	_jsii_.Create(
		"jsii-calc.DerivedClassHasNoProperties.Derived",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *Derived) SetProp(val string) {
	_jsii_.Set(
		d,
		"prop",
		val,
	)
	d.Prop = val
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceincludesclasses/interfaceinnamespaceincludesclasses.go 1`] = `
package interfaceinnamespaceincludesclasses

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type FooIface interface {
	GetBar() string
	SetBar(val string)
}

// Struct proxy
type Foo struct {
	Bar string
}

func (f *Foo) GetBar() string {
	_jsii_.Get(
		f,
		"bar",
	)
	return f.Bar
}


func NewFoo() FooIface {
	_init_.Initialize()
	self := Foo{}
	_jsii_.Create(
		"jsii-calc.InterfaceInNamespaceIncludesClasses.Foo",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (f *Foo) SetBar(val string) {
	_jsii_.Set(
		f,
		"bar",
		val,
	)
	f.Bar = val
}

// HelloIface is the public interface for the custom type Hello
type HelloIface interface {
	GetFoo() float64
}

// Struct proxy
type Hello struct {
	Foo float64
}

func (h *Hello) GetFoo() float64 {
	_jsii_.Get(
		h,
		"foo",
	)
	return h.Foo
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/interfaceinnamespaceonlyinterface/interfaceinnamespaceonlyinterface.go 1`] = `
package interfaceinnamespaceonlyinterface

import (
)

// HelloIface is the public interface for the custom type Hello
type HelloIface interface {
	GetFoo() float64
}

// Struct proxy
type Hello struct {
	Foo float64
}

func (h *Hello) GetFoo() float64 {
	_jsii_.Get(
		h,
		"foo",
	)
	return h.Foo
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsii/jsii.go 1`] = `
package jsii

import (
	rt "github.com/aws-cdk/jsii/jsii-experimental"
	"sync"
	// Initialization endpoints of dependencies
	scopejsiicalcbase "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbase/jsii"
	scopejsiicalcbaseofbase "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase/jsii"
	scopejsiicalclib "github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib/jsii"
)

var once sync.Once

// Initialize performs the necessary work for the enclosing
// module to be loaded in the jsii kernel.
func Initialize() {
	once.Do(func(){
		// Ensure all dependencies are initialized
		scopejsiicalcbase.Initialize()
		scopejsiicalcbaseofbase.Initialize()
		scopejsiicalclib.Initialize()

		// Load this library into the kernel
		rt.Load("jsii-calc", "0.0.0", tarball)
	})
}

`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsii/tarball.embedded.go 1`] = `go/jsiicalc/jsii/tarball.embedded.go embeds a tarball`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/jsiicalc.go 1`] = `
// A simple calcuator built on JSII.
package jsiicalc

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/composition"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbaseofbase"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalcbase"
	"github.com/aws-cdk/jsii/jsii-calc/go/scopejsiicalclib/submodule"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type AbstractClassIface interface {
	IInterfaceImplementedByAbstractClass
	GetAbstractProperty() string
	GetPropFromInterface() string
	AbstractMethod(name string) string
	NonAbstractMethod() float64
}

// Struct proxy
type AbstractClass struct {
	AbstractProperty string
	PropFromInterface string
}

func (a *AbstractClass) GetAbstractProperty() string {
	_jsii_.Get(
		a,
		"abstractProperty",
	)
	return a.AbstractProperty
}

func (a *AbstractClass) GetPropFromInterface() string {
	_jsii_.Get(
		a,
		"propFromInterface",
	)
	return a.PropFromInterface
}


func NewAbstractClass() AbstractClassIface {
	_init_.Initialize()
	self := AbstractClass{}
	_jsii_.Create(
		"jsii-calc.AbstractClass",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IInterfaceImplementedByAbstractClass"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AbstractClass) AbstractMethod(name string) string {
	returns := ""
	_jsii_.Invoke(
		a,
		"abstractMethod",
		[]interface{}{name},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (a *AbstractClass) NonAbstractMethod() float64 {
	returns := ""
	_jsii_.Invoke(
		a,
		"nonAbstractMethod",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

// Class interface
type AbstractClassBaseIface interface {
	GetAbstractProperty() string
}

// Struct proxy
type AbstractClassBase struct {
	AbstractProperty string
}

func (a *AbstractClassBase) GetAbstractProperty() string {
	_jsii_.Get(
		a,
		"abstractProperty",
	)
	return a.AbstractProperty
}


func NewAbstractClassBase() AbstractClassBaseIface {
	_init_.Initialize()
	self := AbstractClassBase{}
	_jsii_.Create(
		"jsii-calc.AbstractClassBase",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type AbstractClassReturnerIface interface {
	GetReturnAbstractFromProperty() AbstractClassBase
	GiveMeAbstract() AbstractClass
	GiveMeInterface() IInterfaceImplementedByAbstractClass
}

// Struct proxy
type AbstractClassReturner struct {
	ReturnAbstractFromProperty AbstractClassBase
}

func (a *AbstractClassReturner) GetReturnAbstractFromProperty() AbstractClassBase {
	_jsii_.Get(
		a,
		"returnAbstractFromProperty",
	)
	return a.ReturnAbstractFromProperty
}


func NewAbstractClassReturner() AbstractClassReturnerIface {
	_init_.Initialize()
	self := AbstractClassReturner{}
	_jsii_.Create(
		"jsii-calc.AbstractClassReturner",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AbstractClassReturner) GiveMeAbstract() AbstractClass {
	returns := ""
	_jsii_.Invoke(
		a,
		"giveMeAbstract",
		[]interface{}{},
		&returns,
	)
	return AbstractClass{}
}

func (a *AbstractClassReturner) GiveMeInterface() IInterfaceImplementedByAbstractClass {
	returns := ""
	_jsii_.Invoke(
		a,
		"giveMeInterface",
		[]interface{}{},
		&returns,
	)
	return nil
}

// Class interface
type AbstractSuiteIface interface {
	GetProperty() string
	SomeMethod(str string) string
	WorkItAll(seed string) string
}

// Ensures abstract members implementations correctly register overrides in various languages.
// Struct proxy
type AbstractSuite struct {
	Property string
}

func (a *AbstractSuite) GetProperty() string {
	_jsii_.Get(
		a,
		"property",
	)
	return a.Property
}


func NewAbstractSuite() AbstractSuiteIface {
	_init_.Initialize()
	self := AbstractSuite{}
	_jsii_.Create(
		"jsii-calc.AbstractSuite",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AbstractSuite) SetProperty(val string) {
	_jsii_.Set(
		a,
		"property",
		val,
	)
	a.Property = val
}

func (a *AbstractSuite) SomeMethod(str string) string {
	returns := ""
	_jsii_.Invoke(
		a,
		"someMethod",
		[]interface{}{str},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (a *AbstractSuite) WorkItAll(seed string) string {
	returns := ""
	_jsii_.Invoke(
		a,
		"workItAll",
		[]interface{}{seed},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type AddIface interface {
	scopejsiicalclib.IFriendly
	GetValue() float64
	GetLhs() scopejsiicalclib.NumericValue
	GetRhs() scopejsiicalclib.NumericValue
	TypeName() _jsii_.Any
	ToString() string
	Hello() string
}

// The "+" binary operation.
// Struct proxy
type Add struct {
	// (deprecated) The value.
	Value float64
	// Left-hand side operand.
	Lhs scopejsiicalclib.NumericValue
	// Right-hand side operand.
	Rhs scopejsiicalclib.NumericValue
}

func (a *Add) GetValue() float64 {
	_jsii_.Get(
		a,
		"value",
	)
	return a.Value
}

func (a *Add) GetLhs() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		a,
		"lhs",
	)
	return a.Lhs
}

func (a *Add) GetRhs() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		a,
		"rhs",
	)
	return a.Rhs
}


// Creates a BinaryOperation.
func NewAdd(lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) AddIface {
	_init_.Initialize()
	self := Add{}
	_jsii_.Create(
		"jsii-calc.Add",
		[]interface{}{lhs, rhs},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *Add) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		a,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (a *Add) ToString() string {
	returns := ""
	_jsii_.Invoke(
		a,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (a *Add) Hello() string {
	returns := ""
	_jsii_.Invoke(
		a,
		"hello",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type AllTypesIface interface {
	GetEnumPropertyValue() float64
	GetAnyArrayProperty() []_jsii_.Any
	SetAnyArrayProperty(val []_jsii_.Any)
	GetAnyMapProperty() map[string]_jsii_.Any
	SetAnyMapProperty(val map[string]_jsii_.Any)
	GetAnyProperty() _jsii_.Any
	SetAnyProperty(val _jsii_.Any)
	GetArrayProperty() []string
	SetArrayProperty(val []string)
	GetBooleanProperty() bool
	SetBooleanProperty(val bool)
	GetDateProperty() string
	SetDateProperty(val string)
	GetEnumProperty() AllTypesEnum
	SetEnumProperty(val AllTypesEnum)
	GetJsonProperty() map[string]_jsii_.Any
	SetJsonProperty(val map[string]_jsii_.Any)
	GetMapProperty() map[string]scopejsiicalclib.Number
	SetMapProperty(val map[string]scopejsiicalclib.Number)
	GetNumberProperty() float64
	SetNumberProperty(val float64)
	GetStringProperty() string
	SetStringProperty(val string)
	GetUnionArrayProperty() []_jsii_.Any
	SetUnionArrayProperty(val []_jsii_.Any)
	GetUnionMapProperty() map[string]_jsii_.Any
	SetUnionMapProperty(val map[string]_jsii_.Any)
	GetUnionProperty() _jsii_.Any
	SetUnionProperty(val _jsii_.Any)
	GetUnknownArrayProperty() []_jsii_.Any
	SetUnknownArrayProperty(val []_jsii_.Any)
	GetUnknownMapProperty() map[string]_jsii_.Any
	SetUnknownMapProperty(val map[string]_jsii_.Any)
	GetUnknownProperty() _jsii_.Any
	SetUnknownProperty(val _jsii_.Any)
	GetOptionalEnumValue() StringEnum
	SetOptionalEnumValue(val StringEnum)
	AnyIn(inp _jsii_.Any)
	AnyOut() _jsii_.Any
	EnumMethod(value StringEnum) StringEnum
}

// This class includes property for all types supported by jsii.
// 
// The setters will validate
// that the value set is of the expected type and throw otherwise.
// Struct proxy
type AllTypes struct {
	EnumPropertyValue float64
	AnyArrayProperty []_jsii_.Any
	AnyMapProperty map[string]_jsii_.Any
	AnyProperty _jsii_.Any
	ArrayProperty []string
	BooleanProperty bool
	DateProperty string
	EnumProperty AllTypesEnum
	JsonProperty map[string]_jsii_.Any
	MapProperty map[string]scopejsiicalclib.Number
	NumberProperty float64
	StringProperty string
	UnionArrayProperty []_jsii_.Any
	UnionMapProperty map[string]_jsii_.Any
	UnionProperty _jsii_.Any
	UnknownArrayProperty []_jsii_.Any
	UnknownMapProperty map[string]_jsii_.Any
	UnknownProperty _jsii_.Any
	OptionalEnumValue StringEnum
}

func (a *AllTypes) GetEnumPropertyValue() float64 {
	_jsii_.Get(
		a,
		"enumPropertyValue",
	)
	return a.EnumPropertyValue
}

func (a *AllTypes) GetAnyArrayProperty() []_jsii_.Any {
	_jsii_.Get(
		a,
		"anyArrayProperty",
	)
	return a.AnyArrayProperty
}

func (a *AllTypes) GetAnyMapProperty() map[string]_jsii_.Any {
	_jsii_.Get(
		a,
		"anyMapProperty",
	)
	return a.AnyMapProperty
}

func (a *AllTypes) GetAnyProperty() _jsii_.Any {
	_jsii_.Get(
		a,
		"anyProperty",
	)
	return a.AnyProperty
}

func (a *AllTypes) GetArrayProperty() []string {
	_jsii_.Get(
		a,
		"arrayProperty",
	)
	return a.ArrayProperty
}

func (a *AllTypes) GetBooleanProperty() bool {
	_jsii_.Get(
		a,
		"booleanProperty",
	)
	return a.BooleanProperty
}

func (a *AllTypes) GetDateProperty() string {
	_jsii_.Get(
		a,
		"dateProperty",
	)
	return a.DateProperty
}

func (a *AllTypes) GetEnumProperty() AllTypesEnum {
	_jsii_.Get(
		a,
		"enumProperty",
	)
	return a.EnumProperty
}

func (a *AllTypes) GetJsonProperty() map[string]_jsii_.Any {
	_jsii_.Get(
		a,
		"jsonProperty",
	)
	return a.JsonProperty
}

func (a *AllTypes) GetMapProperty() map[string]scopejsiicalclib.Number {
	_jsii_.Get(
		a,
		"mapProperty",
	)
	return a.MapProperty
}

func (a *AllTypes) GetNumberProperty() float64 {
	_jsii_.Get(
		a,
		"numberProperty",
	)
	return a.NumberProperty
}

func (a *AllTypes) GetStringProperty() string {
	_jsii_.Get(
		a,
		"stringProperty",
	)
	return a.StringProperty
}

func (a *AllTypes) GetUnionArrayProperty() []_jsii_.Any {
	_jsii_.Get(
		a,
		"unionArrayProperty",
	)
	return a.UnionArrayProperty
}

func (a *AllTypes) GetUnionMapProperty() map[string]_jsii_.Any {
	_jsii_.Get(
		a,
		"unionMapProperty",
	)
	return a.UnionMapProperty
}

func (a *AllTypes) GetUnionProperty() _jsii_.Any {
	_jsii_.Get(
		a,
		"unionProperty",
	)
	return a.UnionProperty
}

func (a *AllTypes) GetUnknownArrayProperty() []_jsii_.Any {
	_jsii_.Get(
		a,
		"unknownArrayProperty",
	)
	return a.UnknownArrayProperty
}

func (a *AllTypes) GetUnknownMapProperty() map[string]_jsii_.Any {
	_jsii_.Get(
		a,
		"unknownMapProperty",
	)
	return a.UnknownMapProperty
}

func (a *AllTypes) GetUnknownProperty() _jsii_.Any {
	_jsii_.Get(
		a,
		"unknownProperty",
	)
	return a.UnknownProperty
}

func (a *AllTypes) GetOptionalEnumValue() StringEnum {
	_jsii_.Get(
		a,
		"optionalEnumValue",
	)
	return a.OptionalEnumValue
}


func NewAllTypes() AllTypesIface {
	_init_.Initialize()
	self := AllTypes{}
	_jsii_.Create(
		"jsii-calc.AllTypes",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AllTypes) SetAnyArrayProperty(val []_jsii_.Any) {
	_jsii_.Set(
		a,
		"anyArrayProperty",
		val,
	)
	a.AnyArrayProperty = val
}

func (a *AllTypes) SetAnyMapProperty(val map[string]_jsii_.Any) {
	_jsii_.Set(
		a,
		"anyMapProperty",
		val,
	)
	a.AnyMapProperty = val
}

func (a *AllTypes) SetAnyProperty(val _jsii_.Any) {
	_jsii_.Set(
		a,
		"anyProperty",
		val,
	)
	a.AnyProperty = val
}

func (a *AllTypes) SetArrayProperty(val []string) {
	_jsii_.Set(
		a,
		"arrayProperty",
		val,
	)
	a.ArrayProperty = val
}

func (a *AllTypes) SetBooleanProperty(val bool) {
	_jsii_.Set(
		a,
		"booleanProperty",
		val,
	)
	a.BooleanProperty = val
}

func (a *AllTypes) SetDateProperty(val string) {
	_jsii_.Set(
		a,
		"dateProperty",
		val,
	)
	a.DateProperty = val
}

func (a *AllTypes) SetEnumProperty(val AllTypesEnum) {
	_jsii_.Set(
		a,
		"enumProperty",
		val,
	)
	a.EnumProperty = val
}

func (a *AllTypes) SetJsonProperty(val map[string]_jsii_.Any) {
	_jsii_.Set(
		a,
		"jsonProperty",
		val,
	)
	a.JsonProperty = val
}

func (a *AllTypes) SetMapProperty(val map[string]scopejsiicalclib.Number) {
	_jsii_.Set(
		a,
		"mapProperty",
		val,
	)
	a.MapProperty = val
}

func (a *AllTypes) SetNumberProperty(val float64) {
	_jsii_.Set(
		a,
		"numberProperty",
		val,
	)
	a.NumberProperty = val
}

func (a *AllTypes) SetStringProperty(val string) {
	_jsii_.Set(
		a,
		"stringProperty",
		val,
	)
	a.StringProperty = val
}

func (a *AllTypes) SetUnionArrayProperty(val []_jsii_.Any) {
	_jsii_.Set(
		a,
		"unionArrayProperty",
		val,
	)
	a.UnionArrayProperty = val
}

func (a *AllTypes) SetUnionMapProperty(val map[string]_jsii_.Any) {
	_jsii_.Set(
		a,
		"unionMapProperty",
		val,
	)
	a.UnionMapProperty = val
}

func (a *AllTypes) SetUnionProperty(val _jsii_.Any) {
	_jsii_.Set(
		a,
		"unionProperty",
		val,
	)
	a.UnionProperty = val
}

func (a *AllTypes) SetUnknownArrayProperty(val []_jsii_.Any) {
	_jsii_.Set(
		a,
		"unknownArrayProperty",
		val,
	)
	a.UnknownArrayProperty = val
}

func (a *AllTypes) SetUnknownMapProperty(val map[string]_jsii_.Any) {
	_jsii_.Set(
		a,
		"unknownMapProperty",
		val,
	)
	a.UnknownMapProperty = val
}

func (a *AllTypes) SetUnknownProperty(val _jsii_.Any) {
	_jsii_.Set(
		a,
		"unknownProperty",
		val,
	)
	a.UnknownProperty = val
}

func (a *AllTypes) SetOptionalEnumValue(val StringEnum) {
	_jsii_.Set(
		a,
		"optionalEnumValue",
		val,
	)
	a.OptionalEnumValue = val
}

func (a *AllTypes) AnyIn(inp _jsii_.Any) {
	returns := ""
	_jsii_.Invoke(
		a,
		"anyIn",
		[]interface{}{inp},
		&returns,
	)
}

func (a *AllTypes) AnyOut() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		a,
		"anyOut",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (a *AllTypes) EnumMethod(value StringEnum) StringEnum {
	returns := ""
	_jsii_.Invoke(
		a,
		"enumMethod",
		[]interface{}{value},
		&returns,
	)
	return "ENUM_DUMMY"
}

type AllTypesEnum string

const (
	AllTypesEnumMyEnumValue AllTypesEnum = "MY_ENUM_VALUE"
	AllTypesEnumYourEnumValue AllTypesEnum = "YOUR_ENUM_VALUE"
	AllTypesEnumThisIsGreat AllTypesEnum = "THIS_IS_GREAT"
)

// Class interface
type AllowedMethodNamesIface interface {
	GetBar(_p1 string, _p2 float64)
	GetFoo(withParam string) string
	SetBar(_x string, _y float64, _z bool)
	SetFoo(_x string, _y float64)
}

// Struct proxy
type AllowedMethodNames struct {
}

func NewAllowedMethodNames() AllowedMethodNamesIface {
	_init_.Initialize()
	self := AllowedMethodNames{}
	_jsii_.Create(
		"jsii-calc.AllowedMethodNames",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AllowedMethodNames) GetBar(_p1 string, _p2 float64) {
	returns := ""
	_jsii_.Invoke(
		a,
		"getBar",
		[]interface{}{_p1, _p2},
		&returns,
	)
}

func (a *AllowedMethodNames) GetFoo(withParam string) string {
	returns := ""
	_jsii_.Invoke(
		a,
		"getFoo",
		[]interface{}{withParam},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (a *AllowedMethodNames) SetBar(_x string, _y float64, _z bool) {
	returns := ""
	_jsii_.Invoke(
		a,
		"setBar",
		[]interface{}{_x, _y, _z},
		&returns,
	)
}

func (a *AllowedMethodNames) SetFoo(_x string, _y float64) {
	returns := ""
	_jsii_.Invoke(
		a,
		"setFoo",
		[]interface{}{_x, _y},
		&returns,
	)
}

// Class interface
type AmbiguousParametersIface interface {
	GetProps() StructParameterType
	GetScope() Bell
}

// Struct proxy
type AmbiguousParameters struct {
	Props StructParameterType
	Scope Bell
}

func (a *AmbiguousParameters) GetProps() StructParameterType {
	_jsii_.Get(
		a,
		"props",
	)
	return a.Props
}

func (a *AmbiguousParameters) GetScope() Bell {
	_jsii_.Get(
		a,
		"scope",
	)
	return a.Scope
}


func NewAmbiguousParameters(scope Bell, props StructParameterType) AmbiguousParametersIface {
	_init_.Initialize()
	self := AmbiguousParameters{}
	_jsii_.Create(
		"jsii-calc.AmbiguousParameters",
		[]interface{}{scope, props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type AnonymousImplementationProviderIface interface {
	IAnonymousImplementationProvider
	ProvideAsClass() Implementation
	ProvideAsInterface() IAnonymouslyImplementMe
}

// Struct proxy
type AnonymousImplementationProvider struct {
}

func NewAnonymousImplementationProvider() AnonymousImplementationProviderIface {
	_init_.Initialize()
	self := AnonymousImplementationProvider{}
	_jsii_.Create(
		"jsii-calc.AnonymousImplementationProvider",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IAnonymousImplementationProvider"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AnonymousImplementationProvider) ProvideAsClass() Implementation {
	returns := ""
	_jsii_.Invoke(
		a,
		"provideAsClass",
		[]interface{}{},
		&returns,
	)
	return Implementation{}
}

func (a *AnonymousImplementationProvider) ProvideAsInterface() IAnonymouslyImplementMe {
	returns := ""
	_jsii_.Invoke(
		a,
		"provideAsInterface",
		[]interface{}{},
		&returns,
	)
	return nil
}

// Class interface
type AsyncVirtualMethodsIface interface {
	CallMe() float64
	CallMe2() float64
	CallMeDoublePromise() float64
	DontOverrideMe() float64
	OverrideMe(mult float64) float64
	OverrideMeToo() float64
}

// Struct proxy
type AsyncVirtualMethods struct {
}

func NewAsyncVirtualMethods() AsyncVirtualMethodsIface {
	_init_.Initialize()
	self := AsyncVirtualMethods{}
	_jsii_.Create(
		"jsii-calc.AsyncVirtualMethods",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AsyncVirtualMethods) CallMe() float64 {
	returns := ""
	_jsii_.Invoke(
		a,
		"callMe",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

func (a *AsyncVirtualMethods) CallMe2() float64 {
	returns := ""
	_jsii_.Invoke(
		a,
		"callMe2",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

func (a *AsyncVirtualMethods) CallMeDoublePromise() float64 {
	returns := ""
	_jsii_.Invoke(
		a,
		"callMeDoublePromise",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

func (a *AsyncVirtualMethods) DontOverrideMe() float64 {
	returns := ""
	_jsii_.Invoke(
		a,
		"dontOverrideMe",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

func (a *AsyncVirtualMethods) OverrideMe(mult float64) float64 {
	returns := ""
	_jsii_.Invoke(
		a,
		"overrideMe",
		[]interface{}{mult},
		&returns,
	)
	return 0.0
}

func (a *AsyncVirtualMethods) OverrideMeToo() float64 {
	returns := ""
	_jsii_.Invoke(
		a,
		"overrideMeToo",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

// Class interface
type AugmentableClassIface interface {
	MethodOne()
	MethodTwo()
}

// Struct proxy
type AugmentableClass struct {
}

func NewAugmentableClass() AugmentableClassIface {
	_init_.Initialize()
	self := AugmentableClass{}
	_jsii_.Create(
		"jsii-calc.AugmentableClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (a *AugmentableClass) MethodOne() {
	returns := ""
	_jsii_.Invoke(
		a,
		"methodOne",
		[]interface{}{},
		&returns,
	)
}

func (a *AugmentableClass) MethodTwo() {
	returns := ""
	_jsii_.Invoke(
		a,
		"methodTwo",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type BaseJsii976Iface interface {
}

// Struct proxy
type BaseJsii976 struct {
}

func NewBaseJsii976() BaseJsii976Iface {
	_init_.Initialize()
	self := BaseJsii976{}
	_jsii_.Create(
		"jsii-calc.BaseJsii976",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type BellIface interface {
	IBell
	GetRung() bool
	SetRung(val bool)
	Ring()
}

// Struct proxy
type Bell struct {
	Rung bool
}

func (b *Bell) GetRung() bool {
	_jsii_.Get(
		b,
		"rung",
	)
	return b.Rung
}


func NewBell() BellIface {
	_init_.Initialize()
	self := Bell{}
	_jsii_.Create(
		"jsii-calc.Bell",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IBell"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (b *Bell) SetRung(val bool) {
	_jsii_.Set(
		b,
		"rung",
		val,
	)
	b.Rung = val
}

func (b *Bell) Ring() {
	returns := ""
	_jsii_.Invoke(
		b,
		"ring",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type BinaryOperationIface interface {
	scopejsiicalclib.IFriendly
	GetValue() float64
	GetLhs() scopejsiicalclib.NumericValue
	GetRhs() scopejsiicalclib.NumericValue
	TypeName() _jsii_.Any
	ToString() string
	Hello() string
}

// Represents an operation with two operands.
// Struct proxy
type BinaryOperation struct {
	// The value.
	// Deprecated.
	Value float64
	// Left-hand side operand.
	Lhs scopejsiicalclib.NumericValue
	// Right-hand side operand.
	Rhs scopejsiicalclib.NumericValue
}

func (b *BinaryOperation) GetValue() float64 {
	_jsii_.Get(
		b,
		"value",
	)
	return b.Value
}

func (b *BinaryOperation) GetLhs() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		b,
		"lhs",
	)
	return b.Lhs
}

func (b *BinaryOperation) GetRhs() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		b,
		"rhs",
	)
	return b.Rhs
}


// Creates a BinaryOperation.
func NewBinaryOperation(lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) BinaryOperationIface {
	_init_.Initialize()
	self := BinaryOperation{}
	_jsii_.Create(
		"jsii-calc.BinaryOperation",
		[]interface{}{lhs, rhs},
		[]_jsii_.FQN{"@scope/jsii-calc-lib.IFriendly"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (b *BinaryOperation) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		b,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (b *BinaryOperation) ToString() string {
	returns := ""
	_jsii_.Invoke(
		b,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (b *BinaryOperation) Hello() string {
	returns := ""
	_jsii_.Invoke(
		b,
		"hello",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type BurriedAnonymousObjectIface interface {
	Check() bool
	GiveItBack(value _jsii_.Any) _jsii_.Any
}

// See https://github.com/aws/aws-cdk/issues/7977.
// Struct proxy
type BurriedAnonymousObject struct {
}

func NewBurriedAnonymousObject() BurriedAnonymousObjectIface {
	_init_.Initialize()
	self := BurriedAnonymousObject{}
	_jsii_.Create(
		"jsii-calc.BurriedAnonymousObject",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (b *BurriedAnonymousObject) Check() bool {
	returns := ""
	_jsii_.Invoke(
		b,
		"check",
		[]interface{}{},
		&returns,
	)
	return true
}

func (b *BurriedAnonymousObject) GiveItBack(value _jsii_.Any) _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		b,
		"giveItBack",
		[]interface{}{value},
		&returns,
	)
	return nil
}

// Class interface
type CalculatorIface interface {
	GetValue() float64
	GetExpression() scopejsiicalclib.NumericValue
	GetDecorationPostfixes() []string
	SetDecorationPostfixes(val []string)
	GetDecorationPrefixes() []string
	SetDecorationPrefixes(val []string)
	GetStringStyle() composition.CompositionStringStyle
	SetStringStyle(val composition.CompositionStringStyle)
	GetOperationsLog() []scopejsiicalclib.NumericValue
	GetOperationsMap() map[string][]scopejsiicalclib.NumericValue
	GetCurr() scopejsiicalclib.NumericValue
	SetCurr(val scopejsiicalclib.NumericValue)
	GetMaxValue() float64
	SetMaxValue(val float64)
	GetUnionProperty() _jsii_.Any
	SetUnionProperty(val _jsii_.Any)
	TypeName() _jsii_.Any
	ToString() string
	Add(value float64)
	Mul(value float64)
	Neg()
	Pow(value float64)
	ReadUnionValue() float64
}

// A calculator which maintains a current value and allows adding operations.
// 
// Here's how you use it:
// 
// \`\`\`ts
// const calculator = new calc.Calculator();
// calculator.add(5);
// calculator.mul(3);
// console.log(calculator.expression.value);
// \`\`\`
// 
// I will repeat this example again, but in an @example tag.
//
// TODO: EXAMPLE
//
// Struct proxy
type Calculator struct {
	// (deprecated) The value.
	Value float64
	// Returns the expression.
	Expression scopejsiicalclib.NumericValue
	// A set of postfixes to include in a decorated .toString().
	DecorationPostfixes []string
	// A set of prefixes to include in a decorated .toString().
	DecorationPrefixes []string
	// The .toString() style.
	StringStyle composition.CompositionStringStyle
	// A log of all operations.
	OperationsLog []scopejsiicalclib.NumericValue
	// A map of per operation name of all operations performed.
	OperationsMap map[string][]scopejsiicalclib.NumericValue
	// The current value.
	Curr scopejsiicalclib.NumericValue
	// The maximum value allows in this calculator.
	MaxValue float64
	// Example of a property that accepts a union of types.
	UnionProperty _jsii_.Any
}

func (c *Calculator) GetValue() float64 {
	_jsii_.Get(
		c,
		"value",
	)
	return c.Value
}

func (c *Calculator) GetExpression() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		c,
		"expression",
	)
	return c.Expression
}

func (c *Calculator) GetDecorationPostfixes() []string {
	_jsii_.Get(
		c,
		"decorationPostfixes",
	)
	return c.DecorationPostfixes
}

func (c *Calculator) GetDecorationPrefixes() []string {
	_jsii_.Get(
		c,
		"decorationPrefixes",
	)
	return c.DecorationPrefixes
}

func (c *Calculator) GetStringStyle() composition.CompositionStringStyle {
	_jsii_.Get(
		c,
		"stringStyle",
	)
	return c.StringStyle
}

func (c *Calculator) GetOperationsLog() []scopejsiicalclib.NumericValue {
	_jsii_.Get(
		c,
		"operationsLog",
	)
	return c.OperationsLog
}

func (c *Calculator) GetOperationsMap() map[string][]scopejsiicalclib.NumericValue {
	_jsii_.Get(
		c,
		"operationsMap",
	)
	return c.OperationsMap
}

func (c *Calculator) GetCurr() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		c,
		"curr",
	)
	return c.Curr
}

func (c *Calculator) GetMaxValue() float64 {
	_jsii_.Get(
		c,
		"maxValue",
	)
	return c.MaxValue
}

func (c *Calculator) GetUnionProperty() _jsii_.Any {
	_jsii_.Get(
		c,
		"unionProperty",
	)
	return c.UnionProperty
}


// Creates a Calculator object.
func NewCalculator(props CalculatorProps) CalculatorIface {
	_init_.Initialize()
	self := Calculator{}
	_jsii_.Create(
		"jsii-calc.Calculator",
		[]interface{}{props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *Calculator) SetDecorationPostfixes(val []string) {
	_jsii_.Set(
		c,
		"decorationPostfixes",
		val,
	)
	c.DecorationPostfixes = val
}

func (c *Calculator) SetDecorationPrefixes(val []string) {
	_jsii_.Set(
		c,
		"decorationPrefixes",
		val,
	)
	c.DecorationPrefixes = val
}

func (c *Calculator) SetStringStyle(val composition.CompositionStringStyle) {
	_jsii_.Set(
		c,
		"stringStyle",
		val,
	)
	c.StringStyle = val
}

func (c *Calculator) SetCurr(val scopejsiicalclib.NumericValue) {
	_jsii_.Set(
		c,
		"curr",
		val,
	)
	c.Curr = val
}

func (c *Calculator) SetMaxValue(val float64) {
	_jsii_.Set(
		c,
		"maxValue",
		val,
	)
	c.MaxValue = val
}

func (c *Calculator) SetUnionProperty(val _jsii_.Any) {
	_jsii_.Set(
		c,
		"unionProperty",
		val,
	)
	c.UnionProperty = val
}

func (c *Calculator) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		c,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (c *Calculator) ToString() string {
	returns := ""
	_jsii_.Invoke(
		c,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (c *Calculator) Add(value float64) {
	returns := ""
	_jsii_.Invoke(
		c,
		"add",
		[]interface{}{value},
		&returns,
	)
}

func (c *Calculator) Mul(value float64) {
	returns := ""
	_jsii_.Invoke(
		c,
		"mul",
		[]interface{}{value},
		&returns,
	)
}

func (c *Calculator) Neg() {
	returns := ""
	_jsii_.Invoke(
		c,
		"neg",
		[]interface{}{},
		&returns,
	)
}

func (c *Calculator) Pow(value float64) {
	returns := ""
	_jsii_.Invoke(
		c,
		"pow",
		[]interface{}{value},
		&returns,
	)
}

func (c *Calculator) ReadUnionValue() float64 {
	returns := ""
	_jsii_.Invoke(
		c,
		"readUnionValue",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

// CalculatorPropsIface is the public interface for the custom type CalculatorProps
type CalculatorPropsIface interface {
	GetInitialValue() float64
	GetMaximumValue() float64
}

// Properties for Calculator.
// Struct proxy
type CalculatorProps struct {
	// The initial value of the calculator.
	// 
	// NOTE: Any number works here, it's fine.
	InitialValue float64
	// The maximum value the calculator can store.
	MaximumValue float64
}

func (c *CalculatorProps) GetInitialValue() float64 {
	_jsii_.Get(
		c,
		"initialValue",
	)
	return c.InitialValue
}

func (c *CalculatorProps) GetMaximumValue() float64 {
	_jsii_.Get(
		c,
		"maximumValue",
	)
	return c.MaximumValue
}


// ChildStruct982Iface is the public interface for the custom type ChildStruct982
type ChildStruct982Iface interface {
	GetFoo() string
	GetBar() float64
}

// Struct proxy
type ChildStruct982 struct {
	Foo string
	Bar float64
}

func (c *ChildStruct982) GetFoo() string {
	_jsii_.Get(
		c,
		"foo",
	)
	return c.Foo
}

func (c *ChildStruct982) GetBar() float64 {
	_jsii_.Get(
		c,
		"bar",
	)
	return c.Bar
}


// Class interface
type ClassThatImplementsTheInternalInterfaceIface interface {
	INonInternalInterface
	IAnotherPublicInterface
	GetA() string
	SetA(val string)
	GetB() string
	SetB(val string)
	GetC() string
	SetC(val string)
	GetD() string
	SetD(val string)
}

// Struct proxy
type ClassThatImplementsTheInternalInterface struct {
	A string
	B string
	C string
	D string
}

func (c *ClassThatImplementsTheInternalInterface) GetA() string {
	_jsii_.Get(
		c,
		"a",
	)
	return c.A
}

func (c *ClassThatImplementsTheInternalInterface) GetB() string {
	_jsii_.Get(
		c,
		"b",
	)
	return c.B
}

func (c *ClassThatImplementsTheInternalInterface) GetC() string {
	_jsii_.Get(
		c,
		"c",
	)
	return c.C
}

func (c *ClassThatImplementsTheInternalInterface) GetD() string {
	_jsii_.Get(
		c,
		"d",
	)
	return c.D
}


func NewClassThatImplementsTheInternalInterface() ClassThatImplementsTheInternalInterfaceIface {
	_init_.Initialize()
	self := ClassThatImplementsTheInternalInterface{}
	_jsii_.Create(
		"jsii-calc.ClassThatImplementsTheInternalInterface",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.INonInternalInterface"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ClassThatImplementsTheInternalInterface) SetA(val string) {
	_jsii_.Set(
		c,
		"a",
		val,
	)
	c.A = val
}

func (c *ClassThatImplementsTheInternalInterface) SetB(val string) {
	_jsii_.Set(
		c,
		"b",
		val,
	)
	c.B = val
}

func (c *ClassThatImplementsTheInternalInterface) SetC(val string) {
	_jsii_.Set(
		c,
		"c",
		val,
	)
	c.C = val
}

func (c *ClassThatImplementsTheInternalInterface) SetD(val string) {
	_jsii_.Set(
		c,
		"d",
		val,
	)
	c.D = val
}

// Class interface
type ClassThatImplementsThePrivateInterfaceIface interface {
	INonInternalInterface
	IAnotherPublicInterface
	GetA() string
	SetA(val string)
	GetB() string
	SetB(val string)
	GetC() string
	SetC(val string)
	GetE() string
	SetE(val string)
}

// Struct proxy
type ClassThatImplementsThePrivateInterface struct {
	A string
	B string
	C string
	E string
}

func (c *ClassThatImplementsThePrivateInterface) GetA() string {
	_jsii_.Get(
		c,
		"a",
	)
	return c.A
}

func (c *ClassThatImplementsThePrivateInterface) GetB() string {
	_jsii_.Get(
		c,
		"b",
	)
	return c.B
}

func (c *ClassThatImplementsThePrivateInterface) GetC() string {
	_jsii_.Get(
		c,
		"c",
	)
	return c.C
}

func (c *ClassThatImplementsThePrivateInterface) GetE() string {
	_jsii_.Get(
		c,
		"e",
	)
	return c.E
}


func NewClassThatImplementsThePrivateInterface() ClassThatImplementsThePrivateInterfaceIface {
	_init_.Initialize()
	self := ClassThatImplementsThePrivateInterface{}
	_jsii_.Create(
		"jsii-calc.ClassThatImplementsThePrivateInterface",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.INonInternalInterface"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ClassThatImplementsThePrivateInterface) SetA(val string) {
	_jsii_.Set(
		c,
		"a",
		val,
	)
	c.A = val
}

func (c *ClassThatImplementsThePrivateInterface) SetB(val string) {
	_jsii_.Set(
		c,
		"b",
		val,
	)
	c.B = val
}

func (c *ClassThatImplementsThePrivateInterface) SetC(val string) {
	_jsii_.Set(
		c,
		"c",
		val,
	)
	c.C = val
}

func (c *ClassThatImplementsThePrivateInterface) SetE(val string) {
	_jsii_.Set(
		c,
		"e",
		val,
	)
	c.E = val
}

// Class interface
type ClassWithCollectionsIface interface {
	GetArray() []string
	SetArray(val []string)
	GetMap() map[string]string
	SetMap(val map[string]string)
}

// Struct proxy
type ClassWithCollections struct {
	Array []string
	Map map[string]string
}

func (c *ClassWithCollections) GetArray() []string {
	_jsii_.Get(
		c,
		"array",
	)
	return c.Array
}

func (c *ClassWithCollections) GetMap() map[string]string {
	_jsii_.Get(
		c,
		"map",
	)
	return c.Map
}


func NewClassWithCollections(map_ map[string]string, array []string) ClassWithCollectionsIface {
	_init_.Initialize()
	self := ClassWithCollections{}
	_jsii_.Create(
		"jsii-calc.ClassWithCollections",
		[]interface{}{map_, array},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ClassWithCollections) SetArray(val []string) {
	_jsii_.Set(
		c,
		"array",
		val,
	)
	c.Array = val
}

func (c *ClassWithCollections) SetMap(val map[string]string) {
	_jsii_.Set(
		c,
		"map",
		val,
	)
	c.Map = val
}

func ClassWithCollections_CreateAList() []string {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.ClassWithCollections",
		"createAList",
		[]interface{}{},
		&returns,
	)
	return nil
}

func ClassWithCollections_CreateAMap() map[string]string {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.ClassWithCollections",
		"createAMap",
		[]interface{}{},
		&returns,
	)
	return nil
}

func ClassWithCollections_StaticArray() []string {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.ClassWithCollections",
		"staticArray",
	)
	return nil
}

func ClassWithCollections_SetStaticArray(val []string) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.ClassWithCollections",
		"staticArray",
		val,
	)
	return
}

func ClassWithCollections_StaticMap() map[string]string {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.ClassWithCollections",
		"staticMap",
	)
	return nil
}

func ClassWithCollections_SetStaticMap(val map[string]string) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.ClassWithCollections",
		"staticMap",
		val,
	)
	return
}

// Class interface
type ClassWithDocsIface interface {
}

// This class has docs.
// 
// The docs are great. They're a bunch of tags.
//
// TODO: EXAMPLE
//
// See: https://aws.amazon.com/
//
// Struct proxy
type ClassWithDocs struct {
}

func NewClassWithDocs() ClassWithDocsIface {
	_init_.Initialize()
	self := ClassWithDocs{}
	_jsii_.Create(
		"jsii-calc.ClassWithDocs",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type ClassWithJavaReservedWordsIface interface {
	GetInt() string
	Import(assert string) string
}

// Struct proxy
type ClassWithJavaReservedWords struct {
	Int string
}

func (c *ClassWithJavaReservedWords) GetInt() string {
	_jsii_.Get(
		c,
		"int",
	)
	return c.Int
}


func NewClassWithJavaReservedWords(int string) ClassWithJavaReservedWordsIface {
	_init_.Initialize()
	self := ClassWithJavaReservedWords{}
	_jsii_.Create(
		"jsii-calc.ClassWithJavaReservedWords",
		[]interface{}{int},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ClassWithJavaReservedWords) Import(assert string) string {
	returns := ""
	_jsii_.Invoke(
		c,
		"import",
		[]interface{}{assert},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type ClassWithMutableObjectLiteralPropertyIface interface {
	GetMutableObject() IMutableObjectLiteral
	SetMutableObject(val IMutableObjectLiteral)
}

// Struct proxy
type ClassWithMutableObjectLiteralProperty struct {
	MutableObject IMutableObjectLiteral
}

func (c *ClassWithMutableObjectLiteralProperty) GetMutableObject() IMutableObjectLiteral {
	_jsii_.Get(
		c,
		"mutableObject",
	)
	return c.MutableObject
}


func NewClassWithMutableObjectLiteralProperty() ClassWithMutableObjectLiteralPropertyIface {
	_init_.Initialize()
	self := ClassWithMutableObjectLiteralProperty{}
	_jsii_.Create(
		"jsii-calc.ClassWithMutableObjectLiteralProperty",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ClassWithMutableObjectLiteralProperty) SetMutableObject(val IMutableObjectLiteral) {
	_jsii_.Set(
		c,
		"mutableObject",
		val,
	)
	c.MutableObject = val
}

// Class interface
type ClassWithPrivateConstructorAndAutomaticPropertiesIface interface {
	IInterfaceWithProperties
	GetReadOnlyString() string
	GetReadWriteString() string
	SetReadWriteString(val string)
}

// Class that implements interface properties automatically, but using a private constructor.
// Struct proxy
type ClassWithPrivateConstructorAndAutomaticProperties struct {
	ReadOnlyString string
	ReadWriteString string
}

func (c *ClassWithPrivateConstructorAndAutomaticProperties) GetReadOnlyString() string {
	_jsii_.Get(
		c,
		"readOnlyString",
	)
	return c.ReadOnlyString
}

func (c *ClassWithPrivateConstructorAndAutomaticProperties) GetReadWriteString() string {
	_jsii_.Get(
		c,
		"readWriteString",
	)
	return c.ReadWriteString
}


func (c *ClassWithPrivateConstructorAndAutomaticProperties) SetReadWriteString(val string) {
	_jsii_.Set(
		c,
		"readWriteString",
		val,
	)
	c.ReadWriteString = val
}

func ClassWithPrivateConstructorAndAutomaticProperties_Create(readOnlyString string, readWriteString string) ClassWithPrivateConstructorAndAutomaticProperties {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties",
		"create",
		[]interface{}{readOnlyString, readWriteString},
		&returns,
	)
	return ClassWithPrivateConstructorAndAutomaticProperties{}
}

// Class interface
type ConfusingToJacksonIface interface {
	GetUnionProperty() _jsii_.Any
	SetUnionProperty(val _jsii_.Any)
}

// This tries to confuse Jackson by having overloaded property setters.
// See: https://github.com/aws/aws-cdk/issues/4080
//
// Struct proxy
type ConfusingToJackson struct {
	UnionProperty _jsii_.Any
}

func (c *ConfusingToJackson) GetUnionProperty() _jsii_.Any {
	_jsii_.Get(
		c,
		"unionProperty",
	)
	return c.UnionProperty
}


func (c *ConfusingToJackson) SetUnionProperty(val _jsii_.Any) {
	_jsii_.Set(
		c,
		"unionProperty",
		val,
	)
	c.UnionProperty = val
}

func ConfusingToJackson_MakeInstance() ConfusingToJackson {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.ConfusingToJackson",
		"makeInstance",
		[]interface{}{},
		&returns,
	)
	return ConfusingToJackson{}
}

func ConfusingToJackson_MakeStructInstance() ConfusingToJacksonStruct {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.ConfusingToJackson",
		"makeStructInstance",
		[]interface{}{},
		&returns,
	)
	return ConfusingToJacksonStruct{}
}

// ConfusingToJacksonStructIface is the public interface for the custom type ConfusingToJacksonStruct
type ConfusingToJacksonStructIface interface {
	GetUnionProperty() _jsii_.Any
}

// Struct proxy
type ConfusingToJacksonStruct struct {
	UnionProperty _jsii_.Any
}

func (c *ConfusingToJacksonStruct) GetUnionProperty() _jsii_.Any {
	_jsii_.Get(
		c,
		"unionProperty",
	)
	return c.UnionProperty
}


// Class interface
type ConstructorPassesThisOutIface interface {
}

// Struct proxy
type ConstructorPassesThisOut struct {
}

func NewConstructorPassesThisOut(consumer PartiallyInitializedThisConsumer) ConstructorPassesThisOutIface {
	_init_.Initialize()
	self := ConstructorPassesThisOut{}
	_jsii_.Create(
		"jsii-calc.ConstructorPassesThisOut",
		[]interface{}{consumer},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type ConstructorsIface interface {
}

// Struct proxy
type Constructors struct {
}

func NewConstructors() ConstructorsIface {
	_init_.Initialize()
	self := Constructors{}
	_jsii_.Create(
		"jsii-calc.Constructors",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func Constructors_HiddenInterface() IPublicInterface {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"hiddenInterface",
		[]interface{}{},
		&returns,
	)
	return nil
}

func Constructors_HiddenInterfaces() []IPublicInterface {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"hiddenInterfaces",
		[]interface{}{},
		&returns,
	)
	return nil
}

func Constructors_HiddenSubInterfaces() []IPublicInterface {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"hiddenSubInterfaces",
		[]interface{}{},
		&returns,
	)
	return nil
}

func Constructors_MakeClass() PublicClass {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"makeClass",
		[]interface{}{},
		&returns,
	)
	return PublicClass{}
}

func Constructors_MakeInterface() IPublicInterface {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"makeInterface",
		[]interface{}{},
		&returns,
	)
	return nil
}

func Constructors_MakeInterface2() IPublicInterface2 {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"makeInterface2",
		[]interface{}{},
		&returns,
	)
	return nil
}

func Constructors_MakeInterfaces() []IPublicInterface {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.Constructors",
		"makeInterfaces",
		[]interface{}{},
		&returns,
	)
	return nil
}

// Class interface
type ConsumePureInterfaceIface interface {
	WorkItBaby() StructB
}

// Struct proxy
type ConsumePureInterface struct {
}

func NewConsumePureInterface(delegate IStructReturningDelegate) ConsumePureInterfaceIface {
	_init_.Initialize()
	self := ConsumePureInterface{}
	_jsii_.Create(
		"jsii-calc.ConsumePureInterface",
		[]interface{}{delegate},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ConsumePureInterface) WorkItBaby() StructB {
	returns := ""
	_jsii_.Invoke(
		c,
		"workItBaby",
		[]interface{}{},
		&returns,
	)
	return StructB{}
}

// Class interface
type ConsumerCanRingBellIface interface {
	ImplementedByObjectLiteral(ringer IBellRinger) bool
	ImplementedByPrivateClass(ringer IBellRinger) bool
	ImplementedByPublicClass(ringer IBellRinger) bool
	WhenTypedAsClass(ringer IConcreteBellRinger) bool
}

// Test calling back to consumers that implement interfaces.
// 
// Check that if a JSII consumer implements IConsumerWithInterfaceParam, they can call
// the method on the argument that they're passed...
// Struct proxy
type ConsumerCanRingBell struct {
}

func NewConsumerCanRingBell() ConsumerCanRingBellIface {
	_init_.Initialize()
	self := ConsumerCanRingBell{}
	_jsii_.Create(
		"jsii-calc.ConsumerCanRingBell",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func ConsumerCanRingBell_StaticImplementedByObjectLiteral(ringer IBellRinger) bool {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByObjectLiteral",
		[]interface{}{ringer},
		&returns,
	)
	return true
}

func ConsumerCanRingBell_StaticImplementedByPrivateClass(ringer IBellRinger) bool {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByPrivateClass",
		[]interface{}{ringer},
		&returns,
	)
	return true
}

func ConsumerCanRingBell_StaticImplementedByPublicClass(ringer IBellRinger) bool {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.ConsumerCanRingBell",
		"staticImplementedByPublicClass",
		[]interface{}{ringer},
		&returns,
	)
	return true
}

func ConsumerCanRingBell_StaticWhenTypedAsClass(ringer IConcreteBellRinger) bool {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.ConsumerCanRingBell",
		"staticWhenTypedAsClass",
		[]interface{}{ringer},
		&returns,
	)
	return true
}

func (c *ConsumerCanRingBell) ImplementedByObjectLiteral(ringer IBellRinger) bool {
	returns := ""
	_jsii_.Invoke(
		c,
		"implementedByObjectLiteral",
		[]interface{}{ringer},
		&returns,
	)
	return true
}

func (c *ConsumerCanRingBell) ImplementedByPrivateClass(ringer IBellRinger) bool {
	returns := ""
	_jsii_.Invoke(
		c,
		"implementedByPrivateClass",
		[]interface{}{ringer},
		&returns,
	)
	return true
}

func (c *ConsumerCanRingBell) ImplementedByPublicClass(ringer IBellRinger) bool {
	returns := ""
	_jsii_.Invoke(
		c,
		"implementedByPublicClass",
		[]interface{}{ringer},
		&returns,
	)
	return true
}

func (c *ConsumerCanRingBell) WhenTypedAsClass(ringer IConcreteBellRinger) bool {
	returns := ""
	_jsii_.Invoke(
		c,
		"whenTypedAsClass",
		[]interface{}{ringer},
		&returns,
	)
	return true
}

// Class interface
type ConsumersOfThisCrazyTypeSystemIface interface {
	ConsumeAnotherPublicInterface(obj IAnotherPublicInterface) string
	ConsumeNonInternalInterface(obj INonInternalInterface) _jsii_.Any
}

// Struct proxy
type ConsumersOfThisCrazyTypeSystem struct {
}

func NewConsumersOfThisCrazyTypeSystem() ConsumersOfThisCrazyTypeSystemIface {
	_init_.Initialize()
	self := ConsumersOfThisCrazyTypeSystem{}
	_jsii_.Create(
		"jsii-calc.ConsumersOfThisCrazyTypeSystem",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (c *ConsumersOfThisCrazyTypeSystem) ConsumeAnotherPublicInterface(obj IAnotherPublicInterface) string {
	returns := ""
	_jsii_.Invoke(
		c,
		"consumeAnotherPublicInterface",
		[]interface{}{obj},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (c *ConsumersOfThisCrazyTypeSystem) ConsumeNonInternalInterface(obj INonInternalInterface) _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		c,
		"consumeNonInternalInterface",
		[]interface{}{obj},
		&returns,
	)
	return nil
}

// Class interface
type DataRendererIface interface {
	Render(data scopejsiicalclib.MyFirstStruct) string
	RenderArbitrary(data map[string]_jsii_.Any) string
	RenderMap(map_ map[string]_jsii_.Any) string
}

// Verifies proper type handling through dynamic overrides.
// Struct proxy
type DataRenderer struct {
}

func NewDataRenderer() DataRendererIface {
	_init_.Initialize()
	self := DataRenderer{}
	_jsii_.Create(
		"jsii-calc.DataRenderer",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DataRenderer) Render(data scopejsiicalclib.MyFirstStruct) string {
	returns := ""
	_jsii_.Invoke(
		d,
		"render",
		[]interface{}{data},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (d *DataRenderer) RenderArbitrary(data map[string]_jsii_.Any) string {
	returns := ""
	_jsii_.Invoke(
		d,
		"renderArbitrary",
		[]interface{}{data},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (d *DataRenderer) RenderMap(map_ map[string]_jsii_.Any) string {
	returns := ""
	_jsii_.Invoke(
		d,
		"renderMap",
		[]interface{}{map_},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type DefaultedConstructorArgumentIface interface {
	GetArg1() float64
	GetArg3() string
	GetArg2() string
}

// Struct proxy
type DefaultedConstructorArgument struct {
	Arg1 float64
	Arg3 string
	Arg2 string
}

func (d *DefaultedConstructorArgument) GetArg1() float64 {
	_jsii_.Get(
		d,
		"arg1",
	)
	return d.Arg1
}

func (d *DefaultedConstructorArgument) GetArg3() string {
	_jsii_.Get(
		d,
		"arg3",
	)
	return d.Arg3
}

func (d *DefaultedConstructorArgument) GetArg2() string {
	_jsii_.Get(
		d,
		"arg2",
	)
	return d.Arg2
}


func NewDefaultedConstructorArgument(arg1 float64, arg2 string, arg3 string) DefaultedConstructorArgumentIface {
	_init_.Initialize()
	self := DefaultedConstructorArgument{}
	_jsii_.Create(
		"jsii-calc.DefaultedConstructorArgument",
		[]interface{}{arg1, arg2, arg3},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type Demonstrate982Iface interface {
}

// 1.
// 
// call #takeThis() -> An ObjectRef will be provisioned for the value (it'll be re-used!)
// 2. call #takeThisToo() -> The ObjectRef from before will need to be down-cased to the ParentStruct982 type
// Struct proxy
type Demonstrate982 struct {
}

func NewDemonstrate982() Demonstrate982Iface {
	_init_.Initialize()
	self := Demonstrate982{}
	_jsii_.Create(
		"jsii-calc.Demonstrate982",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func Demonstrate982_TakeThis() ChildStruct982 {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.Demonstrate982",
		"takeThis",
		[]interface{}{},
		&returns,
	)
	return ChildStruct982{}
}

func Demonstrate982_TakeThisToo() ParentStruct982 {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.Demonstrate982",
		"takeThisToo",
		[]interface{}{},
		&returns,
	)
	return ParentStruct982{}
}

// Class interface
type DeprecatedClassIface interface {
	GetReadonlyProperty() string
	GetMutableProperty() float64
	SetMutableProperty(val float64)
	Method()
}

// Deprecated: a pretty boring class
// Struct proxy
type DeprecatedClass struct {
	// Deprecated: this is not always "wazoo", be ready to be disappointed
	ReadonlyProperty string
	// Deprecated: shouldn't have been mutable
	MutableProperty float64
}

func (d *DeprecatedClass) GetReadonlyProperty() string {
	_jsii_.Get(
		d,
		"readonlyProperty",
	)
	return d.ReadonlyProperty
}

func (d *DeprecatedClass) GetMutableProperty() float64 {
	_jsii_.Get(
		d,
		"mutableProperty",
	)
	return d.MutableProperty
}


func NewDeprecatedClass(readonlyString string, mutableNumber float64) DeprecatedClassIface {
	_init_.Initialize()
	self := DeprecatedClass{}
	_jsii_.Create(
		"jsii-calc.DeprecatedClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DeprecatedClass) SetMutableProperty(val float64) {
	_jsii_.Set(
		d,
		"mutableProperty",
		val,
	)
	d.MutableProperty = val
}

func (d *DeprecatedClass) Method() {
	returns := ""
	_jsii_.Invoke(
		d,
		"method",
		[]interface{}{},
		&returns,
	)
}

// Deprecated: your deprecated selection of bad options
type DeprecatedEnum string

const (
	DeprecatedEnumOptionA DeprecatedEnum = "OPTION_A"
	DeprecatedEnumOptionB DeprecatedEnum = "OPTION_B"
)

// DeprecatedStructIface is the public interface for the custom type DeprecatedStruct
// Deprecated: it just wraps a string
type DeprecatedStructIface interface {
	GetReadonlyProperty() string
}

// Deprecated: it just wraps a string
// Struct proxy
type DeprecatedStruct struct {
	// Deprecated: well, yeah
	ReadonlyProperty string
}

func (d *DeprecatedStruct) GetReadonlyProperty() string {
	_jsii_.Get(
		d,
		"readonlyProperty",
	)
	return d.ReadonlyProperty
}


// DerivedStructIface is the public interface for the custom type DerivedStruct
type DerivedStructIface interface {
	GetAnumber() float64
	GetAstring() string
	GetFirstOptional() []string
	GetAnotherRequired() string
	GetBool() bool
	GetNonPrimitive() DoubleTrouble
	GetAnotherOptional() map[string]scopejsiicalclib.NumericValue
	GetOptionalAny() _jsii_.Any
	GetOptionalArray() []string
}

// A struct which derives from another struct.
// Struct proxy
type DerivedStruct struct {
	// An awesome number value.
	// Deprecated.
	Anumber float64
	// A string value.
	// Deprecated.
	Astring string
	// Deprecated.
	FirstOptional []string
	AnotherRequired string
	Bool bool
	// An example of a non primitive property.
	NonPrimitive DoubleTrouble
	// This is optional.
	AnotherOptional map[string]scopejsiicalclib.NumericValue
	OptionalAny _jsii_.Any
	OptionalArray []string
}

func (d *DerivedStruct) GetAnumber() float64 {
	_jsii_.Get(
		d,
		"anumber",
	)
	return d.Anumber
}

func (d *DerivedStruct) GetAstring() string {
	_jsii_.Get(
		d,
		"astring",
	)
	return d.Astring
}

func (d *DerivedStruct) GetFirstOptional() []string {
	_jsii_.Get(
		d,
		"firstOptional",
	)
	return d.FirstOptional
}

func (d *DerivedStruct) GetAnotherRequired() string {
	_jsii_.Get(
		d,
		"anotherRequired",
	)
	return d.AnotherRequired
}

func (d *DerivedStruct) GetBool() bool {
	_jsii_.Get(
		d,
		"bool",
	)
	return d.Bool
}

func (d *DerivedStruct) GetNonPrimitive() DoubleTrouble {
	_jsii_.Get(
		d,
		"nonPrimitive",
	)
	return d.NonPrimitive
}

func (d *DerivedStruct) GetAnotherOptional() map[string]scopejsiicalclib.NumericValue {
	_jsii_.Get(
		d,
		"anotherOptional",
	)
	return d.AnotherOptional
}

func (d *DerivedStruct) GetOptionalAny() _jsii_.Any {
	_jsii_.Get(
		d,
		"optionalAny",
	)
	return d.OptionalAny
}

func (d *DerivedStruct) GetOptionalArray() []string {
	_jsii_.Get(
		d,
		"optionalArray",
	)
	return d.OptionalArray
}


// DiamondInheritanceBaseLevelStructIface is the public interface for the custom type DiamondInheritanceBaseLevelStruct
type DiamondInheritanceBaseLevelStructIface interface {
	GetBaseLevelProperty() string
}

// Struct proxy
type DiamondInheritanceBaseLevelStruct struct {
	BaseLevelProperty string
}

func (d *DiamondInheritanceBaseLevelStruct) GetBaseLevelProperty() string {
	_jsii_.Get(
		d,
		"baseLevelProperty",
	)
	return d.BaseLevelProperty
}


// DiamondInheritanceFirstMidLevelStructIface is the public interface for the custom type DiamondInheritanceFirstMidLevelStruct
type DiamondInheritanceFirstMidLevelStructIface interface {
	GetBaseLevelProperty() string
	GetFirstMidLevelProperty() string
}

// Struct proxy
type DiamondInheritanceFirstMidLevelStruct struct {
	BaseLevelProperty string
	FirstMidLevelProperty string
}

func (d *DiamondInheritanceFirstMidLevelStruct) GetBaseLevelProperty() string {
	_jsii_.Get(
		d,
		"baseLevelProperty",
	)
	return d.BaseLevelProperty
}

func (d *DiamondInheritanceFirstMidLevelStruct) GetFirstMidLevelProperty() string {
	_jsii_.Get(
		d,
		"firstMidLevelProperty",
	)
	return d.FirstMidLevelProperty
}


// DiamondInheritanceSecondMidLevelStructIface is the public interface for the custom type DiamondInheritanceSecondMidLevelStruct
type DiamondInheritanceSecondMidLevelStructIface interface {
	GetBaseLevelProperty() string
	GetSecondMidLevelProperty() string
}

// Struct proxy
type DiamondInheritanceSecondMidLevelStruct struct {
	BaseLevelProperty string
	SecondMidLevelProperty string
}

func (d *DiamondInheritanceSecondMidLevelStruct) GetBaseLevelProperty() string {
	_jsii_.Get(
		d,
		"baseLevelProperty",
	)
	return d.BaseLevelProperty
}

func (d *DiamondInheritanceSecondMidLevelStruct) GetSecondMidLevelProperty() string {
	_jsii_.Get(
		d,
		"secondMidLevelProperty",
	)
	return d.SecondMidLevelProperty
}


// DiamondInheritanceTopLevelStructIface is the public interface for the custom type DiamondInheritanceTopLevelStruct
type DiamondInheritanceTopLevelStructIface interface {
	GetBaseLevelProperty() string
	GetFirstMidLevelProperty() string
	GetSecondMidLevelProperty() string
	GetTopLevelProperty() string
}

// Struct proxy
type DiamondInheritanceTopLevelStruct struct {
	BaseLevelProperty string
	FirstMidLevelProperty string
	SecondMidLevelProperty string
	TopLevelProperty string
}

func (d *DiamondInheritanceTopLevelStruct) GetBaseLevelProperty() string {
	_jsii_.Get(
		d,
		"baseLevelProperty",
	)
	return d.BaseLevelProperty
}

func (d *DiamondInheritanceTopLevelStruct) GetFirstMidLevelProperty() string {
	_jsii_.Get(
		d,
		"firstMidLevelProperty",
	)
	return d.FirstMidLevelProperty
}

func (d *DiamondInheritanceTopLevelStruct) GetSecondMidLevelProperty() string {
	_jsii_.Get(
		d,
		"secondMidLevelProperty",
	)
	return d.SecondMidLevelProperty
}

func (d *DiamondInheritanceTopLevelStruct) GetTopLevelProperty() string {
	_jsii_.Get(
		d,
		"topLevelProperty",
	)
	return d.TopLevelProperty
}


// Class interface
type DisappointingCollectionSourceIface interface {
}

// Verifies that null/undefined can be returned for optional collections.
// 
// This source of collections is disappointing - it'll always give you nothing :(
// Struct proxy
type DisappointingCollectionSource struct {
}

func DisappointingCollectionSource_MaybeList() []string {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.DisappointingCollectionSource",
		"maybeList",
	)
	return nil
}

func DisappointingCollectionSource_MaybeMap() map[string]float64 {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.DisappointingCollectionSource",
		"maybeMap",
	)
	return nil
}

// Class interface
type DoNotOverridePrivatesIface interface {
	ChangePrivatePropertyValue(newValue string)
	PrivateMethodValue() string
	PrivatePropertyValue() string
}

// Struct proxy
type DoNotOverridePrivates struct {
}

func NewDoNotOverridePrivates() DoNotOverridePrivatesIface {
	_init_.Initialize()
	self := DoNotOverridePrivates{}
	_jsii_.Create(
		"jsii-calc.DoNotOverridePrivates",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DoNotOverridePrivates) ChangePrivatePropertyValue(newValue string) {
	returns := ""
	_jsii_.Invoke(
		d,
		"changePrivatePropertyValue",
		[]interface{}{newValue},
		&returns,
	)
}

func (d *DoNotOverridePrivates) PrivateMethodValue() string {
	returns := ""
	_jsii_.Invoke(
		d,
		"privateMethodValue",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (d *DoNotOverridePrivates) PrivatePropertyValue() string {
	returns := ""
	_jsii_.Invoke(
		d,
		"privatePropertyValue",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type DoNotRecognizeAnyAsOptionalIface interface {
	Method(_requiredAny _jsii_.Any, _optionalAny _jsii_.Any, _optionalString string)
}

// jsii#284: do not recognize "any" as an optional argument.
// Struct proxy
type DoNotRecognizeAnyAsOptional struct {
}

func NewDoNotRecognizeAnyAsOptional() DoNotRecognizeAnyAsOptionalIface {
	_init_.Initialize()
	self := DoNotRecognizeAnyAsOptional{}
	_jsii_.Create(
		"jsii-calc.DoNotRecognizeAnyAsOptional",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DoNotRecognizeAnyAsOptional) Method(_requiredAny _jsii_.Any, _optionalAny _jsii_.Any, _optionalString string) {
	returns := ""
	_jsii_.Invoke(
		d,
		"method",
		[]interface{}{_requiredAny, _optionalAny, _optionalString},
		&returns,
	)
}

// Class interface
type DocumentedClassIface interface {
	Greet(greetee Greetee) float64
	Hola()
}

// Here's the first line of the TSDoc comment.
// 
// This is the meat of the TSDoc comment. It may contain
// multiple lines and multiple paragraphs.
// 
// Multiple paragraphs are separated by an empty line.
// Struct proxy
type DocumentedClass struct {
}

func NewDocumentedClass() DocumentedClassIface {
	_init_.Initialize()
	self := DocumentedClass{}
	_jsii_.Create(
		"jsii-calc.DocumentedClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DocumentedClass) Greet(greetee Greetee) float64 {
	returns := ""
	_jsii_.Invoke(
		d,
		"greet",
		[]interface{}{greetee},
		&returns,
	)
	return 0.0
}

func (d *DocumentedClass) Hola() {
	returns := ""
	_jsii_.Invoke(
		d,
		"hola",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type DontComplainAboutVariadicAfterOptionalIface interface {
	OptionalAndVariadic(optional string, things string) string
}

// Struct proxy
type DontComplainAboutVariadicAfterOptional struct {
}

func NewDontComplainAboutVariadicAfterOptional() DontComplainAboutVariadicAfterOptionalIface {
	_init_.Initialize()
	self := DontComplainAboutVariadicAfterOptional{}
	_jsii_.Create(
		"jsii-calc.DontComplainAboutVariadicAfterOptional",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DontComplainAboutVariadicAfterOptional) OptionalAndVariadic(optional string, things string) string {
	returns := ""
	_jsii_.Invoke(
		d,
		"optionalAndVariadic",
		[]interface{}{optional, things},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type DoubleTroubleIface interface {
	IFriendlyRandomGenerator
	IRandomNumberGenerator
	scopejsiicalclib.IFriendly
	Hello() string
	Next() float64
}

// Struct proxy
type DoubleTrouble struct {
}

func NewDoubleTrouble() DoubleTroubleIface {
	_init_.Initialize()
	self := DoubleTrouble{}
	_jsii_.Create(
		"jsii-calc.DoubleTrouble",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IFriendlyRandomGenerator"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DoubleTrouble) Hello() string {
	returns := ""
	_jsii_.Invoke(
		d,
		"hello",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (d *DoubleTrouble) Next() float64 {
	returns := ""
	_jsii_.Invoke(
		d,
		"next",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

// Class interface
type DynamicPropertyBearerIface interface {
	GetDynamicProperty() string
	SetDynamicProperty(val string)
	GetValueStore() string
	SetValueStore(val string)
}

// Ensures we can override a dynamic property that was inherited.
// Struct proxy
type DynamicPropertyBearer struct {
	DynamicProperty string
	ValueStore string
}

func (d *DynamicPropertyBearer) GetDynamicProperty() string {
	_jsii_.Get(
		d,
		"dynamicProperty",
	)
	return d.DynamicProperty
}

func (d *DynamicPropertyBearer) GetValueStore() string {
	_jsii_.Get(
		d,
		"valueStore",
	)
	return d.ValueStore
}


func NewDynamicPropertyBearer(valueStore string) DynamicPropertyBearerIface {
	_init_.Initialize()
	self := DynamicPropertyBearer{}
	_jsii_.Create(
		"jsii-calc.DynamicPropertyBearer",
		[]interface{}{valueStore},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DynamicPropertyBearer) SetDynamicProperty(val string) {
	_jsii_.Set(
		d,
		"dynamicProperty",
		val,
	)
	d.DynamicProperty = val
}

func (d *DynamicPropertyBearer) SetValueStore(val string) {
	_jsii_.Set(
		d,
		"valueStore",
		val,
	)
	d.ValueStore = val
}

// Class interface
type DynamicPropertyBearerChildIface interface {
	GetDynamicProperty() string
	SetDynamicProperty(val string)
	GetValueStore() string
	SetValueStore(val string)
	GetOriginalValue() string
	OverrideValue(newValue string) string
}

// Struct proxy
type DynamicPropertyBearerChild struct {
	DynamicProperty string
	ValueStore string
	OriginalValue string
}

func (d *DynamicPropertyBearerChild) GetDynamicProperty() string {
	_jsii_.Get(
		d,
		"dynamicProperty",
	)
	return d.DynamicProperty
}

func (d *DynamicPropertyBearerChild) GetValueStore() string {
	_jsii_.Get(
		d,
		"valueStore",
	)
	return d.ValueStore
}

func (d *DynamicPropertyBearerChild) GetOriginalValue() string {
	_jsii_.Get(
		d,
		"originalValue",
	)
	return d.OriginalValue
}


func NewDynamicPropertyBearerChild(originalValue string) DynamicPropertyBearerChildIface {
	_init_.Initialize()
	self := DynamicPropertyBearerChild{}
	_jsii_.Create(
		"jsii-calc.DynamicPropertyBearerChild",
		[]interface{}{originalValue},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (d *DynamicPropertyBearerChild) SetDynamicProperty(val string) {
	_jsii_.Set(
		d,
		"dynamicProperty",
		val,
	)
	d.DynamicProperty = val
}

func (d *DynamicPropertyBearerChild) SetValueStore(val string) {
	_jsii_.Set(
		d,
		"valueStore",
		val,
	)
	d.ValueStore = val
}

func (d *DynamicPropertyBearerChild) OverrideValue(newValue string) string {
	returns := ""
	_jsii_.Invoke(
		d,
		"overrideValue",
		[]interface{}{newValue},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type EntropyIface interface {
	Increase() string
	Repeat(word string) string
}

// This class is used to validate that serialization and deserialization does not interpret ISO-8601-formatted timestampts to the native date/time object, as the jsii protocol has a $jsii$date wrapper for this purpose (node's JSON parsing does *NOT* detect dates automatically in this way, so host libraries should not either).
// Struct proxy
type Entropy struct {
}

// Creates a new instance of Entropy.
func NewEntropy(clock IWallClock) EntropyIface {
	_init_.Initialize()
	self := Entropy{}
	_jsii_.Create(
		"jsii-calc.Entropy",
		[]interface{}{clock},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (e *Entropy) Increase() string {
	returns := ""
	_jsii_.Invoke(
		e,
		"increase",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (e *Entropy) Repeat(word string) string {
	returns := ""
	_jsii_.Invoke(
		e,
		"repeat",
		[]interface{}{word},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type EnumDispenserIface interface {
}

// Struct proxy
type EnumDispenser struct {
}

func EnumDispenser_RandomIntegerLikeEnum() AllTypesEnum {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.EnumDispenser",
		"randomIntegerLikeEnum",
		[]interface{}{},
		&returns,
	)
	return "ENUM_DUMMY"
}

func EnumDispenser_RandomStringLikeEnum() StringEnum {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.EnumDispenser",
		"randomStringLikeEnum",
		[]interface{}{},
		&returns,
	)
	return "ENUM_DUMMY"
}

// Class interface
type EraseUndefinedHashValuesIface interface {
}

// Struct proxy
type EraseUndefinedHashValues struct {
}

func NewEraseUndefinedHashValues() EraseUndefinedHashValuesIface {
	_init_.Initialize()
	self := EraseUndefinedHashValues{}
	_jsii_.Create(
		"jsii-calc.EraseUndefinedHashValues",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func EraseUndefinedHashValues_DoesKeyExist(opts EraseUndefinedHashValuesOptions, key string) bool {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.EraseUndefinedHashValues",
		"doesKeyExist",
		[]interface{}{opts, key},
		&returns,
	)
	return true
}

func EraseUndefinedHashValues_Prop1IsNull() map[string]_jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.EraseUndefinedHashValues",
		"prop1IsNull",
		[]interface{}{},
		&returns,
	)
	return nil
}

func EraseUndefinedHashValues_Prop2IsUndefined() map[string]_jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.EraseUndefinedHashValues",
		"prop2IsUndefined",
		[]interface{}{},
		&returns,
	)
	return nil
}

// EraseUndefinedHashValuesOptionsIface is the public interface for the custom type EraseUndefinedHashValuesOptions
type EraseUndefinedHashValuesOptionsIface interface {
	GetOption1() string
	GetOption2() string
}

// Struct proxy
type EraseUndefinedHashValuesOptions struct {
	Option1 string
	Option2 string
}

func (e *EraseUndefinedHashValuesOptions) GetOption1() string {
	_jsii_.Get(
		e,
		"option1",
	)
	return e.Option1
}

func (e *EraseUndefinedHashValuesOptions) GetOption2() string {
	_jsii_.Get(
		e,
		"option2",
	)
	return e.Option2
}


// Class interface
type ExperimentalClassIface interface {
	GetReadonlyProperty() string
	GetMutableProperty() float64
	SetMutableProperty(val float64)
	Method()
}

// Experimental.
// Struct proxy
type ExperimentalClass struct {
	// Experimental.
	ReadonlyProperty string
	// Experimental.
	MutableProperty float64
}

func (e *ExperimentalClass) GetReadonlyProperty() string {
	_jsii_.Get(
		e,
		"readonlyProperty",
	)
	return e.ReadonlyProperty
}

func (e *ExperimentalClass) GetMutableProperty() float64 {
	_jsii_.Get(
		e,
		"mutableProperty",
	)
	return e.MutableProperty
}


func NewExperimentalClass(readonlyString string, mutableNumber float64) ExperimentalClassIface {
	_init_.Initialize()
	self := ExperimentalClass{}
	_jsii_.Create(
		"jsii-calc.ExperimentalClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (e *ExperimentalClass) SetMutableProperty(val float64) {
	_jsii_.Set(
		e,
		"mutableProperty",
		val,
	)
	e.MutableProperty = val
}

func (e *ExperimentalClass) Method() {
	returns := ""
	_jsii_.Invoke(
		e,
		"method",
		[]interface{}{},
		&returns,
	)
}

// Experimental.
type ExperimentalEnum string

const (
	ExperimentalEnumOptionA ExperimentalEnum = "OPTION_A"
	ExperimentalEnumOptionB ExperimentalEnum = "OPTION_B"
)

// ExperimentalStructIface is the public interface for the custom type ExperimentalStruct
// Experimental.
type ExperimentalStructIface interface {
	GetReadonlyProperty() string
}

// Experimental.
// Struct proxy
type ExperimentalStruct struct {
	// Experimental.
	ReadonlyProperty string
}

func (e *ExperimentalStruct) GetReadonlyProperty() string {
	_jsii_.Get(
		e,
		"readonlyProperty",
	)
	return e.ReadonlyProperty
}


// Class interface
type ExportedBaseClassIface interface {
	GetSuccess() bool
}

// Struct proxy
type ExportedBaseClass struct {
	Success bool
}

func (e *ExportedBaseClass) GetSuccess() bool {
	_jsii_.Get(
		e,
		"success",
	)
	return e.Success
}


func NewExportedBaseClass(success bool) ExportedBaseClassIface {
	_init_.Initialize()
	self := ExportedBaseClass{}
	_jsii_.Create(
		"jsii-calc.ExportedBaseClass",
		[]interface{}{success},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// ExtendsInternalInterfaceIface is the public interface for the custom type ExtendsInternalInterface
type ExtendsInternalInterfaceIface interface {
	GetBoom() bool
	GetProp() string
}

// Struct proxy
type ExtendsInternalInterface struct {
	Boom bool
	Prop string
}

func (e *ExtendsInternalInterface) GetBoom() bool {
	_jsii_.Get(
		e,
		"boom",
	)
	return e.Boom
}

func (e *ExtendsInternalInterface) GetProp() string {
	_jsii_.Get(
		e,
		"prop",
	)
	return e.Prop
}


// Class interface
type ExternalClassIface interface {
	GetReadonlyProperty() string
	GetMutableProperty() float64
	SetMutableProperty(val float64)
	Method()
}

// Struct proxy
type ExternalClass struct {
	ReadonlyProperty string
	MutableProperty float64
}

func (e *ExternalClass) GetReadonlyProperty() string {
	_jsii_.Get(
		e,
		"readonlyProperty",
	)
	return e.ReadonlyProperty
}

func (e *ExternalClass) GetMutableProperty() float64 {
	_jsii_.Get(
		e,
		"mutableProperty",
	)
	return e.MutableProperty
}


func NewExternalClass(readonlyString string, mutableNumber float64) ExternalClassIface {
	_init_.Initialize()
	self := ExternalClass{}
	_jsii_.Create(
		"jsii-calc.ExternalClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (e *ExternalClass) SetMutableProperty(val float64) {
	_jsii_.Set(
		e,
		"mutableProperty",
		val,
	)
	e.MutableProperty = val
}

func (e *ExternalClass) Method() {
	returns := ""
	_jsii_.Invoke(
		e,
		"method",
		[]interface{}{},
		&returns,
	)
}

type ExternalEnum string

const (
	ExternalEnumOptionA ExternalEnum = "OPTION_A"
	ExternalEnumOptionB ExternalEnum = "OPTION_B"
)

// ExternalStructIface is the public interface for the custom type ExternalStruct
type ExternalStructIface interface {
	GetReadonlyProperty() string
}

// Struct proxy
type ExternalStruct struct {
	ReadonlyProperty string
}

func (e *ExternalStruct) GetReadonlyProperty() string {
	_jsii_.Get(
		e,
		"readonlyProperty",
	)
	return e.ReadonlyProperty
}


// Class interface
type GiveMeStructsIface interface {
	GetStructLiteral() scopejsiicalclib.StructWithOnlyOptionals
	DerivedToFirst(derived DerivedStruct) scopejsiicalclib.MyFirstStruct
	ReadDerivedNonPrimitive(derived DerivedStruct) DoubleTrouble
	ReadFirstNumber(first scopejsiicalclib.MyFirstStruct) float64
}

// Struct proxy
type GiveMeStructs struct {
	StructLiteral scopejsiicalclib.StructWithOnlyOptionals
}

func (g *GiveMeStructs) GetStructLiteral() scopejsiicalclib.StructWithOnlyOptionals {
	_jsii_.Get(
		g,
		"structLiteral",
	)
	return g.StructLiteral
}


func NewGiveMeStructs() GiveMeStructsIface {
	_init_.Initialize()
	self := GiveMeStructs{}
	_jsii_.Create(
		"jsii-calc.GiveMeStructs",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (g *GiveMeStructs) DerivedToFirst(derived DerivedStruct) scopejsiicalclib.MyFirstStruct {
	returns := ""
	_jsii_.Invoke(
		g,
		"derivedToFirst",
		[]interface{}{derived},
		&returns,
	)
	return scopejsiicalclib.MyFirstStruct{}
}

func (g *GiveMeStructs) ReadDerivedNonPrimitive(derived DerivedStruct) DoubleTrouble {
	returns := ""
	_jsii_.Invoke(
		g,
		"readDerivedNonPrimitive",
		[]interface{}{derived},
		&returns,
	)
	return DoubleTrouble{}
}

func (g *GiveMeStructs) ReadFirstNumber(first scopejsiicalclib.MyFirstStruct) float64 {
	returns := ""
	_jsii_.Invoke(
		g,
		"readFirstNumber",
		[]interface{}{first},
		&returns,
	)
	return 0.0
}

// GreeteeIface is the public interface for the custom type Greetee
type GreeteeIface interface {
	GetName() string
}

// These are some arguments you can pass to a method.
// Struct proxy
type Greetee struct {
	// The name of the greetee.
	Name string
}

func (g *Greetee) GetName() string {
	_jsii_.Get(
		g,
		"name",
	)
	return g.Name
}


// Class interface
type GreetingAugmenterIface interface {
	BetterGreeting(friendly scopejsiicalclib.IFriendly) string
}

// Struct proxy
type GreetingAugmenter struct {
}

func NewGreetingAugmenter() GreetingAugmenterIface {
	_init_.Initialize()
	self := GreetingAugmenter{}
	_jsii_.Create(
		"jsii-calc.GreetingAugmenter",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (g *GreetingAugmenter) BetterGreeting(friendly scopejsiicalclib.IFriendly) string {
	returns := ""
	_jsii_.Invoke(
		g,
		"betterGreeting",
		[]interface{}{friendly},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// We can return an anonymous interface implementation from an override without losing the interface declarations.
type IAnonymousImplementationProvider interface {
	ProvideAsClass() Implementation
	ProvideAsInterface() IAnonymouslyImplementMe
}

type IAnonymouslyImplementMe interface {
	Verb() string
	GetValue() float64
}

type IAnotherPublicInterface interface {
	GetA() string
}

type IBell interface {
	Ring()
}

// Takes the object parameter as an interface.
type IBellRinger interface {
	YourTurn(bell IBell)
}

// Takes the object parameter as a calss.
type IConcreteBellRinger interface {
	YourTurn(bell Bell)
}

// Deprecated: useless interface
type IDeprecatedInterface interface {
	// Deprecated: services no purpose
	Method()
	// Deprecated: could be better
	GetMutableProperty() float64
}

// Experimental.
type IExperimentalInterface interface {
	// Experimental.
	Method()
	// Experimental.
	GetMutableProperty() float64
}

type IExtendsPrivateInterface interface {
	GetMoreThings() []string
	GetPrivate() string
}

type IExternalInterface interface {
	Method()
	GetMutableProperty() float64
}

// Even friendlier classes can implement this interface.
type IFriendlier interface {
	scopejsiicalclib.IFriendly
	// Say farewell.
	Farewell() string
	// Say goodbye.
	//
	// Returns: A goodbye blessing.
	Goodbye() string
}

type IFriendlyRandomGenerator interface {
	IRandomNumberGenerator
	scopejsiicalclib.IFriendly
}

// awslabs/jsii#220 Abstract return type.
type IInterfaceImplementedByAbstractClass interface {
	GetPropFromInterface() string
}

// Even though this interface has only properties, it is disqualified from being a datatype because it inherits from an interface that is not a datatype.
type IInterfaceThatShouldNotBeADataType interface {
	IInterfaceWithMethods
	GetOtherValue() string
}

type IInterfaceWithInternal interface {
	Visible()
}

type IInterfaceWithMethods interface {
	DoThings()
	GetValue() string
}

// awslabs/jsii#175 Interface proxies (and builders) do not respect optional arguments in methods.
type IInterfaceWithOptionalMethodArguments interface {
	Hello(arg1 string, arg2 float64)
}

type IInterfaceWithProperties interface {
	GetReadOnlyString() string
	GetReadWriteString() string
}

type IInterfaceWithPropertiesExtension interface {
	IInterfaceWithProperties
	GetFoo() float64
}

type Ijsii417Derived interface {
	Ijsii417PublicBaseOfBase
	Bar()
	Baz()
	GetProperty() string
}

type Ijsii417PublicBaseOfBase interface {
	Foo()
	GetHasRoot() bool
}

type IJsii487External interface {
}

type IJsii487External2 interface {
}

type IJsii496 interface {
}

type IMutableObjectLiteral interface {
	GetValue() string
}

type INonInternalInterface interface {
	IAnotherPublicInterface
	GetB() string
	GetC() string
}

// Make sure that setters are properly called on objects with interfaces.
type IObjectWithProperty interface {
	WasSet() bool
	GetProperty() string
}

// Checks that optional result from interface method code generates correctly.
type IOptionalMethod interface {
	Optional() string
}

type IPrivatelyImplemented interface {
	GetSuccess() bool
}

type IPublicInterface interface {
	Bye() string
}

type IPublicInterface2 interface {
	Ciao() string
}

// Generates random numbers.
type IRandomNumberGenerator interface {
	// Returns another random number.
	//
	// Returns: A random number.
	Next() float64
}

// Returns a subclass of a known class which implements an interface.
type IReturnJsii976 interface {
	GetFoo() float64
}

type IReturnsNumber interface {
	ObtainNumber() scopejsiicalclib.IDoublable
	GetNumberProp() scopejsiicalclib.Number
}

type IStableInterface interface {
	Method()
	GetMutableProperty() float64
}

// Verifies that a "pure" implementation of an interface works correctly.
type IStructReturningDelegate interface {
	ReturnStruct() StructB
}

// Implement this interface.
type IWallClock interface {
	// Returns the current time, formatted as an ISO-8601 string.
	Iso8601Now() string
}

// Class interface
type ImplementInternalInterfaceIface interface {
	GetProp() string
	SetProp(val string)
}

// Struct proxy
type ImplementInternalInterface struct {
	Prop string
}

func (i *ImplementInternalInterface) GetProp() string {
	_jsii_.Get(
		i,
		"prop",
	)
	return i.Prop
}


func NewImplementInternalInterface() ImplementInternalInterfaceIface {
	_init_.Initialize()
	self := ImplementInternalInterface{}
	_jsii_.Create(
		"jsii-calc.ImplementInternalInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *ImplementInternalInterface) SetProp(val string) {
	_jsii_.Set(
		i,
		"prop",
		val,
	)
	i.Prop = val
}

// Class interface
type ImplementationIface interface {
	GetValue() float64
}

// Struct proxy
type Implementation struct {
	Value float64
}

func (i *Implementation) GetValue() float64 {
	_jsii_.Get(
		i,
		"value",
	)
	return i.Value
}


func NewImplementation() ImplementationIface {
	_init_.Initialize()
	self := Implementation{}
	_jsii_.Create(
		"jsii-calc.Implementation",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type ImplementsInterfaceWithInternalIface interface {
	IInterfaceWithInternal
	Visible()
}

// Struct proxy
type ImplementsInterfaceWithInternal struct {
}

func NewImplementsInterfaceWithInternal() ImplementsInterfaceWithInternalIface {
	_init_.Initialize()
	self := ImplementsInterfaceWithInternal{}
	_jsii_.Create(
		"jsii-calc.ImplementsInterfaceWithInternal",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IInterfaceWithInternal"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *ImplementsInterfaceWithInternal) Visible() {
	returns := ""
	_jsii_.Invoke(
		i,
		"visible",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type ImplementsInterfaceWithInternalSubclassIface interface {
	IInterfaceWithInternal
	Visible()
}

// Struct proxy
type ImplementsInterfaceWithInternalSubclass struct {
}

func NewImplementsInterfaceWithInternalSubclass() ImplementsInterfaceWithInternalSubclassIface {
	_init_.Initialize()
	self := ImplementsInterfaceWithInternalSubclass{}
	_jsii_.Create(
		"jsii-calc.ImplementsInterfaceWithInternalSubclass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *ImplementsInterfaceWithInternalSubclass) Visible() {
	returns := ""
	_jsii_.Invoke(
		i,
		"visible",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type ImplementsPrivateInterfaceIface interface {
	GetPrivate() string
	SetPrivate(val string)
}

// Struct proxy
type ImplementsPrivateInterface struct {
	Private string
}

func (i *ImplementsPrivateInterface) GetPrivate() string {
	_jsii_.Get(
		i,
		"private",
	)
	return i.Private
}


func NewImplementsPrivateInterface() ImplementsPrivateInterfaceIface {
	_init_.Initialize()
	self := ImplementsPrivateInterface{}
	_jsii_.Create(
		"jsii-calc.ImplementsPrivateInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *ImplementsPrivateInterface) SetPrivate(val string) {
	_jsii_.Set(
		i,
		"private",
		val,
	)
	i.Private = val
}

// ImplictBaseOfBaseIface is the public interface for the custom type ImplictBaseOfBase
type ImplictBaseOfBaseIface interface {
	GetFoo() scopejsiicalcbaseofbase.Very
	GetBar() string
	GetGoo() string
}

// Struct proxy
type ImplictBaseOfBase struct {
	Foo scopejsiicalcbaseofbase.Very
	Bar string
	Goo string
}

func (i *ImplictBaseOfBase) GetFoo() scopejsiicalcbaseofbase.Very {
	_jsii_.Get(
		i,
		"foo",
	)
	return i.Foo
}

func (i *ImplictBaseOfBase) GetBar() string {
	_jsii_.Get(
		i,
		"bar",
	)
	return i.Bar
}

func (i *ImplictBaseOfBase) GetGoo() string {
	_jsii_.Get(
		i,
		"goo",
	)
	return i.Goo
}


// Class interface
type InbetweenClassIface interface {
	IPublicInterface2
	Hello()
	Ciao() string
}

// Struct proxy
type InbetweenClass struct {
}

func NewInbetweenClass() InbetweenClassIface {
	_init_.Initialize()
	self := InbetweenClass{}
	_jsii_.Create(
		"jsii-calc.InbetweenClass",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IPublicInterface2"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *InbetweenClass) Hello() {
	returns := ""
	_jsii_.Invoke(
		i,
		"hello",
		[]interface{}{},
		&returns,
	)
}

func (i *InbetweenClass) Ciao() string {
	returns := ""
	_jsii_.Invoke(
		i,
		"ciao",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type InterfaceCollectionsIface interface {
}

// Verifies that collections of interfaces or structs are correctly handled.
// 
// See: https://github.com/aws/jsii/issues/1196
// Struct proxy
type InterfaceCollections struct {
}

func InterfaceCollections_ListOfInterfaces() []IBell {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.InterfaceCollections",
		"listOfInterfaces",
		[]interface{}{},
		&returns,
	)
	return nil
}

func InterfaceCollections_ListOfStructs() []StructA {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.InterfaceCollections",
		"listOfStructs",
		[]interface{}{},
		&returns,
	)
	return nil
}

func InterfaceCollections_MapOfInterfaces() map[string]IBell {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.InterfaceCollections",
		"mapOfInterfaces",
		[]interface{}{},
		&returns,
	)
	return nil
}

func InterfaceCollections_MapOfStructs() map[string]StructA {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.InterfaceCollections",
		"mapOfStructs",
		[]interface{}{},
		&returns,
	)
	return nil
}

// Class interface
type InterfacesMakerIface interface {
}

// We can return arrays of interfaces See aws/aws-cdk#2362.
// Struct proxy
type InterfacesMaker struct {
}

func InterfacesMaker_MakeInterfaces(count float64) []scopejsiicalclib.IDoublable {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.InterfacesMaker",
		"makeInterfaces",
		[]interface{}{count},
		&returns,
	)
	return nil
}

// Class interface
type IsomorphismIface interface {
	Myself() Isomorphism
}

// Checks the "same instance" isomorphism is preserved within the constructor.
// 
// Create a subclass of this, and assert that \`this.myself()\` actually returns
// \`this\` from within the constructor.
// Struct proxy
type Isomorphism struct {
}

func NewIsomorphism() IsomorphismIface {
	_init_.Initialize()
	self := Isomorphism{}
	_jsii_.Create(
		"jsii-calc.Isomorphism",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (i *Isomorphism) Myself() Isomorphism {
	returns := ""
	_jsii_.Invoke(
		i,
		"myself",
		[]interface{}{},
		&returns,
	)
	return Isomorphism{}
}

// Class interface
type Jsii417DerivedIface interface {
	GetHasRoot() bool
	GetProperty() string
	Foo()
	Bar()
	Baz()
}

// Struct proxy
type Jsii417Derived struct {
	HasRoot bool
	Property string
}

func (j *Jsii417Derived) GetHasRoot() bool {
	_jsii_.Get(
		j,
		"hasRoot",
	)
	return j.HasRoot
}

func (j *Jsii417Derived) GetProperty() string {
	_jsii_.Get(
		j,
		"property",
	)
	return j.Property
}


func NewJsii417Derived(property string) Jsii417DerivedIface {
	_init_.Initialize()
	self := Jsii417Derived{}
	_jsii_.Create(
		"jsii-calc.JSII417Derived",
		[]interface{}{property},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func Jsii417Derived_MakeInstance() Jsii417PublicBaseOfBase {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JSII417Derived",
		"makeInstance",
		[]interface{}{},
		&returns,
	)
	return Jsii417PublicBaseOfBase{}
}

func (j *Jsii417Derived) Foo() {
	returns := ""
	_jsii_.Invoke(
		j,
		"foo",
		[]interface{}{},
		&returns,
	)
}

func (j *Jsii417Derived) Bar() {
	returns := ""
	_jsii_.Invoke(
		j,
		"bar",
		[]interface{}{},
		&returns,
	)
}

func (j *Jsii417Derived) Baz() {
	returns := ""
	_jsii_.Invoke(
		j,
		"baz",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type Jsii417PublicBaseOfBaseIface interface {
	GetHasRoot() bool
	Foo()
}

// Struct proxy
type Jsii417PublicBaseOfBase struct {
	HasRoot bool
}

func (j *Jsii417PublicBaseOfBase) GetHasRoot() bool {
	_jsii_.Get(
		j,
		"hasRoot",
	)
	return j.HasRoot
}


func NewJsii417PublicBaseOfBase() Jsii417PublicBaseOfBaseIface {
	_init_.Initialize()
	self := Jsii417PublicBaseOfBase{}
	_jsii_.Create(
		"jsii-calc.JSII417PublicBaseOfBase",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func Jsii417PublicBaseOfBase_MakeInstance() Jsii417PublicBaseOfBase {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JSII417PublicBaseOfBase",
		"makeInstance",
		[]interface{}{},
		&returns,
	)
	return Jsii417PublicBaseOfBase{}
}

func (j *Jsii417PublicBaseOfBase) Foo() {
	returns := ""
	_jsii_.Invoke(
		j,
		"foo",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type JsObjectLiteralForInterfaceIface interface {
	GiveMeFriendly() scopejsiicalclib.IFriendly
	GiveMeFriendlyGenerator() IFriendlyRandomGenerator
}

// Struct proxy
type JsObjectLiteralForInterface struct {
}

func NewJsObjectLiteralForInterface() JsObjectLiteralForInterfaceIface {
	_init_.Initialize()
	self := JsObjectLiteralForInterface{}
	_jsii_.Create(
		"jsii-calc.JSObjectLiteralForInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (j *JsObjectLiteralForInterface) GiveMeFriendly() scopejsiicalclib.IFriendly {
	returns := ""
	_jsii_.Invoke(
		j,
		"giveMeFriendly",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (j *JsObjectLiteralForInterface) GiveMeFriendlyGenerator() IFriendlyRandomGenerator {
	returns := ""
	_jsii_.Invoke(
		j,
		"giveMeFriendlyGenerator",
		[]interface{}{},
		&returns,
	)
	return nil
}

// Class interface
type JsObjectLiteralToNativeIface interface {
	ReturnLiteral() JsObjectLiteralToNativeClass
}

// Struct proxy
type JsObjectLiteralToNative struct {
}

func NewJsObjectLiteralToNative() JsObjectLiteralToNativeIface {
	_init_.Initialize()
	self := JsObjectLiteralToNative{}
	_jsii_.Create(
		"jsii-calc.JSObjectLiteralToNative",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (j *JsObjectLiteralToNative) ReturnLiteral() JsObjectLiteralToNativeClass {
	returns := ""
	_jsii_.Invoke(
		j,
		"returnLiteral",
		[]interface{}{},
		&returns,
	)
	return JsObjectLiteralToNativeClass{}
}

// Class interface
type JsObjectLiteralToNativeClassIface interface {
	GetPropA() string
	SetPropA(val string)
	GetPropB() float64
	SetPropB(val float64)
}

// Struct proxy
type JsObjectLiteralToNativeClass struct {
	PropA string
	PropB float64
}

func (j *JsObjectLiteralToNativeClass) GetPropA() string {
	_jsii_.Get(
		j,
		"propA",
	)
	return j.PropA
}

func (j *JsObjectLiteralToNativeClass) GetPropB() float64 {
	_jsii_.Get(
		j,
		"propB",
	)
	return j.PropB
}


func NewJsObjectLiteralToNativeClass() JsObjectLiteralToNativeClassIface {
	_init_.Initialize()
	self := JsObjectLiteralToNativeClass{}
	_jsii_.Create(
		"jsii-calc.JSObjectLiteralToNativeClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (j *JsObjectLiteralToNativeClass) SetPropA(val string) {
	_jsii_.Set(
		j,
		"propA",
		val,
	)
	j.PropA = val
}

func (j *JsObjectLiteralToNativeClass) SetPropB(val float64) {
	_jsii_.Set(
		j,
		"propB",
		val,
	)
	j.PropB = val
}

// Class interface
type JavaReservedWordsIface interface {
	GetWhile() string
	SetWhile(val string)
	Abstract()
	Assert()
	Boolean()
	Break()
	Byte()
	Case()
	Catch()
	Char()
	Class()
	Const()
	Continue()
	Default()
	Do()
	Double()
	Else()
	Enum()
	Extends()
	False()
	Final()
	Finally()
	Float()
	For()
	Goto()
	If()
	Implements()
	Import()
	Instanceof()
	Int()
	Interface()
	Long()
	Native()
	New()
	Null()
	Package()
	Private()
	Protected()
	Public()
	Return()
	Short()
	Static()
	Strictfp()
	Super()
	Switch()
	Synchronized()
	This()
	Throw()
	Throws()
	Transient()
	True()
	Try()
	Void()
	Volatile()
}

// Struct proxy
type JavaReservedWords struct {
	While string
}

func (j *JavaReservedWords) GetWhile() string {
	_jsii_.Get(
		j,
		"while",
	)
	return j.While
}


func NewJavaReservedWords() JavaReservedWordsIface {
	_init_.Initialize()
	self := JavaReservedWords{}
	_jsii_.Create(
		"jsii-calc.JavaReservedWords",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (j *JavaReservedWords) SetWhile(val string) {
	_jsii_.Set(
		j,
		"while",
		val,
	)
	j.While = val
}

func (j *JavaReservedWords) Abstract() {
	returns := ""
	_jsii_.Invoke(
		j,
		"abstract",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Assert() {
	returns := ""
	_jsii_.Invoke(
		j,
		"assert",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Boolean() {
	returns := ""
	_jsii_.Invoke(
		j,
		"boolean",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Break() {
	returns := ""
	_jsii_.Invoke(
		j,
		"break",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Byte() {
	returns := ""
	_jsii_.Invoke(
		j,
		"byte",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Case() {
	returns := ""
	_jsii_.Invoke(
		j,
		"case",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Catch() {
	returns := ""
	_jsii_.Invoke(
		j,
		"catch",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Char() {
	returns := ""
	_jsii_.Invoke(
		j,
		"char",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Class() {
	returns := ""
	_jsii_.Invoke(
		j,
		"class",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Const() {
	returns := ""
	_jsii_.Invoke(
		j,
		"const",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Continue() {
	returns := ""
	_jsii_.Invoke(
		j,
		"continue",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Default() {
	returns := ""
	_jsii_.Invoke(
		j,
		"default",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Do() {
	returns := ""
	_jsii_.Invoke(
		j,
		"do",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Double() {
	returns := ""
	_jsii_.Invoke(
		j,
		"double",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Else() {
	returns := ""
	_jsii_.Invoke(
		j,
		"else",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Enum() {
	returns := ""
	_jsii_.Invoke(
		j,
		"enum",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Extends() {
	returns := ""
	_jsii_.Invoke(
		j,
		"extends",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) False() {
	returns := ""
	_jsii_.Invoke(
		j,
		"false",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Final() {
	returns := ""
	_jsii_.Invoke(
		j,
		"final",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Finally() {
	returns := ""
	_jsii_.Invoke(
		j,
		"finally",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Float() {
	returns := ""
	_jsii_.Invoke(
		j,
		"float",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) For() {
	returns := ""
	_jsii_.Invoke(
		j,
		"for",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Goto() {
	returns := ""
	_jsii_.Invoke(
		j,
		"goto",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) If() {
	returns := ""
	_jsii_.Invoke(
		j,
		"if",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Implements() {
	returns := ""
	_jsii_.Invoke(
		j,
		"implements",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Import() {
	returns := ""
	_jsii_.Invoke(
		j,
		"import",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Instanceof() {
	returns := ""
	_jsii_.Invoke(
		j,
		"instanceof",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Int() {
	returns := ""
	_jsii_.Invoke(
		j,
		"int",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Interface() {
	returns := ""
	_jsii_.Invoke(
		j,
		"interface",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Long() {
	returns := ""
	_jsii_.Invoke(
		j,
		"long",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Native() {
	returns := ""
	_jsii_.Invoke(
		j,
		"native",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) New() {
	returns := ""
	_jsii_.Invoke(
		j,
		"new",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Null() {
	returns := ""
	_jsii_.Invoke(
		j,
		"null",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Package() {
	returns := ""
	_jsii_.Invoke(
		j,
		"package",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Private() {
	returns := ""
	_jsii_.Invoke(
		j,
		"private",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Protected() {
	returns := ""
	_jsii_.Invoke(
		j,
		"protected",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Public() {
	returns := ""
	_jsii_.Invoke(
		j,
		"public",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Return() {
	returns := ""
	_jsii_.Invoke(
		j,
		"return",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Short() {
	returns := ""
	_jsii_.Invoke(
		j,
		"short",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Static() {
	returns := ""
	_jsii_.Invoke(
		j,
		"static",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Strictfp() {
	returns := ""
	_jsii_.Invoke(
		j,
		"strictfp",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Super() {
	returns := ""
	_jsii_.Invoke(
		j,
		"super",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Switch() {
	returns := ""
	_jsii_.Invoke(
		j,
		"switch",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Synchronized() {
	returns := ""
	_jsii_.Invoke(
		j,
		"synchronized",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) This() {
	returns := ""
	_jsii_.Invoke(
		j,
		"this",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Throw() {
	returns := ""
	_jsii_.Invoke(
		j,
		"throw",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Throws() {
	returns := ""
	_jsii_.Invoke(
		j,
		"throws",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Transient() {
	returns := ""
	_jsii_.Invoke(
		j,
		"transient",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) True() {
	returns := ""
	_jsii_.Invoke(
		j,
		"true",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Try() {
	returns := ""
	_jsii_.Invoke(
		j,
		"try",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Void() {
	returns := ""
	_jsii_.Invoke(
		j,
		"void",
		[]interface{}{},
		&returns,
	)
}

func (j *JavaReservedWords) Volatile() {
	returns := ""
	_jsii_.Invoke(
		j,
		"volatile",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type Jsii487DerivedIface interface {
	IJsii487External2
	IJsii487External
}

// Struct proxy
type Jsii487Derived struct {
}

func NewJsii487Derived() Jsii487DerivedIface {
	_init_.Initialize()
	self := Jsii487Derived{}
	_jsii_.Create(
		"jsii-calc.Jsii487Derived",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IJsii487External2", "jsii-calc.IJsii487External"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type Jsii496DerivedIface interface {
	IJsii496
}

// Struct proxy
type Jsii496Derived struct {
}

func NewJsii496Derived() Jsii496DerivedIface {
	_init_.Initialize()
	self := Jsii496Derived{}
	_jsii_.Create(
		"jsii-calc.Jsii496Derived",
		[]interface{}{},
		[]_jsii_.FQN{"jsii-calc.IJsii496"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type JsiiAgentIface interface {
}

// Host runtime version should be set via JSII_AGENT.
// Struct proxy
type JsiiAgent struct {
}

func NewJsiiAgent() JsiiAgentIface {
	_init_.Initialize()
	self := JsiiAgent{}
	_jsii_.Create(
		"jsii-calc.JsiiAgent",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func JsiiAgent_Value() string {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.JsiiAgent",
		"value",
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type JsonFormatterIface interface {
}

// Make sure structs are un-decorated on the way in.
// See: https://github.com/aws/aws-cdk/issues/5066
//
// Struct proxy
type JsonFormatter struct {
}

func JsonFormatter_AnyArray() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyArray",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyBooleanFalse() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyBooleanFalse",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyBooleanTrue() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyBooleanTrue",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyDate() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyDate",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyEmptyString() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyEmptyString",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyFunction() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyFunction",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyHash() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyHash",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyNull() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyNull",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyNumber() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyNumber",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyRef() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyRef",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyString() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyString",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyUndefined() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyUndefined",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_AnyZero() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"anyZero",
		[]interface{}{},
		&returns,
	)
	return nil
}

func JsonFormatter_Stringify(value _jsii_.Any) string {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.JsonFormatter",
		"stringify",
		[]interface{}{value},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type LevelOneIface interface {
	GetProps() LevelOneProps
}

// Validates that nested classes get correct code generation for the occasional forward reference.
// Struct proxy
type LevelOne struct {
	Props LevelOneProps
}

func (l *LevelOne) GetProps() LevelOneProps {
	_jsii_.Get(
		l,
		"props",
	)
	return l.Props
}


func NewLevelOne(props LevelOneProps) LevelOneIface {
	_init_.Initialize()
	self := LevelOne{}
	_jsii_.Create(
		"jsii-calc.LevelOne",
		[]interface{}{props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// PropBooleanValueIface is the public interface for the custom type PropBooleanValue
type PropBooleanValueIface interface {
	GetValue() bool
}

// Struct proxy
type PropBooleanValue struct {
	Value bool
}

func (p *PropBooleanValue) GetValue() bool {
	_jsii_.Get(
		p,
		"value",
	)
	return p.Value
}


// PropPropertyIface is the public interface for the custom type PropProperty
type PropPropertyIface interface {
	GetProp() PropBooleanValue
}

// Struct proxy
type PropProperty struct {
	Prop PropBooleanValue
}

func (p *PropProperty) GetProp() PropBooleanValue {
	_jsii_.Get(
		p,
		"prop",
	)
	return p.Prop
}


// LevelOnePropsIface is the public interface for the custom type LevelOneProps
type LevelOnePropsIface interface {
	GetProp() PropProperty
}

// Struct proxy
type LevelOneProps struct {
	Prop PropProperty
}

func (l *LevelOneProps) GetProp() PropProperty {
	_jsii_.Get(
		l,
		"prop",
	)
	return l.Prop
}


// LoadBalancedFargateServicePropsIface is the public interface for the custom type LoadBalancedFargateServiceProps
type LoadBalancedFargateServicePropsIface interface {
	GetContainerPort() float64
	GetCpu() string
	GetMemoryMiB() string
	GetPublicLoadBalancer() bool
	GetPublicTasks() bool
}

// jsii#298: show default values in sphinx documentation, and respect newlines.
// Struct proxy
type LoadBalancedFargateServiceProps struct {
	// The container port of the application load balancer attached to your Fargate service.
	// 
	// Corresponds to container port mapping.
	ContainerPort float64
	// The number of cpu units used by the task.
	// 
	// Valid values, which determines your range of valid values for the memory parameter:
	// 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
	// 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
	// 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
	// 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
	// 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
	// 
	// This default is set in the underlying FargateTaskDefinition construct.
	Cpu string
	// The amount (in MiB) of memory used by the task.
	// 
	// This field is required and you must use one of the following values, which determines your range of valid values
	// for the cpu parameter:
	// 
	// 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
	// 
	// 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
	// 
	// 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
	// 
	// Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
	// 
	// Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
	// 
	// This default is set in the underlying FargateTaskDefinition construct.
	MemoryMiB string
	// Determines whether the Application Load Balancer will be internet-facing.
	PublicLoadBalancer bool
	// Determines whether your Fargate Service will be assigned a public IP address.
	PublicTasks bool
}

func (l *LoadBalancedFargateServiceProps) GetContainerPort() float64 {
	_jsii_.Get(
		l,
		"containerPort",
	)
	return l.ContainerPort
}

func (l *LoadBalancedFargateServiceProps) GetCpu() string {
	_jsii_.Get(
		l,
		"cpu",
	)
	return l.Cpu
}

func (l *LoadBalancedFargateServiceProps) GetMemoryMiB() string {
	_jsii_.Get(
		l,
		"memoryMiB",
	)
	return l.MemoryMiB
}

func (l *LoadBalancedFargateServiceProps) GetPublicLoadBalancer() bool {
	_jsii_.Get(
		l,
		"publicLoadBalancer",
	)
	return l.PublicLoadBalancer
}

func (l *LoadBalancedFargateServiceProps) GetPublicTasks() bool {
	_jsii_.Get(
		l,
		"publicTasks",
	)
	return l.PublicTasks
}


// Class interface
type MethodNamedPropertyIface interface {
	GetElite() float64
	Property() string
}

// Struct proxy
type MethodNamedProperty struct {
	Elite float64
}

func (m *MethodNamedProperty) GetElite() float64 {
	_jsii_.Get(
		m,
		"elite",
	)
	return m.Elite
}


func NewMethodNamedProperty() MethodNamedPropertyIface {
	_init_.Initialize()
	self := MethodNamedProperty{}
	_jsii_.Create(
		"jsii-calc.MethodNamedProperty",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (m *MethodNamedProperty) Property() string {
	returns := ""
	_jsii_.Invoke(
		m,
		"property",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type MultiplyIface interface {
	scopejsiicalclib.IFriendly
	IFriendlier
	scopejsiicalclib.IFriendly
	IRandomNumberGenerator
	GetValue() float64
	GetLhs() scopejsiicalclib.NumericValue
	GetRhs() scopejsiicalclib.NumericValue
	TypeName() _jsii_.Any
	ToString() string
	Hello() string
	Farewell() string
	Goodbye() string
	Next() float64
}

// The "*" binary operation.
// Struct proxy
type Multiply struct {
	// (deprecated) The value.
	Value float64
	// Left-hand side operand.
	Lhs scopejsiicalclib.NumericValue
	// Right-hand side operand.
	Rhs scopejsiicalclib.NumericValue
}

func (m *Multiply) GetValue() float64 {
	_jsii_.Get(
		m,
		"value",
	)
	return m.Value
}

func (m *Multiply) GetLhs() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		m,
		"lhs",
	)
	return m.Lhs
}

func (m *Multiply) GetRhs() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		m,
		"rhs",
	)
	return m.Rhs
}


// Creates a BinaryOperation.
func NewMultiply(lhs scopejsiicalclib.NumericValue, rhs scopejsiicalclib.NumericValue) MultiplyIface {
	_init_.Initialize()
	self := Multiply{}
	_jsii_.Create(
		"jsii-calc.Multiply",
		[]interface{}{lhs, rhs},
		[]_jsii_.FQN{"jsii-calc.IFriendlier", "jsii-calc.IRandomNumberGenerator"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (m *Multiply) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		m,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (m *Multiply) ToString() string {
	returns := ""
	_jsii_.Invoke(
		m,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (m *Multiply) Hello() string {
	returns := ""
	_jsii_.Invoke(
		m,
		"hello",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (m *Multiply) Farewell() string {
	returns := ""
	_jsii_.Invoke(
		m,
		"farewell",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (m *Multiply) Goodbye() string {
	returns := ""
	_jsii_.Invoke(
		m,
		"goodbye",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (m *Multiply) Next() float64 {
	returns := ""
	_jsii_.Invoke(
		m,
		"next",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

// Class interface
type NegateIface interface {
	IFriendlier
	scopejsiicalclib.IFriendly
	GetValue() float64
	GetOperand() scopejsiicalclib.NumericValue
	TypeName() _jsii_.Any
	ToString() string
	Farewell() string
	Goodbye() string
	Hello() string
}

// The negation operation ("-value").
// Struct proxy
type Negate struct {
	// (deprecated) The value.
	Value float64
	Operand scopejsiicalclib.NumericValue
}

func (n *Negate) GetValue() float64 {
	_jsii_.Get(
		n,
		"value",
	)
	return n.Value
}

func (n *Negate) GetOperand() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		n,
		"operand",
	)
	return n.Operand
}


func NewNegate(operand scopejsiicalclib.NumericValue) NegateIface {
	_init_.Initialize()
	self := Negate{}
	_jsii_.Create(
		"jsii-calc.Negate",
		[]interface{}{operand},
		[]_jsii_.FQN{"jsii-calc.IFriendlier"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *Negate) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		n,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (n *Negate) ToString() string {
	returns := ""
	_jsii_.Invoke(
		n,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (n *Negate) Farewell() string {
	returns := ""
	_jsii_.Invoke(
		n,
		"farewell",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (n *Negate) Goodbye() string {
	returns := ""
	_jsii_.Invoke(
		n,
		"goodbye",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (n *Negate) Hello() string {
	returns := ""
	_jsii_.Invoke(
		n,
		"hello",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type NestedClassInstanceIface interface {
}

// Struct proxy
type NestedClassInstance struct {
}

func NestedClassInstance_MakeInstance() submodule.NestedClass {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.NestedClassInstance",
		"makeInstance",
		[]interface{}{},
		&returns,
	)
	return submodule.NestedClass{}
}

// NestedStructIface is the public interface for the custom type NestedStruct
type NestedStructIface interface {
	GetNumberProp() float64
}

// Struct proxy
type NestedStruct struct {
	// When provided, must be > 0.
	NumberProp float64
}

func (n *NestedStruct) GetNumberProp() float64 {
	_jsii_.Get(
		n,
		"numberProp",
	)
	return n.NumberProp
}


// Class interface
type NodeStandardLibraryIface interface {
	GetOsPlatform() string
	CryptoSha256() string
	FsReadFile() string
	FsReadFileSync() string
}

// Test fixture to verify that jsii modules can use the node standard library.
// Struct proxy
type NodeStandardLibrary struct {
	// Returns the current os.platform() from the "os" node module.
	OsPlatform string
}

func (n *NodeStandardLibrary) GetOsPlatform() string {
	_jsii_.Get(
		n,
		"osPlatform",
	)
	return n.OsPlatform
}


func NewNodeStandardLibrary() NodeStandardLibraryIface {
	_init_.Initialize()
	self := NodeStandardLibrary{}
	_jsii_.Create(
		"jsii-calc.NodeStandardLibrary",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *NodeStandardLibrary) CryptoSha256() string {
	returns := ""
	_jsii_.Invoke(
		n,
		"cryptoSha256",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (n *NodeStandardLibrary) FsReadFile() string {
	returns := ""
	_jsii_.Invoke(
		n,
		"fsReadFile",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (n *NodeStandardLibrary) FsReadFileSync() string {
	returns := ""
	_jsii_.Invoke(
		n,
		"fsReadFileSync",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type NullShouldBeTreatedAsUndefinedIface interface {
	GetChangeMeToUndefined() string
	SetChangeMeToUndefined(val string)
	GiveMeUndefined(value _jsii_.Any)
	GiveMeUndefinedInsideAnObject(input NullShouldBeTreatedAsUndefinedData)
	VerifyPropertyIsUndefined()
}

// jsii#282, aws-cdk#157: null should be treated as "undefined".
// Struct proxy
type NullShouldBeTreatedAsUndefined struct {
	ChangeMeToUndefined string
}

func (n *NullShouldBeTreatedAsUndefined) GetChangeMeToUndefined() string {
	_jsii_.Get(
		n,
		"changeMeToUndefined",
	)
	return n.ChangeMeToUndefined
}


func NewNullShouldBeTreatedAsUndefined(_param1 string, optional _jsii_.Any) NullShouldBeTreatedAsUndefinedIface {
	_init_.Initialize()
	self := NullShouldBeTreatedAsUndefined{}
	_jsii_.Create(
		"jsii-calc.NullShouldBeTreatedAsUndefined",
		[]interface{}{_param1, optional},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *NullShouldBeTreatedAsUndefined) SetChangeMeToUndefined(val string) {
	_jsii_.Set(
		n,
		"changeMeToUndefined",
		val,
	)
	n.ChangeMeToUndefined = val
}

func (n *NullShouldBeTreatedAsUndefined) GiveMeUndefined(value _jsii_.Any) {
	returns := ""
	_jsii_.Invoke(
		n,
		"giveMeUndefined",
		[]interface{}{value},
		&returns,
	)
}

func (n *NullShouldBeTreatedAsUndefined) GiveMeUndefinedInsideAnObject(input NullShouldBeTreatedAsUndefinedData) {
	returns := ""
	_jsii_.Invoke(
		n,
		"giveMeUndefinedInsideAnObject",
		[]interface{}{input},
		&returns,
	)
}

func (n *NullShouldBeTreatedAsUndefined) VerifyPropertyIsUndefined() {
	returns := ""
	_jsii_.Invoke(
		n,
		"verifyPropertyIsUndefined",
		[]interface{}{},
		&returns,
	)
}

// NullShouldBeTreatedAsUndefinedDataIface is the public interface for the custom type NullShouldBeTreatedAsUndefinedData
type NullShouldBeTreatedAsUndefinedDataIface interface {
	GetArrayWithThreeElementsAndUndefinedAsSecondArgument() []_jsii_.Any
	GetThisShouldBeUndefined() _jsii_.Any
}

// Struct proxy
type NullShouldBeTreatedAsUndefinedData struct {
	ArrayWithThreeElementsAndUndefinedAsSecondArgument []_jsii_.Any
	ThisShouldBeUndefined _jsii_.Any
}

func (n *NullShouldBeTreatedAsUndefinedData) GetArrayWithThreeElementsAndUndefinedAsSecondArgument() []_jsii_.Any {
	_jsii_.Get(
		n,
		"arrayWithThreeElementsAndUndefinedAsSecondArgument",
	)
	return n.ArrayWithThreeElementsAndUndefinedAsSecondArgument
}

func (n *NullShouldBeTreatedAsUndefinedData) GetThisShouldBeUndefined() _jsii_.Any {
	_jsii_.Get(
		n,
		"thisShouldBeUndefined",
	)
	return n.ThisShouldBeUndefined
}


// Class interface
type NumberGeneratorIface interface {
	GetGenerator() IRandomNumberGenerator
	SetGenerator(val IRandomNumberGenerator)
	IsSameGenerator(gen IRandomNumberGenerator) bool
	NextTimes100() float64
}

// This allows us to test that a reference can be stored for objects that implement interfaces.
// Struct proxy
type NumberGenerator struct {
	Generator IRandomNumberGenerator
}

func (n *NumberGenerator) GetGenerator() IRandomNumberGenerator {
	_jsii_.Get(
		n,
		"generator",
	)
	return n.Generator
}


func NewNumberGenerator(generator IRandomNumberGenerator) NumberGeneratorIface {
	_init_.Initialize()
	self := NumberGenerator{}
	_jsii_.Create(
		"jsii-calc.NumberGenerator",
		[]interface{}{generator},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (n *NumberGenerator) SetGenerator(val IRandomNumberGenerator) {
	_jsii_.Set(
		n,
		"generator",
		val,
	)
	n.Generator = val
}

func (n *NumberGenerator) IsSameGenerator(gen IRandomNumberGenerator) bool {
	returns := ""
	_jsii_.Invoke(
		n,
		"isSameGenerator",
		[]interface{}{gen},
		&returns,
	)
	return true
}

func (n *NumberGenerator) NextTimes100() float64 {
	returns := ""
	_jsii_.Invoke(
		n,
		"nextTimes100",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

// Class interface
type ObjectRefsInCollectionsIface interface {
	SumFromArray(values []scopejsiicalclib.NumericValue) float64
	SumFromMap(values map[string]scopejsiicalclib.NumericValue) float64
}

// Verify that object references can be passed inside collections.
// Struct proxy
type ObjectRefsInCollections struct {
}

func NewObjectRefsInCollections() ObjectRefsInCollectionsIface {
	_init_.Initialize()
	self := ObjectRefsInCollections{}
	_jsii_.Create(
		"jsii-calc.ObjectRefsInCollections",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *ObjectRefsInCollections) SumFromArray(values []scopejsiicalclib.NumericValue) float64 {
	returns := ""
	_jsii_.Invoke(
		o,
		"sumFromArray",
		[]interface{}{values},
		&returns,
	)
	return 0.0
}

func (o *ObjectRefsInCollections) SumFromMap(values map[string]scopejsiicalclib.NumericValue) float64 {
	returns := ""
	_jsii_.Invoke(
		o,
		"sumFromMap",
		[]interface{}{values},
		&returns,
	)
	return 0.0
}

// Class interface
type ObjectWithPropertyProviderIface interface {
}

// Struct proxy
type ObjectWithPropertyProvider struct {
}

func ObjectWithPropertyProvider_Provide() IObjectWithProperty {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.ObjectWithPropertyProvider",
		"provide",
		[]interface{}{},
		&returns,
	)
	return nil
}

// Class interface
type OldIface interface {
	DoAThing()
}

// Old class.
// Deprecated: Use the new class
// Struct proxy
type Old struct {
}

func NewOld() OldIface {
	_init_.Initialize()
	self := Old{}
	_jsii_.Create(
		"jsii-calc.Old",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *Old) DoAThing() {
	returns := ""
	_jsii_.Invoke(
		o,
		"doAThing",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type OptionalArgumentInvokerIface interface {
	InvokeWithOptional()
	InvokeWithoutOptional()
}

// Struct proxy
type OptionalArgumentInvoker struct {
}

func NewOptionalArgumentInvoker(delegate IInterfaceWithOptionalMethodArguments) OptionalArgumentInvokerIface {
	_init_.Initialize()
	self := OptionalArgumentInvoker{}
	_jsii_.Create(
		"jsii-calc.OptionalArgumentInvoker",
		[]interface{}{delegate},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *OptionalArgumentInvoker) InvokeWithOptional() {
	returns := ""
	_jsii_.Invoke(
		o,
		"invokeWithOptional",
		[]interface{}{},
		&returns,
	)
}

func (o *OptionalArgumentInvoker) InvokeWithoutOptional() {
	returns := ""
	_jsii_.Invoke(
		o,
		"invokeWithoutOptional",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type OptionalConstructorArgumentIface interface {
	GetArg1() float64
	GetArg2() string
	GetArg3() string
}

// Struct proxy
type OptionalConstructorArgument struct {
	Arg1 float64
	Arg2 string
	Arg3 string
}

func (o *OptionalConstructorArgument) GetArg1() float64 {
	_jsii_.Get(
		o,
		"arg1",
	)
	return o.Arg1
}

func (o *OptionalConstructorArgument) GetArg2() string {
	_jsii_.Get(
		o,
		"arg2",
	)
	return o.Arg2
}

func (o *OptionalConstructorArgument) GetArg3() string {
	_jsii_.Get(
		o,
		"arg3",
	)
	return o.Arg3
}


func NewOptionalConstructorArgument(arg1 float64, arg2 string, arg3 string) OptionalConstructorArgumentIface {
	_init_.Initialize()
	self := OptionalConstructorArgument{}
	_jsii_.Create(
		"jsii-calc.OptionalConstructorArgument",
		[]interface{}{arg1, arg2, arg3},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// OptionalStructIface is the public interface for the custom type OptionalStruct
type OptionalStructIface interface {
	GetField() string
}

// Struct proxy
type OptionalStruct struct {
	Field string
}

func (o *OptionalStruct) GetField() string {
	_jsii_.Get(
		o,
		"field",
	)
	return o.Field
}


// Class interface
type OptionalStructConsumerIface interface {
	GetParameterWasUndefined() bool
	GetFieldValue() string
}

// Struct proxy
type OptionalStructConsumer struct {
	ParameterWasUndefined bool
	FieldValue string
}

func (o *OptionalStructConsumer) GetParameterWasUndefined() bool {
	_jsii_.Get(
		o,
		"parameterWasUndefined",
	)
	return o.ParameterWasUndefined
}

func (o *OptionalStructConsumer) GetFieldValue() string {
	_jsii_.Get(
		o,
		"fieldValue",
	)
	return o.FieldValue
}


func NewOptionalStructConsumer(optionalStruct OptionalStruct) OptionalStructConsumerIface {
	_init_.Initialize()
	self := OptionalStructConsumer{}
	_jsii_.Create(
		"jsii-calc.OptionalStructConsumer",
		[]interface{}{optionalStruct},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type OverridableProtectedMemberIface interface {
	GetOverrideReadOnly() string
	GetOverrideReadWrite() string
	OverrideMe() string
	SwitchModes()
	ValueFromProtected() string
}

// See: https://github.com/aws/jsii/issues/903
//
// Struct proxy
type OverridableProtectedMember struct {
	OverrideReadOnly string
	OverrideReadWrite string
}

func (o *OverridableProtectedMember) GetOverrideReadOnly() string {
	_jsii_.Get(
		o,
		"overrideReadOnly",
	)
	return o.OverrideReadOnly
}

func (o *OverridableProtectedMember) GetOverrideReadWrite() string {
	_jsii_.Get(
		o,
		"overrideReadWrite",
	)
	return o.OverrideReadWrite
}


func NewOverridableProtectedMember() OverridableProtectedMemberIface {
	_init_.Initialize()
	self := OverridableProtectedMember{}
	_jsii_.Create(
		"jsii-calc.OverridableProtectedMember",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *OverridableProtectedMember) SetOverrideReadWrite(val string) {
	_jsii_.Set(
		o,
		"overrideReadWrite",
		val,
	)
	o.OverrideReadWrite = val
}

func (o *OverridableProtectedMember) OverrideMe() string {
	returns := ""
	_jsii_.Invoke(
		o,
		"overrideMe",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (o *OverridableProtectedMember) SwitchModes() {
	returns := ""
	_jsii_.Invoke(
		o,
		"switchModes",
		[]interface{}{},
		&returns,
	)
}

func (o *OverridableProtectedMember) ValueFromProtected() string {
	returns := ""
	_jsii_.Invoke(
		o,
		"valueFromProtected",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type OverrideReturnsObjectIface interface {
	Test(obj IReturnsNumber) float64
}

// Struct proxy
type OverrideReturnsObject struct {
}

func NewOverrideReturnsObject() OverrideReturnsObjectIface {
	_init_.Initialize()
	self := OverrideReturnsObject{}
	_jsii_.Create(
		"jsii-calc.OverrideReturnsObject",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (o *OverrideReturnsObject) Test(obj IReturnsNumber) float64 {
	returns := ""
	_jsii_.Invoke(
		o,
		"test",
		[]interface{}{obj},
		&returns,
	)
	return 0.0
}

// ParentStruct982Iface is the public interface for the custom type ParentStruct982
type ParentStruct982Iface interface {
	GetFoo() string
}

// https://github.com/aws/jsii/issues/982.
// Struct proxy
type ParentStruct982 struct {
	Foo string
}

func (p *ParentStruct982) GetFoo() string {
	_jsii_.Get(
		p,
		"foo",
	)
	return p.Foo
}


// Class interface
type PartiallyInitializedThisConsumerIface interface {
	ConsumePartiallyInitializedThis(obj ConstructorPassesThisOut, dt string, ev AllTypesEnum) string
}

// Struct proxy
type PartiallyInitializedThisConsumer struct {
}

func NewPartiallyInitializedThisConsumer() PartiallyInitializedThisConsumerIface {
	_init_.Initialize()
	self := PartiallyInitializedThisConsumer{}
	_jsii_.Create(
		"jsii-calc.PartiallyInitializedThisConsumer",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (p *PartiallyInitializedThisConsumer) ConsumePartiallyInitializedThis(obj ConstructorPassesThisOut, dt string, ev AllTypesEnum) string {
	returns := ""
	_jsii_.Invoke(
		p,
		"consumePartiallyInitializedThis",
		[]interface{}{obj, dt, ev},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type PolymorphismIface interface {
	SayHello(friendly scopejsiicalclib.IFriendly) string
}

// Struct proxy
type Polymorphism struct {
}

func NewPolymorphism() PolymorphismIface {
	_init_.Initialize()
	self := Polymorphism{}
	_jsii_.Create(
		"jsii-calc.Polymorphism",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (p *Polymorphism) SayHello(friendly scopejsiicalclib.IFriendly) string {
	returns := ""
	_jsii_.Invoke(
		p,
		"sayHello",
		[]interface{}{friendly},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type PowerIface interface {
	GetValue() float64
	GetExpression() scopejsiicalclib.NumericValue
	GetDecorationPostfixes() []string
	SetDecorationPostfixes(val []string)
	GetDecorationPrefixes() []string
	SetDecorationPrefixes(val []string)
	GetStringStyle() composition.CompositionStringStyle
	SetStringStyle(val composition.CompositionStringStyle)
	GetBase() scopejsiicalclib.NumericValue
	GetPow() scopejsiicalclib.NumericValue
	TypeName() _jsii_.Any
	ToString() string
}

// The power operation.
// Struct proxy
type Power struct {
	// (deprecated) The value.
	Value float64
	// The expression that this operation consists of.
	// 
	// Must be implemented by derived classes.
	Expression scopejsiicalclib.NumericValue
	// A set of postfixes to include in a decorated .toString().
	DecorationPostfixes []string
	// A set of prefixes to include in a decorated .toString().
	DecorationPrefixes []string
	// The .toString() style.
	StringStyle composition.CompositionStringStyle
	// The base of the power.
	Base scopejsiicalclib.NumericValue
	// The number of times to multiply.
	Pow scopejsiicalclib.NumericValue
}

func (p *Power) GetValue() float64 {
	_jsii_.Get(
		p,
		"value",
	)
	return p.Value
}

func (p *Power) GetExpression() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		p,
		"expression",
	)
	return p.Expression
}

func (p *Power) GetDecorationPostfixes() []string {
	_jsii_.Get(
		p,
		"decorationPostfixes",
	)
	return p.DecorationPostfixes
}

func (p *Power) GetDecorationPrefixes() []string {
	_jsii_.Get(
		p,
		"decorationPrefixes",
	)
	return p.DecorationPrefixes
}

func (p *Power) GetStringStyle() composition.CompositionStringStyle {
	_jsii_.Get(
		p,
		"stringStyle",
	)
	return p.StringStyle
}

func (p *Power) GetBase() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		p,
		"base",
	)
	return p.Base
}

func (p *Power) GetPow() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		p,
		"pow",
	)
	return p.Pow
}


// Creates a Power operation.
func NewPower(base scopejsiicalclib.NumericValue, pow scopejsiicalclib.NumericValue) PowerIface {
	_init_.Initialize()
	self := Power{}
	_jsii_.Create(
		"jsii-calc.Power",
		[]interface{}{base, pow},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (p *Power) SetDecorationPostfixes(val []string) {
	_jsii_.Set(
		p,
		"decorationPostfixes",
		val,
	)
	p.DecorationPostfixes = val
}

func (p *Power) SetDecorationPrefixes(val []string) {
	_jsii_.Set(
		p,
		"decorationPrefixes",
		val,
	)
	p.DecorationPrefixes = val
}

func (p *Power) SetStringStyle(val composition.CompositionStringStyle) {
	_jsii_.Set(
		p,
		"stringStyle",
		val,
	)
	p.StringStyle = val
}

func (p *Power) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		p,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (p *Power) ToString() string {
	returns := ""
	_jsii_.Invoke(
		p,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type PropertyNamedPropertyIface interface {
	GetProperty() string
	GetYetAnoterOne() bool
}

// Reproduction for https://github.com/aws/jsii/issues/1113 Where a method or property named "property" would result in impossible to load Python code.
// Struct proxy
type PropertyNamedProperty struct {
	Property string
	YetAnoterOne bool
}

func (p *PropertyNamedProperty) GetProperty() string {
	_jsii_.Get(
		p,
		"property",
	)
	return p.Property
}

func (p *PropertyNamedProperty) GetYetAnoterOne() bool {
	_jsii_.Get(
		p,
		"yetAnoterOne",
	)
	return p.YetAnoterOne
}


func NewPropertyNamedProperty() PropertyNamedPropertyIface {
	_init_.Initialize()
	self := PropertyNamedProperty{}
	_jsii_.Create(
		"jsii-calc.PropertyNamedProperty",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type PublicClassIface interface {
	Hello()
}

// Struct proxy
type PublicClass struct {
}

func NewPublicClass() PublicClassIface {
	_init_.Initialize()
	self := PublicClass{}
	_jsii_.Create(
		"jsii-calc.PublicClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (p *PublicClass) Hello() {
	returns := ""
	_jsii_.Invoke(
		p,
		"hello",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type PythonReservedWordsIface interface {
	And()
	As()
	Assert()
	Async()
	Await()
	Break()
	Class()
	Continue()
	Def()
	Del()
	Elif()
	Else()
	Except()
	Finally()
	For()
	From()
	Global()
	If()
	Import()
	In()
	Is()
	Lambda()
	Nonlocal()
	Not()
	Or()
	Pass()
	Raise()
	Return()
	Try()
	While()
	With()
	Yield()
}

// Struct proxy
type PythonReservedWords struct {
}

func NewPythonReservedWords() PythonReservedWordsIface {
	_init_.Initialize()
	self := PythonReservedWords{}
	_jsii_.Create(
		"jsii-calc.PythonReservedWords",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (p *PythonReservedWords) And() {
	returns := ""
	_jsii_.Invoke(
		p,
		"and",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) As() {
	returns := ""
	_jsii_.Invoke(
		p,
		"as",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Assert() {
	returns := ""
	_jsii_.Invoke(
		p,
		"assert",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Async() {
	returns := ""
	_jsii_.Invoke(
		p,
		"async",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Await() {
	returns := ""
	_jsii_.Invoke(
		p,
		"await",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Break() {
	returns := ""
	_jsii_.Invoke(
		p,
		"break",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Class() {
	returns := ""
	_jsii_.Invoke(
		p,
		"class",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Continue() {
	returns := ""
	_jsii_.Invoke(
		p,
		"continue",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Def() {
	returns := ""
	_jsii_.Invoke(
		p,
		"def",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Del() {
	returns := ""
	_jsii_.Invoke(
		p,
		"del",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Elif() {
	returns := ""
	_jsii_.Invoke(
		p,
		"elif",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Else() {
	returns := ""
	_jsii_.Invoke(
		p,
		"else",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Except() {
	returns := ""
	_jsii_.Invoke(
		p,
		"except",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Finally() {
	returns := ""
	_jsii_.Invoke(
		p,
		"finally",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) For() {
	returns := ""
	_jsii_.Invoke(
		p,
		"for",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) From() {
	returns := ""
	_jsii_.Invoke(
		p,
		"from",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Global() {
	returns := ""
	_jsii_.Invoke(
		p,
		"global",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) If() {
	returns := ""
	_jsii_.Invoke(
		p,
		"if",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Import() {
	returns := ""
	_jsii_.Invoke(
		p,
		"import",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) In() {
	returns := ""
	_jsii_.Invoke(
		p,
		"in",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Is() {
	returns := ""
	_jsii_.Invoke(
		p,
		"is",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Lambda() {
	returns := ""
	_jsii_.Invoke(
		p,
		"lambda",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Nonlocal() {
	returns := ""
	_jsii_.Invoke(
		p,
		"nonlocal",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Not() {
	returns := ""
	_jsii_.Invoke(
		p,
		"not",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Or() {
	returns := ""
	_jsii_.Invoke(
		p,
		"or",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Pass() {
	returns := ""
	_jsii_.Invoke(
		p,
		"pass",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Raise() {
	returns := ""
	_jsii_.Invoke(
		p,
		"raise",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Return() {
	returns := ""
	_jsii_.Invoke(
		p,
		"return",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Try() {
	returns := ""
	_jsii_.Invoke(
		p,
		"try",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) While() {
	returns := ""
	_jsii_.Invoke(
		p,
		"while",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) With() {
	returns := ""
	_jsii_.Invoke(
		p,
		"with",
		[]interface{}{},
		&returns,
	)
}

func (p *PythonReservedWords) Yield() {
	returns := ""
	_jsii_.Invoke(
		p,
		"yield",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type ReferenceEnumFromScopedPackageIface interface {
	GetFoo() scopejsiicalclib.EnumFromScopedModule
	SetFoo(val scopejsiicalclib.EnumFromScopedModule)
	LoadFoo() scopejsiicalclib.EnumFromScopedModule
	SaveFoo(value scopejsiicalclib.EnumFromScopedModule)
}

// See awslabs/jsii#138.
// Struct proxy
type ReferenceEnumFromScopedPackage struct {
	Foo scopejsiicalclib.EnumFromScopedModule
}

func (r *ReferenceEnumFromScopedPackage) GetFoo() scopejsiicalclib.EnumFromScopedModule {
	_jsii_.Get(
		r,
		"foo",
	)
	return r.Foo
}


func NewReferenceEnumFromScopedPackage() ReferenceEnumFromScopedPackageIface {
	_init_.Initialize()
	self := ReferenceEnumFromScopedPackage{}
	_jsii_.Create(
		"jsii-calc.ReferenceEnumFromScopedPackage",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (r *ReferenceEnumFromScopedPackage) SetFoo(val scopejsiicalclib.EnumFromScopedModule) {
	_jsii_.Set(
		r,
		"foo",
		val,
	)
	r.Foo = val
}

func (r *ReferenceEnumFromScopedPackage) LoadFoo() scopejsiicalclib.EnumFromScopedModule {
	returns := ""
	_jsii_.Invoke(
		r,
		"loadFoo",
		[]interface{}{},
		&returns,
	)
	return "ENUM_DUMMY"
}

func (r *ReferenceEnumFromScopedPackage) SaveFoo(value scopejsiicalclib.EnumFromScopedModule) {
	returns := ""
	_jsii_.Invoke(
		r,
		"saveFoo",
		[]interface{}{value},
		&returns,
	)
}

// Class interface
type ReturnsPrivateImplementationOfInterfaceIface interface {
	GetPrivateImplementation() IPrivatelyImplemented
}

// Helps ensure the JSII kernel & runtime cooperate correctly when an un-exported instance of a class is returned with a declared type that is an exported interface, and the instance inherits from an exported class.
//
// Returns: an instance of an un-exported class that extends \`ExportedBaseClass\`, declared as \`IPrivatelyImplemented\`.
// See: https://github.com/aws/jsii/issues/320
//
// Struct proxy
type ReturnsPrivateImplementationOfInterface struct {
	PrivateImplementation IPrivatelyImplemented
}

func (r *ReturnsPrivateImplementationOfInterface) GetPrivateImplementation() IPrivatelyImplemented {
	_jsii_.Get(
		r,
		"privateImplementation",
	)
	return r.PrivateImplementation
}


func NewReturnsPrivateImplementationOfInterface() ReturnsPrivateImplementationOfInterfaceIface {
	_init_.Initialize()
	self := ReturnsPrivateImplementationOfInterface{}
	_jsii_.Create(
		"jsii-calc.ReturnsPrivateImplementationOfInterface",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// RootStructIface is the public interface for the custom type RootStruct
type RootStructIface interface {
	GetStringProp() string
	GetNestedStruct() NestedStruct
}

// This is here to check that we can pass a nested struct into a kwargs by specifying it as an in-line dictionary.
// 
// This is cheating with the (current) declared types, but this is the "more
// idiomatic" way for Pythonists.
// Struct proxy
type RootStruct struct {
	// May not be empty.
	StringProp string
	NestedStruct NestedStruct
}

func (r *RootStruct) GetStringProp() string {
	_jsii_.Get(
		r,
		"stringProp",
	)
	return r.StringProp
}

func (r *RootStruct) GetNestedStruct() NestedStruct {
	_jsii_.Get(
		r,
		"nestedStruct",
	)
	return r.NestedStruct
}


// Class interface
type RootStructValidatorIface interface {
}

// Struct proxy
type RootStructValidator struct {
}

func RootStructValidator_Validate(struct_ RootStruct) {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.RootStructValidator",
		"validate",
		[]interface{}{struct_},
		&returns,
	)
}

// Class interface
type RuntimeTypeCheckingIface interface {
	MethodWithDefaultedArguments(arg1 float64, arg2 string, arg3 string)
	MethodWithOptionalAnyArgument(arg _jsii_.Any)
	MethodWithOptionalArguments(arg1 float64, arg2 string, arg3 string)
}

// Struct proxy
type RuntimeTypeChecking struct {
}

func NewRuntimeTypeChecking() RuntimeTypeCheckingIface {
	_init_.Initialize()
	self := RuntimeTypeChecking{}
	_jsii_.Create(
		"jsii-calc.RuntimeTypeChecking",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (r *RuntimeTypeChecking) MethodWithDefaultedArguments(arg1 float64, arg2 string, arg3 string) {
	returns := ""
	_jsii_.Invoke(
		r,
		"methodWithDefaultedArguments",
		[]interface{}{arg1, arg2, arg3},
		&returns,
	)
}

func (r *RuntimeTypeChecking) MethodWithOptionalAnyArgument(arg _jsii_.Any) {
	returns := ""
	_jsii_.Invoke(
		r,
		"methodWithOptionalAnyArgument",
		[]interface{}{arg},
		&returns,
	)
}

func (r *RuntimeTypeChecking) MethodWithOptionalArguments(arg1 float64, arg2 string, arg3 string) {
	returns := ""
	_jsii_.Invoke(
		r,
		"methodWithOptionalArguments",
		[]interface{}{arg1, arg2, arg3},
		&returns,
	)
}

// SecondLevelStructIface is the public interface for the custom type SecondLevelStruct
type SecondLevelStructIface interface {
	GetDeeperRequiredProp() string
	GetDeeperOptionalProp() string
}

// Struct proxy
type SecondLevelStruct struct {
	// It's long and required.
	DeeperRequiredProp string
	// It's long, but you'll almost never pass it.
	DeeperOptionalProp string
}

func (s *SecondLevelStruct) GetDeeperRequiredProp() string {
	_jsii_.Get(
		s,
		"deeperRequiredProp",
	)
	return s.DeeperRequiredProp
}

func (s *SecondLevelStruct) GetDeeperOptionalProp() string {
	_jsii_.Get(
		s,
		"deeperOptionalProp",
	)
	return s.DeeperOptionalProp
}


// Class interface
type SingleInstanceTwoTypesIface interface {
	Interface1() InbetweenClass
	Interface2() IPublicInterface
}

// Test that a single instance can be returned under two different FQNs.
// 
// JSII clients can instantiate 2 different strongly-typed wrappers for the same
// object. Unfortunately, this will break object equality, but if we didn't do
// this it would break runtime type checks in the JVM or CLR.
// Struct proxy
type SingleInstanceTwoTypes struct {
}

func NewSingleInstanceTwoTypes() SingleInstanceTwoTypesIface {
	_init_.Initialize()
	self := SingleInstanceTwoTypes{}
	_jsii_.Create(
		"jsii-calc.SingleInstanceTwoTypes",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (s *SingleInstanceTwoTypes) Interface1() InbetweenClass {
	returns := ""
	_jsii_.Invoke(
		s,
		"interface1",
		[]interface{}{},
		&returns,
	)
	return InbetweenClass{}
}

func (s *SingleInstanceTwoTypes) Interface2() IPublicInterface {
	returns := ""
	_jsii_.Invoke(
		s,
		"interface2",
		[]interface{}{},
		&returns,
	)
	return nil
}

// Class interface
type SingletonIntIface interface {
	IsSingletonInt(value float64) bool
}

// Verifies that singleton enums are handled correctly.
// 
// https://github.com/aws/jsii/issues/231
// Struct proxy
type SingletonInt struct {
}

func (s *SingletonInt) IsSingletonInt(value float64) bool {
	returns := ""
	_jsii_.Invoke(
		s,
		"isSingletonInt",
		[]interface{}{value},
		&returns,
	)
	return true
}

// A singleton integer.
type SingletonIntEnum string

const (
	SingletonIntEnumSingletonInt SingletonIntEnum = "SINGLETON_INT"
)

// Class interface
type SingletonStringIface interface {
	IsSingletonString(value string) bool
}

// Verifies that singleton enums are handled correctly.
// 
// https://github.com/aws/jsii/issues/231
// Struct proxy
type SingletonString struct {
}

func (s *SingletonString) IsSingletonString(value string) bool {
	returns := ""
	_jsii_.Invoke(
		s,
		"isSingletonString",
		[]interface{}{value},
		&returns,
	)
	return true
}

// A singleton string.
type SingletonStringEnum string

const (
	SingletonStringEnumSingletonString SingletonStringEnum = "SINGLETON_STRING"
)

// SmellyStructIface is the public interface for the custom type SmellyStruct
type SmellyStructIface interface {
	GetProperty() string
	GetYetAnoterOne() bool
}

// Struct proxy
type SmellyStruct struct {
	Property string
	YetAnoterOne bool
}

func (s *SmellyStruct) GetProperty() string {
	_jsii_.Get(
		s,
		"property",
	)
	return s.Property
}

func (s *SmellyStruct) GetYetAnoterOne() bool {
	_jsii_.Get(
		s,
		"yetAnoterOne",
	)
	return s.YetAnoterOne
}


// Class interface
type SomeTypeJsii976Iface interface {
}

// Struct proxy
type SomeTypeJsii976 struct {
}

func NewSomeTypeJsii976() SomeTypeJsii976Iface {
	_init_.Initialize()
	self := SomeTypeJsii976{}
	_jsii_.Create(
		"jsii-calc.SomeTypeJsii976",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func SomeTypeJsii976_ReturnAnonymous() _jsii_.Any {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.SomeTypeJsii976",
		"returnAnonymous",
		[]interface{}{},
		&returns,
	)
	return nil
}

func SomeTypeJsii976_ReturnReturn() IReturnJsii976 {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.SomeTypeJsii976",
		"returnReturn",
		[]interface{}{},
		&returns,
	)
	return nil
}

// Class interface
type StableClassIface interface {
	GetReadonlyProperty() string
	GetMutableProperty() float64
	SetMutableProperty(val float64)
	Method()
}

// Struct proxy
type StableClass struct {
	ReadonlyProperty string
	MutableProperty float64
}

func (s *StableClass) GetReadonlyProperty() string {
	_jsii_.Get(
		s,
		"readonlyProperty",
	)
	return s.ReadonlyProperty
}

func (s *StableClass) GetMutableProperty() float64 {
	_jsii_.Get(
		s,
		"mutableProperty",
	)
	return s.MutableProperty
}


func NewStableClass(readonlyString string, mutableNumber float64) StableClassIface {
	_init_.Initialize()
	self := StableClass{}
	_jsii_.Create(
		"jsii-calc.StableClass",
		[]interface{}{readonlyString, mutableNumber},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (s *StableClass) SetMutableProperty(val float64) {
	_jsii_.Set(
		s,
		"mutableProperty",
		val,
	)
	s.MutableProperty = val
}

func (s *StableClass) Method() {
	returns := ""
	_jsii_.Invoke(
		s,
		"method",
		[]interface{}{},
		&returns,
	)
}

type StableEnum string

const (
	StableEnumOptionA StableEnum = "OPTION_A"
	StableEnumOptionB StableEnum = "OPTION_B"
)

// StableStructIface is the public interface for the custom type StableStruct
type StableStructIface interface {
	GetReadonlyProperty() string
}

// Struct proxy
type StableStruct struct {
	ReadonlyProperty string
}

func (s *StableStruct) GetReadonlyProperty() string {
	_jsii_.Get(
		s,
		"readonlyProperty",
	)
	return s.ReadonlyProperty
}


// Class interface
type StaticContextIface interface {
}

// This is used to validate the ability to use \`this\` from within a static context.
// 
// https://github.com/awslabs/aws-cdk/issues/2304
// Struct proxy
type StaticContext struct {
}

func StaticContext_CanAccessStaticContext() bool {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.StaticContext",
		"canAccessStaticContext",
		[]interface{}{},
		&returns,
	)
	return true
}

func StaticContext_StaticVariable() bool {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.StaticContext",
		"staticVariable",
	)
	return true
}

func StaticContext_SetStaticVariable(val bool) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.StaticContext",
		"staticVariable",
		val,
	)
	return
}

// Class interface
type StaticsIface interface {
	GetValue() string
	JustMethod() string
}

// Struct proxy
type Statics struct {
	Value string
}

func (s *Statics) GetValue() string {
	_jsii_.Get(
		s,
		"value",
	)
	return s.Value
}


func NewStatics(value string) StaticsIface {
	_init_.Initialize()
	self := Statics{}
	_jsii_.Create(
		"jsii-calc.Statics",
		[]interface{}{value},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func Statics_StaticMethod(name string) string {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.Statics",
		"staticMethod",
		[]interface{}{name},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func Statics_Bar() float64 {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"BAR",
	)
	return 0.0
}

func Statics_ConstObj() DoubleTrouble {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"ConstObj",
	)
	return DoubleTrouble{}
}

func Statics_Foo() string {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"Foo",
	)
	return "NOOP_RETURN_STRING"
}

func Statics_ZooBar() map[string]string {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"zooBar",
	)
	return nil
}

func Statics_Instance() Statics {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"instance",
	)
	return Statics{}
}

func Statics_SetInstance(val Statics) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.Statics",
		"instance",
		val,
	)
	return
}

func Statics_NonConstStatic() float64 {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.Statics",
		"nonConstStatic",
	)
	return 0.0
}

func Statics_SetNonConstStatic(val float64) {
	_init_.Initialize()
	_jsii_.StaticSet(
		"jsii-calc.Statics",
		"nonConstStatic",
		val,
	)
	return
}

func (s *Statics) JustMethod() string {
	returns := ""
	_jsii_.Invoke(
		s,
		"justMethod",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

type StringEnum string

const (
	StringEnumA StringEnum = "A"
	StringEnumB StringEnum = "B"
	StringEnumC StringEnum = "C"
)

// Class interface
type StripInternalIface interface {
	GetYouSeeMe() string
	SetYouSeeMe(val string)
}

// Struct proxy
type StripInternal struct {
	YouSeeMe string
}

func (s *StripInternal) GetYouSeeMe() string {
	_jsii_.Get(
		s,
		"youSeeMe",
	)
	return s.YouSeeMe
}


func NewStripInternal() StripInternalIface {
	_init_.Initialize()
	self := StripInternal{}
	_jsii_.Create(
		"jsii-calc.StripInternal",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (s *StripInternal) SetYouSeeMe(val string) {
	_jsii_.Set(
		s,
		"youSeeMe",
		val,
	)
	s.YouSeeMe = val
}

// StructAIface is the public interface for the custom type StructA
type StructAIface interface {
	GetRequiredString() string
	GetOptionalNumber() float64
	GetOptionalString() string
}

// We can serialize and deserialize structs without silently ignoring optional fields.
// Struct proxy
type StructA struct {
	RequiredString string
	OptionalNumber float64
	OptionalString string
}

func (s *StructA) GetRequiredString() string {
	_jsii_.Get(
		s,
		"requiredString",
	)
	return s.RequiredString
}

func (s *StructA) GetOptionalNumber() float64 {
	_jsii_.Get(
		s,
		"optionalNumber",
	)
	return s.OptionalNumber
}

func (s *StructA) GetOptionalString() string {
	_jsii_.Get(
		s,
		"optionalString",
	)
	return s.OptionalString
}


// StructBIface is the public interface for the custom type StructB
type StructBIface interface {
	GetRequiredString() string
	GetOptionalBoolean() bool
	GetOptionalStructA() StructA
}

// This intentionally overlaps with StructA (where only requiredString is provided) to test htat the kernel properly disambiguates those.
// Struct proxy
type StructB struct {
	RequiredString string
	OptionalBoolean bool
	OptionalStructA StructA
}

func (s *StructB) GetRequiredString() string {
	_jsii_.Get(
		s,
		"requiredString",
	)
	return s.RequiredString
}

func (s *StructB) GetOptionalBoolean() bool {
	_jsii_.Get(
		s,
		"optionalBoolean",
	)
	return s.OptionalBoolean
}

func (s *StructB) GetOptionalStructA() StructA {
	_jsii_.Get(
		s,
		"optionalStructA",
	)
	return s.OptionalStructA
}


// StructParameterTypeIface is the public interface for the custom type StructParameterType
type StructParameterTypeIface interface {
	GetScope() string
	GetProps() bool
}

// Verifies that, in languages that do keyword lifting (e.g: Python), having a struct member with the same name as a positional parameter results in the correct code being emitted.
// 
// See: https://github.com/aws/aws-cdk/issues/4302
// Struct proxy
type StructParameterType struct {
	Scope string
	Props bool
}

func (s *StructParameterType) GetScope() string {
	_jsii_.Get(
		s,
		"scope",
	)
	return s.Scope
}

func (s *StructParameterType) GetProps() bool {
	_jsii_.Get(
		s,
		"props",
	)
	return s.Props
}


// Class interface
type StructPassingIface interface {
}

// Just because we can.
// Struct proxy
type StructPassing struct {
}

func NewStructPassing() StructPassingIface {
	_init_.Initialize()
	self := StructPassing{}
	_jsii_.Create(
		"jsii-calc.StructPassing",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func StructPassing_HowManyVarArgsDidIPass(_positional float64, inputs TopLevelStruct) float64 {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.StructPassing",
		"howManyVarArgsDidIPass",
		[]interface{}{_positional, inputs},
		&returns,
	)
	return 0.0
}

func StructPassing_RoundTrip(_positional float64, input TopLevelStruct) TopLevelStruct {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.StructPassing",
		"roundTrip",
		[]interface{}{_positional, input},
		&returns,
	)
	return TopLevelStruct{}
}

// Class interface
type StructUnionConsumerIface interface {
}

// Struct proxy
type StructUnionConsumer struct {
}

func StructUnionConsumer_IsStructA(struct_ _jsii_.Any) bool {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.StructUnionConsumer",
		"isStructA",
		[]interface{}{struct_},
		&returns,
	)
	return true
}

func StructUnionConsumer_IsStructB(struct_ _jsii_.Any) bool {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.StructUnionConsumer",
		"isStructB",
		[]interface{}{struct_},
		&returns,
	)
	return true
}

// StructWithJavaReservedWordsIface is the public interface for the custom type StructWithJavaReservedWords
type StructWithJavaReservedWordsIface interface {
	GetDefault() string
	GetAssert() string
	GetResult() string
	GetThat() string
}

// Struct proxy
type StructWithJavaReservedWords struct {
	Default string
	Assert string
	Result string
	That string
}

func (s *StructWithJavaReservedWords) GetDefault() string {
	_jsii_.Get(
		s,
		"default",
	)
	return s.Default
}

func (s *StructWithJavaReservedWords) GetAssert() string {
	_jsii_.Get(
		s,
		"assert",
	)
	return s.Assert
}

func (s *StructWithJavaReservedWords) GetResult() string {
	_jsii_.Get(
		s,
		"result",
	)
	return s.Result
}

func (s *StructWithJavaReservedWords) GetThat() string {
	_jsii_.Get(
		s,
		"that",
	)
	return s.That
}


// Class interface
type SumIface interface {
	GetValue() float64
	GetExpression() scopejsiicalclib.NumericValue
	GetDecorationPostfixes() []string
	SetDecorationPostfixes(val []string)
	GetDecorationPrefixes() []string
	SetDecorationPrefixes(val []string)
	GetStringStyle() composition.CompositionStringStyle
	SetStringStyle(val composition.CompositionStringStyle)
	GetParts() []scopejsiicalclib.NumericValue
	SetParts(val []scopejsiicalclib.NumericValue)
	TypeName() _jsii_.Any
	ToString() string
}

// An operation that sums multiple values.
// Struct proxy
type Sum struct {
	// (deprecated) The value.
	Value float64
	// The expression that this operation consists of.
	// 
	// Must be implemented by derived classes.
	Expression scopejsiicalclib.NumericValue
	// A set of postfixes to include in a decorated .toString().
	DecorationPostfixes []string
	// A set of prefixes to include in a decorated .toString().
	DecorationPrefixes []string
	// The .toString() style.
	StringStyle composition.CompositionStringStyle
	// The parts to sum.
	Parts []scopejsiicalclib.NumericValue
}

func (s *Sum) GetValue() float64 {
	_jsii_.Get(
		s,
		"value",
	)
	return s.Value
}

func (s *Sum) GetExpression() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		s,
		"expression",
	)
	return s.Expression
}

func (s *Sum) GetDecorationPostfixes() []string {
	_jsii_.Get(
		s,
		"decorationPostfixes",
	)
	return s.DecorationPostfixes
}

func (s *Sum) GetDecorationPrefixes() []string {
	_jsii_.Get(
		s,
		"decorationPrefixes",
	)
	return s.DecorationPrefixes
}

func (s *Sum) GetStringStyle() composition.CompositionStringStyle {
	_jsii_.Get(
		s,
		"stringStyle",
	)
	return s.StringStyle
}

func (s *Sum) GetParts() []scopejsiicalclib.NumericValue {
	_jsii_.Get(
		s,
		"parts",
	)
	return s.Parts
}


func NewSum() SumIface {
	_init_.Initialize()
	self := Sum{}
	_jsii_.Create(
		"jsii-calc.Sum",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (s *Sum) SetDecorationPostfixes(val []string) {
	_jsii_.Set(
		s,
		"decorationPostfixes",
		val,
	)
	s.DecorationPostfixes = val
}

func (s *Sum) SetDecorationPrefixes(val []string) {
	_jsii_.Set(
		s,
		"decorationPrefixes",
		val,
	)
	s.DecorationPrefixes = val
}

func (s *Sum) SetStringStyle(val composition.CompositionStringStyle) {
	_jsii_.Set(
		s,
		"stringStyle",
		val,
	)
	s.StringStyle = val
}

func (s *Sum) SetParts(val []scopejsiicalclib.NumericValue) {
	_jsii_.Set(
		s,
		"parts",
		val,
	)
	s.Parts = val
}

func (s *Sum) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		s,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (s *Sum) ToString() string {
	returns := ""
	_jsii_.Invoke(
		s,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type SupportsNiceJavaBuilderIface interface {
	GetBar() float64
	GetId() float64
	GetPropId() string
	GetRest() []string
}

// Struct proxy
type SupportsNiceJavaBuilder struct {
	Bar float64
	// some identifier.
	Id float64
	PropId string
	Rest []string
}

func (s *SupportsNiceJavaBuilder) GetBar() float64 {
	_jsii_.Get(
		s,
		"bar",
	)
	return s.Bar
}

func (s *SupportsNiceJavaBuilder) GetId() float64 {
	_jsii_.Get(
		s,
		"id",
	)
	return s.Id
}

func (s *SupportsNiceJavaBuilder) GetPropId() string {
	_jsii_.Get(
		s,
		"propId",
	)
	return s.PropId
}

func (s *SupportsNiceJavaBuilder) GetRest() []string {
	_jsii_.Get(
		s,
		"rest",
	)
	return s.Rest
}


func NewSupportsNiceJavaBuilder(id float64, defaultBar float64, props SupportsNiceJavaBuilderProps, rest string) SupportsNiceJavaBuilderIface {
	_init_.Initialize()
	self := SupportsNiceJavaBuilder{}
	_jsii_.Create(
		"jsii-calc.SupportsNiceJavaBuilder",
		[]interface{}{id, defaultBar, props, rest},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// SupportsNiceJavaBuilderPropsIface is the public interface for the custom type SupportsNiceJavaBuilderProps
type SupportsNiceJavaBuilderPropsIface interface {
	GetBar() float64
	GetId() string
}

// Struct proxy
type SupportsNiceJavaBuilderProps struct {
	// Some number, like 42.
	Bar float64
	// An \`id\` field here is terrible API design, because the constructor of \`SupportsNiceJavaBuilder\` already has a parameter named \`id\`.
	// 
	// But here we are, doing it like we didn't care.
	Id string
}

func (s *SupportsNiceJavaBuilderProps) GetBar() float64 {
	_jsii_.Get(
		s,
		"bar",
	)
	return s.Bar
}

func (s *SupportsNiceJavaBuilderProps) GetId() string {
	_jsii_.Get(
		s,
		"id",
	)
	return s.Id
}


// Class interface
type SupportsNiceJavaBuilderWithRequiredPropsIface interface {
	GetBar() float64
	GetId() float64
	GetPropId() string
}

// We can generate fancy builders in Java for classes which take a mix of positional & struct parameters.
// Struct proxy
type SupportsNiceJavaBuilderWithRequiredProps struct {
	Bar float64
	// some identifier of your choice.
	Id float64
	PropId string
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) GetBar() float64 {
	_jsii_.Get(
		s,
		"bar",
	)
	return s.Bar
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) GetId() float64 {
	_jsii_.Get(
		s,
		"id",
	)
	return s.Id
}

func (s *SupportsNiceJavaBuilderWithRequiredProps) GetPropId() string {
	_jsii_.Get(
		s,
		"propId",
	)
	return s.PropId
}


func NewSupportsNiceJavaBuilderWithRequiredProps(id float64, props SupportsNiceJavaBuilderProps) SupportsNiceJavaBuilderWithRequiredPropsIface {
	_init_.Initialize()
	self := SupportsNiceJavaBuilderWithRequiredProps{}
	_jsii_.Create(
		"jsii-calc.SupportsNiceJavaBuilderWithRequiredProps",
		[]interface{}{id, props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

// Class interface
type SyncVirtualMethodsIface interface {
	GetReadonlyProperty() string
	GetA() float64
	SetA(val float64)
	GetCallerIsProperty() float64
	SetCallerIsProperty(val float64)
	GetOtherProperty() string
	SetOtherProperty(val string)
	GetTheProperty() string
	SetTheProperty(val string)
	GetValueOfOtherProperty() string
	SetValueOfOtherProperty(val string)
	CallerIsAsync() float64
	CallerIsMethod() float64
	ModifyOtherProperty(value string)
	ModifyValueOfTheProperty(value string)
	ReadA() float64
	RetrieveOtherProperty() string
	RetrieveReadOnlyProperty() string
	RetrieveValueOfTheProperty() string
	VirtualMethod(n float64) float64
	WriteA(value float64)
}

// Struct proxy
type SyncVirtualMethods struct {
	ReadonlyProperty string
	A float64
	CallerIsProperty float64
	OtherProperty string
	TheProperty string
	ValueOfOtherProperty string
}

func (s *SyncVirtualMethods) GetReadonlyProperty() string {
	_jsii_.Get(
		s,
		"readonlyProperty",
	)
	return s.ReadonlyProperty
}

func (s *SyncVirtualMethods) GetA() float64 {
	_jsii_.Get(
		s,
		"a",
	)
	return s.A
}

func (s *SyncVirtualMethods) GetCallerIsProperty() float64 {
	_jsii_.Get(
		s,
		"callerIsProperty",
	)
	return s.CallerIsProperty
}

func (s *SyncVirtualMethods) GetOtherProperty() string {
	_jsii_.Get(
		s,
		"otherProperty",
	)
	return s.OtherProperty
}

func (s *SyncVirtualMethods) GetTheProperty() string {
	_jsii_.Get(
		s,
		"theProperty",
	)
	return s.TheProperty
}

func (s *SyncVirtualMethods) GetValueOfOtherProperty() string {
	_jsii_.Get(
		s,
		"valueOfOtherProperty",
	)
	return s.ValueOfOtherProperty
}


func NewSyncVirtualMethods() SyncVirtualMethodsIface {
	_init_.Initialize()
	self := SyncVirtualMethods{}
	_jsii_.Create(
		"jsii-calc.SyncVirtualMethods",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (s *SyncVirtualMethods) SetA(val float64) {
	_jsii_.Set(
		s,
		"a",
		val,
	)
	s.A = val
}

func (s *SyncVirtualMethods) SetCallerIsProperty(val float64) {
	_jsii_.Set(
		s,
		"callerIsProperty",
		val,
	)
	s.CallerIsProperty = val
}

func (s *SyncVirtualMethods) SetOtherProperty(val string) {
	_jsii_.Set(
		s,
		"otherProperty",
		val,
	)
	s.OtherProperty = val
}

func (s *SyncVirtualMethods) SetTheProperty(val string) {
	_jsii_.Set(
		s,
		"theProperty",
		val,
	)
	s.TheProperty = val
}

func (s *SyncVirtualMethods) SetValueOfOtherProperty(val string) {
	_jsii_.Set(
		s,
		"valueOfOtherProperty",
		val,
	)
	s.ValueOfOtherProperty = val
}

func (s *SyncVirtualMethods) CallerIsAsync() float64 {
	returns := ""
	_jsii_.Invoke(
		s,
		"callerIsAsync",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

func (s *SyncVirtualMethods) CallerIsMethod() float64 {
	returns := ""
	_jsii_.Invoke(
		s,
		"callerIsMethod",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

func (s *SyncVirtualMethods) ModifyOtherProperty(value string) {
	returns := ""
	_jsii_.Invoke(
		s,
		"modifyOtherProperty",
		[]interface{}{value},
		&returns,
	)
}

func (s *SyncVirtualMethods) ModifyValueOfTheProperty(value string) {
	returns := ""
	_jsii_.Invoke(
		s,
		"modifyValueOfTheProperty",
		[]interface{}{value},
		&returns,
	)
}

func (s *SyncVirtualMethods) ReadA() float64 {
	returns := ""
	_jsii_.Invoke(
		s,
		"readA",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

func (s *SyncVirtualMethods) RetrieveOtherProperty() string {
	returns := ""
	_jsii_.Invoke(
		s,
		"retrieveOtherProperty",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (s *SyncVirtualMethods) RetrieveReadOnlyProperty() string {
	returns := ""
	_jsii_.Invoke(
		s,
		"retrieveReadOnlyProperty",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (s *SyncVirtualMethods) RetrieveValueOfTheProperty() string {
	returns := ""
	_jsii_.Invoke(
		s,
		"retrieveValueOfTheProperty",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (s *SyncVirtualMethods) VirtualMethod(n float64) float64 {
	returns := ""
	_jsii_.Invoke(
		s,
		"virtualMethod",
		[]interface{}{n},
		&returns,
	)
	return 0.0
}

func (s *SyncVirtualMethods) WriteA(value float64) {
	returns := ""
	_jsii_.Invoke(
		s,
		"writeA",
		[]interface{}{value},
		&returns,
	)
}

// Class interface
type ThrowerIface interface {
	ThrowError()
}

// Struct proxy
type Thrower struct {
}

func NewThrower() ThrowerIface {
	_init_.Initialize()
	self := Thrower{}
	_jsii_.Create(
		"jsii-calc.Thrower",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (t *Thrower) ThrowError() {
	returns := ""
	_jsii_.Invoke(
		t,
		"throwError",
		[]interface{}{},
		&returns,
	)
}

// TopLevelStructIface is the public interface for the custom type TopLevelStruct
type TopLevelStructIface interface {
	GetRequired() string
	GetSecondLevel() _jsii_.Any
	GetOptional() string
}

// Struct proxy
type TopLevelStruct struct {
	// This is a required field.
	Required string
	// A union to really stress test our serialization.
	SecondLevel _jsii_.Any
	// You don't have to pass this.
	Optional string
}

func (t *TopLevelStruct) GetRequired() string {
	_jsii_.Get(
		t,
		"required",
	)
	return t.Required
}

func (t *TopLevelStruct) GetSecondLevel() _jsii_.Any {
	_jsii_.Get(
		t,
		"secondLevel",
	)
	return t.SecondLevel
}

func (t *TopLevelStruct) GetOptional() string {
	_jsii_.Get(
		t,
		"optional",
	)
	return t.Optional
}


// Class interface
type UmaskCheckIface interface {
}

// Checks the current file permissions are cool (no funky UMASK down-scoping happened).
// See: https://github.com/aws/jsii/issues/1765
//
// Struct proxy
type UmaskCheck struct {
}

func UmaskCheck_Mode() float64 {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.UmaskCheck",
		"mode",
		[]interface{}{},
		&returns,
	)
	return 0.0
}

// Class interface
type UnaryOperationIface interface {
	GetValue() float64
	GetOperand() scopejsiicalclib.NumericValue
	TypeName() _jsii_.Any
	ToString() string
}

// An operation on a single operand.
// Struct proxy
type UnaryOperation struct {
	// The value.
	// Deprecated.
	Value float64
	Operand scopejsiicalclib.NumericValue
}

func (u *UnaryOperation) GetValue() float64 {
	_jsii_.Get(
		u,
		"value",
	)
	return u.Value
}

func (u *UnaryOperation) GetOperand() scopejsiicalclib.NumericValue {
	_jsii_.Get(
		u,
		"operand",
	)
	return u.Operand
}


func NewUnaryOperation(operand scopejsiicalclib.NumericValue) UnaryOperationIface {
	_init_.Initialize()
	self := UnaryOperation{}
	_jsii_.Create(
		"jsii-calc.UnaryOperation",
		[]interface{}{operand},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (u *UnaryOperation) TypeName() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		u,
		"typeName",
		[]interface{}{},
		&returns,
	)
	return nil
}

func (u *UnaryOperation) ToString() string {
	returns := ""
	_jsii_.Invoke(
		u,
		"toString",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// UnionPropertiesIface is the public interface for the custom type UnionProperties
type UnionPropertiesIface interface {
	GetBar() _jsii_.Any
	GetFoo() _jsii_.Any
}

// Struct proxy
type UnionProperties struct {
	Bar _jsii_.Any
	Foo _jsii_.Any
}

func (u *UnionProperties) GetBar() _jsii_.Any {
	_jsii_.Get(
		u,
		"bar",
	)
	return u.Bar
}

func (u *UnionProperties) GetFoo() _jsii_.Any {
	_jsii_.Get(
		u,
		"foo",
	)
	return u.Foo
}


// Class interface
type UpcasingReflectableIface interface {
	submodule.IReflectable
	GetEntries() []submodule.ReflectableEntry
}

// Ensures submodule-imported types from dependencies can be used correctly.
// Struct proxy
type UpcasingReflectable struct {
	Entries []submodule.ReflectableEntry
}

func (u *UpcasingReflectable) GetEntries() []submodule.ReflectableEntry {
	_jsii_.Get(
		u,
		"entries",
	)
	return u.Entries
}


func NewUpcasingReflectable(delegate map[string]_jsii_.Any) UpcasingReflectableIface {
	_init_.Initialize()
	self := UpcasingReflectable{}
	_jsii_.Create(
		"jsii-calc.UpcasingReflectable",
		[]interface{}{delegate},
		[]_jsii_.FQN{"@scope/jsii-calc-lib.submodule.IReflectable"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func UpcasingReflectable_Reflector() submodule.Reflector {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.UpcasingReflectable",
		"reflector",
	)
	return submodule.Reflector{}
}

// Class interface
type UseBundledDependencyIface interface {
	Value() _jsii_.Any
}

// Struct proxy
type UseBundledDependency struct {
}

func NewUseBundledDependency() UseBundledDependencyIface {
	_init_.Initialize()
	self := UseBundledDependency{}
	_jsii_.Create(
		"jsii-calc.UseBundledDependency",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (u *UseBundledDependency) Value() _jsii_.Any {
	returns := ""
	_jsii_.Invoke(
		u,
		"value",
		[]interface{}{},
		&returns,
	)
	return nil
}

// Class interface
type UseCalcBaseIface interface {
	Hello() scopejsiicalcbase.Base
}

// Depend on a type from jsii-calc-base as a test for awslabs/jsii#128.
// Struct proxy
type UseCalcBase struct {
}

func NewUseCalcBase() UseCalcBaseIface {
	_init_.Initialize()
	self := UseCalcBase{}
	_jsii_.Create(
		"jsii-calc.UseCalcBase",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (u *UseCalcBase) Hello() scopejsiicalcbase.Base {
	returns := ""
	_jsii_.Invoke(
		u,
		"hello",
		[]interface{}{},
		&returns,
	)
	return scopejsiicalcbase.Base{}
}

// Class interface
type UsesInterfaceWithPropertiesIface interface {
	GetObj() IInterfaceWithProperties
	JustRead() string
	ReadStringAndNumber(ext IInterfaceWithPropertiesExtension) string
	WriteAndRead(value string) string
}

// Struct proxy
type UsesInterfaceWithProperties struct {
	Obj IInterfaceWithProperties
}

func (u *UsesInterfaceWithProperties) GetObj() IInterfaceWithProperties {
	_jsii_.Get(
		u,
		"obj",
	)
	return u.Obj
}


func NewUsesInterfaceWithProperties(obj IInterfaceWithProperties) UsesInterfaceWithPropertiesIface {
	_init_.Initialize()
	self := UsesInterfaceWithProperties{}
	_jsii_.Create(
		"jsii-calc.UsesInterfaceWithProperties",
		[]interface{}{obj},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (u *UsesInterfaceWithProperties) JustRead() string {
	returns := ""
	_jsii_.Invoke(
		u,
		"justRead",
		[]interface{}{},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (u *UsesInterfaceWithProperties) ReadStringAndNumber(ext IInterfaceWithPropertiesExtension) string {
	returns := ""
	_jsii_.Invoke(
		u,
		"readStringAndNumber",
		[]interface{}{ext},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

func (u *UsesInterfaceWithProperties) WriteAndRead(value string) string {
	returns := ""
	_jsii_.Invoke(
		u,
		"writeAndRead",
		[]interface{}{value},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type VariadicInvokerIface interface {
	AsArray(values float64) []float64
}

// Struct proxy
type VariadicInvoker struct {
}

func NewVariadicInvoker(method VariadicMethod) VariadicInvokerIface {
	_init_.Initialize()
	self := VariadicInvoker{}
	_jsii_.Create(
		"jsii-calc.VariadicInvoker",
		[]interface{}{method},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (v *VariadicInvoker) AsArray(values float64) []float64 {
	returns := ""
	_jsii_.Invoke(
		v,
		"asArray",
		[]interface{}{values},
		&returns,
	)
	return nil
}

// Class interface
type VariadicMethodIface interface {
	AsArray(first float64, others float64) []float64
}

// Struct proxy
type VariadicMethod struct {
}

func NewVariadicMethod(prefix float64) VariadicMethodIface {
	_init_.Initialize()
	self := VariadicMethod{}
	_jsii_.Create(
		"jsii-calc.VariadicMethod",
		[]interface{}{prefix},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (v *VariadicMethod) AsArray(first float64, others float64) []float64 {
	returns := ""
	_jsii_.Invoke(
		v,
		"asArray",
		[]interface{}{first, others},
		&returns,
	)
	return nil
}

// Class interface
type VirtualMethodPlaygroundIface interface {
	OverrideMeAsync(index float64) float64
	OverrideMeSync(index float64) float64
	ParallelSumAsync(count float64) float64
	SerialSumAsync(count float64) float64
	SumSync(count float64) float64
}

// Struct proxy
type VirtualMethodPlayground struct {
}

func NewVirtualMethodPlayground() VirtualMethodPlaygroundIface {
	_init_.Initialize()
	self := VirtualMethodPlayground{}
	_jsii_.Create(
		"jsii-calc.VirtualMethodPlayground",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (v *VirtualMethodPlayground) OverrideMeAsync(index float64) float64 {
	returns := ""
	_jsii_.Invoke(
		v,
		"overrideMeAsync",
		[]interface{}{index},
		&returns,
	)
	return 0.0
}

func (v *VirtualMethodPlayground) OverrideMeSync(index float64) float64 {
	returns := ""
	_jsii_.Invoke(
		v,
		"overrideMeSync",
		[]interface{}{index},
		&returns,
	)
	return 0.0
}

func (v *VirtualMethodPlayground) ParallelSumAsync(count float64) float64 {
	returns := ""
	_jsii_.Invoke(
		v,
		"parallelSumAsync",
		[]interface{}{count},
		&returns,
	)
	return 0.0
}

func (v *VirtualMethodPlayground) SerialSumAsync(count float64) float64 {
	returns := ""
	_jsii_.Invoke(
		v,
		"serialSumAsync",
		[]interface{}{count},
		&returns,
	)
	return 0.0
}

func (v *VirtualMethodPlayground) SumSync(count float64) float64 {
	returns := ""
	_jsii_.Invoke(
		v,
		"sumSync",
		[]interface{}{count},
		&returns,
	)
	return 0.0
}

// Class interface
type VoidCallbackIface interface {
	GetMethodWasCalled() bool
	CallMe()
	OverrideMe()
}

// This test is used to validate the runtimes can return correctly from a void callback.
// 
// - Implement \`overrideMe\` (method does not have to do anything).
// - Invoke \`callMe\`
// - Verify that \`methodWasCalled\` is \`true\`.
// Struct proxy
type VoidCallback struct {
	MethodWasCalled bool
}

func (v *VoidCallback) GetMethodWasCalled() bool {
	_jsii_.Get(
		v,
		"methodWasCalled",
	)
	return v.MethodWasCalled
}


func NewVoidCallback() VoidCallbackIface {
	_init_.Initialize()
	self := VoidCallback{}
	_jsii_.Create(
		"jsii-calc.VoidCallback",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (v *VoidCallback) CallMe() {
	returns := ""
	_jsii_.Invoke(
		v,
		"callMe",
		[]interface{}{},
		&returns,
	)
}

func (v *VoidCallback) OverrideMe() {
	returns := ""
	_jsii_.Invoke(
		v,
		"overrideMe",
		[]interface{}{},
		&returns,
	)
}

// Class interface
type WithPrivatePropertyInConstructorIface interface {
	GetSuccess() bool
}

// Verifies that private property declarations in constructor arguments are hidden.
// Struct proxy
type WithPrivatePropertyInConstructor struct {
	Success bool
}

func (w *WithPrivatePropertyInConstructor) GetSuccess() bool {
	_jsii_.Get(
		w,
		"success",
	)
	return w.Success
}


func NewWithPrivatePropertyInConstructor(privateField string) WithPrivatePropertyInConstructorIface {
	_init_.Initialize()
	self := WithPrivatePropertyInConstructor{}
	_jsii_.Create(
		"jsii-calc.WithPrivatePropertyInConstructor",
		[]interface{}{privateField},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/pythonself/pythonself.go 1`] = `
package pythonself

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type ClassWithSelfIface interface {
	GetSelf() string
	Method(self float64) string
}

// Struct proxy
type ClassWithSelf struct {
	Self string
}

func (c *ClassWithSelf) GetSelf() string {
	_jsii_.Get(
		c,
		"self",
	)
	return c.Self
}


func NewClassWithSelf(self string) ClassWithSelfIface {
	_init_.Initialize()
	self_ := ClassWithSelf{}
	_jsii_.Create(
		"jsii-calc.PythonSelf.ClassWithSelf",
		[]interface{}{self},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self_,
	)
	return &self_
}

func (c *ClassWithSelf) Method(self float64) string {
	returns := ""
	_jsii_.Invoke(
		c,
		"method",
		[]interface{}{self},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}

// Class interface
type ClassWithSelfKwargIface interface {
	GetProps() StructWithSelf
}

// Struct proxy
type ClassWithSelfKwarg struct {
	Props StructWithSelf
}

func (c *ClassWithSelfKwarg) GetProps() StructWithSelf {
	_jsii_.Get(
		c,
		"props",
	)
	return c.Props
}


func NewClassWithSelfKwarg(props StructWithSelf) ClassWithSelfKwargIface {
	_init_.Initialize()
	self := ClassWithSelfKwarg{}
	_jsii_.Create(
		"jsii-calc.PythonSelf.ClassWithSelfKwarg",
		[]interface{}{props},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

type IInterfaceWithSelf interface {
	Method(self float64) string
}

// StructWithSelfIface is the public interface for the custom type StructWithSelf
type StructWithSelfIface interface {
	GetSelf() string
}

// Struct proxy
type StructWithSelf struct {
	Self string
}

func (s *StructWithSelf) GetSelf() string {
	_jsii_.Get(
		s,
		"self",
	)
	return s.Self
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/backreferences/backreferences.go 1`] = `
package backreferences

import (
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule"
)

// MyClassReferenceIface is the public interface for the custom type MyClassReference
type MyClassReferenceIface interface {
	GetReference() submodule.MyClass
}

// Struct proxy
type MyClassReference struct {
	Reference submodule.MyClass
}

func (m *MyClassReference) GetReference() submodule.MyClass {
	_jsii_.Get(
		m,
		"reference",
	)
	return m.Reference
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/child/child.go 1`] = `
package child

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

type Awesomeness string

const (
	AwesomenessAwesome Awesomeness = "AWESOME"
)

type Goodness string

const (
	GoodnessPrettyGood Goodness = "PRETTY_GOOD"
	GoodnessReallyGood Goodness = "REALLY_GOOD"
	GoodnessAmazinglyGood Goodness = "AMAZINGLY_GOOD"
)

// Class interface
type InnerClassIface interface {
}

// Struct proxy
type InnerClass struct {
}

func NewInnerClass() InnerClassIface {
	_init_.Initialize()
	self := InnerClass{}
	_jsii_.Create(
		"jsii-calc.submodule.child.InnerClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func InnerClass_StaticProp() SomeStruct {
	_init_.Initialize()
	_jsii_.StaticGet(
		"jsii-calc.submodule.child.InnerClass",
		"staticProp",
	)
	return nil
}

// KwargsPropsIface is the public interface for the custom type KwargsProps
type KwargsPropsIface interface {
	GetProp() SomeEnum
	GetExtra() string
}

// Struct proxy
type KwargsProps struct {
	Prop SomeEnum
	Extra string
}

func (k *KwargsProps) GetProp() SomeEnum {
	_jsii_.Get(
		k,
		"prop",
	)
	return k.Prop
}

func (k *KwargsProps) GetExtra() string {
	_jsii_.Get(
		k,
		"extra",
	)
	return k.Extra
}


// Class interface
type OuterClassIface interface {
	GetInnerClass() InnerClass
}

// Checks that classes can self-reference during initialization.
// See: : https://github.com/aws/jsii/pull/1706
//
// Struct proxy
type OuterClass struct {
	InnerClass InnerClass
}

func (o *OuterClass) GetInnerClass() InnerClass {
	_jsii_.Get(
		o,
		"innerClass",
	)
	return o.InnerClass
}


func NewOuterClass() OuterClassIface {
	_init_.Initialize()
	self := OuterClass{}
	_jsii_.Create(
		"jsii-calc.submodule.child.OuterClass",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

type SomeEnum string

const (
	SomeEnumSome SomeEnum = "SOME"
)

// SomeStructIface is the public interface for the custom type SomeStruct
type SomeStructIface interface {
	GetProp() SomeEnum
}

// Struct proxy
type SomeStruct struct {
	Prop SomeEnum
}

func (s *SomeStruct) GetProp() SomeEnum {
	_jsii_.Get(
		s,
		"prop",
	)
	return s.Prop
}


// StructureIface is the public interface for the custom type Structure
type StructureIface interface {
	GetBool() bool
}

// Struct proxy
type Structure struct {
	Bool bool
}

func (s *Structure) GetBool() bool {
	_jsii_.Get(
		s,
		"bool",
	)
	return s.Bool
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/isolated/isolated.go 1`] = `
package isolated

import (
)

// Class interface
type KwargsIface interface {
}

// Ensures imports are correctly registered for kwargs lifted properties from super-structs.
// Struct proxy
type Kwargs struct {
}

func Kwargs_Method(props child.KwargsProps) bool {
	_init_.Initialize()
	returns := ""
	_jsii_.InvokeStatic(
		"jsii-calc.submodule.isolated.Kwargs",
		"method",
		[]interface{}{props},
		&returns,
	)
	return true
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/deeplynested/deeplynested.go 1`] = `
package deeplynested

import (
)

type INamespaced interface {
	GetDefinedAt() string
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/nestedsubmodule/nestedsubmodule.go 1`] = `
package nestedsubmodule

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/nestedsubmodule/deeplynested"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/child"
)

// Class interface
type NamespacedIface interface {
	deeplynested.INamespaced
	GetDefinedAt() string
	GetGoodness() child.Goodness
}

// Struct proxy
type Namespaced struct {
	DefinedAt string
	Goodness child.Goodness
}

func (n *Namespaced) GetDefinedAt() string {
	_jsii_.Get(
		n,
		"definedAt",
	)
	return n.DefinedAt
}

func (n *Namespaced) GetGoodness() child.Goodness {
	_jsii_.Get(
		n,
		"goodness",
	)
	return n.Goodness
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/param/param.go 1`] = `
package param

import (
)

// SpecialParameterIface is the public interface for the custom type SpecialParameter
type SpecialParameterIface interface {
	GetValue() string
}

// Struct proxy
type SpecialParameter struct {
	Value string
}

func (s *SpecialParameter) GetValue() string {
	_jsii_.Get(
		s,
		"value",
	)
	return s.Value
}



`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/returnsparam/returnsparam.go 1`] = `
package returnsparam

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/param"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type ReturnsSpecialParameterIface interface {
	ReturnsSpecialParam() param.SpecialParameter
}

// Struct proxy
type ReturnsSpecialParameter struct {
}

func NewReturnsSpecialParameter() ReturnsSpecialParameterIface {
	_init_.Initialize()
	self := ReturnsSpecialParameter{}
	_jsii_.Create(
		"jsii-calc.submodule.returnsparam.ReturnsSpecialParameter",
		[]interface{}{},
		[]_jsii_.FQN{},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (r *ReturnsSpecialParameter) ReturnsSpecialParam() param.SpecialParameter {
	returns := ""
	_jsii_.Invoke(
		r,
		"returnsSpecialParam",
		[]interface{}{},
		&returns,
	)
	return param.SpecialParameter{}
}


`;

exports[`Generated code for "jsii-calc": <outDir>/go/jsiicalc/submodule/submodule.go 1`] = `
package submodule

import (
	_jsii_ "github.com/aws-cdk/jsii/jsii-experimental"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/nestedsubmodule/deeplynested"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/child"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc"
	"github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/submodule/param"
	_init_ "github.com/aws-cdk/jsii/jsii-calc/go/jsiicalc/jsii"
)

// Class interface
type MyClassIface interface {
	deeplynested.INamespaced
	GetAwesomeness() child.Awesomeness
	GetDefinedAt() string
	GetGoodness() child.Goodness
	GetProps() child.SomeStruct
	GetAllTypes() jsiicalc.AllTypes
	SetAllTypes(val jsiicalc.AllTypes)
	MethodWithSpecialParam(param param.SpecialParameter) string
}

// Struct proxy
type MyClass struct {
	Awesomeness child.Awesomeness
	DefinedAt string
	Goodness child.Goodness
	Props child.SomeStruct
	AllTypes jsiicalc.AllTypes
}

func (m *MyClass) GetAwesomeness() child.Awesomeness {
	_jsii_.Get(
		m,
		"awesomeness",
	)
	return m.Awesomeness
}

func (m *MyClass) GetDefinedAt() string {
	_jsii_.Get(
		m,
		"definedAt",
	)
	return m.DefinedAt
}

func (m *MyClass) GetGoodness() child.Goodness {
	_jsii_.Get(
		m,
		"goodness",
	)
	return m.Goodness
}

func (m *MyClass) GetProps() child.SomeStruct {
	_jsii_.Get(
		m,
		"props",
	)
	return m.Props
}

func (m *MyClass) GetAllTypes() jsiicalc.AllTypes {
	_jsii_.Get(
		m,
		"allTypes",
	)
	return m.AllTypes
}


func NewMyClass(props child.SomeStruct) MyClassIface {
	_init_.Initialize()
	self := MyClass{}
	_jsii_.Create(
		"jsii-calc.submodule.MyClass",
		[]interface{}{props},
		[]_jsii_.FQN{"jsii-calc.submodule.nested_submodule.deeplyNested.INamespaced"},
		[]_jsii_.Override{},
		&self,
	)
	return &self
}

func (m *MyClass) SetAllTypes(val jsiicalc.AllTypes) {
	_jsii_.Set(
		m,
		"allTypes",
		val,
	)
	m.AllTypes = val
}

func (m *MyClass) MethodWithSpecialParam(param param.SpecialParameter) string {
	returns := ""
	_jsii_.Invoke(
		m,
		"methodWithSpecialParam",
		[]interface{}{param},
		&returns,
	)
	return "NOOP_RETURN_STRING"
}


`;
