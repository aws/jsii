{"version":3,"file":"name-tree.test.js","sourceRoot":"","sources":["../src/name-tree.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as spec from './assembly';\nimport { NameTree } from './name-tree';\n\nconst assemblyName = '@foo/bar';\n\ntest('correctly represents sample assembly', () => {\n  // GIVEN\n  const assm: spec.Assembly = {\n    schema: spec.SchemaVersion.LATEST,\n    name: assemblyName,\n    description: 'bla',\n    homepage: 'https://github.com/bla/bla',\n    author: { name: 'Author', roles: ['author'] },\n    repository: {\n      type: 'scm',\n      url: 'https://github.com/bla/bla',\n    },\n    version: '0.0.1',\n    jsiiVersion: 'TEST',\n    license: 'NONE',\n    fingerprint: '<no-fingerprint>',\n    targets: {},\n    types: {\n      'org.jsii.TypeA': makeType('org.jsii', 'TypeA'),\n      'org.jsii.TypeA.NestedType': makeType('org.jsii.TypeA', 'NestedType'),\n      'org.jsii.enums.TypeB': makeType('org.jsii.enums', 'TypeB'),\n    },\n  };\n\n  // WHEN\n  const nameTree = NameTree.of(assm);\n\n  // THEN\n  expect(Object.keys(nameTree.children)).toEqual(['org']);\n  expect(Object.keys(nameTree.children.org.children)).toEqual(['jsii']);\n  expect(\n    new Set(Object.keys(nameTree.children.org.children.jsii.children)),\n  ).toEqual(new Set(['enums', 'TypeA']));\n  expect(\n    Object.keys(nameTree.children.org.children.jsii.children.enums.children),\n  ).toEqual(['TypeB']);\n  expect(\n    Object.keys(nameTree.children.org.children.jsii.children.TypeA.children),\n  ).toEqual(['NestedType']);\n\n  expect(nameTree.fqn).toBe(undefined);\n  expect(nameTree.children.org.fqn).toBe(undefined);\n  expect(nameTree.children.org.children.jsii.fqn).toBe(undefined);\n  expect(nameTree.children.org.children.jsii.children.enums.fqn).toBe(\n    undefined,\n  );\n\n  expect(nameTree.children.org.children.jsii.children.TypeA.fqn).toBe(\n    'org.jsii.TypeA',\n  );\n  expect(\n    nameTree.children.org.children.jsii.children.TypeA.children.NestedType.fqn,\n  ).toBe('org.jsii.TypeA.NestedType');\n  expect(\n    nameTree.children.org.children.jsii.children.enums.children.TypeB.fqn,\n  ).toBe('org.jsii.enums.TypeB');\n});\n\nfunction makeType(ns: string, name: string): spec.Type {\n  const fqn = `${ns}.${name}`;\n  return { fqn, name, assembly: assemblyName, kind: spec.TypeKind.Class };\n}\n"]}