{"version":3,"file":"validate-assembly.js","sourceRoot":"","sources":["../src/validate-assembly.ts"],"names":[],"mappings":";;;AAAA,2CAA+C;AAI/C,qGAAqG;AACxF,QAAA,MAAM,GAAW,OAAO,CAAC,iCAAiC,CAAC,CAAC;AAEzE,SAAgB,gBAAgB,CAAC,GAAQ;IACvC,MAAM,SAAS,GAAG,IAAI,sBAAS,EAAE,CAAC;IAClC,SAAS,CAAC,SAAS,CAAC,cAAM,CAAC,CAAC,CAAC,kBAAkB;IAC/C,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,cAAM,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;IACvE,IAAI,MAAM,CAAC,KAAK,EAAE;QAChB,OAAO,GAAG,CAAC;KACZ;IACD,MAAM,IAAI,KAAK,CAAC,sBAAsB,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;AAC7D,CAAC;AARD,4CAQC","sourcesContent":["import { Schema, Validator } from 'jsonschema';\n\nimport { Assembly } from './assembly';\n\n// eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\nexport const schema: Schema = require('../schema/jsii-spec.schema.json');\n\nexport function validateAssembly(obj: any): Assembly {\n  const validator = new Validator();\n  validator.addSchema(schema); // For definitions\n  const result = validator.validate(obj, schema, { nestedErrors: true });\n  if (result.valid) {\n    return obj;\n  }\n  throw new Error(`Invalid assembly:\\n${result.toString()}`);\n}\n"]}