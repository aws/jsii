assemblies
 ├─┬ jsii-calc
 │ ├─┬ dependencies
 │ │ ├── @scope/jsii-calc-base
 │ │ ├── @scope/jsii-calc-base-of-base
 │ │ └── @scope/jsii-calc-lib
 │ └─┬ types
 │   ├─┬ class AbstractClass (experimental)
 │   │ ├── base: AbstractClassBase
 │   │ ├── interfaces: IInterfaceImplementedByAbstractClass
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ abstractMethod(name) method (experimental)
 │   │   │ ├── abstract
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ name
 │   │   │ │   └── type: string
 │   │   │ └── returns: string
 │   │   ├─┬ nonAbstractMethod() method (experimental)
 │   │   │ └── returns: number
 │   │   └─┬ propFromInterface property (experimental)
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ class AbstractClassBase (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ abstractProperty property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ class AbstractClassReturner (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ giveMeAbstract() method (experimental)
 │   │   │ └── returns: jsii-calc.AbstractClass
 │   │   ├─┬ giveMeInterface() method (experimental)
 │   │   │ └── returns: jsii-calc.IInterfaceImplementedByAbstractClass
 │   │   └─┬ returnAbstractFromProperty property (experimental)
 │   │     ├── immutable
 │   │     └── type: jsii-calc.AbstractClassBase
 │   ├─┬ class Add (experimental)
 │   │ ├── base: BinaryOperation
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(lhs,rhs) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   ├─┬ lhs
 │   │   │   │ └── type: @scope/jsii-calc-lib.Value
 │   │   │   └─┬ rhs
 │   │   │     └── type: @scope/jsii-calc-lib.Value
 │   │   ├─┬ toString() method (experimental)
 │   │   │ └── returns: string
 │   │   └─┬ value property (experimental)
 │   │     ├── immutable
 │   │     └── type: number
 │   ├─┬ class AllTypes (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ anyIn(inp) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ inp
 │   │   │ │   └── type: any
 │   │   │ └── returns: void
 │   │   ├─┬ anyOut() method (experimental)
 │   │   │ └── returns: any
 │   │   ├─┬ enumMethod(value) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ value
 │   │   │ │   └── type: jsii-calc.StringEnum
 │   │   │ └── returns: jsii-calc.StringEnum
 │   │   ├─┬ enumPropertyValue property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: number
 │   │   ├─┬ anyArrayProperty property (experimental)
 │   │   │ └── type: Array<any>
 │   │   ├─┬ anyMapProperty property (experimental)
 │   │   │ └── type: Map<string => any>
 │   │   ├─┬ anyProperty property (experimental)
 │   │   │ └── type: any
 │   │   ├─┬ arrayProperty property (experimental)
 │   │   │ └── type: Array<string>
 │   │   ├─┬ booleanProperty property (experimental)
 │   │   │ └── type: boolean
 │   │   ├─┬ dateProperty property (experimental)
 │   │   │ └── type: date
 │   │   ├─┬ enumProperty property (experimental)
 │   │   │ └── type: jsii-calc.AllTypesEnum
 │   │   ├─┬ jsonProperty property (experimental)
 │   │   │ └── type: json
 │   │   ├─┬ mapProperty property (experimental)
 │   │   │ └── type: Map<string => @scope/jsii-calc-lib.Number>
 │   │   ├─┬ numberProperty property (experimental)
 │   │   │ └── type: number
 │   │   ├─┬ stringProperty property (experimental)
 │   │   │ └── type: string
 │   │   ├─┬ unionArrayProperty property (experimental)
 │   │   │ └── type: Array<number | @scope/jsii-calc-lib.Value>
 │   │   ├─┬ unionMapProperty property (experimental)
 │   │   │ └── type: Map<string => string | number | @scope/jsii-calc-lib.Number>
 │   │   ├─┬ unionProperty property (experimental)
 │   │   │ └── type: string | number | jsii-calc.Multiply | @scope/jsii-calc-lib.Number
 │   │   ├─┬ unknownArrayProperty property (experimental)
 │   │   │ └── type: Array<any>
 │   │   ├─┬ unknownMapProperty property (experimental)
 │   │   │ └── type: Map<string => any>
 │   │   ├─┬ unknownProperty property (experimental)
 │   │   │ └── type: any
 │   │   └─┬ optionalEnumValue property (experimental)
 │   │     └── type: Optional<jsii-calc.StringEnum>
 │   ├─┬ class AllowedMethodNames (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ getBar(_p1,_p2) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ ├─┬ _p1
 │   │   │ │ │ └── type: string
 │   │   │ │ └─┬ _p2
 │   │   │ │   └── type: number
 │   │   │ └── returns: void
 │   │   ├─┬ getFoo(withParam) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ withParam
 │   │   │ │   └── type: string
 │   │   │ └── returns: string
 │   │   ├─┬ setBar(_x,_y,_z) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ ├─┬ _x
 │   │   │ │ │ └── type: string
 │   │   │ │ ├─┬ _y
 │   │   │ │ │ └── type: number
 │   │   │ │ └─┬ _z
 │   │   │ │   └── type: boolean
 │   │   │ └── returns: void
 │   │   └─┬ setFoo(_x,_y) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ ├─┬ _x
 │   │     │ │ └── type: string
 │   │     │ └─┬ _y
 │   │     │   └── type: number
 │   │     └── returns: void
 │   ├─┬ class AsyncVirtualMethods (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ callMe() method (experimental)
 │   │   │ └── returns: Promise<number>
 │   │   ├─┬ callMe2() method (experimental)
 │   │   │ └── returns: Promise<number>
 │   │   ├─┬ callMeDoublePromise() method (experimental)
 │   │   │ └── returns: Promise<number>
 │   │   ├─┬ dontOverrideMe() method (experimental)
 │   │   │ └── returns: number
 │   │   ├─┬ overrideMe(mult) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ mult
 │   │   │ │   └── type: number
 │   │   │ └── returns: Promise<number>
 │   │   └─┬ overrideMeToo() method (experimental)
 │   │     └── returns: Promise<number>
 │   ├─┬ class AugmentableClass (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ methodOne() method (experimental)
 │   │   │ └── returns: void
 │   │   └─┬ methodTwo() method (experimental)
 │   │     └── returns: void
 │   ├─┬ class BinaryOperation (experimental)
 │   │ ├── base: Operation
 │   │ ├── interfaces: IFriendly
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(lhs,rhs) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   ├─┬ lhs
 │   │   │   │ └── type: @scope/jsii-calc-lib.Value
 │   │   │   └─┬ rhs
 │   │   │     └── type: @scope/jsii-calc-lib.Value
 │   │   ├─┬ hello() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ lhs property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: @scope/jsii-calc-lib.Value
 │   │   └─┬ rhs property (experimental)
 │   │     ├── immutable
 │   │     └── type: @scope/jsii-calc-lib.Value
 │   ├─┬ class Calculator (experimental)
 │   │ ├── base: CompositeOperation
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(props) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   └─┬ props
 │   │   │     └── type: Optional<jsii-calc.CalculatorProps>
 │   │   ├─┬ add(value) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ value
 │   │   │ │   └── type: number
 │   │   │ └── returns: void
 │   │   ├─┬ mul(value) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ value
 │   │   │ │   └── type: number
 │   │   │ └── returns: void
 │   │   ├─┬ neg() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ pow(value) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ value
 │   │   │ │   └── type: number
 │   │   │ └── returns: void
 │   │   ├─┬ readUnionValue() method (experimental)
 │   │   │ └── returns: number
 │   │   ├─┬ expression property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: @scope/jsii-calc-lib.Value
 │   │   ├─┬ operationsLog property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: Array<@scope/jsii-calc-lib.Value>
 │   │   ├─┬ operationsMap property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: Map<string => Array<@scope/jsii-calc-lib.Value>>
 │   │   ├─┬ curr property (experimental)
 │   │   │ └── type: @scope/jsii-calc-lib.Value
 │   │   ├─┬ maxValue property (experimental)
 │   │   │ └── type: Optional<number>
 │   │   └─┬ unionProperty property (experimental)
 │   │     └── type: Optional<jsii-calc.Add | jsii-calc.Multiply | jsii-calc.Power>
 │   ├─┬ class ClassThatImplementsTheInternalInterface (experimental)
 │   │ ├── interfaces: INonInternalInterface
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ a property (experimental)
 │   │   │ └── type: string
 │   │   ├─┬ b property (experimental)
 │   │   │ └── type: string
 │   │   ├─┬ c property (experimental)
 │   │   │ └── type: string
 │   │   └─┬ d property (experimental)
 │   │     └── type: string
 │   ├─┬ class ClassThatImplementsThePrivateInterface (experimental)
 │   │ ├── interfaces: INonInternalInterface
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ a property (experimental)
 │   │   │ └── type: string
 │   │   ├─┬ b property (experimental)
 │   │   │ └── type: string
 │   │   ├─┬ c property (experimental)
 │   │   │ └── type: string
 │   │   └─┬ e property (experimental)
 │   │     └── type: string
 │   ├─┬ class ClassWithDocs (stable)
 │   │ └─┬ members
 │   │   └── <initializer>() initializer (stable)
 │   ├─┬ class ClassWithMutableObjectLiteralProperty (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ mutableObject property (experimental)
 │   │     └── type: jsii-calc.IMutableObjectLiteral
 │   ├─┬ class ClassWithPrivateConstructorAndAutomaticProperties (experimental)
 │   │ ├── interfaces: IInterfaceWithProperties
 │   │ └─┬ members
 │   │   ├─┬ static create(readOnlyString,readWriteString) method (experimental)
 │   │   │ ├── static
 │   │   │ ├─┬ parameters
 │   │   │ │ ├─┬ readOnlyString
 │   │   │ │ │ └── type: string
 │   │   │ │ └─┬ readWriteString
 │   │   │ │   └── type: string
 │   │   │ └── returns: jsii-calc.ClassWithPrivateConstructorAndAutomaticProperties
 │   │   ├─┬ readOnlyString property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: string
 │   │   └─┬ readWriteString property (experimental)
 │   │     └── type: string
 │   ├─┬ class ConstructorPassesThisOut (experimental)
 │   │ └─┬ members
 │   │   └─┬ <initializer>(consumer) initializer (experimental)
 │   │     └─┬ parameters
 │   │       └─┬ consumer
 │   │         └── type: jsii-calc.PartiallyInitializedThisConsumer
 │   ├─┬ class Constructors (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ static hiddenInterface() method (experimental)
 │   │   │ ├── static
 │   │   │ └── returns: jsii-calc.IPublicInterface
 │   │   ├─┬ static hiddenInterfaces() method (experimental)
 │   │   │ ├── static
 │   │   │ └── returns: Array<jsii-calc.IPublicInterface>
 │   │   ├─┬ static hiddenSubInterfaces() method (experimental)
 │   │   │ ├── static
 │   │   │ └── returns: Array<jsii-calc.IPublicInterface>
 │   │   ├─┬ static makeClass() method (experimental)
 │   │   │ ├── static
 │   │   │ └── returns: jsii-calc.PublicClass
 │   │   ├─┬ static makeInterface() method (experimental)
 │   │   │ ├── static
 │   │   │ └── returns: jsii-calc.IPublicInterface
 │   │   ├─┬ static makeInterface2() method (experimental)
 │   │   │ ├── static
 │   │   │ └── returns: jsii-calc.IPublicInterface2
 │   │   └─┬ static makeInterfaces() method (experimental)
 │   │     ├── static
 │   │     └── returns: Array<jsii-calc.IPublicInterface>
 │   ├─┬ class ConsumersOfThisCrazyTypeSystem (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ consumeAnotherPublicInterface(obj) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ obj
 │   │   │ │   └── type: jsii-calc.IAnotherPublicInterface
 │   │   │ └── returns: string
 │   │   └─┬ consumeNonInternalInterface(obj) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ └─┬ obj
 │   │     │   └── type: jsii-calc.INonInternalInterface
 │   │     └── returns: any
 │   ├─┬ class DataRenderer (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ render(data) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ data
 │   │   │ │   └── type: Optional<@scope/jsii-calc-lib.MyFirstStruct>
 │   │   │ └── returns: string
 │   │   ├─┬ renderArbitrary(data) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ data
 │   │   │ │   └── type: Map<string => any>
 │   │   │ └── returns: string
 │   │   └─┬ renderMap(map) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ └─┬ map
 │   │     │   └── type: Map<string => any>
 │   │     └── returns: string
 │   ├─┬ class DefaultedConstructorArgument (experimental)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(arg1,arg2,arg3) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   ├─┬ arg1
 │   │   │   │ └── type: Optional<number>
 │   │   │   ├─┬ arg2
 │   │   │   │ └── type: Optional<string>
 │   │   │   └─┬ arg3
 │   │   │     └── type: Optional<date>
 │   │   ├─┬ arg1 property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: number
 │   │   ├─┬ arg3 property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: date
 │   │   └─┬ arg2 property (experimental)
 │   │     ├── immutable
 │   │     └── type: Optional<string>
 │   ├─┬ class DeprecatedClass (deprecated)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(readonlyString,mutableNumber) initializer (deprecated)
 │   │   │ └─┬ parameters
 │   │   │   ├─┬ readonlyString
 │   │   │   │ └── type: string
 │   │   │   └─┬ mutableNumber
 │   │   │     └── type: Optional<number>
 │   │   ├─┬ method() method (deprecated)
 │   │   │ └── returns: void
 │   │   ├─┬ readonlyProperty property (deprecated)
 │   │   │ ├── immutable
 │   │   │ └── type: string
 │   │   └─┬ mutableProperty property (deprecated)
 │   │     └── type: Optional<number>
 │   ├─┬ class Base (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ prop property (experimental)
 │   │     └── type: string
 │   ├─┬ class Derived (experimental)
 │   │ ├── base: Base
 │   │ └─┬ members
 │   │   └── <initializer>() initializer (experimental)
 │   ├─┬ class DoNotOverridePrivates (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ changePrivatePropertyValue(newValue) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ newValue
 │   │   │ │   └── type: string
 │   │   │ └── returns: void
 │   │   ├─┬ privateMethodValue() method (experimental)
 │   │   │ └── returns: string
 │   │   └─┬ privatePropertyValue() method (experimental)
 │   │     └── returns: string
 │   ├─┬ class DoNotRecognizeAnyAsOptional (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ method(_requiredAny,_optionalAny,_optionalString) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ ├─┬ _requiredAny
 │   │     │ │ └── type: any
 │   │     │ ├─┬ _optionalAny
 │   │     │ │ └── type: any
 │   │     │ └─┬ _optionalString
 │   │     │   └── type: Optional<string>
 │   │     └── returns: void
 │   ├─┬ class DocumentedClass (stable)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (stable)
 │   │   ├─┬ greet(greetee) method (stable)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ greetee
 │   │   │ │   └── type: Optional<jsii-calc.Greetee>
 │   │   │ └── returns: number
 │   │   └─┬ hola() method (experimental)
 │   │     └── returns: void
 │   ├─┬ class DontComplainAboutVariadicAfterOptional (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ optionalAndVariadic(optional,things) method (experimental)
 │   │     ├── variadic
 │   │     ├─┬ parameters
 │   │     │ ├─┬ optional
 │   │     │ │ └── type: Optional<string>
 │   │     │ └─┬ things
 │   │     │   ├── type: string
 │   │     │   └── variadic
 │   │     └── returns: string
 │   ├─┬ class DoubleTrouble (experimental)
 │   │ ├── interfaces: IFriendlyRandomGenerator
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ hello() method (experimental)
 │   │   │ └── returns: string
 │   │   └─┬ next() method (experimental)
 │   │     └── returns: number
 │   ├─┬ class EraseUndefinedHashValues (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ static doesKeyExist(opts,key) method (experimental)
 │   │   │ ├── static
 │   │   │ ├─┬ parameters
 │   │   │ │ ├─┬ opts
 │   │   │ │ │ └── type: jsii-calc.EraseUndefinedHashValuesOptions
 │   │   │ │ └─┬ key
 │   │   │ │   └── type: string
 │   │   │ └── returns: boolean
 │   │   ├─┬ static prop1IsNull() method (experimental)
 │   │   │ ├── static
 │   │   │ └── returns: any
 │   │   └─┬ static prop2IsUndefined() method (experimental)
 │   │     ├── static
 │   │     └── returns: any
 │   ├─┬ class ExperimentalClass (experimental)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(readonlyString,mutableNumber) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   ├─┬ readonlyString
 │   │   │   │ └── type: string
 │   │   │   └─┬ mutableNumber
 │   │   │     └── type: Optional<number>
 │   │   ├─┬ method() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ readonlyProperty property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: string
 │   │   └─┬ mutableProperty property (experimental)
 │   │     └── type: Optional<number>
 │   ├─┬ class ExportedBaseClass (experimental)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(success) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   └─┬ success
 │   │   │     └── type: boolean
 │   │   └─┬ success property (experimental)
 │   │     ├── immutable
 │   │     └── type: boolean
 │   ├─┬ class GiveMeStructs (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ derivedToFirst(derived) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ derived
 │   │   │ │   └── type: jsii-calc.DerivedStruct
 │   │   │ └── returns: @scope/jsii-calc-lib.MyFirstStruct
 │   │   ├─┬ readDerivedNonPrimitive(derived) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ derived
 │   │   │ │   └── type: jsii-calc.DerivedStruct
 │   │   │ └── returns: jsii-calc.DoubleTrouble
 │   │   ├─┬ readFirstNumber(first) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ first
 │   │   │ │   └── type: @scope/jsii-calc-lib.MyFirstStruct
 │   │   │ └── returns: number
 │   │   └─┬ structLiteral property (experimental)
 │   │     ├── immutable
 │   │     └── type: @scope/jsii-calc-lib.StructWithOnlyOptionals
 │   ├─┬ class GreetingAugmenter (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ betterGreeting(friendly) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ └─┬ friendly
 │   │     │   └── type: @scope/jsii-calc-lib.IFriendly
 │   │     └── returns: string
 │   ├─┬ class ImplementInternalInterface (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ prop property (experimental)
 │   │     └── type: string
 │   ├─┬ class ImplementsInterfaceWithInternal (experimental)
 │   │ ├── interfaces: IInterfaceWithInternal
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ visible() method (experimental)
 │   │     └── returns: void
 │   ├─┬ class ImplementsInterfaceWithInternalSubclass (experimental)
 │   │ ├── base: ImplementsInterfaceWithInternal
 │   │ └─┬ members
 │   │   └── <initializer>() initializer (experimental)
 │   ├─┬ class ImplementsPrivateInterface (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ private property (experimental)
 │   │     └── type: string
 │   ├─┬ class InbetweenClass (experimental)
 │   │ ├── base: PublicClass
 │   │ ├── interfaces: IPublicInterface2
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ ciao() method (experimental)
 │   │     └── returns: string
 │   ├─┬ class Foo (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ bar property (experimental)
 │   │     └── type: Optional<string>
 │   ├─┬ class JSII417Derived (experimental)
 │   │ ├── base: JSII417PublicBaseOfBase
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(property) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   └─┬ property
 │   │   │     └── type: string
 │   │   ├─┬ bar() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ baz() method (experimental)
 │   │   │ └── returns: void
 │   │   └─┬ property property (experimental)
 │   │     ├── immutable
 │   │     ├── protected
 │   │     └── type: string
 │   ├─┬ class JSII417PublicBaseOfBase (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ static makeInstance() method (experimental)
 │   │   │ ├── static
 │   │   │ └── returns: jsii-calc.JSII417PublicBaseOfBase
 │   │   ├─┬ foo() method (experimental)
 │   │   │ └── returns: void
 │   │   └─┬ hasRoot property (experimental)
 │   │     ├── immutable
 │   │     └── type: boolean
 │   ├─┬ class JSObjectLiteralForInterface (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ giveMeFriendly() method (experimental)
 │   │   │ └── returns: @scope/jsii-calc-lib.IFriendly
 │   │   └─┬ giveMeFriendlyGenerator() method (experimental)
 │   │     └── returns: jsii-calc.IFriendlyRandomGenerator
 │   ├─┬ class JSObjectLiteralToNative (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ returnLiteral() method (experimental)
 │   │     └── returns: jsii-calc.JSObjectLiteralToNativeClass
 │   ├─┬ class JSObjectLiteralToNativeClass (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ propA property (experimental)
 │   │   │ └── type: string
 │   │   └─┬ propB property (experimental)
 │   │     └── type: number
 │   ├─┬ class JavaReservedWords (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ abstract() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ assert() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ boolean() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ break() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ byte() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ case() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ catch() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ char() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ class() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ const() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ continue() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ default() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ do() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ double() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ else() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ enum() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ extends() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ false() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ final() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ finally() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ float() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ for() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ goto() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ if() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ implements() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ import() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ instanceof() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ int() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ interface() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ long() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ native() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ new() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ null() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ package() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ private() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ protected() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ public() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ return() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ short() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ static() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ strictfp() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ super() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ switch() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ synchronized() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ this() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ throw() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ throws() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ transient() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ true() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ try() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ void() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ volatile() method (experimental)
 │   │   │ └── returns: void
 │   │   └─┬ while property (experimental)
 │   │     └── type: string
 │   ├─┬ class Jsii487Derived (experimental)
 │   │ ├── interfaces: IJsii487External2,IJsii487External
 │   │ └─┬ members
 │   │   └── <initializer>() initializer (experimental)
 │   ├─┬ class Jsii496Derived (experimental)
 │   │ ├── interfaces: IJsii496
 │   │ └─┬ members
 │   │   └── <initializer>() initializer (experimental)
 │   ├─┬ class JsiiAgent (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ static jsiiAgent property (experimental)
 │   │     ├── immutable
 │   │     ├── static
 │   │     └── type: Optional<string>
 │   ├─┬ class Multiply (experimental)
 │   │ ├── base: BinaryOperation
 │   │ ├── interfaces: IFriendlier,IRandomNumberGenerator
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(lhs,rhs) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   ├─┬ lhs
 │   │   │   │ └── type: @scope/jsii-calc-lib.Value
 │   │   │   └─┬ rhs
 │   │   │     └── type: @scope/jsii-calc-lib.Value
 │   │   ├─┬ farewell() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ goodbye() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ next() method (experimental)
 │   │   │ └── returns: number
 │   │   ├─┬ toString() method (experimental)
 │   │   │ └── returns: string
 │   │   └─┬ value property (experimental)
 │   │     ├── immutable
 │   │     └── type: number
 │   ├─┬ class Negate (experimental)
 │   │ ├── base: UnaryOperation
 │   │ ├── interfaces: IFriendlier
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(operand) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   └─┬ operand
 │   │   │     └── type: @scope/jsii-calc-lib.Value
 │   │   ├─┬ farewell() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ goodbye() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ hello() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ toString() method (experimental)
 │   │   │ └── returns: string
 │   │   └─┬ value property (experimental)
 │   │     ├── immutable
 │   │     └── type: number
 │   ├─┬ class NodeStandardLibrary (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ cryptoSha256() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ fsReadFile() method (experimental)
 │   │   │ └── returns: Promise<string>
 │   │   ├─┬ fsReadFileSync() method (experimental)
 │   │   │ └── returns: string
 │   │   └─┬ osPlatform property (experimental)
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ class NullShouldBeTreatedAsUndefined (experimental)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(_param1,optional) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   ├─┬ _param1
 │   │   │   │ └── type: string
 │   │   │   └─┬ optional
 │   │   │     └── type: any
 │   │   ├─┬ giveMeUndefined(value) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ value
 │   │   │ │   └── type: any
 │   │   │ └── returns: void
 │   │   ├─┬ giveMeUndefinedInsideAnObject(input) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ input
 │   │   │ │   └── type: jsii-calc.NullShouldBeTreatedAsUndefinedData
 │   │   │ └── returns: void
 │   │   ├─┬ verifyPropertyIsUndefined() method (experimental)
 │   │   │ └── returns: void
 │   │   └─┬ changeMeToUndefined property (experimental)
 │   │     └── type: Optional<string>
 │   ├─┬ class NumberGenerator (experimental)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(generator) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   └─┬ generator
 │   │   │     └── type: jsii-calc.IRandomNumberGenerator
 │   │   ├─┬ isSameGenerator(gen) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ gen
 │   │   │ │   └── type: jsii-calc.IRandomNumberGenerator
 │   │   │ └── returns: boolean
 │   │   ├─┬ nextTimes100() method (experimental)
 │   │   │ └── returns: number
 │   │   └─┬ generator property (experimental)
 │   │     └── type: jsii-calc.IRandomNumberGenerator
 │   ├─┬ class ObjectRefsInCollections (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ sumFromArray(values) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ values
 │   │   │ │   └── type: Array<@scope/jsii-calc-lib.Value>
 │   │   │ └── returns: number
 │   │   └─┬ sumFromMap(values) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ └─┬ values
 │   │     │   └── type: Map<string => @scope/jsii-calc-lib.Value>
 │   │     └── returns: number
 │   ├─┬ class Old (deprecated)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (deprecated)
 │   │   └─┬ doAThing() method (deprecated)
 │   │     └── returns: void
 │   ├─┬ class OptionalConstructorArgument (experimental)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(arg1,arg2,arg3) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   ├─┬ arg1
 │   │   │   │ └── type: number
 │   │   │   ├─┬ arg2
 │   │   │   │ └── type: string
 │   │   │   └─┬ arg3
 │   │   │     └── type: Optional<date>
 │   │   ├─┬ arg1 property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: number
 │   │   ├─┬ arg2 property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: string
 │   │   └─┬ arg3 property (experimental)
 │   │     ├── immutable
 │   │     └── type: Optional<date>
 │   ├─┬ class OptionalStructConsumer (experimental)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(optionalStruct) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   └─┬ optionalStruct
 │   │   │     └── type: Optional<jsii-calc.OptionalStruct>
 │   │   ├─┬ parameterWasUndefined property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: boolean
 │   │   └─┬ fieldValue property (experimental)
 │   │     ├── immutable
 │   │     └── type: Optional<string>
 │   ├─┬ class OverrideReturnsObject (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ test(obj) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ └─┬ obj
 │   │     │   └── type: jsii-calc.IReturnsNumber
 │   │     └── returns: number
 │   ├─┬ class PartiallyInitializedThisConsumer (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ consumePartiallyInitializedThis(obj,dt,ev) method (experimental)
 │   │     ├── abstract
 │   │     ├─┬ parameters
 │   │     │ ├─┬ obj
 │   │     │ │ └── type: jsii-calc.ConstructorPassesThisOut
 │   │     │ ├─┬ dt
 │   │     │ │ └── type: date
 │   │     │ └─┬ ev
 │   │     │   └── type: jsii-calc.AllTypesEnum
 │   │     └── returns: string
 │   ├─┬ class Polymorphism (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ sayHello(friendly) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ └─┬ friendly
 │   │     │   └── type: @scope/jsii-calc-lib.IFriendly
 │   │     └── returns: string
 │   ├─┬ class Power (experimental)
 │   │ ├── base: CompositeOperation
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(base,pow) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   ├─┬ base
 │   │   │   │ └── type: @scope/jsii-calc-lib.Value
 │   │   │   └─┬ pow
 │   │   │     └── type: @scope/jsii-calc-lib.Value
 │   │   ├─┬ base property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: @scope/jsii-calc-lib.Value
 │   │   ├─┬ expression property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: @scope/jsii-calc-lib.Value
 │   │   └─┬ pow property (experimental)
 │   │     ├── immutable
 │   │     └── type: @scope/jsii-calc-lib.Value
 │   ├─┬ class PublicClass (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ hello() method (experimental)
 │   │     └── returns: void
 │   ├─┬ class PythonReservedWords (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ and() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ as() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ assert() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ async() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ await() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ break() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ class() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ continue() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ def() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ del() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ elif() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ else() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ except() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ finally() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ for() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ from() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ global() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ if() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ import() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ in() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ is() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ lambda() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ nonlocal() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ not() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ or() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ pass() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ raise() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ return() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ try() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ while() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ with() method (experimental)
 │   │   │ └── returns: void
 │   │   └─┬ yield() method (experimental)
 │   │     └── returns: void
 │   ├─┬ class ReferenceEnumFromScopedPackage (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ loadFoo() method (experimental)
 │   │   │ └── returns: Optional<@scope/jsii-calc-lib.EnumFromScopedModule>
 │   │   ├─┬ saveFoo(value) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ value
 │   │   │ │   └── type: @scope/jsii-calc-lib.EnumFromScopedModule
 │   │   │ └── returns: void
 │   │   └─┬ foo property (experimental)
 │   │     └── type: Optional<@scope/jsii-calc-lib.EnumFromScopedModule>
 │   ├─┬ class ReturnsPrivateImplementationOfInterface (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ privateImplementation property (experimental)
 │   │     ├── immutable
 │   │     └── type: jsii-calc.IPrivatelyImplemented
 │   ├─┬ class RuntimeTypeChecking (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ methodWithDefaultedArguments(arg1,arg2,arg3) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ ├─┬ arg1
 │   │   │ │ │ └── type: Optional<number>
 │   │   │ │ ├─┬ arg2
 │   │   │ │ │ └── type: Optional<string>
 │   │   │ │ └─┬ arg3
 │   │   │ │   └── type: Optional<date>
 │   │   │ └── returns: void
 │   │   ├─┬ methodWithOptionalAnyArgument(arg) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ arg
 │   │   │ │   └── type: any
 │   │   │ └── returns: void
 │   │   └─┬ methodWithOptionalArguments(arg1,arg2,arg3) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ ├─┬ arg1
 │   │     │ │ └── type: number
 │   │     │ ├─┬ arg2
 │   │     │ │ └── type: string
 │   │     │ └─┬ arg3
 │   │     │   └── type: Optional<date>
 │   │     └── returns: void
 │   ├─┬ class SingleInstanceTwoTypes (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ interface1() method (experimental)
 │   │   │ └── returns: jsii-calc.InbetweenClass
 │   │   └─┬ interface2() method (experimental)
 │   │     └── returns: jsii-calc.IPublicInterface
 │   ├─┬ class SingletonInt (experimental)
 │   │ └─┬ members
 │   │   └─┬ isSingletonInt(value) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ └─┬ value
 │   │     │   └── type: number
 │   │     └── returns: boolean
 │   ├─┬ class SingletonString (experimental)
 │   │ └─┬ members
 │   │   └─┬ isSingletonString(value) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ └─┬ value
 │   │     │   └── type: string
 │   │     └── returns: boolean
 │   ├─┬ class StableClass (stable)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(readonlyString,mutableNumber) initializer (stable)
 │   │   │ └─┬ parameters
 │   │   │   ├─┬ readonlyString
 │   │   │   │ └── type: string
 │   │   │   └─┬ mutableNumber
 │   │   │     └── type: Optional<number>
 │   │   ├─┬ method() method (stable)
 │   │   │ └── returns: void
 │   │   ├─┬ readonlyProperty property (stable)
 │   │   │ ├── immutable
 │   │   │ └── type: string
 │   │   └─┬ mutableProperty property (stable)
 │   │     └── type: Optional<number>
 │   ├─┬ class StaticContext (experimental)
 │   │ └─┬ members
 │   │   ├─┬ static canAccessStaticContext() method (experimental)
 │   │   │ ├── static
 │   │   │ └── returns: boolean
 │   │   └─┬ static staticVariable property (experimental)
 │   │     ├── static
 │   │     └── type: boolean
 │   ├─┬ class Statics (experimental)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(value) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   └─┬ value
 │   │   │     └── type: string
 │   │   ├─┬ static staticMethod(name) method (experimental)
 │   │   │ ├── static
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ name
 │   │   │ │   └── type: string
 │   │   │ └── returns: string
 │   │   ├─┬ justMethod() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ static BAR property (experimental)
 │   │   │ ├── const
 │   │   │ ├── immutable
 │   │   │ ├── static
 │   │   │ └── type: number
 │   │   ├─┬ static ConstObj property (experimental)
 │   │   │ ├── const
 │   │   │ ├── immutable
 │   │   │ ├── static
 │   │   │ └── type: jsii-calc.DoubleTrouble
 │   │   ├─┬ static Foo property (experimental)
 │   │   │ ├── const
 │   │   │ ├── immutable
 │   │   │ ├── static
 │   │   │ └── type: string
 │   │   ├─┬ static zooBar property (experimental)
 │   │   │ ├── const
 │   │   │ ├── immutable
 │   │   │ ├── static
 │   │   │ └── type: Map<string => string>
 │   │   ├─┬ static instance property (experimental)
 │   │   │ ├── static
 │   │   │ └── type: jsii-calc.Statics
 │   │   ├─┬ static nonConstStatic property (experimental)
 │   │   │ ├── static
 │   │   │ └── type: number
 │   │   └─┬ value property (experimental)
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ class StripInternal (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ youSeeMe property (experimental)
 │   │     └── type: string
 │   ├─┬ class StructPassing
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer
 │   │   ├─┬ static howManyVarArgsDidIPass(_positional,inputs) method
 │   │   │ ├── static
 │   │   │ ├── variadic
 │   │   │ ├─┬ parameters
 │   │   │ │ ├─┬ _positional
 │   │   │ │ │ └── type: number
 │   │   │ │ └─┬ inputs
 │   │   │ │   ├── type: jsii-calc.TopLevelStruct
 │   │   │ │   └── variadic
 │   │   │ └── returns: number
 │   │   └─┬ static roundTrip(_positional,input) method
 │   │     ├── static
 │   │     ├─┬ parameters
 │   │     │ ├─┬ _positional
 │   │     │ │ └── type: number
 │   │     │ └─┬ input
 │   │     │   └── type: jsii-calc.TopLevelStruct
 │   │     └── returns: jsii-calc.TopLevelStruct
 │   ├─┬ class Sum (experimental)
 │   │ ├── base: CompositeOperation
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ expression property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: @scope/jsii-calc-lib.Value
 │   │   └─┬ parts property (experimental)
 │   │     └── type: Array<@scope/jsii-calc-lib.Value>
 │   ├─┬ class SyncVirtualMethods (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ callerIsAsync() method (experimental)
 │   │   │ └── returns: Promise<number>
 │   │   ├─┬ callerIsMethod() method (experimental)
 │   │   │ └── returns: number
 │   │   ├─┬ modifyOtherProperty(value) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ value
 │   │   │ │   └── type: string
 │   │   │ └── returns: void
 │   │   ├─┬ modifyValueOfTheProperty(value) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ value
 │   │   │ │   └── type: string
 │   │   │ └── returns: void
 │   │   ├─┬ readA() method (experimental)
 │   │   │ └── returns: number
 │   │   ├─┬ retrieveOtherProperty() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ retrieveReadOnlyProperty() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ retrieveValueOfTheProperty() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ virtualMethod(n) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ n
 │   │   │ │   └── type: number
 │   │   │ └── returns: number
 │   │   ├─┬ writeA(value) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ value
 │   │   │ │   └── type: number
 │   │   │ └── returns: void
 │   │   ├─┬ readonlyProperty property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: string
 │   │   ├─┬ a property (experimental)
 │   │   │ └── type: number
 │   │   ├─┬ callerIsProperty property (experimental)
 │   │   │ └── type: number
 │   │   ├─┬ otherProperty property (experimental)
 │   │   │ └── type: string
 │   │   ├─┬ theProperty property (experimental)
 │   │   │ └── type: string
 │   │   └─┬ valueOfOtherProperty property (experimental)
 │   │     └── type: string
 │   ├─┬ class Thrower (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ throwError() method (experimental)
 │   │     └── returns: void
 │   ├─┬ class UnaryOperation (experimental)
 │   │ ├── base: Operation
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(operand) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   └─┬ operand
 │   │   │     └── type: @scope/jsii-calc-lib.Value
 │   │   └─┬ operand property (experimental)
 │   │     ├── immutable
 │   │     └── type: @scope/jsii-calc-lib.Value
 │   ├─┬ class UseBundledDependency (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ value() method (experimental)
 │   │     └── returns: any
 │   ├─┬ class UseCalcBase (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   └─┬ hello() method (experimental)
 │   │     └── returns: @scope/jsii-calc-base.Base
 │   ├─┬ class UsesInterfaceWithProperties (experimental)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(obj) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   └─┬ obj
 │   │   │     └── type: jsii-calc.IInterfaceWithProperties
 │   │   ├─┬ justRead() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ readStringAndNumber(ext) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ ext
 │   │   │ │   └── type: jsii-calc.IInterfaceWithPropertiesExtension
 │   │   │ └── returns: string
 │   │   ├─┬ writeAndRead(value) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ value
 │   │   │ │   └── type: string
 │   │   │ └── returns: string
 │   │   └─┬ obj property (experimental)
 │   │     ├── immutable
 │   │     └── type: jsii-calc.IInterfaceWithProperties
 │   ├─┬ class VariadicMethod (experimental)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(prefix) initializer (experimental)
 │   │   │ ├── variadic
 │   │   │ └─┬ parameters
 │   │   │   └─┬ prefix
 │   │   │     ├── type: number
 │   │   │     └── variadic
 │   │   └─┬ asArray(first,others) method (experimental)
 │   │     ├── variadic
 │   │     ├─┬ parameters
 │   │     │ ├─┬ first
 │   │     │ │ └── type: number
 │   │     │ └─┬ others
 │   │     │   ├── type: number
 │   │     │   └── variadic
 │   │     └── returns: Array<number>
 │   ├─┬ class VirtualMethodPlayground (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ overrideMeAsync(index) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ index
 │   │   │ │   └── type: number
 │   │   │ └── returns: Promise<number>
 │   │   ├─┬ overrideMeSync(index) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ index
 │   │   │ │   └── type: number
 │   │   │ └── returns: number
 │   │   ├─┬ parallelSumAsync(count) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ count
 │   │   │ │   └── type: number
 │   │   │ └── returns: Promise<number>
 │   │   ├─┬ serialSumAsync(count) method (experimental)
 │   │   │ ├─┬ parameters
 │   │   │ │ └─┬ count
 │   │   │ │   └── type: number
 │   │   │ └── returns: Promise<number>
 │   │   └─┬ sumSync(count) method (experimental)
 │   │     ├─┬ parameters
 │   │     │ └─┬ count
 │   │     │   └── type: number
 │   │     └── returns: number
 │   ├─┬ class VoidCallback (experimental)
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ callMe() method (experimental)
 │   │   │ └── returns: void
 │   │   ├─┬ overrideMe() method (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── protected
 │   │   │ └── returns: void
 │   │   └─┬ methodWasCalled property (experimental)
 │   │     ├── immutable
 │   │     └── type: boolean
 │   ├─┬ class WithPrivatePropertyInConstructor (experimental)
 │   │ └─┬ members
 │   │   ├─┬ <initializer>(privateField) initializer (experimental)
 │   │   │ └─┬ parameters
 │   │   │   └─┬ privateField
 │   │   │     └── type: Optional<string>
 │   │   └─┬ success property (experimental)
 │   │     ├── immutable
 │   │     └── type: boolean
 │   ├─┬ class CompositeOperation (experimental)
 │   │ ├── base: Operation
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer (experimental)
 │   │   ├─┬ toString() method (experimental)
 │   │   │ └── returns: string
 │   │   ├─┬ expression property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: @scope/jsii-calc-lib.Value
 │   │   ├─┬ value property (experimental)
 │   │   │ ├── immutable
 │   │   │ └── type: number
 │   │   ├─┬ decorationPostfixes property (experimental)
 │   │   │ └── type: Array<string>
 │   │   ├─┬ decorationPrefixes property (experimental)
 │   │   │ └── type: Array<string>
 │   │   └─┬ stringStyle property (experimental)
 │   │     └── type: jsii-calc.composition.CompositeOperation.CompositionStringStyle
 │   ├─┬ interface CalculatorProps (experimental)
 │   │ └─┬ members
 │   │   ├─┬ initialValue property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: Optional<number>
 │   │   └─┬ maximumValue property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: Optional<number>
 │   ├─┬ interface DeprecatedStruct (deprecated)
 │   │ └─┬ members
 │   │   └─┬ readonlyProperty property (deprecated)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ interface DerivedStruct (experimental)
 │   │ ├─┬ interfaces
 │   │ │ └── MyFirstStruct
 │   │ └─┬ members
 │   │   ├─┬ anotherRequired property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: date
 │   │   ├─┬ bool property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: boolean
 │   │   ├─┬ nonPrimitive property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: jsii-calc.DoubleTrouble
 │   │   ├─┬ anotherOptional property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: Optional<Map<string => @scope/jsii-calc-lib.Value>>
 │   │   ├─┬ optionalAny property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: any
 │   │   └─┬ optionalArray property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: Optional<Array<string>>
 │   ├─┬ interface EraseUndefinedHashValuesOptions (experimental)
 │   │ └─┬ members
 │   │   ├─┬ option1 property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: Optional<string>
 │   │   └─┬ option2 property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: Optional<string>
 │   ├─┬ interface ExperimentalStruct (experimental)
 │   │ └─┬ members
 │   │   └─┬ readonlyProperty property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ interface ExtendsInternalInterface (experimental)
 │   │ └─┬ members
 │   │   ├─┬ boom property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: boolean
 │   │   └─┬ prop property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ interface Greetee (experimental)
 │   │ └─┬ members
 │   │   └─┬ name property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: Optional<string>
 │   ├─┬ interface IAnotherPublicInterface (experimental)
 │   │ └─┬ members
 │   │   └─┬ a property (experimental)
 │   │     ├── abstract
 │   │     └── type: string
 │   ├─┬ interface IDeprecatedInterface (deprecated)
 │   │ └─┬ members
 │   │   ├─┬ method() method (deprecated)
 │   │   │ ├── abstract
 │   │   │ └── returns: void
 │   │   └─┬ mutableProperty property (deprecated)
 │   │     ├── abstract
 │   │     └── type: Optional<number>
 │   ├─┬ interface IExperimentalInterface (experimental)
 │   │ └─┬ members
 │   │   ├─┬ method() method (experimental)
 │   │   │ ├── abstract
 │   │   │ └── returns: void
 │   │   └─┬ mutableProperty property (experimental)
 │   │     ├── abstract
 │   │     └── type: Optional<number>
 │   ├─┬ interface IExtendsPrivateInterface (experimental)
 │   │ └─┬ members
 │   │   ├─┬ moreThings property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: Array<string>
 │   │   └─┬ private property (experimental)
 │   │     ├── abstract
 │   │     └── type: string
 │   ├─┬ interface IFriendlier (experimental)
 │   │ ├─┬ interfaces
 │   │ │ └── IFriendly
 │   │ └─┬ members
 │   │   ├─┬ farewell() method (experimental)
 │   │   │ ├── abstract
 │   │   │ └── returns: string
 │   │   └─┬ goodbye() method (experimental)
 │   │     ├── abstract
 │   │     └── returns: string
 │   ├─┬ interface IFriendlyRandomGenerator (experimental)
 │   │ ├─┬ interfaces
 │   │ │ ├── IRandomNumberGenerator
 │   │ │ └── IFriendly
 │   │ └── members
 │   ├─┬ interface IInterfaceImplementedByAbstractClass (experimental)
 │   │ └─┬ members
 │   │   └─┬ propFromInterface property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ interface IInterfaceThatShouldNotBeADataType (experimental)
 │   │ ├─┬ interfaces
 │   │ │ └── IInterfaceWithMethods
 │   │ └─┬ members
 │   │   └─┬ otherValue property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ interface IInterfaceWithInternal (experimental)
 │   │ └─┬ members
 │   │   └─┬ visible() method (experimental)
 │   │     ├── abstract
 │   │     └── returns: void
 │   ├─┬ interface IInterfaceWithMethods (experimental)
 │   │ └─┬ members
 │   │   ├─┬ doThings() method (experimental)
 │   │   │ ├── abstract
 │   │   │ └── returns: void
 │   │   └─┬ value property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ interface IInterfaceWithOptionalMethodArguments (experimental)
 │   │ └─┬ members
 │   │   └─┬ hello(arg1,arg2) method (experimental)
 │   │     ├── abstract
 │   │     ├─┬ parameters
 │   │     │ ├─┬ arg1
 │   │     │ │ └── type: string
 │   │     │ └─┬ arg2
 │   │     │   └── type: Optional<number>
 │   │     └── returns: void
 │   ├─┬ interface IInterfaceWithProperties (experimental)
 │   │ └─┬ members
 │   │   ├─┬ readOnlyString property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: string
 │   │   └─┬ readWriteString property (experimental)
 │   │     ├── abstract
 │   │     └── type: string
 │   ├─┬ interface IInterfaceWithPropertiesExtension (experimental)
 │   │ ├─┬ interfaces
 │   │ │ └── IInterfaceWithProperties
 │   │ └─┬ members
 │   │   └─┬ foo property (experimental)
 │   │     ├── abstract
 │   │     └── type: number
 │   ├─┬ interface IJSII417Derived (experimental)
 │   │ ├─┬ interfaces
 │   │ │ └── IJSII417PublicBaseOfBase
 │   │ └─┬ members
 │   │   ├─┬ bar() method (experimental)
 │   │   │ ├── abstract
 │   │   │ └── returns: void
 │   │   ├─┬ baz() method (experimental)
 │   │   │ ├── abstract
 │   │   │ └── returns: void
 │   │   └─┬ property property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ interface IJSII417PublicBaseOfBase (experimental)
 │   │ └─┬ members
 │   │   ├─┬ foo() method (experimental)
 │   │   │ ├── abstract
 │   │   │ └── returns: void
 │   │   └─┬ hasRoot property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: boolean
 │   ├─┬ interface IJsii487External (experimental)
 │   │ └── members
 │   ├─┬ interface IJsii487External2 (experimental)
 │   │ └── members
 │   ├─┬ interface IJsii496 (experimental)
 │   │ └── members
 │   ├─┬ interface IMutableObjectLiteral (experimental)
 │   │ └─┬ members
 │   │   └─┬ value property (experimental)
 │   │     ├── abstract
 │   │     └── type: string
 │   ├─┬ interface INonInternalInterface (experimental)
 │   │ ├─┬ interfaces
 │   │ │ └── IAnotherPublicInterface
 │   │ └─┬ members
 │   │   ├─┬ b property (experimental)
 │   │   │ ├── abstract
 │   │   │ └── type: string
 │   │   └─┬ c property (experimental)
 │   │     ├── abstract
 │   │     └── type: string
 │   ├─┬ interface IPrivatelyImplemented (experimental)
 │   │ └─┬ members
 │   │   └─┬ success property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: boolean
 │   ├─┬ interface IPublicInterface (experimental)
 │   │ └─┬ members
 │   │   └─┬ bye() method (experimental)
 │   │     ├── abstract
 │   │     └── returns: string
 │   ├─┬ interface IPublicInterface2 (experimental)
 │   │ └─┬ members
 │   │   └─┬ ciao() method (experimental)
 │   │     ├── abstract
 │   │     └── returns: string
 │   ├─┬ interface IRandomNumberGenerator (experimental)
 │   │ └─┬ members
 │   │   └─┬ next() method (experimental)
 │   │     ├── abstract
 │   │     └── returns: number
 │   ├─┬ interface IReturnsNumber (experimental)
 │   │ └─┬ members
 │   │   ├─┬ obtainNumber() method (experimental)
 │   │   │ ├── abstract
 │   │   │ └── returns: @scope/jsii-calc-lib.IDoublable
 │   │   └─┬ numberProp property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: @scope/jsii-calc-lib.Number
 │   ├─┬ interface IStableInterface (stable)
 │   │ └─┬ members
 │   │   ├─┬ method() method (stable)
 │   │   │ ├── abstract
 │   │   │ └── returns: void
 │   │   └─┬ mutableProperty property (stable)
 │   │     ├── abstract
 │   │     └── type: Optional<number>
 │   ├─┬ interface ImplictBaseOfBase (experimental)
 │   │ ├─┬ interfaces
 │   │ │ └── BaseProps
 │   │ └─┬ members
 │   │   └─┬ goo property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: date
 │   ├─┬ interface Hello (experimental)
 │   │ └─┬ members
 │   │   └─┬ foo property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: number
 │   ├─┬ interface Hello (experimental)
 │   │ └─┬ members
 │   │   └─┬ foo property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: number
 │   ├─┬ interface LoadBalancedFargateServiceProps (experimental)
 │   │ └─┬ members
 │   │   ├─┬ containerPort property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: Optional<number>
 │   │   ├─┬ cpu property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: Optional<string>
 │   │   ├─┬ memoryMiB property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: Optional<string>
 │   │   ├─┬ publicLoadBalancer property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: Optional<boolean>
 │   │   └─┬ publicTasks property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: Optional<boolean>
 │   ├─┬ interface NullShouldBeTreatedAsUndefinedData (experimental)
 │   │ └─┬ members
 │   │   ├─┬ arrayWithThreeElementsAndUndefinedAsSecondArgument property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: Array<any>
 │   │   └─┬ thisShouldBeUndefined property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: any
 │   ├─┬ interface OptionalStruct (experimental)
 │   │ └─┬ members
 │   │   └─┬ field property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: Optional<string>
 │   ├─┬ interface SecondLevelStruct (experimental)
 │   │ └─┬ members
 │   │   ├─┬ deeperRequiredProp property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: string
 │   │   └─┬ deeperOptionalProp property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: Optional<string>
 │   ├─┬ interface StableStruct (stable)
 │   │ └─┬ members
 │   │   └─┬ readonlyProperty property (stable)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: string
 │   ├─┬ interface TopLevelStruct (experimental)
 │   │ └─┬ members
 │   │   ├─┬ required property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: string
 │   │   ├─┬ secondLevel property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: number | jsii-calc.SecondLevelStruct
 │   │   └─┬ optional property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: Optional<string>
 │   ├─┬ interface UnionProperties (experimental)
 │   │ └─┬ members
 │   │   ├─┬ bar property (experimental)
 │   │   │ ├── abstract
 │   │   │ ├── immutable
 │   │   │ └── type: string | number | jsii-calc.AllTypes
 │   │   └─┬ foo property (experimental)
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: Optional<string | number>
 │   ├─┬ enum AllTypesEnum (experimental)
 │   │ ├── MY_ENUM_VALUE (experimental)
 │   │ ├── YOUR_ENUM_VALUE (experimental)
 │   │ └── THIS_IS_GREAT (experimental)
 │   ├─┬ enum DeprecatedEnum (deprecated)
 │   │ ├── OPTION_A (deprecated)
 │   │ └── OPTION_B (deprecated)
 │   ├─┬ enum ExperimentalEnum (experimental)
 │   │ ├── OPTION_A (experimental)
 │   │ └── OPTION_B (experimental)
 │   ├─┬ enum SingletonIntEnum (experimental)
 │   │ └── SINGLETON_INT (experimental)
 │   ├─┬ enum SingletonStringEnum (experimental)
 │   │ └── SINGLETON_STRING (experimental)
 │   ├─┬ enum StableEnum (stable)
 │   │ ├── OPTION_A (stable)
 │   │ └── OPTION_B (stable)
 │   ├─┬ enum StringEnum (experimental)
 │   │ ├── A (experimental)
 │   │ ├── B (experimental)
 │   │ └── C (experimental)
 │   └─┬ enum CompositionStringStyle (experimental)
 │     ├── NORMAL (experimental)
 │     └── DECORATED (experimental)
 ├─┬ @scope/jsii-calc-base
 │ ├─┬ dependencies
 │ │ └── @scope/jsii-calc-base-of-base
 │ └─┬ types
 │   ├─┬ class Base
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer
 │   │   └─┬ typeName() method
 │   │     └── returns: any
 │   ├─┬ interface BaseProps
 │   │ ├─┬ interfaces
 │   │ │ └── VeryBaseProps
 │   │ └─┬ members
 │   │   └─┬ bar property
 │   │     ├── abstract
 │   │     ├── immutable
 │   │     └── type: string
 │   └─┬ interface IBaseInterface
 │     ├─┬ interfaces
 │     │ └── IVeryBaseInterface
 │     └─┬ members
 │       └─┬ bar() method
 │         ├── abstract
 │         └── returns: void
 ├─┬ @scope/jsii-calc-base-of-base
 │ └─┬ types
 │   ├─┬ class Very
 │   │ └─┬ members
 │   │   ├── <initializer>() initializer
 │   │   └─┬ hey() method
 │   │     └── returns: number
 │   ├─┬ interface IVeryBaseInterface
 │   │ └─┬ members
 │   │   └─┬ foo() method
 │   │     ├── abstract
 │   │     └── returns: void
 │   └─┬ interface VeryBaseProps
 │     └─┬ members
 │       └─┬ foo property
 │         ├── abstract
 │         ├── immutable
 │         └── type: @scope/jsii-calc-base-of-base.Very
 └─┬ @scope/jsii-calc-lib
   ├─┬ dependencies
   │ └── @scope/jsii-calc-base
   └─┬ types
     ├─┬ class Number (deprecated)
     │ ├── base: Value
     │ ├── interfaces: IDoublable
     │ └─┬ members
     │   ├─┬ <initializer>(value) initializer (deprecated)
     │   │ └─┬ parameters
     │   │   └─┬ value
     │   │     └── type: number
     │   ├─┬ doubleValue property (deprecated)
     │   │ ├── immutable
     │   │ └── type: number
     │   └─┬ value property (deprecated)
     │     ├── immutable
     │     └── type: number
     ├─┬ class Operation (deprecated)
     │ ├── base: Value
     │ └─┬ members
     │   ├── <initializer>() initializer (deprecated)
     │   └─┬ toString() method (deprecated)
     │     ├── abstract
     │     └── returns: string
     ├─┬ class Value (deprecated)
     │ ├── base: Base
     │ └─┬ members
     │   ├── <initializer>() initializer (deprecated)
     │   ├─┬ toString() method (deprecated)
     │   │ └── returns: string
     │   └─┬ value property (deprecated)
     │     ├── abstract
     │     ├── immutable
     │     └── type: number
     ├─┬ interface IDoublable (deprecated)
     │ └─┬ members
     │   └─┬ doubleValue property (deprecated)
     │     ├── abstract
     │     ├── immutable
     │     └── type: number
     ├─┬ interface IFriendly (deprecated)
     │ └─┬ members
     │   └─┬ hello() method (deprecated)
     │     ├── abstract
     │     └── returns: string
     ├─┬ interface IThreeLevelsInterface (deprecated)
     │ ├─┬ interfaces
     │ │ └── IBaseInterface
     │ └─┬ members
     │   └─┬ baz() method (deprecated)
     │     ├── abstract
     │     └── returns: void
     ├─┬ interface MyFirstStruct (deprecated)
     │ └─┬ members
     │   ├─┬ anumber property (deprecated)
     │   │ ├── abstract
     │   │ ├── immutable
     │   │ └── type: number
     │   ├─┬ astring property (deprecated)
     │   │ ├── abstract
     │   │ ├── immutable
     │   │ └── type: string
     │   └─┬ firstOptional property (deprecated)
     │     ├── abstract
     │     ├── immutable
     │     └── type: Optional<Array<string>>
     ├─┬ interface StructWithOnlyOptionals (deprecated)
     │ └─┬ members
     │   ├─┬ optional1 property (deprecated)
     │   │ ├── abstract
     │   │ ├── immutable
     │   │ └── type: Optional<string>
     │   ├─┬ optional2 property (deprecated)
     │   │ ├── abstract
     │   │ ├── immutable
     │   │ └── type: Optional<number>
     │   └─┬ optional3 property (deprecated)
     │     ├── abstract
     │     ├── immutable
     │     └── type: Optional<boolean>
     └─┬ enum EnumFromScopedModule (deprecated)
       ├── VALUE1 (deprecated)
       └── VALUE2 (deprecated)
