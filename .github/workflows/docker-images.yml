# Workflows pertaining to the jsii/superchain Docker image
name: Docker Images

on:
  pull_request:
    branches: [main, release]
  push:
    branches: [main, release]

env:
  DOCKER_BUILDKIT: 1

jobs:
  superchain:
    name: jsii/superchain
    permissions:
      contents: read
      id-token: write # Necessary for OIDC federation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['14', '16', '18']
    env:
      # Node version whose images will be aliased without the -nodeXX segment
      DEFAULT_NODE_MAJOR_VERSION: 14
    steps:
      - name: Check out
        uses: actions/checkout@v3

      # Determine if we should run the validation or not
      - name: Should this run?
        id: should-run
        run: |-
          if [ "${{ github.event_name }}" = "push" ]; then
            echo '‚èØ Triggered by "push" event'
            echo "::set-output name=result::true"
          elif [ "${{ github.base_ref }}" = "release" ]; then
            echo '‚èØ Triggered by "pull_request" event against "release"'
            echo "::set-output name=result::true"
          else
            # Fetch the base and head refs from origin so we can safely diff 'em
            git fetch --depth=1 --quiet origin ${{ github.base_ref }}
            # Otherwise, only run if the Dockerfile changed
            changed=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
            if grep Dockerfile <<< "${changed}" ; then
              echo '‚èØ Dockerfile changed'
              echo "::set-output name=result::true"
            else
              if grep '.github/workflows/docker-images.yml' <<< "${changed}" ; then
                echo '‚èØ docker-images workflow changed'
                echo "::set-output name=result::true"
              else
                echo '‚è≠ Dockerfile not changed'
                echo "::set-output name=result::false"
              fi
            fi
          fi

      # Check if federation into AWS is configured. This is necessary because
      # GitHub does not interpret ${{ secret.FOO }} within `if:` conditions...
      # See: https://github.com/actions/runner/issues/520
      - name: Check AWS federation configuration
        id: federate_to_aws
        if: steps.should-run.outputs.result == 'true'
        run: |-
          if [[ "${{ secrets.AWS_ROLE_TO_ASSUME }}" != "" ]]; then
            echo "üîë Federation into AWS is possible (AWS_ROLE_TO_ASSUME is available)"
            echo "::set-output name=enabled::true"
          else
            echo "‚ùå Federation into AWS is disabled (no AWS_ROLE_TO_ASSUME secret found)"
            echo "::set-output name=enabled::false"
          fi

      # Federate into the PR Validation AWS Account
      - name: Federate into AWS
        if: steps.should-run.outputs.result == 'true' && steps.federate_to_aws.outputs.enabled == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GHA_aws-jsii_docker-images

      # Login to ECR Public registry, so we don't get throttled at 1 TPS
      - name: Login to ECR Public
        if: steps.should-run.outputs.result == 'true' && steps.federate_to_aws.outputs.enabled == 'true'
        run: |-
          aws ecr-public get-login-password --region=us-east-1                  \
          | docker login --username AWS --password-stdin public.ecr.aws

      # We only authenticate to Docker on the 'aws/jsii' repo, as forks will not have the secret
      - name: Login to Docker Hub
        if: steps.should-run.outputs.result == 'true' && github.repository == 'aws/jsii'
        # The DOCKER_CREDENTIALS secret is expected to contain a username:token pair
        run: |-
          docker login                                                          \
            --username=$(cut -d: -f1 <<< '${{ secrets.DOCKER_CREDENTIALS }}')   \
            --password=$(cut -d: -f2 <<< '${{ secrets.DOCKER_CREDENTIALS }}')
        # Ensure we run with bash, because that's the syntax we're using here...
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up docker buildx
        id: buildx
        if: steps.should-run.outputs.result == 'true'
        uses: docker/setup-buildx-action@v2
        with:
          # Disable parallelism because IO contention makes it too slow on GitHub
          # workers...
          config-inline: |-
            [worker.oci]
              max-parallelism = 1

      # We only restore GH cache if we are not going to publish the result (i.e: PR validation)
      - name: Set up layer cache
        if: steps.should-run.outputs.result == 'true' && github.event_name != 'push'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('superchain/*') }}-${{ github.sha }}
          restore-keys: |-
            ${{ runner.os }}-buildx-${{ hashFiles('superchain/*') }}-
            ${{ runner.os }}-buildx-

      # 1 pull per second from ECR Public
      - name: Jitter the start time to avoid ECR Public throttling
        id: sleep-start
        if: steps.should-run.outputs.result == 'true' && steps.federate_to_aws.outputs.enabled != true
        run: |-
          sleep $((RANDOM % 60))

      - name: Determine build time
        id: build-time
        if: steps.should-run.outputs.result == 'true'
        run: |-
          echo "::set-output name=value::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

      - name: Build Image
        if: steps.should-run.outputs.result == 'true'
        run: |-
          docker buildx build                                                   \
            --builder ${{ steps.buildx.outputs.name }}                          \
            --platform linux/amd64,linux/arm64                                  \
            --target superchain                                                 \
            --cache-from type=local,src=/tmp/.buildx-cache                      \
            --cache-to type=local,dest=/tmp/.buildx-cache-out                   \
            --pull                                                              \
            --build-arg BUILD_TIMESTAMP="${{ steps.build-time.outputs.value }}" \
            --build-arg COMMIT_ID='${{ github.sha }}'                           \
            --build-arg NODE_MAJOR_VERSION=${{ matrix.node }}                   \
            -f superchain/Dockerfile                                            \
            .

      - name: Test Image
        if: steps.should-run.outputs.result == 'true'
        run: |-
          docker buildx build                                                   \
            --builder ${{ steps.buildx.outputs.name }}                          \
            --platform linux/amd64,linux/arm64                                  \
            --target superchain                                                 \
            --cache-from type=local,src=/tmp/.buildx-cache                      \
            --cache-to type=local,dest=/tmp/.buildx-cache                       \
            --build-arg BUILD_TIMESTAMP="${{ steps.build-time.outputs.value }}" \
            --build-arg COMMIT_ID='${{ github.sha }}'                           \
            --build-arg NODE_MAJOR_VERSION=${{ matrix.node }}                   \
            -f superchain/Dockerfile                                            \
            .

      # Only when puhsing to main/release from now on
      - name: Publish (nightly)
        if: steps.should-run.outputs.result == 'true' && github.event_name == 'push' && github.ref != 'refs/heads/release'
        run: |-
          docker buildx build                                                   \
            --builder ${{ steps.buildx.outputs.name }}                          \
            --platform linux/amd64,linux/arm64                                  \
            --target superchain                                                 \
            --cache-from type=local,src=/tmp/.buildx-cache                      \
            --cache-to type=local,dest=/tmp/.buildx-cache                       \
            --push                                                              \
            --build-arg BUILD_TIMESTAMP="${{ steps.build-time.outputs.value }}" \
            --build-arg COMMIT_ID='${{ github.sha }}'                           \
            --build-arg NODE_MAJOR_VERSION=${{ matrix.node }}                   \
            --tag "jsii/superchain:1-buster-slim-node${{ matrix.node }}-nightly"\
            -f superchain/Dockerfile                                            \
            .

          # If the current version is the default version, also tag this with the unqualified ':nightly' label
          if [[ "${{ matrix.node }}" == "$DEFAULT_NODE_MAJOR_VERSION" ]]; then
            docker buildx build                                                   \
              --builder ${{ steps.buildx.outputs.name }}                          \
              --platform linux/amd64,linux/arm64                                  \
              --target superchain                                                 \
              --cache-from type=local,src=/tmp/.buildx-cache                      \
              --cache-to type=local,dest=/tmp/.buildx-cache                       \
              --push                                                              \
              --build-arg BUILD_TIMESTAMP="${{ steps.build-time.outputs.value }}" \
              --build-arg COMMIT_ID='${{ github.sha }}'                           \
              --build-arg NODE_MAJOR_VERSION=${{ matrix.node }}                   \
              --tag "jsii/superchain:1-buster-slim-nightly"                       \
              -f superchain/Dockerfile                                            \
              .
          fi
      - name: Publish (latest)
        if: steps.should-run.outputs.result == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/release'
        run: |-
          # Alias 'nodeX-nightly's to 'nodeX', then push
          docker buildx build                                                   \
            --builder ${{ steps.buildx.outputs.name }}                          \
            --platform linux/amd64,linux/arm64                                  \
            --target superchain                                                 \
            --cache-from type=local,src=/tmp/.buildx-cache                      \
            --cache-to type=local,dest=/tmp/.buildx-cache                       \
            --push                                                              \
            --build-arg BUILD_TIMESTAMP="${{ steps.build-time.outputs.value }}" \
            --build-arg COMMIT_ID='${{ github.sha }}'                           \
            --build-arg NODE_MAJOR_VERSION=${{ matrix.node }}                   \
            --tag "jsii/superchain:1-buster-slim-node${{ matrix.node }}"        \
            -f superchain/Dockerfile                                            \
            .

          # If the current version is the default version, also tag this with the unqualified ':1-*' label
          if [[ "${{ matrix.node }}" == "$DEFAULT_NODE_MAJOR_VERSION" ]]; then
            docker buildx build                                                   \
              --builder ${{ steps.buildx.outputs.name }}                          \
              --platform linux/amd64,linux/arm64                                  \
              --target superchain                                                 \
              --cache-from type=local,src=/tmp/.buildx-cache                      \
              --cache-to type=local,dest=/tmp/.buildx-cache                       \
              --push                                                              \
              --build-arg BUILD_TIMESTAMP="${{ steps.build-time.outputs.value }}" \
              --build-arg COMMIT_ID='${{ github.sha }}'                           \
              --build-arg NODE_MAJOR_VERSION=${{ matrix.node }}                   \
              --tag "jsii/superchain:1-buster-slim"                               \
              -f superchain/Dockerfile                                            \
              .
          fi

      # Replace the cache so it does not grow forever (should always be last!)
      - name: Update layer cache
        if: always() && steps.should-run.outputs.result == 'true'
        run: |-
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-out /tmp/.buildx-cache
