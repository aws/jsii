# Workflows pertaining to the jsii/superchain Docker image
name: Docker Images

on:
  pull_request:
    branches: [main, release]
  push:
    branches: [main, release]

jobs:
  superchain:
    name: jsii/superchain
    runs-on: ubuntu-latest
    env:
      NODE_VERSIONS: "10 14"
    steps:
      - name: Check out
        uses: actions/checkout@v2

      # Determine if we should run the validation or not
      - name: Should this run?
        id: should-run
        run: |-
          if [ "${{ github.event_name }}" = "push" ]; then
            echo '‚èØ Triggered by "push" event'
            echo "::set-output name=result::true"
          elif [ "${{ github.base_ref }}" = "release" ]; then
            echo '‚èØ Triggered by "pull_request" event against "release"'
            echo "::set-output name=result::true"
          else
            # Fetch the base and head refs from origin so we can safely diff 'em
            git fetch --depth=1 --quiet origin ${{ github.base_ref }}
            # Otherwise, only run if the Dockerfile changed
            changed=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
            if grep Dockerfile <<< "${changed}" ; then
              echo '‚èØ Dockerfile changed'
              echo "::set-output name=result::true"
            else
              echo '‚è≠ Dockerfile not changed'
              echo "::set-output name=result::false"
            fi
          fi

      # We only authenticate to Docker for 'push' events, as 'pull_request' from forks will not have the secret
      #- name: Login to Docker
        #if: steps.should-run.outputs.result == 'true' && github.event_name == 'push'
        ## The DOCKER_CREDENTIALS secret is expected to contain a username:token pair
        #run: |-
          #docker login                                                          \
            #--username=$(cut -d: -f1 <<< '${{ secrets.DOCKER_CREDENTIALS }}')   \
            #--password=$(cut -d: -f2 <<< '${{ secrets.DOCKER_CREDENTIALS }}')
        ## Ensure we run with bash, because that's the syntax we're using here...
        #shell: bash

      - name: Build Image
        if: steps.should-run.outputs.result == 'true'
        run: |-
          for node_version in $NODE_VERSIONS; do
            echo "üèó Building jsii/superchain:node${node_version}-nightly"
            docker build                                                        \
              --pull                                                            \
              --build-arg BUILD_TIMESTAMP="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"    \
              --build-arg COMMIT_ID='${{ github.sha }}'                         \
              --build-arg NODE_VERSION=$node_version                            \
              --tag "jsii/superchain:node${node_version}-nightly"               \
              ./superchain
          done
      - name: Test Image
        if: steps.should-run.outputs.result == 'true'
        run: |-
          for node_version in $NODE_VERSIONS; do
            echo "üî¨ Testing jsii/superchain:node${node_version}-nightly"
            docker run                                                          \
              --rm                                                              \
              --tty                                                             \
              --network=host                                                    \
              -v${{ github.workspace }}:${{ github.workspace }}                 \
              -w${{ github.workspace }}                                         \
              "jsii/superchain:node${node_version}-nightly"                     \
              bash -c "yarn install --frozen-lockfile && yarn build && yarn test"
          done

      # Only when puhsing to main/release from now on
      - name: Publish (nightly)
        if: steps.should-run.outputs.result == 'true' && github.event_name == 'push' && github.ref != 'refs/heads/release'
        run: |-
          for node_version in $NODE_VERSIONS; do                                \
            docker push jsii/superchain:node${node_version}-nightly
          done
          # Alias 'node10-nightly' to regular 'nightly' for backwards compatibility
          docker tag jsii/superchain:node10-nightly jsii/superchain:nightly
          docker push jsii/superchain:nightly
      - name: Publish (latest)
        if: steps.should-run.outputs.result == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/release'
        run: |-
          # Alias 'nodeX-nightly's to 'nodeX', then push
          for node_version in $NODE_VERSIONS; do                                \
            docker tag jsii/superchain:node${node_version}-nightly jsii/superchain:node${node_version}
            docker push jsii/superchain:node${node_version}
          done
          # Alias 'node10' to 'latest' for backwards compatibility
          docker tag jsii/superchain:node10 jsii/superchain:latest
          docker push jsii/superchain:latest
