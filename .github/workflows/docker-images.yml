# Workflows pertaining to the jsii/superchain Docker image
name: Docker Images

on:
  pull_request:
    branches: [main, release]
  push:
    branches: [main, release]

env:
  DOCKER_BUILDKIT: 1

jobs:
  superchain:
    name: jsii/superchain
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['10', '14']
    env:
      # Node version whose images will be aliased to 'nightly' and 'latest'
      DEFAULT_NODE_MAJOR_VERSION: 10
    steps:
      - name: Check out
        uses: actions/checkout@v2.3.4

      # Determine if we should run the validation or not
      - name: Should this run?
        id: should-run
        run: |-
          if [ "${{ github.event_name }}" = "push" ]; then
            echo '⏯ Triggered by "push" event'
            echo "::set-output name=result::true"
          elif [ "${{ github.base_ref }}" = "release" ]; then
            echo '⏯ Triggered by "pull_request" event against "release"'
            echo "::set-output name=result::true"
          else
            # Fetch the base and head refs from origin so we can safely diff 'em
            git fetch --depth=1 --quiet origin ${{ github.base_ref }}
            # Otherwise, only run if the Dockerfile changed
            changed=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
            if grep Dockerfile <<< "${changed}" ; then
              echo '⏯ Dockerfile changed'
              echo "::set-output name=result::true"
            else
              echo '⏭ Dockerfile not changed'
              echo "::set-output name=result::false"
            fi
          fi

      # We only authenticate to Docker for 'push' events, as 'pull_request' from forks will not have the secret
      - name: Login to Docker
        if: steps.should-run.outputs.result == 'true' && github.event_name == 'push'
        # The DOCKER_CREDENTIALS secret is expected to contain a username:token pair
        run: |-
          docker login                                                          \
            --username=$(cut -d: -f1 <<< '${{ secrets.DOCKER_CREDENTIALS }}')   \
            --password=$(cut -d: -f2 <<< '${{ secrets.DOCKER_CREDENTIALS }}')
        # Ensure we run with bash, because that's the syntax we're using here...
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Set up docker buildx
        id: buildx
        if: steps.should-run.outputs.result == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Determine build time
        id: build-time
        if: steps.should-run.outputs.result == 'true'
        run: |-
          echo "::set-output name=value::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

      - name: Build Image
        if: steps.should-run.outputs.result == 'true'
        run: |-
          docker buildx build                                                   \
            --builder ${{ steps.buildx.outputs.name }}                          \
            --platform linux/amd64,linux/arm64                                  \
            --pull                                                              \
            --build-arg BUILD_TIMESTAMP="${{ steps.build-time.outputs.value }}" \
            --build-arg COMMIT_ID='${{ github.sha }}'                           \
            --build-arg NODE_MAJOR_VERSION=${{ matrix.node }}                   \
            -f superchain/Dockerfile                                            \
            .

      # Only when puhsing to main/release from now on
      - name: Publish (nightly)
        if: steps.should-run.outputs.result == 'true' && github.event_name == 'push' && github.ref != 'refs/heads/release'
        run: |-
          docker buildx build                                                   \
            --builder ${{ steps.buildx.outputs.name }}                          \
            --platform linux/amd64,linux/arm64                                  \
            --target superchain                                                 \
            --push                                                              \
            --pull                                                              \
            --build-arg BUILD_TIMESTAMP="${{ steps.build-time.outputs.value }}" \
            --build-arg COMMIT_ID='${{ github.sha }}'                           \
            --build-arg NODE_MAJOR_VERSION=${{ matrix.node }}                   \
            --tag "jsii/superchain:node${{ matrix.node }}-nightly"              \
            -f superchain/Dockerfile                                            \
            .

          # If the current version is the default version, also tag this with the unqualified ':nightly' label
          if [[ "${{ matrix.node }}" == "$DEFAULT_NODE_MAJOR_VERSION" ]]; then
            docker buildx build                                                   \
              --builder ${{ steps.buildx.outputs.name }}                          \
              --platform linux/amd64,linux/arm64                                  \
              --target superchain                                                 \
              --push                                                              \
              --pull                                                              \
              --build-arg BUILD_TIMESTAMP="${{ steps.build-time.outputs.value }}" \
              --build-arg COMMIT_ID='${{ github.sha }}'                           \
              --build-arg NODE_MAJOR_VERSION=${{ matrix.node }}                   \
              --tag "jsii/superchain:nightly"                                     \
              -f superchain/Dockerfile                                            \
              .
          fi
      - name: Publish (latest)
        if: steps.should-run.outputs.result == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/release'
        run: |-
          # Alias 'nodeX-nightly's to 'nodeX', then push
          docker buildx build                                                   \
            --builder ${{ steps.buildx.outputs.name }}                          \
            --platform linux/amd64,linux/arm64                                  \
            --target superchain                                                 \
            --push                                                              \
            --pull                                                              \
            --build-arg BUILD_TIMESTAMP="${{ steps.build-time.outputs.value }}" \
            --build-arg COMMIT_ID='${{ github.sha }}'                           \
            --build-arg NODE_MAJOR_VERSION=${{ matrix.node }}                   \
            --tag "jsii/superchain:node${{ matrix.node }}-buster-slim"          \
            -f superchain/Dockerfile                                            \
              .

          # If the current version is the default version, also tag this with the unqualified ':latest' label
          if [[ "${{ matrix.node }}" == "$DEFAULT_NODE_MAJOR_VERSION" ]]; then
            docker buildx build                                                   \
              --builder ${{ steps.buildx.outputs.name }}                          \
              --platform linux/amd64,linux/arm64                                  \
              --target superchain                                                 \
              --push                                                              \
              --pull                                                              \
              --build-arg BUILD_TIMESTAMP="${{ steps.build-time.outputs.value }}" \
              --build-arg COMMIT_ID='${{ github.sha }}'                           \
              --build-arg NODE_MAJOR_VERSION=${{ matrix.node }}                   \
              --tag "jsii/superchain:latest-buster-slim"                          \
              -f superchain/Dockerfile                                            \
              .
          fi
