# Workflows pertaining to the main/master branch
name: Main

on:
  pull_request:
    branches: [main, master, release]
  push:
    branches: [main, master, release]

env:
  DOTNET_NOLOGO: true

# This workflows currently has the following jobs:
# - build                   : Builds the source tree as-is
#   - test                  : Runs all unit tests against the build result
# - create-release-package  : Prepares a release package with the "real" version
#   - integ-test            : Runs integration tests against the release package

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # Set up all of our standard runtimes
      - name: Set up .NET 3.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Set up Node 12
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '12'
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
      - name: Install python3-venv
        run: sudo apt install -y python3-venv
      - name: Check out
        uses: actions/checkout@v2
      - name: Locate Caches
        id: cache-locations
        run: |-
          echo "::group::Upgrade pip"
          # Need to have PIP >= 20.1 for "pip cache dir" to work
          python3 -m pip install --upgrade pip
          echo "::endgroup"

          echo "::set-output name=pip-cache::$(python3 -m pip cache dir)"
          echo "::set-output name=yarn-cache::$(yarn cache dir)"
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |-
            ${{ steps.cache-locations.outputs.pip-cache }}
            ${{ steps.cache-locations.outputs.yarn-cache }}
            ~/.m2/repository
            !~/.m2/repository/software/amazon/jsii/
            ~/.nuget/packages
            !~/.nuget/packages/amazon.jsii.*
          key: ${{ runner.os }}-node@12-python@3.6-${{ hashFiles('**/yarn.lock', '**/Directory.Build.targets') }}
          restore-keys: |-
            ${{ runner.os }}-node@12-python@3.6-
            ${{ runner.os }}-node@12-
            ${{ runner.os }}-
      # Prepare dependencies and build
      - name: Install Dependencies
        run: |-
          yarn install --frozen-lockfile
      - name: Full Build
        run: |-
          yarn build
      - name: Prepare Artifact
        run: |-
          tar Jcvf ${{ runner.temp }}/built-tree.tar.xz                         \
            --exclude='**/.env'                                                 \
            --exclude='**/.nuget'                                               \
            --exclude='**/node_modules'                                         \
            --exclude='**/project/.m2/repository'                               \
            --exclude-tag-all='pyenv.cfg'                                       \
            --directory=${{ github.workspace }}                                 \
            .
      # Upload artifact (we'll tar it up to save time)
      - name: 'Upload Artifact: built-tree'
        uses: actions/upload-artifact@v2
        with:
          name: built-tree
          path: ${{ runner.temp }}/built-tree.tar.xz
      # Ensure working directory is clean (build should not change checked in source code)
      - name: 'Assert clean working directory'
        if: runner.os != 'Windows' # Windows will see artificial permission changes, so we ignore it
        run: |-
          # Make sure the index is up-to-date (git diff-index assumes it was done)
          git update-index --refresh
          # Check for modifications in tracked files
          git diff-index --exit-code --stat HEAD
          # Check for new untracked files
          untracked=$(git ls-files --others --exclude-standard)                 \
            && echo "Untracked files: ${untracked:-<none>}"                     \
            && test -z "${untracked}"
        shell: bash

  create-release-package:
    name: Create Release Package
    runs-on: ubuntu-latest
    steps:
      # Set up all of our standard runtimes
      - name: Set up .NET 3.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Set up Node 12
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '12'
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
      - name: Install python3-venv
        run: sudo apt install -y python3-venv
      - name: Check out
        uses: actions/checkout@v2
      - name: Locate Caches
        id: cache-locations
        run: |-
          echo "::group::Upgrade pip"
          # Need to have PIP >= 20.1 for "pip cache dir" to work
          python3 -m pip install --upgrade pip
          echo "::endgroup"

          echo "::set-output name=pip-cache::$(python3 -m pip cache dir)"
          echo "::set-output name=yarn-cache::$(yarn cache dir)"
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |-
            ${{ steps.cache-locations.outputs.pip-cache }}
            ${{ steps.cache-locations.outputs.yarn-cache }}
            ~/.m2/repository
            !~/.m2/repository/software/amazon/jsii/
            ~/.nuget/packages
            !~/.nuget/packages/amazon.jsii.*
          key: ${{ runner.os }}-node@12-python@3.6-${{ hashFiles('**/yarn.lock', '**/Directory.Build.targets') }}
          restore-keys: |-
            ${{ runner.os }}-node@12-python@3.6-
            ${{ runner.os }}-node@12-
            ${{ runner.os }}-
      # Prepare dependencies and build
      - name: Install Dependencies
        run: yarn install --frozen-lockfile
      # Determine a prerelease version (depending on whether this is a PR or Push event)
      - name: Standard Version (PR)
        if: github.event_name == 'pull_request'
        run: |-
          npx standard-version                                                                                          \
            --compareUrlFormat='{{host}}/{{owner}}/{{repository}}/compare/{{previousTag}}...${{ github.sha }}'          \
            --prerelease=pr${{ github.event.pull_request.number }}                                                      \
            --skip.commit
      - name: Standard Version (Nightly)
        if: github.event_name == 'push'
        run: |-
          npx standard-version                                                                                          \
            --compareUrlFormat='{{host}}/{{owner}}/{{repository}}/compare/{{previousTag}}...${{ github.sha }}'          \
            --prerelease=nightly.$(date -u +'%Y%m%d')                                                                   \
            --skip.commit
      # Now we'll be preparing a release package (with the "real" version)
      - name: Run "align-version.sh"
        run: |-
          ./scripts/align-version.sh
      - name: Full Build
        run: |-
          yarn build
      - name: Package
        run: |-
          yarn package
      # Upload artifacts
      - name: 'Upload Artifact: release-package'
        uses: actions/upload-artifact@v2
        with:
          name: release-package
          path: ${{ github.workspace }}/dist/

  test:
    name: Test (${{ matrix.os }} / dotnet ${{ matrix.dotnet }} / java ${{ matrix.java }} / node ${{ matrix.node }} / python ${{ matrix.python }})
    needs: build
    strategy:
      fail-fast: false
      matrix:
        # All currently supported node versions (Maintenance LTS, Active LTS, Current)
        dotnet: ['3.1.x']
        java: ['8']
        node: ['10', '12', '14']
        os: [ubuntu-latest]
        python: ['3.6']
        # Add specific combinations to be tested against "node 10" (to restrict cardinality)
        include:
          # Test using Windows
          - os: windows-latest
            dotnet: '3.1.x'
            java: '8'
            node: '10'
            python: '3.6'
          # Test using macOS
          - os: macos-latest
            dotnet: '3.1.x'
            java: '8'
            node: '10'
            python: '3.6'
          # Test alternate .NETs
          - java: '8'
            dotnet: '5.0.100-rc.2.20479.15' # Pre-release matching requires exact version for now
            node: '10'
            os: ubuntu-latest
            python: '3.6'
          # Test alternate Javas
          - java: '11'
            dotnet: '3.1.x'
            node: '10'
            os: ubuntu-latest
            python: '3.6'
          # Test alternate Pythons
          - python: '3.7'
            dotnet: '3.1.x'
            java: '8'
            node: '10'
            os: ubuntu-latest
          - python: '3.8'
            dotnet: '3.1.x'
            java: '8'
            node: '10'
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}

    steps:
      # Set up all of our standard runtimes (this is matrix-based)
      - name: Set up .NET ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - name: Set up Java ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Set up Node ${{ matrix.node }}
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ matrix.node }}
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: 'Linux: Install python3-venv'
        if: runner.os == 'Linux'
        run: sudo apt install -y python3-venv
      - name: 'Windows: Expose python3 command'
        if: runner.os == 'Windows'
        shell: bash
        run: cp ${pythonLocation}/python.exe ${pythonLocation}/python3.exe
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: built-tree
      # Put GitBash ahead of $PATH, so we avoid surprises due to bad tar, etc...
      # (technically a hack around https://github.com/actions/virtual-environments/issues/282)
      - name: 'Windows: Put GitBash ahead of $PATH'
        if: runner.os == 'Windows'
        run: |-
          echo "::add-path::C:\Program Files\Git\usr\bin"
      - name: Extract Artifact
        run: |-
          echo "::group::Untar Archive"
          tar Jxvf built-tree.tar.xz
          echo "::endgroup"

          rm built-tree.tar.xz
      - name: Locate Caches
        id: cache-locations
        run: |-
          echo "::group::Upgrade pip"
          # Need to have PIP >= 20.1 for "pip cache dir" to work
          python3 -m pip install --upgrade pip
          echo "::endgroup"

          echo "::set-output name=pip-cache::$(python3 -m pip cache dir)"
          echo "::set-output name=yarn-cache::$(yarn cache dir)"
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |-
            ${{ steps.cache-locations.outputs.pip-cache }}
            ${{ steps.cache-locations.outputs.yarn-cache }}
            ~/.m2/repository
            !~/.m2/repository/software/amazon/jsii/
            ~/.nuget/packages
            !~/.nuget/packages/amazon.jsii.*
          # Not including .NET / Java in the cache keys, those artifacts are SDK-version-independent
          key: ${{ runner.os }}-node@${{ matrix.node }}-python@${{ matrix.python }}-${{ hashFiles('**/yarn.lock', '**/Directory.Build.targets') }}
          restore-keys: |-
            ${{ runner.os }}-node@${{ matrix.node }}-python@${{ matrix.python }}-
            ${{ runner.os }}-node@${{ matrix.node }}-
            ${{ runner.os }}-
      # Run the tests
      - name: Install Dependencies
        run: |-
          yarn install --frozen-lockfile
      - name: Test
        run: |-
          yarn test
      # Ensure working directory is clean (tests should not change checked in source code)
      - name: 'Assert clean working directory'
        if: runner.os != 'Windows' # Windows will see artificial permission changes, so we ignore it
        run: |-
          # Make sure the index is up-to-date (git diff-index assumes it was done)
          git update-index --refresh
          # Check for modifications in tracked files
          git diff-index --exit-code --stat HEAD
          # Check for new untracked files
          untracked=$(git ls-files --others --exclude-standard)                 \
            && echo "Untracked files: ${untracked:-<none>}"                     \
            && test -z "${untracked}"
        shell: bash

  integ-test:
    name: Integration Test
    needs: create-release-package
    runs-on: ubuntu-latest

    steps:
      # Set up all of our standard runtimes
      - name: Set up .NET 3.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Set up Node 10
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '10'
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
      - name: Install python3-venv
        run: sudo apt install -y python3-venv
      - name: Checkout aws/aws-cdk
        uses: actions/checkout@v2
        with:
          path: aws-cdk
          ref: release
          repository: aws/aws-cdk
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: release-package
          path: ${{ runner.temp }}
      - name: Locate Caches
        id: cache-locations
        run: |-
          echo "::group::Upgrade pip"
          # Need to have PIP >= 20.1 for "pip cache dir" to work
          python3 -m pip install --upgrade pip
          echo "::endgroup"

          echo "::set-output name=pip-cache::$(python3 -m pip cache dir)"
          echo "::set-output name=yarn-cache::$(yarn cache dir)"
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |-
            ${{ steps.cache-locations.outputs.pip-cache }}
            ${{ steps.cache-locations.outputs.yarn-cache }}
            ~/.m2/repository
            ~/.nuget/packages
          key: ${{ runner.os }}-node@12-python@3.6-${{ hashFiles('**/yarn.lock', '${{ runner.temp }}/build.json') }}
          restore-keys: |-
            ${{ runner.os }}-node@12-python@3.6-
            ${{ runner.os }}-node@12-
            ${{ runner.os }}-
      # Run the integration test
      - name: Install Dependencies
        run: |-
          # Python tools used during packaging
          python3 -m pip install --upgrade pipx setuptools twine wheel

          # TypeScript project dependencies
          yarn install --frozen-lockfile
        working-directory: aws-cdk
      - name: Align Versions
        run: |-
          # Align versions so we don't build 0.0.0 (it'd fail pack.sh's validation)
          ./scripts/align-version.sh
        working-directory: aws-cdk
      - name: Install Tested Packages
        run: |-
          npm install --no-save ${{ runner.temp }}/js/*.tgz
          npm install --no-save ${{ runner.temp }}/private/*.tgz --only=prod

          # Setting environment variables for next jobs
          echo "::set-env name=JSII::${{ github.workspace }}/node_modules/.bin/jsii"
          echo "::set-env name=CDK_BUILD_JSII::${{ github.workspace }}/node_modules/.bin/jsii"

          echo "::set-env name=PACMAK::${{ github.workspace }}/node_modules/.bin/jsii-pacmak"
          echo "::set-env name=CDK_PACKAGE_JSII_PACMAK::${{ github.workspace }}/node_modules/.bin/jsii-pacmak"

          echo "::set-env name=ROSETTA::${{ github.workspace }}/node_modules/.bin/jsii-rosetta"
          echo "::set-env name=CDK_PACKAGE_JSII_ROSETTA::${{ github.workspace }}/node_modules/.bin/jsii-rosetta"

      - name: Integration Test (build)
        run: |-
          npx lerna run build --concurrency=2 --stream 2>&1 > ${{ runner.temp }}/build.log
        working-directory: aws-cdk
        env:
          # Make lots of memory available, aws-cdk-lib is __large__
          NODE_OPTIONS: --max-old-space-size=8192

        # In the interest of speed, only process monocdk-experiment / aws-cdk-lib from now on
      - name: Integration Test (jsii-rosetta)
        run: |-
          npx lerna exec --scope=monocdk-experiment --scope=aws-cdk-lib --stream --                 \
            ${ROSETTA}                                                                              \
            --compile                                                                               \
            --output ./dist/samples.tabl.json                                                       \
            --directory .                                                                           \
            --verbose                                                                               \
             2>&1 > ${{ runner.temp }}/rosetta.log
        working-directory: aws-cdk
      - name: Integration Test (jsii-pacmak)
        run: |-
          npx lerna exec --scope=monocdk-experiment --scope=aws-cdk-lib --stream --                 \
            ${PACMAK}                                                                               \
            --rosetta-tablet ./dist/samples.tabl.json                                               \
            --verbose                                                                               \
             2>&1 > ${{ runner.temp }}/pacmak.log
        working-directory: aws-cdk

      - name: Upload Logs
        # Upload logs whether successful or failed (not using always because we don't care about cancellations)
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: integ-test-logs
          path: ${{ runner.temp }}/*.log

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: integ-test-result
          path: |-
            ${{ github.workspace }}/aws-cdk/dist/
            ${{ github.workspace }}/aws-cdk/**/dist/
